#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Brickadia

#include "Basic.hpp"

#include "Brickadia_structs.hpp"
#include "JsonUtilities_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function Brickadia.BRPlacerComponent.GetPlacer
// 0x0008 (0x0008 - 0x0000)
struct BRPlacerComponent_GetPlacer final
{
public:
	class ABRTool_Placer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerComponent_GetPlacer) == 0x000008, "Wrong alignment on BRPlacerComponent_GetPlacer");
static_assert(sizeof(BRPlacerComponent_GetPlacer) == 0x000008, "Wrong size on BRPlacerComponent_GetPlacer");
static_assert(offsetof(BRPlacerComponent_GetPlacer, ReturnValue) == 0x000000, "Member 'BRPlacerComponent_GetPlacer::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlaceableActor.HandleAttachedPlacement
// 0x0010 (0x0010 - 0x0000)
struct BRPlaceableActor_HandleAttachedPlacement final
{
public:
	class AActor*                                 NewParentActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    NewParentComponent;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlaceableActor_HandleAttachedPlacement) == 0x000008, "Wrong alignment on BRPlaceableActor_HandleAttachedPlacement");
static_assert(sizeof(BRPlaceableActor_HandleAttachedPlacement) == 0x000010, "Wrong size on BRPlaceableActor_HandleAttachedPlacement");
static_assert(offsetof(BRPlaceableActor_HandleAttachedPlacement, NewParentActor) == 0x000000, "Member 'BRPlaceableActor_HandleAttachedPlacement::NewParentActor' has a wrong offset!");
static_assert(offsetof(BRPlaceableActor_HandleAttachedPlacement, NewParentComponent) == 0x000008, "Member 'BRPlaceableActor_HandleAttachedPlacement::NewParentComponent' has a wrong offset!");

// Function Brickadia.BRPlaceableActor.OverridePlacementPivots
// 0x00C8 (0x00C8 - 0x0000)
struct BRPlaceableActor_OverridePlacementPivots final
{
public:
	struct FBrickPlacementPivots                  AutoPivot;                                         // 0x0000(0x0064)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickPlacementPivots                  ReturnValue;                                       // 0x0064(0x0064)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlaceableActor_OverridePlacementPivots) == 0x000004, "Wrong alignment on BRPlaceableActor_OverridePlacementPivots");
static_assert(sizeof(BRPlaceableActor_OverridePlacementPivots) == 0x0000C8, "Wrong size on BRPlaceableActor_OverridePlacementPivots");
static_assert(offsetof(BRPlaceableActor_OverridePlacementPivots, AutoPivot) == 0x000000, "Member 'BRPlaceableActor_OverridePlacementPivots::AutoPivot' has a wrong offset!");
static_assert(offsetof(BRPlaceableActor_OverridePlacementPivots, ReturnValue) == 0x000064, "Member 'BRPlaceableActor_OverridePlacementPivots::ReturnValue' has a wrong offset!");

// Function Brickadia.BHBoxedBlueprintFunctionLibrary.BHBoxedValueIsValid
// 0x0038 (0x0038 - 0x0000)
struct BHBoxedBlueprintFunctionLibrary_BHBoxedValueIsValid final
{
public:
	struct FBHBoxed                               Value;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BHBoxedBlueprintFunctionLibrary_BHBoxedValueIsValid) == 0x000008, "Wrong alignment on BHBoxedBlueprintFunctionLibrary_BHBoxedValueIsValid");
static_assert(sizeof(BHBoxedBlueprintFunctionLibrary_BHBoxedValueIsValid) == 0x000038, "Wrong size on BHBoxedBlueprintFunctionLibrary_BHBoxedValueIsValid");
static_assert(offsetof(BHBoxedBlueprintFunctionLibrary_BHBoxedValueIsValid, Value) == 0x000000, "Member 'BHBoxedBlueprintFunctionLibrary_BHBoxedValueIsValid::Value' has a wrong offset!");
static_assert(offsetof(BHBoxedBlueprintFunctionLibrary_BHBoxedValueIsValid, ReturnValue) == 0x000030, "Member 'BHBoxedBlueprintFunctionLibrary_BHBoxedValueIsValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BHBoxedBlueprintFunctionLibrary.BHBoxValue
// 0x0038 (0x0038 - 0x0000)
struct BHBoxedBlueprintFunctionLibrary_BHBoxValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBHBoxed                               ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBoxedBlueprintFunctionLibrary_BHBoxValue) == 0x000008, "Wrong alignment on BHBoxedBlueprintFunctionLibrary_BHBoxValue");
static_assert(sizeof(BHBoxedBlueprintFunctionLibrary_BHBoxValue) == 0x000038, "Wrong size on BHBoxedBlueprintFunctionLibrary_BHBoxValue");
static_assert(offsetof(BHBoxedBlueprintFunctionLibrary_BHBoxValue, Value) == 0x000000, "Member 'BHBoxedBlueprintFunctionLibrary_BHBoxValue::Value' has a wrong offset!");
static_assert(offsetof(BHBoxedBlueprintFunctionLibrary_BHBoxValue, ReturnValue) == 0x000008, "Member 'BHBoxedBlueprintFunctionLibrary_BHBoxValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BHBoxedBlueprintFunctionLibrary.BHUnboxValue
// 0x0038 (0x0038 - 0x0000)
struct BHBoxedBlueprintFunctionLibrary_BHUnboxValue final
{
public:
	struct FBHBoxed                               InValue;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         OutValue;                                          // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BHBoxedBlueprintFunctionLibrary_BHUnboxValue) == 0x000008, "Wrong alignment on BHBoxedBlueprintFunctionLibrary_BHUnboxValue");
static_assert(sizeof(BHBoxedBlueprintFunctionLibrary_BHUnboxValue) == 0x000038, "Wrong size on BHBoxedBlueprintFunctionLibrary_BHUnboxValue");
static_assert(offsetof(BHBoxedBlueprintFunctionLibrary_BHUnboxValue, InValue) == 0x000000, "Member 'BHBoxedBlueprintFunctionLibrary_BHUnboxValue::InValue' has a wrong offset!");
static_assert(offsetof(BHBoxedBlueprintFunctionLibrary_BHUnboxValue, OutValue) == 0x000030, "Member 'BHBoxedBlueprintFunctionLibrary_BHUnboxValue::OutValue' has a wrong offset!");

// Function Brickadia.BHBlockEditorNodeWidget.HandleNodeChainVisual
// 0x0078 (0x0078 - 0x0000)
struct BHBlockEditorNodeWidget_HandleNodeChainVisual final
{
public:
	struct FBHResolvedTypeInfo                    Type;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bHasLastType;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBHResolvedTypeInfo                    LastType;                                          // 0x0040(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorNodeWidget_HandleNodeChainVisual) == 0x000008, "Wrong alignment on BHBlockEditorNodeWidget_HandleNodeChainVisual");
static_assert(sizeof(BHBlockEditorNodeWidget_HandleNodeChainVisual) == 0x000078, "Wrong size on BHBlockEditorNodeWidget_HandleNodeChainVisual");
static_assert(offsetof(BHBlockEditorNodeWidget_HandleNodeChainVisual, Type) == 0x000000, "Member 'BHBlockEditorNodeWidget_HandleNodeChainVisual::Type' has a wrong offset!");
static_assert(offsetof(BHBlockEditorNodeWidget_HandleNodeChainVisual, bHasLastType) == 0x000038, "Member 'BHBlockEditorNodeWidget_HandleNodeChainVisual::bHasLastType' has a wrong offset!");
static_assert(offsetof(BHBlockEditorNodeWidget_HandleNodeChainVisual, LastType) == 0x000040, "Member 'BHBlockEditorNodeWidget_HandleNodeChainVisual::LastType' has a wrong offset!");

// Function Brickadia.BRPlacerPlacementModeBase.IsSpacingAllowed
// 0x0001 (0x0001 - 0x0000)
struct BRPlacerPlacementModeBase_IsSpacingAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerPlacementModeBase_IsSpacingAllowed) == 0x000001, "Wrong alignment on BRPlacerPlacementModeBase_IsSpacingAllowed");
static_assert(sizeof(BRPlacerPlacementModeBase_IsSpacingAllowed) == 0x000001, "Wrong size on BRPlacerPlacementModeBase_IsSpacingAllowed");
static_assert(offsetof(BRPlacerPlacementModeBase_IsSpacingAllowed, ReturnValue) == 0x000000, "Member 'BRPlacerPlacementModeBase_IsSpacingAllowed::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback.GetPlacementProcBrickAsset
// 0x0008 (0x0008 - 0x0000)
struct BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback_GetPlacementProcBrickAsset final
{
public:
	class UProceduralBrick*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback_GetPlacementProcBrickAsset) == 0x000008, "Wrong alignment on BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback_GetPlacementProcBrickAsset");
static_assert(sizeof(BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback_GetPlacementProcBrickAsset) == 0x000008, "Wrong size on BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback_GetPlacementProcBrickAsset");
static_assert(offsetof(BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback_GetPlacementProcBrickAsset, ReturnValue) == 0x000000, "Member 'BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback_GetPlacementProcBrickAsset::ReturnValue' has a wrong offset!");

// Function Brickadia.BHBlockEditorLiteralNodeWidget.HandleColor
// 0x0010 (0x0010 - 0x0000)
struct BHBlockEditorLiteralNodeWidget_HandleColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorLiteralNodeWidget_HandleColor) == 0x000004, "Wrong alignment on BHBlockEditorLiteralNodeWidget_HandleColor");
static_assert(sizeof(BHBlockEditorLiteralNodeWidget_HandleColor) == 0x000010, "Wrong size on BHBlockEditorLiteralNodeWidget_HandleColor");
static_assert(offsetof(BHBlockEditorLiteralNodeWidget_HandleColor, Color) == 0x000000, "Member 'BHBlockEditorLiteralNodeWidget_HandleColor::Color' has a wrong offset!");

// Function Brickadia.BHBlockEditorLineDecorWidget.HandleColor
// 0x0010 (0x0010 - 0x0000)
struct BHBlockEditorLineDecorWidget_HandleColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorLineDecorWidget_HandleColor) == 0x000004, "Wrong alignment on BHBlockEditorLineDecorWidget_HandleColor");
static_assert(sizeof(BHBlockEditorLineDecorWidget_HandleColor) == 0x000010, "Wrong size on BHBlockEditorLineDecorWidget_HandleColor");
static_assert(offsetof(BHBlockEditorLineDecorWidget_HandleColor, Color) == 0x000000, "Member 'BHBlockEditorLineDecorWidget_HandleColor::Color' has a wrong offset!");

// Function Brickadia.BHBlockEditorLineWidget.HandleAltColor
// 0x0001 (0x0001 - 0x0000)
struct BHBlockEditorLineWidget_HandleAltColor final
{
public:
	bool                                          bIsOdd;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorLineWidget_HandleAltColor) == 0x000001, "Wrong alignment on BHBlockEditorLineWidget_HandleAltColor");
static_assert(sizeof(BHBlockEditorLineWidget_HandleAltColor) == 0x000001, "Wrong size on BHBlockEditorLineWidget_HandleAltColor");
static_assert(offsetof(BHBlockEditorLineWidget_HandleAltColor, bIsOdd) == 0x000000, "Member 'BHBlockEditorLineWidget_HandleAltColor::bIsOdd' has a wrong offset!");

// Function Brickadia.BHBlockEditorPropertyEntryWidget.HandleType
// 0x0038 (0x0038 - 0x0000)
struct BHBlockEditorPropertyEntryWidget_HandleType final
{
public:
	struct FBHResolvedTypeInfo                    Type;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorPropertyEntryWidget_HandleType) == 0x000008, "Wrong alignment on BHBlockEditorPropertyEntryWidget_HandleType");
static_assert(sizeof(BHBlockEditorPropertyEntryWidget_HandleType) == 0x000038, "Wrong size on BHBlockEditorPropertyEntryWidget_HandleType");
static_assert(offsetof(BHBlockEditorPropertyEntryWidget_HandleType, Type) == 0x000000, "Member 'BHBlockEditorPropertyEntryWidget_HandleType::Type' has a wrong offset!");

// Function Brickadia.BRPlacerControlMode_Delete.MulticastHammerBrick
// 0x0018 (0x0018 - 0x0000)
struct BRPlacerControlMode_Delete_MulticastHammerBrick final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerControlMode_Delete_MulticastHammerBrick) == 0x000008, "Wrong alignment on BRPlacerControlMode_Delete_MulticastHammerBrick");
static_assert(sizeof(BRPlacerControlMode_Delete_MulticastHammerBrick) == 0x000018, "Wrong size on BRPlacerControlMode_Delete_MulticastHammerBrick");
static_assert(offsetof(BRPlacerControlMode_Delete_MulticastHammerBrick, Location) == 0x000000, "Member 'BRPlacerControlMode_Delete_MulticastHammerBrick::Location' has a wrong offset!");

// Function Brickadia.BRPlacerControlMode_Delete.MulticastHammerEntity
// 0x0018 (0x0018 - 0x0000)
struct BRPlacerControlMode_Delete_MulticastHammerEntity final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerControlMode_Delete_MulticastHammerEntity) == 0x000008, "Wrong alignment on BRPlacerControlMode_Delete_MulticastHammerEntity");
static_assert(sizeof(BRPlacerControlMode_Delete_MulticastHammerEntity) == 0x000018, "Wrong size on BRPlacerControlMode_Delete_MulticastHammerEntity");
static_assert(offsetof(BRPlacerControlMode_Delete_MulticastHammerEntity, Location) == 0x000000, "Member 'BRPlacerControlMode_Delete_MulticastHammerEntity::Location' has a wrong offset!");

// Function Brickadia.BRPlacerControlMode_Delete.ServerHammerBrick
// 0x0008 (0x0008 - 0x0000)
struct BRPlacerControlMode_Delete_ServerHammerBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerControlMode_Delete_ServerHammerBrick) == 0x000004, "Wrong alignment on BRPlacerControlMode_Delete_ServerHammerBrick");
static_assert(sizeof(BRPlacerControlMode_Delete_ServerHammerBrick) == 0x000008, "Wrong size on BRPlacerControlMode_Delete_ServerHammerBrick");
static_assert(offsetof(BRPlacerControlMode_Delete_ServerHammerBrick, BrickHandle) == 0x000000, "Member 'BRPlacerControlMode_Delete_ServerHammerBrick::BrickHandle' has a wrong offset!");

// Function Brickadia.BRPlacerControlMode_Delete.ServerHammerEntity
// 0x0008 (0x0008 - 0x0000)
struct BRPlacerControlMode_Delete_ServerHammerEntity final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerControlMode_Delete_ServerHammerEntity) == 0x000008, "Wrong alignment on BRPlacerControlMode_Delete_ServerHammerEntity");
static_assert(sizeof(BRPlacerControlMode_Delete_ServerHammerEntity) == 0x000008, "Wrong size on BRPlacerControlMode_Delete_ServerHammerEntity");
static_assert(offsetof(BRPlacerControlMode_Delete_ServerHammerEntity, ENTITY) == 0x000000, "Member 'BRPlacerControlMode_Delete_ServerHammerEntity::ENTITY' has a wrong offset!");

// Function Brickadia.BHBlockEditorRoutinePropertyEntryWidget.HandleType
// 0x0038 (0x0038 - 0x0000)
struct BHBlockEditorRoutinePropertyEntryWidget_HandleType final
{
public:
	struct FBHResolvedTypeInfo                    Type;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorRoutinePropertyEntryWidget_HandleType) == 0x000008, "Wrong alignment on BHBlockEditorRoutinePropertyEntryWidget_HandleType");
static_assert(sizeof(BHBlockEditorRoutinePropertyEntryWidget_HandleType) == 0x000038, "Wrong size on BHBlockEditorRoutinePropertyEntryWidget_HandleType");
static_assert(offsetof(BHBlockEditorRoutinePropertyEntryWidget_HandleType, Type) == 0x000000, "Member 'BHBlockEditorRoutinePropertyEntryWidget_HandleType::Type' has a wrong offset!");

// Function Brickadia.BHBlockEditorReturnValueWidget.HandleType
// 0x0038 (0x0038 - 0x0000)
struct BHBlockEditorReturnValueWidget_HandleType final
{
public:
	struct FBHResolvedTypeInfo                    Type;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorReturnValueWidget_HandleType) == 0x000008, "Wrong alignment on BHBlockEditorReturnValueWidget_HandleType");
static_assert(sizeof(BHBlockEditorReturnValueWidget_HandleType) == 0x000038, "Wrong size on BHBlockEditorReturnValueWidget_HandleType");
static_assert(offsetof(BHBlockEditorReturnValueWidget_HandleType, Type) == 0x000000, "Member 'BHBlockEditorReturnValueWidget_HandleType::Type' has a wrong offset!");

// Function Brickadia.BHBlockEditorRoutineEntryWidget.HandleType
// 0x0040 (0x0040 - 0x0000)
struct BHBlockEditorRoutineEntryWidget_HandleType final
{
public:
	struct FBHResolvedTypeInfo                    Type;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsFunction;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BHBlockEditorRoutineEntryWidget_HandleType) == 0x000008, "Wrong alignment on BHBlockEditorRoutineEntryWidget_HandleType");
static_assert(sizeof(BHBlockEditorRoutineEntryWidget_HandleType) == 0x000040, "Wrong size on BHBlockEditorRoutineEntryWidget_HandleType");
static_assert(offsetof(BHBlockEditorRoutineEntryWidget_HandleType, Type) == 0x000000, "Member 'BHBlockEditorRoutineEntryWidget_HandleType::Type' has a wrong offset!");
static_assert(offsetof(BHBlockEditorRoutineEntryWidget_HandleType, bIsFunction) == 0x000038, "Member 'BHBlockEditorRoutineEntryWidget_HandleType::bIsFunction' has a wrong offset!");

// Function Brickadia.BRInputIconFallbackPartWidget.SetKey
// 0x0018 (0x0018 - 0x0000)
struct BRInputIconFallbackPartWidget_SetKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInputIconFallbackPartWidget_SetKey) == 0x000008, "Wrong alignment on BRInputIconFallbackPartWidget_SetKey");
static_assert(sizeof(BRInputIconFallbackPartWidget_SetKey) == 0x000018, "Wrong size on BRInputIconFallbackPartWidget_SetKey");
static_assert(offsetof(BRInputIconFallbackPartWidget_SetKey, InKey) == 0x000000, "Member 'BRInputIconFallbackPartWidget_SetKey::InKey' has a wrong offset!");

// Function Brickadia.BRDialogBase.OnBackgroundMouseButtonDoubleClick
// 0x0078 (0x0078 - 0x0000)
struct BRDialogBase_OnBackgroundMouseButtonDoubleClick final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_OnBackgroundMouseButtonDoubleClick) == 0x000008, "Wrong alignment on BRDialogBase_OnBackgroundMouseButtonDoubleClick");
static_assert(sizeof(BRDialogBase_OnBackgroundMouseButtonDoubleClick) == 0x000078, "Wrong size on BRDialogBase_OnBackgroundMouseButtonDoubleClick");
static_assert(offsetof(BRDialogBase_OnBackgroundMouseButtonDoubleClick, MouseEvent) == 0x000000, "Member 'BRDialogBase_OnBackgroundMouseButtonDoubleClick::MouseEvent' has a wrong offset!");

// Function Brickadia.BRDialogBase.OnBackgroundMouseButtonDown
// 0x0078 (0x0078 - 0x0000)
struct BRDialogBase_OnBackgroundMouseButtonDown final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_OnBackgroundMouseButtonDown) == 0x000008, "Wrong alignment on BRDialogBase_OnBackgroundMouseButtonDown");
static_assert(sizeof(BRDialogBase_OnBackgroundMouseButtonDown) == 0x000078, "Wrong size on BRDialogBase_OnBackgroundMouseButtonDown");
static_assert(offsetof(BRDialogBase_OnBackgroundMouseButtonDown, MouseEvent) == 0x000000, "Member 'BRDialogBase_OnBackgroundMouseButtonDown::MouseEvent' has a wrong offset!");

// Function Brickadia.BRDialogBase.OnBackgroundMouseButtonUp
// 0x0078 (0x0078 - 0x0000)
struct BRDialogBase_OnBackgroundMouseButtonUp final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_OnBackgroundMouseButtonUp) == 0x000008, "Wrong alignment on BRDialogBase_OnBackgroundMouseButtonUp");
static_assert(sizeof(BRDialogBase_OnBackgroundMouseButtonUp) == 0x000078, "Wrong size on BRDialogBase_OnBackgroundMouseButtonUp");
static_assert(offsetof(BRDialogBase_OnBackgroundMouseButtonUp, MouseEvent) == 0x000000, "Member 'BRDialogBase_OnBackgroundMouseButtonUp::MouseEvent' has a wrong offset!");

// Function Brickadia.BRDialogBase.BackgroundAllowsToolFreeMouse
// 0x0001 (0x0001 - 0x0000)
struct BRDialogBase_BackgroundAllowsToolFreeMouse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_BackgroundAllowsToolFreeMouse) == 0x000001, "Wrong alignment on BRDialogBase_BackgroundAllowsToolFreeMouse");
static_assert(sizeof(BRDialogBase_BackgroundAllowsToolFreeMouse) == 0x000001, "Wrong size on BRDialogBase_BackgroundAllowsToolFreeMouse");
static_assert(offsetof(BRDialogBase_BackgroundAllowsToolFreeMouse, ReturnValue) == 0x000000, "Member 'BRDialogBase_BackgroundAllowsToolFreeMouse::ReturnValue' has a wrong offset!");

// Function Brickadia.BRDialogBase.GetDialogState
// 0x0001 (0x0001 - 0x0000)
struct BRDialogBase_GetDialogState final
{
public:
	EBRDialogState                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_GetDialogState) == 0x000001, "Wrong alignment on BRDialogBase_GetDialogState");
static_assert(sizeof(BRDialogBase_GetDialogState) == 0x000001, "Wrong size on BRDialogBase_GetDialogState");
static_assert(offsetof(BRDialogBase_GetDialogState, ReturnValue) == 0x000000, "Member 'BRDialogBase_GetDialogState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRDialogBase.GetHUD
// 0x0008 (0x0008 - 0x0000)
struct BRDialogBase_GetHUD final
{
public:
	class ABRHUD*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_GetHUD) == 0x000008, "Wrong alignment on BRDialogBase_GetHUD");
static_assert(sizeof(BRDialogBase_GetHUD) == 0x000008, "Wrong size on BRDialogBase_GetHUD");
static_assert(offsetof(BRDialogBase_GetHUD, ReturnValue) == 0x000000, "Member 'BRDialogBase_GetHUD::ReturnValue' has a wrong offset!");

// Function Brickadia.BRDialogBase.IsHidden
// 0x0001 (0x0001 - 0x0000)
struct BRDialogBase_IsHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_IsHidden) == 0x000001, "Wrong alignment on BRDialogBase_IsHidden");
static_assert(sizeof(BRDialogBase_IsHidden) == 0x000001, "Wrong size on BRDialogBase_IsHidden");
static_assert(offsetof(BRDialogBase_IsHidden, ReturnValue) == 0x000000, "Member 'BRDialogBase_IsHidden::ReturnValue' has a wrong offset!");

// Function Brickadia.BRDialogBase.IsHiddenOrHiding
// 0x0001 (0x0001 - 0x0000)
struct BRDialogBase_IsHiddenOrHiding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_IsHiddenOrHiding) == 0x000001, "Wrong alignment on BRDialogBase_IsHiddenOrHiding");
static_assert(sizeof(BRDialogBase_IsHiddenOrHiding) == 0x000001, "Wrong size on BRDialogBase_IsHiddenOrHiding");
static_assert(offsetof(BRDialogBase_IsHiddenOrHiding, ReturnValue) == 0x000000, "Member 'BRDialogBase_IsHiddenOrHiding::ReturnValue' has a wrong offset!");

// Function Brickadia.BRDialogBase.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct BRDialogBase_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_IsOpen) == 0x000001, "Wrong alignment on BRDialogBase_IsOpen");
static_assert(sizeof(BRDialogBase_IsOpen) == 0x000001, "Wrong size on BRDialogBase_IsOpen");
static_assert(offsetof(BRDialogBase_IsOpen, ReturnValue) == 0x000000, "Member 'BRDialogBase_IsOpen::ReturnValue' has a wrong offset!");

// Function Brickadia.BRDialogBase.IsOpenOrOpening
// 0x0001 (0x0001 - 0x0000)
struct BRDialogBase_IsOpenOrOpening final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_IsOpenOrOpening) == 0x000001, "Wrong alignment on BRDialogBase_IsOpenOrOpening");
static_assert(sizeof(BRDialogBase_IsOpenOrOpening) == 0x000001, "Wrong size on BRDialogBase_IsOpenOrOpening");
static_assert(offsetof(BRDialogBase_IsOpenOrOpening, ReturnValue) == 0x000000, "Member 'BRDialogBase_IsOpenOrOpening::ReturnValue' has a wrong offset!");

// Function Brickadia.BRDialogBase.IsTopmost
// 0x0001 (0x0001 - 0x0000)
struct BRDialogBase_IsTopmost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogBase_IsTopmost) == 0x000001, "Wrong alignment on BRDialogBase_IsTopmost");
static_assert(sizeof(BRDialogBase_IsTopmost) == 0x000001, "Wrong size on BRDialogBase_IsTopmost");
static_assert(offsetof(BRDialogBase_IsTopmost, ReturnValue) == 0x000000, "Member 'BRDialogBase_IsTopmost::ReturnValue' has a wrong offset!");

// Function Brickadia.BHBlockEditorWidget.HandleBehaviorNameText
// 0x0010 (0x0010 - 0x0000)
struct BHBlockEditorWidget_HandleBehaviorNameText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorWidget_HandleBehaviorNameText) == 0x000008, "Wrong alignment on BHBlockEditorWidget_HandleBehaviorNameText");
static_assert(sizeof(BHBlockEditorWidget_HandleBehaviorNameText) == 0x000010, "Wrong size on BHBlockEditorWidget_HandleBehaviorNameText");
static_assert(offsetof(BHBlockEditorWidget_HandleBehaviorNameText, Text) == 0x000000, "Member 'BHBlockEditorWidget_HandleBehaviorNameText::Text' has a wrong offset!");

// Function Brickadia.BHBlockEditorWidget.Setup
// 0x0008 (0x0008 - 0x0000)
struct BHBlockEditorWidget_Setup final
{
public:
	class UBehaviorBase*                          Behavior;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorWidget_Setup) == 0x000008, "Wrong alignment on BHBlockEditorWidget_Setup");
static_assert(sizeof(BHBlockEditorWidget_Setup) == 0x000008, "Wrong size on BHBlockEditorWidget_Setup");
static_assert(offsetof(BHBlockEditorWidget_Setup, Behavior) == 0x000000, "Member 'BHBlockEditorWidget_Setup::Behavior' has a wrong offset!");

// Function Brickadia.BHBlockEditorLiteralValueWidgetBase.HandleChanged
// 0x0030 (0x0030 - 0x0000)
struct BHBlockEditorLiteralValueWidgetBase_HandleChanged final
{
public:
	struct FBHBoxed                               Value;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorLiteralValueWidgetBase_HandleChanged) == 0x000008, "Wrong alignment on BHBlockEditorLiteralValueWidgetBase_HandleChanged");
static_assert(sizeof(BHBlockEditorLiteralValueWidgetBase_HandleChanged) == 0x000030, "Wrong size on BHBlockEditorLiteralValueWidgetBase_HandleChanged");
static_assert(offsetof(BHBlockEditorLiteralValueWidgetBase_HandleChanged, Value) == 0x000000, "Member 'BHBlockEditorLiteralValueWidgetBase_HandleChanged::Value' has a wrong offset!");

// Function Brickadia.BHBlockEditorLiteralValueWidgetBase.Setup
// 0x0030 (0x0030 - 0x0000)
struct BHBlockEditorLiteralValueWidgetBase_Setup final
{
public:
	struct FBHBoxed                               Value;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorLiteralValueWidgetBase_Setup) == 0x000008, "Wrong alignment on BHBlockEditorLiteralValueWidgetBase_Setup");
static_assert(sizeof(BHBlockEditorLiteralValueWidgetBase_Setup) == 0x000030, "Wrong size on BHBlockEditorLiteralValueWidgetBase_Setup");
static_assert(offsetof(BHBlockEditorLiteralValueWidgetBase_Setup, Value) == 0x000000, "Member 'BHBlockEditorLiteralValueWidgetBase_Setup::Value' has a wrong offset!");

// Function Brickadia.BHBlockEditorNodeElementWidget_ArgSlot.HandleTypeColor
// 0x0010 (0x0010 - 0x0000)
struct BHBlockEditorNodeElementWidget_ArgSlot_HandleTypeColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorNodeElementWidget_ArgSlot_HandleTypeColor) == 0x000004, "Wrong alignment on BHBlockEditorNodeElementWidget_ArgSlot_HandleTypeColor");
static_assert(sizeof(BHBlockEditorNodeElementWidget_ArgSlot_HandleTypeColor) == 0x000010, "Wrong size on BHBlockEditorNodeElementWidget_ArgSlot_HandleTypeColor");
static_assert(offsetof(BHBlockEditorNodeElementWidget_ArgSlot_HandleTypeColor, Color) == 0x000000, "Member 'BHBlockEditorNodeElementWidget_ArgSlot_HandleTypeColor::Color' has a wrong offset!");

// Function Brickadia.BHBlockEditorNodeElementWidget_DestVarSlot.HandleTypeColor
// 0x0010 (0x0010 - 0x0000)
struct BHBlockEditorNodeElementWidget_DestVarSlot_HandleTypeColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHBlockEditorNodeElementWidget_DestVarSlot_HandleTypeColor) == 0x000004, "Wrong alignment on BHBlockEditorNodeElementWidget_DestVarSlot_HandleTypeColor");
static_assert(sizeof(BHBlockEditorNodeElementWidget_DestVarSlot_HandleTypeColor) == 0x000010, "Wrong size on BHBlockEditorNodeElementWidget_DestVarSlot_HandleTypeColor");
static_assert(offsetof(BHBlockEditorNodeElementWidget_DestVarSlot_HandleTypeColor, Color) == 0x000000, "Member 'BHBlockEditorNodeElementWidget_DestVarSlot_HandleTypeColor::Color' has a wrong offset!");

// Function Brickadia.BrickAsset.GetDisplayBrickType
// 0x0008 (0x0008 - 0x0000)
struct BrickAsset_GetDisplayBrickType final
{
public:
	class UBrickType*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickAsset_GetDisplayBrickType) == 0x000008, "Wrong alignment on BrickAsset_GetDisplayBrickType");
static_assert(sizeof(BrickAsset_GetDisplayBrickType) == 0x000008, "Wrong size on BrickAsset_GetDisplayBrickType");
static_assert(offsetof(BrickAsset_GetDisplayBrickType, ReturnValue) == 0x000000, "Member 'BrickAsset_GetDisplayBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGuideToolHelpers.GenerateCircle
// 0x0010 (0x0010 - 0x0000)
struct BRGuideToolHelpers_GenerateCircle final
{
public:
	class UInstancedStaticMeshComponent*          InstancedStaticMesh;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGuideToolHelpers_GenerateCircle) == 0x000008, "Wrong alignment on BRGuideToolHelpers_GenerateCircle");
static_assert(sizeof(BRGuideToolHelpers_GenerateCircle) == 0x000010, "Wrong size on BRGuideToolHelpers_GenerateCircle");
static_assert(offsetof(BRGuideToolHelpers_GenerateCircle, InstancedStaticMesh) == 0x000000, "Member 'BRGuideToolHelpers_GenerateCircle::InstancedStaticMesh' has a wrong offset!");
static_assert(offsetof(BRGuideToolHelpers_GenerateCircle, Radius) == 0x000008, "Member 'BRGuideToolHelpers_GenerateCircle::Radius' has a wrong offset!");

// Function Brickadia.BRChangeDisplayNameAsyncAction.AsyncChangeDisplayName
// 0x0020 (0x0020 - 0x0000)
struct BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewDisplayName;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRChangeDisplayNameAsyncAction*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName) == 0x000008, "Wrong alignment on BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName");
static_assert(sizeof(BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName) == 0x000020, "Wrong size on BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName");
static_assert(offsetof(BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName, WorldContextObject) == 0x000000, "Member 'BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName, NewDisplayName) == 0x000008, "Member 'BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName::NewDisplayName' has a wrong offset!");
static_assert(offsetof(BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName, ReturnValue) == 0x000018, "Member 'BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetIsJumping
// 0x0001 (0x0001 - 0x0000)
struct BRAnimInstance_GetIsJumping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetIsJumping) == 0x000001, "Wrong alignment on BRAnimInstance_GetIsJumping");
static_assert(sizeof(BRAnimInstance_GetIsJumping) == 0x000001, "Wrong size on BRAnimInstance_GetIsJumping");
static_assert(offsetof(BRAnimInstance_GetIsJumping, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetIsJumping::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetIsJumpingAlternate
// 0x0001 (0x0001 - 0x0000)
struct BRAnimInstance_GetIsJumpingAlternate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetIsJumpingAlternate) == 0x000001, "Wrong alignment on BRAnimInstance_GetIsJumpingAlternate");
static_assert(sizeof(BRAnimInstance_GetIsJumpingAlternate) == 0x000001, "Wrong size on BRAnimInstance_GetIsJumpingAlternate");
static_assert(offsetof(BRAnimInstance_GetIsJumpingAlternate, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetIsJumpingAlternate::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetLegRotatorL
// 0x0018 (0x0018 - 0x0000)
struct BRAnimInstance_GetLegRotatorL final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetLegRotatorL) == 0x000008, "Wrong alignment on BRAnimInstance_GetLegRotatorL");
static_assert(sizeof(BRAnimInstance_GetLegRotatorL) == 0x000018, "Wrong size on BRAnimInstance_GetLegRotatorL");
static_assert(offsetof(BRAnimInstance_GetLegRotatorL, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetLegRotatorL::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetLegRotatorR
// 0x0018 (0x0018 - 0x0000)
struct BRAnimInstance_GetLegRotatorR final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetLegRotatorR) == 0x000008, "Wrong alignment on BRAnimInstance_GetLegRotatorR");
static_assert(sizeof(BRAnimInstance_GetLegRotatorR) == 0x000018, "Wrong size on BRAnimInstance_GetLegRotatorR");
static_assert(offsetof(BRAnimInstance_GetLegRotatorR, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetLegRotatorR::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetAimDeltaPitch
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetAimDeltaPitch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetAimDeltaPitch) == 0x000004, "Wrong alignment on BRAnimInstance_GetAimDeltaPitch");
static_assert(sizeof(BRAnimInstance_GetAimDeltaPitch) == 0x000004, "Wrong size on BRAnimInstance_GetAimDeltaPitch");
static_assert(offsetof(BRAnimInstance_GetAimDeltaPitch, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetAimDeltaPitch::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetAimDeltaYaw
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetAimDeltaYaw final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetAimDeltaYaw) == 0x000004, "Wrong alignment on BRAnimInstance_GetAimDeltaYaw");
static_assert(sizeof(BRAnimInstance_GetAimDeltaYaw) == 0x000004, "Wrong size on BRAnimInstance_GetAimDeltaYaw");
static_assert(offsetof(BRAnimInstance_GetAimDeltaYaw, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetAimDeltaYaw::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetAimPitch
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetAimPitch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetAimPitch) == 0x000004, "Wrong alignment on BRAnimInstance_GetAimPitch");
static_assert(sizeof(BRAnimInstance_GetAimPitch) == 0x000004, "Wrong size on BRAnimInstance_GetAimPitch");
static_assert(offsetof(BRAnimInstance_GetAimPitch, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetAimPitch::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetBaseAimPitch
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetBaseAimPitch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetBaseAimPitch) == 0x000004, "Wrong alignment on BRAnimInstance_GetBaseAimPitch");
static_assert(sizeof(BRAnimInstance_GetBaseAimPitch) == 0x000004, "Wrong size on BRAnimInstance_GetBaseAimPitch");
static_assert(offsetof(BRAnimInstance_GetBaseAimPitch, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetBaseAimPitch::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetCursorInfluenceAngle
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetCursorInfluenceAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetCursorInfluenceAngle) == 0x000004, "Wrong alignment on BRAnimInstance_GetCursorInfluenceAngle");
static_assert(sizeof(BRAnimInstance_GetCursorInfluenceAngle) == 0x000004, "Wrong size on BRAnimInstance_GetCursorInfluenceAngle");
static_assert(offsetof(BRAnimInstance_GetCursorInfluenceAngle, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetCursorInfluenceAngle::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetForwardSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetForwardSpeed) == 0x000004, "Wrong alignment on BRAnimInstance_GetForwardSpeed");
static_assert(sizeof(BRAnimInstance_GetForwardSpeed) == 0x000004, "Wrong size on BRAnimInstance_GetForwardSpeed");
static_assert(offsetof(BRAnimInstance_GetForwardSpeed, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetForwardSpeed::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetForwardSpeedWithRootAngle
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetForwardSpeedWithRootAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetForwardSpeedWithRootAngle) == 0x000004, "Wrong alignment on BRAnimInstance_GetForwardSpeedWithRootAngle");
static_assert(sizeof(BRAnimInstance_GetForwardSpeedWithRootAngle) == 0x000004, "Wrong size on BRAnimInstance_GetForwardSpeedWithRootAngle");
static_assert(offsetof(BRAnimInstance_GetForwardSpeedWithRootAngle, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetForwardSpeedWithRootAngle::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetHasPhysicsGrabbedObject
// 0x0001 (0x0001 - 0x0000)
struct BRAnimInstance_GetHasPhysicsGrabbedObject final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetHasPhysicsGrabbedObject) == 0x000001, "Wrong alignment on BRAnimInstance_GetHasPhysicsGrabbedObject");
static_assert(sizeof(BRAnimInstance_GetHasPhysicsGrabbedObject) == 0x000001, "Wrong size on BRAnimInstance_GetHasPhysicsGrabbedObject");
static_assert(offsetof(BRAnimInstance_GetHasPhysicsGrabbedObject, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetHasPhysicsGrabbedObject::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetIsCrouchingWithAimOffset
// 0x0001 (0x0001 - 0x0000)
struct BRAnimInstance_GetIsCrouchingWithAimOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetIsCrouchingWithAimOffset) == 0x000001, "Wrong alignment on BRAnimInstance_GetIsCrouchingWithAimOffset");
static_assert(sizeof(BRAnimInstance_GetIsCrouchingWithAimOffset) == 0x000001, "Wrong size on BRAnimInstance_GetIsCrouchingWithAimOffset");
static_assert(offsetof(BRAnimInstance_GetIsCrouchingWithAimOffset, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetIsCrouchingWithAimOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetIsMoving
// 0x0001 (0x0001 - 0x0000)
struct BRAnimInstance_GetIsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetIsMoving) == 0x000001, "Wrong alignment on BRAnimInstance_GetIsMoving");
static_assert(sizeof(BRAnimInstance_GetIsMoving) == 0x000001, "Wrong size on BRAnimInstance_GetIsMoving");
static_assert(offsetof(BRAnimInstance_GetIsMoving, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetIsMoving::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetItemAimLocation
// 0x0018 (0x0018 - 0x0000)
struct BRAnimInstance_GetItemAimLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetItemAimLocation) == 0x000008, "Wrong alignment on BRAnimInstance_GetItemAimLocation");
static_assert(sizeof(BRAnimInstance_GetItemAimLocation) == 0x000018, "Wrong size on BRAnimInstance_GetItemAimLocation");
static_assert(offsetof(BRAnimInstance_GetItemAimLocation, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetItemAimLocation::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetLeanPitch
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetLeanPitch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetLeanPitch) == 0x000004, "Wrong alignment on BRAnimInstance_GetLeanPitch");
static_assert(sizeof(BRAnimInstance_GetLeanPitch) == 0x000004, "Wrong size on BRAnimInstance_GetLeanPitch");
static_assert(offsetof(BRAnimInstance_GetLeanPitch, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetLeanPitch::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetLeanRoll
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetLeanRoll final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetLeanRoll) == 0x000004, "Wrong alignment on BRAnimInstance_GetLeanRoll");
static_assert(sizeof(BRAnimInstance_GetLeanRoll) == 0x000004, "Wrong size on BRAnimInstance_GetLeanRoll");
static_assert(offsetof(BRAnimInstance_GetLeanRoll, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetLeanRoll::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetMuzzleAimOffset
// 0x0018 (0x0018 - 0x0000)
struct BRAnimInstance_GetMuzzleAimOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetMuzzleAimOffset) == 0x000008, "Wrong alignment on BRAnimInstance_GetMuzzleAimOffset");
static_assert(sizeof(BRAnimInstance_GetMuzzleAimOffset) == 0x000018, "Wrong size on BRAnimInstance_GetMuzzleAimOffset");
static_assert(offsetof(BRAnimInstance_GetMuzzleAimOffset, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetMuzzleAimOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetRootAngle
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetRootAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetRootAngle) == 0x000004, "Wrong alignment on BRAnimInstance_GetRootAngle");
static_assert(sizeof(BRAnimInstance_GetRootAngle) == 0x000004, "Wrong size on BRAnimInstance_GetRootAngle");
static_assert(offsetof(BRAnimInstance_GetRootAngle, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetRootAngle::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetSpeed
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetSpeed) == 0x000004, "Wrong alignment on BRAnimInstance_GetSpeed");
static_assert(sizeof(BRAnimInstance_GetSpeed) == 0x000004, "Wrong size on BRAnimInstance_GetSpeed");
static_assert(offsetof(BRAnimInstance_GetSpeed, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetSpeed::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetStrafeSpeed
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetStrafeSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetStrafeSpeed) == 0x000004, "Wrong alignment on BRAnimInstance_GetStrafeSpeed");
static_assert(sizeof(BRAnimInstance_GetStrafeSpeed) == 0x000004, "Wrong size on BRAnimInstance_GetStrafeSpeed");
static_assert(offsetof(BRAnimInstance_GetStrafeSpeed, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetStrafeSpeed::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetStrafeSpeedWithRootAngle
// 0x0004 (0x0004 - 0x0000)
struct BRAnimInstance_GetStrafeSpeedWithRootAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetStrafeSpeedWithRootAngle) == 0x000004, "Wrong alignment on BRAnimInstance_GetStrafeSpeedWithRootAngle");
static_assert(sizeof(BRAnimInstance_GetStrafeSpeedWithRootAngle) == 0x000004, "Wrong size on BRAnimInstance_GetStrafeSpeedWithRootAngle");
static_assert(offsetof(BRAnimInstance_GetStrafeSpeedWithRootAngle, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetStrafeSpeedWithRootAngle::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetUseAimOffset
// 0x0001 (0x0001 - 0x0000)
struct BRAnimInstance_GetUseAimOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetUseAimOffset) == 0x000001, "Wrong alignment on BRAnimInstance_GetUseAimOffset");
static_assert(sizeof(BRAnimInstance_GetUseAimOffset) == 0x000001, "Wrong size on BRAnimInstance_GetUseAimOffset");
static_assert(offsetof(BRAnimInstance_GetUseAimOffset, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetUseAimOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetUseBaseAimOffset
// 0x0001 (0x0001 - 0x0000)
struct BRAnimInstance_GetUseBaseAimOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetUseBaseAimOffset) == 0x000001, "Wrong alignment on BRAnimInstance_GetUseBaseAimOffset");
static_assert(sizeof(BRAnimInstance_GetUseBaseAimOffset) == 0x000001, "Wrong size on BRAnimInstance_GetUseBaseAimOffset");
static_assert(offsetof(BRAnimInstance_GetUseBaseAimOffset, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetUseBaseAimOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.GetUseCustomAimOffset
// 0x0001 (0x0001 - 0x0000)
struct BRAnimInstance_GetUseCustomAimOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_GetUseCustomAimOffset) == 0x000001, "Wrong alignment on BRAnimInstance_GetUseCustomAimOffset");
static_assert(sizeof(BRAnimInstance_GetUseCustomAimOffset) == 0x000001, "Wrong size on BRAnimInstance_GetUseCustomAimOffset");
static_assert(offsetof(BRAnimInstance_GetUseCustomAimOffset, ReturnValue) == 0x000000, "Member 'BRAnimInstance_GetUseCustomAimOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAnimInstance.TryGetOwningFigure
// 0x0008 (0x0008 - 0x0000)
struct BRAnimInstance_TryGetOwningFigure final
{
public:
	class ABRCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimInstance_TryGetOwningFigure) == 0x000008, "Wrong alignment on BRAnimInstance_TryGetOwningFigure");
static_assert(sizeof(BRAnimInstance_TryGetOwningFigure) == 0x000008, "Wrong size on BRAnimInstance_TryGetOwningFigure");
static_assert(offsetof(BRAnimInstance_TryGetOwningFigure, ReturnValue) == 0x000000, "Member 'BRAnimInstance_TryGetOwningFigure::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlacerGrid.UpdateColor
// 0x0010 (0x0010 - 0x0000)
struct BRPlacerGrid_UpdateColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerGrid_UpdateColor) == 0x000004, "Wrong alignment on BRPlacerGrid_UpdateColor");
static_assert(sizeof(BRPlacerGrid_UpdateColor) == 0x000010, "Wrong size on BRPlacerGrid_UpdateColor");
static_assert(offsetof(BRPlacerGrid_UpdateColor, InColor) == 0x000000, "Member 'BRPlacerGrid_UpdateColor::InColor' has a wrong offset!");

// Function Brickadia.BRPlacerGrid.UpdateGrid
// 0x0038 (0x0038 - 0x0000)
struct BRPlacerGrid_UpdateGrid final
{
public:
	class UBrickGridComponent*                    BrickGrid;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             InGridCellSize;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             InPlacementPivotExtent;                            // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             GridLocation;                                      // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               InDirection;                                       // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InExtentBeyondBrickInCells;                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlacerGrid_UpdateGrid) == 0x000008, "Wrong alignment on BRPlacerGrid_UpdateGrid");
static_assert(sizeof(BRPlacerGrid_UpdateGrid) == 0x000038, "Wrong size on BRPlacerGrid_UpdateGrid");
static_assert(offsetof(BRPlacerGrid_UpdateGrid, BrickGrid) == 0x000000, "Member 'BRPlacerGrid_UpdateGrid::BrickGrid' has a wrong offset!");
static_assert(offsetof(BRPlacerGrid_UpdateGrid, InGridCellSize) == 0x000008, "Member 'BRPlacerGrid_UpdateGrid::InGridCellSize' has a wrong offset!");
static_assert(offsetof(BRPlacerGrid_UpdateGrid, InPlacementPivotExtent) == 0x000014, "Member 'BRPlacerGrid_UpdateGrid::InPlacementPivotExtent' has a wrong offset!");
static_assert(offsetof(BRPlacerGrid_UpdateGrid, GridLocation) == 0x000020, "Member 'BRPlacerGrid_UpdateGrid::GridLocation' has a wrong offset!");
static_assert(offsetof(BRPlacerGrid_UpdateGrid, InDirection) == 0x00002C, "Member 'BRPlacerGrid_UpdateGrid::InDirection' has a wrong offset!");
static_assert(offsetof(BRPlacerGrid_UpdateGrid, InExtentBeyondBrickInCells) == 0x000030, "Member 'BRPlacerGrid_UpdateGrid::InExtentBeyondBrickInCells' has a wrong offset!");

// Function Brickadia.BRHUD.Get
// 0x0010 (0x0010 - 0x0000)
struct BRHUD_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRHUD*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_Get) == 0x000008, "Wrong alignment on BRHUD_Get");
static_assert(sizeof(BRHUD_Get) == 0x000010, "Wrong size on BRHUD_Get");
static_assert(offsetof(BRHUD_Get, WorldContextObject) == 0x000000, "Member 'BRHUD_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRHUD_Get, ReturnValue) == 0x000008, "Member 'BRHUD_Get::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHUD.GetHUDWidget
// 0x0010 (0x0010 - 0x0000)
struct BRHUD_GetHUDWidget final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHUDWidgetBase*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_GetHUDWidget) == 0x000008, "Wrong alignment on BRHUD_GetHUDWidget");
static_assert(sizeof(BRHUD_GetHUDWidget) == 0x000010, "Wrong size on BRHUD_GetHUDWidget");
static_assert(offsetof(BRHUD_GetHUDWidget, WorldContextObject) == 0x000000, "Member 'BRHUD_GetHUDWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRHUD_GetHUDWidget, ReturnValue) == 0x000008, "Member 'BRHUD_GetHUDWidget::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHUD.HideDialogByClass
// 0x0010 (0x0010 - 0x0000)
struct BRHUD_HideDialogByClass final
{
public:
	TSubclassOf<class UBRDialogBase>              Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyIfTopmost;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRHUD_HideDialogByClass) == 0x000008, "Wrong alignment on BRHUD_HideDialogByClass");
static_assert(sizeof(BRHUD_HideDialogByClass) == 0x000010, "Wrong size on BRHUD_HideDialogByClass");
static_assert(offsetof(BRHUD_HideDialogByClass, Class_0) == 0x000000, "Member 'BRHUD_HideDialogByClass::Class_0' has a wrong offset!");
static_assert(offsetof(BRHUD_HideDialogByClass, bOnlyIfTopmost) == 0x000008, "Member 'BRHUD_HideDialogByClass::bOnlyIfTopmost' has a wrong offset!");

// Function Brickadia.BRHUD.OpenDialogByClass
// 0x0018 (0x0018 - 0x0000)
struct BRHUD_OpenDialogByClass final
{
public:
	TSubclassOf<class UBRDialogBase>              Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyIfNoOther;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateIfMissing;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRDialogBase*                          ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_OpenDialogByClass) == 0x000008, "Wrong alignment on BRHUD_OpenDialogByClass");
static_assert(sizeof(BRHUD_OpenDialogByClass) == 0x000018, "Wrong size on BRHUD_OpenDialogByClass");
static_assert(offsetof(BRHUD_OpenDialogByClass, Class_0) == 0x000000, "Member 'BRHUD_OpenDialogByClass::Class_0' has a wrong offset!");
static_assert(offsetof(BRHUD_OpenDialogByClass, bOnlyIfNoOther) == 0x000008, "Member 'BRHUD_OpenDialogByClass::bOnlyIfNoOther' has a wrong offset!");
static_assert(offsetof(BRHUD_OpenDialogByClass, bCreateIfMissing) == 0x000009, "Member 'BRHUD_OpenDialogByClass::bCreateIfMissing' has a wrong offset!");
static_assert(offsetof(BRHUD_OpenDialogByClass, ReturnValue) == 0x000010, "Member 'BRHUD_OpenDialogByClass::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHUD.SetFreeMouse
// 0x0001 (0x0001 - 0x0000)
struct BRHUD_SetFreeMouse final
{
public:
	bool                                          bFreeMouse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_SetFreeMouse) == 0x000001, "Wrong alignment on BRHUD_SetFreeMouse");
static_assert(sizeof(BRHUD_SetFreeMouse) == 0x000001, "Wrong size on BRHUD_SetFreeMouse");
static_assert(offsetof(BRHUD_SetFreeMouse, bFreeMouse) == 0x000000, "Member 'BRHUD_SetFreeMouse::bFreeMouse' has a wrong offset!");

// Function Brickadia.BRHUD.SetHideHud
// 0x0001 (0x0001 - 0x0000)
struct BRHUD_SetHideHud final
{
public:
	bool                                          bHideHud;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_SetHideHud) == 0x000001, "Wrong alignment on BRHUD_SetHideHud");
static_assert(sizeof(BRHUD_SetHideHud) == 0x000001, "Wrong size on BRHUD_SetHideHud");
static_assert(offsetof(BRHUD_SetHideHud, bHideHud) == 0x000000, "Member 'BRHUD_SetHideHud::bHideHud' has a wrong offset!");

// Function Brickadia.BRHUD.GetDialogByClass
// 0x0010 (0x0010 - 0x0000)
struct BRHUD_GetDialogByClass final
{
public:
	TSubclassOf<class UBRDialogBase>              Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRDialogBase*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_GetDialogByClass) == 0x000008, "Wrong alignment on BRHUD_GetDialogByClass");
static_assert(sizeof(BRHUD_GetDialogByClass) == 0x000010, "Wrong size on BRHUD_GetDialogByClass");
static_assert(offsetof(BRHUD_GetDialogByClass, Class_0) == 0x000000, "Member 'BRHUD_GetDialogByClass::Class_0' has a wrong offset!");
static_assert(offsetof(BRHUD_GetDialogByClass, ReturnValue) == 0x000008, "Member 'BRHUD_GetDialogByClass::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHUD.GetFreeMouse
// 0x0001 (0x0001 - 0x0000)
struct BRHUD_GetFreeMouse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_GetFreeMouse) == 0x000001, "Wrong alignment on BRHUD_GetFreeMouse");
static_assert(sizeof(BRHUD_GetFreeMouse) == 0x000001, "Wrong size on BRHUD_GetFreeMouse");
static_assert(offsetof(BRHUD_GetFreeMouse, ReturnValue) == 0x000000, "Member 'BRHUD_GetFreeMouse::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHUD.GetHideHud
// 0x0001 (0x0001 - 0x0000)
struct BRHUD_GetHideHud final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_GetHideHud) == 0x000001, "Wrong alignment on BRHUD_GetHideHud");
static_assert(sizeof(BRHUD_GetHideHud) == 0x000001, "Wrong size on BRHUD_GetHideHud");
static_assert(offsetof(BRHUD_GetHideHud, ReturnValue) == 0x000000, "Member 'BRHUD_GetHideHud::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHUD.GetMostRecentOpenDialog
// 0x0008 (0x0008 - 0x0000)
struct BRHUD_GetMostRecentOpenDialog final
{
public:
	class UBRDialogBase*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_GetMostRecentOpenDialog) == 0x000008, "Wrong alignment on BRHUD_GetMostRecentOpenDialog");
static_assert(sizeof(BRHUD_GetMostRecentOpenDialog) == 0x000008, "Wrong size on BRHUD_GetMostRecentOpenDialog");
static_assert(offsetof(BRHUD_GetMostRecentOpenDialog, ReturnValue) == 0x000000, "Member 'BRHUD_GetMostRecentOpenDialog::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHUD.GetOpenDialogs
// 0x0010 (0x0010 - 0x0000)
struct BRHUD_GetOpenDialogs final
{
public:
	TArray<class UBRDialogBase*>                  ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_GetOpenDialogs) == 0x000008, "Wrong alignment on BRHUD_GetOpenDialogs");
static_assert(sizeof(BRHUD_GetOpenDialogs) == 0x000010, "Wrong size on BRHUD_GetOpenDialogs");
static_assert(offsetof(BRHUD_GetOpenDialogs, ReturnValue) == 0x000000, "Member 'BRHUD_GetOpenDialogs::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHUD.GetOrCreateDialogByClass
// 0x0010 (0x0010 - 0x0000)
struct BRHUD_GetOrCreateDialogByClass final
{
public:
	TSubclassOf<class UBRDialogBase>              Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRDialogBase*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_GetOrCreateDialogByClass) == 0x000008, "Wrong alignment on BRHUD_GetOrCreateDialogByClass");
static_assert(sizeof(BRHUD_GetOrCreateDialogByClass) == 0x000010, "Wrong size on BRHUD_GetOrCreateDialogByClass");
static_assert(offsetof(BRHUD_GetOrCreateDialogByClass, Class_0) == 0x000000, "Member 'BRHUD_GetOrCreateDialogByClass::Class_0' has a wrong offset!");
static_assert(offsetof(BRHUD_GetOrCreateDialogByClass, ReturnValue) == 0x000008, "Member 'BRHUD_GetOrCreateDialogByClass::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHUD.HasAnyOpenDialogs
// 0x0001 (0x0001 - 0x0000)
struct BRHUD_HasAnyOpenDialogs final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHUD_HasAnyOpenDialogs) == 0x000001, "Wrong alignment on BRHUD_HasAnyOpenDialogs");
static_assert(sizeof(BRHUD_HasAnyOpenDialogs) == 0x000001, "Wrong size on BRHUD_HasAnyOpenDialogs");
static_assert(offsetof(BRHUD_HasAnyOpenDialogs, ReturnValue) == 0x000000, "Member 'BRHUD_HasAnyOpenDialogs::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHUD.HasAnyOpenDialogsExcept
// 0x0010 (0x0010 - 0x0000)
struct BRHUD_HasAnyOpenDialogsExcept final
{
public:
	const class UBRDialogBase*                    Dialog;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRHUD_HasAnyOpenDialogsExcept) == 0x000008, "Wrong alignment on BRHUD_HasAnyOpenDialogsExcept");
static_assert(sizeof(BRHUD_HasAnyOpenDialogsExcept) == 0x000010, "Wrong size on BRHUD_HasAnyOpenDialogsExcept");
static_assert(offsetof(BRHUD_HasAnyOpenDialogsExcept, Dialog) == 0x000000, "Member 'BRHUD_HasAnyOpenDialogsExcept::Dialog' has a wrong offset!");
static_assert(offsetof(BRHUD_HasAnyOpenDialogsExcept, ReturnValue) == 0x000008, "Member 'BRHUD_HasAnyOpenDialogsExcept::ReturnValue' has a wrong offset!");

// Function Brickadia.BRApplicatorComponentListEntryWidget.Setup
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorComponentListEntryWidget_Setup final
{
public:
	class UBrickComponentTypeBase*                InComponentType;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorComponentListEntryWidget_Setup) == 0x000008, "Wrong alignment on BRApplicatorComponentListEntryWidget_Setup");
static_assert(sizeof(BRApplicatorComponentListEntryWidget_Setup) == 0x000008, "Wrong size on BRApplicatorComponentListEntryWidget_Setup");
static_assert(offsetof(BRApplicatorComponentListEntryWidget_Setup, InComponentType) == 0x000000, "Member 'BRApplicatorComponentListEntryWidget_Setup::InComponentType' has a wrong offset!");

// Function Brickadia.BRApplicatorComponentListCategoryWidget.Setup
// 0x0010 (0x0010 - 0x0000)
struct BRApplicatorComponentListCategoryWidget_Setup final
{
public:
	class FText                                   InCategoryName;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorComponentListCategoryWidget_Setup) == 0x000008, "Wrong alignment on BRApplicatorComponentListCategoryWidget_Setup");
static_assert(sizeof(BRApplicatorComponentListCategoryWidget_Setup) == 0x000010, "Wrong size on BRApplicatorComponentListCategoryWidget_Setup");
static_assert(offsetof(BRApplicatorComponentListCategoryWidget_Setup, InCategoryName) == 0x000000, "Member 'BRApplicatorComponentListCategoryWidget_Setup::InCategoryName' has a wrong offset!");

// Function Brickadia.BRApplicatorComponentListWidget.Setup
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorComponentListWidget_Setup final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorComponentListWidget_Setup) == 0x000004, "Wrong alignment on BRApplicatorComponentListWidget_Setup");
static_assert(sizeof(BRApplicatorComponentListWidget_Setup) == 0x000008, "Wrong size on BRApplicatorComponentListWidget_Setup");
static_assert(offsetof(BRApplicatorComponentListWidget_Setup, BrickHandle) == 0x000000, "Member 'BRApplicatorComponentListWidget_Setup::BrickHandle' has a wrong offset!");

// Function Brickadia.BRApplicatorComponentWidget.OnComponentEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct BRApplicatorComponentWidget_OnComponentEnabledChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorComponentWidget_OnComponentEnabledChanged) == 0x000001, "Wrong alignment on BRApplicatorComponentWidget_OnComponentEnabledChanged");
static_assert(sizeof(BRApplicatorComponentWidget_OnComponentEnabledChanged) == 0x000001, "Wrong size on BRApplicatorComponentWidget_OnComponentEnabledChanged");
static_assert(offsetof(BRApplicatorComponentWidget_OnComponentEnabledChanged, bIsChecked) == 0x000000, "Member 'BRApplicatorComponentWidget_OnComponentEnabledChanged::bIsChecked' has a wrong offset!");

// Function Brickadia.BRApplicatorComponentWidget.Setup
// 0x0010 (0x0010 - 0x0000)
struct BRApplicatorComponentWidget_Setup final
{
public:
	class UBRApplicatorBrickDialog*               InApplicatorDialog;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                InComponentType;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorComponentWidget_Setup) == 0x000008, "Wrong alignment on BRApplicatorComponentWidget_Setup");
static_assert(sizeof(BRApplicatorComponentWidget_Setup) == 0x000010, "Wrong size on BRApplicatorComponentWidget_Setup");
static_assert(offsetof(BRApplicatorComponentWidget_Setup, InApplicatorDialog) == 0x000000, "Member 'BRApplicatorComponentWidget_Setup::InApplicatorDialog' has a wrong offset!");
static_assert(offsetof(BRApplicatorComponentWidget_Setup, InComponentType) == 0x000008, "Member 'BRApplicatorComponentWidget_Setup::InComponentType' has a wrong offset!");

// Function Brickadia.BRApplicatorComponentWidget.GetComponentType
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorComponentWidget_GetComponentType final
{
public:
	class UBrickComponentTypeBase*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorComponentWidget_GetComponentType) == 0x000008, "Wrong alignment on BRApplicatorComponentWidget_GetComponentType");
static_assert(sizeof(BRApplicatorComponentWidget_GetComponentType) == 0x000008, "Wrong size on BRApplicatorComponentWidget_GetComponentType");
static_assert(offsetof(BRApplicatorComponentWidget_GetComponentType, ReturnValue) == 0x000000, "Member 'BRApplicatorComponentWidget_GetComponentType::ReturnValue' has a wrong offset!");

// Function Brickadia.ProceduralBrick.CanCreateBrickType
// 0x0010 (0x0010 - 0x0000)
struct ProceduralBrick_CanCreateBrickType final
{
public:
	struct FIntVector                             HalfSize;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProceduralBrick_CanCreateBrickType) == 0x000004, "Wrong alignment on ProceduralBrick_CanCreateBrickType");
static_assert(sizeof(ProceduralBrick_CanCreateBrickType) == 0x000010, "Wrong size on ProceduralBrick_CanCreateBrickType");
static_assert(offsetof(ProceduralBrick_CanCreateBrickType, HalfSize) == 0x000000, "Member 'ProceduralBrick_CanCreateBrickType::HalfSize' has a wrong offset!");
static_assert(offsetof(ProceduralBrick_CanCreateBrickType, ReturnValue) == 0x00000C, "Member 'ProceduralBrick_CanCreateBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.ProceduralBrick.ComputeBrickMenuPresets
// 0x0010 (0x0010 - 0x0000)
struct ProceduralBrick_ComputeBrickMenuPresets final
{
public:
	TArray<struct FIntVector>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralBrick_ComputeBrickMenuPresets) == 0x000008, "Wrong alignment on ProceduralBrick_ComputeBrickMenuPresets");
static_assert(sizeof(ProceduralBrick_ComputeBrickMenuPresets) == 0x000010, "Wrong size on ProceduralBrick_ComputeBrickMenuPresets");
static_assert(offsetof(ProceduralBrick_ComputeBrickMenuPresets, ReturnValue) == 0x000000, "Member 'ProceduralBrick_ComputeBrickMenuPresets::ReturnValue' has a wrong offset!");

// Function Brickadia.ProceduralBrick.CreateBrickMenuPresets
// 0x0010 (0x0010 - 0x0000)
struct ProceduralBrick_CreateBrickMenuPresets final
{
public:
	TArray<class UBrickType*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralBrick_CreateBrickMenuPresets) == 0x000008, "Wrong alignment on ProceduralBrick_CreateBrickMenuPresets");
static_assert(sizeof(ProceduralBrick_CreateBrickMenuPresets) == 0x000010, "Wrong size on ProceduralBrick_CreateBrickMenuPresets");
static_assert(offsetof(ProceduralBrick_CreateBrickMenuPresets, ReturnValue) == 0x000000, "Member 'ProceduralBrick_CreateBrickMenuPresets::ReturnValue' has a wrong offset!");

// Function Brickadia.ProceduralBrick.FindBrickType
// 0x0018 (0x0018 - 0x0000)
struct ProceduralBrick_FindBrickType final
{
public:
	struct FIntVector                             HalfSize;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickType*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralBrick_FindBrickType) == 0x000008, "Wrong alignment on ProceduralBrick_FindBrickType");
static_assert(sizeof(ProceduralBrick_FindBrickType) == 0x000018, "Wrong size on ProceduralBrick_FindBrickType");
static_assert(offsetof(ProceduralBrick_FindBrickType, HalfSize) == 0x000000, "Member 'ProceduralBrick_FindBrickType::HalfSize' has a wrong offset!");
static_assert(offsetof(ProceduralBrick_FindBrickType, ReturnValue) == 0x000010, "Member 'ProceduralBrick_FindBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.ProceduralBrick.FindOrCreateBrickType
// 0x0018 (0x0018 - 0x0000)
struct ProceduralBrick_FindOrCreateBrickType final
{
public:
	struct FIntVector                             HalfSize;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickType*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralBrick_FindOrCreateBrickType) == 0x000008, "Wrong alignment on ProceduralBrick_FindOrCreateBrickType");
static_assert(sizeof(ProceduralBrick_FindOrCreateBrickType) == 0x000018, "Wrong size on ProceduralBrick_FindOrCreateBrickType");
static_assert(offsetof(ProceduralBrick_FindOrCreateBrickType, HalfSize) == 0x000000, "Member 'ProceduralBrick_FindOrCreateBrickType::HalfSize' has a wrong offset!");
static_assert(offsetof(ProceduralBrick_FindOrCreateBrickType, ReturnValue) == 0x000010, "Member 'ProceduralBrick_FindOrCreateBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.ProceduralBrick.FindOrCreateBrickTypeChecked
// 0x0018 (0x0018 - 0x0000)
struct ProceduralBrick_FindOrCreateBrickTypeChecked final
{
public:
	struct FIntVector                             HalfSize;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickType*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralBrick_FindOrCreateBrickTypeChecked) == 0x000008, "Wrong alignment on ProceduralBrick_FindOrCreateBrickTypeChecked");
static_assert(sizeof(ProceduralBrick_FindOrCreateBrickTypeChecked) == 0x000018, "Wrong size on ProceduralBrick_FindOrCreateBrickTypeChecked");
static_assert(offsetof(ProceduralBrick_FindOrCreateBrickTypeChecked, HalfSize) == 0x000000, "Member 'ProceduralBrick_FindOrCreateBrickTypeChecked::HalfSize' has a wrong offset!");
static_assert(offsetof(ProceduralBrick_FindOrCreateBrickTypeChecked, ReturnValue) == 0x000010, "Member 'ProceduralBrick_FindOrCreateBrickTypeChecked::ReturnValue' has a wrong offset!");

// Function Brickadia.ProceduralBrick.GetAxisHalfSizeText
// 0x0018 (0x0018 - 0x0000)
struct ProceduralBrick_GetAxisHalfSizeText final
{
public:
	int32                                         HalfSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAxis                                    Axis;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralBrick_GetAxisHalfSizeText) == 0x000008, "Wrong alignment on ProceduralBrick_GetAxisHalfSizeText");
static_assert(sizeof(ProceduralBrick_GetAxisHalfSizeText) == 0x000018, "Wrong size on ProceduralBrick_GetAxisHalfSizeText");
static_assert(offsetof(ProceduralBrick_GetAxisHalfSizeText, HalfSize) == 0x000000, "Member 'ProceduralBrick_GetAxisHalfSizeText::HalfSize' has a wrong offset!");
static_assert(offsetof(ProceduralBrick_GetAxisHalfSizeText, Axis) == 0x000004, "Member 'ProceduralBrick_GetAxisHalfSizeText::Axis' has a wrong offset!");
static_assert(offsetof(ProceduralBrick_GetAxisHalfSizeText, ReturnValue) == 0x000008, "Member 'ProceduralBrick_GetAxisHalfSizeText::ReturnValue' has a wrong offset!");

// Function Brickadia.ProceduralBrick.GetResizerConfig
// 0x0024 (0x0024 - 0x0000)
struct ProceduralBrick_GetResizerConfig final
{
public:
	struct FIntVector                             OutSizeMin;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutSizeMax;                                        // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutSizeStep;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralBrick_GetResizerConfig) == 0x000004, "Wrong alignment on ProceduralBrick_GetResizerConfig");
static_assert(sizeof(ProceduralBrick_GetResizerConfig) == 0x000024, "Wrong size on ProceduralBrick_GetResizerConfig");
static_assert(offsetof(ProceduralBrick_GetResizerConfig, OutSizeMin) == 0x000000, "Member 'ProceduralBrick_GetResizerConfig::OutSizeMin' has a wrong offset!");
static_assert(offsetof(ProceduralBrick_GetResizerConfig, OutSizeMax) == 0x00000C, "Member 'ProceduralBrick_GetResizerConfig::OutSizeMax' has a wrong offset!");
static_assert(offsetof(ProceduralBrick_GetResizerConfig, OutSizeStep) == 0x000018, "Member 'ProceduralBrick_GetResizerConfig::OutSizeStep' has a wrong offset!");

// Function Brickadia.ProceduralBrick.NearestCreatableBrickType
// 0x0018 (0x0018 - 0x0000)
struct ProceduralBrick_NearestCreatableBrickType final
{
public:
	struct FIntVector                             HalfSize;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralBrick_NearestCreatableBrickType) == 0x000004, "Wrong alignment on ProceduralBrick_NearestCreatableBrickType");
static_assert(sizeof(ProceduralBrick_NearestCreatableBrickType) == 0x000018, "Wrong size on ProceduralBrick_NearestCreatableBrickType");
static_assert(offsetof(ProceduralBrick_NearestCreatableBrickType, HalfSize) == 0x000000, "Member 'ProceduralBrick_NearestCreatableBrickType::HalfSize' has a wrong offset!");
static_assert(offsetof(ProceduralBrick_NearestCreatableBrickType, ReturnValue) == 0x00000C, "Member 'ProceduralBrick_NearestCreatableBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.BRApplicatorBrickDialog.GetComponentListContent
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorBrickDialog_GetComponentListContent final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorBrickDialog_GetComponentListContent) == 0x000008, "Wrong alignment on BRApplicatorBrickDialog_GetComponentListContent");
static_assert(sizeof(BRApplicatorBrickDialog_GetComponentListContent) == 0x000008, "Wrong size on BRApplicatorBrickDialog_GetComponentListContent");
static_assert(offsetof(BRApplicatorBrickDialog_GetComponentListContent, ReturnValue) == 0x000000, "Member 'BRApplicatorBrickDialog_GetComponentListContent::ReturnValue' has a wrong offset!");

// Function Brickadia.BRApplicatorBrickDialog.OnCollidesChanged_Interaction
// 0x0001 (0x0001 - 0x0000)
struct BRApplicatorBrickDialog_OnCollidesChanged_Interaction final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorBrickDialog_OnCollidesChanged_Interaction) == 0x000001, "Wrong alignment on BRApplicatorBrickDialog_OnCollidesChanged_Interaction");
static_assert(sizeof(BRApplicatorBrickDialog_OnCollidesChanged_Interaction) == 0x000001, "Wrong size on BRApplicatorBrickDialog_OnCollidesChanged_Interaction");
static_assert(offsetof(BRApplicatorBrickDialog_OnCollidesChanged_Interaction, bIsChecked) == 0x000000, "Member 'BRApplicatorBrickDialog_OnCollidesChanged_Interaction::bIsChecked' has a wrong offset!");

// Function Brickadia.BRApplicatorBrickDialog.OnCollidesChanged_Player
// 0x0001 (0x0001 - 0x0000)
struct BRApplicatorBrickDialog_OnCollidesChanged_Player final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorBrickDialog_OnCollidesChanged_Player) == 0x000001, "Wrong alignment on BRApplicatorBrickDialog_OnCollidesChanged_Player");
static_assert(sizeof(BRApplicatorBrickDialog_OnCollidesChanged_Player) == 0x000001, "Wrong size on BRApplicatorBrickDialog_OnCollidesChanged_Player");
static_assert(offsetof(BRApplicatorBrickDialog_OnCollidesChanged_Player, bIsChecked) == 0x000000, "Member 'BRApplicatorBrickDialog_OnCollidesChanged_Player::bIsChecked' has a wrong offset!");

// Function Brickadia.BRApplicatorBrickDialog.OnCollidesChanged_Weapon
// 0x0001 (0x0001 - 0x0000)
struct BRApplicatorBrickDialog_OnCollidesChanged_Weapon final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorBrickDialog_OnCollidesChanged_Weapon) == 0x000001, "Wrong alignment on BRApplicatorBrickDialog_OnCollidesChanged_Weapon");
static_assert(sizeof(BRApplicatorBrickDialog_OnCollidesChanged_Weapon) == 0x000001, "Wrong size on BRApplicatorBrickDialog_OnCollidesChanged_Weapon");
static_assert(offsetof(BRApplicatorBrickDialog_OnCollidesChanged_Weapon, bIsChecked) == 0x000000, "Member 'BRApplicatorBrickDialog_OnCollidesChanged_Weapon::bIsChecked' has a wrong offset!");

// Function Brickadia.BRApplicatorBrickDialog.OnVisibleChanged
// 0x0001 (0x0001 - 0x0000)
struct BRApplicatorBrickDialog_OnVisibleChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorBrickDialog_OnVisibleChanged) == 0x000001, "Wrong alignment on BRApplicatorBrickDialog_OnVisibleChanged");
static_assert(sizeof(BRApplicatorBrickDialog_OnVisibleChanged) == 0x000001, "Wrong size on BRApplicatorBrickDialog_OnVisibleChanged");
static_assert(offsetof(BRApplicatorBrickDialog_OnVisibleChanged, bIsChecked) == 0x000000, "Member 'BRApplicatorBrickDialog_OnVisibleChanged::bIsChecked' has a wrong offset!");

// Function Brickadia.BRApplicatorBrickDialog.SetupAndOpen
// 0x0010 (0x0010 - 0x0000)
struct BRApplicatorBrickDialog_SetupAndOpen final
{
public:
	class ABRTool_Applicator*                     InApplicator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorBrickDialog_SetupAndOpen) == 0x000008, "Wrong alignment on BRApplicatorBrickDialog_SetupAndOpen");
static_assert(sizeof(BRApplicatorBrickDialog_SetupAndOpen) == 0x000010, "Wrong size on BRApplicatorBrickDialog_SetupAndOpen");
static_assert(offsetof(BRApplicatorBrickDialog_SetupAndOpen, InApplicator) == 0x000000, "Member 'BRApplicatorBrickDialog_SetupAndOpen::InApplicator' has a wrong offset!");
static_assert(offsetof(BRApplicatorBrickDialog_SetupAndOpen, BrickHandle) == 0x000008, "Member 'BRApplicatorBrickDialog_SetupAndOpen::BrickHandle' has a wrong offset!");

// Function Brickadia.BRApplicatorBrickDialog.TriggerLoadFromPreset
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorBrickDialog_TriggerLoadFromPreset final
{
public:
	class UBRPreset*                              Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorBrickDialog_TriggerLoadFromPreset) == 0x000008, "Wrong alignment on BRApplicatorBrickDialog_TriggerLoadFromPreset");
static_assert(sizeof(BRApplicatorBrickDialog_TriggerLoadFromPreset) == 0x000008, "Wrong size on BRApplicatorBrickDialog_TriggerLoadFromPreset");
static_assert(offsetof(BRApplicatorBrickDialog_TriggerLoadFromPreset, Preset) == 0x000000, "Member 'BRApplicatorBrickDialog_TriggerLoadFromPreset::Preset' has a wrong offset!");

// Function Brickadia.BRApplicatorBrickDialog.TriggerSaveToPreset
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorBrickDialog_TriggerSaveToPreset final
{
public:
	class UBRPreset*                              Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorBrickDialog_TriggerSaveToPreset) == 0x000008, "Wrong alignment on BRApplicatorBrickDialog_TriggerSaveToPreset");
static_assert(sizeof(BRApplicatorBrickDialog_TriggerSaveToPreset) == 0x000008, "Wrong size on BRApplicatorBrickDialog_TriggerSaveToPreset");
static_assert(offsetof(BRApplicatorBrickDialog_TriggerSaveToPreset, Preset) == 0x000000, "Member 'BRApplicatorBrickDialog_TriggerSaveToPreset::Preset' has a wrong offset!");

// Function Brickadia.BRApplicatorBrickDialog.GetApplicator
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorBrickDialog_GetApplicator final
{
public:
	class ABRTool_Applicator*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorBrickDialog_GetApplicator) == 0x000008, "Wrong alignment on BRApplicatorBrickDialog_GetApplicator");
static_assert(sizeof(BRApplicatorBrickDialog_GetApplicator) == 0x000008, "Wrong size on BRApplicatorBrickDialog_GetApplicator");
static_assert(offsetof(BRApplicatorBrickDialog_GetApplicator, ReturnValue) == 0x000000, "Member 'BRApplicatorBrickDialog_GetApplicator::ReturnValue' has a wrong offset!");

// Function Brickadia.BRApplicatorBrickDialog.GetCurrentBrickHandle
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorBrickDialog_GetCurrentBrickHandle final
{
public:
	struct FBrickHandle                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorBrickDialog_GetCurrentBrickHandle) == 0x000004, "Wrong alignment on BRApplicatorBrickDialog_GetCurrentBrickHandle");
static_assert(sizeof(BRApplicatorBrickDialog_GetCurrentBrickHandle) == 0x000008, "Wrong size on BRApplicatorBrickDialog_GetCurrentBrickHandle");
static_assert(offsetof(BRApplicatorBrickDialog_GetCurrentBrickHandle, ReturnValue) == 0x000000, "Member 'BRApplicatorBrickDialog_GetCurrentBrickHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BRApplicatorComponentDialog.SetupAndOpen
// 0x0018 (0x0018 - 0x0000)
struct BRApplicatorComponentDialog_SetupAndOpen final
{
public:
	class ABRTool_Applicator*                     InApplicator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                ComponentType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorComponentDialog_SetupAndOpen) == 0x000008, "Wrong alignment on BRApplicatorComponentDialog_SetupAndOpen");
static_assert(sizeof(BRApplicatorComponentDialog_SetupAndOpen) == 0x000018, "Wrong size on BRApplicatorComponentDialog_SetupAndOpen");
static_assert(offsetof(BRApplicatorComponentDialog_SetupAndOpen, InApplicator) == 0x000000, "Member 'BRApplicatorComponentDialog_SetupAndOpen::InApplicator' has a wrong offset!");
static_assert(offsetof(BRApplicatorComponentDialog_SetupAndOpen, BrickHandle) == 0x000008, "Member 'BRApplicatorComponentDialog_SetupAndOpen::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRApplicatorComponentDialog_SetupAndOpen, ComponentType) == 0x000010, "Member 'BRApplicatorComponentDialog_SetupAndOpen::ComponentType' has a wrong offset!");

// Function Brickadia.BRApplicatorComponentDialog.SubmitChanges
// 0x0018 (0x0018 - 0x0000)
struct BRApplicatorComponentDialog_SubmitChanges final
{
public:
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCommit;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRApplicatorComponentDialog_SubmitChanges) == 0x000008, "Wrong alignment on BRApplicatorComponentDialog_SubmitChanges");
static_assert(sizeof(BRApplicatorComponentDialog_SubmitChanges) == 0x000018, "Wrong size on BRApplicatorComponentDialog_SubmitChanges");
static_assert(offsetof(BRApplicatorComponentDialog_SubmitChanges, Changelist) == 0x000000, "Member 'BRApplicatorComponentDialog_SubmitChanges::Changelist' has a wrong offset!");
static_assert(offsetof(BRApplicatorComponentDialog_SubmitChanges, bCommit) == 0x000010, "Member 'BRApplicatorComponentDialog_SubmitChanges::bCommit' has a wrong offset!");

// Function Brickadia.BRApplicatorComponentDialog.TriggerLoadFromPreset
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorComponentDialog_TriggerLoadFromPreset final
{
public:
	class UBRPreset*                              Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorComponentDialog_TriggerLoadFromPreset) == 0x000008, "Wrong alignment on BRApplicatorComponentDialog_TriggerLoadFromPreset");
static_assert(sizeof(BRApplicatorComponentDialog_TriggerLoadFromPreset) == 0x000008, "Wrong size on BRApplicatorComponentDialog_TriggerLoadFromPreset");
static_assert(offsetof(BRApplicatorComponentDialog_TriggerLoadFromPreset, Preset) == 0x000000, "Member 'BRApplicatorComponentDialog_TriggerLoadFromPreset::Preset' has a wrong offset!");

// Function Brickadia.BRApplicatorComponentDialog.TriggerSaveToPreset
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorComponentDialog_TriggerSaveToPreset final
{
public:
	class UBRPreset*                              Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorComponentDialog_TriggerSaveToPreset) == 0x000008, "Wrong alignment on BRApplicatorComponentDialog_TriggerSaveToPreset");
static_assert(sizeof(BRApplicatorComponentDialog_TriggerSaveToPreset) == 0x000008, "Wrong size on BRApplicatorComponentDialog_TriggerSaveToPreset");
static_assert(offsetof(BRApplicatorComponentDialog_TriggerSaveToPreset, Preset) == 0x000000, "Member 'BRApplicatorComponentDialog_TriggerSaveToPreset::Preset' has a wrong offset!");

// Function Brickadia.BRApplicatorEntityDialog.SetupAndOpen
// 0x0010 (0x0010 - 0x0000)
struct BRApplicatorEntityDialog_SetupAndOpen final
{
public:
	class ABRTool_Applicator*                     InApplicator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ENTITY;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorEntityDialog_SetupAndOpen) == 0x000008, "Wrong alignment on BRApplicatorEntityDialog_SetupAndOpen");
static_assert(sizeof(BRApplicatorEntityDialog_SetupAndOpen) == 0x000010, "Wrong size on BRApplicatorEntityDialog_SetupAndOpen");
static_assert(offsetof(BRApplicatorEntityDialog_SetupAndOpen, InApplicator) == 0x000000, "Member 'BRApplicatorEntityDialog_SetupAndOpen::InApplicator' has a wrong offset!");
static_assert(offsetof(BRApplicatorEntityDialog_SetupAndOpen, ENTITY) == 0x000008, "Member 'BRApplicatorEntityDialog_SetupAndOpen::ENTITY' has a wrong offset!");

// Function Brickadia.BRApplicatorEntityDialog.SubmitChanges
// 0x0018 (0x0018 - 0x0000)
struct BRApplicatorEntityDialog_SubmitChanges final
{
public:
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCommit;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRApplicatorEntityDialog_SubmitChanges) == 0x000008, "Wrong alignment on BRApplicatorEntityDialog_SubmitChanges");
static_assert(sizeof(BRApplicatorEntityDialog_SubmitChanges) == 0x000018, "Wrong size on BRApplicatorEntityDialog_SubmitChanges");
static_assert(offsetof(BRApplicatorEntityDialog_SubmitChanges, Changelist) == 0x000000, "Member 'BRApplicatorEntityDialog_SubmitChanges::Changelist' has a wrong offset!");
static_assert(offsetof(BRApplicatorEntityDialog_SubmitChanges, bCommit) == 0x000010, "Member 'BRApplicatorEntityDialog_SubmitChanges::bCommit' has a wrong offset!");

// Function Brickadia.BRApplicatorEntityDialog.TriggerLoadFromPreset
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorEntityDialog_TriggerLoadFromPreset final
{
public:
	class UBRPreset*                              Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorEntityDialog_TriggerLoadFromPreset) == 0x000008, "Wrong alignment on BRApplicatorEntityDialog_TriggerLoadFromPreset");
static_assert(sizeof(BRApplicatorEntityDialog_TriggerLoadFromPreset) == 0x000008, "Wrong size on BRApplicatorEntityDialog_TriggerLoadFromPreset");
static_assert(offsetof(BRApplicatorEntityDialog_TriggerLoadFromPreset, Preset) == 0x000000, "Member 'BRApplicatorEntityDialog_TriggerLoadFromPreset::Preset' has a wrong offset!");

// Function Brickadia.BRApplicatorEntityDialog.TriggerSaveToPreset
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorEntityDialog_TriggerSaveToPreset final
{
public:
	class UBRPreset*                              Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorEntityDialog_TriggerSaveToPreset) == 0x000008, "Wrong alignment on BRApplicatorEntityDialog_TriggerSaveToPreset");
static_assert(sizeof(BRApplicatorEntityDialog_TriggerSaveToPreset) == 0x000008, "Wrong size on BRApplicatorEntityDialog_TriggerSaveToPreset");
static_assert(offsetof(BRApplicatorEntityDialog_TriggerSaveToPreset, Preset) == 0x000000, "Member 'BRApplicatorEntityDialog_TriggerSaveToPreset::Preset' has a wrong offset!");

// Function Brickadia.BRApplicatorEntityDialog.GetCurrentEntity
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorEntityDialog_GetCurrentEntity final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorEntityDialog_GetCurrentEntity) == 0x000008, "Wrong alignment on BRApplicatorEntityDialog_GetCurrentEntity");
static_assert(sizeof(BRApplicatorEntityDialog_GetCurrentEntity) == 0x000008, "Wrong size on BRApplicatorEntityDialog_GetCurrentEntity");
static_assert(offsetof(BRApplicatorEntityDialog_GetCurrentEntity, ReturnValue) == 0x000000, "Member 'BRApplicatorEntityDialog_GetCurrentEntity::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAssetManager.GenerateCatalogBrickTypeArray
// 0x0010 (0x0010 - 0x0000)
struct BRAssetManager_GenerateCatalogBrickTypeArray final
{
public:
	TArray<class UBrickType*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAssetManager_GenerateCatalogBrickTypeArray) == 0x000008, "Wrong alignment on BRAssetManager_GenerateCatalogBrickTypeArray");
static_assert(sizeof(BRAssetManager_GenerateCatalogBrickTypeArray) == 0x000010, "Wrong size on BRAssetManager_GenerateCatalogBrickTypeArray");
static_assert(offsetof(BRAssetManager_GenerateCatalogBrickTypeArray, ReturnValue) == 0x000000, "Member 'BRAssetManager_GenerateCatalogBrickTypeArray::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAssetManager.IsBrickListReady
// 0x0014 (0x0014 - 0x0000)
struct BRAssetManager_IsBrickListReady final
{
public:
	TDelegate<void()>                             EventToCallIfNot;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRAssetManager_IsBrickListReady) == 0x000004, "Wrong alignment on BRAssetManager_IsBrickListReady");
static_assert(sizeof(BRAssetManager_IsBrickListReady) == 0x000014, "Wrong size on BRAssetManager_IsBrickListReady");
static_assert(offsetof(BRAssetManager_IsBrickListReady, EventToCallIfNot) == 0x000000, "Member 'BRAssetManager_IsBrickListReady::EventToCallIfNot' has a wrong offset!");
static_assert(offsetof(BRAssetManager_IsBrickListReady, ReturnValue) == 0x000010, "Member 'BRAssetManager_IsBrickListReady::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAssetManager.SyncGetGameTypeAssets
// 0x0010 (0x0010 - 0x0000)
struct BRAssetManager_SyncGetGameTypeAssets final
{
public:
	TArray<class UBRGameTypeDescriptor*>          Assets;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAssetManager_SyncGetGameTypeAssets) == 0x000008, "Wrong alignment on BRAssetManager_SyncGetGameTypeAssets");
static_assert(sizeof(BRAssetManager_SyncGetGameTypeAssets) == 0x000010, "Wrong size on BRAssetManager_SyncGetGameTypeAssets");
static_assert(offsetof(BRAssetManager_SyncGetGameTypeAssets, Assets) == 0x000000, "Member 'BRAssetManager_SyncGetGameTypeAssets::Assets' has a wrong offset!");

// Function Brickadia.BRAssetManager.FindBrickAssetByName
// 0x0010 (0x0010 - 0x0000)
struct BRAssetManager_FindBrickAssetByName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickAsset*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAssetManager_FindBrickAssetByName) == 0x000008, "Wrong alignment on BRAssetManager_FindBrickAssetByName");
static_assert(sizeof(BRAssetManager_FindBrickAssetByName) == 0x000010, "Wrong size on BRAssetManager_FindBrickAssetByName");
static_assert(offsetof(BRAssetManager_FindBrickAssetByName, Name_0) == 0x000000, "Member 'BRAssetManager_FindBrickAssetByName::Name_0' has a wrong offset!");
static_assert(offsetof(BRAssetManager_FindBrickAssetByName, ReturnValue) == 0x000008, "Member 'BRAssetManager_FindBrickAssetByName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAssetManager.FindMapPackageByCommandName
// 0x0040 (0x0040 - 0x0000)
struct BRAssetManager_FindMapPackageByCommandName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  MapPackage;                                        // 0x0010(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRAssetManager_FindMapPackageByCommandName) == 0x000008, "Wrong alignment on BRAssetManager_FindMapPackageByCommandName");
static_assert(sizeof(BRAssetManager_FindMapPackageByCommandName) == 0x000040, "Wrong size on BRAssetManager_FindMapPackageByCommandName");
static_assert(offsetof(BRAssetManager_FindMapPackageByCommandName, Name_0) == 0x000000, "Member 'BRAssetManager_FindMapPackageByCommandName::Name_0' has a wrong offset!");
static_assert(offsetof(BRAssetManager_FindMapPackageByCommandName, MapPackage) == 0x000010, "Member 'BRAssetManager_FindMapPackageByCommandName::MapPackage' has a wrong offset!");
static_assert(offsetof(BRAssetManager_FindMapPackageByCommandName, ReturnValue) == 0x000038, "Member 'BRAssetManager_FindMapPackageByCommandName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInteractablePromptWidget.Setup
// 0x0018 (0x0018 - 0x0000)
struct BRInteractablePromptWidget_Setup final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PromptMessage;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInteractablePromptWidget_Setup) == 0x000008, "Wrong alignment on BRInteractablePromptWidget_Setup");
static_assert(sizeof(BRInteractablePromptWidget_Setup) == 0x000018, "Wrong size on BRInteractablePromptWidget_Setup");
static_assert(offsetof(BRInteractablePromptWidget_Setup, BrickHandle) == 0x000000, "Member 'BRInteractablePromptWidget_Setup::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRInteractablePromptWidget_Setup, PromptMessage) == 0x000008, "Member 'BRInteractablePromptWidget_Setup::PromptMessage' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.IsSteamBuild
// 0x0001 (0x0001 - 0x0000)
struct BRAuthSubsystem_IsSteamBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_IsSteamBuild) == 0x000001, "Wrong alignment on BRAuthSubsystem_IsSteamBuild");
static_assert(sizeof(BRAuthSubsystem_IsSteamBuild) == 0x000001, "Wrong size on BRAuthSubsystem_IsSteamBuild");
static_assert(offsetof(BRAuthSubsystem_IsSteamBuild, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_IsSteamBuild::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.GetConnectString
// 0x0010 (0x0010 - 0x0000)
struct BRAuthSubsystem_GetConnectString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_GetConnectString) == 0x000008, "Wrong alignment on BRAuthSubsystem_GetConnectString");
static_assert(sizeof(BRAuthSubsystem_GetConnectString) == 0x000010, "Wrong size on BRAuthSubsystem_GetConnectString");
static_assert(offsetof(BRAuthSubsystem_GetConnectString, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_GetConnectString::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.GetExternalName
// 0x0010 (0x0010 - 0x0000)
struct BRAuthSubsystem_GetExternalName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_GetExternalName) == 0x000008, "Wrong alignment on BRAuthSubsystem_GetExternalName");
static_assert(sizeof(BRAuthSubsystem_GetExternalName) == 0x000010, "Wrong size on BRAuthSubsystem_GetExternalName");
static_assert(offsetof(BRAuthSubsystem_GetExternalName, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_GetExternalName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.StartConnectSteamAccount
// 0x0020 (0x0020 - 0x0000)
struct BRAuthSubsystem_StartConnectSteamAccount final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_StartConnectSteamAccount) == 0x000008, "Wrong alignment on BRAuthSubsystem_StartConnectSteamAccount");
static_assert(sizeof(BRAuthSubsystem_StartConnectSteamAccount) == 0x000020, "Wrong size on BRAuthSubsystem_StartConnectSteamAccount");
static_assert(offsetof(BRAuthSubsystem_StartConnectSteamAccount, Email) == 0x000000, "Member 'BRAuthSubsystem_StartConnectSteamAccount::Email' has a wrong offset!");
static_assert(offsetof(BRAuthSubsystem_StartConnectSteamAccount, Password) == 0x000010, "Member 'BRAuthSubsystem_StartConnectSteamAccount::Password' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.StartLogin
// 0x0020 (0x0020 - 0x0000)
struct BRAuthSubsystem_StartLogin final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_StartLogin) == 0x000008, "Wrong alignment on BRAuthSubsystem_StartLogin");
static_assert(sizeof(BRAuthSubsystem_StartLogin) == 0x000020, "Wrong size on BRAuthSubsystem_StartLogin");
static_assert(offsetof(BRAuthSubsystem_StartLogin, Email) == 0x000000, "Member 'BRAuthSubsystem_StartLogin::Email' has a wrong offset!");
static_assert(offsetof(BRAuthSubsystem_StartLogin, Password) == 0x000010, "Member 'BRAuthSubsystem_StartLogin::Password' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.StartRegisterSteamAccount
// 0x0010 (0x0010 - 0x0000)
struct BRAuthSubsystem_StartRegisterSteamAccount final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_StartRegisterSteamAccount) == 0x000008, "Wrong alignment on BRAuthSubsystem_StartRegisterSteamAccount");
static_assert(sizeof(BRAuthSubsystem_StartRegisterSteamAccount) == 0x000010, "Wrong size on BRAuthSubsystem_StartRegisterSteamAccount");
static_assert(offsetof(BRAuthSubsystem_StartRegisterSteamAccount, UserName) == 0x000000, "Member 'BRAuthSubsystem_StartRegisterSteamAccount::UserName' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.GetAuthErrorCode
// 0x0010 (0x0010 - 0x0000)
struct BRAuthSubsystem_GetAuthErrorCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_GetAuthErrorCode) == 0x000008, "Wrong alignment on BRAuthSubsystem_GetAuthErrorCode");
static_assert(sizeof(BRAuthSubsystem_GetAuthErrorCode) == 0x000010, "Wrong size on BRAuthSubsystem_GetAuthErrorCode");
static_assert(offsetof(BRAuthSubsystem_GetAuthErrorCode, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_GetAuthErrorCode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.GetAuthErrorMessage
// 0x0010 (0x0010 - 0x0000)
struct BRAuthSubsystem_GetAuthErrorMessage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_GetAuthErrorMessage) == 0x000008, "Wrong alignment on BRAuthSubsystem_GetAuthErrorMessage");
static_assert(sizeof(BRAuthSubsystem_GetAuthErrorMessage) == 0x000010, "Wrong size on BRAuthSubsystem_GetAuthErrorMessage");
static_assert(offsetof(BRAuthSubsystem_GetAuthErrorMessage, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_GetAuthErrorMessage::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.GetAuthState
// 0x0001 (0x0001 - 0x0000)
struct BRAuthSubsystem_GetAuthState final
{
public:
	EBRAuthState                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_GetAuthState) == 0x000001, "Wrong alignment on BRAuthSubsystem_GetAuthState");
static_assert(sizeof(BRAuthSubsystem_GetAuthState) == 0x000001, "Wrong size on BRAuthSubsystem_GetAuthState");
static_assert(offsetof(BRAuthSubsystem_GetAuthState, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_GetAuthState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.GetAuthUserData
// 0x0030 (0x0030 - 0x0000)
struct BRAuthSubsystem_GetAuthUserData final
{
public:
	struct FBRAuthUserData                        ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_GetAuthUserData) == 0x000008, "Wrong alignment on BRAuthSubsystem_GetAuthUserData");
static_assert(sizeof(BRAuthSubsystem_GetAuthUserData) == 0x000030, "Wrong size on BRAuthSubsystem_GetAuthUserData");
static_assert(offsetof(BRAuthSubsystem_GetAuthUserData, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_GetAuthUserData::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.HasAuthError
// 0x0001 (0x0001 - 0x0000)
struct BRAuthSubsystem_HasAuthError final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_HasAuthError) == 0x000001, "Wrong alignment on BRAuthSubsystem_HasAuthError");
static_assert(sizeof(BRAuthSubsystem_HasAuthError) == 0x000001, "Wrong size on BRAuthSubsystem_HasAuthError");
static_assert(offsetof(BRAuthSubsystem_HasAuthError, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_HasAuthError::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.IsAuthStateInvalid
// 0x0001 (0x0001 - 0x0000)
struct BRAuthSubsystem_IsAuthStateInvalid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_IsAuthStateInvalid) == 0x000001, "Wrong alignment on BRAuthSubsystem_IsAuthStateInvalid");
static_assert(sizeof(BRAuthSubsystem_IsAuthStateInvalid) == 0x000001, "Wrong size on BRAuthSubsystem_IsAuthStateInvalid");
static_assert(offsetof(BRAuthSubsystem_IsAuthStateInvalid, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_IsAuthStateInvalid::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.IsAuthStatePending
// 0x0001 (0x0001 - 0x0000)
struct BRAuthSubsystem_IsAuthStatePending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_IsAuthStatePending) == 0x000001, "Wrong alignment on BRAuthSubsystem_IsAuthStatePending");
static_assert(sizeof(BRAuthSubsystem_IsAuthStatePending) == 0x000001, "Wrong size on BRAuthSubsystem_IsAuthStatePending");
static_assert(offsetof(BRAuthSubsystem_IsAuthStatePending, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_IsAuthStatePending::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.IsAuthStateValid
// 0x0001 (0x0001 - 0x0000)
struct BRAuthSubsystem_IsAuthStateValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_IsAuthStateValid) == 0x000001, "Wrong alignment on BRAuthSubsystem_IsAuthStateValid");
static_assert(sizeof(BRAuthSubsystem_IsAuthStateValid) == 0x000001, "Wrong size on BRAuthSubsystem_IsAuthStateValid");
static_assert(offsetof(BRAuthSubsystem_IsAuthStateValid, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_IsAuthStateValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAuthSubsystem.IsLoggedInWithEOS
// 0x0001 (0x0001 - 0x0000)
struct BRAuthSubsystem_IsLoggedInWithEOS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAuthSubsystem_IsLoggedInWithEOS) == 0x000001, "Wrong alignment on BRAuthSubsystem_IsLoggedInWithEOS");
static_assert(sizeof(BRAuthSubsystem_IsLoggedInWithEOS) == 0x000001, "Wrong size on BRAuthSubsystem_IsLoggedInWithEOS");
static_assert(offsetof(BRAuthSubsystem_IsLoggedInWithEOS, ReturnValue) == 0x000000, "Member 'BRAuthSubsystem_IsLoggedInWithEOS::ReturnValue' has a wrong offset!");

// Function Brickadia.BRAutoSaveSubsystem.ForceLastModifyTime
// 0x0008 (0x0008 - 0x0000)
struct BRAutoSaveSubsystem_ForceLastModifyTime final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAutoSaveSubsystem_ForceLastModifyTime) == 0x000008, "Wrong alignment on BRAutoSaveSubsystem_ForceLastModifyTime");
static_assert(sizeof(BRAutoSaveSubsystem_ForceLastModifyTime) == 0x000008, "Wrong size on BRAutoSaveSubsystem_ForceLastModifyTime");
static_assert(offsetof(BRAutoSaveSubsystem_ForceLastModifyTime, Time) == 0x000000, "Member 'BRAutoSaveSubsystem_ForceLastModifyTime::Time' has a wrong offset!");

// Function Brickadia.BRAutoSaveSubsystem.HandleSettingsChange
// 0x0008 (0x0008 - 0x0000)
struct BRAutoSaveSubsystem_HandleSettingsChange final
{
public:
	class UBRGameSettingsBase*                    SettingsInstance;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAutoSaveSubsystem_HandleSettingsChange) == 0x000008, "Wrong alignment on BRAutoSaveSubsystem_HandleSettingsChange");
static_assert(sizeof(BRAutoSaveSubsystem_HandleSettingsChange) == 0x000008, "Wrong size on BRAutoSaveSubsystem_HandleSettingsChange");
static_assert(offsetof(BRAutoSaveSubsystem_HandleSettingsChange, SettingsInstance) == 0x000000, "Member 'BRAutoSaveSubsystem_HandleSettingsChange::SettingsInstance' has a wrong offset!");

// Function Brickadia.BRBlogHelpers.GetBestBlogImageUrl
// 0x0028 (0x0028 - 0x0000)
struct BRBlogHelpers_GetBestBlogImageUrl final
{
public:
	class FString                                 FullSizeUrl;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredWidth;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlogHelpers_GetBestBlogImageUrl) == 0x000008, "Wrong alignment on BRBlogHelpers_GetBestBlogImageUrl");
static_assert(sizeof(BRBlogHelpers_GetBestBlogImageUrl) == 0x000028, "Wrong size on BRBlogHelpers_GetBestBlogImageUrl");
static_assert(offsetof(BRBlogHelpers_GetBestBlogImageUrl, FullSizeUrl) == 0x000000, "Member 'BRBlogHelpers_GetBestBlogImageUrl::FullSizeUrl' has a wrong offset!");
static_assert(offsetof(BRBlogHelpers_GetBestBlogImageUrl, DesiredWidth) == 0x000010, "Member 'BRBlogHelpers_GetBestBlogImageUrl::DesiredWidth' has a wrong offset!");
static_assert(offsetof(BRBlogHelpers_GetBestBlogImageUrl, ReturnValue) == 0x000018, "Member 'BRBlogHelpers_GetBestBlogImageUrl::ReturnValue' has a wrong offset!");

// Function Brickadia.BRListBlogPostsAsyncAction.AsyncListBlogPosts
// 0x0018 (0x0018 - 0x0000)
struct BRListBlogPostsAsyncAction_AsyncListBlogPosts final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSequence;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPostsToRequest;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRListBlogPostsAsyncAction*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRListBlogPostsAsyncAction_AsyncListBlogPosts) == 0x000008, "Wrong alignment on BRListBlogPostsAsyncAction_AsyncListBlogPosts");
static_assert(sizeof(BRListBlogPostsAsyncAction_AsyncListBlogPosts) == 0x000018, "Wrong size on BRListBlogPostsAsyncAction_AsyncListBlogPosts");
static_assert(offsetof(BRListBlogPostsAsyncAction_AsyncListBlogPosts, WorldContextObject) == 0x000000, "Member 'BRListBlogPostsAsyncAction_AsyncListBlogPosts::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRListBlogPostsAsyncAction_AsyncListBlogPosts, InSequence) == 0x000008, "Member 'BRListBlogPostsAsyncAction_AsyncListBlogPosts::InSequence' has a wrong offset!");
static_assert(offsetof(BRListBlogPostsAsyncAction_AsyncListBlogPosts, NumPostsToRequest) == 0x00000C, "Member 'BRListBlogPostsAsyncAction_AsyncListBlogPosts::NumPostsToRequest' has a wrong offset!");
static_assert(offsetof(BRListBlogPostsAsyncAction_AsyncListBlogPosts, ReturnValue) == 0x000010, "Member 'BRListBlogPostsAsyncAction_AsyncListBlogPosts::ReturnValue' has a wrong offset!");

// Function Brickadia.BRDownloadAndResizeImageAsyncAction.AsyncDownloadAndResizeImage
// 0x0038 (0x0038 - 0x0000)
struct BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSequence;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredWidth;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredHeight;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCache;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRDownloadAndResizeImageAsyncAction*   ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage) == 0x000008, "Wrong alignment on BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage");
static_assert(sizeof(BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage) == 0x000038, "Wrong size on BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage");
static_assert(offsetof(BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage, WorldContextObject) == 0x000000, "Member 'BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage, InSequence) == 0x000008, "Member 'BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage::InSequence' has a wrong offset!");
static_assert(offsetof(BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage, URL) == 0x000010, "Member 'BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage::URL' has a wrong offset!");
static_assert(offsetof(BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage, DesiredWidth) == 0x000020, "Member 'BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage::DesiredWidth' has a wrong offset!");
static_assert(offsetof(BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage, DesiredHeight) == 0x000024, "Member 'BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage::DesiredHeight' has a wrong offset!");
static_assert(offsetof(BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage, bUseCache) == 0x000028, "Member 'BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage::bUseCache' has a wrong offset!");
static_assert(offsetof(BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage, ReturnValue) == 0x000030, "Member 'BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.ActorLineTraceSingle
// 0x0130 (0x0130 - 0x0000)
struct BRBlueprintLibrary_ActorLineTraceSingle final
{
public:
	struct FHitResult                             OutHit;                                            // 0x0000(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x00F8(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0110(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0128(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0129(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_ActorLineTraceSingle) == 0x000008, "Wrong alignment on BRBlueprintLibrary_ActorLineTraceSingle");
static_assert(sizeof(BRBlueprintLibrary_ActorLineTraceSingle) == 0x000130, "Wrong size on BRBlueprintLibrary_ActorLineTraceSingle");
static_assert(offsetof(BRBlueprintLibrary_ActorLineTraceSingle, OutHit) == 0x000000, "Member 'BRBlueprintLibrary_ActorLineTraceSingle::OutHit' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ActorLineTraceSingle, Actor) == 0x0000F0, "Member 'BRBlueprintLibrary_ActorLineTraceSingle::Actor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ActorLineTraceSingle, Start) == 0x0000F8, "Member 'BRBlueprintLibrary_ActorLineTraceSingle::Start' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ActorLineTraceSingle, End) == 0x000110, "Member 'BRBlueprintLibrary_ActorLineTraceSingle::End' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ActorLineTraceSingle, bTraceComplex) == 0x000128, "Member 'BRBlueprintLibrary_ActorLineTraceSingle::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ActorLineTraceSingle, ReturnValue) == 0x000129, "Member 'BRBlueprintLibrary_ActorLineTraceSingle::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.AssetNameToDisplayString
// 0x0020 (0x0020 - 0x0000)
struct BRBlueprintLibrary_AssetNameToDisplayString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_AssetNameToDisplayString) == 0x000008, "Wrong alignment on BRBlueprintLibrary_AssetNameToDisplayString");
static_assert(sizeof(BRBlueprintLibrary_AssetNameToDisplayString) == 0x000020, "Wrong size on BRBlueprintLibrary_AssetNameToDisplayString");
static_assert(offsetof(BRBlueprintLibrary_AssetNameToDisplayString, InString) == 0x000000, "Member 'BRBlueprintLibrary_AssetNameToDisplayString::InString' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_AssetNameToDisplayString, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_AssetNameToDisplayString::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.BeginConnectingToServer
// 0x0080 (0x0080 - 0x0000)
struct BRBlueprintLibrary_BeginConnectingToServer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AddressAndPort;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Options;                                           // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ServerIdString;                                    // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_BeginConnectingToServer) == 0x000008, "Wrong alignment on BRBlueprintLibrary_BeginConnectingToServer");
static_assert(sizeof(BRBlueprintLibrary_BeginConnectingToServer) == 0x000080, "Wrong size on BRBlueprintLibrary_BeginConnectingToServer");
static_assert(offsetof(BRBlueprintLibrary_BeginConnectingToServer, WorldContextObject) == 0x000000, "Member 'BRBlueprintLibrary_BeginConnectingToServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_BeginConnectingToServer, AddressAndPort) == 0x000008, "Member 'BRBlueprintLibrary_BeginConnectingToServer::AddressAndPort' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_BeginConnectingToServer, Options) == 0x000018, "Member 'BRBlueprintLibrary_BeginConnectingToServer::Options' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_BeginConnectingToServer, ServerIdString) == 0x000068, "Member 'BRBlueprintLibrary_BeginConnectingToServer::ServerIdString' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_BeginConnectingToServer, ReturnValue) == 0x000078, "Member 'BRBlueprintLibrary_BeginConnectingToServer::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.BRSaveConfig
// 0x0008 (0x0008 - 0x0000)
struct BRBlueprintLibrary_BRSaveConfig final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_BRSaveConfig) == 0x000008, "Wrong alignment on BRBlueprintLibrary_BRSaveConfig");
static_assert(sizeof(BRBlueprintLibrary_BRSaveConfig) == 0x000008, "Wrong size on BRBlueprintLibrary_BRSaveConfig");
static_assert(offsetof(BRBlueprintLibrary_BRSaveConfig, Object) == 0x000000, "Member 'BRBlueprintLibrary_BRSaveConfig::Object' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.ClassToObject
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_ClassToObject final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_ClassToObject) == 0x000008, "Wrong alignment on BRBlueprintLibrary_ClassToObject");
static_assert(sizeof(BRBlueprintLibrary_ClassToObject) == 0x000010, "Wrong size on BRBlueprintLibrary_ClassToObject");
static_assert(offsetof(BRBlueprintLibrary_ClassToObject, Class_0) == 0x000000, "Member 'BRBlueprintLibrary_ClassToObject::Class_0' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ClassToObject, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_ClassToObject::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.ColorToLinearColorNoSRGB
// 0x0014 (0x0014 - 0x0000)
struct BRBlueprintLibrary_ColorToLinearColorNoSRGB final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_ColorToLinearColorNoSRGB) == 0x000004, "Wrong alignment on BRBlueprintLibrary_ColorToLinearColorNoSRGB");
static_assert(sizeof(BRBlueprintLibrary_ColorToLinearColorNoSRGB) == 0x000014, "Wrong size on BRBlueprintLibrary_ColorToLinearColorNoSRGB");
static_assert(offsetof(BRBlueprintLibrary_ColorToLinearColorNoSRGB, Color) == 0x000000, "Member 'BRBlueprintLibrary_ColorToLinearColorNoSRGB::Color' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ColorToLinearColorNoSRGB, ReturnValue) == 0x000004, "Member 'BRBlueprintLibrary_ColorToLinearColorNoSRGB::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.ComputeExponentialClampDelta
// 0x001C (0x001C - 0x0000)
struct BRBlueprintLibrary_ComputeExponentialClampDelta final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampMin;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampMax;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExponentialDistance;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverflowStorage;                                   // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_ComputeExponentialClampDelta) == 0x000004, "Wrong alignment on BRBlueprintLibrary_ComputeExponentialClampDelta");
static_assert(sizeof(BRBlueprintLibrary_ComputeExponentialClampDelta) == 0x00001C, "Wrong size on BRBlueprintLibrary_ComputeExponentialClampDelta");
static_assert(offsetof(BRBlueprintLibrary_ComputeExponentialClampDelta, Current) == 0x000000, "Member 'BRBlueprintLibrary_ComputeExponentialClampDelta::Current' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ComputeExponentialClampDelta, ClampMin) == 0x000004, "Member 'BRBlueprintLibrary_ComputeExponentialClampDelta::ClampMin' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ComputeExponentialClampDelta, ClampMax) == 0x000008, "Member 'BRBlueprintLibrary_ComputeExponentialClampDelta::ClampMax' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ComputeExponentialClampDelta, ExponentialDistance) == 0x00000C, "Member 'BRBlueprintLibrary_ComputeExponentialClampDelta::ExponentialDistance' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ComputeExponentialClampDelta, Delta) == 0x000010, "Member 'BRBlueprintLibrary_ComputeExponentialClampDelta::Delta' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ComputeExponentialClampDelta, OverflowStorage) == 0x000014, "Member 'BRBlueprintLibrary_ComputeExponentialClampDelta::OverflowStorage' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ComputeExponentialClampDelta, ReturnValue) == 0x000018, "Member 'BRBlueprintLibrary_ComputeExponentialClampDelta::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.ComputePreciseSkeletalMeshBounds
// 0x0040 (0x0040 - 0x0000)
struct BRBlueprintLibrary_ComputePreciseSkeletalMeshBounds final
{
public:
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_ComputePreciseSkeletalMeshBounds) == 0x000008, "Wrong alignment on BRBlueprintLibrary_ComputePreciseSkeletalMeshBounds");
static_assert(sizeof(BRBlueprintLibrary_ComputePreciseSkeletalMeshBounds) == 0x000040, "Wrong size on BRBlueprintLibrary_ComputePreciseSkeletalMeshBounds");
static_assert(offsetof(BRBlueprintLibrary_ComputePreciseSkeletalMeshBounds, MeshComponent) == 0x000000, "Member 'BRBlueprintLibrary_ComputePreciseSkeletalMeshBounds::MeshComponent' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ComputePreciseSkeletalMeshBounds, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_ComputePreciseSkeletalMeshBounds::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.Conv_StringToFColor
// 0x0018 (0x0018 - 0x0000)
struct BRBlueprintLibrary_Conv_StringToFColor final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OutConvertedColor;                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutIsValid;                                        // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_Conv_StringToFColor) == 0x000008, "Wrong alignment on BRBlueprintLibrary_Conv_StringToFColor");
static_assert(sizeof(BRBlueprintLibrary_Conv_StringToFColor) == 0x000018, "Wrong size on BRBlueprintLibrary_Conv_StringToFColor");
static_assert(offsetof(BRBlueprintLibrary_Conv_StringToFColor, InString) == 0x000000, "Member 'BRBlueprintLibrary_Conv_StringToFColor::InString' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_Conv_StringToFColor, OutConvertedColor) == 0x000010, "Member 'BRBlueprintLibrary_Conv_StringToFColor::OutConvertedColor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_Conv_StringToFColor, OutIsValid) == 0x000014, "Member 'BRBlueprintLibrary_Conv_StringToFColor::OutIsValid' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.EqualEqual_ColorColor
// 0x000C (0x000C - 0x0000)
struct BRBlueprintLibrary_EqualEqual_ColorColor final
{
public:
	struct FColor                                 A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_EqualEqual_ColorColor) == 0x000004, "Wrong alignment on BRBlueprintLibrary_EqualEqual_ColorColor");
static_assert(sizeof(BRBlueprintLibrary_EqualEqual_ColorColor) == 0x00000C, "Wrong size on BRBlueprintLibrary_EqualEqual_ColorColor");
static_assert(offsetof(BRBlueprintLibrary_EqualEqual_ColorColor, A) == 0x000000, "Member 'BRBlueprintLibrary_EqualEqual_ColorColor::A' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_EqualEqual_ColorColor, B) == 0x000004, "Member 'BRBlueprintLibrary_EqualEqual_ColorColor::B' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_EqualEqual_ColorColor, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_EqualEqual_ColorColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.EqualEqual_IntVectorIntVector
// 0x001C (0x001C - 0x0000)
struct BRBlueprintLibrary_EqualEqual_IntVectorIntVector final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             B;                                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_EqualEqual_IntVectorIntVector) == 0x000004, "Wrong alignment on BRBlueprintLibrary_EqualEqual_IntVectorIntVector");
static_assert(sizeof(BRBlueprintLibrary_EqualEqual_IntVectorIntVector) == 0x00001C, "Wrong size on BRBlueprintLibrary_EqualEqual_IntVectorIntVector");
static_assert(offsetof(BRBlueprintLibrary_EqualEqual_IntVectorIntVector, A) == 0x000000, "Member 'BRBlueprintLibrary_EqualEqual_IntVectorIntVector::A' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_EqualEqual_IntVectorIntVector, B) == 0x00000C, "Member 'BRBlueprintLibrary_EqualEqual_IntVectorIntVector::B' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_EqualEqual_IntVectorIntVector, ReturnValue) == 0x000018, "Member 'BRBlueprintLibrary_EqualEqual_IntVectorIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.EscapeNetOption
// 0x0020 (0x0020 - 0x0000)
struct BRBlueprintLibrary_EscapeNetOption final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_EscapeNetOption) == 0x000008, "Wrong alignment on BRBlueprintLibrary_EscapeNetOption");
static_assert(sizeof(BRBlueprintLibrary_EscapeNetOption) == 0x000020, "Wrong size on BRBlueprintLibrary_EscapeNetOption");
static_assert(offsetof(BRBlueprintLibrary_EscapeNetOption, Password) == 0x000000, "Member 'BRBlueprintLibrary_EscapeNetOption::Password' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_EscapeNetOption, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_EscapeNetOption::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.FormatLargeNumber
// 0x0018 (0x0018 - 0x0000)
struct BRBlueprintLibrary_FormatLargeNumber final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_FormatLargeNumber) == 0x000008, "Wrong alignment on BRBlueprintLibrary_FormatLargeNumber");
static_assert(sizeof(BRBlueprintLibrary_FormatLargeNumber) == 0x000018, "Wrong size on BRBlueprintLibrary_FormatLargeNumber");
static_assert(offsetof(BRBlueprintLibrary_FormatLargeNumber, Number) == 0x000000, "Member 'BRBlueprintLibrary_FormatLargeNumber::Number' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_FormatLargeNumber, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_FormatLargeNumber::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.FormatLinearColorToHex
// 0x0020 (0x0020 - 0x0000)
struct BRBlueprintLibrary_FormatLinearColorToHex final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_FormatLinearColorToHex) == 0x000008, "Wrong alignment on BRBlueprintLibrary_FormatLinearColorToHex");
static_assert(sizeof(BRBlueprintLibrary_FormatLinearColorToHex) == 0x000020, "Wrong size on BRBlueprintLibrary_FormatLinearColorToHex");
static_assert(offsetof(BRBlueprintLibrary_FormatLinearColorToHex, Color) == 0x000000, "Member 'BRBlueprintLibrary_FormatLinearColorToHex::Color' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_FormatLinearColorToHex, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_FormatLinearColorToHex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.FormatTimespanSimple
// 0x0018 (0x0018 - 0x0000)
struct BRBlueprintLibrary_FormatTimespanSimple final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_FormatTimespanSimple) == 0x000008, "Wrong alignment on BRBlueprintLibrary_FormatTimespanSimple");
static_assert(sizeof(BRBlueprintLibrary_FormatTimespanSimple) == 0x000018, "Wrong size on BRBlueprintLibrary_FormatTimespanSimple");
static_assert(offsetof(BRBlueprintLibrary_FormatTimespanSimple, Timespan) == 0x000000, "Member 'BRBlueprintLibrary_FormatTimespanSimple::Timespan' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_FormatTimespanSimple, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_FormatTimespanSimple::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.FuzzyFindTest
// 0x0028 (0x0028 - 0x0000)
struct BRBlueprintLibrary_FuzzyFindTest final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Query;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_FuzzyFindTest) == 0x000008, "Wrong alignment on BRBlueprintLibrary_FuzzyFindTest");
static_assert(sizeof(BRBlueprintLibrary_FuzzyFindTest) == 0x000028, "Wrong size on BRBlueprintLibrary_FuzzyFindTest");
static_assert(offsetof(BRBlueprintLibrary_FuzzyFindTest, Name_0) == 0x000000, "Member 'BRBlueprintLibrary_FuzzyFindTest::Name_0' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_FuzzyFindTest, Query) == 0x000010, "Member 'BRBlueprintLibrary_FuzzyFindTest::Query' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_FuzzyFindTest, ReturnValue) == 0x000020, "Member 'BRBlueprintLibrary_FuzzyFindTest::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetActorBoundsCenter
// 0x0028 (0x0028 - 0x0000)
struct BRBlueprintLibrary_GetActorBoundsCenter final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonColliding;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeFromChildActors;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetActorBoundsCenter) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetActorBoundsCenter");
static_assert(sizeof(BRBlueprintLibrary_GetActorBoundsCenter) == 0x000028, "Wrong size on BRBlueprintLibrary_GetActorBoundsCenter");
static_assert(offsetof(BRBlueprintLibrary_GetActorBoundsCenter, Actor) == 0x000000, "Member 'BRBlueprintLibrary_GetActorBoundsCenter::Actor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetActorBoundsCenter, bNonColliding) == 0x000008, "Member 'BRBlueprintLibrary_GetActorBoundsCenter::bNonColliding' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetActorBoundsCenter, bIncludeFromChildActors) == 0x000009, "Member 'BRBlueprintLibrary_GetActorBoundsCenter::bIncludeFromChildActors' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetActorBoundsCenter, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_GetActorBoundsCenter::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetBackendWebAddress
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_GetBackendWebAddress final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetBackendWebAddress) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetBackendWebAddress");
static_assert(sizeof(BRBlueprintLibrary_GetBackendWebAddress) == 0x000010, "Wrong size on BRBlueprintLibrary_GetBackendWebAddress");
static_assert(offsetof(BRBlueprintLibrary_GetBackendWebAddress, ReturnValue) == 0x000000, "Member 'BRBlueprintLibrary_GetBackendWebAddress::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetBRGameState
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_GetBRGameState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRGameStateBase*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetBRGameState) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetBRGameState");
static_assert(sizeof(BRBlueprintLibrary_GetBRGameState) == 0x000010, "Wrong size on BRBlueprintLibrary_GetBRGameState");
static_assert(offsetof(BRBlueprintLibrary_GetBRGameState, WorldContextObject) == 0x000000, "Member 'BRBlueprintLibrary_GetBRGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetBRGameState, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_GetBRGameState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetBrickadiaVersion
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_GetBrickadiaVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetBrickadiaVersion) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetBrickadiaVersion");
static_assert(sizeof(BRBlueprintLibrary_GetBrickadiaVersion) == 0x000010, "Wrong size on BRBlueprintLibrary_GetBrickadiaVersion");
static_assert(offsetof(BRBlueprintLibrary_GetBrickadiaVersion, ReturnValue) == 0x000000, "Member 'BRBlueprintLibrary_GetBrickadiaVersion::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetBrickadiaVersionChangelist
// 0x0004 (0x0004 - 0x0000)
struct BRBlueprintLibrary_GetBrickadiaVersionChangelist final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetBrickadiaVersionChangelist) == 0x000004, "Wrong alignment on BRBlueprintLibrary_GetBrickadiaVersionChangelist");
static_assert(sizeof(BRBlueprintLibrary_GetBrickadiaVersionChangelist) == 0x000004, "Wrong size on BRBlueprintLibrary_GetBrickadiaVersionChangelist");
static_assert(offsetof(BRBlueprintLibrary_GetBrickadiaVersionChangelist, ReturnValue) == 0x000000, "Member 'BRBlueprintLibrary_GetBrickadiaVersionChangelist::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetBRPlayerController
// 0x0018 (0x0018 - 0x0000)
struct BRBlueprintLibrary_GetBRPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABRPlayerController*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetBRPlayerController) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetBRPlayerController");
static_assert(sizeof(BRBlueprintLibrary_GetBRPlayerController) == 0x000018, "Wrong size on BRBlueprintLibrary_GetBRPlayerController");
static_assert(offsetof(BRBlueprintLibrary_GetBRPlayerController, WorldContextObject) == 0x000000, "Member 'BRBlueprintLibrary_GetBRPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetBRPlayerController, ID) == 0x000008, "Member 'BRBlueprintLibrary_GetBRPlayerController::ID' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetBRPlayerController, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_GetBRPlayerController::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetClassDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_GetClassDefaultObject final
{
public:
	const class UClass*                           Class_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetClassDefaultObject) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetClassDefaultObject");
static_assert(sizeof(BRBlueprintLibrary_GetClassDefaultObject) == 0x000010, "Wrong size on BRBlueprintLibrary_GetClassDefaultObject");
static_assert(offsetof(BRBlueprintLibrary_GetClassDefaultObject, Class_0) == 0x000000, "Member 'BRBlueprintLibrary_GetClassDefaultObject::Class_0' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetClassDefaultObject, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_GetClassDefaultObject::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetConnectStringFromServerEntry
// 0x0110 (0x0110 - 0x0000)
struct BRBlueprintLibrary_GetConnectStringFromServerEntry final
{
public:
	struct FJsonResponse_GetServers_Entry         Entry;                                             // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InviteCode;                                        // 0x00F0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0100(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetConnectStringFromServerEntry) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetConnectStringFromServerEntry");
static_assert(sizeof(BRBlueprintLibrary_GetConnectStringFromServerEntry) == 0x000110, "Wrong size on BRBlueprintLibrary_GetConnectStringFromServerEntry");
static_assert(offsetof(BRBlueprintLibrary_GetConnectStringFromServerEntry, Entry) == 0x000000, "Member 'BRBlueprintLibrary_GetConnectStringFromServerEntry::Entry' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetConnectStringFromServerEntry, InviteCode) == 0x0000F0, "Member 'BRBlueprintLibrary_GetConnectStringFromServerEntry::InviteCode' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetConnectStringFromServerEntry, ReturnValue) == 0x000100, "Member 'BRBlueprintLibrary_GetConnectStringFromServerEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetLoadedLightScenario
// 0x0018 (0x0018 - 0x0000)
struct BRBlueprintLibrary_GetLoadedLightScenario final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetLoadedLightScenario) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetLoadedLightScenario");
static_assert(sizeof(BRBlueprintLibrary_GetLoadedLightScenario) == 0x000018, "Wrong size on BRBlueprintLibrary_GetLoadedLightScenario");
static_assert(offsetof(BRBlueprintLibrary_GetLoadedLightScenario, WorldContextObject) == 0x000000, "Member 'BRBlueprintLibrary_GetLoadedLightScenario::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetLoadedLightScenario, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_GetLoadedLightScenario::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetMapInfoForCurrentMap
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_GetMapInfoForCurrentMap final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRMapInfo*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetMapInfoForCurrentMap) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetMapInfoForCurrentMap");
static_assert(sizeof(BRBlueprintLibrary_GetMapInfoForCurrentMap) == 0x000010, "Wrong size on BRBlueprintLibrary_GetMapInfoForCurrentMap");
static_assert(offsetof(BRBlueprintLibrary_GetMapInfoForCurrentMap, WorldContextObject) == 0x000000, "Member 'BRBlueprintLibrary_GetMapInfoForCurrentMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetMapInfoForCurrentMap, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_GetMapInfoForCurrentMap::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetMapInfoForWorld
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_GetMapInfoForWorld final
{
public:
	const class UWorld*                           World;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRMapInfo*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetMapInfoForWorld) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetMapInfoForWorld");
static_assert(sizeof(BRBlueprintLibrary_GetMapInfoForWorld) == 0x000010, "Wrong size on BRBlueprintLibrary_GetMapInfoForWorld");
static_assert(offsetof(BRBlueprintLibrary_GetMapInfoForWorld, World) == 0x000000, "Member 'BRBlueprintLibrary_GetMapInfoForWorld::World' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetMapInfoForWorld, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_GetMapInfoForWorld::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetObjectClass
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_GetObjectClass final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetObjectClass) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetObjectClass");
static_assert(sizeof(BRBlueprintLibrary_GetObjectClass) == 0x000010, "Wrong size on BRBlueprintLibrary_GetObjectClass");
static_assert(offsetof(BRBlueprintLibrary_GetObjectClass, Object) == 0x000000, "Member 'BRBlueprintLibrary_GetObjectClass::Object' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetObjectClass, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_GetObjectClass::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetPlatformClipboard
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_GetPlatformClipboard final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetPlatformClipboard) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetPlatformClipboard");
static_assert(sizeof(BRBlueprintLibrary_GetPlatformClipboard) == 0x000010, "Wrong size on BRBlueprintLibrary_GetPlatformClipboard");
static_assert(offsetof(BRBlueprintLibrary_GetPlatformClipboard, ReturnValue) == 0x000000, "Member 'BRBlueprintLibrary_GetPlatformClipboard::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetSoftPackageName
// 0x0038 (0x0038 - 0x0000)
struct BRBlueprintLibrary_GetSoftPackageName final
{
public:
	TSoftObjectPtr<class UObject>                 Ptr;                                               // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetSoftPackageName) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetSoftPackageName");
static_assert(sizeof(BRBlueprintLibrary_GetSoftPackageName) == 0x000038, "Wrong size on BRBlueprintLibrary_GetSoftPackageName");
static_assert(offsetof(BRBlueprintLibrary_GetSoftPackageName, Ptr) == 0x000000, "Member 'BRBlueprintLibrary_GetSoftPackageName::Ptr' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetSoftPackageName, ReturnValue) == 0x000028, "Member 'BRBlueprintLibrary_GetSoftPackageName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.GetWeaponSimResourceState
// 0x0070 (0x0070 - 0x0000)
struct BRBlueprintLibrary_GetWeaponSimResourceState final
{
public:
	struct FBRWeaponSimulationState               State;                                             // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x006C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_GetWeaponSimResourceState) == 0x000008, "Wrong alignment on BRBlueprintLibrary_GetWeaponSimResourceState");
static_assert(sizeof(BRBlueprintLibrary_GetWeaponSimResourceState) == 0x000070, "Wrong size on BRBlueprintLibrary_GetWeaponSimResourceState");
static_assert(offsetof(BRBlueprintLibrary_GetWeaponSimResourceState, State) == 0x000000, "Member 'BRBlueprintLibrary_GetWeaponSimResourceState::State' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetWeaponSimResourceState, Index_0) == 0x000068, "Member 'BRBlueprintLibrary_GetWeaponSimResourceState::Index_0' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_GetWeaponSimResourceState, ReturnValue) == 0x00006C, "Member 'BRBlueprintLibrary_GetWeaponSimResourceState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.IdOrRegisterBrickOwner
// 0x0018 (0x0018 - 0x0000)
struct BRBlueprintLibrary_IdOrRegisterBrickOwner final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerController*                    BrickOwner;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_IdOrRegisterBrickOwner) == 0x000008, "Wrong alignment on BRBlueprintLibrary_IdOrRegisterBrickOwner");
static_assert(sizeof(BRBlueprintLibrary_IdOrRegisterBrickOwner) == 0x000018, "Wrong size on BRBlueprintLibrary_IdOrRegisterBrickOwner");
static_assert(offsetof(BRBlueprintLibrary_IdOrRegisterBrickOwner, WorldContextObject) == 0x000000, "Member 'BRBlueprintLibrary_IdOrRegisterBrickOwner::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_IdOrRegisterBrickOwner, BrickOwner) == 0x000008, "Member 'BRBlueprintLibrary_IdOrRegisterBrickOwner::BrickOwner' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_IdOrRegisterBrickOwner, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_IdOrRegisterBrickOwner::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.IdOrRegisterBrickOwner_NotPresent
// 0x0040 (0x0040 - 0x0000)
struct BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickOwnerData                        BrickOwnerData;                                    // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent) == 0x000008, "Wrong alignment on BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent");
static_assert(sizeof(BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent) == 0x000040, "Wrong size on BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent");
static_assert(offsetof(BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent, WorldContextObject) == 0x000000, "Member 'BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent, BrickOwnerData) == 0x000008, "Member 'BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent::BrickOwnerData' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent, ReturnValue) == 0x000038, "Member 'BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.IsClassPackageBlacklisted
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_IsClassPackageBlacklisted final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_IsClassPackageBlacklisted) == 0x000008, "Wrong alignment on BRBlueprintLibrary_IsClassPackageBlacklisted");
static_assert(sizeof(BRBlueprintLibrary_IsClassPackageBlacklisted) == 0x000010, "Wrong size on BRBlueprintLibrary_IsClassPackageBlacklisted");
static_assert(offsetof(BRBlueprintLibrary_IsClassPackageBlacklisted, Class_0) == 0x000000, "Member 'BRBlueprintLibrary_IsClassPackageBlacklisted::Class_0' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_IsClassPackageBlacklisted, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_IsClassPackageBlacklisted::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.IsContrastColorLight
// 0x0014 (0x0014 - 0x0000)
struct BRBlueprintLibrary_IsContrastColorLight final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_IsContrastColorLight) == 0x000004, "Wrong alignment on BRBlueprintLibrary_IsContrastColorLight");
static_assert(sizeof(BRBlueprintLibrary_IsContrastColorLight) == 0x000014, "Wrong size on BRBlueprintLibrary_IsContrastColorLight");
static_assert(offsetof(BRBlueprintLibrary_IsContrastColorLight, Color) == 0x000000, "Member 'BRBlueprintLibrary_IsContrastColorLight::Color' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_IsContrastColorLight, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_IsContrastColorLight::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.IsInputActionPressed
// 0x0018 (0x0018 - 0x0000)
struct BRBlueprintLibrary_IsInputActionPressed final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputActionName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_IsInputActionPressed) == 0x000008, "Wrong alignment on BRBlueprintLibrary_IsInputActionPressed");
static_assert(sizeof(BRBlueprintLibrary_IsInputActionPressed) == 0x000018, "Wrong size on BRBlueprintLibrary_IsInputActionPressed");
static_assert(offsetof(BRBlueprintLibrary_IsInputActionPressed, PlayerController) == 0x000000, "Member 'BRBlueprintLibrary_IsInputActionPressed::PlayerController' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_IsInputActionPressed, InputActionName) == 0x000008, "Member 'BRBlueprintLibrary_IsInputActionPressed::InputActionName' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_IsInputActionPressed, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_IsInputActionPressed::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.IsInviteCodeFormat
// 0x0018 (0x0018 - 0x0000)
struct BRBlueprintLibrary_IsInviteCodeFormat final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_IsInviteCodeFormat) == 0x000008, "Wrong alignment on BRBlueprintLibrary_IsInviteCodeFormat");
static_assert(sizeof(BRBlueprintLibrary_IsInviteCodeFormat) == 0x000018, "Wrong size on BRBlueprintLibrary_IsInviteCodeFormat");
static_assert(offsetof(BRBlueprintLibrary_IsInviteCodeFormat, String) == 0x000000, "Member 'BRBlueprintLibrary_IsInviteCodeFormat::String' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_IsInviteCodeFormat, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_IsInviteCodeFormat::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.IsObjectPackageBlacklisted
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_IsObjectPackageBlacklisted final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_IsObjectPackageBlacklisted) == 0x000008, "Wrong alignment on BRBlueprintLibrary_IsObjectPackageBlacklisted");
static_assert(sizeof(BRBlueprintLibrary_IsObjectPackageBlacklisted) == 0x000010, "Wrong size on BRBlueprintLibrary_IsObjectPackageBlacklisted");
static_assert(offsetof(BRBlueprintLibrary_IsObjectPackageBlacklisted, Object) == 0x000000, "Member 'BRBlueprintLibrary_IsObjectPackageBlacklisted::Object' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_IsObjectPackageBlacklisted, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_IsObjectPackageBlacklisted::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.IsPublicBuild
// 0x0001 (0x0001 - 0x0000)
struct BRBlueprintLibrary_IsPublicBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_IsPublicBuild) == 0x000001, "Wrong alignment on BRBlueprintLibrary_IsPublicBuild");
static_assert(sizeof(BRBlueprintLibrary_IsPublicBuild) == 0x000001, "Wrong size on BRBlueprintLibrary_IsPublicBuild");
static_assert(offsetof(BRBlueprintLibrary_IsPublicBuild, ReturnValue) == 0x000000, "Member 'BRBlueprintLibrary_IsPublicBuild::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.JoinTextArray
// 0x0030 (0x0030 - 0x0000)
struct BRBlueprintLibrary_JoinTextArray final
{
public:
	TArray<class FText>                           SourceArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Separator;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_JoinTextArray) == 0x000008, "Wrong alignment on BRBlueprintLibrary_JoinTextArray");
static_assert(sizeof(BRBlueprintLibrary_JoinTextArray) == 0x000030, "Wrong size on BRBlueprintLibrary_JoinTextArray");
static_assert(offsetof(BRBlueprintLibrary_JoinTextArray, SourceArray) == 0x000000, "Member 'BRBlueprintLibrary_JoinTextArray::SourceArray' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_JoinTextArray, Separator) == 0x000010, "Member 'BRBlueprintLibrary_JoinTextArray::Separator' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_JoinTextArray, ReturnValue) == 0x000020, "Member 'BRBlueprintLibrary_JoinTextArray::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.K2_SetMultiTimerDelegate
// 0x0020 (0x0020 - 0x0000)
struct BRBlueprintLibrary_K2_SetMultiTimerDelegate final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_K2_SetMultiTimerDelegate) == 0x000008, "Wrong alignment on BRBlueprintLibrary_K2_SetMultiTimerDelegate");
static_assert(sizeof(BRBlueprintLibrary_K2_SetMultiTimerDelegate) == 0x000020, "Wrong size on BRBlueprintLibrary_K2_SetMultiTimerDelegate");
static_assert(offsetof(BRBlueprintLibrary_K2_SetMultiTimerDelegate, Delegate) == 0x000000, "Member 'BRBlueprintLibrary_K2_SetMultiTimerDelegate::Delegate' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_K2_SetMultiTimerDelegate, Time) == 0x000010, "Member 'BRBlueprintLibrary_K2_SetMultiTimerDelegate::Time' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_K2_SetMultiTimerDelegate, bLooping) == 0x000014, "Member 'BRBlueprintLibrary_K2_SetMultiTimerDelegate::bLooping' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_K2_SetMultiTimerDelegate, ReturnValue) == 0x000018, "Member 'BRBlueprintLibrary_K2_SetMultiTimerDelegate::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.K2_SetTimerDelegateWithDelay
// 0x0028 (0x0028 - 0x0000)
struct BRBlueprintLibrary_K2_SetTimerDelegateWithDelay final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstDelay;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_K2_SetTimerDelegateWithDelay) == 0x000008, "Wrong alignment on BRBlueprintLibrary_K2_SetTimerDelegateWithDelay");
static_assert(sizeof(BRBlueprintLibrary_K2_SetTimerDelegateWithDelay) == 0x000028, "Wrong size on BRBlueprintLibrary_K2_SetTimerDelegateWithDelay");
static_assert(offsetof(BRBlueprintLibrary_K2_SetTimerDelegateWithDelay, Delegate) == 0x000000, "Member 'BRBlueprintLibrary_K2_SetTimerDelegateWithDelay::Delegate' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_K2_SetTimerDelegateWithDelay, Time) == 0x000010, "Member 'BRBlueprintLibrary_K2_SetTimerDelegateWithDelay::Time' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_K2_SetTimerDelegateWithDelay, FirstDelay) == 0x000014, "Member 'BRBlueprintLibrary_K2_SetTimerDelegateWithDelay::FirstDelay' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_K2_SetTimerDelegateWithDelay, bLooping) == 0x000018, "Member 'BRBlueprintLibrary_K2_SetTimerDelegateWithDelay::bLooping' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_K2_SetTimerDelegateWithDelay, ReturnValue) == 0x000020, "Member 'BRBlueprintLibrary_K2_SetTimerDelegateWithDelay::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.LinearColorToColorNoSRGB
// 0x0014 (0x0014 - 0x0000)
struct BRBlueprintLibrary_LinearColorToColorNoSRGB final
{
public:
	struct FLinearColor                           LinearColor;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_LinearColorToColorNoSRGB) == 0x000004, "Wrong alignment on BRBlueprintLibrary_LinearColorToColorNoSRGB");
static_assert(sizeof(BRBlueprintLibrary_LinearColorToColorNoSRGB) == 0x000014, "Wrong size on BRBlueprintLibrary_LinearColorToColorNoSRGB");
static_assert(offsetof(BRBlueprintLibrary_LinearColorToColorNoSRGB, LinearColor) == 0x000000, "Member 'BRBlueprintLibrary_LinearColorToColorNoSRGB::LinearColor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_LinearColorToColorNoSRGB, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_LinearColorToColorNoSRGB::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.NaturalSortStringArray
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_NaturalSortStringArray final
{
public:
	TArray<class FString>                         Strings;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_NaturalSortStringArray) == 0x000008, "Wrong alignment on BRBlueprintLibrary_NaturalSortStringArray");
static_assert(sizeof(BRBlueprintLibrary_NaturalSortStringArray) == 0x000010, "Wrong size on BRBlueprintLibrary_NaturalSortStringArray");
static_assert(offsetof(BRBlueprintLibrary_NaturalSortStringArray, Strings) == 0x000000, "Member 'BRBlueprintLibrary_NaturalSortStringArray::Strings' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.NotEqual_ColorColor
// 0x000C (0x000C - 0x0000)
struct BRBlueprintLibrary_NotEqual_ColorColor final
{
public:
	struct FColor                                 A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_NotEqual_ColorColor) == 0x000004, "Wrong alignment on BRBlueprintLibrary_NotEqual_ColorColor");
static_assert(sizeof(BRBlueprintLibrary_NotEqual_ColorColor) == 0x00000C, "Wrong size on BRBlueprintLibrary_NotEqual_ColorColor");
static_assert(offsetof(BRBlueprintLibrary_NotEqual_ColorColor, A) == 0x000000, "Member 'BRBlueprintLibrary_NotEqual_ColorColor::A' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_NotEqual_ColorColor, B) == 0x000004, "Member 'BRBlueprintLibrary_NotEqual_ColorColor::B' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_NotEqual_ColorColor, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_NotEqual_ColorColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.NotEqual_IntVectorIntVector
// 0x001C (0x001C - 0x0000)
struct BRBlueprintLibrary_NotEqual_IntVectorIntVector final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             B;                                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_NotEqual_IntVectorIntVector) == 0x000004, "Wrong alignment on BRBlueprintLibrary_NotEqual_IntVectorIntVector");
static_assert(sizeof(BRBlueprintLibrary_NotEqual_IntVectorIntVector) == 0x00001C, "Wrong size on BRBlueprintLibrary_NotEqual_IntVectorIntVector");
static_assert(offsetof(BRBlueprintLibrary_NotEqual_IntVectorIntVector, A) == 0x000000, "Member 'BRBlueprintLibrary_NotEqual_IntVectorIntVector::A' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_NotEqual_IntVectorIntVector, B) == 0x00000C, "Member 'BRBlueprintLibrary_NotEqual_IntVectorIntVector::B' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_NotEqual_IntVectorIntVector, ReturnValue) == 0x000018, "Member 'BRBlueprintLibrary_NotEqual_IntVectorIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.ObjectToClass
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_ObjectToClass final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_ObjectToClass) == 0x000008, "Wrong alignment on BRBlueprintLibrary_ObjectToClass");
static_assert(sizeof(BRBlueprintLibrary_ObjectToClass) == 0x000010, "Wrong size on BRBlueprintLibrary_ObjectToClass");
static_assert(offsetof(BRBlueprintLibrary_ObjectToClass, Object) == 0x000000, "Member 'BRBlueprintLibrary_ObjectToClass::Object' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ObjectToClass, ReturnValue) == 0x000008, "Member 'BRBlueprintLibrary_ObjectToClass::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.ParseHexStringToLinearColor
// 0x0020 (0x0020 - 0x0000)
struct BRBlueprintLibrary_ParseHexStringToLinearColor final
{
public:
	class FString                                 HexCode;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_ParseHexStringToLinearColor) == 0x000008, "Wrong alignment on BRBlueprintLibrary_ParseHexStringToLinearColor");
static_assert(sizeof(BRBlueprintLibrary_ParseHexStringToLinearColor) == 0x000020, "Wrong size on BRBlueprintLibrary_ParseHexStringToLinearColor");
static_assert(offsetof(BRBlueprintLibrary_ParseHexStringToLinearColor, HexCode) == 0x000000, "Member 'BRBlueprintLibrary_ParseHexStringToLinearColor::HexCode' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_ParseHexStringToLinearColor, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_ParseHexStringToLinearColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.RandomFColor
// 0x0004 (0x0004 - 0x0000)
struct BRBlueprintLibrary_RandomFColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_RandomFColor) == 0x000004, "Wrong alignment on BRBlueprintLibrary_RandomFColor");
static_assert(sizeof(BRBlueprintLibrary_RandomFColor) == 0x000004, "Wrong size on BRBlueprintLibrary_RandomFColor");
static_assert(offsetof(BRBlueprintLibrary_RandomFColor, ReturnValue) == 0x000000, "Member 'BRBlueprintLibrary_RandomFColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.RangeWrapInteger
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_RangeWrapInteger final
{
public:
	int32                                         Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeLowerBound;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeUpperBound;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_RangeWrapInteger) == 0x000004, "Wrong alignment on BRBlueprintLibrary_RangeWrapInteger");
static_assert(sizeof(BRBlueprintLibrary_RangeWrapInteger) == 0x000010, "Wrong size on BRBlueprintLibrary_RangeWrapInteger");
static_assert(offsetof(BRBlueprintLibrary_RangeWrapInteger, Input) == 0x000000, "Member 'BRBlueprintLibrary_RangeWrapInteger::Input' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RangeWrapInteger, RangeLowerBound) == 0x000004, "Member 'BRBlueprintLibrary_RangeWrapInteger::RangeLowerBound' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RangeWrapInteger, RangeUpperBound) == 0x000008, "Member 'BRBlueprintLibrary_RangeWrapInteger::RangeUpperBound' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RangeWrapInteger, ReturnValue) == 0x00000C, "Member 'BRBlueprintLibrary_RangeWrapInteger::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.RecolorButtonStyle
// 0x06F0 (0x06F0 - 0x0000)
struct BRBlueprintLibrary_RecolorButtonStyle final
{
public:
	struct FButtonStyle                           Style;                                             // 0x0000(0x0370)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           LinearColor;                                       // 0x0370(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FButtonStyle                           ReturnValue;                                       // 0x0380(0x0370)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_RecolorButtonStyle) == 0x000010, "Wrong alignment on BRBlueprintLibrary_RecolorButtonStyle");
static_assert(sizeof(BRBlueprintLibrary_RecolorButtonStyle) == 0x0006F0, "Wrong size on BRBlueprintLibrary_RecolorButtonStyle");
static_assert(offsetof(BRBlueprintLibrary_RecolorButtonStyle, Style) == 0x000000, "Member 'BRBlueprintLibrary_RecolorButtonStyle::Style' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorButtonStyle, LinearColor) == 0x000370, "Member 'BRBlueprintLibrary_RecolorButtonStyle::LinearColor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorButtonStyle, ReturnValue) == 0x000380, "Member 'BRBlueprintLibrary_RecolorButtonStyle::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.RecolorLinearColorFromDiff
// 0x0044 (0x0044 - 0x0000)
struct BRBlueprintLibrary_RecolorLinearColorFromDiff final
{
public:
	struct FLinearColor                           OldColor;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OldNormalColor;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ReturnValue;                                       // 0x0030(0x0014)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_RecolorLinearColorFromDiff) == 0x000004, "Wrong alignment on BRBlueprintLibrary_RecolorLinearColorFromDiff");
static_assert(sizeof(BRBlueprintLibrary_RecolorLinearColorFromDiff) == 0x000044, "Wrong size on BRBlueprintLibrary_RecolorLinearColorFromDiff");
static_assert(offsetof(BRBlueprintLibrary_RecolorLinearColorFromDiff, OldColor) == 0x000000, "Member 'BRBlueprintLibrary_RecolorLinearColorFromDiff::OldColor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorLinearColorFromDiff, OldNormalColor) == 0x000010, "Member 'BRBlueprintLibrary_RecolorLinearColorFromDiff::OldNormalColor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorLinearColorFromDiff, BaseColor) == 0x000020, "Member 'BRBlueprintLibrary_RecolorLinearColorFromDiff::BaseColor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorLinearColorFromDiff, ReturnValue) == 0x000030, "Member 'BRBlueprintLibrary_RecolorLinearColorFromDiff::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.RecolorSlateButtonBrushFromDiff
// 0x0220 (0x0220 - 0x0000)
struct BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff final
{
public:
	struct FSlateBrush                            OldBrush;                                          // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            OldNormalBrush;                                    // 0x00B0(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x0160(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0170(0x00B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff) == 0x000010, "Wrong alignment on BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff");
static_assert(sizeof(BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff) == 0x000220, "Wrong size on BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff");
static_assert(offsetof(BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff, OldBrush) == 0x000000, "Member 'BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff::OldBrush' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff, OldNormalBrush) == 0x0000B0, "Member 'BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff::OldNormalBrush' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff, BaseColor) == 0x000160, "Member 'BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff::BaseColor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff, ReturnValue) == 0x000170, "Member 'BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.RecolorSlateColorFromDiff
// 0x004C (0x004C - 0x0000)
struct BRBlueprintLibrary_RecolorSlateColorFromDiff final
{
public:
	struct FSlateColor                            OldColor;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSlateColor                            OldNormalColor;                                    // 0x0014(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ReturnValue;                                       // 0x0038(0x0014)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_RecolorSlateColorFromDiff) == 0x000004, "Wrong alignment on BRBlueprintLibrary_RecolorSlateColorFromDiff");
static_assert(sizeof(BRBlueprintLibrary_RecolorSlateColorFromDiff) == 0x00004C, "Wrong size on BRBlueprintLibrary_RecolorSlateColorFromDiff");
static_assert(offsetof(BRBlueprintLibrary_RecolorSlateColorFromDiff, OldColor) == 0x000000, "Member 'BRBlueprintLibrary_RecolorSlateColorFromDiff::OldColor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorSlateColorFromDiff, OldNormalColor) == 0x000014, "Member 'BRBlueprintLibrary_RecolorSlateColorFromDiff::OldNormalColor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorSlateColorFromDiff, BaseColor) == 0x000028, "Member 'BRBlueprintLibrary_RecolorSlateColorFromDiff::BaseColor' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_RecolorSlateColorFromDiff, ReturnValue) == 0x000038, "Member 'BRBlueprintLibrary_RecolorSlateColorFromDiff::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.SanitizeRegexString
// 0x0020 (0x0020 - 0x0000)
struct BRBlueprintLibrary_SanitizeRegexString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_SanitizeRegexString) == 0x000008, "Wrong alignment on BRBlueprintLibrary_SanitizeRegexString");
static_assert(sizeof(BRBlueprintLibrary_SanitizeRegexString) == 0x000020, "Wrong size on BRBlueprintLibrary_SanitizeRegexString");
static_assert(offsetof(BRBlueprintLibrary_SanitizeRegexString, String) == 0x000000, "Member 'BRBlueprintLibrary_SanitizeRegexString::String' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_SanitizeRegexString, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_SanitizeRegexString::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.SetPlatformClipboard
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_SetPlatformClipboard final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_SetPlatformClipboard) == 0x000008, "Wrong alignment on BRBlueprintLibrary_SetPlatformClipboard");
static_assert(sizeof(BRBlueprintLibrary_SetPlatformClipboard) == 0x000010, "Wrong size on BRBlueprintLibrary_SetPlatformClipboard");
static_assert(offsetof(BRBlueprintLibrary_SetPlatformClipboard, String) == 0x000000, "Member 'BRBlueprintLibrary_SetPlatformClipboard::String' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.SetUnfocusedVolumeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BRBlueprintLibrary_SetUnfocusedVolumeMultiplier final
{
public:
	float                                         NewMultiplier;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_SetUnfocusedVolumeMultiplier) == 0x000004, "Wrong alignment on BRBlueprintLibrary_SetUnfocusedVolumeMultiplier");
static_assert(sizeof(BRBlueprintLibrary_SetUnfocusedVolumeMultiplier) == 0x000004, "Wrong size on BRBlueprintLibrary_SetUnfocusedVolumeMultiplier");
static_assert(offsetof(BRBlueprintLibrary_SetUnfocusedVolumeMultiplier, NewMultiplier) == 0x000000, "Member 'BRBlueprintLibrary_SetUnfocusedVolumeMultiplier::NewMultiplier' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.SetWorldGravityZ
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_SetWorldGravityZ final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityZ;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBlueprintLibrary_SetWorldGravityZ) == 0x000008, "Wrong alignment on BRBlueprintLibrary_SetWorldGravityZ");
static_assert(sizeof(BRBlueprintLibrary_SetWorldGravityZ) == 0x000010, "Wrong size on BRBlueprintLibrary_SetWorldGravityZ");
static_assert(offsetof(BRBlueprintLibrary_SetWorldGravityZ, WorldContextObject) == 0x000000, "Member 'BRBlueprintLibrary_SetWorldGravityZ::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_SetWorldGravityZ, GravityZ) == 0x000008, "Member 'BRBlueprintLibrary_SetWorldGravityZ::GravityZ' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.SortPlayerStateArray
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_SortPlayerStateArray final
{
public:
	TArray<class ABRPlayerState*>                 States;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_SortPlayerStateArray) == 0x000008, "Wrong alignment on BRBlueprintLibrary_SortPlayerStateArray");
static_assert(sizeof(BRBlueprintLibrary_SortPlayerStateArray) == 0x000010, "Wrong size on BRBlueprintLibrary_SortPlayerStateArray");
static_assert(offsetof(BRBlueprintLibrary_SortPlayerStateArray, States) == 0x000000, "Member 'BRBlueprintLibrary_SortPlayerStateArray::States' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.SortPlayerStateArray_ByName
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_SortPlayerStateArray_ByName final
{
public:
	TArray<class ABRPlayerState*>                 States;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_SortPlayerStateArray_ByName) == 0x000008, "Wrong alignment on BRBlueprintLibrary_SortPlayerStateArray_ByName");
static_assert(sizeof(BRBlueprintLibrary_SortPlayerStateArray_ByName) == 0x000010, "Wrong size on BRBlueprintLibrary_SortPlayerStateArray_ByName");
static_assert(offsetof(BRBlueprintLibrary_SortPlayerStateArray_ByName, States) == 0x000000, "Member 'BRBlueprintLibrary_SortPlayerStateArray_ByName::States' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.SortTeamArray
// 0x0010 (0x0010 - 0x0000)
struct BRBlueprintLibrary_SortTeamArray final
{
public:
	TArray<class UBRRulesetTeam*>                 Teams;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_SortTeamArray) == 0x000008, "Wrong alignment on BRBlueprintLibrary_SortTeamArray");
static_assert(sizeof(BRBlueprintLibrary_SortTeamArray) == 0x000010, "Wrong size on BRBlueprintLibrary_SortTeamArray");
static_assert(offsetof(BRBlueprintLibrary_SortTeamArray, Teams) == 0x000000, "Member 'BRBlueprintLibrary_SortTeamArray::Teams' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.SplitNetOptions
// 0x0060 (0x0060 - 0x0000)
struct BRBlueprintLibrary_SplitNetOptions final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Output;                                            // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_SplitNetOptions) == 0x000008, "Wrong alignment on BRBlueprintLibrary_SplitNetOptions");
static_assert(sizeof(BRBlueprintLibrary_SplitNetOptions) == 0x000060, "Wrong size on BRBlueprintLibrary_SplitNetOptions");
static_assert(offsetof(BRBlueprintLibrary_SplitNetOptions, Options) == 0x000000, "Member 'BRBlueprintLibrary_SplitNetOptions::Options' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_SplitNetOptions, Output) == 0x000010, "Member 'BRBlueprintLibrary_SplitNetOptions::Output' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.TrimStartAndEnd
// 0x0020 (0x0020 - 0x0000)
struct BRBlueprintLibrary_TrimStartAndEnd final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_TrimStartAndEnd) == 0x000008, "Wrong alignment on BRBlueprintLibrary_TrimStartAndEnd");
static_assert(sizeof(BRBlueprintLibrary_TrimStartAndEnd) == 0x000020, "Wrong size on BRBlueprintLibrary_TrimStartAndEnd");
static_assert(offsetof(BRBlueprintLibrary_TrimStartAndEnd, String) == 0x000000, "Member 'BRBlueprintLibrary_TrimStartAndEnd::String' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_TrimStartAndEnd, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_TrimStartAndEnd::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBlueprintLibrary.UnescapeNetOption
// 0x0020 (0x0020 - 0x0000)
struct BRBlueprintLibrary_UnescapeNetOption final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBlueprintLibrary_UnescapeNetOption) == 0x000008, "Wrong alignment on BRBlueprintLibrary_UnescapeNetOption");
static_assert(sizeof(BRBlueprintLibrary_UnescapeNetOption) == 0x000020, "Wrong size on BRBlueprintLibrary_UnescapeNetOption");
static_assert(offsetof(BRBlueprintLibrary_UnescapeNetOption, Password) == 0x000000, "Member 'BRBlueprintLibrary_UnescapeNetOption::Password' has a wrong offset!");
static_assert(offsetof(BRBlueprintLibrary_UnescapeNetOption, ReturnValue) == 0x000010, "Member 'BRBlueprintLibrary_UnescapeNetOption::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBundleManager.RequestTravelToEnvironment
// 0x0018 (0x0018 - 0x0000)
struct BRBundleManager_RequestTravelToEnvironment final
{
public:
	class FString                                 Environment;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHostListenServer;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBundleManager_RequestTravelToEnvironment) == 0x000008, "Wrong alignment on BRBundleManager_RequestTravelToEnvironment");
static_assert(sizeof(BRBundleManager_RequestTravelToEnvironment) == 0x000018, "Wrong size on BRBundleManager_RequestTravelToEnvironment");
static_assert(offsetof(BRBundleManager_RequestTravelToEnvironment, Environment) == 0x000000, "Member 'BRBundleManager_RequestTravelToEnvironment::Environment' has a wrong offset!");
static_assert(offsetof(BRBundleManager_RequestTravelToEnvironment, bHostListenServer) == 0x000010, "Member 'BRBundleManager_RequestTravelToEnvironment::bHostListenServer' has a wrong offset!");

// Function Brickadia.BRBundleManager.RequestTravelToWorld
// 0x0018 (0x0018 - 0x0000)
struct BRBundleManager_RequestTravelToWorld final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revision;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHostListenServer;                                 // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteable;                                        // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0016(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRBundleManager_RequestTravelToWorld) == 0x000008, "Wrong alignment on BRBundleManager_RequestTravelToWorld");
static_assert(sizeof(BRBundleManager_RequestTravelToWorld) == 0x000018, "Wrong size on BRBundleManager_RequestTravelToWorld");
static_assert(offsetof(BRBundleManager_RequestTravelToWorld, FilePath) == 0x000000, "Member 'BRBundleManager_RequestTravelToWorld::FilePath' has a wrong offset!");
static_assert(offsetof(BRBundleManager_RequestTravelToWorld, Revision) == 0x000010, "Member 'BRBundleManager_RequestTravelToWorld::Revision' has a wrong offset!");
static_assert(offsetof(BRBundleManager_RequestTravelToWorld, bHostListenServer) == 0x000014, "Member 'BRBundleManager_RequestTravelToWorld::bHostListenServer' has a wrong offset!");
static_assert(offsetof(BRBundleManager_RequestTravelToWorld, bWriteable) == 0x000015, "Member 'BRBundleManager_RequestTravelToWorld::bWriteable' has a wrong offset!");
static_assert(offsetof(BRBundleManager_RequestTravelToWorld, ReturnValue) == 0x000016, "Member 'BRBundleManager_RequestTravelToWorld::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBundleManager.GetGalleryListingProvider
// 0x0010 (0x0010 - 0x0000)
struct BRBundleManager_GetGalleryListingProvider final
{
public:
	TScriptInterface<class IBRBundleListingProvider> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBundleManager_GetGalleryListingProvider) == 0x000008, "Wrong alignment on BRBundleManager_GetGalleryListingProvider");
static_assert(sizeof(BRBundleManager_GetGalleryListingProvider) == 0x000010, "Wrong size on BRBundleManager_GetGalleryListingProvider");
static_assert(offsetof(BRBundleManager_GetGalleryListingProvider, ReturnValue) == 0x000000, "Member 'BRBundleManager_GetGalleryListingProvider::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBundleManager.GetLocalListingProvider
// 0x0010 (0x0010 - 0x0000)
struct BRBundleManager_GetLocalListingProvider final
{
public:
	TScriptInterface<class IBRBundleListingProvider> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBundleManager_GetLocalListingProvider) == 0x000008, "Wrong alignment on BRBundleManager_GetLocalListingProvider");
static_assert(sizeof(BRBundleManager_GetLocalListingProvider) == 0x000010, "Wrong size on BRBundleManager_GetLocalListingProvider");
static_assert(offsetof(BRBundleManager_GetLocalListingProvider, ReturnValue) == 0x000000, "Member 'BRBundleManager_GetLocalListingProvider::ReturnValue' has a wrong offset!");

// Function Brickadia.BRBundleManager.GetPendingWorldBundle
// 0x0008 (0x0008 - 0x0000)
struct BRBundleManager_GetPendingWorldBundle final
{
public:
	class UBRBundleDatabase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRBundleManager_GetPendingWorldBundle) == 0x000008, "Wrong alignment on BRBundleManager_GetPendingWorldBundle");
static_assert(sizeof(BRBundleManager_GetPendingWorldBundle) == 0x000008, "Wrong size on BRBundleManager_GetPendingWorldBundle");
static_assert(offsetof(BRBundleManager_GetPendingWorldBundle, ReturnValue) == 0x000000, "Member 'BRBundleManager_GetPendingWorldBundle::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCatalogObject.GetCatalogData
// 0x0048 (0x0048 - 0x0000)
struct BRCatalogObject_GetCatalogData final
{
public:
	struct FBRCatalogData                         ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCatalogObject_GetCatalogData) == 0x000008, "Wrong alignment on BRCatalogObject_GetCatalogData");
static_assert(sizeof(BRCatalogObject_GetCatalogData) == 0x000048, "Wrong size on BRCatalogObject_GetCatalogData");
static_assert(offsetof(BRCatalogObject_GetCatalogData, ReturnValue) == 0x000000, "Member 'BRCatalogObject_GetCatalogData::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCatalog.Combined
// 0x0020 (0x0020 - 0x0000)
struct BRCatalog_Combined final
{
public:
	TArray<class UBRCatalog*>                     Catalogs;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UBRCatalogCustomizationData*            Customization;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRCatalog*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCatalog_Combined) == 0x000008, "Wrong alignment on BRCatalog_Combined");
static_assert(sizeof(BRCatalog_Combined) == 0x000020, "Wrong size on BRCatalog_Combined");
static_assert(offsetof(BRCatalog_Combined, Catalogs) == 0x000000, "Member 'BRCatalog_Combined::Catalogs' has a wrong offset!");
static_assert(offsetof(BRCatalog_Combined, Customization) == 0x000010, "Member 'BRCatalog_Combined::Customization' has a wrong offset!");
static_assert(offsetof(BRCatalog_Combined, ReturnValue) == 0x000018, "Member 'BRCatalog_Combined::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCatalog.AddItem
// 0x0070 (0x0070 - 0x0000)
struct BRCatalog_AddItem final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name_0;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Category;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Tab;                                               // 0x0028(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Summary;                                           // 0x0038(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBRCatalogOverrides                    Overrides;                                         // 0x0048(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCatalog_AddItem) == 0x000008, "Wrong alignment on BRCatalog_AddItem");
static_assert(sizeof(BRCatalog_AddItem) == 0x000070, "Wrong size on BRCatalog_AddItem");
static_assert(offsetof(BRCatalog_AddItem, Item) == 0x000000, "Member 'BRCatalog_AddItem::Item' has a wrong offset!");
static_assert(offsetof(BRCatalog_AddItem, Name_0) == 0x000008, "Member 'BRCatalog_AddItem::Name_0' has a wrong offset!");
static_assert(offsetof(BRCatalog_AddItem, Category) == 0x000018, "Member 'BRCatalog_AddItem::Category' has a wrong offset!");
static_assert(offsetof(BRCatalog_AddItem, Tab) == 0x000028, "Member 'BRCatalog_AddItem::Tab' has a wrong offset!");
static_assert(offsetof(BRCatalog_AddItem, Summary) == 0x000038, "Member 'BRCatalog_AddItem::Summary' has a wrong offset!");
static_assert(offsetof(BRCatalog_AddItem, Overrides) == 0x000048, "Member 'BRCatalog_AddItem::Overrides' has a wrong offset!");

// Function Brickadia.BRCatalog.Sort
// 0x0008 (0x0008 - 0x0000)
struct BRCatalog_Sort final
{
public:
	class UBRCatalogCustomizationData*            Customization;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCatalog_Sort) == 0x000008, "Wrong alignment on BRCatalog_Sort");
static_assert(sizeof(BRCatalog_Sort) == 0x000008, "Wrong size on BRCatalog_Sort");
static_assert(offsetof(BRCatalog_Sort, Customization) == 0x000000, "Member 'BRCatalog_Sort::Customization' has a wrong offset!");

// Function Brickadia.InspectorPropertyDescriptor.IsEnabled
// 0x0040 (0x0040 - 0x0000)
struct InspectorPropertyDescriptor_IsEnabled final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPropertyDescriptor_IsEnabled) == 0x000008, "Wrong alignment on InspectorPropertyDescriptor_IsEnabled");
static_assert(sizeof(InspectorPropertyDescriptor_IsEnabled) == 0x000040, "Wrong size on InspectorPropertyDescriptor_IsEnabled");
static_assert(offsetof(InspectorPropertyDescriptor_IsEnabled, WorldContext) == 0x000000, "Member 'InspectorPropertyDescriptor_IsEnabled::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_IsEnabled, ViewTarget) == 0x000008, "Member 'InspectorPropertyDescriptor_IsEnabled::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_IsEnabled, ReturnValue) == 0x000038, "Member 'InspectorPropertyDescriptor_IsEnabled::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyDescriptor.SetValue
// 0x0058 (0x0058 - 0x0000)
struct InspectorPropertyDescriptor_SetValue final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                ChangeValue;                                       // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRunNotify;                                        // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPropertyDescriptor_SetValue) == 0x000008, "Wrong alignment on InspectorPropertyDescriptor_SetValue");
static_assert(sizeof(InspectorPropertyDescriptor_SetValue) == 0x000058, "Wrong size on InspectorPropertyDescriptor_SetValue");
static_assert(offsetof(InspectorPropertyDescriptor_SetValue, WorldContext) == 0x000000, "Member 'InspectorPropertyDescriptor_SetValue::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_SetValue, ViewTarget) == 0x000008, "Member 'InspectorPropertyDescriptor_SetValue::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_SetValue, ChangeValue) == 0x000038, "Member 'InspectorPropertyDescriptor_SetValue::ChangeValue' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_SetValue, bRunNotify) == 0x000050, "Member 'InspectorPropertyDescriptor_SetValue::bRunNotify' has a wrong offset!");

// Function Brickadia.InspectorPropertyDescriptor.GetDefaultValue
// 0x0050 (0x0050 - 0x0000)
struct InspectorPropertyDescriptor_GetDefaultValue final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyDescriptor_GetDefaultValue) == 0x000008, "Wrong alignment on InspectorPropertyDescriptor_GetDefaultValue");
static_assert(sizeof(InspectorPropertyDescriptor_GetDefaultValue) == 0x000050, "Wrong size on InspectorPropertyDescriptor_GetDefaultValue");
static_assert(offsetof(InspectorPropertyDescriptor_GetDefaultValue, WorldContext) == 0x000000, "Member 'InspectorPropertyDescriptor_GetDefaultValue::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_GetDefaultValue, ViewTarget) == 0x000008, "Member 'InspectorPropertyDescriptor_GetDefaultValue::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_GetDefaultValue, ReturnValue) == 0x000038, "Member 'InspectorPropertyDescriptor_GetDefaultValue::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyDescriptor.GetValue
// 0x0050 (0x0050 - 0x0000)
struct InspectorPropertyDescriptor_GetValue final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyDescriptor_GetValue) == 0x000008, "Wrong alignment on InspectorPropertyDescriptor_GetValue");
static_assert(sizeof(InspectorPropertyDescriptor_GetValue) == 0x000050, "Wrong size on InspectorPropertyDescriptor_GetValue");
static_assert(offsetof(InspectorPropertyDescriptor_GetValue, WorldContext) == 0x000000, "Member 'InspectorPropertyDescriptor_GetValue::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_GetValue, ViewTarget) == 0x000008, "Member 'InspectorPropertyDescriptor_GetValue::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_GetValue, ReturnValue) == 0x000038, "Member 'InspectorPropertyDescriptor_GetValue::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyDescriptor.IsDefaultValue
// 0x0040 (0x0040 - 0x0000)
struct InspectorPropertyDescriptor_IsDefaultValue final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPropertyDescriptor_IsDefaultValue) == 0x000008, "Wrong alignment on InspectorPropertyDescriptor_IsDefaultValue");
static_assert(sizeof(InspectorPropertyDescriptor_IsDefaultValue) == 0x000040, "Wrong size on InspectorPropertyDescriptor_IsDefaultValue");
static_assert(offsetof(InspectorPropertyDescriptor_IsDefaultValue, WorldContext) == 0x000000, "Member 'InspectorPropertyDescriptor_IsDefaultValue::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_IsDefaultValue, ViewTarget) == 0x000008, "Member 'InspectorPropertyDescriptor_IsDefaultValue::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_IsDefaultValue, ReturnValue) == 0x000038, "Member 'InspectorPropertyDescriptor_IsDefaultValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInspectorPropertyDescriptor_PrimaryAssetCatalog.AsyncGenerateCatalog
// 0x0018 (0x0018 - 0x0000)
struct BRInspectorPropertyDescriptor_PrimaryAssetCatalog_AsyncGenerateCatalog final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UBRCatalog* CreatedCatalog)> OnLoadedDelegate;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_AsyncGenerateCatalog) == 0x000008, "Wrong alignment on BRInspectorPropertyDescriptor_PrimaryAssetCatalog_AsyncGenerateCatalog");
static_assert(sizeof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_AsyncGenerateCatalog) == 0x000018, "Wrong size on BRInspectorPropertyDescriptor_PrimaryAssetCatalog_AsyncGenerateCatalog");
static_assert(offsetof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_AsyncGenerateCatalog, WorldContext) == 0x000000, "Member 'BRInspectorPropertyDescriptor_PrimaryAssetCatalog_AsyncGenerateCatalog::WorldContext' has a wrong offset!");
static_assert(offsetof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_AsyncGenerateCatalog, OnLoadedDelegate) == 0x000008, "Member 'BRInspectorPropertyDescriptor_PrimaryAssetCatalog_AsyncGenerateCatalog::OnLoadedDelegate' has a wrong offset!");

// Function Brickadia.BRInspectorPropertyDescriptor_PrimaryAssetCatalog.NameToCatalogData
// 0x0050 (0x0050 - 0x0000)
struct BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToCatalogData final
{
public:
	class FName                                   NameValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRCatalogData                         ReturnValue;                                       // 0x0008(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToCatalogData) == 0x000008, "Wrong alignment on BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToCatalogData");
static_assert(sizeof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToCatalogData) == 0x000050, "Wrong size on BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToCatalogData");
static_assert(offsetof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToCatalogData, NameValue) == 0x000000, "Member 'BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToCatalogData::NameValue' has a wrong offset!");
static_assert(offsetof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToCatalogData, ReturnValue) == 0x000008, "Member 'BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToCatalogData::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInspectorPropertyDescriptor_PrimaryAssetCatalog.NameToObject
// 0x0010 (0x0010 - 0x0000)
struct BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToObject final
{
public:
	class FName                                   NameValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToObject) == 0x000008, "Wrong alignment on BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToObject");
static_assert(sizeof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToObject) == 0x000010, "Wrong size on BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToObject");
static_assert(offsetof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToObject, NameValue) == 0x000000, "Member 'BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToObject::NameValue' has a wrong offset!");
static_assert(offsetof(BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToObject, ReturnValue) == 0x000008, "Member 'BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToObject::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCatalogSubsystem.AsyncGetOrGeneratePrimaryAssetCatalog
// 0x0048 (0x0048 - 0x0000)
struct BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog final
{
public:
	struct FPrimaryAssetType                      Type;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UBRCatalog* CreatedCatalog)> OnLoadedDelegate;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CacheName;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRCatalogOverrides                    Overrides;                                         // 0x0020(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog) == 0x000008, "Wrong alignment on BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog");
static_assert(sizeof(BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog) == 0x000048, "Wrong size on BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog");
static_assert(offsetof(BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog, Type) == 0x000000, "Member 'BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog::Type' has a wrong offset!");
static_assert(offsetof(BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog, OnLoadedDelegate) == 0x000008, "Member 'BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog::OnLoadedDelegate' has a wrong offset!");
static_assert(offsetof(BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog, CacheName) == 0x000018, "Member 'BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog::CacheName' has a wrong offset!");
static_assert(offsetof(BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog, Overrides) == 0x000020, "Member 'BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog::Overrides' has a wrong offset!");

// Function Brickadia.BRCatalogSubsystem.GetOrGenerateCatalog
// 0x0050 (0x0050 - 0x0000)
struct BRCatalogSubsystem_GetOrGenerateCatalog final
{
public:
	TArray<class UObject*>                        Assets;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   CacheName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRCatalogCustomizationData*            Customization;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRCatalogOverrides                    Overrides;                                         // 0x0020(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UBRCatalog*                             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCatalogSubsystem_GetOrGenerateCatalog) == 0x000008, "Wrong alignment on BRCatalogSubsystem_GetOrGenerateCatalog");
static_assert(sizeof(BRCatalogSubsystem_GetOrGenerateCatalog) == 0x000050, "Wrong size on BRCatalogSubsystem_GetOrGenerateCatalog");
static_assert(offsetof(BRCatalogSubsystem_GetOrGenerateCatalog, Assets) == 0x000000, "Member 'BRCatalogSubsystem_GetOrGenerateCatalog::Assets' has a wrong offset!");
static_assert(offsetof(BRCatalogSubsystem_GetOrGenerateCatalog, CacheName) == 0x000010, "Member 'BRCatalogSubsystem_GetOrGenerateCatalog::CacheName' has a wrong offset!");
static_assert(offsetof(BRCatalogSubsystem_GetOrGenerateCatalog, Customization) == 0x000018, "Member 'BRCatalogSubsystem_GetOrGenerateCatalog::Customization' has a wrong offset!");
static_assert(offsetof(BRCatalogSubsystem_GetOrGenerateCatalog, Overrides) == 0x000020, "Member 'BRCatalogSubsystem_GetOrGenerateCatalog::Overrides' has a wrong offset!");
static_assert(offsetof(BRCatalogSubsystem_GetOrGenerateCatalog, ReturnValue) == 0x000048, "Member 'BRCatalogSubsystem_GetOrGenerateCatalog::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCatalogSubsystem.SyncGetOrGeneratePrimaryAssetCatalog
// 0x0040 (0x0040 - 0x0000)
struct BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog final
{
public:
	struct FPrimaryAssetType                      Type;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CacheName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRCatalogOverrides                    Overrides;                                         // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UBRCatalog*                             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog) == 0x000008, "Wrong alignment on BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog");
static_assert(sizeof(BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog) == 0x000040, "Wrong size on BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog");
static_assert(offsetof(BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog, Type) == 0x000000, "Member 'BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog::Type' has a wrong offset!");
static_assert(offsetof(BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog, CacheName) == 0x000008, "Member 'BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog::CacheName' has a wrong offset!");
static_assert(offsetof(BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog, Overrides) == 0x000010, "Member 'BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog::Overrides' has a wrong offset!");
static_assert(offsetof(BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog, ReturnValue) == 0x000038, "Member 'BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.IsAnyPartTagValid
// 0x0068 (0x0068 - 0x0000)
struct BRCharacter_IsAnyPartTagValid final
{
public:
	TArray<class FName>                           PartTags;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSet<class FName>                             AllowedTags;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacter_IsAnyPartTagValid) == 0x000008, "Wrong alignment on BRCharacter_IsAnyPartTagValid");
static_assert(sizeof(BRCharacter_IsAnyPartTagValid) == 0x000068, "Wrong size on BRCharacter_IsAnyPartTagValid");
static_assert(offsetof(BRCharacter_IsAnyPartTagValid, PartTags) == 0x000000, "Member 'BRCharacter_IsAnyPartTagValid::PartTags' has a wrong offset!");
static_assert(offsetof(BRCharacter_IsAnyPartTagValid, AllowedTags) == 0x000010, "Member 'BRCharacter_IsAnyPartTagValid::AllowedTags' has a wrong offset!");
static_assert(offsetof(BRCharacter_IsAnyPartTagValid, ReturnValue) == 0x000060, "Member 'BRCharacter_IsAnyPartTagValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.AttachPlayerDecal
// 0x0010 (0x0010 - 0x0000)
struct BRCharacter_AttachPlayerDecal final
{
public:
	class UBRPlayerDecalDescriptor*               Descriptor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacter_AttachPlayerDecal) == 0x000008, "Wrong alignment on BRCharacter_AttachPlayerDecal");
static_assert(sizeof(BRCharacter_AttachPlayerDecal) == 0x000010, "Wrong size on BRCharacter_AttachPlayerDecal");
static_assert(offsetof(BRCharacter_AttachPlayerDecal, Descriptor) == 0x000000, "Member 'BRCharacter_AttachPlayerDecal::Descriptor' has a wrong offset!");
static_assert(offsetof(BRCharacter_AttachPlayerDecal, ReturnValue) == 0x000008, "Member 'BRCharacter_AttachPlayerDecal::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.AttachPlayerPart
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_AttachPlayerPart final
{
public:
	class UBRPlayerPartDescriptor*                Descriptor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRules;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRPlayerPartComponent*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_AttachPlayerPart) == 0x000008, "Wrong alignment on BRCharacter_AttachPlayerPart");
static_assert(sizeof(BRCharacter_AttachPlayerPart) == 0x000018, "Wrong size on BRCharacter_AttachPlayerPart");
static_assert(offsetof(BRCharacter_AttachPlayerPart, Descriptor) == 0x000000, "Member 'BRCharacter_AttachPlayerPart::Descriptor' has a wrong offset!");
static_assert(offsetof(BRCharacter_AttachPlayerPart, bIgnoreRules) == 0x000008, "Member 'BRCharacter_AttachPlayerPart::bIgnoreRules' has a wrong offset!");
static_assert(offsetof(BRCharacter_AttachPlayerPart, ReturnValue) == 0x000010, "Member 'BRCharacter_AttachPlayerPart::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.AttachPlayerPartBySocketName
// 0x0020 (0x0020 - 0x0000)
struct BRCharacter_AttachPlayerPartBySocketName final
{
public:
	class UBRPlayerPartDescriptor*                Descriptor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRules;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRPlayerPartComponent*                 ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_AttachPlayerPartBySocketName) == 0x000008, "Wrong alignment on BRCharacter_AttachPlayerPartBySocketName");
static_assert(sizeof(BRCharacter_AttachPlayerPartBySocketName) == 0x000020, "Wrong size on BRCharacter_AttachPlayerPartBySocketName");
static_assert(offsetof(BRCharacter_AttachPlayerPartBySocketName, Descriptor) == 0x000000, "Member 'BRCharacter_AttachPlayerPartBySocketName::Descriptor' has a wrong offset!");
static_assert(offsetof(BRCharacter_AttachPlayerPartBySocketName, InSocketName) == 0x000008, "Member 'BRCharacter_AttachPlayerPartBySocketName::InSocketName' has a wrong offset!");
static_assert(offsetof(BRCharacter_AttachPlayerPartBySocketName, bIgnoreRules) == 0x000010, "Member 'BRCharacter_AttachPlayerPartBySocketName::bIgnoreRules' has a wrong offset!");
static_assert(offsetof(BRCharacter_AttachPlayerPartBySocketName, ReturnValue) == 0x000018, "Member 'BRCharacter_AttachPlayerPartBySocketName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.AttachPlayerPartByTreeIndex
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_AttachPlayerPartByTreeIndex final
{
public:
	class UBRPlayerPartDescriptor*                Descriptor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TreeIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRules;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRPlayerPartComponent*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_AttachPlayerPartByTreeIndex) == 0x000008, "Wrong alignment on BRCharacter_AttachPlayerPartByTreeIndex");
static_assert(sizeof(BRCharacter_AttachPlayerPartByTreeIndex) == 0x000018, "Wrong size on BRCharacter_AttachPlayerPartByTreeIndex");
static_assert(offsetof(BRCharacter_AttachPlayerPartByTreeIndex, Descriptor) == 0x000000, "Member 'BRCharacter_AttachPlayerPartByTreeIndex::Descriptor' has a wrong offset!");
static_assert(offsetof(BRCharacter_AttachPlayerPartByTreeIndex, TreeIndex) == 0x000008, "Member 'BRCharacter_AttachPlayerPartByTreeIndex::TreeIndex' has a wrong offset!");
static_assert(offsetof(BRCharacter_AttachPlayerPartByTreeIndex, bIgnoreRules) == 0x00000C, "Member 'BRCharacter_AttachPlayerPartByTreeIndex::bIgnoreRules' has a wrong offset!");
static_assert(offsetof(BRCharacter_AttachPlayerPartByTreeIndex, ReturnValue) == 0x000010, "Member 'BRCharacter_AttachPlayerPartByTreeIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.AttachRequiredParts
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_AttachRequiredParts final
{
public:
	TArray<class UBRPlayerPartComponent*>         OutAttachedParts;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacter_AttachRequiredParts) == 0x000008, "Wrong alignment on BRCharacter_AttachRequiredParts");
static_assert(sizeof(BRCharacter_AttachRequiredParts) == 0x000018, "Wrong size on BRCharacter_AttachRequiredParts");
static_assert(offsetof(BRCharacter_AttachRequiredParts, OutAttachedParts) == 0x000000, "Member 'BRCharacter_AttachRequiredParts::OutAttachedParts' has a wrong offset!");
static_assert(offsetof(BRCharacter_AttachRequiredParts, ReturnValue) == 0x000010, "Member 'BRCharacter_AttachRequiredParts::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.BuildAvatarCustomizationFromPlayerParts
// 0x0010 (0x0010 - 0x0000)
struct BRCharacter_BuildAvatarCustomizationFromPlayerParts final
{
public:
	struct FBRPlayerAvatarCustomizationV3         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_BuildAvatarCustomizationFromPlayerParts) == 0x000008, "Wrong alignment on BRCharacter_BuildAvatarCustomizationFromPlayerParts");
static_assert(sizeof(BRCharacter_BuildAvatarCustomizationFromPlayerParts) == 0x000010, "Wrong size on BRCharacter_BuildAvatarCustomizationFromPlayerParts");
static_assert(offsetof(BRCharacter_BuildAvatarCustomizationFromPlayerParts, ReturnValue) == 0x000000, "Member 'BRCharacter_BuildAvatarCustomizationFromPlayerParts::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.BuildPlayerAvatar
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_BuildPlayerAvatar final
{
public:
	struct FBRPlayerAvatarCustomizationV3         NewAvatar;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRules;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacter_BuildPlayerAvatar) == 0x000008, "Wrong alignment on BRCharacter_BuildPlayerAvatar");
static_assert(sizeof(BRCharacter_BuildPlayerAvatar) == 0x000018, "Wrong size on BRCharacter_BuildPlayerAvatar");
static_assert(offsetof(BRCharacter_BuildPlayerAvatar, NewAvatar) == 0x000000, "Member 'BRCharacter_BuildPlayerAvatar::NewAvatar' has a wrong offset!");
static_assert(offsetof(BRCharacter_BuildPlayerAvatar, bIgnoreRules) == 0x000010, "Member 'BRCharacter_BuildPlayerAvatar::bIgnoreRules' has a wrong offset!");
static_assert(offsetof(BRCharacter_BuildPlayerAvatar, ReturnValue) == 0x000011, "Member 'BRCharacter_BuildPlayerAvatar::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.ChangeSeatZoomLevel
// 0x0004 (0x0004 - 0x0000)
struct BRCharacter_ChangeSeatZoomLevel final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_ChangeSeatZoomLevel) == 0x000004, "Wrong alignment on BRCharacter_ChangeSeatZoomLevel");
static_assert(sizeof(BRCharacter_ChangeSeatZoomLevel) == 0x000004, "Wrong size on BRCharacter_ChangeSeatZoomLevel");
static_assert(offsetof(BRCharacter_ChangeSeatZoomLevel, Amount) == 0x000000, "Member 'BRCharacter_ChangeSeatZoomLevel::Amount' has a wrong offset!");

// Function Brickadia.BRCharacter.ClientSetFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_ClientSetFirstPerson final
{
public:
	bool                                          bNewFirstPerson;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_ClientSetFirstPerson) == 0x000001, "Wrong alignment on BRCharacter_ClientSetFirstPerson");
static_assert(sizeof(BRCharacter_ClientSetFirstPerson) == 0x000001, "Wrong size on BRCharacter_ClientSetFirstPerson");
static_assert(offsetof(BRCharacter_ClientSetFirstPerson, bNewFirstPerson) == 0x000000, "Member 'BRCharacter_ClientSetFirstPerson::bNewFirstPerson' has a wrong offset!");

// Function Brickadia.BRCharacter.ClientSetFlying
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_ClientSetFlying final
{
public:
	EBRCharacterFlyMode                           NewFlyMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_ClientSetFlying) == 0x000001, "Wrong alignment on BRCharacter_ClientSetFlying");
static_assert(sizeof(BRCharacter_ClientSetFlying) == 0x000001, "Wrong size on BRCharacter_ClientSetFlying");
static_assert(offsetof(BRCharacter_ClientSetFlying, NewFlyMode) == 0x000000, "Member 'BRCharacter_ClientSetFlying::NewFlyMode' has a wrong offset!");

// Function Brickadia.BRCharacter.HandleAttachWieldedItem
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_HandleAttachWieldedItem final
{
public:
	class ABRItemBase*                            Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_HandleAttachWieldedItem) == 0x000008, "Wrong alignment on BRCharacter_HandleAttachWieldedItem");
static_assert(sizeof(BRCharacter_HandleAttachWieldedItem) == 0x000008, "Wrong size on BRCharacter_HandleAttachWieldedItem");
static_assert(offsetof(BRCharacter_HandleAttachWieldedItem, Instance) == 0x000000, "Member 'BRCharacter_HandleAttachWieldedItem::Instance' has a wrong offset!");

// Function Brickadia.BRCharacter.HandleDetachWieldedItem
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_HandleDetachWieldedItem final
{
public:
	class ABRItemBase*                            Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_HandleDetachWieldedItem) == 0x000008, "Wrong alignment on BRCharacter_HandleDetachWieldedItem");
static_assert(sizeof(BRCharacter_HandleDetachWieldedItem) == 0x000008, "Wrong size on BRCharacter_HandleDetachWieldedItem");
static_assert(offsetof(BRCharacter_HandleDetachWieldedItem, Instance) == 0x000000, "Member 'BRCharacter_HandleDetachWieldedItem::Instance' has a wrong offset!");

// Function Brickadia.BRCharacter.HandleLocalGeneralSettingsChanged
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_HandleLocalGeneralSettingsChanged final
{
public:
	class UBRGameSettingsBase*                    SettingsObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_HandleLocalGeneralSettingsChanged) == 0x000008, "Wrong alignment on BRCharacter_HandleLocalGeneralSettingsChanged");
static_assert(sizeof(BRCharacter_HandleLocalGeneralSettingsChanged) == 0x000008, "Wrong size on BRCharacter_HandleLocalGeneralSettingsChanged");
static_assert(offsetof(BRCharacter_HandleLocalGeneralSettingsChanged, SettingsObject) == 0x000000, "Member 'BRCharacter_HandleLocalGeneralSettingsChanged::SettingsObject' has a wrong offset!");

// Function Brickadia.BRCharacter.IsGhost
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_IsGhost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_IsGhost) == 0x000001, "Wrong alignment on BRCharacter_IsGhost");
static_assert(sizeof(BRCharacter_IsGhost) == 0x000001, "Wrong size on BRCharacter_IsGhost");
static_assert(offsetof(BRCharacter_IsGhost, ReturnValue) == 0x000000, "Member 'BRCharacter_IsGhost::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.MulticastHandleDeath
// 0x0058 (0x0058 - 0x0000)
struct BRCharacter_MulticastHandleDeath final
{
public:
	float                                         FinalDamage;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DeathType;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DeathCauser;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ImpulseBone;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ImpulseDirection;                                  // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 PreDeathVelocity;                                  // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_MulticastHandleDeath) == 0x000008, "Wrong alignment on BRCharacter_MulticastHandleDeath");
static_assert(sizeof(BRCharacter_MulticastHandleDeath) == 0x000058, "Wrong size on BRCharacter_MulticastHandleDeath");
static_assert(offsetof(BRCharacter_MulticastHandleDeath, FinalDamage) == 0x000000, "Member 'BRCharacter_MulticastHandleDeath::FinalDamage' has a wrong offset!");
static_assert(offsetof(BRCharacter_MulticastHandleDeath, DeathType) == 0x000008, "Member 'BRCharacter_MulticastHandleDeath::DeathType' has a wrong offset!");
static_assert(offsetof(BRCharacter_MulticastHandleDeath, InstigatedBy) == 0x000010, "Member 'BRCharacter_MulticastHandleDeath::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BRCharacter_MulticastHandleDeath, DeathCauser) == 0x000018, "Member 'BRCharacter_MulticastHandleDeath::DeathCauser' has a wrong offset!");
static_assert(offsetof(BRCharacter_MulticastHandleDeath, ImpulseBone) == 0x000020, "Member 'BRCharacter_MulticastHandleDeath::ImpulseBone' has a wrong offset!");
static_assert(offsetof(BRCharacter_MulticastHandleDeath, ImpulseDirection) == 0x000028, "Member 'BRCharacter_MulticastHandleDeath::ImpulseDirection' has a wrong offset!");
static_assert(offsetof(BRCharacter_MulticastHandleDeath, PreDeathVelocity) == 0x000040, "Member 'BRCharacter_MulticastHandleDeath::PreDeathVelocity' has a wrong offset!");

// Function Brickadia.BRCharacter.MulticastOnInteractPress
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_MulticastOnInteractPress final
{
public:
	EBRCharacterInteractAnimType                  AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_MulticastOnInteractPress) == 0x000001, "Wrong alignment on BRCharacter_MulticastOnInteractPress");
static_assert(sizeof(BRCharacter_MulticastOnInteractPress) == 0x000001, "Wrong size on BRCharacter_MulticastOnInteractPress");
static_assert(offsetof(BRCharacter_MulticastOnInteractPress, AnimType) == 0x000000, "Member 'BRCharacter_MulticastOnInteractPress::AnimType' has a wrong offset!");

// Function Brickadia.BRCharacter.MulticastPlaySound
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_MulticastPlaySound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_MulticastPlaySound) == 0x000008, "Wrong alignment on BRCharacter_MulticastPlaySound");
static_assert(sizeof(BRCharacter_MulticastPlaySound) == 0x000008, "Wrong size on BRCharacter_MulticastPlaySound");
static_assert(offsetof(BRCharacter_MulticastPlaySound, Sound) == 0x000000, "Member 'BRCharacter_MulticastPlaySound::Sound' has a wrong offset!");

// Function Brickadia.BRCharacter.MulticastSetIgnoreBaseRotation
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_MulticastSetIgnoreBaseRotation final
{
public:
	bool                                          bNewIgnoreBaseRotation;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_MulticastSetIgnoreBaseRotation) == 0x000001, "Wrong alignment on BRCharacter_MulticastSetIgnoreBaseRotation");
static_assert(sizeof(BRCharacter_MulticastSetIgnoreBaseRotation) == 0x000001, "Wrong size on BRCharacter_MulticastSetIgnoreBaseRotation");
static_assert(offsetof(BRCharacter_MulticastSetIgnoreBaseRotation, bNewIgnoreBaseRotation) == 0x000000, "Member 'BRCharacter_MulticastSetIgnoreBaseRotation::bNewIgnoreBaseRotation' has a wrong offset!");

// Function Brickadia.BRCharacter.OnInteractPress
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_OnInteractPress final
{
public:
	EBRCharacterInteractAnimType                  AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_OnInteractPress) == 0x000001, "Wrong alignment on BRCharacter_OnInteractPress");
static_assert(sizeof(BRCharacter_OnInteractPress) == 0x000001, "Wrong size on BRCharacter_OnInteractPress");
static_assert(offsetof(BRCharacter_OnInteractPress, AnimType) == 0x000000, "Member 'BRCharacter_OnInteractPress::AnimType' has a wrong offset!");

// Function Brickadia.BRCharacter.PauseAnimMontage
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_PauseAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_PauseAnimMontage) == 0x000008, "Wrong alignment on BRCharacter_PauseAnimMontage");
static_assert(sizeof(BRCharacter_PauseAnimMontage) == 0x000008, "Wrong size on BRCharacter_PauseAnimMontage");
static_assert(offsetof(BRCharacter_PauseAnimMontage, AnimMontage) == 0x000000, "Member 'BRCharacter_PauseAnimMontage::AnimMontage' has a wrong offset!");

// Function Brickadia.BRCharacter.PlayAnimMontageFromTime
// 0x0010 (0x0010 - 0x0000)
struct BRCharacter_PlayAnimMontageFromTime final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_PlayAnimMontageFromTime) == 0x000008, "Wrong alignment on BRCharacter_PlayAnimMontageFromTime");
static_assert(sizeof(BRCharacter_PlayAnimMontageFromTime) == 0x000010, "Wrong size on BRCharacter_PlayAnimMontageFromTime");
static_assert(offsetof(BRCharacter_PlayAnimMontageFromTime, AnimMontage) == 0x000000, "Member 'BRCharacter_PlayAnimMontageFromTime::AnimMontage' has a wrong offset!");
static_assert(offsetof(BRCharacter_PlayAnimMontageFromTime, Rate) == 0x000008, "Member 'BRCharacter_PlayAnimMontageFromTime::Rate' has a wrong offset!");
static_assert(offsetof(BRCharacter_PlayAnimMontageFromTime, StartTime) == 0x00000C, "Member 'BRCharacter_PlayAnimMontageFromTime::StartTime' has a wrong offset!");

// Function Brickadia.BRCharacter.PlayFootstepSound
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_PlayFootstepSound final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_PlayFootstepSound) == 0x000004, "Wrong alignment on BRCharacter_PlayFootstepSound");
static_assert(sizeof(BRCharacter_PlayFootstepSound) == 0x000008, "Wrong size on BRCharacter_PlayFootstepSound");
static_assert(offsetof(BRCharacter_PlayFootstepSound, Type) == 0x000000, "Member 'BRCharacter_PlayFootstepSound::Type' has a wrong offset!");
static_assert(offsetof(BRCharacter_PlayFootstepSound, VolumeMultiplier) == 0x000004, "Member 'BRCharacter_PlayFootstepSound::VolumeMultiplier' has a wrong offset!");

// Function Brickadia.BRCharacter.PopFootstepLayer
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_PopFootstepLayer final
{
public:
	class USoundBase*                             LayerSound;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_PopFootstepLayer) == 0x000008, "Wrong alignment on BRCharacter_PopFootstepLayer");
static_assert(sizeof(BRCharacter_PopFootstepLayer) == 0x000008, "Wrong size on BRCharacter_PopFootstepLayer");
static_assert(offsetof(BRCharacter_PopFootstepLayer, LayerSound) == 0x000000, "Member 'BRCharacter_PopFootstepLayer::LayerSound' has a wrong offset!");

// Function Brickadia.BRCharacter.PushFootstepLayer
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_PushFootstepLayer final
{
public:
	class USoundBase*                             LayerSound;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_PushFootstepLayer) == 0x000008, "Wrong alignment on BRCharacter_PushFootstepLayer");
static_assert(sizeof(BRCharacter_PushFootstepLayer) == 0x000008, "Wrong size on BRCharacter_PushFootstepLayer");
static_assert(offsetof(BRCharacter_PushFootstepLayer, LayerSound) == 0x000000, "Member 'BRCharacter_PushFootstepLayer::LayerSound' has a wrong offset!");

// Function Brickadia.BRCharacter.RemoveChildrenPlayerPartsFromSocketName
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_RemoveChildrenPlayerPartsFromSocketName final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_RemoveChildrenPlayerPartsFromSocketName) == 0x000004, "Wrong alignment on BRCharacter_RemoveChildrenPlayerPartsFromSocketName");
static_assert(sizeof(BRCharacter_RemoveChildrenPlayerPartsFromSocketName) == 0x000008, "Wrong size on BRCharacter_RemoveChildrenPlayerPartsFromSocketName");
static_assert(offsetof(BRCharacter_RemoveChildrenPlayerPartsFromSocketName, SocketName) == 0x000000, "Member 'BRCharacter_RemoveChildrenPlayerPartsFromSocketName::SocketName' has a wrong offset!");

// Function Brickadia.BRCharacter.RemoveChildrenPlayerPartsFromTreeIndex
// 0x0004 (0x0004 - 0x0000)
struct BRCharacter_RemoveChildrenPlayerPartsFromTreeIndex final
{
public:
	int32                                         TreeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_RemoveChildrenPlayerPartsFromTreeIndex) == 0x000004, "Wrong alignment on BRCharacter_RemoveChildrenPlayerPartsFromTreeIndex");
static_assert(sizeof(BRCharacter_RemoveChildrenPlayerPartsFromTreeIndex) == 0x000004, "Wrong size on BRCharacter_RemoveChildrenPlayerPartsFromTreeIndex");
static_assert(offsetof(BRCharacter_RemoveChildrenPlayerPartsFromTreeIndex, TreeIndex) == 0x000000, "Member 'BRCharacter_RemoveChildrenPlayerPartsFromTreeIndex::TreeIndex' has a wrong offset!");

// Function Brickadia.BRCharacter.RemovePlayerPartAtSocketName
// 0x000C (0x000C - 0x0000)
struct BRCharacter_RemovePlayerPartAtSocketName final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveChildren;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacter_RemovePlayerPartAtSocketName) == 0x000004, "Wrong alignment on BRCharacter_RemovePlayerPartAtSocketName");
static_assert(sizeof(BRCharacter_RemovePlayerPartAtSocketName) == 0x00000C, "Wrong size on BRCharacter_RemovePlayerPartAtSocketName");
static_assert(offsetof(BRCharacter_RemovePlayerPartAtSocketName, SocketName) == 0x000000, "Member 'BRCharacter_RemovePlayerPartAtSocketName::SocketName' has a wrong offset!");
static_assert(offsetof(BRCharacter_RemovePlayerPartAtSocketName, bRemoveChildren) == 0x000008, "Member 'BRCharacter_RemovePlayerPartAtSocketName::bRemoveChildren' has a wrong offset!");

// Function Brickadia.BRCharacter.RemovePlayerPartAtTreeIndex
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_RemovePlayerPartAtTreeIndex final
{
public:
	int32                                         TreeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveChildren;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacter_RemovePlayerPartAtTreeIndex) == 0x000004, "Wrong alignment on BRCharacter_RemovePlayerPartAtTreeIndex");
static_assert(sizeof(BRCharacter_RemovePlayerPartAtTreeIndex) == 0x000008, "Wrong size on BRCharacter_RemovePlayerPartAtTreeIndex");
static_assert(offsetof(BRCharacter_RemovePlayerPartAtTreeIndex, TreeIndex) == 0x000000, "Member 'BRCharacter_RemovePlayerPartAtTreeIndex::TreeIndex' has a wrong offset!");
static_assert(offsetof(BRCharacter_RemovePlayerPartAtTreeIndex, bRemoveChildren) == 0x000004, "Member 'BRCharacter_RemovePlayerPartAtTreeIndex::bRemoveChildren' has a wrong offset!");

// Function Brickadia.BRCharacter.ResumeAnimMontage
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_ResumeAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_ResumeAnimMontage) == 0x000008, "Wrong alignment on BRCharacter_ResumeAnimMontage");
static_assert(sizeof(BRCharacter_ResumeAnimMontage) == 0x000008, "Wrong size on BRCharacter_ResumeAnimMontage");
static_assert(offsetof(BRCharacter_ResumeAnimMontage, AnimMontage) == 0x000000, "Member 'BRCharacter_ResumeAnimMontage::AnimMontage' has a wrong offset!");

// Function Brickadia.BRCharacter.ServerGrabObject
// 0x0028 (0x0028 - 0x0000)
struct BRCharacter_ServerGrabObject final
{
public:
	class UPrimitiveComponent*                    ObjectToGrab;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistance;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacter_ServerGrabObject) == 0x000008, "Wrong alignment on BRCharacter_ServerGrabObject");
static_assert(sizeof(BRCharacter_ServerGrabObject) == 0x000028, "Wrong size on BRCharacter_ServerGrabObject");
static_assert(offsetof(BRCharacter_ServerGrabObject, ObjectToGrab) == 0x000000, "Member 'BRCharacter_ServerGrabObject::ObjectToGrab' has a wrong offset!");
static_assert(offsetof(BRCharacter_ServerGrabObject, HitLocation) == 0x000008, "Member 'BRCharacter_ServerGrabObject::HitLocation' has a wrong offset!");
static_assert(offsetof(BRCharacter_ServerGrabObject, HitDistance) == 0x000020, "Member 'BRCharacter_ServerGrabObject::HitDistance' has a wrong offset!");

// Function Brickadia.BRCharacter.ServerMaybeStartInteract
// 0x000C (0x000C - 0x0000)
struct BRCharacter_ServerMaybeStartInteract final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRCharacterInteractAnimType                  AnimType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNearbyInteraction;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacter_ServerMaybeStartInteract) == 0x000004, "Wrong alignment on BRCharacter_ServerMaybeStartInteract");
static_assert(sizeof(BRCharacter_ServerMaybeStartInteract) == 0x00000C, "Wrong size on BRCharacter_ServerMaybeStartInteract");
static_assert(offsetof(BRCharacter_ServerMaybeStartInteract, BrickHandle) == 0x000000, "Member 'BRCharacter_ServerMaybeStartInteract::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRCharacter_ServerMaybeStartInteract, AnimType) == 0x000008, "Member 'BRCharacter_ServerMaybeStartInteract::AnimType' has a wrong offset!");
static_assert(offsetof(BRCharacter_ServerMaybeStartInteract, bIsNearbyInteraction) == 0x000009, "Member 'BRCharacter_ServerMaybeStartInteract::bIsNearbyInteraction' has a wrong offset!");

// Function Brickadia.BRCharacter.ServerProcessMousePitchForGrab
// 0x0004 (0x0004 - 0x0000)
struct BRCharacter_ServerProcessMousePitchForGrab final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_ServerProcessMousePitchForGrab) == 0x000004, "Wrong alignment on BRCharacter_ServerProcessMousePitchForGrab");
static_assert(sizeof(BRCharacter_ServerProcessMousePitchForGrab) == 0x000004, "Wrong size on BRCharacter_ServerProcessMousePitchForGrab");
static_assert(offsetof(BRCharacter_ServerProcessMousePitchForGrab, Pitch) == 0x000000, "Member 'BRCharacter_ServerProcessMousePitchForGrab::Pitch' has a wrong offset!");

// Function Brickadia.BRCharacter.ServerProcessMouseYawForGrab
// 0x0004 (0x0004 - 0x0000)
struct BRCharacter_ServerProcessMouseYawForGrab final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_ServerProcessMouseYawForGrab) == 0x000004, "Wrong alignment on BRCharacter_ServerProcessMouseYawForGrab");
static_assert(sizeof(BRCharacter_ServerProcessMouseYawForGrab) == 0x000004, "Wrong size on BRCharacter_ServerProcessMouseYawForGrab");
static_assert(offsetof(BRCharacter_ServerProcessMouseYawForGrab, Yaw) == 0x000000, "Member 'BRCharacter_ServerProcessMouseYawForGrab::Yaw' has a wrong offset!");

// Function Brickadia.BRCharacter.ServerSetDesiredIgnoreBaseRotation
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_ServerSetDesiredIgnoreBaseRotation final
{
public:
	bool                                          bIgnoreBaseRotation;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_ServerSetDesiredIgnoreBaseRotation) == 0x000001, "Wrong alignment on BRCharacter_ServerSetDesiredIgnoreBaseRotation");
static_assert(sizeof(BRCharacter_ServerSetDesiredIgnoreBaseRotation) == 0x000001, "Wrong size on BRCharacter_ServerSetDesiredIgnoreBaseRotation");
static_assert(offsetof(BRCharacter_ServerSetDesiredIgnoreBaseRotation, bIgnoreBaseRotation) == 0x000000, "Member 'BRCharacter_ServerSetDesiredIgnoreBaseRotation::bIgnoreBaseRotation' has a wrong offset!");

// Function Brickadia.BRCharacter.ServerSetOutOfBody
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_ServerSetOutOfBody final
{
public:
	bool                                          bNewOutOfBody;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_ServerSetOutOfBody) == 0x000001, "Wrong alignment on BRCharacter_ServerSetOutOfBody");
static_assert(sizeof(BRCharacter_ServerSetOutOfBody) == 0x000001, "Wrong size on BRCharacter_ServerSetOutOfBody");
static_assert(offsetof(BRCharacter_ServerSetOutOfBody, bNewOutOfBody) == 0x000000, "Member 'BRCharacter_ServerSetOutOfBody::bNewOutOfBody' has a wrong offset!");

// Function Brickadia.BRCharacter.ServerSetOutOfBodyRotation
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_ServerSetOutOfBodyRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_ServerSetOutOfBodyRotation) == 0x000008, "Wrong alignment on BRCharacter_ServerSetOutOfBodyRotation");
static_assert(sizeof(BRCharacter_ServerSetOutOfBodyRotation) == 0x000018, "Wrong size on BRCharacter_ServerSetOutOfBodyRotation");
static_assert(offsetof(BRCharacter_ServerSetOutOfBodyRotation, NewRotation) == 0x000000, "Member 'BRCharacter_ServerSetOutOfBodyRotation::NewRotation' has a wrong offset!");

// Function Brickadia.BRCharacter.SetCamera
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_SetCamera final
{
public:
	class FName                                   ComponentName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetCamera) == 0x000004, "Wrong alignment on BRCharacter_SetCamera");
static_assert(sizeof(BRCharacter_SetCamera) == 0x000008, "Wrong size on BRCharacter_SetCamera");
static_assert(offsetof(BRCharacter_SetCamera, ComponentName) == 0x000000, "Member 'BRCharacter_SetCamera::ComponentName' has a wrong offset!");

// Function Brickadia.BRCharacter.SetCameraArm
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_SetCameraArm final
{
public:
	class FName                                   ComponentName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetCameraArm) == 0x000004, "Wrong alignment on BRCharacter_SetCameraArm");
static_assert(sizeof(BRCharacter_SetCameraArm) == 0x000008, "Wrong size on BRCharacter_SetCameraArm");
static_assert(offsetof(BRCharacter_SetCameraArm, ComponentName) == 0x000000, "Member 'BRCharacter_SetCameraArm::ComponentName' has a wrong offset!");

// Function Brickadia.BRCharacter.SetCanStack
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_SetCanStack final
{
public:
	bool                                          bStacks;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetCanStack) == 0x000001, "Wrong alignment on BRCharacter_SetCanStack");
static_assert(sizeof(BRCharacter_SetCanStack) == 0x000001, "Wrong size on BRCharacter_SetCanStack");
static_assert(offsetof(BRCharacter_SetCanStack, bStacks) == 0x000000, "Member 'BRCharacter_SetCanStack::bStacks' has a wrong offset!");

// Function Brickadia.BRCharacter.SetDamage
// 0x0004 (0x0004 - 0x0000)
struct BRCharacter_SetDamage final
{
public:
	float                                         DamageIn;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetDamage) == 0x000004, "Wrong alignment on BRCharacter_SetDamage");
static_assert(sizeof(BRCharacter_SetDamage) == 0x000004, "Wrong size on BRCharacter_SetDamage");
static_assert(offsetof(BRCharacter_SetDamage, DamageIn) == 0x000000, "Member 'BRCharacter_SetDamage::DamageIn' has a wrong offset!");

// Function Brickadia.BRCharacter.SetDamageLimit
// 0x0004 (0x0004 - 0x0000)
struct BRCharacter_SetDamageLimit final
{
public:
	float                                         Limit;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetDamageLimit) == 0x000004, "Wrong alignment on BRCharacter_SetDamageLimit");
static_assert(sizeof(BRCharacter_SetDamageLimit) == 0x000004, "Wrong size on BRCharacter_SetDamageLimit");
static_assert(offsetof(BRCharacter_SetDamageLimit, Limit) == 0x000000, "Member 'BRCharacter_SetDamageLimit::Limit' has a wrong offset!");

// Function Brickadia.BRCharacter.SetDesiredMainInventoryIndex
// 0x0004 (0x0004 - 0x0000)
struct BRCharacter_SetDesiredMainInventoryIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetDesiredMainInventoryIndex) == 0x000004, "Wrong alignment on BRCharacter_SetDesiredMainInventoryIndex");
static_assert(sizeof(BRCharacter_SetDesiredMainInventoryIndex) == 0x000004, "Wrong size on BRCharacter_SetDesiredMainInventoryIndex");
static_assert(offsetof(BRCharacter_SetDesiredMainInventoryIndex, Index_0) == 0x000000, "Member 'BRCharacter_SetDesiredMainInventoryIndex::Index_0' has a wrong offset!");

// Function Brickadia.BRCharacter.SetDesiredToolInventoryIndex
// 0x0004 (0x0004 - 0x0000)
struct BRCharacter_SetDesiredToolInventoryIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetDesiredToolInventoryIndex) == 0x000004, "Wrong alignment on BRCharacter_SetDesiredToolInventoryIndex");
static_assert(sizeof(BRCharacter_SetDesiredToolInventoryIndex) == 0x000004, "Wrong size on BRCharacter_SetDesiredToolInventoryIndex");
static_assert(offsetof(BRCharacter_SetDesiredToolInventoryIndex, Index_0) == 0x000000, "Member 'BRCharacter_SetDesiredToolInventoryIndex::Index_0' has a wrong offset!");

// Function Brickadia.BRCharacter.SetFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_SetFirstPerson final
{
public:
	bool                                          bNewFirstPerson;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetFirstPerson) == 0x000001, "Wrong alignment on BRCharacter_SetFirstPerson");
static_assert(sizeof(BRCharacter_SetFirstPerson) == 0x000001, "Wrong size on BRCharacter_SetFirstPerson");
static_assert(offsetof(BRCharacter_SetFirstPerson, bNewFirstPerson) == 0x000000, "Member 'BRCharacter_SetFirstPerson::bNewFirstPerson' has a wrong offset!");

// Function Brickadia.BRCharacter.SetFlyMode
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_SetFlyMode final
{
public:
	EBRCharacterFlyMode                           NewFlyMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetFlyMode) == 0x000001, "Wrong alignment on BRCharacter_SetFlyMode");
static_assert(sizeof(BRCharacter_SetFlyMode) == 0x000001, "Wrong size on BRCharacter_SetFlyMode");
static_assert(offsetof(BRCharacter_SetFlyMode, NewFlyMode) == 0x000000, "Member 'BRCharacter_SetFlyMode::NewFlyMode' has a wrong offset!");

// Function Brickadia.BRCharacter.SetGhost
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_SetGhost final
{
public:
	bool                                          bNewGhost;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetGhost) == 0x000001, "Wrong alignment on BRCharacter_SetGhost");
static_assert(sizeof(BRCharacter_SetGhost) == 0x000001, "Wrong size on BRCharacter_SetGhost");
static_assert(offsetof(BRCharacter_SetGhost, bNewGhost) == 0x000000, "Member 'BRCharacter_SetGhost::bNewGhost' has a wrong offset!");

// Function Brickadia.BRCharacter.SetOutOfBody
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_SetOutOfBody final
{
public:
	bool                                          bNewOutOfBody;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetOutOfBody) == 0x000001, "Wrong alignment on BRCharacter_SetOutOfBody");
static_assert(sizeof(BRCharacter_SetOutOfBody) == 0x000001, "Wrong size on BRCharacter_SetOutOfBody");
static_assert(offsetof(BRCharacter_SetOutOfBody, bNewOutOfBody) == 0x000000, "Member 'BRCharacter_SetOutOfBody::bNewOutOfBody' has a wrong offset!");

// Function Brickadia.BRCharacter.SetOutOfBodyRotation
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_SetOutOfBodyRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetOutOfBodyRotation) == 0x000008, "Wrong alignment on BRCharacter_SetOutOfBodyRotation");
static_assert(sizeof(BRCharacter_SetOutOfBodyRotation) == 0x000018, "Wrong size on BRCharacter_SetOutOfBodyRotation");
static_assert(offsetof(BRCharacter_SetOutOfBodyRotation, NewRotation) == 0x000000, "Member 'BRCharacter_SetOutOfBodyRotation::NewRotation' has a wrong offset!");

// Function Brickadia.BRCharacter.SetPartCollisionEnabledForAvatarEditing
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_SetPartCollisionEnabledForAvatarEditing final
{
public:
	bool                                          bNewCollision;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetPartCollisionEnabledForAvatarEditing) == 0x000001, "Wrong alignment on BRCharacter_SetPartCollisionEnabledForAvatarEditing");
static_assert(sizeof(BRCharacter_SetPartCollisionEnabledForAvatarEditing) == 0x000001, "Wrong size on BRCharacter_SetPartCollisionEnabledForAvatarEditing");
static_assert(offsetof(BRCharacter_SetPartCollisionEnabledForAvatarEditing, bNewCollision) == 0x000000, "Member 'BRCharacter_SetPartCollisionEnabledForAvatarEditing::bNewCollision' has a wrong offset!");

// Function Brickadia.BRCharacter.SetPawnCollision
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_SetPawnCollision final
{
public:
	bool                                          bCollides;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetPawnCollision) == 0x000001, "Wrong alignment on BRCharacter_SetPawnCollision");
static_assert(sizeof(BRCharacter_SetPawnCollision) == 0x000001, "Wrong size on BRCharacter_SetPawnCollision");
static_assert(offsetof(BRCharacter_SetPawnCollision, bCollides) == 0x000000, "Member 'BRCharacter_SetPawnCollision::bCollides' has a wrong offset!");

// Function Brickadia.BRCharacter.SetPlayerPartVisibility
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_SetPlayerPartVisibility final
{
public:
	bool                                          bThirdPerson;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetPlayerPartVisibility) == 0x000001, "Wrong alignment on BRCharacter_SetPlayerPartVisibility");
static_assert(sizeof(BRCharacter_SetPlayerPartVisibility) == 0x000001, "Wrong size on BRCharacter_SetPlayerPartVisibility");
static_assert(offsetof(BRCharacter_SetPlayerPartVisibility, bThirdPerson) == 0x000000, "Member 'BRCharacter_SetPlayerPartVisibility::bThirdPerson' has a wrong offset!");

// Function Brickadia.BRCharacter.SetSprinting
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_SetSprinting final
{
public:
	bool                                          bNewSprinting;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetSprinting) == 0x000001, "Wrong alignment on BRCharacter_SetSprinting");
static_assert(sizeof(BRCharacter_SetSprinting) == 0x000001, "Wrong size on BRCharacter_SetSprinting");
static_assert(offsetof(BRCharacter_SetSprinting, bNewSprinting) == 0x000000, "Member 'BRCharacter_SetSprinting::bNewSprinting' has a wrong offset!");

// Function Brickadia.BRCharacter.SetViewModel
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_SetViewModel final
{
public:
	class FName                                   ComponentName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_SetViewModel) == 0x000004, "Wrong alignment on BRCharacter_SetViewModel");
static_assert(sizeof(BRCharacter_SetViewModel) == 0x000008, "Wrong size on BRCharacter_SetViewModel");
static_assert(offsetof(BRCharacter_SetViewModel, ComponentName) == 0x000000, "Member 'BRCharacter_SetViewModel::ComponentName' has a wrong offset!");

// Function Brickadia.BRCharacter.StopAnimMontageImmediately
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_StopAnimMontageImmediately final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_StopAnimMontageImmediately) == 0x000008, "Wrong alignment on BRCharacter_StopAnimMontageImmediately");
static_assert(sizeof(BRCharacter_StopAnimMontageImmediately) == 0x000008, "Wrong size on BRCharacter_StopAnimMontageImmediately");
static_assert(offsetof(BRCharacter_StopAnimMontageImmediately, AnimMontage) == 0x000000, "Member 'BRCharacter_StopAnimMontageImmediately::AnimMontage' has a wrong offset!");

// Function Brickadia.BRCharacter.TryAutoToggleTool
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_TryAutoToggleTool final
{
public:
	TSubclassOf<class ABRToolBase>                Tool;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_TryAutoToggleTool) == 0x000008, "Wrong alignment on BRCharacter_TryAutoToggleTool");
static_assert(sizeof(BRCharacter_TryAutoToggleTool) == 0x000008, "Wrong size on BRCharacter_TryAutoToggleTool");
static_assert(offsetof(BRCharacter_TryAutoToggleTool, Tool) == 0x000000, "Member 'BRCharacter_TryAutoToggleTool::Tool' has a wrong offset!");

// Function Brickadia.BRCharacter.CanAttachPlayerPartAtTreeIndex
// 0x0010 (0x0010 - 0x0000)
struct BRCharacter_CanAttachPlayerPartAtTreeIndex final
{
public:
	const class UBRPlayerPartDescriptor*          Descriptor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TreeIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacter_CanAttachPlayerPartAtTreeIndex) == 0x000008, "Wrong alignment on BRCharacter_CanAttachPlayerPartAtTreeIndex");
static_assert(sizeof(BRCharacter_CanAttachPlayerPartAtTreeIndex) == 0x000010, "Wrong size on BRCharacter_CanAttachPlayerPartAtTreeIndex");
static_assert(offsetof(BRCharacter_CanAttachPlayerPartAtTreeIndex, Descriptor) == 0x000000, "Member 'BRCharacter_CanAttachPlayerPartAtTreeIndex::Descriptor' has a wrong offset!");
static_assert(offsetof(BRCharacter_CanAttachPlayerPartAtTreeIndex, TreeIndex) == 0x000008, "Member 'BRCharacter_CanAttachPlayerPartAtTreeIndex::TreeIndex' has a wrong offset!");
static_assert(offsetof(BRCharacter_CanAttachPlayerPartAtTreeIndex, ReturnValue) == 0x00000C, "Member 'BRCharacter_CanAttachPlayerPartAtTreeIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.CanFly
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_CanFly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_CanFly) == 0x000001, "Wrong alignment on BRCharacter_CanFly");
static_assert(sizeof(BRCharacter_CanFly) == 0x000001, "Wrong size on BRCharacter_CanFly");
static_assert(offsetof(BRCharacter_CanFly, ReturnValue) == 0x000000, "Member 'BRCharacter_CanFly::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.CanGhost
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_CanGhost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_CanGhost) == 0x000001, "Wrong alignment on BRCharacter_CanGhost");
static_assert(sizeof(BRCharacter_CanGhost) == 0x000001, "Wrong size on BRCharacter_CanGhost");
static_assert(offsetof(BRCharacter_CanGhost, ReturnValue) == 0x000000, "Member 'BRCharacter_CanGhost::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.FindPlayerPartByTreeIndex
// 0x0010 (0x0010 - 0x0000)
struct BRCharacter_FindPlayerPartByTreeIndex final
{
public:
	int32                                         TreeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRPlayerPartComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_FindPlayerPartByTreeIndex) == 0x000008, "Wrong alignment on BRCharacter_FindPlayerPartByTreeIndex");
static_assert(sizeof(BRCharacter_FindPlayerPartByTreeIndex) == 0x000010, "Wrong size on BRCharacter_FindPlayerPartByTreeIndex");
static_assert(offsetof(BRCharacter_FindPlayerPartByTreeIndex, TreeIndex) == 0x000000, "Member 'BRCharacter_FindPlayerPartByTreeIndex::TreeIndex' has a wrong offset!");
static_assert(offsetof(BRCharacter_FindPlayerPartByTreeIndex, ReturnValue) == 0x000008, "Member 'BRCharacter_FindPlayerPartByTreeIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetActorDeltaRotation
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_GetActorDeltaRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetActorDeltaRotation) == 0x000008, "Wrong alignment on BRCharacter_GetActorDeltaRotation");
static_assert(sizeof(BRCharacter_GetActorDeltaRotation) == 0x000018, "Wrong size on BRCharacter_GetActorDeltaRotation");
static_assert(offsetof(BRCharacter_GetActorDeltaRotation, ReturnValue) == 0x000000, "Member 'BRCharacter_GetActorDeltaRotation::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetAimDeltaRotation
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_GetAimDeltaRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetAimDeltaRotation) == 0x000008, "Wrong alignment on BRCharacter_GetAimDeltaRotation");
static_assert(sizeof(BRCharacter_GetAimDeltaRotation) == 0x000018, "Wrong size on BRCharacter_GetAimDeltaRotation");
static_assert(offsetof(BRCharacter_GetAimDeltaRotation, ReturnValue) == 0x000000, "Member 'BRCharacter_GetAimDeltaRotation::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetAvailableSocketsFromDecal
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_GetAvailableSocketsFromDecal final
{
public:
	const class UBRPlayerDecalDescriptor*         Descriptor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TreeIndices;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetAvailableSocketsFromDecal) == 0x000008, "Wrong alignment on BRCharacter_GetAvailableSocketsFromDecal");
static_assert(sizeof(BRCharacter_GetAvailableSocketsFromDecal) == 0x000018, "Wrong size on BRCharacter_GetAvailableSocketsFromDecal");
static_assert(offsetof(BRCharacter_GetAvailableSocketsFromDecal, Descriptor) == 0x000000, "Member 'BRCharacter_GetAvailableSocketsFromDecal::Descriptor' has a wrong offset!");
static_assert(offsetof(BRCharacter_GetAvailableSocketsFromDecal, TreeIndices) == 0x000008, "Member 'BRCharacter_GetAvailableSocketsFromDecal::TreeIndices' has a wrong offset!");

// Function Brickadia.BRCharacter.GetAvailableSocketsFromPart
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_GetAvailableSocketsFromPart final
{
public:
	class UBRPlayerPartDescriptor*                Descriptor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TreeIndices;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetAvailableSocketsFromPart) == 0x000008, "Wrong alignment on BRCharacter_GetAvailableSocketsFromPart");
static_assert(sizeof(BRCharacter_GetAvailableSocketsFromPart) == 0x000018, "Wrong size on BRCharacter_GetAvailableSocketsFromPart");
static_assert(offsetof(BRCharacter_GetAvailableSocketsFromPart, Descriptor) == 0x000000, "Member 'BRCharacter_GetAvailableSocketsFromPart::Descriptor' has a wrong offset!");
static_assert(offsetof(BRCharacter_GetAvailableSocketsFromPart, TreeIndices) == 0x000008, "Member 'BRCharacter_GetAvailableSocketsFromPart::TreeIndices' has a wrong offset!");

// Function Brickadia.BRCharacter.GetBRCharacterMovement
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetBRCharacterMovement final
{
public:
	class UBRCharacterMovementComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetBRCharacterMovement) == 0x000008, "Wrong alignment on BRCharacter_GetBRCharacterMovement");
static_assert(sizeof(BRCharacter_GetBRCharacterMovement) == 0x000008, "Wrong size on BRCharacter_GetBRCharacterMovement");
static_assert(offsetof(BRCharacter_GetBRCharacterMovement, ReturnValue) == 0x000000, "Member 'BRCharacter_GetBRCharacterMovement::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetBRPlayerController
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetBRPlayerController final
{
public:
	class ABRPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetBRPlayerController) == 0x000008, "Wrong alignment on BRCharacter_GetBRPlayerController");
static_assert(sizeof(BRCharacter_GetBRPlayerController) == 0x000008, "Wrong size on BRCharacter_GetBRPlayerController");
static_assert(offsetof(BRCharacter_GetBRPlayerController, ReturnValue) == 0x000000, "Member 'BRCharacter_GetBRPlayerController::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetBRPlayerState
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetBRPlayerState final
{
public:
	class ABRPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetBRPlayerState) == 0x000008, "Wrong alignment on BRCharacter_GetBRPlayerState");
static_assert(sizeof(BRCharacter_GetBRPlayerState) == 0x000008, "Wrong size on BRCharacter_GetBRPlayerState");
static_assert(offsetof(BRCharacter_GetBRPlayerState, ReturnValue) == 0x000000, "Member 'BRCharacter_GetBRPlayerState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetCamera
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetCamera) == 0x000008, "Wrong alignment on BRCharacter_GetCamera");
static_assert(sizeof(BRCharacter_GetCamera) == 0x000008, "Wrong size on BRCharacter_GetCamera");
static_assert(offsetof(BRCharacter_GetCamera, ReturnValue) == 0x000000, "Member 'BRCharacter_GetCamera::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetCameraArm
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetCameraArm final
{
public:
	class USpringArmComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetCameraArm) == 0x000008, "Wrong alignment on BRCharacter_GetCameraArm");
static_assert(sizeof(BRCharacter_GetCameraArm) == 0x000008, "Wrong size on BRCharacter_GetCameraArm");
static_assert(offsetof(BRCharacter_GetCameraArm, ReturnValue) == 0x000000, "Member 'BRCharacter_GetCameraArm::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetCanStack
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_GetCanStack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetCanStack) == 0x000001, "Wrong alignment on BRCharacter_GetCanStack");
static_assert(sizeof(BRCharacter_GetCanStack) == 0x000001, "Wrong size on BRCharacter_GetCanStack");
static_assert(offsetof(BRCharacter_GetCanStack, ReturnValue) == 0x000000, "Member 'BRCharacter_GetCanStack::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetCharacterInventory
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetCharacterInventory final
{
public:
	class UBRInventoryComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetCharacterInventory) == 0x000008, "Wrong alignment on BRCharacter_GetCharacterInventory");
static_assert(sizeof(BRCharacter_GetCharacterInventory) == 0x000008, "Wrong size on BRCharacter_GetCharacterInventory");
static_assert(offsetof(BRCharacter_GetCharacterInventory, ReturnValue) == 0x000000, "Member 'BRCharacter_GetCharacterInventory::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetCharacterInventoryEntry
// 0x0010 (0x0010 - 0x0000)
struct BRCharacter_GetCharacterInventoryEntry final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetCharacterInventoryEntry) == 0x000008, "Wrong alignment on BRCharacter_GetCharacterInventoryEntry");
static_assert(sizeof(BRCharacter_GetCharacterInventoryEntry) == 0x000010, "Wrong size on BRCharacter_GetCharacterInventoryEntry");
static_assert(offsetof(BRCharacter_GetCharacterInventoryEntry, Slot) == 0x000000, "Member 'BRCharacter_GetCharacterInventoryEntry::Slot' has a wrong offset!");
static_assert(offsetof(BRCharacter_GetCharacterInventoryEntry, ReturnValue) == 0x000008, "Member 'BRCharacter_GetCharacterInventoryEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetCharacterTempInventoryEntry
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetCharacterTempInventoryEntry final
{
public:
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetCharacterTempInventoryEntry) == 0x000008, "Wrong alignment on BRCharacter_GetCharacterTempInventoryEntry");
static_assert(sizeof(BRCharacter_GetCharacterTempInventoryEntry) == 0x000008, "Wrong size on BRCharacter_GetCharacterTempInventoryEntry");
static_assert(offsetof(BRCharacter_GetCharacterTempInventoryEntry, ReturnValue) == 0x000000, "Member 'BRCharacter_GetCharacterTempInventoryEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetCurrentInventoryEntry
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetCurrentInventoryEntry final
{
public:
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetCurrentInventoryEntry) == 0x000008, "Wrong alignment on BRCharacter_GetCurrentInventoryEntry");
static_assert(sizeof(BRCharacter_GetCurrentInventoryEntry) == 0x000008, "Wrong size on BRCharacter_GetCurrentInventoryEntry");
static_assert(offsetof(BRCharacter_GetCurrentInventoryEntry, ReturnValue) == 0x000000, "Member 'BRCharacter_GetCurrentInventoryEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetDamage
// 0x0004 (0x0004 - 0x0000)
struct BRCharacter_GetDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetDamage) == 0x000004, "Wrong alignment on BRCharacter_GetDamage");
static_assert(sizeof(BRCharacter_GetDamage) == 0x000004, "Wrong size on BRCharacter_GetDamage");
static_assert(offsetof(BRCharacter_GetDamage, ReturnValue) == 0x000000, "Member 'BRCharacter_GetDamage::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetDamageLimit
// 0x0004 (0x0004 - 0x0000)
struct BRCharacter_GetDamageLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetDamageLimit) == 0x000004, "Wrong alignment on BRCharacter_GetDamageLimit");
static_assert(sizeof(BRCharacter_GetDamageLimit) == 0x000004, "Wrong size on BRCharacter_GetDamageLimit");
static_assert(offsetof(BRCharacter_GetDamageLimit, ReturnValue) == 0x000000, "Member 'BRCharacter_GetDamageLimit::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetDesiredItemClass
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetDesiredItemClass final
{
public:
	TSubclassOf<class ABRItemBase>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetDesiredItemClass) == 0x000008, "Wrong alignment on BRCharacter_GetDesiredItemClass");
static_assert(sizeof(BRCharacter_GetDesiredItemClass) == 0x000008, "Wrong size on BRCharacter_GetDesiredItemClass");
static_assert(offsetof(BRCharacter_GetDesiredItemClass, ReturnValue) == 0x000000, "Member 'BRCharacter_GetDesiredItemClass::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetDesiredItemInstance
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetDesiredItemInstance final
{
public:
	class ABRItemBase*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetDesiredItemInstance) == 0x000008, "Wrong alignment on BRCharacter_GetDesiredItemInstance");
static_assert(sizeof(BRCharacter_GetDesiredItemInstance) == 0x000008, "Wrong size on BRCharacter_GetDesiredItemInstance");
static_assert(offsetof(BRCharacter_GetDesiredItemInstance, ReturnValue) == 0x000000, "Member 'BRCharacter_GetDesiredItemInstance::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetFireOcclusionStartPosition
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_GetFireOcclusionStartPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetFireOcclusionStartPosition) == 0x000008, "Wrong alignment on BRCharacter_GetFireOcclusionStartPosition");
static_assert(sizeof(BRCharacter_GetFireOcclusionStartPosition) == 0x000018, "Wrong size on BRCharacter_GetFireOcclusionStartPosition");
static_assert(offsetof(BRCharacter_GetFireOcclusionStartPosition, ReturnValue) == 0x000000, "Member 'BRCharacter_GetFireOcclusionStartPosition::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetFlyMode
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_GetFlyMode final
{
public:
	EBRCharacterFlyMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetFlyMode) == 0x000001, "Wrong alignment on BRCharacter_GetFlyMode");
static_assert(sizeof(BRCharacter_GetFlyMode) == 0x000001, "Wrong size on BRCharacter_GetFlyMode");
static_assert(offsetof(BRCharacter_GetFlyMode, ReturnValue) == 0x000000, "Member 'BRCharacter_GetFlyMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetFreeMouse
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_GetFreeMouse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetFreeMouse) == 0x000001, "Wrong alignment on BRCharacter_GetFreeMouse");
static_assert(sizeof(BRCharacter_GetFreeMouse) == 0x000001, "Wrong size on BRCharacter_GetFreeMouse");
static_assert(offsetof(BRCharacter_GetFreeMouse, ReturnValue) == 0x000000, "Member 'BRCharacter_GetFreeMouse::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetItemAttachmentSocketTransform
// 0x0060 (0x0060 - 0x0000)
struct BRCharacter_GetItemAttachmentSocketTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetItemAttachmentSocketTransform) == 0x000010, "Wrong alignment on BRCharacter_GetItemAttachmentSocketTransform");
static_assert(sizeof(BRCharacter_GetItemAttachmentSocketTransform) == 0x000060, "Wrong size on BRCharacter_GetItemAttachmentSocketTransform");
static_assert(offsetof(BRCharacter_GetItemAttachmentSocketTransform, ReturnValue) == 0x000000, "Member 'BRCharacter_GetItemAttachmentSocketTransform::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetItemClass
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetItemClass final
{
public:
	TSubclassOf<class ABRItemBase>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetItemClass) == 0x000008, "Wrong alignment on BRCharacter_GetItemClass");
static_assert(sizeof(BRCharacter_GetItemClass) == 0x000008, "Wrong size on BRCharacter_GetItemClass");
static_assert(offsetof(BRCharacter_GetItemClass, ReturnValue) == 0x000000, "Member 'BRCharacter_GetItemClass::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetItemInstance
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetItemInstance final
{
public:
	class ABRItemBase*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetItemInstance) == 0x000008, "Wrong alignment on BRCharacter_GetItemInstance");
static_assert(sizeof(BRCharacter_GetItemInstance) == 0x000008, "Wrong size on BRCharacter_GetItemInstance");
static_assert(offsetof(BRCharacter_GetItemInstance, ReturnValue) == 0x000000, "Member 'BRCharacter_GetItemInstance::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetItemMuzzleLocationLocalSpace
// 0x0020 (0x0020 - 0x0000)
struct BRCharacter_GetItemMuzzleLocationLocalSpace final
{
public:
	class FName                                   MuzzleSocket;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetItemMuzzleLocationLocalSpace) == 0x000008, "Wrong alignment on BRCharacter_GetItemMuzzleLocationLocalSpace");
static_assert(sizeof(BRCharacter_GetItemMuzzleLocationLocalSpace) == 0x000020, "Wrong size on BRCharacter_GetItemMuzzleLocationLocalSpace");
static_assert(offsetof(BRCharacter_GetItemMuzzleLocationLocalSpace, MuzzleSocket) == 0x000000, "Member 'BRCharacter_GetItemMuzzleLocationLocalSpace::MuzzleSocket' has a wrong offset!");
static_assert(offsetof(BRCharacter_GetItemMuzzleLocationLocalSpace, ReturnValue) == 0x000008, "Member 'BRCharacter_GetItemMuzzleLocationLocalSpace::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetLocationUnderCrosshair
// 0x0038 (0x0038 - 0x0000)
struct BRCharacter_GetLocationUnderCrosshair final
{
public:
	struct FVector                                PointOnStartPlane;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Latency;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetLocationUnderCrosshair) == 0x000008, "Wrong alignment on BRCharacter_GetLocationUnderCrosshair");
static_assert(sizeof(BRCharacter_GetLocationUnderCrosshair) == 0x000038, "Wrong size on BRCharacter_GetLocationUnderCrosshair");
static_assert(offsetof(BRCharacter_GetLocationUnderCrosshair, PointOnStartPlane) == 0x000000, "Member 'BRCharacter_GetLocationUnderCrosshair::PointOnStartPlane' has a wrong offset!");
static_assert(offsetof(BRCharacter_GetLocationUnderCrosshair, Latency) == 0x000018, "Member 'BRCharacter_GetLocationUnderCrosshair::Latency' has a wrong offset!");
static_assert(offsetof(BRCharacter_GetLocationUnderCrosshair, Radius) == 0x00001C, "Member 'BRCharacter_GetLocationUnderCrosshair::Radius' has a wrong offset!");
static_assert(offsetof(BRCharacter_GetLocationUnderCrosshair, ReturnValue) == 0x000020, "Member 'BRCharacter_GetLocationUnderCrosshair::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetOutOfBody
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_GetOutOfBody final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetOutOfBody) == 0x000001, "Wrong alignment on BRCharacter_GetOutOfBody");
static_assert(sizeof(BRCharacter_GetOutOfBody) == 0x000001, "Wrong size on BRCharacter_GetOutOfBody");
static_assert(offsetof(BRCharacter_GetOutOfBody, ReturnValue) == 0x000000, "Member 'BRCharacter_GetOutOfBody::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetOutOfBodyRotation
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_GetOutOfBodyRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetOutOfBodyRotation) == 0x000008, "Wrong alignment on BRCharacter_GetOutOfBodyRotation");
static_assert(sizeof(BRCharacter_GetOutOfBodyRotation) == 0x000018, "Wrong size on BRCharacter_GetOutOfBodyRotation");
static_assert(offsetof(BRCharacter_GetOutOfBodyRotation, ReturnValue) == 0x000000, "Member 'BRCharacter_GetOutOfBodyRotation::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetPawnCollision
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_GetPawnCollision final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetPawnCollision) == 0x000001, "Wrong alignment on BRCharacter_GetPawnCollision");
static_assert(sizeof(BRCharacter_GetPawnCollision) == 0x000001, "Wrong size on BRCharacter_GetPawnCollision");
static_assert(offsetof(BRCharacter_GetPawnCollision, ReturnValue) == 0x000000, "Member 'BRCharacter_GetPawnCollision::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetRemainingRequiredParts
// 0x0010 (0x0010 - 0x0000)
struct BRCharacter_GetRemainingRequiredParts final
{
public:
	TArray<int32>                                 TreeIndices;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetRemainingRequiredParts) == 0x000008, "Wrong alignment on BRCharacter_GetRemainingRequiredParts");
static_assert(sizeof(BRCharacter_GetRemainingRequiredParts) == 0x000010, "Wrong size on BRCharacter_GetRemainingRequiredParts");
static_assert(offsetof(BRCharacter_GetRemainingRequiredParts, TreeIndices) == 0x000000, "Member 'BRCharacter_GetRemainingRequiredParts::TreeIndices' has a wrong offset!");

// Function Brickadia.BRCharacter.GetSeatBrick
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetSeatBrick final
{
public:
	struct FBrickHandle                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetSeatBrick) == 0x000004, "Wrong alignment on BRCharacter_GetSeatBrick");
static_assert(sizeof(BRCharacter_GetSeatBrick) == 0x000008, "Wrong size on BRCharacter_GetSeatBrick");
static_assert(offsetof(BRCharacter_GetSeatBrick, ReturnValue) == 0x000000, "Member 'BRCharacter_GetSeatBrick::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetSeatedOffset
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_GetSeatedOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetSeatedOffset) == 0x000008, "Wrong alignment on BRCharacter_GetSeatedOffset");
static_assert(sizeof(BRCharacter_GetSeatedOffset) == 0x000018, "Wrong size on BRCharacter_GetSeatedOffset");
static_assert(offsetof(BRCharacter_GetSeatedOffset, ReturnValue) == 0x000000, "Member 'BRCharacter_GetSeatedOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetSeatedRotation
// 0x0018 (0x0018 - 0x0000)
struct BRCharacter_GetSeatedRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetSeatedRotation) == 0x000008, "Wrong alignment on BRCharacter_GetSeatedRotation");
static_assert(sizeof(BRCharacter_GetSeatedRotation) == 0x000018, "Wrong size on BRCharacter_GetSeatedRotation");
static_assert(offsetof(BRCharacter_GetSeatedRotation, ReturnValue) == 0x000000, "Member 'BRCharacter_GetSeatedRotation::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetSeatZoomLevel
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetSeatZoomLevel final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetSeatZoomLevel) == 0x000004, "Wrong alignment on BRCharacter_GetSeatZoomLevel");
static_assert(sizeof(BRCharacter_GetSeatZoomLevel) == 0x000008, "Wrong size on BRCharacter_GetSeatZoomLevel");
static_assert(offsetof(BRCharacter_GetSeatZoomLevel, Amount) == 0x000000, "Member 'BRCharacter_GetSeatZoomLevel::Amount' has a wrong offset!");
static_assert(offsetof(BRCharacter_GetSeatZoomLevel, ReturnValue) == 0x000004, "Member 'BRCharacter_GetSeatZoomLevel::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetShowFirstPersonModel
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_GetShowFirstPersonModel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetShowFirstPersonModel) == 0x000001, "Wrong alignment on BRCharacter_GetShowFirstPersonModel");
static_assert(sizeof(BRCharacter_GetShowFirstPersonModel) == 0x000001, "Wrong size on BRCharacter_GetShowFirstPersonModel");
static_assert(offsetof(BRCharacter_GetShowFirstPersonModel, ReturnValue) == 0x000000, "Member 'BRCharacter_GetShowFirstPersonModel::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetSprinting
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_GetSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetSprinting) == 0x000001, "Wrong alignment on BRCharacter_GetSprinting");
static_assert(sizeof(BRCharacter_GetSprinting) == 0x000001, "Wrong size on BRCharacter_GetSprinting");
static_assert(offsetof(BRCharacter_GetSprinting, ReturnValue) == 0x000000, "Member 'BRCharacter_GetSprinting::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.GetViewModel
// 0x0008 (0x0008 - 0x0000)
struct BRCharacter_GetViewModel final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_GetViewModel) == 0x000008, "Wrong alignment on BRCharacter_GetViewModel");
static_assert(sizeof(BRCharacter_GetViewModel) == 0x000008, "Wrong size on BRCharacter_GetViewModel");
static_assert(offsetof(BRCharacter_GetViewModel, ReturnValue) == 0x000000, "Member 'BRCharacter_GetViewModel::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.HasItem
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_HasItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_HasItem) == 0x000001, "Wrong alignment on BRCharacter_HasItem");
static_assert(sizeof(BRCharacter_HasItem) == 0x000001, "Wrong size on BRCharacter_HasItem");
static_assert(offsetof(BRCharacter_HasItem, ReturnValue) == 0x000000, "Member 'BRCharacter_HasItem::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.HasRequiredPartsAttached
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_HasRequiredPartsAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_HasRequiredPartsAttached) == 0x000001, "Wrong alignment on BRCharacter_HasRequiredPartsAttached");
static_assert(sizeof(BRCharacter_HasRequiredPartsAttached) == 0x000001, "Wrong size on BRCharacter_HasRequiredPartsAttached");
static_assert(offsetof(BRCharacter_HasRequiredPartsAttached, ReturnValue) == 0x000000, "Member 'BRCharacter_HasRequiredPartsAttached::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.IsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_IsFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_IsFirstPerson) == 0x000001, "Wrong alignment on BRCharacter_IsFirstPerson");
static_assert(sizeof(BRCharacter_IsFirstPerson) == 0x000001, "Wrong size on BRCharacter_IsFirstPerson");
static_assert(offsetof(BRCharacter_IsFirstPerson, ReturnValue) == 0x000000, "Member 'BRCharacter_IsFirstPerson::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.IsSitting
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_IsSitting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_IsSitting) == 0x000001, "Wrong alignment on BRCharacter_IsSitting");
static_assert(sizeof(BRCharacter_IsSitting) == 0x000001, "Wrong size on BRCharacter_IsSitting");
static_assert(offsetof(BRCharacter_IsSitting, ReturnValue) == 0x000000, "Member 'BRCharacter_IsSitting::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.IsStrafing
// 0x0001 (0x0001 - 0x0000)
struct BRCharacter_IsStrafing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacter_IsStrafing) == 0x000001, "Wrong alignment on BRCharacter_IsStrafing");
static_assert(sizeof(BRCharacter_IsStrafing) == 0x000001, "Wrong size on BRCharacter_IsStrafing");
static_assert(offsetof(BRCharacter_IsStrafing, ReturnValue) == 0x000000, "Member 'BRCharacter_IsStrafing::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacter.MulticastDebugDrawBoxes
// 0x0058 (0x0058 - 0x0000)
struct BRCharacter_MulticastDebugDrawBoxes final
{
public:
	TArray<struct FTransform>                     BoxTransforms;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        BoxExtents;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0038(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacter_MulticastDebugDrawBoxes) == 0x000008, "Wrong alignment on BRCharacter_MulticastDebugDrawBoxes");
static_assert(sizeof(BRCharacter_MulticastDebugDrawBoxes) == 0x000058, "Wrong size on BRCharacter_MulticastDebugDrawBoxes");
static_assert(offsetof(BRCharacter_MulticastDebugDrawBoxes, BoxTransforms) == 0x000000, "Member 'BRCharacter_MulticastDebugDrawBoxes::BoxTransforms' has a wrong offset!");
static_assert(offsetof(BRCharacter_MulticastDebugDrawBoxes, BoxExtents) == 0x000010, "Member 'BRCharacter_MulticastDebugDrawBoxes::BoxExtents' has a wrong offset!");
static_assert(offsetof(BRCharacter_MulticastDebugDrawBoxes, Start) == 0x000020, "Member 'BRCharacter_MulticastDebugDrawBoxes::Start' has a wrong offset!");
static_assert(offsetof(BRCharacter_MulticastDebugDrawBoxes, End) == 0x000038, "Member 'BRCharacter_MulticastDebugDrawBoxes::End' has a wrong offset!");
static_assert(offsetof(BRCharacter_MulticastDebugDrawBoxes, bHit) == 0x000050, "Member 'BRCharacter_MulticastDebugDrawBoxes::bHit' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.AddVehicleControlInput
// 0x0020 (0x0020 - 0x0000)
struct BRCharacterMovementComponent_AddVehicleControlInput final
{
public:
	struct FVector                                VehicleDirection;                                  // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleValue;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRCharacterMovementComponent_AddVehicleControlInput) == 0x000008, "Wrong alignment on BRCharacterMovementComponent_AddVehicleControlInput");
static_assert(sizeof(BRCharacterMovementComponent_AddVehicleControlInput) == 0x000020, "Wrong size on BRCharacterMovementComponent_AddVehicleControlInput");
static_assert(offsetof(BRCharacterMovementComponent_AddVehicleControlInput, VehicleDirection) == 0x000000, "Member 'BRCharacterMovementComponent_AddVehicleControlInput::VehicleDirection' has a wrong offset!");
static_assert(offsetof(BRCharacterMovementComponent_AddVehicleControlInput, ScaleValue) == 0x000018, "Member 'BRCharacterMovementComponent_AddVehicleControlInput::ScaleValue' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.SetControlMode
// 0x0001 (0x0001 - 0x0000)
struct BRCharacterMovementComponent_SetControlMode final
{
public:
	EBRCharacterControlMode                       NewControlMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacterMovementComponent_SetControlMode) == 0x000001, "Wrong alignment on BRCharacterMovementComponent_SetControlMode");
static_assert(sizeof(BRCharacterMovementComponent_SetControlMode) == 0x000001, "Wrong size on BRCharacterMovementComponent_SetControlMode");
static_assert(offsetof(BRCharacterMovementComponent_SetControlMode, NewControlMode) == 0x000000, "Member 'BRCharacterMovementComponent_SetControlMode::NewControlMode' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.SetFlyMode
// 0x0001 (0x0001 - 0x0000)
struct BRCharacterMovementComponent_SetFlyMode final
{
public:
	EBRCharacterFlyMode                           NewFlyMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacterMovementComponent_SetFlyMode) == 0x000001, "Wrong alignment on BRCharacterMovementComponent_SetFlyMode");
static_assert(sizeof(BRCharacterMovementComponent_SetFlyMode) == 0x000001, "Wrong size on BRCharacterMovementComponent_SetFlyMode");
static_assert(offsetof(BRCharacterMovementComponent_SetFlyMode, NewFlyMode) == 0x000000, "Member 'BRCharacterMovementComponent_SetFlyMode::NewFlyMode' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.SetSprinting
// 0x0001 (0x0001 - 0x0000)
struct BRCharacterMovementComponent_SetSprinting final
{
public:
	bool                                          bNewSprinting;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacterMovementComponent_SetSprinting) == 0x000001, "Wrong alignment on BRCharacterMovementComponent_SetSprinting");
static_assert(sizeof(BRCharacterMovementComponent_SetSprinting) == 0x000001, "Wrong size on BRCharacterMovementComponent_SetSprinting");
static_assert(offsetof(BRCharacterMovementComponent_SetSprinting, bNewSprinting) == 0x000000, "Member 'BRCharacterMovementComponent_SetSprinting::bNewSprinting' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.GetBRCharacterOwner
// 0x0008 (0x0008 - 0x0000)
struct BRCharacterMovementComponent_GetBRCharacterOwner final
{
public:
	class ABRCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacterMovementComponent_GetBRCharacterOwner) == 0x000008, "Wrong alignment on BRCharacterMovementComponent_GetBRCharacterOwner");
static_assert(sizeof(BRCharacterMovementComponent_GetBRCharacterOwner) == 0x000008, "Wrong size on BRCharacterMovementComponent_GetBRCharacterOwner");
static_assert(offsetof(BRCharacterMovementComponent_GetBRCharacterOwner, ReturnValue) == 0x000000, "Member 'BRCharacterMovementComponent_GetBRCharacterOwner::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.GetClientVehicleControlInput
// 0x0018 (0x0018 - 0x0000)
struct BRCharacterMovementComponent_GetClientVehicleControlInput final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacterMovementComponent_GetClientVehicleControlInput) == 0x000008, "Wrong alignment on BRCharacterMovementComponent_GetClientVehicleControlInput");
static_assert(sizeof(BRCharacterMovementComponent_GetClientVehicleControlInput) == 0x000018, "Wrong size on BRCharacterMovementComponent_GetClientVehicleControlInput");
static_assert(offsetof(BRCharacterMovementComponent_GetClientVehicleControlInput, ReturnValue) == 0x000000, "Member 'BRCharacterMovementComponent_GetClientVehicleControlInput::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.GetControlMode
// 0x0001 (0x0001 - 0x0000)
struct BRCharacterMovementComponent_GetControlMode final
{
public:
	EBRCharacterControlMode                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacterMovementComponent_GetControlMode) == 0x000001, "Wrong alignment on BRCharacterMovementComponent_GetControlMode");
static_assert(sizeof(BRCharacterMovementComponent_GetControlMode) == 0x000001, "Wrong size on BRCharacterMovementComponent_GetControlMode");
static_assert(offsetof(BRCharacterMovementComponent_GetControlMode, ReturnValue) == 0x000000, "Member 'BRCharacterMovementComponent_GetControlMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.GetFlyMode
// 0x0001 (0x0001 - 0x0000)
struct BRCharacterMovementComponent_GetFlyMode final
{
public:
	EBRCharacterFlyMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacterMovementComponent_GetFlyMode) == 0x000001, "Wrong alignment on BRCharacterMovementComponent_GetFlyMode");
static_assert(sizeof(BRCharacterMovementComponent_GetFlyMode) == 0x000001, "Wrong size on BRCharacterMovementComponent_GetFlyMode");
static_assert(offsetof(BRCharacterMovementComponent_GetFlyMode, ReturnValue) == 0x000000, "Member 'BRCharacterMovementComponent_GetFlyMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.GetSprinting
// 0x0001 (0x0001 - 0x0000)
struct BRCharacterMovementComponent_GetSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacterMovementComponent_GetSprinting) == 0x000001, "Wrong alignment on BRCharacterMovementComponent_GetSprinting");
static_assert(sizeof(BRCharacterMovementComponent_GetSprinting) == 0x000001, "Wrong size on BRCharacterMovementComponent_GetSprinting");
static_assert(offsetof(BRCharacterMovementComponent_GetSprinting, ReturnValue) == 0x000000, "Member 'BRCharacterMovementComponent_GetSprinting::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.IsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct BRCharacterMovementComponent_IsFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacterMovementComponent_IsFirstPerson) == 0x000001, "Wrong alignment on BRCharacterMovementComponent_IsFirstPerson");
static_assert(sizeof(BRCharacterMovementComponent_IsFirstPerson) == 0x000001, "Wrong size on BRCharacterMovementComponent_IsFirstPerson");
static_assert(offsetof(BRCharacterMovementComponent_IsFirstPerson, ReturnValue) == 0x000000, "Member 'BRCharacterMovementComponent_IsFirstPerson::ReturnValue' has a wrong offset!");

// Function Brickadia.BRCharacterMovementComponent.IsStrafing
// 0x0001 (0x0001 - 0x0000)
struct BRCharacterMovementComponent_IsStrafing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRCharacterMovementComponent_IsStrafing) == 0x000001, "Wrong alignment on BRCharacterMovementComponent_IsStrafing");
static_assert(sizeof(BRCharacterMovementComponent_IsStrafing) == 0x000001, "Wrong size on BRCharacterMovementComponent_IsStrafing");
static_assert(offsetof(BRCharacterMovementComponent_IsStrafing, ReturnValue) == 0x000000, "Member 'BRCharacterMovementComponent_IsStrafing::ReturnValue' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.Ban
// 0x0028 (0x0028 - 0x0000)
struct BRChatCommandLibrary_Default_Ban final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRChatCommandLibrary_Default_Ban) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_Ban");
static_assert(sizeof(BRChatCommandLibrary_Default_Ban) == 0x000028, "Wrong size on BRChatCommandLibrary_Default_Ban");
static_assert(offsetof(BRChatCommandLibrary_Default_Ban, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_Ban::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_Ban, Player) == 0x000010, "Member 'BRChatCommandLibrary_Default_Ban::Player' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_Ban, Minutes) == 0x000020, "Member 'BRChatCommandLibrary_Default_Ban::Minutes' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.BanAdv
// 0x0038 (0x0038 - 0x0000)
struct BRChatCommandLibrary_Default_BanAdv final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_BanAdv) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_BanAdv");
static_assert(sizeof(BRChatCommandLibrary_Default_BanAdv) == 0x000038, "Wrong size on BRChatCommandLibrary_Default_BanAdv");
static_assert(offsetof(BRChatCommandLibrary_Default_BanAdv, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_BanAdv::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_BanAdv, Player) == 0x000010, "Member 'BRChatCommandLibrary_Default_BanAdv::Player' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_BanAdv, Minutes) == 0x000020, "Member 'BRChatCommandLibrary_Default_BanAdv::Minutes' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_BanAdv, Reason) == 0x000028, "Member 'BRChatCommandLibrary_Default_BanAdv::Reason' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.BrickCount
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_BrickCount final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_BrickCount) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_BrickCount");
static_assert(sizeof(BRChatCommandLibrary_Default_BrickCount) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_BrickCount");
static_assert(offsetof(BRChatCommandLibrary_Default_BrickCount, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_BrickCount::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.ClearAllObjects
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_ClearAllObjects final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_ClearAllObjects) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_ClearAllObjects");
static_assert(sizeof(BRChatCommandLibrary_Default_ClearAllObjects) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_ClearAllObjects");
static_assert(offsetof(BRChatCommandLibrary_Default_ClearAllObjects, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_ClearAllObjects::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.ClearCheckPoint
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_ClearCheckPoint final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_ClearCheckPoint) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_ClearCheckPoint");
static_assert(sizeof(BRChatCommandLibrary_Default_ClearCheckPoint) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_ClearCheckPoint");
static_assert(offsetof(BRChatCommandLibrary_Default_ClearCheckPoint, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_ClearCheckPoint::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.ClearObjects
// 0x0018 (0x0018 - 0x0000)
struct BRChatCommandLibrary_Default_ClearObjects final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_ClearObjects) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_ClearObjects");
static_assert(sizeof(BRChatCommandLibrary_Default_ClearObjects) == 0x000018, "Wrong size on BRChatCommandLibrary_Default_ClearObjects");
static_assert(offsetof(BRChatCommandLibrary_Default_ClearObjects, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_ClearObjects::Caller' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_ClearObjects, Player) == 0x000008, "Member 'BRChatCommandLibrary_Default_ClearObjects::Player' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.ClearOwnObjects
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_ClearOwnObjects final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_ClearOwnObjects) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_ClearOwnObjects");
static_assert(sizeof(BRChatCommandLibrary_Default_ClearOwnObjects) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_ClearOwnObjects");
static_assert(offsetof(BRChatCommandLibrary_Default_ClearOwnObjects, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_ClearOwnObjects::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.GetTransformSelf
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_GetTransformSelf final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_GetTransformSelf) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_GetTransformSelf");
static_assert(sizeof(BRChatCommandLibrary_Default_GetTransformSelf) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_GetTransformSelf");
static_assert(offsetof(BRChatCommandLibrary_Default_GetTransformSelf, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_GetTransformSelf::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.GetTransformTarget
// 0x0020 (0x0020 - 0x0000)
struct BRChatCommandLibrary_Default_GetTransformTarget final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_GetTransformTarget) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_GetTransformTarget");
static_assert(sizeof(BRChatCommandLibrary_Default_GetTransformTarget) == 0x000020, "Wrong size on BRChatCommandLibrary_Default_GetTransformTarget");
static_assert(offsetof(BRChatCommandLibrary_Default_GetTransformTarget, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_GetTransformTarget::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_GetTransformTarget, Player) == 0x000010, "Member 'BRChatCommandLibrary_Default_GetTransformTarget::Player' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.Ghost
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_Ghost final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_Ghost) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_Ghost");
static_assert(sizeof(BRChatCommandLibrary_Default_Ghost) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_Ghost");
static_assert(offsetof(BRChatCommandLibrary_Default_Ghost, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_Ghost::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.GrantRole
// 0x0030 (0x0030 - 0x0000)
struct BRChatCommandLibrary_Default_GrantRole final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_GrantRole) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_GrantRole");
static_assert(sizeof(BRChatCommandLibrary_Default_GrantRole) == 0x000030, "Wrong size on BRChatCommandLibrary_Default_GrantRole");
static_assert(offsetof(BRChatCommandLibrary_Default_GrantRole, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_GrantRole::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_GrantRole, Role) == 0x000010, "Member 'BRChatCommandLibrary_Default_GrantRole::Role' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_GrantRole, Player) == 0x000020, "Member 'BRChatCommandLibrary_Default_GrantRole::Player' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.Help
// 0x0010 (0x0010 - 0x0000)
struct BRChatCommandLibrary_Default_Help final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_Help) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_Help");
static_assert(sizeof(BRChatCommandLibrary_Default_Help) == 0x000010, "Wrong size on BRChatCommandLibrary_Default_Help");
static_assert(offsetof(BRChatCommandLibrary_Default_Help, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_Help::Context' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.HelpSpecific
// 0x0020 (0x0020 - 0x0000)
struct BRChatCommandLibrary_Default_HelpSpecific final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 CommandName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_HelpSpecific) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_HelpSpecific");
static_assert(sizeof(BRChatCommandLibrary_Default_HelpSpecific) == 0x000020, "Wrong size on BRChatCommandLibrary_Default_HelpSpecific");
static_assert(offsetof(BRChatCommandLibrary_Default_HelpSpecific, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_HelpSpecific::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_HelpSpecific, CommandName) == 0x000010, "Member 'BRChatCommandLibrary_Default_HelpSpecific::CommandName' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.JoinTeam
// 0x0018 (0x0018 - 0x0000)
struct BRChatCommandLibrary_Default_JoinTeam final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Team;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_JoinTeam) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_JoinTeam");
static_assert(sizeof(BRChatCommandLibrary_Default_JoinTeam) == 0x000018, "Wrong size on BRChatCommandLibrary_Default_JoinTeam");
static_assert(offsetof(BRChatCommandLibrary_Default_JoinTeam, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_JoinTeam::Caller' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_JoinTeam, Team) == 0x000008, "Member 'BRChatCommandLibrary_Default_JoinTeam::Team' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.Kick
// 0x0020 (0x0020 - 0x0000)
struct BRChatCommandLibrary_Default_Kick final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_Kick) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_Kick");
static_assert(sizeof(BRChatCommandLibrary_Default_Kick) == 0x000020, "Wrong size on BRChatCommandLibrary_Default_Kick");
static_assert(offsetof(BRChatCommandLibrary_Default_Kick, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_Kick::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_Kick, Player) == 0x000010, "Member 'BRChatCommandLibrary_Default_Kick::Player' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.KickAdv
// 0x0030 (0x0030 - 0x0000)
struct BRChatCommandLibrary_Default_KickAdv final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_KickAdv) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_KickAdv");
static_assert(sizeof(BRChatCommandLibrary_Default_KickAdv) == 0x000030, "Wrong size on BRChatCommandLibrary_Default_KickAdv");
static_assert(offsetof(BRChatCommandLibrary_Default_KickAdv, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_KickAdv::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_KickAdv, Player) == 0x000010, "Member 'BRChatCommandLibrary_Default_KickAdv::Player' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_KickAdv, Reason) == 0x000020, "Member 'BRChatCommandLibrary_Default_KickAdv::Reason' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.LeaveTeam
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_LeaveTeam final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_LeaveTeam) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_LeaveTeam");
static_assert(sizeof(BRChatCommandLibrary_Default_LeaveTeam) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_LeaveTeam");
static_assert(offsetof(BRChatCommandLibrary_Default_LeaveTeam, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_LeaveTeam::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.List16AutoSaves
// 0x0010 (0x0010 - 0x0000)
struct BRChatCommandLibrary_Default_List16AutoSaves final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_List16AutoSaves) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_List16AutoSaves");
static_assert(sizeof(BRChatCommandLibrary_Default_List16AutoSaves) == 0x000010, "Wrong size on BRChatCommandLibrary_Default_List16AutoSaves");
static_assert(offsetof(BRChatCommandLibrary_Default_List16AutoSaves, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_List16AutoSaves::Context' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.ListNumAutoSaves
// 0x0018 (0x0018 - 0x0000)
struct BRChatCommandLibrary_Default_ListNumAutoSaves final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumAutoSaves;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRChatCommandLibrary_Default_ListNumAutoSaves) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_ListNumAutoSaves");
static_assert(sizeof(BRChatCommandLibrary_Default_ListNumAutoSaves) == 0x000018, "Wrong size on BRChatCommandLibrary_Default_ListNumAutoSaves");
static_assert(offsetof(BRChatCommandLibrary_Default_ListNumAutoSaves, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_ListNumAutoSaves::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_ListNumAutoSaves, NumAutoSaves) == 0x000010, "Member 'BRChatCommandLibrary_Default_ListNumAutoSaves::NumAutoSaves' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.ListPlayers
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_ListPlayers final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_ListPlayers) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_ListPlayers");
static_assert(sizeof(BRChatCommandLibrary_Default_ListPlayers) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_ListPlayers");
static_assert(offsetof(BRChatCommandLibrary_Default_ListPlayers, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_ListPlayers::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.ListRoles
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_ListRoles final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_ListRoles) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_ListRoles");
static_assert(sizeof(BRChatCommandLibrary_Default_ListRoles) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_ListRoles");
static_assert(offsetof(BRChatCommandLibrary_Default_ListRoles, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_ListRoles::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.ListTeams
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_ListTeams final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_ListTeams) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_ListTeams");
static_assert(sizeof(BRChatCommandLibrary_Default_ListTeams) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_ListTeams");
static_assert(offsetof(BRChatCommandLibrary_Default_ListTeams, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_ListTeams::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.Load
// 0x0020 (0x0020 - 0x0000)
struct BRChatCommandLibrary_Default_Load final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 File;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_Load) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_Load");
static_assert(sizeof(BRChatCommandLibrary_Default_Load) == 0x000020, "Wrong size on BRChatCommandLibrary_Default_Load");
static_assert(offsetof(BRChatCommandLibrary_Default_Load, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_Load::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_Load, File) == 0x000010, "Member 'BRChatCommandLibrary_Default_Load::File' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.LoadLastAutoSave
// 0x0010 (0x0010 - 0x0000)
struct BRChatCommandLibrary_Default_LoadLastAutoSave final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_LoadLastAutoSave) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_LoadLastAutoSave");
static_assert(sizeof(BRChatCommandLibrary_Default_LoadLastAutoSave) == 0x000010, "Wrong size on BRChatCommandLibrary_Default_LoadLastAutoSave");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadLastAutoSave, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_LoadLastAutoSave::Context' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.LoadNthLastAutoSave
// 0x0018 (0x0018 - 0x0000)
struct BRChatCommandLibrary_Default_LoadNthLastAutoSave final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NFromLast;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRChatCommandLibrary_Default_LoadNthLastAutoSave) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_LoadNthLastAutoSave");
static_assert(sizeof(BRChatCommandLibrary_Default_LoadNthLastAutoSave) == 0x000018, "Wrong size on BRChatCommandLibrary_Default_LoadNthLastAutoSave");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadNthLastAutoSave, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_LoadNthLastAutoSave::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadNthLastAutoSave, NFromLast) == 0x000010, "Member 'BRChatCommandLibrary_Default_LoadNthLastAutoSave::NFromLast' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.LoadOffset
// 0x0030 (0x0030 - 0x0000)
struct BRChatCommandLibrary_Default_LoadOffset final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 File;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetX;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetY;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetZ;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRChatCommandLibrary_Default_LoadOffset) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_LoadOffset");
static_assert(sizeof(BRChatCommandLibrary_Default_LoadOffset) == 0x000030, "Wrong size on BRChatCommandLibrary_Default_LoadOffset");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffset, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_LoadOffset::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffset, File) == 0x000010, "Member 'BRChatCommandLibrary_Default_LoadOffset::File' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffset, OffsetX) == 0x000020, "Member 'BRChatCommandLibrary_Default_LoadOffset::OffsetX' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffset, OffsetY) == 0x000024, "Member 'BRChatCommandLibrary_Default_LoadOffset::OffsetY' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffset, OffsetZ) == 0x000028, "Member 'BRChatCommandLibrary_Default_LoadOffset::OffsetZ' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.LoadOffsetAdv
// 0x0030 (0x0030 - 0x0000)
struct BRChatCommandLibrary_Default_LoadOffsetAdv final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 File;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetX;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetY;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetZ;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCorrectPaletteColors;                             // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCorrectCustomColors;                              // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRChatCommandLibrary_Default_LoadOffsetAdv) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_LoadOffsetAdv");
static_assert(sizeof(BRChatCommandLibrary_Default_LoadOffsetAdv) == 0x000030, "Wrong size on BRChatCommandLibrary_Default_LoadOffsetAdv");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffsetAdv, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_LoadOffsetAdv::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffsetAdv, File) == 0x000010, "Member 'BRChatCommandLibrary_Default_LoadOffsetAdv::File' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffsetAdv, OffsetX) == 0x000020, "Member 'BRChatCommandLibrary_Default_LoadOffsetAdv::OffsetX' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffsetAdv, OffsetY) == 0x000024, "Member 'BRChatCommandLibrary_Default_LoadOffsetAdv::OffsetY' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffsetAdv, OffsetZ) == 0x000028, "Member 'BRChatCommandLibrary_Default_LoadOffsetAdv::OffsetZ' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffsetAdv, bCorrectPaletteColors) == 0x00002C, "Member 'BRChatCommandLibrary_Default_LoadOffsetAdv::bCorrectPaletteColors' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_LoadOffsetAdv, bCorrectCustomColors) == 0x00002D, "Member 'BRChatCommandLibrary_Default_LoadOffsetAdv::bCorrectCustomColors' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.PlayerCount
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_PlayerCount final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_PlayerCount) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_PlayerCount");
static_assert(sizeof(BRChatCommandLibrary_Default_PlayerCount) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_PlayerCount");
static_assert(offsetof(BRChatCommandLibrary_Default_PlayerCount, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_PlayerCount::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.RevokeRole
// 0x0030 (0x0030 - 0x0000)
struct BRChatCommandLibrary_Default_RevokeRole final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_RevokeRole) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_RevokeRole");
static_assert(sizeof(BRChatCommandLibrary_Default_RevokeRole) == 0x000030, "Wrong size on BRChatCommandLibrary_Default_RevokeRole");
static_assert(offsetof(BRChatCommandLibrary_Default_RevokeRole, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_RevokeRole::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_RevokeRole, Role) == 0x000010, "Member 'BRChatCommandLibrary_Default_RevokeRole::Role' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_RevokeRole, Player) == 0x000020, "Member 'BRChatCommandLibrary_Default_RevokeRole::Player' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.Teleport
// 0x0030 (0x0030 - 0x0000)
struct BRChatCommandLibrary_Default_Teleport final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OtherPlayer;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_Teleport) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_Teleport");
static_assert(sizeof(BRChatCommandLibrary_Default_Teleport) == 0x000030, "Wrong size on BRChatCommandLibrary_Default_Teleport");
static_assert(offsetof(BRChatCommandLibrary_Default_Teleport, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_Teleport::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_Teleport, Player) == 0x000010, "Member 'BRChatCommandLibrary_Default_Teleport::Player' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_Teleport, OtherPlayer) == 0x000020, "Member 'BRChatCommandLibrary_Default_Teleport::OtherPlayer' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.TeleportBack
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_TeleportBack final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_TeleportBack) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_TeleportBack");
static_assert(sizeof(BRChatCommandLibrary_Default_TeleportBack) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_TeleportBack");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportBack, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_TeleportBack::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.TeleportPlayerBack
// 0x0018 (0x0018 - 0x0000)
struct BRChatCommandLibrary_Default_TeleportPlayerBack final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_TeleportPlayerBack) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_TeleportPlayerBack");
static_assert(sizeof(BRChatCommandLibrary_Default_TeleportPlayerBack) == 0x000018, "Wrong size on BRChatCommandLibrary_Default_TeleportPlayerBack");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerBack, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_TeleportPlayerBack::Caller' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerBack, Player) == 0x000008, "Member 'BRChatCommandLibrary_Default_TeleportPlayerBack::Player' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.TeleportPlayerToLocation
// 0x0030 (0x0030 - 0x0000)
struct BRChatCommandLibrary_Default_TeleportPlayerToLocation final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepVelocity;                                     // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRChatCommandLibrary_Default_TeleportPlayerToLocation) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_TeleportPlayerToLocation");
static_assert(sizeof(BRChatCommandLibrary_Default_TeleportPlayerToLocation) == 0x000030, "Wrong size on BRChatCommandLibrary_Default_TeleportPlayerToLocation");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocation, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocation::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocation, Player) == 0x000010, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocation::Player' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocation, X) == 0x000020, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocation::X' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocation, Y) == 0x000024, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocation::Y' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocation, Z) == 0x000028, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocation::Z' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocation, bKeepVelocity) == 0x00002C, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocation::bKeepVelocity' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.TeleportPlayerToLocationRotation
// 0x0038 (0x0038 - 0x0000)
struct BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepVelocity;                                     // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation");
static_assert(sizeof(BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation) == 0x000038, "Wrong size on BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation, Player) == 0x000010, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation::Player' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation, X) == 0x000020, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation::X' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation, Y) == 0x000024, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation::Y' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation, Z) == 0x000028, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation::Z' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation, Pitch) == 0x00002C, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation::Pitch' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation, Yaw) == 0x000030, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation::Yaw' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation, bKeepVelocity) == 0x000034, "Member 'BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation::bKeepVelocity' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.TeleportSelf
// 0x0018 (0x0018 - 0x0000)
struct BRChatCommandLibrary_Default_TeleportSelf final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OtherPlayer;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_TeleportSelf) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_TeleportSelf");
static_assert(sizeof(BRChatCommandLibrary_Default_TeleportSelf) == 0x000018, "Wrong size on BRChatCommandLibrary_Default_TeleportSelf");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportSelf, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_TeleportSelf::Caller' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportSelf, OtherPlayer) == 0x000008, "Member 'BRChatCommandLibrary_Default_TeleportSelf::OtherPlayer' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.TeleportToAimTarget
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_TeleportToAimTarget final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_TeleportToAimTarget) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_TeleportToAimTarget");
static_assert(sizeof(BRChatCommandLibrary_Default_TeleportToAimTarget) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_TeleportToAimTarget");
static_assert(offsetof(BRChatCommandLibrary_Default_TeleportToAimTarget, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_TeleportToAimTarget::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.ToggleSpectatorMode
// 0x0008 (0x0008 - 0x0000)
struct BRChatCommandLibrary_Default_ToggleSpectatorMode final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_ToggleSpectatorMode) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_ToggleSpectatorMode");
static_assert(sizeof(BRChatCommandLibrary_Default_ToggleSpectatorMode) == 0x000008, "Wrong size on BRChatCommandLibrary_Default_ToggleSpectatorMode");
static_assert(offsetof(BRChatCommandLibrary_Default_ToggleSpectatorMode, Caller) == 0x000000, "Member 'BRChatCommandLibrary_Default_ToggleSpectatorMode::Caller' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_Default.Unban
// 0x0020 (0x0020 - 0x0000)
struct BRChatCommandLibrary_Default_Unban final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Player;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_Default_Unban) == 0x000008, "Wrong alignment on BRChatCommandLibrary_Default_Unban");
static_assert(sizeof(BRChatCommandLibrary_Default_Unban) == 0x000020, "Wrong size on BRChatCommandLibrary_Default_Unban");
static_assert(offsetof(BRChatCommandLibrary_Default_Unban, Context) == 0x000000, "Member 'BRChatCommandLibrary_Default_Unban::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandLibrary_Default_Unban, Player) == 0x000010, "Member 'BRChatCommandLibrary_Default_Unban::Player' has a wrong offset!");

// Function Brickadia.BRChatCommandLibrary_DynamicGrids.DestroyAllDynamicGrids
// 0x0010 (0x0010 - 0x0000)
struct BRChatCommandLibrary_DynamicGrids_DestroyAllDynamicGrids final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandLibrary_DynamicGrids_DestroyAllDynamicGrids) == 0x000008, "Wrong alignment on BRChatCommandLibrary_DynamicGrids_DestroyAllDynamicGrids");
static_assert(sizeof(BRChatCommandLibrary_DynamicGrids_DestroyAllDynamicGrids) == 0x000010, "Wrong size on BRChatCommandLibrary_DynamicGrids_DestroyAllDynamicGrids");
static_assert(offsetof(BRChatCommandLibrary_DynamicGrids_DestroyAllDynamicGrids, Context) == 0x000000, "Member 'BRChatCommandLibrary_DynamicGrids_DestroyAllDynamicGrids::Context' has a wrong offset!");

// Function Brickadia.BRColorSelectorColorsWidget.HandleServerColorsChanged
// 0x0008 (0x0008 - 0x0000)
struct BRColorSelectorColorsWidget_HandleServerColorsChanged final
{
public:
	class UBRGameSettingsBase*                    SettingsObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSelectorColorsWidget_HandleServerColorsChanged) == 0x000008, "Wrong alignment on BRColorSelectorColorsWidget_HandleServerColorsChanged");
static_assert(sizeof(BRColorSelectorColorsWidget_HandleServerColorsChanged) == 0x000008, "Wrong size on BRColorSelectorColorsWidget_HandleServerColorsChanged");
static_assert(offsetof(BRColorSelectorColorsWidget_HandleServerColorsChanged, SettingsObject) == 0x000000, "Member 'BRColorSelectorColorsWidget_HandleServerColorsChanged::SettingsObject' has a wrong offset!");

// Function Brickadia.BRColorSelectorMaterialsWidget.HandleMaterialAlphaChanged
// 0x0004 (0x0004 - 0x0000)
struct BRColorSelectorMaterialsWidget_HandleMaterialAlphaChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSelectorMaterialsWidget_HandleMaterialAlphaChanged) == 0x000004, "Wrong alignment on BRColorSelectorMaterialsWidget_HandleMaterialAlphaChanged");
static_assert(sizeof(BRColorSelectorMaterialsWidget_HandleMaterialAlphaChanged) == 0x000004, "Wrong size on BRColorSelectorMaterialsWidget_HandleMaterialAlphaChanged");
static_assert(offsetof(BRColorSelectorMaterialsWidget_HandleMaterialAlphaChanged, Value) == 0x000000, "Member 'BRColorSelectorMaterialsWidget_HandleMaterialAlphaChanged::Value' has a wrong offset!");

// Function Brickadia.BRColorSelectorWidget.HandleColorSelectionStateUpdated
// 0x0004 (0x0004 - 0x0000)
struct BRColorSelectorWidget_HandleColorSelectionStateUpdated final
{
public:
	struct FColor                                 NewState;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSelectorWidget_HandleColorSelectionStateUpdated) == 0x000004, "Wrong alignment on BRColorSelectorWidget_HandleColorSelectionStateUpdated");
static_assert(sizeof(BRColorSelectorWidget_HandleColorSelectionStateUpdated) == 0x000004, "Wrong size on BRColorSelectorWidget_HandleColorSelectionStateUpdated");
static_assert(offsetof(BRColorSelectorWidget_HandleColorSelectionStateUpdated, NewState) == 0x000000, "Member 'BRColorSelectorWidget_HandleColorSelectionStateUpdated::NewState' has a wrong offset!");

// Function Brickadia.BRColorSelectorWidget.HandleMaterialSelectionStateUpdated
// 0x0008 (0x0008 - 0x0000)
struct BRColorSelectorWidget_HandleMaterialSelectionStateUpdated final
{
public:
	int32                                         MaterialIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaterialAlpha;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRColorSelectorWidget_HandleMaterialSelectionStateUpdated) == 0x000004, "Wrong alignment on BRColorSelectorWidget_HandleMaterialSelectionStateUpdated");
static_assert(sizeof(BRColorSelectorWidget_HandleMaterialSelectionStateUpdated) == 0x000008, "Wrong size on BRColorSelectorWidget_HandleMaterialSelectionStateUpdated");
static_assert(offsetof(BRColorSelectorWidget_HandleMaterialSelectionStateUpdated, MaterialIndex) == 0x000000, "Member 'BRColorSelectorWidget_HandleMaterialSelectionStateUpdated::MaterialIndex' has a wrong offset!");
static_assert(offsetof(BRColorSelectorWidget_HandleMaterialSelectionStateUpdated, MaterialAlpha) == 0x000004, "Member 'BRColorSelectorWidget_HandleMaterialSelectionStateUpdated::MaterialAlpha' has a wrong offset!");

// Function Brickadia.BRColorSelectorDialog.HandleSelectionStateUpdated
// 0x000C (0x000C - 0x0000)
struct BRColorSelectorDialog_HandleSelectionStateUpdated final
{
public:
	struct FBRColorSelectionState                 SelectionState;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSelectorDialog_HandleSelectionStateUpdated) == 0x000004, "Wrong alignment on BRColorSelectorDialog_HandleSelectionStateUpdated");
static_assert(sizeof(BRColorSelectorDialog_HandleSelectionStateUpdated) == 0x00000C, "Wrong size on BRColorSelectorDialog_HandleSelectionStateUpdated");
static_assert(offsetof(BRColorSelectorDialog_HandleSelectionStateUpdated, SelectionState) == 0x000000, "Member 'BRColorSelectorDialog_HandleSelectionStateUpdated::SelectionState' has a wrong offset!");

// Function Brickadia.BRPaletteToolWidget.OnColorSelectionStateUpdated
// 0x000C (0x000C - 0x0000)
struct BRPaletteToolWidget_OnColorSelectionStateUpdated final
{
public:
	struct FBRColorSelectionState                 NewState;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPaletteToolWidget_OnColorSelectionStateUpdated) == 0x000004, "Wrong alignment on BRPaletteToolWidget_OnColorSelectionStateUpdated");
static_assert(sizeof(BRPaletteToolWidget_OnColorSelectionStateUpdated) == 0x00000C, "Wrong size on BRPaletteToolWidget_OnColorSelectionStateUpdated");
static_assert(offsetof(BRPaletteToolWidget_OnColorSelectionStateUpdated, NewState) == 0x000000, "Member 'BRPaletteToolWidget_OnColorSelectionStateUpdated::NewState' has a wrong offset!");

// Function Brickadia.BRItemBase.PauseAnimMontage
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_PauseAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_PauseAnimMontage) == 0x000008, "Wrong alignment on BRItemBase_PauseAnimMontage");
static_assert(sizeof(BRItemBase_PauseAnimMontage) == 0x000008, "Wrong size on BRItemBase_PauseAnimMontage");
static_assert(offsetof(BRItemBase_PauseAnimMontage, AnimMontage) == 0x000000, "Member 'BRItemBase_PauseAnimMontage::AnimMontage' has a wrong offset!");

// Function Brickadia.BRItemBase.PlayAnimMontage
// 0x0010 (0x0010 - 0x0000)
struct BRItemBase_PlayAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_PlayAnimMontage) == 0x000008, "Wrong alignment on BRItemBase_PlayAnimMontage");
static_assert(sizeof(BRItemBase_PlayAnimMontage) == 0x000010, "Wrong size on BRItemBase_PlayAnimMontage");
static_assert(offsetof(BRItemBase_PlayAnimMontage, AnimMontage) == 0x000000, "Member 'BRItemBase_PlayAnimMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(BRItemBase_PlayAnimMontage, Rate) == 0x000008, "Member 'BRItemBase_PlayAnimMontage::Rate' has a wrong offset!");
static_assert(offsetof(BRItemBase_PlayAnimMontage, StartTime) == 0x00000C, "Member 'BRItemBase_PlayAnimMontage::StartTime' has a wrong offset!");

// Function Brickadia.BRItemBase.ResumeAnimMontage
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_ResumeAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_ResumeAnimMontage) == 0x000008, "Wrong alignment on BRItemBase_ResumeAnimMontage");
static_assert(sizeof(BRItemBase_ResumeAnimMontage) == 0x000008, "Wrong size on BRItemBase_ResumeAnimMontage");
static_assert(offsetof(BRItemBase_ResumeAnimMontage, AnimMontage) == 0x000000, "Member 'BRItemBase_ResumeAnimMontage::AnimMontage' has a wrong offset!");

// Function Brickadia.BRItemBase.SetMeshColor
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_SetMeshColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_SetMeshColor) == 0x000004, "Wrong alignment on BRItemBase_SetMeshColor");
static_assert(sizeof(BRItemBase_SetMeshColor) == 0x000008, "Wrong size on BRItemBase_SetMeshColor");
static_assert(offsetof(BRItemBase_SetMeshColor, Index_0) == 0x000000, "Member 'BRItemBase_SetMeshColor::Index_0' has a wrong offset!");
static_assert(offsetof(BRItemBase_SetMeshColor, Value) == 0x000004, "Member 'BRItemBase_SetMeshColor::Value' has a wrong offset!");

// Function Brickadia.BRItemBase.StopAnimMontageImmediately
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_StopAnimMontageImmediately final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_StopAnimMontageImmediately) == 0x000008, "Wrong alignment on BRItemBase_StopAnimMontageImmediately");
static_assert(sizeof(BRItemBase_StopAnimMontageImmediately) == 0x000008, "Wrong size on BRItemBase_StopAnimMontageImmediately");
static_assert(offsetof(BRItemBase_StopAnimMontageImmediately, AnimMontage) == 0x000000, "Member 'BRItemBase_StopAnimMontageImmediately::AnimMontage' has a wrong offset!");

// Function Brickadia.BRItemBase.CanWield
// 0x0010 (0x0010 - 0x0000)
struct BRItemBase_CanWield final
{
public:
	class ABRCharacter*                           WielderIn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstCheck;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRItemBase_CanWield) == 0x000008, "Wrong alignment on BRItemBase_CanWield");
static_assert(sizeof(BRItemBase_CanWield) == 0x000010, "Wrong size on BRItemBase_CanWield");
static_assert(offsetof(BRItemBase_CanWield, WielderIn) == 0x000000, "Member 'BRItemBase_CanWield::WielderIn' has a wrong offset!");
static_assert(offsetof(BRItemBase_CanWield, bFirstCheck) == 0x000008, "Member 'BRItemBase_CanWield::bFirstCheck' has a wrong offset!");
static_assert(offsetof(BRItemBase_CanWield, ReturnValue) == 0x000009, "Member 'BRItemBase_CanWield::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.GetFireAtLocation
// 0x0038 (0x0038 - 0x0000)
struct BRItemBase_GetFireAtLocation final
{
public:
	struct FVector                                PointOnStartPlane;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_GetFireAtLocation) == 0x000008, "Wrong alignment on BRItemBase_GetFireAtLocation");
static_assert(sizeof(BRItemBase_GetFireAtLocation) == 0x000038, "Wrong size on BRItemBase_GetFireAtLocation");
static_assert(offsetof(BRItemBase_GetFireAtLocation, PointOnStartPlane) == 0x000000, "Member 'BRItemBase_GetFireAtLocation::PointOnStartPlane' has a wrong offset!");
static_assert(offsetof(BRItemBase_GetFireAtLocation, Radius) == 0x000018, "Member 'BRItemBase_GetFireAtLocation::Radius' has a wrong offset!");
static_assert(offsetof(BRItemBase_GetFireAtLocation, ReturnValue) == 0x000020, "Member 'BRItemBase_GetFireAtLocation::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.GetMeshColor
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_GetMeshColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_GetMeshColor) == 0x000004, "Wrong alignment on BRItemBase_GetMeshColor");
static_assert(sizeof(BRItemBase_GetMeshColor) == 0x000008, "Wrong size on BRItemBase_GetMeshColor");
static_assert(offsetof(BRItemBase_GetMeshColor, Index_0) == 0x000000, "Member 'BRItemBase_GetMeshColor::Index_0' has a wrong offset!");
static_assert(offsetof(BRItemBase_GetMeshColor, ReturnValue) == 0x000004, "Member 'BRItemBase_GetMeshColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.GetMuzzleLocationLocalSpace
// 0x0020 (0x0020 - 0x0000)
struct BRItemBase_GetMuzzleLocationLocalSpace final
{
public:
	class FName                                   MuzzleSocket;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_GetMuzzleLocationLocalSpace) == 0x000008, "Wrong alignment on BRItemBase_GetMuzzleLocationLocalSpace");
static_assert(sizeof(BRItemBase_GetMuzzleLocationLocalSpace) == 0x000020, "Wrong size on BRItemBase_GetMuzzleLocationLocalSpace");
static_assert(offsetof(BRItemBase_GetMuzzleLocationLocalSpace, MuzzleSocket) == 0x000000, "Member 'BRItemBase_GetMuzzleLocationLocalSpace::MuzzleSocket' has a wrong offset!");
static_assert(offsetof(BRItemBase_GetMuzzleLocationLocalSpace, ReturnValue) == 0x000008, "Member 'BRItemBase_GetMuzzleLocationLocalSpace::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.GetMuzzleLocationWorldSpace
// 0x0020 (0x0020 - 0x0000)
struct BRItemBase_GetMuzzleLocationWorldSpace final
{
public:
	class FName                                   MuzzleSocket;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_GetMuzzleLocationWorldSpace) == 0x000008, "Wrong alignment on BRItemBase_GetMuzzleLocationWorldSpace");
static_assert(sizeof(BRItemBase_GetMuzzleLocationWorldSpace) == 0x000020, "Wrong size on BRItemBase_GetMuzzleLocationWorldSpace");
static_assert(offsetof(BRItemBase_GetMuzzleLocationWorldSpace, MuzzleSocket) == 0x000000, "Member 'BRItemBase_GetMuzzleLocationWorldSpace::MuzzleSocket' has a wrong offset!");
static_assert(offsetof(BRItemBase_GetMuzzleLocationWorldSpace, ReturnValue) == 0x000008, "Member 'BRItemBase_GetMuzzleLocationWorldSpace::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.GetOwnerBRPlayerController
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_GetOwnerBRPlayerController final
{
public:
	class ABRPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_GetOwnerBRPlayerController) == 0x000008, "Wrong alignment on BRItemBase_GetOwnerBRPlayerController");
static_assert(sizeof(BRItemBase_GetOwnerBRPlayerController) == 0x000008, "Wrong size on BRItemBase_GetOwnerBRPlayerController");
static_assert(offsetof(BRItemBase_GetOwnerBRPlayerController, ReturnValue) == 0x000000, "Member 'BRItemBase_GetOwnerBRPlayerController::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.GetOwnerBRPlayerState
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_GetOwnerBRPlayerState final
{
public:
	class ABRPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_GetOwnerBRPlayerState) == 0x000008, "Wrong alignment on BRItemBase_GetOwnerBRPlayerState");
static_assert(sizeof(BRItemBase_GetOwnerBRPlayerState) == 0x000008, "Wrong size on BRItemBase_GetOwnerBRPlayerState");
static_assert(offsetof(BRItemBase_GetOwnerBRPlayerState, ReturnValue) == 0x000000, "Member 'BRItemBase_GetOwnerBRPlayerState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.GetOwnerController
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_GetOwnerController final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_GetOwnerController) == 0x000008, "Wrong alignment on BRItemBase_GetOwnerController");
static_assert(sizeof(BRItemBase_GetOwnerController) == 0x000008, "Wrong size on BRItemBase_GetOwnerController");
static_assert(offsetof(BRItemBase_GetOwnerController, ReturnValue) == 0x000000, "Member 'BRItemBase_GetOwnerController::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.GetOwningInventory
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_GetOwningInventory final
{
public:
	class UBRInventoryComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_GetOwningInventory) == 0x000008, "Wrong alignment on BRItemBase_GetOwningInventory");
static_assert(sizeof(BRItemBase_GetOwningInventory) == 0x000008, "Wrong size on BRItemBase_GetOwningInventory");
static_assert(offsetof(BRItemBase_GetOwningInventory, ReturnValue) == 0x000000, "Member 'BRItemBase_GetOwningInventory::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.GetOwningInventoryEntry
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_GetOwningInventoryEntry final
{
public:
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_GetOwningInventoryEntry) == 0x000008, "Wrong alignment on BRItemBase_GetOwningInventoryEntry");
static_assert(sizeof(BRItemBase_GetOwningInventoryEntry) == 0x000008, "Wrong size on BRItemBase_GetOwningInventoryEntry");
static_assert(offsetof(BRItemBase_GetOwningInventoryEntry, ReturnValue) == 0x000000, "Member 'BRItemBase_GetOwningInventoryEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.GetWielder
// 0x0008 (0x0008 - 0x0000)
struct BRItemBase_GetWielder final
{
public:
	class ABRCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_GetWielder) == 0x000008, "Wrong alignment on BRItemBase_GetWielder");
static_assert(sizeof(BRItemBase_GetWielder) == 0x000008, "Wrong size on BRItemBase_GetWielder");
static_assert(offsetof(BRItemBase_GetWielder, ReturnValue) == 0x000000, "Member 'BRItemBase_GetWielder::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.IsLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct BRItemBase_IsLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_IsLocallyControlled) == 0x000001, "Wrong alignment on BRItemBase_IsLocallyControlled");
static_assert(sizeof(BRItemBase_IsLocallyControlled) == 0x000001, "Wrong size on BRItemBase_IsLocallyControlled");
static_assert(offsetof(BRItemBase_IsLocallyControlled, ReturnValue) == 0x000000, "Member 'BRItemBase_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.IsPuttingAway
// 0x0001 (0x0001 - 0x0000)
struct BRItemBase_IsPuttingAway final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_IsPuttingAway) == 0x000001, "Wrong alignment on BRItemBase_IsPuttingAway");
static_assert(sizeof(BRItemBase_IsPuttingAway) == 0x000001, "Wrong size on BRItemBase_IsPuttingAway");
static_assert(offsetof(BRItemBase_IsPuttingAway, ReturnValue) == 0x000000, "Member 'BRItemBase_IsPuttingAway::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.IsTool
// 0x0001 (0x0001 - 0x0000)
struct BRItemBase_IsTool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_IsTool) == 0x000001, "Wrong alignment on BRItemBase_IsTool");
static_assert(sizeof(BRItemBase_IsTool) == 0x000001, "Wrong size on BRItemBase_IsTool");
static_assert(offsetof(BRItemBase_IsTool, ReturnValue) == 0x000000, "Member 'BRItemBase_IsTool::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.IsWielded
// 0x0001 (0x0001 - 0x0000)
struct BRItemBase_IsWielded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_IsWielded) == 0x000001, "Wrong alignment on BRItemBase_IsWielded");
static_assert(sizeof(BRItemBase_IsWielded) == 0x000001, "Wrong size on BRItemBase_IsWielded");
static_assert(offsetof(BRItemBase_IsWielded, ReturnValue) == 0x000000, "Member 'BRItemBase_IsWielded::ReturnValue' has a wrong offset!");

// Function Brickadia.BRItemBase.ShouldUseFireAtLocation
// 0x0001 (0x0001 - 0x0000)
struct BRItemBase_ShouldUseFireAtLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRItemBase_ShouldUseFireAtLocation) == 0x000001, "Wrong alignment on BRItemBase_ShouldUseFireAtLocation");
static_assert(sizeof(BRItemBase_ShouldUseFireAtLocation) == 0x000001, "Wrong size on BRItemBase_ShouldUseFireAtLocation");
static_assert(offsetof(BRItemBase_ShouldUseFireAtLocation, ReturnValue) == 0x000000, "Member 'BRItemBase_ShouldUseFireAtLocation::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.AddHighlightedActor
// 0x0008 (0x0008 - 0x0000)
struct BRToolBase_AddHighlightedActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_AddHighlightedActor) == 0x000008, "Wrong alignment on BRToolBase_AddHighlightedActor");
static_assert(sizeof(BRToolBase_AddHighlightedActor) == 0x000008, "Wrong size on BRToolBase_AddHighlightedActor");
static_assert(offsetof(BRToolBase_AddHighlightedActor, Actor) == 0x000000, "Member 'BRToolBase_AddHighlightedActor::Actor' has a wrong offset!");

// Function Brickadia.BRToolBase.AddHighlightedBrick
// 0x0008 (0x0008 - 0x0000)
struct BRToolBase_AddHighlightedBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_AddHighlightedBrick) == 0x000004, "Wrong alignment on BRToolBase_AddHighlightedBrick");
static_assert(sizeof(BRToolBase_AddHighlightedBrick) == 0x000008, "Wrong size on BRToolBase_AddHighlightedBrick");
static_assert(offsetof(BRToolBase_AddHighlightedBrick, BrickHandle) == 0x000000, "Member 'BRToolBase_AddHighlightedBrick::BrickHandle' has a wrong offset!");

// Function Brickadia.BRToolBase.GetControllerInputMode
// 0x0001 (0x0001 - 0x0000)
struct BRToolBase_GetControllerInputMode final
{
public:
	EControllerInputMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_GetControllerInputMode) == 0x000001, "Wrong alignment on BRToolBase_GetControllerInputMode");
static_assert(sizeof(BRToolBase_GetControllerInputMode) == 0x000001, "Wrong size on BRToolBase_GetControllerInputMode");
static_assert(offsetof(BRToolBase_GetControllerInputMode, ReturnValue) == 0x000000, "Member 'BRToolBase_GetControllerInputMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.RemoveHighlightedActor
// 0x0008 (0x0008 - 0x0000)
struct BRToolBase_RemoveHighlightedActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_RemoveHighlightedActor) == 0x000008, "Wrong alignment on BRToolBase_RemoveHighlightedActor");
static_assert(sizeof(BRToolBase_RemoveHighlightedActor) == 0x000008, "Wrong size on BRToolBase_RemoveHighlightedActor");
static_assert(offsetof(BRToolBase_RemoveHighlightedActor, Actor) == 0x000000, "Member 'BRToolBase_RemoveHighlightedActor::Actor' has a wrong offset!");

// Function Brickadia.BRToolBase.RemoveHighlightedBrick
// 0x0008 (0x0008 - 0x0000)
struct BRToolBase_RemoveHighlightedBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_RemoveHighlightedBrick) == 0x000004, "Wrong alignment on BRToolBase_RemoveHighlightedBrick");
static_assert(sizeof(BRToolBase_RemoveHighlightedBrick) == 0x000008, "Wrong size on BRToolBase_RemoveHighlightedBrick");
static_assert(offsetof(BRToolBase_RemoveHighlightedBrick, BrickHandle) == 0x000000, "Member 'BRToolBase_RemoveHighlightedBrick::BrickHandle' has a wrong offset!");

// Function Brickadia.BRToolBase.SetDeferToolBindVisibilityChanges
// 0x0001 (0x0001 - 0x0000)
struct BRToolBase_SetDeferToolBindVisibilityChanges final
{
public:
	bool                                          bNewDeferring;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_SetDeferToolBindVisibilityChanges) == 0x000001, "Wrong alignment on BRToolBase_SetDeferToolBindVisibilityChanges");
static_assert(sizeof(BRToolBase_SetDeferToolBindVisibilityChanges) == 0x000001, "Wrong size on BRToolBase_SetDeferToolBindVisibilityChanges");
static_assert(offsetof(BRToolBase_SetDeferToolBindVisibilityChanges, bNewDeferring) == 0x000000, "Member 'BRToolBase_SetDeferToolBindVisibilityChanges::bNewDeferring' has a wrong offset!");

// Function Brickadia.BRToolBase.SetHighlightSelectionLayers
// 0x0001 (0x0001 - 0x0000)
struct BRToolBase_SetHighlightSelectionLayers final
{
public:
	EBrickSelectionLayers                         NewSelectionLayers;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_SetHighlightSelectionLayers) == 0x000001, "Wrong alignment on BRToolBase_SetHighlightSelectionLayers");
static_assert(sizeof(BRToolBase_SetHighlightSelectionLayers) == 0x000001, "Wrong size on BRToolBase_SetHighlightSelectionLayers");
static_assert(offsetof(BRToolBase_SetHighlightSelectionLayers, NewSelectionLayers) == 0x000000, "Member 'BRToolBase_SetHighlightSelectionLayers::NewSelectionLayers' has a wrong offset!");

// Function Brickadia.BRToolBase.SetToolBindTagVisible
// 0x000C (0x000C - 0x0000)
struct BRToolBase_SetToolBindTagVisible final
{
public:
	class FName                                   BindInfoId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolBase_SetToolBindTagVisible) == 0x000004, "Wrong alignment on BRToolBase_SetToolBindTagVisible");
static_assert(sizeof(BRToolBase_SetToolBindTagVisible) == 0x00000C, "Wrong size on BRToolBase_SetToolBindTagVisible");
static_assert(offsetof(BRToolBase_SetToolBindTagVisible, BindInfoId) == 0x000000, "Member 'BRToolBase_SetToolBindTagVisible::BindInfoId' has a wrong offset!");
static_assert(offsetof(BRToolBase_SetToolBindTagVisible, bVisible) == 0x000008, "Member 'BRToolBase_SetToolBindTagVisible::bVisible' has a wrong offset!");

// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToAim
// 0x00F8 (0x00F8 - 0x0000)
struct BRToolBase_BP_LineTraceByChannelMuzzleToAim final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x00F0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraRay;                                     // 0x00F4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F5(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolBase_BP_LineTraceByChannelMuzzleToAim) == 0x000008, "Wrong alignment on BRToolBase_BP_LineTraceByChannelMuzzleToAim");
static_assert(sizeof(BRToolBase_BP_LineTraceByChannelMuzzleToAim) == 0x0000F8, "Wrong size on BRToolBase_BP_LineTraceByChannelMuzzleToAim");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToAim, HitResult) == 0x000000, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToAim::HitResult' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToAim, Distance) == 0x0000F0, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToAim::Distance' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToAim, bUseCameraRay) == 0x0000F4, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToAim::bUseCameraRay' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToAim, ReturnValue) == 0x0000F5, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToAim::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToAim_CustomChannel
// 0x0100 (0x0100 - 0x0000)
struct BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x00F0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x00F4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraRay;                                     // 0x00F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F9(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel) == 0x000008, "Wrong alignment on BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel");
static_assert(sizeof(BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel) == 0x000100, "Wrong size on BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel, HitResult) == 0x000000, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel::HitResult' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel, TraceChannel) == 0x0000F0, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel, Distance) == 0x0000F4, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel::Distance' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel, bUseCameraRay) == 0x0000F8, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel::bUseCameraRay' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel, ReturnValue) == 0x0000F9, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToCursor
// 0x00F8 (0x00F8 - 0x0000)
struct BRToolBase_BP_LineTraceByChannelMuzzleToCursor final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x00F0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraRay;                                     // 0x00F4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F5(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor) == 0x000008, "Wrong alignment on BRToolBase_BP_LineTraceByChannelMuzzleToCursor");
static_assert(sizeof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor) == 0x0000F8, "Wrong size on BRToolBase_BP_LineTraceByChannelMuzzleToCursor");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor, HitResult) == 0x000000, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToCursor::HitResult' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor, Distance) == 0x0000F0, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToCursor::Distance' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor, bUseCameraRay) == 0x0000F4, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToCursor::bUseCameraRay' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor, ReturnValue) == 0x0000F5, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToCursor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToCursor_CustomChannel
// 0x0100 (0x0100 - 0x0000)
struct BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x00F0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x00F4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraRay;                                     // 0x00F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F9(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel) == 0x000008, "Wrong alignment on BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel");
static_assert(sizeof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel) == 0x000100, "Wrong size on BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel, HitResult) == 0x000000, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel::HitResult' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel, TraceChannel) == 0x0000F0, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel, Distance) == 0x0000F4, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel::Distance' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel, bUseCameraRay) == 0x0000F8, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel::bUseCameraRay' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel, ReturnValue) == 0x0000F9, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToScreenCenter
// 0x00F8 (0x00F8 - 0x0000)
struct BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x00F0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraRay;                                     // 0x00F4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F5(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter) == 0x000008, "Wrong alignment on BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter");
static_assert(sizeof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter) == 0x0000F8, "Wrong size on BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter, HitResult) == 0x000000, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter::HitResult' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter, Distance) == 0x0000F0, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter::Distance' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter, bUseCameraRay) == 0x0000F4, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter::bUseCameraRay' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter, ReturnValue) == 0x0000F5, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel
// 0x0100 (0x0100 - 0x0000)
struct BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x00F0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x00F4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraRay;                                     // 0x00F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F9(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel) == 0x000008, "Wrong alignment on BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel");
static_assert(sizeof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel) == 0x000100, "Wrong size on BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel, HitResult) == 0x000000, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel::HitResult' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel, TraceChannel) == 0x0000F0, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel, Distance) == 0x0000F4, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel::Distance' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel, bUseCameraRay) == 0x0000F8, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel::bUseCameraRay' has a wrong offset!");
static_assert(offsetof(BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel, ReturnValue) == 0x0000F9, "Member 'BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.GetAimRay
// 0x0038 (0x0038 - 0x0000)
struct BRToolBase_GetAimRay final
{
public:
	struct FRay                                   OutRay;                                            // 0x0000(0x0030)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolBase_GetAimRay) == 0x000008, "Wrong alignment on BRToolBase_GetAimRay");
static_assert(sizeof(BRToolBase_GetAimRay) == 0x000038, "Wrong size on BRToolBase_GetAimRay");
static_assert(offsetof(BRToolBase_GetAimRay, OutRay) == 0x000000, "Member 'BRToolBase_GetAimRay::OutRay' has a wrong offset!");
static_assert(offsetof(BRToolBase_GetAimRay, ReturnValue) == 0x000030, "Member 'BRToolBase_GetAimRay::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.GetBrickUnderCursor
// 0x0008 (0x0008 - 0x0000)
struct BRToolBase_GetBrickUnderCursor final
{
public:
	struct FBrickHandle                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_GetBrickUnderCursor) == 0x000004, "Wrong alignment on BRToolBase_GetBrickUnderCursor");
static_assert(sizeof(BRToolBase_GetBrickUnderCursor) == 0x000008, "Wrong size on BRToolBase_GetBrickUnderCursor");
static_assert(offsetof(BRToolBase_GetBrickUnderCursor, ReturnValue) == 0x000000, "Member 'BRToolBase_GetBrickUnderCursor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.GetCursorRay
// 0x0038 (0x0038 - 0x0000)
struct BRToolBase_GetCursorRay final
{
public:
	struct FRay                                   OutRay;                                            // 0x0000(0x0030)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolBase_GetCursorRay) == 0x000008, "Wrong alignment on BRToolBase_GetCursorRay");
static_assert(sizeof(BRToolBase_GetCursorRay) == 0x000038, "Wrong size on BRToolBase_GetCursorRay");
static_assert(offsetof(BRToolBase_GetCursorRay, OutRay) == 0x000000, "Member 'BRToolBase_GetCursorRay::OutRay' has a wrong offset!");
static_assert(offsetof(BRToolBase_GetCursorRay, ReturnValue) == 0x000030, "Member 'BRToolBase_GetCursorRay::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.GetScreenCenterRay
// 0x0038 (0x0038 - 0x0000)
struct BRToolBase_GetScreenCenterRay final
{
public:
	struct FRay                                   OutRay;                                            // 0x0000(0x0030)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolBase_GetScreenCenterRay) == 0x000008, "Wrong alignment on BRToolBase_GetScreenCenterRay");
static_assert(sizeof(BRToolBase_GetScreenCenterRay) == 0x000038, "Wrong size on BRToolBase_GetScreenCenterRay");
static_assert(offsetof(BRToolBase_GetScreenCenterRay, OutRay) == 0x000000, "Member 'BRToolBase_GetScreenCenterRay::OutRay' has a wrong offset!");
static_assert(offsetof(BRToolBase_GetScreenCenterRay, ReturnValue) == 0x000030, "Member 'BRToolBase_GetScreenCenterRay::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.GetToolCrosshairWidget
// 0x0008 (0x0008 - 0x0000)
struct BRToolBase_GetToolCrosshairWidget final
{
public:
	class UBRToolWidget*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_GetToolCrosshairWidget) == 0x000008, "Wrong alignment on BRToolBase_GetToolCrosshairWidget");
static_assert(sizeof(BRToolBase_GetToolCrosshairWidget) == 0x000008, "Wrong size on BRToolBase_GetToolCrosshairWidget");
static_assert(offsetof(BRToolBase_GetToolCrosshairWidget, ReturnValue) == 0x000000, "Member 'BRToolBase_GetToolCrosshairWidget::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.GetToolQuickbarWidget
// 0x0008 (0x0008 - 0x0000)
struct BRToolBase_GetToolQuickbarWidget final
{
public:
	class UBRToolWidget*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_GetToolQuickbarWidget) == 0x000008, "Wrong alignment on BRToolBase_GetToolQuickbarWidget");
static_assert(sizeof(BRToolBase_GetToolQuickbarWidget) == 0x000008, "Wrong size on BRToolBase_GetToolQuickbarWidget");
static_assert(offsetof(BRToolBase_GetToolQuickbarWidget, ReturnValue) == 0x000000, "Member 'BRToolBase_GetToolQuickbarWidget::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBase.GetToolWidget
// 0x0008 (0x0008 - 0x0000)
struct BRToolBase_GetToolWidget final
{
public:
	class UBRToolWidget*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBase_GetToolWidget) == 0x000008, "Wrong alignment on BRToolBase_GetToolWidget");
static_assert(sizeof(BRToolBase_GetToolWidget) == 0x000008, "Wrong size on BRToolBase_GetToolWidget");
static_assert(offsetof(BRToolBase_GetToolWidget, ReturnValue) == 0x000000, "Member 'BRToolBase_GetToolWidget::ReturnValue' has a wrong offset!");

// Function Brickadia.BRConnectorPortSelectDialog.HandleNarrowSearchTextChanged
// 0x0010 (0x0010 - 0x0000)
struct BRConnectorPortSelectDialog_HandleNarrowSearchTextChanged final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRConnectorPortSelectDialog_HandleNarrowSearchTextChanged) == 0x000008, "Wrong alignment on BRConnectorPortSelectDialog_HandleNarrowSearchTextChanged");
static_assert(sizeof(BRConnectorPortSelectDialog_HandleNarrowSearchTextChanged) == 0x000010, "Wrong size on BRConnectorPortSelectDialog_HandleNarrowSearchTextChanged");
static_assert(offsetof(BRConnectorPortSelectDialog_HandleNarrowSearchTextChanged, NewText) == 0x000000, "Member 'BRConnectorPortSelectDialog_HandleNarrowSearchTextChanged::NewText' has a wrong offset!");

// Function Brickadia.BRConnectorPortSelectDialog.HandleNarrowSearchTextCommitted
// 0x0018 (0x0018 - 0x0000)
struct BRConnectorPortSelectDialog_HandleNarrowSearchTextCommitted final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRConnectorPortSelectDialog_HandleNarrowSearchTextCommitted) == 0x000008, "Wrong alignment on BRConnectorPortSelectDialog_HandleNarrowSearchTextCommitted");
static_assert(sizeof(BRConnectorPortSelectDialog_HandleNarrowSearchTextCommitted) == 0x000018, "Wrong size on BRConnectorPortSelectDialog_HandleNarrowSearchTextCommitted");
static_assert(offsetof(BRConnectorPortSelectDialog_HandleNarrowSearchTextCommitted, NewText) == 0x000000, "Member 'BRConnectorPortSelectDialog_HandleNarrowSearchTextCommitted::NewText' has a wrong offset!");
static_assert(offsetof(BRConnectorPortSelectDialog_HandleNarrowSearchTextCommitted, CommitMethod) == 0x000010, "Member 'BRConnectorPortSelectDialog_HandleNarrowSearchTextCommitted::CommitMethod' has a wrong offset!");

// Function Brickadia.BRColorPaletteToolBase.HandleServerColorsChanged
// 0x0008 (0x0008 - 0x0000)
struct BRColorPaletteToolBase_HandleServerColorsChanged final
{
public:
	class UBRGameSettingsBase*                    SettingsObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorPaletteToolBase_HandleServerColorsChanged) == 0x000008, "Wrong alignment on BRColorPaletteToolBase_HandleServerColorsChanged");
static_assert(sizeof(BRColorPaletteToolBase_HandleServerColorsChanged) == 0x000008, "Wrong size on BRColorPaletteToolBase_HandleServerColorsChanged");
static_assert(offsetof(BRColorPaletteToolBase_HandleServerColorsChanged, SettingsObject) == 0x000000, "Member 'BRColorPaletteToolBase_HandleServerColorsChanged::SettingsObject' has a wrong offset!");

// Function Brickadia.BRColorPaletteToolBase.SetColorSelectionState
// 0x000C (0x000C - 0x0000)
struct BRColorPaletteToolBase_SetColorSelectionState final
{
public:
	struct FBRColorSelectionState                 SelectionState;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorPaletteToolBase_SetColorSelectionState) == 0x000004, "Wrong alignment on BRColorPaletteToolBase_SetColorSelectionState");
static_assert(sizeof(BRColorPaletteToolBase_SetColorSelectionState) == 0x00000C, "Wrong size on BRColorPaletteToolBase_SetColorSelectionState");
static_assert(offsetof(BRColorPaletteToolBase_SetColorSelectionState, SelectionState) == 0x000000, "Member 'BRColorPaletteToolBase_SetColorSelectionState::SelectionState' has a wrong offset!");

// Function Brickadia.BRColorPaletteToolBase.GetColorSelectionState
// 0x000C (0x000C - 0x0000)
struct BRColorPaletteToolBase_GetColorSelectionState final
{
public:
	struct FBRColorSelectionState                 ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorPaletteToolBase_GetColorSelectionState) == 0x000004, "Wrong alignment on BRColorPaletteToolBase_GetColorSelectionState");
static_assert(sizeof(BRColorPaletteToolBase_GetColorSelectionState) == 0x00000C, "Wrong size on BRColorPaletteToolBase_GetColorSelectionState");
static_assert(offsetof(BRColorPaletteToolBase_GetColorSelectionState, ReturnValue) == 0x000000, "Member 'BRColorPaletteToolBase_GetColorSelectionState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorStatics.BrickColorDistance
// 0x000C (0x000C - 0x0000)
struct BRColorStatics_BrickColorDistance final
{
public:
	struct FColor                                 Color1;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color2;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorStatics_BrickColorDistance) == 0x000004, "Wrong alignment on BRColorStatics_BrickColorDistance");
static_assert(sizeof(BRColorStatics_BrickColorDistance) == 0x00000C, "Wrong size on BRColorStatics_BrickColorDistance");
static_assert(offsetof(BRColorStatics_BrickColorDistance, Color1) == 0x000000, "Member 'BRColorStatics_BrickColorDistance::Color1' has a wrong offset!");
static_assert(offsetof(BRColorStatics_BrickColorDistance, Color2) == 0x000004, "Member 'BRColorStatics_BrickColorDistance::Color2' has a wrong offset!");
static_assert(offsetof(BRColorStatics_BrickColorDistance, ReturnValue) == 0x000008, "Member 'BRColorStatics_BrickColorDistance::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorStatics.ConvertFromOklab
// 0x0020 (0x0020 - 0x0000)
struct BRColorStatics_ConvertFromOklab final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorStatics_ConvertFromOklab) == 0x000004, "Wrong alignment on BRColorStatics_ConvertFromOklab");
static_assert(sizeof(BRColorStatics_ConvertFromOklab) == 0x000020, "Wrong size on BRColorStatics_ConvertFromOklab");
static_assert(offsetof(BRColorStatics_ConvertFromOklab, Color) == 0x000000, "Member 'BRColorStatics_ConvertFromOklab::Color' has a wrong offset!");
static_assert(offsetof(BRColorStatics_ConvertFromOklab, ReturnValue) == 0x000010, "Member 'BRColorStatics_ConvertFromOklab::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorStatics.ConvertToOklab
// 0x0020 (0x0020 - 0x0000)
struct BRColorStatics_ConvertToOklab final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorStatics_ConvertToOklab) == 0x000004, "Wrong alignment on BRColorStatics_ConvertToOklab");
static_assert(sizeof(BRColorStatics_ConvertToOklab) == 0x000020, "Wrong size on BRColorStatics_ConvertToOklab");
static_assert(offsetof(BRColorStatics_ConvertToOklab, Color) == 0x000000, "Member 'BRColorStatics_ConvertToOklab::Color' has a wrong offset!");
static_assert(offsetof(BRColorStatics_ConvertToOklab, ReturnValue) == 0x000010, "Member 'BRColorStatics_ConvertToOklab::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorPalette.GetMaxGroupNameLength
// 0x0004 (0x0004 - 0x0000)
struct BRColorPalette_GetMaxGroupNameLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorPalette_GetMaxGroupNameLength) == 0x000004, "Wrong alignment on BRColorPalette_GetMaxGroupNameLength");
static_assert(sizeof(BRColorPalette_GetMaxGroupNameLength) == 0x000004, "Wrong size on BRColorPalette_GetMaxGroupNameLength");
static_assert(offsetof(BRColorPalette_GetMaxGroupNameLength, ReturnValue) == 0x000000, "Member 'BRColorPalette_GetMaxGroupNameLength::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorPalette.SetData
// 0x0020 (0x0020 - 0x0000)
struct BRColorPalette_SetData final
{
public:
	struct FBRColorPaletteData                    InData;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorPalette_SetData) == 0x000008, "Wrong alignment on BRColorPalette_SetData");
static_assert(sizeof(BRColorPalette_SetData) == 0x000020, "Wrong size on BRColorPalette_SetData");
static_assert(offsetof(BRColorPalette_SetData, InData) == 0x000000, "Member 'BRColorPalette_SetData::InData' has a wrong offset!");

// Function Brickadia.BRColorPalette.GetAllColors
// 0x0010 (0x0010 - 0x0000)
struct BRColorPalette_GetAllColors final
{
public:
	TArray<struct FColor>                         OutColors;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorPalette_GetAllColors) == 0x000008, "Wrong alignment on BRColorPalette_GetAllColors");
static_assert(sizeof(BRColorPalette_GetAllColors) == 0x000010, "Wrong size on BRColorPalette_GetAllColors");
static_assert(offsetof(BRColorPalette_GetAllColors, OutColors) == 0x000000, "Member 'BRColorPalette_GetAllColors::OutColors' has a wrong offset!");

// Function Brickadia.BRColorPalette.GetClosestColor
// 0x0008 (0x0008 - 0x0000)
struct BRColorPalette_GetClosestColor final
{
public:
	struct FColor                                 Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorPalette_GetClosestColor) == 0x000004, "Wrong alignment on BRColorPalette_GetClosestColor");
static_assert(sizeof(BRColorPalette_GetClosestColor) == 0x000008, "Wrong size on BRColorPalette_GetClosestColor");
static_assert(offsetof(BRColorPalette_GetClosestColor, Input) == 0x000000, "Member 'BRColorPalette_GetClosestColor::Input' has a wrong offset!");
static_assert(offsetof(BRColorPalette_GetClosestColor, ReturnValue) == 0x000004, "Member 'BRColorPalette_GetClosestColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorSubsystem.FixColorPaletteAlpha
// 0x0010 (0x0010 - 0x0000)
struct BRColorSubsystem_FixColorPaletteAlpha final
{
public:
	class UBRColorPalette*                        Palette;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRColorSubsystem_FixColorPaletteAlpha) == 0x000008, "Wrong alignment on BRColorSubsystem_FixColorPaletteAlpha");
static_assert(sizeof(BRColorSubsystem_FixColorPaletteAlpha) == 0x000010, "Wrong size on BRColorSubsystem_FixColorPaletteAlpha");
static_assert(offsetof(BRColorSubsystem_FixColorPaletteAlpha, Palette) == 0x000000, "Member 'BRColorSubsystem_FixColorPaletteAlpha::Palette' has a wrong offset!");
static_assert(offsetof(BRColorSubsystem_FixColorPaletteAlpha, ReturnValue) == 0x000008, "Member 'BRColorSubsystem_FixColorPaletteAlpha::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorSubsystem.ForceFixColorPalette
// 0x0008 (0x0008 - 0x0000)
struct BRColorSubsystem_ForceFixColorPalette final
{
public:
	class UBRColorPalette*                        Palette;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSubsystem_ForceFixColorPalette) == 0x000008, "Wrong alignment on BRColorSubsystem_ForceFixColorPalette");
static_assert(sizeof(BRColorSubsystem_ForceFixColorPalette) == 0x000008, "Wrong size on BRColorSubsystem_ForceFixColorPalette");
static_assert(offsetof(BRColorSubsystem_ForceFixColorPalette, Palette) == 0x000000, "Member 'BRColorSubsystem_ForceFixColorPalette::Palette' has a wrong offset!");

// Function Brickadia.BRColorSubsystem.GetColorPaletteList
// 0x0010 (0x0010 - 0x0000)
struct BRColorSubsystem_GetColorPaletteList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSubsystem_GetColorPaletteList) == 0x000008, "Wrong alignment on BRColorSubsystem_GetColorPaletteList");
static_assert(sizeof(BRColorSubsystem_GetColorPaletteList) == 0x000010, "Wrong size on BRColorSubsystem_GetColorPaletteList");
static_assert(offsetof(BRColorSubsystem_GetColorPaletteList, ReturnValue) == 0x000000, "Member 'BRColorSubsystem_GetColorPaletteList::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorSubsystem.GetDefaultColorPalette
// 0x0008 (0x0008 - 0x0000)
struct BRColorSubsystem_GetDefaultColorPalette final
{
public:
	class UBRColorPalette*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSubsystem_GetDefaultColorPalette) == 0x000008, "Wrong alignment on BRColorSubsystem_GetDefaultColorPalette");
static_assert(sizeof(BRColorSubsystem_GetDefaultColorPalette) == 0x000008, "Wrong size on BRColorSubsystem_GetDefaultColorPalette");
static_assert(offsetof(BRColorSubsystem_GetDefaultColorPalette, ReturnValue) == 0x000000, "Member 'BRColorSubsystem_GetDefaultColorPalette::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorSubsystem.GetMaxGroups
// 0x0004 (0x0004 - 0x0000)
struct BRColorSubsystem_GetMaxGroups final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSubsystem_GetMaxGroups) == 0x000004, "Wrong alignment on BRColorSubsystem_GetMaxGroups");
static_assert(sizeof(BRColorSubsystem_GetMaxGroups) == 0x000004, "Wrong size on BRColorSubsystem_GetMaxGroups");
static_assert(offsetof(BRColorSubsystem_GetMaxGroups, ReturnValue) == 0x000000, "Member 'BRColorSubsystem_GetMaxGroups::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorSubsystem.GetMaxRows
// 0x0004 (0x0004 - 0x0000)
struct BRColorSubsystem_GetMaxRows final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSubsystem_GetMaxRows) == 0x000004, "Wrong alignment on BRColorSubsystem_GetMaxRows");
static_assert(sizeof(BRColorSubsystem_GetMaxRows) == 0x000004, "Wrong size on BRColorSubsystem_GetMaxRows");
static_assert(offsetof(BRColorSubsystem_GetMaxRows, ReturnValue) == 0x000000, "Member 'BRColorSubsystem_GetMaxRows::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorSubsystem.IsValidColorPalette
// 0x0028 (0x0028 - 0x0000)
struct BRColorSubsystem_IsValidColorPalette final
{
public:
	struct FBRColorPaletteData                    PaletteData;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRColorSubsystem_IsValidColorPalette) == 0x000008, "Wrong alignment on BRColorSubsystem_IsValidColorPalette");
static_assert(sizeof(BRColorSubsystem_IsValidColorPalette) == 0x000028, "Wrong size on BRColorSubsystem_IsValidColorPalette");
static_assert(offsetof(BRColorSubsystem_IsValidColorPalette, PaletteData) == 0x000000, "Member 'BRColorSubsystem_IsValidColorPalette::PaletteData' has a wrong offset!");
static_assert(offsetof(BRColorSubsystem_IsValidColorPalette, ReturnValue) == 0x000020, "Member 'BRColorSubsystem_IsValidColorPalette::ReturnValue' has a wrong offset!");

// Function Brickadia.BRColorSubsystem.SaveColorPalette
// 0x0020 (0x0020 - 0x0000)
struct BRColorSubsystem_SaveColorPalette final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRColorPalette*                        Palette;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSubsystem_SaveColorPalette) == 0x000008, "Wrong alignment on BRColorSubsystem_SaveColorPalette");
static_assert(sizeof(BRColorSubsystem_SaveColorPalette) == 0x000020, "Wrong size on BRColorSubsystem_SaveColorPalette");
static_assert(offsetof(BRColorSubsystem_SaveColorPalette, WorldContext) == 0x000000, "Member 'BRColorSubsystem_SaveColorPalette::WorldContext' has a wrong offset!");
static_assert(offsetof(BRColorSubsystem_SaveColorPalette, Name_0) == 0x000008, "Member 'BRColorSubsystem_SaveColorPalette::Name_0' has a wrong offset!");
static_assert(offsetof(BRColorSubsystem_SaveColorPalette, Palette) == 0x000018, "Member 'BRColorSubsystem_SaveColorPalette::Palette' has a wrong offset!");

// Function Brickadia.BRColorSubsystem.TryLoadColorPalette
// 0x0020 (0x0020 - 0x0000)
struct BRColorSubsystem_TryLoadColorPalette final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRColorPalette*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRColorSubsystem_TryLoadColorPalette) == 0x000008, "Wrong alignment on BRColorSubsystem_TryLoadColorPalette");
static_assert(sizeof(BRColorSubsystem_TryLoadColorPalette) == 0x000020, "Wrong size on BRColorSubsystem_TryLoadColorPalette");
static_assert(offsetof(BRColorSubsystem_TryLoadColorPalette, WorldContext) == 0x000000, "Member 'BRColorSubsystem_TryLoadColorPalette::WorldContext' has a wrong offset!");
static_assert(offsetof(BRColorSubsystem_TryLoadColorPalette, Name_0) == 0x000008, "Member 'BRColorSubsystem_TryLoadColorPalette::Name_0' has a wrong offset!");
static_assert(offsetof(BRColorSubsystem_TryLoadColorPalette, ReturnValue) == 0x000018, "Member 'BRColorSubsystem_TryLoadColorPalette::ReturnValue' has a wrong offset!");

// Function Brickadia.BRConnectorComponentPortsWidget.ReceiveComponentDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BRConnectorComponentPortsWidget_ReceiveComponentDisplayName final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRConnectorComponentPortsWidget_ReceiveComponentDisplayName) == 0x000008, "Wrong alignment on BRConnectorComponentPortsWidget_ReceiveComponentDisplayName");
static_assert(sizeof(BRConnectorComponentPortsWidget_ReceiveComponentDisplayName) == 0x000010, "Wrong size on BRConnectorComponentPortsWidget_ReceiveComponentDisplayName");
static_assert(offsetof(BRConnectorComponentPortsWidget_ReceiveComponentDisplayName, DisplayName) == 0x000000, "Member 'BRConnectorComponentPortsWidget_ReceiveComponentDisplayName::DisplayName' has a wrong offset!");

// Function Brickadia.BRServerSettings_Color.AddServerPalette
// 0x0028 (0x0028 - 0x0000)
struct BRServerSettings_Color_AddServerPalette final
{
public:
	struct FBRColorPaletteData                    PaletteData;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettings_Color_AddServerPalette) == 0x000008, "Wrong alignment on BRServerSettings_Color_AddServerPalette");
static_assert(sizeof(BRServerSettings_Color_AddServerPalette) == 0x000028, "Wrong size on BRServerSettings_Color_AddServerPalette");
static_assert(offsetof(BRServerSettings_Color_AddServerPalette, PaletteData) == 0x000000, "Member 'BRServerSettings_Color_AddServerPalette::PaletteData' has a wrong offset!");
static_assert(offsetof(BRServerSettings_Color_AddServerPalette, ReturnValue) == 0x000020, "Member 'BRServerSettings_Color_AddServerPalette::ReturnValue' has a wrong offset!");

// Function Brickadia.BRServerSettings_Color.GetServerPalette
// 0x0010 (0x0010 - 0x0000)
struct BRServerSettings_Color_GetServerPalette final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRColorPalette*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettings_Color_GetServerPalette) == 0x000008, "Wrong alignment on BRServerSettings_Color_GetServerPalette");
static_assert(sizeof(BRServerSettings_Color_GetServerPalette) == 0x000010, "Wrong size on BRServerSettings_Color_GetServerPalette");
static_assert(offsetof(BRServerSettings_Color_GetServerPalette, Index_0) == 0x000000, "Member 'BRServerSettings_Color_GetServerPalette::Index_0' has a wrong offset!");
static_assert(offsetof(BRServerSettings_Color_GetServerPalette, ReturnValue) == 0x000008, "Member 'BRServerSettings_Color_GetServerPalette::ReturnValue' has a wrong offset!");

// Function Brickadia.BRServerSettings_Color.RemoveServerPalette
// 0x0008 (0x0008 - 0x0000)
struct BRServerSettings_Color_RemoveServerPalette final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettings_Color_RemoveServerPalette) == 0x000004, "Wrong alignment on BRServerSettings_Color_RemoveServerPalette");
static_assert(sizeof(BRServerSettings_Color_RemoveServerPalette) == 0x000008, "Wrong size on BRServerSettings_Color_RemoveServerPalette");
static_assert(offsetof(BRServerSettings_Color_RemoveServerPalette, ID) == 0x000000, "Member 'BRServerSettings_Color_RemoveServerPalette::ID' has a wrong offset!");
static_assert(offsetof(BRServerSettings_Color_RemoveServerPalette, ReturnValue) == 0x000004, "Member 'BRServerSettings_Color_RemoveServerPalette::ReturnValue' has a wrong offset!");

// Function Brickadia.BRServerSettings_Color.SetServerPalette
// 0x0028 (0x0028 - 0x0000)
struct BRServerSettings_Color_SetServerPalette final
{
public:
	struct FBRColorPaletteData                    PaletteData;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettings_Color_SetServerPalette) == 0x000008, "Wrong alignment on BRServerSettings_Color_SetServerPalette");
static_assert(sizeof(BRServerSettings_Color_SetServerPalette) == 0x000028, "Wrong size on BRServerSettings_Color_SetServerPalette");
static_assert(offsetof(BRServerSettings_Color_SetServerPalette, PaletteData) == 0x000000, "Member 'BRServerSettings_Color_SetServerPalette::PaletteData' has a wrong offset!");
static_assert(offsetof(BRServerSettings_Color_SetServerPalette, Index_0) == 0x000020, "Member 'BRServerSettings_Color_SetServerPalette::Index_0' has a wrong offset!");
static_assert(offsetof(BRServerSettings_Color_SetServerPalette, ReturnValue) == 0x000024, "Member 'BRServerSettings_Color_SetServerPalette::ReturnValue' has a wrong offset!");

// Function Brickadia.BRServerSettings_Color.GetClosestServerColor
// 0x0008 (0x0008 - 0x0000)
struct BRServerSettings_Color_GetClosestServerColor final
{
public:
	struct FColor                                 Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettings_Color_GetClosestServerColor) == 0x000004, "Wrong alignment on BRServerSettings_Color_GetClosestServerColor");
static_assert(sizeof(BRServerSettings_Color_GetClosestServerColor) == 0x000008, "Wrong size on BRServerSettings_Color_GetClosestServerColor");
static_assert(offsetof(BRServerSettings_Color_GetClosestServerColor, Input) == 0x000000, "Member 'BRServerSettings_Color_GetClosestServerColor::Input' has a wrong offset!");
static_assert(offsetof(BRServerSettings_Color_GetClosestServerColor, ReturnValue) == 0x000004, "Member 'BRServerSettings_Color_GetClosestServerColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRServerSettings_Color.GetColorList
// 0x0010 (0x0010 - 0x0000)
struct BRServerSettings_Color_GetColorList final
{
public:
	TArray<struct FColor>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettings_Color_GetColorList) == 0x000008, "Wrong alignment on BRServerSettings_Color_GetColorList");
static_assert(sizeof(BRServerSettings_Color_GetColorList) == 0x000010, "Wrong size on BRServerSettings_Color_GetColorList");
static_assert(offsetof(BRServerSettings_Color_GetColorList, ReturnValue) == 0x000000, "Member 'BRServerSettings_Color_GetColorList::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlacerWidget.OnNewAlignmentMode
// 0x0008 (0x0008 - 0x0000)
struct BRPlacerWidget_OnNewAlignmentMode final
{
public:
	class UBRPlacerAlignmentModeBase*             NewAlignmentMode;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerWidget_OnNewAlignmentMode) == 0x000008, "Wrong alignment on BRPlacerWidget_OnNewAlignmentMode");
static_assert(sizeof(BRPlacerWidget_OnNewAlignmentMode) == 0x000008, "Wrong size on BRPlacerWidget_OnNewAlignmentMode");
static_assert(offsetof(BRPlacerWidget_OnNewAlignmentMode, NewAlignmentMode) == 0x000000, "Member 'BRPlacerWidget_OnNewAlignmentMode::NewAlignmentMode' has a wrong offset!");

// Function Brickadia.BRPlacerWidget.OnNewPlacementMode
// 0x0008 (0x0008 - 0x0000)
struct BRPlacerWidget_OnNewPlacementMode final
{
public:
	class UBRPlacerPlacementModeBase*             NewPlacementMode;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerWidget_OnNewPlacementMode) == 0x000008, "Wrong alignment on BRPlacerWidget_OnNewPlacementMode");
static_assert(sizeof(BRPlacerWidget_OnNewPlacementMode) == 0x000008, "Wrong size on BRPlacerWidget_OnNewPlacementMode");
static_assert(offsetof(BRPlacerWidget_OnNewPlacementMode, NewPlacementMode) == 0x000000, "Member 'BRPlacerWidget_OnNewPlacementMode::NewPlacementMode' has a wrong offset!");

// Function Brickadia.BRPlacerWidget.OnNewPlacingState
// 0x0001 (0x0001 - 0x0000)
struct BRPlacerWidget_OnNewPlacingState final
{
public:
	EBRPlacerPlacingState                         NewPlacingState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerWidget_OnNewPlacingState) == 0x000001, "Wrong alignment on BRPlacerWidget_OnNewPlacingState");
static_assert(sizeof(BRPlacerWidget_OnNewPlacingState) == 0x000001, "Wrong size on BRPlacerWidget_OnNewPlacingState");
static_assert(offsetof(BRPlacerWidget_OnNewPlacingState, NewPlacingState) == 0x000000, "Member 'BRPlacerWidget_OnNewPlacingState::NewPlacingState' has a wrong offset!");

// Function Brickadia.BRPlacerWidget.GetPlacer
// 0x0008 (0x0008 - 0x0000)
struct BRPlacerWidget_GetPlacer final
{
public:
	class ABRTool_Placer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerWidget_GetPlacer) == 0x000008, "Wrong alignment on BRPlacerWidget_GetPlacer");
static_assert(sizeof(BRPlacerWidget_GetPlacer) == 0x000008, "Wrong size on BRPlacerWidget_GetPlacer");
static_assert(offsetof(BRPlacerWidget_GetPlacer, ReturnValue) == 0x000000, "Member 'BRPlacerWidget_GetPlacer::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlacerStatusWidget.SetBrickName
// 0x0010 (0x0010 - 0x0000)
struct BRPlacerStatusWidget_SetBrickName final
{
public:
	class FText                                   NewBrickName;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerStatusWidget_SetBrickName) == 0x000008, "Wrong alignment on BRPlacerStatusWidget_SetBrickName");
static_assert(sizeof(BRPlacerStatusWidget_SetBrickName) == 0x000010, "Wrong size on BRPlacerStatusWidget_SetBrickName");
static_assert(offsetof(BRPlacerStatusWidget_SetBrickName, NewBrickName) == 0x000000, "Member 'BRPlacerStatusWidget_SetBrickName::NewBrickName' has a wrong offset!");

// Function Brickadia.BRPlacerStatusWidget.SetDragText
// 0x0010 (0x0010 - 0x0000)
struct BRPlacerStatusWidget_SetDragText final
{
public:
	class FText                                   NewSizeText;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerStatusWidget_SetDragText) == 0x000008, "Wrong alignment on BRPlacerStatusWidget_SetDragText");
static_assert(sizeof(BRPlacerStatusWidget_SetDragText) == 0x000010, "Wrong size on BRPlacerStatusWidget_SetDragText");
static_assert(offsetof(BRPlacerStatusWidget_SetDragText, NewSizeText) == 0x000000, "Member 'BRPlacerStatusWidget_SetDragText::NewSizeText' has a wrong offset!");

// Function Brickadia.BRPlacerStatusWidget.SetPlaceAsPhysicsAvailable
// 0x0001 (0x0001 - 0x0000)
struct BRPlacerStatusWidget_SetPlaceAsPhysicsAvailable final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerStatusWidget_SetPlaceAsPhysicsAvailable) == 0x000001, "Wrong alignment on BRPlacerStatusWidget_SetPlaceAsPhysicsAvailable");
static_assert(sizeof(BRPlacerStatusWidget_SetPlaceAsPhysicsAvailable) == 0x000001, "Wrong size on BRPlacerStatusWidget_SetPlaceAsPhysicsAvailable");
static_assert(offsetof(BRPlacerStatusWidget_SetPlaceAsPhysicsAvailable, bAvailable) == 0x000000, "Member 'BRPlacerStatusWidget_SetPlaceAsPhysicsAvailable::bAvailable' has a wrong offset!");

// Function Brickadia.BRPlacerStatusWidget.SetPlaceAsPhysicsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRPlacerStatusWidget_SetPlaceAsPhysicsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerStatusWidget_SetPlaceAsPhysicsEnabled) == 0x000001, "Wrong alignment on BRPlacerStatusWidget_SetPlaceAsPhysicsEnabled");
static_assert(sizeof(BRPlacerStatusWidget_SetPlaceAsPhysicsEnabled) == 0x000001, "Wrong size on BRPlacerStatusWidget_SetPlaceAsPhysicsEnabled");
static_assert(offsetof(BRPlacerStatusWidget_SetPlaceAsPhysicsEnabled, bEnabled) == 0x000000, "Member 'BRPlacerStatusWidget_SetPlaceAsPhysicsEnabled::bEnabled' has a wrong offset!");

// Function Brickadia.BRPlacerStatusWidget.SetSpacingText
// 0x0010 (0x0010 - 0x0000)
struct BRPlacerStatusWidget_SetSpacingText final
{
public:
	class FText                                   NewSpacingText;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerStatusWidget_SetSpacingText) == 0x000008, "Wrong alignment on BRPlacerStatusWidget_SetSpacingText");
static_assert(sizeof(BRPlacerStatusWidget_SetSpacingText) == 0x000010, "Wrong size on BRPlacerStatusWidget_SetSpacingText");
static_assert(offsetof(BRPlacerStatusWidget_SetSpacingText, NewSpacingText) == 0x000000, "Member 'BRPlacerStatusWidget_SetSpacingText::NewSpacingText' has a wrong offset!");

// Function Brickadia.BRDialogButtonBase.SetButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRDialogButtonBase_SetButtonEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogButtonBase_SetButtonEnabled) == 0x000001, "Wrong alignment on BRDialogButtonBase_SetButtonEnabled");
static_assert(sizeof(BRDialogButtonBase_SetButtonEnabled) == 0x000001, "Wrong size on BRDialogButtonBase_SetButtonEnabled");
static_assert(offsetof(BRDialogButtonBase_SetButtonEnabled, bEnabled) == 0x000000, "Member 'BRDialogButtonBase_SetButtonEnabled::bEnabled' has a wrong offset!");

// Function Brickadia.BRDialogFrameBase.SetDialogTitle
// 0x0010 (0x0010 - 0x0000)
struct BRDialogFrameBase_SetDialogTitle final
{
public:
	class FText                                   DialogTitle;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRDialogFrameBase_SetDialogTitle) == 0x000008, "Wrong alignment on BRDialogFrameBase_SetDialogTitle");
static_assert(sizeof(BRDialogFrameBase_SetDialogTitle) == 0x000010, "Wrong size on BRDialogFrameBase_SetDialogTitle");
static_assert(offsetof(BRDialogFrameBase_SetDialogTitle, DialogTitle) == 0x000000, "Member 'BRDialogFrameBase_SetDialogTitle::DialogTitle' has a wrong offset!");

// Function Brickadia.BRWeaponLibrary.SpawnExplosionAtLocation
// 0x0068 (0x0068 - 0x0000)
struct BRWeaponLibrary_SpawnExplosionAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRWeaponExplosion>         ExplosionClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponLibrary_SpawnExplosionAtLocation) == 0x000008, "Wrong alignment on BRWeaponLibrary_SpawnExplosionAtLocation");
static_assert(sizeof(BRWeaponLibrary_SpawnExplosionAtLocation) == 0x000068, "Wrong size on BRWeaponLibrary_SpawnExplosionAtLocation");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocation, WorldContextObject) == 0x000000, "Member 'BRWeaponLibrary_SpawnExplosionAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocation, ExplosionClass) == 0x000008, "Member 'BRWeaponLibrary_SpawnExplosionAtLocation::ExplosionClass' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocation, Location) == 0x000010, "Member 'BRWeaponLibrary_SpawnExplosionAtLocation::Location' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocation, Normal) == 0x000028, "Member 'BRWeaponLibrary_SpawnExplosionAtLocation::Normal' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocation, Scale) == 0x000040, "Member 'BRWeaponLibrary_SpawnExplosionAtLocation::Scale' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocation, DamageCauser) == 0x000058, "Member 'BRWeaponLibrary_SpawnExplosionAtLocation::DamageCauser' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocation, InstigatorController) == 0x000060, "Member 'BRWeaponLibrary_SpawnExplosionAtLocation::InstigatorController' has a wrong offset!");

// Function Brickadia.BRWeaponLibrary.SpawnExplosionAtLocationWithIgnoredActors
// 0x0078 (0x0078 - 0x0000)
struct BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRWeaponExplosion>         ExplosionClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors) == 0x000008, "Wrong alignment on BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors");
static_assert(sizeof(BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors) == 0x000078, "Wrong size on BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors, WorldContextObject) == 0x000000, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors, ExplosionClass) == 0x000008, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors::ExplosionClass' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors, Location) == 0x000010, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors::Location' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors, Normal) == 0x000028, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors::Normal' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors, Scale) == 0x000040, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors::Scale' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors, IgnoredActors) == 0x000058, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors::IgnoredActors' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors, DamageCauser) == 0x000068, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors::DamageCauser' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors, InstigatorController) == 0x000070, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors::InstigatorController' has a wrong offset!");

// Function Brickadia.BRWeaponLibrary.SpawnExplosionAtLocationWithSeed
// 0x0070 (0x0070 - 0x0000)
struct BRWeaponLibrary_SpawnExplosionAtLocationWithSeed final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRWeaponExplosion>         ExplosionClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponLibrary_SpawnExplosionAtLocationWithSeed) == 0x000008, "Wrong alignment on BRWeaponLibrary_SpawnExplosionAtLocationWithSeed");
static_assert(sizeof(BRWeaponLibrary_SpawnExplosionAtLocationWithSeed) == 0x000070, "Wrong size on BRWeaponLibrary_SpawnExplosionAtLocationWithSeed");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithSeed, WorldContextObject) == 0x000000, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithSeed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithSeed, ExplosionClass) == 0x000008, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithSeed::ExplosionClass' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithSeed, Location) == 0x000010, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithSeed::Location' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithSeed, Normal) == 0x000028, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithSeed::Normal' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithSeed, Scale) == 0x000040, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithSeed::Scale' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithSeed, RandomSeed) == 0x000058, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithSeed::RandomSeed' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithSeed, DamageCauser) == 0x000060, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithSeed::DamageCauser' has a wrong offset!");
static_assert(offsetof(BRWeaponLibrary_SpawnExplosionAtLocationWithSeed, InstigatorController) == 0x000068, "Member 'BRWeaponLibrary_SpawnExplosionAtLocationWithSeed::InstigatorController' has a wrong offset!");

// Function Brickadia.BRConnectorComponentPortWidget.ReceiveIsConnected
// 0x0001 (0x0001 - 0x0000)
struct BRConnectorComponentPortWidget_ReceiveIsConnected final
{
public:
	bool                                          bConnected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRConnectorComponentPortWidget_ReceiveIsConnected) == 0x000001, "Wrong alignment on BRConnectorComponentPortWidget_ReceiveIsConnected");
static_assert(sizeof(BRConnectorComponentPortWidget_ReceiveIsConnected) == 0x000001, "Wrong size on BRConnectorComponentPortWidget_ReceiveIsConnected");
static_assert(offsetof(BRConnectorComponentPortWidget_ReceiveIsConnected, bConnected) == 0x000000, "Member 'BRConnectorComponentPortWidget_ReceiveIsConnected::bConnected' has a wrong offset!");

// Function Brickadia.BRConnectorComponentPortWidget.ReceivePortDisplayInfo
// 0x0060 (0x0060 - 0x0000)
struct BRConnectorComponentPortWidget_ReceivePortDisplayInfo final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Tooltip;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBHResolvedTypeInfo                    TypeInfo;                                          // 0x0020(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInIsOutput;                                       // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRConnectorComponentPortWidget_ReceivePortDisplayInfo) == 0x000008, "Wrong alignment on BRConnectorComponentPortWidget_ReceivePortDisplayInfo");
static_assert(sizeof(BRConnectorComponentPortWidget_ReceivePortDisplayInfo) == 0x000060, "Wrong size on BRConnectorComponentPortWidget_ReceivePortDisplayInfo");
static_assert(offsetof(BRConnectorComponentPortWidget_ReceivePortDisplayInfo, DisplayName) == 0x000000, "Member 'BRConnectorComponentPortWidget_ReceivePortDisplayInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(BRConnectorComponentPortWidget_ReceivePortDisplayInfo, Tooltip) == 0x000010, "Member 'BRConnectorComponentPortWidget_ReceivePortDisplayInfo::Tooltip' has a wrong offset!");
static_assert(offsetof(BRConnectorComponentPortWidget_ReceivePortDisplayInfo, TypeInfo) == 0x000020, "Member 'BRConnectorComponentPortWidget_ReceivePortDisplayInfo::TypeInfo' has a wrong offset!");
static_assert(offsetof(BRConnectorComponentPortWidget_ReceivePortDisplayInfo, bInIsOutput) == 0x000058, "Member 'BRConnectorComponentPortWidget_ReceivePortDisplayInfo::bInIsOutput' has a wrong offset!");

// Function Brickadia.BREntity.SetColor
// 0x0008 (0x0008 - 0x0000)
struct BREntity_SetColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BREntity_SetColor) == 0x000004, "Wrong alignment on BREntity_SetColor");
static_assert(sizeof(BREntity_SetColor) == 0x000008, "Wrong size on BREntity_SetColor");
static_assert(offsetof(BREntity_SetColor, Index_0) == 0x000000, "Member 'BREntity_SetColor::Index_0' has a wrong offset!");
static_assert(offsetof(BREntity_SetColor, Color) == 0x000004, "Member 'BREntity_SetColor::Color' has a wrong offset!");

// Function Brickadia.BREntity.SetOwnerId
// 0x0004 (0x0004 - 0x0000)
struct BREntity_SetOwnerId final
{
public:
	int32                                         OwnerId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BREntity_SetOwnerId) == 0x000004, "Wrong alignment on BREntity_SetOwnerId");
static_assert(sizeof(BREntity_SetOwnerId) == 0x000004, "Wrong size on BREntity_SetOwnerId");
static_assert(offsetof(BREntity_SetOwnerId, OwnerId) == 0x000000, "Member 'BREntity_SetOwnerId::OwnerId' has a wrong offset!");

// Function Brickadia.BREntity.GetColor
// 0x0008 (0x0008 - 0x0000)
struct BREntity_GetColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BREntity_GetColor) == 0x000004, "Wrong alignment on BREntity_GetColor");
static_assert(sizeof(BREntity_GetColor) == 0x000008, "Wrong size on BREntity_GetColor");
static_assert(offsetof(BREntity_GetColor, Index_0) == 0x000000, "Member 'BREntity_GetColor::Index_0' has a wrong offset!");
static_assert(offsetof(BREntity_GetColor, ReturnValue) == 0x000004, "Member 'BREntity_GetColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BREntity.GetDefaultColor
// 0x0008 (0x0008 - 0x0000)
struct BREntity_GetDefaultColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BREntity_GetDefaultColor) == 0x000004, "Wrong alignment on BREntity_GetDefaultColor");
static_assert(sizeof(BREntity_GetDefaultColor) == 0x000008, "Wrong size on BREntity_GetDefaultColor");
static_assert(offsetof(BREntity_GetDefaultColor, Index_0) == 0x000000, "Member 'BREntity_GetDefaultColor::Index_0' has a wrong offset!");
static_assert(offsetof(BREntity_GetDefaultColor, ReturnValue) == 0x000004, "Member 'BREntity_GetDefaultColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BREntity.GetEntityType
// 0x0008 (0x0008 - 0x0000)
struct BREntity_GetEntityType final
{
public:
	class UBREntityTypeBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BREntity_GetEntityType) == 0x000008, "Wrong alignment on BREntity_GetEntityType");
static_assert(sizeof(BREntity_GetEntityType) == 0x000008, "Wrong size on BREntity_GetEntityType");
static_assert(offsetof(BREntity_GetEntityType, ReturnValue) == 0x000000, "Member 'BREntity_GetEntityType::ReturnValue' has a wrong offset!");

// Function Brickadia.BREntity.GetOwnerData
// 0x0030 (0x0030 - 0x0000)
struct BREntity_GetOwnerData final
{
public:
	struct FBrickOwnerData                        ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BREntity_GetOwnerData) == 0x000008, "Wrong alignment on BREntity_GetOwnerData");
static_assert(sizeof(BREntity_GetOwnerData) == 0x000030, "Wrong size on BREntity_GetOwnerData");
static_assert(offsetof(BREntity_GetOwnerData, ReturnValue) == 0x000000, "Member 'BREntity_GetOwnerData::ReturnValue' has a wrong offset!");

// Function Brickadia.BREntity.GetOwnerId
// 0x0004 (0x0004 - 0x0000)
struct BREntity_GetOwnerId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BREntity_GetOwnerId) == 0x000004, "Wrong alignment on BREntity_GetOwnerId");
static_assert(sizeof(BREntity_GetOwnerId) == 0x000004, "Wrong size on BREntity_GetOwnerId");
static_assert(offsetof(BREntity_GetOwnerId, ReturnValue) == 0x000000, "Member 'BREntity_GetOwnerId::ReturnValue' has a wrong offset!");

// Function Brickadia.BREntity.GetPersistentHandle
// 0x0004 (0x0004 - 0x0000)
struct BREntity_GetPersistentHandle final
{
public:
	struct FBREntityPersistentHandle              ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BREntity_GetPersistentHandle) == 0x000004, "Wrong alignment on BREntity_GetPersistentHandle");
static_assert(sizeof(BREntity_GetPersistentHandle) == 0x000004, "Wrong size on BREntity_GetPersistentHandle");
static_assert(offsetof(BREntity_GetPersistentHandle, ReturnValue) == 0x000000, "Member 'BREntity_GetPersistentHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BREnvironmentManagerComponent.ServerChangeEnvironmentSettingsGroup
// 0x0018 (0x0018 - 0x0000)
struct BREnvironmentManagerComponent_ServerChangeEnvironmentSettingsGroup final
{
public:
	class FName                                   SettingsGroupName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BREnvironmentManagerComponent_ServerChangeEnvironmentSettingsGroup) == 0x000008, "Wrong alignment on BREnvironmentManagerComponent_ServerChangeEnvironmentSettingsGroup");
static_assert(sizeof(BREnvironmentManagerComponent_ServerChangeEnvironmentSettingsGroup) == 0x000018, "Wrong size on BREnvironmentManagerComponent_ServerChangeEnvironmentSettingsGroup");
static_assert(offsetof(BREnvironmentManagerComponent_ServerChangeEnvironmentSettingsGroup, SettingsGroupName) == 0x000000, "Member 'BREnvironmentManagerComponent_ServerChangeEnvironmentSettingsGroup::SettingsGroupName' has a wrong offset!");
static_assert(offsetof(BREnvironmentManagerComponent_ServerChangeEnvironmentSettingsGroup, Changelist) == 0x000008, "Member 'BREnvironmentManagerComponent_ServerChangeEnvironmentSettingsGroup::Changelist' has a wrong offset!");

// Function Brickadia.BRWeaponExplosion.SpawnExplosionAtLocation
// 0x0070 (0x0070 - 0x0000)
struct BRWeaponExplosion_SpawnExplosionAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponExplosion_SpawnExplosionAtLocation) == 0x000008, "Wrong alignment on BRWeaponExplosion_SpawnExplosionAtLocation");
static_assert(sizeof(BRWeaponExplosion_SpawnExplosionAtLocation) == 0x000070, "Wrong size on BRWeaponExplosion_SpawnExplosionAtLocation");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocation, WorldContextObject) == 0x000000, "Member 'BRWeaponExplosion_SpawnExplosionAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocation, Location) == 0x000008, "Member 'BRWeaponExplosion_SpawnExplosionAtLocation::Location' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocation, Normal) == 0x000020, "Member 'BRWeaponExplosion_SpawnExplosionAtLocation::Normal' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocation, Scale) == 0x000038, "Member 'BRWeaponExplosion_SpawnExplosionAtLocation::Scale' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocation, IgnoredActors) == 0x000050, "Member 'BRWeaponExplosion_SpawnExplosionAtLocation::IgnoredActors' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocation, DamageCauser) == 0x000060, "Member 'BRWeaponExplosion_SpawnExplosionAtLocation::DamageCauser' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocation, InstigatorController) == 0x000068, "Member 'BRWeaponExplosion_SpawnExplosionAtLocation::InstigatorController' has a wrong offset!");

// Function Brickadia.BRWeaponExplosion.SpawnExplosionAtLocationWithSeed
// 0x0078 (0x0078 - 0x0000)
struct BRWeaponExplosion_SpawnExplosionAtLocationWithSeed final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponExplosion_SpawnExplosionAtLocationWithSeed) == 0x000008, "Wrong alignment on BRWeaponExplosion_SpawnExplosionAtLocationWithSeed");
static_assert(sizeof(BRWeaponExplosion_SpawnExplosionAtLocationWithSeed) == 0x000078, "Wrong size on BRWeaponExplosion_SpawnExplosionAtLocationWithSeed");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocationWithSeed, WorldContextObject) == 0x000000, "Member 'BRWeaponExplosion_SpawnExplosionAtLocationWithSeed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocationWithSeed, Location) == 0x000008, "Member 'BRWeaponExplosion_SpawnExplosionAtLocationWithSeed::Location' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocationWithSeed, Normal) == 0x000020, "Member 'BRWeaponExplosion_SpawnExplosionAtLocationWithSeed::Normal' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocationWithSeed, Scale) == 0x000038, "Member 'BRWeaponExplosion_SpawnExplosionAtLocationWithSeed::Scale' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocationWithSeed, RandomSeed) == 0x000050, "Member 'BRWeaponExplosion_SpawnExplosionAtLocationWithSeed::RandomSeed' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocationWithSeed, IgnoredActors) == 0x000058, "Member 'BRWeaponExplosion_SpawnExplosionAtLocationWithSeed::IgnoredActors' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocationWithSeed, DamageCauser) == 0x000068, "Member 'BRWeaponExplosion_SpawnExplosionAtLocationWithSeed::DamageCauser' has a wrong offset!");
static_assert(offsetof(BRWeaponExplosion_SpawnExplosionAtLocationWithSeed, InstigatorController) == 0x000070, "Member 'BRWeaponExplosion_SpawnExplosionAtLocationWithSeed::InstigatorController' has a wrong offset!");

// Function Brickadia.BRFontHelperLibrary.MeasureString
// 0x0088 (0x0088 - 0x0000)
struct BRFontHelperLibrary_MeasureString final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         InFontInfo;                                        // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FontScale;                                         // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRFontHelperLibrary_MeasureString) == 0x000008, "Wrong alignment on BRFontHelperLibrary_MeasureString");
static_assert(sizeof(BRFontHelperLibrary_MeasureString) == 0x000088, "Wrong size on BRFontHelperLibrary_MeasureString");
static_assert(offsetof(BRFontHelperLibrary_MeasureString, Text) == 0x000000, "Member 'BRFontHelperLibrary_MeasureString::Text' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureString, InFontInfo) == 0x000010, "Member 'BRFontHelperLibrary_MeasureString::InFontInfo' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureString, FontScale) == 0x000070, "Member 'BRFontHelperLibrary_MeasureString::FontScale' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureString, ReturnValue) == 0x000078, "Member 'BRFontHelperLibrary_MeasureString::ReturnValue' has a wrong offset!");

// Function Brickadia.BRFontHelperLibrary.MeasureStringExtended
// 0x0090 (0x0090 - 0x0000)
struct BRFontHelperLibrary_MeasureStringExtended final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIndex;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         InFontInfo;                                        // 0x0018(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeKerningWithPrecedingChar;                  // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FontScale;                                         // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRFontHelperLibrary_MeasureStringExtended) == 0x000008, "Wrong alignment on BRFontHelperLibrary_MeasureStringExtended");
static_assert(sizeof(BRFontHelperLibrary_MeasureStringExtended) == 0x000090, "Wrong size on BRFontHelperLibrary_MeasureStringExtended");
static_assert(offsetof(BRFontHelperLibrary_MeasureStringExtended, Text) == 0x000000, "Member 'BRFontHelperLibrary_MeasureStringExtended::Text' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureStringExtended, StartIndex) == 0x000010, "Member 'BRFontHelperLibrary_MeasureStringExtended::StartIndex' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureStringExtended, EndIndex) == 0x000014, "Member 'BRFontHelperLibrary_MeasureStringExtended::EndIndex' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureStringExtended, InFontInfo) == 0x000018, "Member 'BRFontHelperLibrary_MeasureStringExtended::InFontInfo' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureStringExtended, bIncludeKerningWithPrecedingChar) == 0x000078, "Member 'BRFontHelperLibrary_MeasureStringExtended::bIncludeKerningWithPrecedingChar' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureStringExtended, FontScale) == 0x00007C, "Member 'BRFontHelperLibrary_MeasureStringExtended::FontScale' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureStringExtended, ReturnValue) == 0x000080, "Member 'BRFontHelperLibrary_MeasureStringExtended::ReturnValue' has a wrong offset!");

// Function Brickadia.BRFontHelperLibrary.MeasureText
// 0x0088 (0x0088 - 0x0000)
struct BRFontHelperLibrary_MeasureText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         InFontInfo;                                        // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FontScale;                                         // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRFontHelperLibrary_MeasureText) == 0x000008, "Wrong alignment on BRFontHelperLibrary_MeasureText");
static_assert(sizeof(BRFontHelperLibrary_MeasureText) == 0x000088, "Wrong size on BRFontHelperLibrary_MeasureText");
static_assert(offsetof(BRFontHelperLibrary_MeasureText, Text) == 0x000000, "Member 'BRFontHelperLibrary_MeasureText::Text' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureText, InFontInfo) == 0x000010, "Member 'BRFontHelperLibrary_MeasureText::InFontInfo' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureText, FontScale) == 0x000070, "Member 'BRFontHelperLibrary_MeasureText::FontScale' has a wrong offset!");
static_assert(offsetof(BRFontHelperLibrary_MeasureText, ReturnValue) == 0x000078, "Member 'BRFontHelperLibrary_MeasureText::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWeaponStateBehavior_ChangesResources.ProcessResources
// 0x0008 (0x0008 - 0x0000)
struct BRWeaponStateBehavior_ChangesResources_ProcessResources final
{
public:
	class ABRWeaponBase*                          Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponStateBehavior_ChangesResources_ProcessResources) == 0x000008, "Wrong alignment on BRWeaponStateBehavior_ChangesResources_ProcessResources");
static_assert(sizeof(BRWeaponStateBehavior_ChangesResources_ProcessResources) == 0x000008, "Wrong size on BRWeaponStateBehavior_ChangesResources_ProcessResources");
static_assert(offsetof(BRWeaponStateBehavior_ChangesResources_ProcessResources, Weapon) == 0x000000, "Member 'BRWeaponStateBehavior_ChangesResources_ProcessResources::Weapon' has a wrong offset!");

// Function Brickadia.BRConnectorStatusWidget.SetInputActive
// 0x0001 (0x0001 - 0x0000)
struct BRConnectorStatusWidget_SetInputActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRConnectorStatusWidget_SetInputActive) == 0x000001, "Wrong alignment on BRConnectorStatusWidget_SetInputActive");
static_assert(sizeof(BRConnectorStatusWidget_SetInputActive) == 0x000001, "Wrong size on BRConnectorStatusWidget_SetInputActive");
static_assert(offsetof(BRConnectorStatusWidget_SetInputActive, bActive) == 0x000000, "Member 'BRConnectorStatusWidget_SetInputActive::bActive' has a wrong offset!");

// Function Brickadia.BRConnectorStatusWidget.SetInputName
// 0x0020 (0x0020 - 0x0000)
struct BRConnectorStatusWidget_SetInputName final
{
public:
	class FText                                   CompName;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Name_0;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRConnectorStatusWidget_SetInputName) == 0x000008, "Wrong alignment on BRConnectorStatusWidget_SetInputName");
static_assert(sizeof(BRConnectorStatusWidget_SetInputName) == 0x000020, "Wrong size on BRConnectorStatusWidget_SetInputName");
static_assert(offsetof(BRConnectorStatusWidget_SetInputName, CompName) == 0x000000, "Member 'BRConnectorStatusWidget_SetInputName::CompName' has a wrong offset!");
static_assert(offsetof(BRConnectorStatusWidget_SetInputName, Name_0) == 0x000010, "Member 'BRConnectorStatusWidget_SetInputName::Name_0' has a wrong offset!");

// Function Brickadia.BRConnectorStatusWidget.SetOutputActive
// 0x0001 (0x0001 - 0x0000)
struct BRConnectorStatusWidget_SetOutputActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRConnectorStatusWidget_SetOutputActive) == 0x000001, "Wrong alignment on BRConnectorStatusWidget_SetOutputActive");
static_assert(sizeof(BRConnectorStatusWidget_SetOutputActive) == 0x000001, "Wrong size on BRConnectorStatusWidget_SetOutputActive");
static_assert(offsetof(BRConnectorStatusWidget_SetOutputActive, bActive) == 0x000000, "Member 'BRConnectorStatusWidget_SetOutputActive::bActive' has a wrong offset!");

// Function Brickadia.BRConnectorStatusWidget.SetOutputName
// 0x0020 (0x0020 - 0x0000)
struct BRConnectorStatusWidget_SetOutputName final
{
public:
	class FText                                   CompName;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Name_0;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRConnectorStatusWidget_SetOutputName) == 0x000008, "Wrong alignment on BRConnectorStatusWidget_SetOutputName");
static_assert(sizeof(BRConnectorStatusWidget_SetOutputName) == 0x000020, "Wrong size on BRConnectorStatusWidget_SetOutputName");
static_assert(offsetof(BRConnectorStatusWidget_SetOutputName, CompName) == 0x000000, "Member 'BRConnectorStatusWidget_SetOutputName::CompName' has a wrong offset!");
static_assert(offsetof(BRConnectorStatusWidget_SetOutputName, Name_0) == 0x000010, "Member 'BRConnectorStatusWidget_SetOutputName::Name_0' has a wrong offset!");

// Function Brickadia.BRConnectorStatusWidget.GetConnector
// 0x0008 (0x0008 - 0x0000)
struct BRConnectorStatusWidget_GetConnector final
{
public:
	class ABRTool_Connector*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRConnectorStatusWidget_GetConnector) == 0x000008, "Wrong alignment on BRConnectorStatusWidget_GetConnector");
static_assert(sizeof(BRConnectorStatusWidget_GetConnector) == 0x000008, "Wrong size on BRConnectorStatusWidget_GetConnector");
static_assert(offsetof(BRConnectorStatusWidget_GetConnector, ReturnValue) == 0x000000, "Member 'BRConnectorStatusWidget_GetConnector::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Painter.ServerFillPaint
// 0x0018 (0x0018 - 0x0000)
struct BRTool_Painter_ServerFillPaint final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRColorSelectionState                 ClientColorSelectionState;                         // 0x0008(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPaintColor;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPaintMaterial;                                    // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Painter_ServerFillPaint) == 0x000004, "Wrong alignment on BRTool_Painter_ServerFillPaint");
static_assert(sizeof(BRTool_Painter_ServerFillPaint) == 0x000018, "Wrong size on BRTool_Painter_ServerFillPaint");
static_assert(offsetof(BRTool_Painter_ServerFillPaint, BrickHandle) == 0x000000, "Member 'BRTool_Painter_ServerFillPaint::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Painter_ServerFillPaint, ClientColorSelectionState) == 0x000008, "Member 'BRTool_Painter_ServerFillPaint::ClientColorSelectionState' has a wrong offset!");
static_assert(offsetof(BRTool_Painter_ServerFillPaint, bPaintColor) == 0x000014, "Member 'BRTool_Painter_ServerFillPaint::bPaintColor' has a wrong offset!");
static_assert(offsetof(BRTool_Painter_ServerFillPaint, bPaintMaterial) == 0x000015, "Member 'BRTool_Painter_ServerFillPaint::bPaintMaterial' has a wrong offset!");

// Function Brickadia.BRTool_Painter.ServerPaintBrick
// 0x001C (0x001C - 0x0000)
struct BRTool_Painter_ServerPaintBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRColorSelectionState                 ClientColorSelectionState;                         // 0x0008(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ClientStrokeIndex;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMergePaintStrokes;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPaintColor;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPaintMaterial;                                    // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Painter_ServerPaintBrick) == 0x000004, "Wrong alignment on BRTool_Painter_ServerPaintBrick");
static_assert(sizeof(BRTool_Painter_ServerPaintBrick) == 0x00001C, "Wrong size on BRTool_Painter_ServerPaintBrick");
static_assert(offsetof(BRTool_Painter_ServerPaintBrick, BrickHandle) == 0x000000, "Member 'BRTool_Painter_ServerPaintBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Painter_ServerPaintBrick, ClientColorSelectionState) == 0x000008, "Member 'BRTool_Painter_ServerPaintBrick::ClientColorSelectionState' has a wrong offset!");
static_assert(offsetof(BRTool_Painter_ServerPaintBrick, ClientStrokeIndex) == 0x000014, "Member 'BRTool_Painter_ServerPaintBrick::ClientStrokeIndex' has a wrong offset!");
static_assert(offsetof(BRTool_Painter_ServerPaintBrick, bMergePaintStrokes) == 0x000018, "Member 'BRTool_Painter_ServerPaintBrick::bMergePaintStrokes' has a wrong offset!");
static_assert(offsetof(BRTool_Painter_ServerPaintBrick, bPaintColor) == 0x000019, "Member 'BRTool_Painter_ServerPaintBrick::bPaintColor' has a wrong offset!");
static_assert(offsetof(BRTool_Painter_ServerPaintBrick, bPaintMaterial) == 0x00001A, "Member 'BRTool_Painter_ServerPaintBrick::bPaintMaterial' has a wrong offset!");

// Function Brickadia.BRGameInstance.GetBRGameInstance
// 0x0010 (0x0010 - 0x0000)
struct BRGameInstance_GetBRGameInstance final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRGameInstance*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameInstance_GetBRGameInstance) == 0x000008, "Wrong alignment on BRGameInstance_GetBRGameInstance");
static_assert(sizeof(BRGameInstance_GetBRGameInstance) == 0x000010, "Wrong size on BRGameInstance_GetBRGameInstance");
static_assert(offsetof(BRGameInstance_GetBRGameInstance, WorldContextObject) == 0x000000, "Member 'BRGameInstance_GetBRGameInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRGameInstance_GetBRGameInstance, ReturnValue) == 0x000008, "Member 'BRGameInstance_GetBRGameInstance::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameInstance.GetMessagesFromHistory
// 0x0018 (0x0018 - 0x0000)
struct BRGameInstance_GetMessagesFromHistory final
{
public:
	int32                                         StartIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumMessages;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameInstance_GetMessagesFromHistory) == 0x000008, "Wrong alignment on BRGameInstance_GetMessagesFromHistory");
static_assert(sizeof(BRGameInstance_GetMessagesFromHistory) == 0x000018, "Wrong size on BRGameInstance_GetMessagesFromHistory");
static_assert(offsetof(BRGameInstance_GetMessagesFromHistory, StartIndex) == 0x000000, "Member 'BRGameInstance_GetMessagesFromHistory::StartIndex' has a wrong offset!");
static_assert(offsetof(BRGameInstance_GetMessagesFromHistory, MaxNumMessages) == 0x000004, "Member 'BRGameInstance_GetMessagesFromHistory::MaxNumMessages' has a wrong offset!");
static_assert(offsetof(BRGameInstance_GetMessagesFromHistory, ReturnValue) == 0x000008, "Member 'BRGameInstance_GetMessagesFromHistory::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameInstance.GetNumRecentMessages
// 0x0008 (0x0008 - 0x0000)
struct BRGameInstance_GetNumRecentMessages final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameInstance_GetNumRecentMessages) == 0x000004, "Wrong alignment on BRGameInstance_GetNumRecentMessages");
static_assert(sizeof(BRGameInstance_GetNumRecentMessages) == 0x000008, "Wrong size on BRGameInstance_GetNumRecentMessages");
static_assert(offsetof(BRGameInstance_GetNumRecentMessages, Time) == 0x000000, "Member 'BRGameInstance_GetNumRecentMessages::Time' has a wrong offset!");
static_assert(offsetof(BRGameInstance_GetNumRecentMessages, ReturnValue) == 0x000004, "Member 'BRGameInstance_GetNumRecentMessages::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameInstance.PushChatMessage
// 0x0028 (0x0028 - 0x0000)
struct BRGameInstance_PushChatMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                SenderId;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameInstance_PushChatMessage) == 0x000008, "Wrong alignment on BRGameInstance_PushChatMessage");
static_assert(sizeof(BRGameInstance_PushChatMessage) == 0x000028, "Wrong size on BRGameInstance_PushChatMessage");
static_assert(offsetof(BRGameInstance_PushChatMessage, Message) == 0x000000, "Member 'BRGameInstance_PushChatMessage::Message' has a wrong offset!");
static_assert(offsetof(BRGameInstance_PushChatMessage, SenderId) == 0x000010, "Member 'BRGameInstance_PushChatMessage::SenderId' has a wrong offset!");
static_assert(offsetof(BRGameInstance_PushChatMessage, ReturnValue) == 0x000020, "Member 'BRGameInstance_PushChatMessage::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameInstance.PushRecentlyUsedBrick
// 0x0008 (0x0008 - 0x0000)
struct BRGameInstance_PushRecentlyUsedBrick final
{
public:
	class UBrickType*                             BrickType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameInstance_PushRecentlyUsedBrick) == 0x000008, "Wrong alignment on BRGameInstance_PushRecentlyUsedBrick");
static_assert(sizeof(BRGameInstance_PushRecentlyUsedBrick) == 0x000008, "Wrong size on BRGameInstance_PushRecentlyUsedBrick");
static_assert(offsetof(BRGameInstance_PushRecentlyUsedBrick, BrickType) == 0x000000, "Member 'BRGameInstance_PushRecentlyUsedBrick::BrickType' has a wrong offset!");

// Function Brickadia.BRGameInstance.RemoveRecentlyUsedBrick
// 0x0008 (0x0008 - 0x0000)
struct BRGameInstance_RemoveRecentlyUsedBrick final
{
public:
	class UBrickType*                             BrickType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameInstance_RemoveRecentlyUsedBrick) == 0x000008, "Wrong alignment on BRGameInstance_RemoveRecentlyUsedBrick");
static_assert(sizeof(BRGameInstance_RemoveRecentlyUsedBrick) == 0x000008, "Wrong size on BRGameInstance_RemoveRecentlyUsedBrick");
static_assert(offsetof(BRGameInstance_RemoveRecentlyUsedBrick, BrickType) == 0x000000, "Member 'BRGameInstance_RemoveRecentlyUsedBrick::BrickType' has a wrong offset!");

// Function Brickadia.BRGameInstance.FindEmojiBrush
// 0x00C0 (0x00C0 - 0x0000)
struct BRGameInstance_FindEmojiBrush final
{
public:
	class FName                                   TagOrId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x00B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameInstance_FindEmojiBrush) == 0x000010, "Wrong alignment on BRGameInstance_FindEmojiBrush");
static_assert(sizeof(BRGameInstance_FindEmojiBrush) == 0x0000C0, "Wrong size on BRGameInstance_FindEmojiBrush");
static_assert(offsetof(BRGameInstance_FindEmojiBrush, TagOrId) == 0x000000, "Member 'BRGameInstance_FindEmojiBrush::TagOrId' has a wrong offset!");
static_assert(offsetof(BRGameInstance_FindEmojiBrush, ReturnValue) == 0x000010, "Member 'BRGameInstance_FindEmojiBrush::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameInstance.GetBrickMaterialIndex
// 0x000C (0x000C - 0x0000)
struct BRGameInstance_GetBrickMaterialIndex final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameInstance_GetBrickMaterialIndex) == 0x000004, "Wrong alignment on BRGameInstance_GetBrickMaterialIndex");
static_assert(sizeof(BRGameInstance_GetBrickMaterialIndex) == 0x00000C, "Wrong size on BRGameInstance_GetBrickMaterialIndex");
static_assert(offsetof(BRGameInstance_GetBrickMaterialIndex, Name_0) == 0x000000, "Member 'BRGameInstance_GetBrickMaterialIndex::Name_0' has a wrong offset!");
static_assert(offsetof(BRGameInstance_GetBrickMaterialIndex, ReturnValue) == 0x000008, "Member 'BRGameInstance_GetBrickMaterialIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameInstance.GetMaterialIndicesUsableForPainting
// 0x0010 (0x0010 - 0x0000)
struct BRGameInstance_GetMaterialIndicesUsableForPainting final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameInstance_GetMaterialIndicesUsableForPainting) == 0x000008, "Wrong alignment on BRGameInstance_GetMaterialIndicesUsableForPainting");
static_assert(sizeof(BRGameInstance_GetMaterialIndicesUsableForPainting) == 0x000010, "Wrong size on BRGameInstance_GetMaterialIndicesUsableForPainting");
static_assert(offsetof(BRGameInstance_GetMaterialIndicesUsableForPainting, ReturnValue) == 0x000000, "Member 'BRGameInstance_GetMaterialIndicesUsableForPainting::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameInstance.GetMessageHistoryLength
// 0x0004 (0x0004 - 0x0000)
struct BRGameInstance_GetMessageHistoryLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameInstance_GetMessageHistoryLength) == 0x000004, "Wrong alignment on BRGameInstance_GetMessageHistoryLength");
static_assert(sizeof(BRGameInstance_GetMessageHistoryLength) == 0x000004, "Wrong size on BRGameInstance_GetMessageHistoryLength");
static_assert(offsetof(BRGameInstance_GetMessageHistoryLength, ReturnValue) == 0x000000, "Member 'BRGameInstance_GetMessageHistoryLength::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameInstance.IsMaterialIndexUsableForPainting
// 0x0008 (0x0008 - 0x0000)
struct BRGameInstance_IsMaterialIndexUsableForPainting final
{
public:
	int32                                         MaterialIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameInstance_IsMaterialIndexUsableForPainting) == 0x000004, "Wrong alignment on BRGameInstance_IsMaterialIndexUsableForPainting");
static_assert(sizeof(BRGameInstance_IsMaterialIndexUsableForPainting) == 0x000008, "Wrong size on BRGameInstance_IsMaterialIndexUsableForPainting");
static_assert(offsetof(BRGameInstance_IsMaterialIndexUsableForPainting, MaterialIndex) == 0x000000, "Member 'BRGameInstance_IsMaterialIndexUsableForPainting::MaterialIndex' has a wrong offset!");
static_assert(offsetof(BRGameInstance_IsMaterialIndexUsableForPainting, ReturnValue) == 0x000004, "Member 'BRGameInstance_IsMaterialIndexUsableForPainting::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSession.BRKickPlayer
// 0x0028 (0x0028 - 0x0000)
struct BRGameSession_BRKickPlayer final
{
public:
	class ABRPlayerController*                    KickedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerController*                    Kicker;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KickReason;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameSession_BRKickPlayer) == 0x000008, "Wrong alignment on BRGameSession_BRKickPlayer");
static_assert(sizeof(BRGameSession_BRKickPlayer) == 0x000028, "Wrong size on BRGameSession_BRKickPlayer");
static_assert(offsetof(BRGameSession_BRKickPlayer, KickedPlayer) == 0x000000, "Member 'BRGameSession_BRKickPlayer::KickedPlayer' has a wrong offset!");
static_assert(offsetof(BRGameSession_BRKickPlayer, Kicker) == 0x000008, "Member 'BRGameSession_BRKickPlayer::Kicker' has a wrong offset!");
static_assert(offsetof(BRGameSession_BRKickPlayer, KickReason) == 0x000010, "Member 'BRGameSession_BRKickPlayer::KickReason' has a wrong offset!");
static_assert(offsetof(BRGameSession_BRKickPlayer, ReturnValue) == 0x000020, "Member 'BRGameSession_BRKickPlayer::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSession.HandleServerSettingsUpdate
// 0x0008 (0x0008 - 0x0000)
struct BRGameSession_HandleServerSettingsUpdate final
{
public:
	class UBRGameSettingsBase*                    Settings;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSession_HandleServerSettingsUpdate) == 0x000008, "Wrong alignment on BRGameSession_HandleServerSettingsUpdate");
static_assert(sizeof(BRGameSession_HandleServerSettingsUpdate) == 0x000008, "Wrong size on BRGameSession_HandleServerSettingsUpdate");
static_assert(offsetof(BRGameSession_HandleServerSettingsUpdate, Settings) == 0x000000, "Member 'BRGameSession_HandleServerSettingsUpdate::Settings' has a wrong offset!");

// Function Brickadia.BRGetServerListAsyncAction.AsyncGetServerList
// 0x0018 (0x0018 - 0x0000)
struct BRGetServerListAsyncAction_AsyncGetServerList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSequence;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRGetServerListAsyncAction*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGetServerListAsyncAction_AsyncGetServerList) == 0x000008, "Wrong alignment on BRGetServerListAsyncAction_AsyncGetServerList");
static_assert(sizeof(BRGetServerListAsyncAction_AsyncGetServerList) == 0x000018, "Wrong size on BRGetServerListAsyncAction_AsyncGetServerList");
static_assert(offsetof(BRGetServerListAsyncAction_AsyncGetServerList, WorldContextObject) == 0x000000, "Member 'BRGetServerListAsyncAction_AsyncGetServerList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRGetServerListAsyncAction_AsyncGetServerList, InSequence) == 0x000008, "Member 'BRGetServerListAsyncAction_AsyncGetServerList::InSequence' has a wrong offset!");
static_assert(offsetof(BRGetServerListAsyncAction_AsyncGetServerList, ReturnValue) == 0x000010, "Member 'BRGetServerListAsyncAction_AsyncGetServerList::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGetServerInfoAsyncAction.AsyncGetServerInfo
// 0x0028 (0x0028 - 0x0000)
struct BRGetServerInfoAsyncAction_AsyncGetServerInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSequence;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Identity;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRGetServerInfoAsyncAction*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGetServerInfoAsyncAction_AsyncGetServerInfo) == 0x000008, "Wrong alignment on BRGetServerInfoAsyncAction_AsyncGetServerInfo");
static_assert(sizeof(BRGetServerInfoAsyncAction_AsyncGetServerInfo) == 0x000028, "Wrong size on BRGetServerInfoAsyncAction_AsyncGetServerInfo");
static_assert(offsetof(BRGetServerInfoAsyncAction_AsyncGetServerInfo, WorldContextObject) == 0x000000, "Member 'BRGetServerInfoAsyncAction_AsyncGetServerInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRGetServerInfoAsyncAction_AsyncGetServerInfo, InSequence) == 0x000008, "Member 'BRGetServerInfoAsyncAction_AsyncGetServerInfo::InSequence' has a wrong offset!");
static_assert(offsetof(BRGetServerInfoAsyncAction_AsyncGetServerInfo, Identity) == 0x000010, "Member 'BRGetServerInfoAsyncAction_AsyncGetServerInfo::Identity' has a wrong offset!");
static_assert(offsetof(BRGetServerInfoAsyncAction_AsyncGetServerInfo, ReturnValue) == 0x000020, "Member 'BRGetServerInfoAsyncAction_AsyncGetServerInfo::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGetServerInfoAsyncAction.AsyncGetServerInfoByInviteCode
// 0x0028 (0x0028 - 0x0000)
struct BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSequence;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InviteCode;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRGetServerInfoAsyncAction*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode) == 0x000008, "Wrong alignment on BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode");
static_assert(sizeof(BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode) == 0x000028, "Wrong size on BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode");
static_assert(offsetof(BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode, WorldContextObject) == 0x000000, "Member 'BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode, InSequence) == 0x000008, "Member 'BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode::InSequence' has a wrong offset!");
static_assert(offsetof(BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode, InviteCode) == 0x000010, "Member 'BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode::InviteCode' has a wrong offset!");
static_assert(offsetof(BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode, ReturnValue) == 0x000020, "Member 'BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRServerListHelpers.FilterServerItems
// 0x0030 (0x0030 - 0x0000)
struct BRServerListHelpers_FilterServerItems final
{
public:
	TArray<class UObject*>                        Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 SearchString;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        OutFilteredItems;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerListHelpers_FilterServerItems) == 0x000008, "Wrong alignment on BRServerListHelpers_FilterServerItems");
static_assert(sizeof(BRServerListHelpers_FilterServerItems) == 0x000030, "Wrong size on BRServerListHelpers_FilterServerItems");
static_assert(offsetof(BRServerListHelpers_FilterServerItems, Items) == 0x000000, "Member 'BRServerListHelpers_FilterServerItems::Items' has a wrong offset!");
static_assert(offsetof(BRServerListHelpers_FilterServerItems, SearchString) == 0x000010, "Member 'BRServerListHelpers_FilterServerItems::SearchString' has a wrong offset!");
static_assert(offsetof(BRServerListHelpers_FilterServerItems, OutFilteredItems) == 0x000020, "Member 'BRServerListHelpers_FilterServerItems::OutFilteredItems' has a wrong offset!");

// Function Brickadia.BRServerListHelpers.FilterServerItemsExact
// 0x0028 (0x0028 - 0x0000)
struct BRServerListHelpers_FilterServerItemsExact final
{
public:
	TArray<class UObject*>                        Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Identity;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerListHelpers_FilterServerItemsExact) == 0x000008, "Wrong alignment on BRServerListHelpers_FilterServerItemsExact");
static_assert(sizeof(BRServerListHelpers_FilterServerItemsExact) == 0x000028, "Wrong size on BRServerListHelpers_FilterServerItemsExact");
static_assert(offsetof(BRServerListHelpers_FilterServerItemsExact, Items) == 0x000000, "Member 'BRServerListHelpers_FilterServerItemsExact::Items' has a wrong offset!");
static_assert(offsetof(BRServerListHelpers_FilterServerItemsExact, Identity) == 0x000010, "Member 'BRServerListHelpers_FilterServerItemsExact::Identity' has a wrong offset!");
static_assert(offsetof(BRServerListHelpers_FilterServerItemsExact, ReturnValue) == 0x000020, "Member 'BRServerListHelpers_FilterServerItemsExact::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInputKeyDisplayNames.GetShortKeyDisplayName
// 0x0028 (0x0028 - 0x0000)
struct BRInputKeyDisplayNames_GetShortKeyDisplayName final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInputKeyDisplayNames_GetShortKeyDisplayName) == 0x000008, "Wrong alignment on BRInputKeyDisplayNames_GetShortKeyDisplayName");
static_assert(sizeof(BRInputKeyDisplayNames_GetShortKeyDisplayName) == 0x000028, "Wrong size on BRInputKeyDisplayNames_GetShortKeyDisplayName");
static_assert(offsetof(BRInputKeyDisplayNames_GetShortKeyDisplayName, Key) == 0x000000, "Member 'BRInputKeyDisplayNames_GetShortKeyDisplayName::Key' has a wrong offset!");
static_assert(offsetof(BRInputKeyDisplayNames_GetShortKeyDisplayName, ReturnValue) == 0x000018, "Member 'BRInputKeyDisplayNames_GetShortKeyDisplayName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInputKeyDisplayNames.GetShortKeyDisplayName_WithModifiers
// 0x0030 (0x0030 - 0x0000)
struct BRInputKeyDisplayNames_GetShortKeyDisplayName_WithModifiers final
{
public:
	struct FBRInputKey_WithModifiers              KeyWithModifiers;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInputKeyDisplayNames_GetShortKeyDisplayName_WithModifiers) == 0x000008, "Wrong alignment on BRInputKeyDisplayNames_GetShortKeyDisplayName_WithModifiers");
static_assert(sizeof(BRInputKeyDisplayNames_GetShortKeyDisplayName_WithModifiers) == 0x000030, "Wrong size on BRInputKeyDisplayNames_GetShortKeyDisplayName_WithModifiers");
static_assert(offsetof(BRInputKeyDisplayNames_GetShortKeyDisplayName_WithModifiers, KeyWithModifiers) == 0x000000, "Member 'BRInputKeyDisplayNames_GetShortKeyDisplayName_WithModifiers::KeyWithModifiers' has a wrong offset!");
static_assert(offsetof(BRInputKeyDisplayNames_GetShortKeyDisplayName_WithModifiers, ReturnValue) == 0x000020, "Member 'BRInputKeyDisplayNames_GetShortKeyDisplayName_WithModifiers::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSettingsSubsystem.SubscribeToChanges
// 0x0018 (0x0018 - 0x0000)
struct BRGameSettingsSubsystem_SubscribeToChanges final
{
public:
	TSubclassOf<class UBRGameSettingsBase>        SettingsClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UBRGameSettingsBase* SettingsObject)> Event;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsSubsystem_SubscribeToChanges) == 0x000008, "Wrong alignment on BRGameSettingsSubsystem_SubscribeToChanges");
static_assert(sizeof(BRGameSettingsSubsystem_SubscribeToChanges) == 0x000018, "Wrong size on BRGameSettingsSubsystem_SubscribeToChanges");
static_assert(offsetof(BRGameSettingsSubsystem_SubscribeToChanges, SettingsClass) == 0x000000, "Member 'BRGameSettingsSubsystem_SubscribeToChanges::SettingsClass' has a wrong offset!");
static_assert(offsetof(BRGameSettingsSubsystem_SubscribeToChanges, Event) == 0x000008, "Member 'BRGameSettingsSubsystem_SubscribeToChanges::Event' has a wrong offset!");

// Function Brickadia.BRGameSettingsSubsystem.SubscribeToLiveChanges
// 0x0018 (0x0018 - 0x0000)
struct BRGameSettingsSubsystem_SubscribeToLiveChanges final
{
public:
	TSubclassOf<class UBRGameSettingsBase>        SettingsClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UBRGameSettingsBase* SettingsObject)> Event;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsSubsystem_SubscribeToLiveChanges) == 0x000008, "Wrong alignment on BRGameSettingsSubsystem_SubscribeToLiveChanges");
static_assert(sizeof(BRGameSettingsSubsystem_SubscribeToLiveChanges) == 0x000018, "Wrong size on BRGameSettingsSubsystem_SubscribeToLiveChanges");
static_assert(offsetof(BRGameSettingsSubsystem_SubscribeToLiveChanges, SettingsClass) == 0x000000, "Member 'BRGameSettingsSubsystem_SubscribeToLiveChanges::SettingsClass' has a wrong offset!");
static_assert(offsetof(BRGameSettingsSubsystem_SubscribeToLiveChanges, Event) == 0x000008, "Member 'BRGameSettingsSubsystem_SubscribeToLiveChanges::Event' has a wrong offset!");

// Function Brickadia.BRGameSettingsSubsystem.GetAllSettingsInstances
// 0x0010 (0x0010 - 0x0000)
struct BRGameSettingsSubsystem_GetAllSettingsInstances final
{
public:
	TArray<class UBRGameSettingsBase*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsSubsystem_GetAllSettingsInstances) == 0x000008, "Wrong alignment on BRGameSettingsSubsystem_GetAllSettingsInstances");
static_assert(sizeof(BRGameSettingsSubsystem_GetAllSettingsInstances) == 0x000010, "Wrong size on BRGameSettingsSubsystem_GetAllSettingsInstances");
static_assert(offsetof(BRGameSettingsSubsystem_GetAllSettingsInstances, ReturnValue) == 0x000000, "Member 'BRGameSettingsSubsystem_GetAllSettingsInstances::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSettingsSubsystem.GetSettingsInstance
// 0x0010 (0x0010 - 0x0000)
struct BRGameSettingsSubsystem_GetSettingsInstance final
{
public:
	TSubclassOf<class UBRGameSettingsBase>        SettingsClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRGameSettingsBase*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsSubsystem_GetSettingsInstance) == 0x000008, "Wrong alignment on BRGameSettingsSubsystem_GetSettingsInstance");
static_assert(sizeof(BRGameSettingsSubsystem_GetSettingsInstance) == 0x000010, "Wrong size on BRGameSettingsSubsystem_GetSettingsInstance");
static_assert(offsetof(BRGameSettingsSubsystem_GetSettingsInstance, SettingsClass) == 0x000000, "Member 'BRGameSettingsSubsystem_GetSettingsInstance::SettingsClass' has a wrong offset!");
static_assert(offsetof(BRGameSettingsSubsystem_GetSettingsInstance, ReturnValue) == 0x000008, "Member 'BRGameSettingsSubsystem_GetSettingsInstance::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.AppendInputBindingDescriptors
// 0x0030 (0x0030 - 0x0000)
struct BRGameSettingsBase_Controls_AppendInputBindingDescriptors final
{
public:
	TSubclassOf<class UInspectorPropertyDescriptorList> BaseDescriptorListClass;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyWidgetBase> PropertyWidgetClass_Action;                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyWidgetBase> PropertyWidgetClass_Axis;                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorCategoryRowBase>  CategoryWidgetClass;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRInputBindingDescriptorList*          InputBindingDescriptorList;                        // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_AppendInputBindingDescriptors) == 0x000008, "Wrong alignment on BRGameSettingsBase_Controls_AppendInputBindingDescriptors");
static_assert(sizeof(BRGameSettingsBase_Controls_AppendInputBindingDescriptors) == 0x000030, "Wrong size on BRGameSettingsBase_Controls_AppendInputBindingDescriptors");
static_assert(offsetof(BRGameSettingsBase_Controls_AppendInputBindingDescriptors, BaseDescriptorListClass) == 0x000000, "Member 'BRGameSettingsBase_Controls_AppendInputBindingDescriptors::BaseDescriptorListClass' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_AppendInputBindingDescriptors, PropertyWidgetClass_Action) == 0x000008, "Member 'BRGameSettingsBase_Controls_AppendInputBindingDescriptors::PropertyWidgetClass_Action' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_AppendInputBindingDescriptors, PropertyWidgetClass_Axis) == 0x000010, "Member 'BRGameSettingsBase_Controls_AppendInputBindingDescriptors::PropertyWidgetClass_Axis' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_AppendInputBindingDescriptors, CategoryWidgetClass) == 0x000018, "Member 'BRGameSettingsBase_Controls_AppendInputBindingDescriptors::CategoryWidgetClass' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_AppendInputBindingDescriptors, InputBindingDescriptorList) == 0x000020, "Member 'BRGameSettingsBase_Controls_AppendInputBindingDescriptors::InputBindingDescriptorList' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_AppendInputBindingDescriptors, ReturnValue) == 0x000028, "Member 'BRGameSettingsBase_Controls_AppendInputBindingDescriptors::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.SetActionBindingDetails
// 0x0040 (0x0040 - 0x0000)
struct BRGameSettingsBase_Controls_SetActionBindingDetails final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRInputBindingDetails_Action          NewDetails;                                        // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_SetActionBindingDetails) == 0x000008, "Wrong alignment on BRGameSettingsBase_Controls_SetActionBindingDetails");
static_assert(sizeof(BRGameSettingsBase_Controls_SetActionBindingDetails) == 0x000040, "Wrong size on BRGameSettingsBase_Controls_SetActionBindingDetails");
static_assert(offsetof(BRGameSettingsBase_Controls_SetActionBindingDetails, ActionName) == 0x000000, "Member 'BRGameSettingsBase_Controls_SetActionBindingDetails::ActionName' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_SetActionBindingDetails, NewDetails) == 0x000008, "Member 'BRGameSettingsBase_Controls_SetActionBindingDetails::NewDetails' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.SetAxisBindingDetails
// 0x00A8 (0x00A8 - 0x0000)
struct BRGameSettingsBase_Controls_SetAxisBindingDetails final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRInputBindingDetails_Axis            NewDetails;                                        // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_SetAxisBindingDetails) == 0x000008, "Wrong alignment on BRGameSettingsBase_Controls_SetAxisBindingDetails");
static_assert(sizeof(BRGameSettingsBase_Controls_SetAxisBindingDetails) == 0x0000A8, "Wrong size on BRGameSettingsBase_Controls_SetAxisBindingDetails");
static_assert(offsetof(BRGameSettingsBase_Controls_SetAxisBindingDetails, AxisName) == 0x000000, "Member 'BRGameSettingsBase_Controls_SetAxisBindingDetails::AxisName' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_SetAxisBindingDetails, NewDetails) == 0x000008, "Member 'BRGameSettingsBase_Controls_SetAxisBindingDetails::NewDetails' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.SetEnableMouseSmoothing
// 0x0001 (0x0001 - 0x0000)
struct BRGameSettingsBase_Controls_SetEnableMouseSmoothing final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_SetEnableMouseSmoothing) == 0x000001, "Wrong alignment on BRGameSettingsBase_Controls_SetEnableMouseSmoothing");
static_assert(sizeof(BRGameSettingsBase_Controls_SetEnableMouseSmoothing) == 0x000001, "Wrong size on BRGameSettingsBase_Controls_SetEnableMouseSmoothing");
static_assert(offsetof(BRGameSettingsBase_Controls_SetEnableMouseSmoothing, bEnabled) == 0x000000, "Member 'BRGameSettingsBase_Controls_SetEnableMouseSmoothing::bEnabled' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.SetLeftStickSensitivityX
// 0x0004 (0x0004 - 0x0000)
struct BRGameSettingsBase_Controls_SetLeftStickSensitivityX final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_SetLeftStickSensitivityX) == 0x000004, "Wrong alignment on BRGameSettingsBase_Controls_SetLeftStickSensitivityX");
static_assert(sizeof(BRGameSettingsBase_Controls_SetLeftStickSensitivityX) == 0x000004, "Wrong size on BRGameSettingsBase_Controls_SetLeftStickSensitivityX");
static_assert(offsetof(BRGameSettingsBase_Controls_SetLeftStickSensitivityX, NewSensitivity) == 0x000000, "Member 'BRGameSettingsBase_Controls_SetLeftStickSensitivityX::NewSensitivity' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.SetLeftStickSensitivityY
// 0x0004 (0x0004 - 0x0000)
struct BRGameSettingsBase_Controls_SetLeftStickSensitivityY final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_SetLeftStickSensitivityY) == 0x000004, "Wrong alignment on BRGameSettingsBase_Controls_SetLeftStickSensitivityY");
static_assert(sizeof(BRGameSettingsBase_Controls_SetLeftStickSensitivityY) == 0x000004, "Wrong size on BRGameSettingsBase_Controls_SetLeftStickSensitivityY");
static_assert(offsetof(BRGameSettingsBase_Controls_SetLeftStickSensitivityY, NewSensitivity) == 0x000000, "Member 'BRGameSettingsBase_Controls_SetLeftStickSensitivityY::NewSensitivity' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.SetMouseSensitivityX
// 0x0004 (0x0004 - 0x0000)
struct BRGameSettingsBase_Controls_SetMouseSensitivityX final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_SetMouseSensitivityX) == 0x000004, "Wrong alignment on BRGameSettingsBase_Controls_SetMouseSensitivityX");
static_assert(sizeof(BRGameSettingsBase_Controls_SetMouseSensitivityX) == 0x000004, "Wrong size on BRGameSettingsBase_Controls_SetMouseSensitivityX");
static_assert(offsetof(BRGameSettingsBase_Controls_SetMouseSensitivityX, NewSensitivity) == 0x000000, "Member 'BRGameSettingsBase_Controls_SetMouseSensitivityX::NewSensitivity' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.SetMouseSensitivityY
// 0x0004 (0x0004 - 0x0000)
struct BRGameSettingsBase_Controls_SetMouseSensitivityY final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_SetMouseSensitivityY) == 0x000004, "Wrong alignment on BRGameSettingsBase_Controls_SetMouseSensitivityY");
static_assert(sizeof(BRGameSettingsBase_Controls_SetMouseSensitivityY) == 0x000004, "Wrong size on BRGameSettingsBase_Controls_SetMouseSensitivityY");
static_assert(offsetof(BRGameSettingsBase_Controls_SetMouseSensitivityY, NewSensitivity) == 0x000000, "Member 'BRGameSettingsBase_Controls_SetMouseSensitivityY::NewSensitivity' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.SetRightStickSensitivityX
// 0x0004 (0x0004 - 0x0000)
struct BRGameSettingsBase_Controls_SetRightStickSensitivityX final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_SetRightStickSensitivityX) == 0x000004, "Wrong alignment on BRGameSettingsBase_Controls_SetRightStickSensitivityX");
static_assert(sizeof(BRGameSettingsBase_Controls_SetRightStickSensitivityX) == 0x000004, "Wrong size on BRGameSettingsBase_Controls_SetRightStickSensitivityX");
static_assert(offsetof(BRGameSettingsBase_Controls_SetRightStickSensitivityX, NewSensitivity) == 0x000000, "Member 'BRGameSettingsBase_Controls_SetRightStickSensitivityX::NewSensitivity' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.SetRightStickSensitivityY
// 0x0004 (0x0004 - 0x0000)
struct BRGameSettingsBase_Controls_SetRightStickSensitivityY final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_SetRightStickSensitivityY) == 0x000004, "Wrong alignment on BRGameSettingsBase_Controls_SetRightStickSensitivityY");
static_assert(sizeof(BRGameSettingsBase_Controls_SetRightStickSensitivityY) == 0x000004, "Wrong size on BRGameSettingsBase_Controls_SetRightStickSensitivityY");
static_assert(offsetof(BRGameSettingsBase_Controls_SetRightStickSensitivityY, NewSensitivity) == 0x000000, "Member 'BRGameSettingsBase_Controls_SetRightStickSensitivityY::NewSensitivity' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.SetTapToSprint
// 0x0001 (0x0001 - 0x0000)
struct BRGameSettingsBase_Controls_SetTapToSprint final
{
public:
	bool                                          bNewTapToSprint;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_SetTapToSprint) == 0x000001, "Wrong alignment on BRGameSettingsBase_Controls_SetTapToSprint");
static_assert(sizeof(BRGameSettingsBase_Controls_SetTapToSprint) == 0x000001, "Wrong size on BRGameSettingsBase_Controls_SetTapToSprint");
static_assert(offsetof(BRGameSettingsBase_Controls_SetTapToSprint, bNewTapToSprint) == 0x000000, "Member 'BRGameSettingsBase_Controls_SetTapToSprint::bNewTapToSprint' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.GetActionBindingDetails
// 0x0040 (0x0040 - 0x0000)
struct BRGameSettingsBase_Controls_GetActionBindingDetails final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRInputBindingDetails_Action          ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_GetActionBindingDetails) == 0x000008, "Wrong alignment on BRGameSettingsBase_Controls_GetActionBindingDetails");
static_assert(sizeof(BRGameSettingsBase_Controls_GetActionBindingDetails) == 0x000040, "Wrong size on BRGameSettingsBase_Controls_GetActionBindingDetails");
static_assert(offsetof(BRGameSettingsBase_Controls_GetActionBindingDetails, ActionName) == 0x000000, "Member 'BRGameSettingsBase_Controls_GetActionBindingDetails::ActionName' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_GetActionBindingDetails, ReturnValue) == 0x000008, "Member 'BRGameSettingsBase_Controls_GetActionBindingDetails::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.GetAxisBindingDetails
// 0x00A8 (0x00A8 - 0x0000)
struct BRGameSettingsBase_Controls_GetAxisBindingDetails final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRInputBindingDetails_Axis            ReturnValue;                                       // 0x0008(0x00A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_GetAxisBindingDetails) == 0x000008, "Wrong alignment on BRGameSettingsBase_Controls_GetAxisBindingDetails");
static_assert(sizeof(BRGameSettingsBase_Controls_GetAxisBindingDetails) == 0x0000A8, "Wrong size on BRGameSettingsBase_Controls_GetAxisBindingDetails");
static_assert(offsetof(BRGameSettingsBase_Controls_GetAxisBindingDetails, AxisName) == 0x000000, "Member 'BRGameSettingsBase_Controls_GetAxisBindingDetails::AxisName' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_GetAxisBindingDetails, ReturnValue) == 0x000008, "Member 'BRGameSettingsBase_Controls_GetAxisBindingDetails::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.GetControllerInputDeviceType
// 0x0001 (0x0001 - 0x0000)
struct BRGameSettingsBase_Controls_GetControllerInputDeviceType final
{
public:
	EBRInputDeviceType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_GetControllerInputDeviceType) == 0x000001, "Wrong alignment on BRGameSettingsBase_Controls_GetControllerInputDeviceType");
static_assert(sizeof(BRGameSettingsBase_Controls_GetControllerInputDeviceType) == 0x000001, "Wrong size on BRGameSettingsBase_Controls_GetControllerInputDeviceType");
static_assert(offsetof(BRGameSettingsBase_Controls_GetControllerInputDeviceType, ReturnValue) == 0x000000, "Member 'BRGameSettingsBase_Controls_GetControllerInputDeviceType::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.GetCurrentInputDeviceType
// 0x0001 (0x0001 - 0x0000)
struct BRGameSettingsBase_Controls_GetCurrentInputDeviceType final
{
public:
	EBRInputDeviceType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_Controls_GetCurrentInputDeviceType) == 0x000001, "Wrong alignment on BRGameSettingsBase_Controls_GetCurrentInputDeviceType");
static_assert(sizeof(BRGameSettingsBase_Controls_GetCurrentInputDeviceType) == 0x000001, "Wrong size on BRGameSettingsBase_Controls_GetCurrentInputDeviceType");
static_assert(offsetof(BRGameSettingsBase_Controls_GetCurrentInputDeviceType, ReturnValue) == 0x000000, "Member 'BRGameSettingsBase_Controls_GetCurrentInputDeviceType::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.IsActionCurrentlyBound
// 0x000C (0x000C - 0x0000)
struct BRGameSettingsBase_Controls_IsActionCurrentlyBound final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameSettingsBase_Controls_IsActionCurrentlyBound) == 0x000004, "Wrong alignment on BRGameSettingsBase_Controls_IsActionCurrentlyBound");
static_assert(sizeof(BRGameSettingsBase_Controls_IsActionCurrentlyBound) == 0x00000C, "Wrong size on BRGameSettingsBase_Controls_IsActionCurrentlyBound");
static_assert(offsetof(BRGameSettingsBase_Controls_IsActionCurrentlyBound, ActionName) == 0x000000, "Member 'BRGameSettingsBase_Controls_IsActionCurrentlyBound::ActionName' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_IsActionCurrentlyBound, ReturnValue) == 0x000008, "Member 'BRGameSettingsBase_Controls_IsActionCurrentlyBound::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_Controls.IsAxisCurrentlyBound
// 0x000C (0x000C - 0x0000)
struct BRGameSettingsBase_Controls_IsAxisCurrentlyBound final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameSettingsBase_Controls_IsAxisCurrentlyBound) == 0x000004, "Wrong alignment on BRGameSettingsBase_Controls_IsAxisCurrentlyBound");
static_assert(sizeof(BRGameSettingsBase_Controls_IsAxisCurrentlyBound) == 0x00000C, "Wrong size on BRGameSettingsBase_Controls_IsAxisCurrentlyBound");
static_assert(offsetof(BRGameSettingsBase_Controls_IsAxisCurrentlyBound, ActionName) == 0x000000, "Member 'BRGameSettingsBase_Controls_IsAxisCurrentlyBound::ActionName' has a wrong offset!");
static_assert(offsetof(BRGameSettingsBase_Controls_IsAxisCurrentlyBound, ReturnValue) == 0x000008, "Member 'BRGameSettingsBase_Controls_IsAxisCurrentlyBound::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_General.SetDisableChatMessages
// 0x0001 (0x0001 - 0x0000)
struct BRGameSettingsBase_General_SetDisableChatMessages final
{
public:
	bool                                          bNewDisableChatMessages;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_General_SetDisableChatMessages) == 0x000001, "Wrong alignment on BRGameSettingsBase_General_SetDisableChatMessages");
static_assert(sizeof(BRGameSettingsBase_General_SetDisableChatMessages) == 0x000001, "Wrong size on BRGameSettingsBase_General_SetDisableChatMessages");
static_assert(offsetof(BRGameSettingsBase_General_SetDisableChatMessages, bNewDisableChatMessages) == 0x000000, "Member 'BRGameSettingsBase_General_SetDisableChatMessages::bNewDisableChatMessages' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_General.SetEnablePrivateRelays
// 0x0001 (0x0001 - 0x0000)
struct BRGameSettingsBase_General_SetEnablePrivateRelays final
{
public:
	bool                                          bNewEnablePrivateRelays;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_General_SetEnablePrivateRelays) == 0x000001, "Wrong alignment on BRGameSettingsBase_General_SetEnablePrivateRelays");
static_assert(sizeof(BRGameSettingsBase_General_SetEnablePrivateRelays) == 0x000001, "Wrong size on BRGameSettingsBase_General_SetEnablePrivateRelays");
static_assert(offsetof(BRGameSettingsBase_General_SetEnablePrivateRelays, bNewEnablePrivateRelays) == 0x000000, "Member 'BRGameSettingsBase_General_SetEnablePrivateRelays::bNewEnablePrivateRelays' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_General.SetForceThirdPersonOnDeath
// 0x0001 (0x0001 - 0x0000)
struct BRGameSettingsBase_General_SetForceThirdPersonOnDeath final
{
public:
	bool                                          bNewForceThirdPersonOnDeath;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_General_SetForceThirdPersonOnDeath) == 0x000001, "Wrong alignment on BRGameSettingsBase_General_SetForceThirdPersonOnDeath");
static_assert(sizeof(BRGameSettingsBase_General_SetForceThirdPersonOnDeath) == 0x000001, "Wrong size on BRGameSettingsBase_General_SetForceThirdPersonOnDeath");
static_assert(offsetof(BRGameSettingsBase_General_SetForceThirdPersonOnDeath, bNewForceThirdPersonOnDeath) == 0x000000, "Member 'BRGameSettingsBase_General_SetForceThirdPersonOnDeath::bNewForceThirdPersonOnDeath' has a wrong offset!");

// Function Brickadia.BRGameSettingsBase_General.SetRecentBrickListLimit
// 0x0004 (0x0004 - 0x0000)
struct BRGameSettingsBase_General_SetRecentBrickListLimit final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameSettingsBase_General_SetRecentBrickListLimit) == 0x000004, "Wrong alignment on BRGameSettingsBase_General_SetRecentBrickListLimit");
static_assert(sizeof(BRGameSettingsBase_General_SetRecentBrickListLimit) == 0x000004, "Wrong size on BRGameSettingsBase_General_SetRecentBrickListLimit");
static_assert(offsetof(BRGameSettingsBase_General_SetRecentBrickListLimit, Limit) == 0x000000, "Member 'BRGameSettingsBase_General_SetRecentBrickListLimit::Limit' has a wrong offset!");

// Function Brickadia.BRGameStateBase.Ban
// 0x0038 (0x0038 - 0x0000)
struct BRGameStateBase_Ban final
{
public:
	struct FBRGuid                                BannedId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expiry;                                            // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                BannerId;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_Ban) == 0x000008, "Wrong alignment on BRGameStateBase_Ban");
static_assert(sizeof(BRGameStateBase_Ban) == 0x000038, "Wrong size on BRGameStateBase_Ban");
static_assert(offsetof(BRGameStateBase_Ban, BannedId) == 0x000000, "Member 'BRGameStateBase_Ban::BannedId' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_Ban, Expiry) == 0x000010, "Member 'BRGameStateBase_Ban::Expiry' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_Ban, BannerId) == 0x000018, "Member 'BRGameStateBase_Ban::BannerId' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_Ban, Reason) == 0x000028, "Member 'BRGameStateBase_Ban::Reason' has a wrong offset!");

// Function Brickadia.BRGameStateBase.ChangeEnvironmentSettingsGroup
// 0x0020 (0x0020 - 0x0000)
struct BRGameStateBase_ChangeEnvironmentSettingsGroup final
{
public:
	class ABRPlayerController*                    UpdaterController;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SettingsGroupName;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_ChangeEnvironmentSettingsGroup) == 0x000008, "Wrong alignment on BRGameStateBase_ChangeEnvironmentSettingsGroup");
static_assert(sizeof(BRGameStateBase_ChangeEnvironmentSettingsGroup) == 0x000020, "Wrong size on BRGameStateBase_ChangeEnvironmentSettingsGroup");
static_assert(offsetof(BRGameStateBase_ChangeEnvironmentSettingsGroup, UpdaterController) == 0x000000, "Member 'BRGameStateBase_ChangeEnvironmentSettingsGroup::UpdaterController' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_ChangeEnvironmentSettingsGroup, SettingsGroupName) == 0x000008, "Member 'BRGameStateBase_ChangeEnvironmentSettingsGroup::SettingsGroupName' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_ChangeEnvironmentSettingsGroup, Changelist) == 0x000010, "Member 'BRGameStateBase_ChangeEnvironmentSettingsGroup::Changelist' has a wrong offset!");

// Function Brickadia.BRGameStateBase.CreateMinigame
// 0x0010 (0x0010 - 0x0000)
struct BRGameStateBase_CreateMinigame final
{
public:
	class ABRPlayerController*                    MinigameOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_CreateMinigame) == 0x000008, "Wrong alignment on BRGameStateBase_CreateMinigame");
static_assert(sizeof(BRGameStateBase_CreateMinigame) == 0x000010, "Wrong size on BRGameStateBase_CreateMinigame");
static_assert(offsetof(BRGameStateBase_CreateMinigame, MinigameOwner) == 0x000000, "Member 'BRGameStateBase_CreateMinigame::MinigameOwner' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_CreateMinigame, ReturnValue) == 0x000008, "Member 'BRGameStateBase_CreateMinigame::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.CreateMinigameForId
// 0x0014 (0x0014 - 0x0000)
struct BRGameStateBase_CreateMinigameForId final
{
public:
	struct FBRGuid                                MinigameOwnerId;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_CreateMinigameForId) == 0x000004, "Wrong alignment on BRGameStateBase_CreateMinigameForId");
static_assert(sizeof(BRGameStateBase_CreateMinigameForId) == 0x000014, "Wrong size on BRGameStateBase_CreateMinigameForId");
static_assert(offsetof(BRGameStateBase_CreateMinigameForId, MinigameOwnerId) == 0x000000, "Member 'BRGameStateBase_CreateMinigameForId::MinigameOwnerId' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_CreateMinigameForId, ReturnValue) == 0x000010, "Member 'BRGameStateBase_CreateMinigameForId::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.DestroyMinigame
// 0x0004 (0x0004 - 0x0000)
struct BRGameStateBase_DestroyMinigame final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_DestroyMinigame) == 0x000004, "Wrong alignment on BRGameStateBase_DestroyMinigame");
static_assert(sizeof(BRGameStateBase_DestroyMinigame) == 0x000004, "Wrong size on BRGameStateBase_DestroyMinigame");
static_assert(offsetof(BRGameStateBase_DestroyMinigame, MinigameId) == 0x000000, "Member 'BRGameStateBase_DestroyMinigame::MinigameId' has a wrong offset!");

// Function Brickadia.BRGameStateBase.FindUserId
// 0x0028 (0x0028 - 0x0000)
struct BRGameStateBase_FindUserId final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                OutId;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_FindUserId) == 0x000008, "Wrong alignment on BRGameStateBase_FindUserId");
static_assert(sizeof(BRGameStateBase_FindUserId) == 0x000028, "Wrong size on BRGameStateBase_FindUserId");
static_assert(offsetof(BRGameStateBase_FindUserId, Name_0) == 0x000000, "Member 'BRGameStateBase_FindUserId::Name_0' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_FindUserId, OutId) == 0x000010, "Member 'BRGameStateBase_FindUserId::OutId' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_FindUserId, ReturnValue) == 0x000020, "Member 'BRGameStateBase_FindUserId::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetBan
// 0x0040 (0x0040 - 0x0000)
struct BRGameStateBase_GetBan final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBan                                   ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetBan) == 0x000008, "Wrong alignment on BRGameStateBase_GetBan");
static_assert(sizeof(BRGameStateBase_GetBan) == 0x000040, "Wrong size on BRGameStateBase_GetBan");
static_assert(offsetof(BRGameStateBase_GetBan, ID) == 0x000000, "Member 'BRGameStateBase_GetBan::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetBan, ReturnValue) == 0x000010, "Member 'BRGameStateBase_GetBan::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetLastKnownCustomRoles
// 0x0020 (0x0020 - 0x0000)
struct BRGameStateBase_GetLastKnownCustomRoles final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBRPermissionsRole*>             ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetLastKnownCustomRoles) == 0x000008, "Wrong alignment on BRGameStateBase_GetLastKnownCustomRoles");
static_assert(sizeof(BRGameStateBase_GetLastKnownCustomRoles) == 0x000020, "Wrong size on BRGameStateBase_GetLastKnownCustomRoles");
static_assert(offsetof(BRGameStateBase_GetLastKnownCustomRoles, ID) == 0x000000, "Member 'BRGameStateBase_GetLastKnownCustomRoles::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownCustomRoles, ReturnValue) == 0x000010, "Member 'BRGameStateBase_GetLastKnownCustomRoles::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetLastKnownDisplayName
// 0x0020 (0x0020 - 0x0000)
struct BRGameStateBase_GetLastKnownDisplayName final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetLastKnownDisplayName) == 0x000008, "Wrong alignment on BRGameStateBase_GetLastKnownDisplayName");
static_assert(sizeof(BRGameStateBase_GetLastKnownDisplayName) == 0x000020, "Wrong size on BRGameStateBase_GetLastKnownDisplayName");
static_assert(offsetof(BRGameStateBase_GetLastKnownDisplayName, ID) == 0x000000, "Member 'BRGameStateBase_GetLastKnownDisplayName::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownDisplayName, ReturnValue) == 0x000010, "Member 'BRGameStateBase_GetLastKnownDisplayName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetLastKnownHadPermission
// 0x001C (0x001C - 0x0000)
struct BRGameStateBase_GetLastKnownHadPermission final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Permission;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_GetLastKnownHadPermission) == 0x000004, "Wrong alignment on BRGameStateBase_GetLastKnownHadPermission");
static_assert(sizeof(BRGameStateBase_GetLastKnownHadPermission) == 0x00001C, "Wrong size on BRGameStateBase_GetLastKnownHadPermission");
static_assert(offsetof(BRGameStateBase_GetLastKnownHadPermission, ID) == 0x000000, "Member 'BRGameStateBase_GetLastKnownHadPermission::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownHadPermission, Permission) == 0x000010, "Member 'BRGameStateBase_GetLastKnownHadPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownHadPermission, ReturnValue) == 0x000018, "Member 'BRGameStateBase_GetLastKnownHadPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetLastKnownHadRole
// 0x0028 (0x0028 - 0x0000)
struct BRGameStateBase_GetLastKnownHadRole final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_GetLastKnownHadRole) == 0x000008, "Wrong alignment on BRGameStateBase_GetLastKnownHadRole");
static_assert(sizeof(BRGameStateBase_GetLastKnownHadRole) == 0x000028, "Wrong size on BRGameStateBase_GetLastKnownHadRole");
static_assert(offsetof(BRGameStateBase_GetLastKnownHadRole, ID) == 0x000000, "Member 'BRGameStateBase_GetLastKnownHadRole::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownHadRole, RoleId) == 0x000010, "Member 'BRGameStateBase_GetLastKnownHadRole::RoleId' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownHadRole, ReturnValue) == 0x000020, "Member 'BRGameStateBase_GetLastKnownHadRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetLastKnownHighestRole
// 0x0018 (0x0018 - 0x0000)
struct BRGameStateBase_GetLastKnownHighestRole final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRPermissionsRole*                     ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetLastKnownHighestRole) == 0x000008, "Wrong alignment on BRGameStateBase_GetLastKnownHighestRole");
static_assert(sizeof(BRGameStateBase_GetLastKnownHighestRole) == 0x000018, "Wrong size on BRGameStateBase_GetLastKnownHighestRole");
static_assert(offsetof(BRGameStateBase_GetLastKnownHighestRole, ID) == 0x000000, "Member 'BRGameStateBase_GetLastKnownHighestRole::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownHighestRole, ReturnValue) == 0x000010, "Member 'BRGameStateBase_GetLastKnownHighestRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetLastKnownName
// 0x0020 (0x0020 - 0x0000)
struct BRGameStateBase_GetLastKnownName final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetLastKnownName) == 0x000008, "Wrong alignment on BRGameStateBase_GetLastKnownName");
static_assert(sizeof(BRGameStateBase_GetLastKnownName) == 0x000020, "Wrong size on BRGameStateBase_GetLastKnownName");
static_assert(offsetof(BRGameStateBase_GetLastKnownName, ID) == 0x000000, "Member 'BRGameStateBase_GetLastKnownName::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownName, ReturnValue) == 0x000010, "Member 'BRGameStateBase_GetLastKnownName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetLastKnownNameColor
// 0x0014 (0x0014 - 0x0000)
struct BRGameStateBase_GetLastKnownNameColor final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetLastKnownNameColor) == 0x000004, "Wrong alignment on BRGameStateBase_GetLastKnownNameColor");
static_assert(sizeof(BRGameStateBase_GetLastKnownNameColor) == 0x000014, "Wrong size on BRGameStateBase_GetLastKnownNameColor");
static_assert(offsetof(BRGameStateBase_GetLastKnownNameColor, ID) == 0x000000, "Member 'BRGameStateBase_GetLastKnownNameColor::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownNameColor, ReturnValue) == 0x000010, "Member 'BRGameStateBase_GetLastKnownNameColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetLastKnownRoles
// 0x0020 (0x0020 - 0x0000)
struct BRGameStateBase_GetLastKnownRoles final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBRPermissionsRole*>             ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetLastKnownRoles) == 0x000008, "Wrong alignment on BRGameStateBase_GetLastKnownRoles");
static_assert(sizeof(BRGameStateBase_GetLastKnownRoles) == 0x000020, "Wrong size on BRGameStateBase_GetLastKnownRoles");
static_assert(offsetof(BRGameStateBase_GetLastKnownRoles, ID) == 0x000000, "Member 'BRGameStateBase_GetLastKnownRoles::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownRoles, ReturnValue) == 0x000010, "Member 'BRGameStateBase_GetLastKnownRoles::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetLastKnownUserName
// 0x0020 (0x0020 - 0x0000)
struct BRGameStateBase_GetLastKnownUserName final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetLastKnownUserName) == 0x000008, "Wrong alignment on BRGameStateBase_GetLastKnownUserName");
static_assert(sizeof(BRGameStateBase_GetLastKnownUserName) == 0x000020, "Wrong size on BRGameStateBase_GetLastKnownUserName");
static_assert(offsetof(BRGameStateBase_GetLastKnownUserName, ID) == 0x000000, "Member 'BRGameStateBase_GetLastKnownUserName::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetLastKnownUserName, ReturnValue) == 0x000010, "Member 'BRGameStateBase_GetLastKnownUserName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.IdOrRegisterBrickOwner
// 0x0010 (0x0010 - 0x0000)
struct BRGameStateBase_IdOrRegisterBrickOwner final
{
public:
	const class ABRPlayerController*              BrickOwner;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_IdOrRegisterBrickOwner) == 0x000008, "Wrong alignment on BRGameStateBase_IdOrRegisterBrickOwner");
static_assert(sizeof(BRGameStateBase_IdOrRegisterBrickOwner) == 0x000010, "Wrong size on BRGameStateBase_IdOrRegisterBrickOwner");
static_assert(offsetof(BRGameStateBase_IdOrRegisterBrickOwner, BrickOwner) == 0x000000, "Member 'BRGameStateBase_IdOrRegisterBrickOwner::BrickOwner' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_IdOrRegisterBrickOwner, ReturnValue) == 0x000008, "Member 'BRGameStateBase_IdOrRegisterBrickOwner::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.IdOrRegisterBrickOwner_NotPresent
// 0x0038 (0x0038 - 0x0000)
struct BRGameStateBase_IdOrRegisterBrickOwner_NotPresent final
{
public:
	struct FBrickOwnerData                        BrickOwnerData;                                    // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_IdOrRegisterBrickOwner_NotPresent) == 0x000008, "Wrong alignment on BRGameStateBase_IdOrRegisterBrickOwner_NotPresent");
static_assert(sizeof(BRGameStateBase_IdOrRegisterBrickOwner_NotPresent) == 0x000038, "Wrong size on BRGameStateBase_IdOrRegisterBrickOwner_NotPresent");
static_assert(offsetof(BRGameStateBase_IdOrRegisterBrickOwner_NotPresent, BrickOwnerData) == 0x000000, "Member 'BRGameStateBase_IdOrRegisterBrickOwner_NotPresent::BrickOwnerData' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_IdOrRegisterBrickOwner_NotPresent, ReturnValue) == 0x000030, "Member 'BRGameStateBase_IdOrRegisterBrickOwner_NotPresent::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.IsBanned
// 0x0014 (0x0014 - 0x0000)
struct BRGameStateBase_IsBanned final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_IsBanned) == 0x000004, "Wrong alignment on BRGameStateBase_IsBanned");
static_assert(sizeof(BRGameStateBase_IsBanned) == 0x000014, "Wrong size on BRGameStateBase_IsBanned");
static_assert(offsetof(BRGameStateBase_IsBanned, ID) == 0x000000, "Member 'BRGameStateBase_IsBanned::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_IsBanned, ReturnValue) == 0x000010, "Member 'BRGameStateBase_IsBanned::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.LoadPlayerData
// 0x0008 (0x0008 - 0x0000)
struct BRGameStateBase_LoadPlayerData final
{
public:
	class ABRPlayerState*                         TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_LoadPlayerData) == 0x000008, "Wrong alignment on BRGameStateBase_LoadPlayerData");
static_assert(sizeof(BRGameStateBase_LoadPlayerData) == 0x000008, "Wrong size on BRGameStateBase_LoadPlayerData");
static_assert(offsetof(BRGameStateBase_LoadPlayerData, TARGET) == 0x000000, "Member 'BRGameStateBase_LoadPlayerData::TARGET' has a wrong offset!");

// Function Brickadia.BRGameStateBase.MulticastPlaySound2D
// 0x0020 (0x0020 - 0x0000)
struct BRGameStateBase_MulticastPlaySound2D final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_MulticastPlaySound2D) == 0x000008, "Wrong alignment on BRGameStateBase_MulticastPlaySound2D");
static_assert(sizeof(BRGameStateBase_MulticastPlaySound2D) == 0x000020, "Wrong size on BRGameStateBase_MulticastPlaySound2D");
static_assert(offsetof(BRGameStateBase_MulticastPlaySound2D, Sound) == 0x000000, "Member 'BRGameStateBase_MulticastPlaySound2D::Sound' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySound2D, VolumeMultiplier) == 0x000008, "Member 'BRGameStateBase_MulticastPlaySound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySound2D, PitchMultiplier) == 0x00000C, "Member 'BRGameStateBase_MulticastPlaySound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySound2D, StartTime) == 0x000010, "Member 'BRGameStateBase_MulticastPlaySound2D::StartTime' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySound2D, ConcurrencySettings) == 0x000018, "Member 'BRGameStateBase_MulticastPlaySound2D::ConcurrencySettings' has a wrong offset!");

// Function Brickadia.BRGameStateBase.MulticastPlaySoundAtLocation
// 0x0060 (0x0060 - 0x0000)
struct BRGameStateBase_MulticastPlaySoundAtLocation final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwningActor;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_MulticastPlaySoundAtLocation) == 0x000008, "Wrong alignment on BRGameStateBase_MulticastPlaySoundAtLocation");
static_assert(sizeof(BRGameStateBase_MulticastPlaySoundAtLocation) == 0x000060, "Wrong size on BRGameStateBase_MulticastPlaySoundAtLocation");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAtLocation, Sound) == 0x000000, "Member 'BRGameStateBase_MulticastPlaySoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAtLocation, Location) == 0x000008, "Member 'BRGameStateBase_MulticastPlaySoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAtLocation, Rotation) == 0x000020, "Member 'BRGameStateBase_MulticastPlaySoundAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAtLocation, VolumeMultiplier) == 0x000038, "Member 'BRGameStateBase_MulticastPlaySoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAtLocation, PitchMultiplier) == 0x00003C, "Member 'BRGameStateBase_MulticastPlaySoundAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAtLocation, StartTime) == 0x000040, "Member 'BRGameStateBase_MulticastPlaySoundAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAtLocation, AttenuationSettings) == 0x000048, "Member 'BRGameStateBase_MulticastPlaySoundAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAtLocation, ConcurrencySettings) == 0x000050, "Member 'BRGameStateBase_MulticastPlaySoundAtLocation::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAtLocation, OwningActor) == 0x000058, "Member 'BRGameStateBase_MulticastPlaySoundAtLocation::OwningActor' has a wrong offset!");

// Function Brickadia.BRGameStateBase.MulticastPlaySoundAttached
// 0x0068 (0x0068 - 0x0000)
struct BRGameStateBase_MulticastPlaySoundAttached final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwningActor;                                       // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_MulticastPlaySoundAttached) == 0x000008, "Wrong alignment on BRGameStateBase_MulticastPlaySoundAttached");
static_assert(sizeof(BRGameStateBase_MulticastPlaySoundAttached) == 0x000068, "Wrong size on BRGameStateBase_MulticastPlaySoundAttached");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached, Sound) == 0x000000, "Member 'BRGameStateBase_MulticastPlaySoundAttached::Sound' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached, AttachToComponent) == 0x000008, "Member 'BRGameStateBase_MulticastPlaySoundAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached, Location) == 0x000010, "Member 'BRGameStateBase_MulticastPlaySoundAttached::Location' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached, Rotation) == 0x000028, "Member 'BRGameStateBase_MulticastPlaySoundAttached::Rotation' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached, VolumeMultiplier) == 0x000040, "Member 'BRGameStateBase_MulticastPlaySoundAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached, PitchMultiplier) == 0x000044, "Member 'BRGameStateBase_MulticastPlaySoundAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached, StartTime) == 0x000048, "Member 'BRGameStateBase_MulticastPlaySoundAttached::StartTime' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached, AttenuationSettings) == 0x000050, "Member 'BRGameStateBase_MulticastPlaySoundAttached::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached, ConcurrencySettings) == 0x000058, "Member 'BRGameStateBase_MulticastPlaySoundAttached::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached, OwningActor) == 0x000060, "Member 'BRGameStateBase_MulticastPlaySoundAttached::OwningActor' has a wrong offset!");

// Function Brickadia.BRGameStateBase.MulticastPlaySoundAttached2
// 0x0448 (0x0448 - 0x0000)
struct BRGameStateBase_MulticastPlaySoundAttached2 final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundAttenuationSettings              AttenuationSettings;                               // 0x0050(0x03D0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSoundConcurrencySettings              ConcurrencySettings;                               // 0x0420(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 OwningActor;                                       // 0x0440(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_MulticastPlaySoundAttached2) == 0x000008, "Wrong alignment on BRGameStateBase_MulticastPlaySoundAttached2");
static_assert(sizeof(BRGameStateBase_MulticastPlaySoundAttached2) == 0x000448, "Wrong size on BRGameStateBase_MulticastPlaySoundAttached2");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached2, Sound) == 0x000000, "Member 'BRGameStateBase_MulticastPlaySoundAttached2::Sound' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached2, AttachToComponent) == 0x000008, "Member 'BRGameStateBase_MulticastPlaySoundAttached2::AttachToComponent' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached2, Location) == 0x000010, "Member 'BRGameStateBase_MulticastPlaySoundAttached2::Location' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached2, Rotation) == 0x000028, "Member 'BRGameStateBase_MulticastPlaySoundAttached2::Rotation' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached2, VolumeMultiplier) == 0x000040, "Member 'BRGameStateBase_MulticastPlaySoundAttached2::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached2, PitchMultiplier) == 0x000044, "Member 'BRGameStateBase_MulticastPlaySoundAttached2::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached2, StartTime) == 0x000048, "Member 'BRGameStateBase_MulticastPlaySoundAttached2::StartTime' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached2, AttenuationSettings) == 0x000050, "Member 'BRGameStateBase_MulticastPlaySoundAttached2::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached2, ConcurrencySettings) == 0x000420, "Member 'BRGameStateBase_MulticastPlaySoundAttached2::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPlaySoundAttached2, OwningActor) == 0x000440, "Member 'BRGameStateBase_MulticastPlaySoundAttached2::OwningActor' has a wrong offset!");

// Function Brickadia.BRGameStateBase.MulticastPushChatMessage
// 0x0020 (0x0020 - 0x0000)
struct BRGameStateBase_MulticastPushChatMessage final
{
public:
	class FString                                 ChatMessage;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                SenderId;                                          // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_MulticastPushChatMessage) == 0x000008, "Wrong alignment on BRGameStateBase_MulticastPushChatMessage");
static_assert(sizeof(BRGameStateBase_MulticastPushChatMessage) == 0x000020, "Wrong size on BRGameStateBase_MulticastPushChatMessage");
static_assert(offsetof(BRGameStateBase_MulticastPushChatMessage, ChatMessage) == 0x000000, "Member 'BRGameStateBase_MulticastPushChatMessage::ChatMessage' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastPushChatMessage, SenderId) == 0x000010, "Member 'BRGameStateBase_MulticastPushChatMessage::SenderId' has a wrong offset!");

// Function Brickadia.BRGameStateBase.MulticastSetNameTyping
// 0x0018 (0x0018 - 0x0000)
struct BRGameStateBase_MulticastSetNameTyping final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTyping;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_MulticastSetNameTyping) == 0x000008, "Wrong alignment on BRGameStateBase_MulticastSetNameTyping");
static_assert(sizeof(BRGameStateBase_MulticastSetNameTyping) == 0x000018, "Wrong size on BRGameStateBase_MulticastSetNameTyping");
static_assert(offsetof(BRGameStateBase_MulticastSetNameTyping, Name_0) == 0x000000, "Member 'BRGameStateBase_MulticastSetNameTyping::Name_0' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_MulticastSetNameTyping, bIsTyping) == 0x000010, "Member 'BRGameStateBase_MulticastSetNameTyping::bIsTyping' has a wrong offset!");

// Function Brickadia.BRGameStateBase.SavePlayerData
// 0x0008 (0x0008 - 0x0000)
struct BRGameStateBase_SavePlayerData final
{
public:
	class ABRPlayerState*                         TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_SavePlayerData) == 0x000008, "Wrong alignment on BRGameStateBase_SavePlayerData");
static_assert(sizeof(BRGameStateBase_SavePlayerData) == 0x000008, "Wrong size on BRGameStateBase_SavePlayerData");
static_assert(offsetof(BRGameStateBase_SavePlayerData, TARGET) == 0x000000, "Member 'BRGameStateBase_SavePlayerData::TARGET' has a wrong offset!");

// Function Brickadia.BRGameStateBase.SetHasRoleOffline
// 0x0028 (0x0028 - 0x0000)
struct BRGameStateBase_SetHasRoleOffline final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGrant;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_SetHasRoleOffline) == 0x000008, "Wrong alignment on BRGameStateBase_SetHasRoleOffline");
static_assert(sizeof(BRGameStateBase_SetHasRoleOffline) == 0x000028, "Wrong size on BRGameStateBase_SetHasRoleOffline");
static_assert(offsetof(BRGameStateBase_SetHasRoleOffline, ID) == 0x000000, "Member 'BRGameStateBase_SetHasRoleOffline::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_SetHasRoleOffline, RoleId) == 0x000010, "Member 'BRGameStateBase_SetHasRoleOffline::RoleId' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_SetHasRoleOffline, bGrant) == 0x000020, "Member 'BRGameStateBase_SetHasRoleOffline::bGrant' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_SetHasRoleOffline, ReturnValue) == 0x000021, "Member 'BRGameStateBase_SetHasRoleOffline::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.Unban
// 0x0010 (0x0010 - 0x0000)
struct BRGameStateBase_Unban final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_Unban) == 0x000004, "Wrong alignment on BRGameStateBase_Unban");
static_assert(sizeof(BRGameStateBase_Unban) == 0x000010, "Wrong size on BRGameStateBase_Unban");
static_assert(offsetof(BRGameStateBase_Unban, ID) == 0x000000, "Member 'BRGameStateBase_Unban::ID' has a wrong offset!");

// Function Brickadia.BRGameStateBase.UpdateReplicatedServerData
// 0x0010 (0x0010 - 0x0000)
struct BRGameStateBase_UpdateReplicatedServerData final
{
public:
	class FString                                 InviteCode;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_UpdateReplicatedServerData) == 0x000008, "Wrong alignment on BRGameStateBase_UpdateReplicatedServerData");
static_assert(sizeof(BRGameStateBase_UpdateReplicatedServerData) == 0x000010, "Wrong size on BRGameStateBase_UpdateReplicatedServerData");
static_assert(offsetof(BRGameStateBase_UpdateReplicatedServerData, InviteCode) == 0x000000, "Member 'BRGameStateBase_UpdateReplicatedServerData::InviteCode' has a wrong offset!");

// Function Brickadia.BRGameStateBase.FindClient
// 0x0018 (0x0018 - 0x0000)
struct BRGameStateBase_FindClient final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerController*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_FindClient) == 0x000008, "Wrong alignment on BRGameStateBase_FindClient");
static_assert(sizeof(BRGameStateBase_FindClient) == 0x000018, "Wrong size on BRGameStateBase_FindClient");
static_assert(offsetof(BRGameStateBase_FindClient, Name_0) == 0x000000, "Member 'BRGameStateBase_FindClient::Name_0' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_FindClient, ReturnValue) == 0x000010, "Member 'BRGameStateBase_FindClient::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.FindClientByUserId
// 0x0018 (0x0018 - 0x0000)
struct BRGameStateBase_FindClientByUserId final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerController*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_FindClientByUserId) == 0x000008, "Wrong alignment on BRGameStateBase_FindClientByUserId");
static_assert(sizeof(BRGameStateBase_FindClientByUserId) == 0x000018, "Wrong size on BRGameStateBase_FindClientByUserId");
static_assert(offsetof(BRGameStateBase_FindClientByUserId, ID) == 0x000000, "Member 'BRGameStateBase_FindClientByUserId::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_FindClientByUserId, ReturnValue) == 0x000010, "Member 'BRGameStateBase_FindClientByUserId::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.FindClientState
// 0x0018 (0x0018 - 0x0000)
struct BRGameStateBase_FindClientState final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_FindClientState) == 0x000008, "Wrong alignment on BRGameStateBase_FindClientState");
static_assert(sizeof(BRGameStateBase_FindClientState) == 0x000018, "Wrong size on BRGameStateBase_FindClientState");
static_assert(offsetof(BRGameStateBase_FindClientState, Name_0) == 0x000000, "Member 'BRGameStateBase_FindClientState::Name_0' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_FindClientState, ReturnValue) == 0x000010, "Member 'BRGameStateBase_FindClientState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.FindClientStateByUserId
// 0x0018 (0x0018 - 0x0000)
struct BRGameStateBase_FindClientStateByUserId final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_FindClientStateByUserId) == 0x000008, "Wrong alignment on BRGameStateBase_FindClientStateByUserId");
static_assert(sizeof(BRGameStateBase_FindClientStateByUserId) == 0x000018, "Wrong size on BRGameStateBase_FindClientStateByUserId");
static_assert(offsetof(BRGameStateBase_FindClientStateByUserId, ID) == 0x000000, "Member 'BRGameStateBase_FindClientStateByUserId::ID' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_FindClientStateByUserId, ReturnValue) == 0x000010, "Member 'BRGameStateBase_FindClientStateByUserId::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetAllKnownPlayerGuids
// 0x0018 (0x0018 - 0x0000)
struct BRGameStateBase_GetAllKnownPlayerGuids final
{
public:
	TArray<struct FBRGuid>                        inArray;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_GetAllKnownPlayerGuids) == 0x000008, "Wrong alignment on BRGameStateBase_GetAllKnownPlayerGuids");
static_assert(sizeof(BRGameStateBase_GetAllKnownPlayerGuids) == 0x000018, "Wrong size on BRGameStateBase_GetAllKnownPlayerGuids");
static_assert(offsetof(BRGameStateBase_GetAllKnownPlayerGuids, inArray) == 0x000000, "Member 'BRGameStateBase_GetAllKnownPlayerGuids::inArray' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetAllKnownPlayerGuids, ReturnValue) == 0x000010, "Member 'BRGameStateBase_GetAllKnownPlayerGuids::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetBanList
// 0x0050 (0x0050 - 0x0000)
struct BRGameStateBase_GetBanList final
{
public:
	TMap<struct FBRGuid, struct FBan>             ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetBanList) == 0x000008, "Wrong alignment on BRGameStateBase_GetBanList");
static_assert(sizeof(BRGameStateBase_GetBanList) == 0x000050, "Wrong size on BRGameStateBase_GetBanList");
static_assert(offsetof(BRGameStateBase_GetBanList, ReturnValue) == 0x000000, "Member 'BRGameStateBase_GetBanList::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetBrickOwnerData
// 0x0038 (0x0038 - 0x0000)
struct BRGameStateBase_GetBrickOwnerData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickOwnerData                        ReturnValue;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetBrickOwnerData) == 0x000008, "Wrong alignment on BRGameStateBase_GetBrickOwnerData");
static_assert(sizeof(BRGameStateBase_GetBrickOwnerData) == 0x000038, "Wrong size on BRGameStateBase_GetBrickOwnerData");
static_assert(offsetof(BRGameStateBase_GetBrickOwnerData, Index_0) == 0x000000, "Member 'BRGameStateBase_GetBrickOwnerData::Index_0' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetBrickOwnerData, ReturnValue) == 0x000008, "Member 'BRGameStateBase_GetBrickOwnerData::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetBrickOwnerTableSize
// 0x0004 (0x0004 - 0x0000)
struct BRGameStateBase_GetBrickOwnerTableSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetBrickOwnerTableSize) == 0x000004, "Wrong alignment on BRGameStateBase_GetBrickOwnerTableSize");
static_assert(sizeof(BRGameStateBase_GetBrickOwnerTableSize) == 0x000004, "Wrong size on BRGameStateBase_GetBrickOwnerTableSize");
static_assert(offsetof(BRGameStateBase_GetBrickOwnerTableSize, ReturnValue) == 0x000000, "Member 'BRGameStateBase_GetBrickOwnerTableSize::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetCurrentInviteCode
// 0x0010 (0x0010 - 0x0000)
struct BRGameStateBase_GetCurrentInviteCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetCurrentInviteCode) == 0x000008, "Wrong alignment on BRGameStateBase_GetCurrentInviteCode");
static_assert(sizeof(BRGameStateBase_GetCurrentInviteCode) == 0x000010, "Wrong size on BRGameStateBase_GetCurrentInviteCode");
static_assert(offsetof(BRGameStateBase_GetCurrentInviteCode, ReturnValue) == 0x000000, "Member 'BRGameStateBase_GetCurrentInviteCode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetDefaultBrickOwnerData
// 0x0030 (0x0030 - 0x0000)
struct BRGameStateBase_GetDefaultBrickOwnerData final
{
public:
	struct FBrickOwnerData                        ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetDefaultBrickOwnerData) == 0x000008, "Wrong alignment on BRGameStateBase_GetDefaultBrickOwnerData");
static_assert(sizeof(BRGameStateBase_GetDefaultBrickOwnerData) == 0x000030, "Wrong size on BRGameStateBase_GetDefaultBrickOwnerData");
static_assert(offsetof(BRGameStateBase_GetDefaultBrickOwnerData, ReturnValue) == 0x000000, "Member 'BRGameStateBase_GetDefaultBrickOwnerData::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetMinigame
// 0x0010 (0x0010 - 0x0000)
struct BRGameStateBase_GetMinigame final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABRRuleset*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetMinigame) == 0x000008, "Wrong alignment on BRGameStateBase_GetMinigame");
static_assert(sizeof(BRGameStateBase_GetMinigame) == 0x000010, "Wrong size on BRGameStateBase_GetMinigame");
static_assert(offsetof(BRGameStateBase_GetMinigame, MinigameId) == 0x000000, "Member 'BRGameStateBase_GetMinigame::MinigameId' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetMinigame, ReturnValue) == 0x000008, "Member 'BRGameStateBase_GetMinigame::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetMinigameCount
// 0x0004 (0x0004 - 0x0000)
struct BRGameStateBase_GetMinigameCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetMinigameCount) == 0x000004, "Wrong alignment on BRGameStateBase_GetMinigameCount");
static_assert(sizeof(BRGameStateBase_GetMinigameCount) == 0x000004, "Wrong size on BRGameStateBase_GetMinigameCount");
static_assert(offsetof(BRGameStateBase_GetMinigameCount, ReturnValue) == 0x000000, "Member 'BRGameStateBase_GetMinigameCount::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetMinigameID
// 0x0010 (0x0010 - 0x0000)
struct BRGameStateBase_GetMinigameID final
{
public:
	class ABRRuleset*                             Minigame;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGameStateBase_GetMinigameID) == 0x000008, "Wrong alignment on BRGameStateBase_GetMinigameID");
static_assert(sizeof(BRGameStateBase_GetMinigameID) == 0x000010, "Wrong size on BRGameStateBase_GetMinigameID");
static_assert(offsetof(BRGameStateBase_GetMinigameID, Minigame) == 0x000000, "Member 'BRGameStateBase_GetMinigameID::Minigame' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_GetMinigameID, ReturnValue) == 0x000008, "Member 'BRGameStateBase_GetMinigameID::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.GetMinigames
// 0x0010 (0x0010 - 0x0000)
struct BRGameStateBase_GetMinigames final
{
public:
	TArray<class ABRRuleset*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_GetMinigames) == 0x000008, "Wrong alignment on BRGameStateBase_GetMinigames");
static_assert(sizeof(BRGameStateBase_GetMinigames) == 0x000010, "Wrong size on BRGameStateBase_GetMinigames");
static_assert(offsetof(BRGameStateBase_GetMinigames, ReturnValue) == 0x000000, "Member 'BRGameStateBase_GetMinigames::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameStateBase.IdBrickOwner_NotPresent
// 0x0014 (0x0014 - 0x0000)
struct BRGameStateBase_IdBrickOwner_NotPresent final
{
public:
	struct FBRGuid                                OwnerGuid;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameStateBase_IdBrickOwner_NotPresent) == 0x000004, "Wrong alignment on BRGameStateBase_IdBrickOwner_NotPresent");
static_assert(sizeof(BRGameStateBase_IdBrickOwner_NotPresent) == 0x000014, "Wrong size on BRGameStateBase_IdBrickOwner_NotPresent");
static_assert(offsetof(BRGameStateBase_IdBrickOwner_NotPresent, OwnerGuid) == 0x000000, "Member 'BRGameStateBase_IdBrickOwner_NotPresent::OwnerGuid' has a wrong offset!");
static_assert(offsetof(BRGameStateBase_IdBrickOwner_NotPresent, ReturnValue) == 0x000010, "Member 'BRGameStateBase_IdBrickOwner_NotPresent::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetCombinedPropertyDescriptor
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetGameType_GetCombinedPropertyDescriptor final
{
public:
	class UInspectorPropertyDescriptorList*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_GetCombinedPropertyDescriptor) == 0x000008, "Wrong alignment on BRRulesetGameType_GetCombinedPropertyDescriptor");
static_assert(sizeof(BRRulesetGameType_GetCombinedPropertyDescriptor) == 0x000008, "Wrong size on BRRulesetGameType_GetCombinedPropertyDescriptor");
static_assert(offsetof(BRRulesetGameType_GetCombinedPropertyDescriptor, ReturnValue) == 0x000000, "Member 'BRRulesetGameType_GetCombinedPropertyDescriptor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetLeaderboardColumnIndex
// 0x000C (0x000C - 0x0000)
struct BRRulesetGameType_GetLeaderboardColumnIndex final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_GetLeaderboardColumnIndex) == 0x000004, "Wrong alignment on BRRulesetGameType_GetLeaderboardColumnIndex");
static_assert(sizeof(BRRulesetGameType_GetLeaderboardColumnIndex) == 0x00000C, "Wrong size on BRRulesetGameType_GetLeaderboardColumnIndex");
static_assert(offsetof(BRRulesetGameType_GetLeaderboardColumnIndex, Name_0) == 0x000000, "Member 'BRRulesetGameType_GetLeaderboardColumnIndex::Name_0' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_GetLeaderboardColumnIndex, ReturnValue) == 0x000008, "Member 'BRRulesetGameType_GetLeaderboardColumnIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetSpectatorTargets
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetGameType_GetSpectatorTargets final
{
public:
	class ABRPlayerState*                         Spectator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_GetSpectatorTargets) == 0x000008, "Wrong alignment on BRRulesetGameType_GetSpectatorTargets");
static_assert(sizeof(BRRulesetGameType_GetSpectatorTargets) == 0x000018, "Wrong size on BRRulesetGameType_GetSpectatorTargets");
static_assert(offsetof(BRRulesetGameType_GetSpectatorTargets, Spectator) == 0x000000, "Member 'BRRulesetGameType_GetSpectatorTargets::Spectator' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_GetSpectatorTargets, ReturnValue) == 0x000008, "Member 'BRRulesetGameType_GetSpectatorTargets::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.HandleDie
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetGameType_HandleDie final
{
public:
	TScriptInterface<class IBRRulesetMemberDestructable> DeadMember;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalDamage;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DeathType;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DeathCauser;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_HandleDie) == 0x000008, "Wrong alignment on BRRulesetGameType_HandleDie");
static_assert(sizeof(BRRulesetGameType_HandleDie) == 0x000030, "Wrong size on BRRulesetGameType_HandleDie");
static_assert(offsetof(BRRulesetGameType_HandleDie, DeadMember) == 0x000000, "Member 'BRRulesetGameType_HandleDie::DeadMember' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandleDie, FinalDamage) == 0x000010, "Member 'BRRulesetGameType_HandleDie::FinalDamage' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandleDie, DeathType) == 0x000018, "Member 'BRRulesetGameType_HandleDie::DeathType' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandleDie, InstigatedBy) == 0x000020, "Member 'BRRulesetGameType_HandleDie::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandleDie, DeathCauser) == 0x000028, "Member 'BRRulesetGameType_HandleDie::DeathCauser' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.HandleEditSettings
// 0x0020 (0x0020 - 0x0000)
struct BRRulesetGameType_HandleEditSettings final
{
public:
	class ABRPlayerState*                         MinigameEditor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTellPlayers;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetGameType_HandleEditSettings) == 0x000008, "Wrong alignment on BRRulesetGameType_HandleEditSettings");
static_assert(sizeof(BRRulesetGameType_HandleEditSettings) == 0x000020, "Wrong size on BRRulesetGameType_HandleEditSettings");
static_assert(offsetof(BRRulesetGameType_HandleEditSettings, MinigameEditor) == 0x000000, "Member 'BRRulesetGameType_HandleEditSettings::MinigameEditor' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandleEditSettings, Settings) == 0x000008, "Member 'BRRulesetGameType_HandleEditSettings::Settings' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandleEditSettings, bTellPlayers) == 0x000018, "Member 'BRRulesetGameType_HandleEditSettings::bTellPlayers' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.HandlePlayerChatMessage
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetGameType_HandlePlayerChatMessage final
{
public:
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatMessage;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_HandlePlayerChatMessage) == 0x000008, "Wrong alignment on BRRulesetGameType_HandlePlayerChatMessage");
static_assert(sizeof(BRRulesetGameType_HandlePlayerChatMessage) == 0x000018, "Wrong size on BRRulesetGameType_HandlePlayerChatMessage");
static_assert(offsetof(BRRulesetGameType_HandlePlayerChatMessage, TriggerPlayer) == 0x000000, "Member 'BRRulesetGameType_HandlePlayerChatMessage::TriggerPlayer' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandlePlayerChatMessage, ChatMessage) == 0x000008, "Member 'BRRulesetGameType_HandlePlayerChatMessage::ChatMessage' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.HandlePlayerReachCheckPoint
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetGameType_HandlePlayerReachCheckPoint final
{
public:
	class ABRPlayerState*                         TriggeredBy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_HandlePlayerReachCheckPoint) == 0x000008, "Wrong alignment on BRRulesetGameType_HandlePlayerReachCheckPoint");
static_assert(sizeof(BRRulesetGameType_HandlePlayerReachCheckPoint) == 0x000010, "Wrong size on BRRulesetGameType_HandlePlayerReachCheckPoint");
static_assert(offsetof(BRRulesetGameType_HandlePlayerReachCheckPoint, TriggeredBy) == 0x000000, "Member 'BRRulesetGameType_HandlePlayerReachCheckPoint::TriggeredBy' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandlePlayerReachCheckPoint, BrickHandle) == 0x000008, "Member 'BRRulesetGameType_HandlePlayerReachCheckPoint::BrickHandle' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.HandlePlayerReachGoalPoint
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetGameType_HandlePlayerReachGoalPoint final
{
public:
	class ABRPlayerState*                         TriggeredBy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_HandlePlayerReachGoalPoint) == 0x000008, "Wrong alignment on BRRulesetGameType_HandlePlayerReachGoalPoint");
static_assert(sizeof(BRRulesetGameType_HandlePlayerReachGoalPoint) == 0x000010, "Wrong size on BRRulesetGameType_HandlePlayerReachGoalPoint");
static_assert(offsetof(BRRulesetGameType_HandlePlayerReachGoalPoint, TriggeredBy) == 0x000000, "Member 'BRRulesetGameType_HandlePlayerReachGoalPoint::TriggeredBy' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandlePlayerReachGoalPoint, BrickHandle) == 0x000008, "Member 'BRRulesetGameType_HandlePlayerReachGoalPoint::BrickHandle' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.HandlePlayerRestart
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetGameType_HandlePlayerRestart final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_HandlePlayerRestart) == 0x000008, "Wrong alignment on BRRulesetGameType_HandlePlayerRestart");
static_assert(sizeof(BRRulesetGameType_HandlePlayerRestart) == 0x000008, "Wrong size on BRRulesetGameType_HandlePlayerRestart");
static_assert(offsetof(BRRulesetGameType_HandlePlayerRestart, State) == 0x000000, "Member 'BRRulesetGameType_HandlePlayerRestart::State' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.HandlePlayerSwitchTeam
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetGameType_HandlePlayerSwitchTeam final
{
public:
	class ABRPlayerState*                         Member;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeamId;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespawn;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMessage;                                          // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetGameType_HandlePlayerSwitchTeam) == 0x000008, "Wrong alignment on BRRulesetGameType_HandlePlayerSwitchTeam");
static_assert(sizeof(BRRulesetGameType_HandlePlayerSwitchTeam) == 0x000010, "Wrong size on BRRulesetGameType_HandlePlayerSwitchTeam");
static_assert(offsetof(BRRulesetGameType_HandlePlayerSwitchTeam, Member) == 0x000000, "Member 'BRRulesetGameType_HandlePlayerSwitchTeam::Member' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandlePlayerSwitchTeam, NewTeamId) == 0x000008, "Member 'BRRulesetGameType_HandlePlayerSwitchTeam::NewTeamId' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandlePlayerSwitchTeam, bRespawn) == 0x00000C, "Member 'BRRulesetGameType_HandlePlayerSwitchTeam::bRespawn' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandlePlayerSwitchTeam, bMessage) == 0x00000D, "Member 'BRRulesetGameType_HandlePlayerSwitchTeam::bMessage' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.HandlePlayerTeamChatMessage
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetGameType_HandlePlayerTeamChatMessage final
{
public:
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatMessage;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_HandlePlayerTeamChatMessage) == 0x000008, "Wrong alignment on BRRulesetGameType_HandlePlayerTeamChatMessage");
static_assert(sizeof(BRRulesetGameType_HandlePlayerTeamChatMessage) == 0x000018, "Wrong size on BRRulesetGameType_HandlePlayerTeamChatMessage");
static_assert(offsetof(BRRulesetGameType_HandlePlayerTeamChatMessage, TriggerPlayer) == 0x000000, "Member 'BRRulesetGameType_HandlePlayerTeamChatMessage::TriggerPlayer' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_HandlePlayerTeamChatMessage, ChatMessage) == 0x000008, "Member 'BRRulesetGameType_HandlePlayerTeamChatMessage::ChatMessage' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.NotifyEditTeamSettings
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetGameType_NotifyEditTeamSettings final
{
public:
	class ABRPlayerState*                         MinigameEditor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTellPlayers;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetGameType_NotifyEditTeamSettings) == 0x000008, "Wrong alignment on BRRulesetGameType_NotifyEditTeamSettings");
static_assert(sizeof(BRRulesetGameType_NotifyEditTeamSettings) == 0x000030, "Wrong size on BRRulesetGameType_NotifyEditTeamSettings");
static_assert(offsetof(BRRulesetGameType_NotifyEditTeamSettings, MinigameEditor) == 0x000000, "Member 'BRRulesetGameType_NotifyEditTeamSettings::MinigameEditor' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_NotifyEditTeamSettings, TeamName) == 0x000008, "Member 'BRRulesetGameType_NotifyEditTeamSettings::TeamName' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_NotifyEditTeamSettings, Settings) == 0x000018, "Member 'BRRulesetGameType_NotifyEditTeamSettings::Settings' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_NotifyEditTeamSettings, bTellPlayers) == 0x000028, "Member 'BRRulesetGameType_NotifyEditTeamSettings::bTellPlayers' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.NotifyEndSession
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetGameType_NotifyEndSession final
{
public:
	class ABRPlayerState*                         TriggeredBy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_NotifyEndSession) == 0x000008, "Wrong alignment on BRRulesetGameType_NotifyEndSession");
static_assert(sizeof(BRRulesetGameType_NotifyEndSession) == 0x000008, "Wrong size on BRRulesetGameType_NotifyEndSession");
static_assert(offsetof(BRRulesetGameType_NotifyEndSession, TriggeredBy) == 0x000000, "Member 'BRRulesetGameType_NotifyEndSession::TriggeredBy' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.NotifyJoinRuleset
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetGameType_NotifyJoinRuleset final
{
public:
	class ABRPlayerState*                         NewMember;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_NotifyJoinRuleset) == 0x000008, "Wrong alignment on BRRulesetGameType_NotifyJoinRuleset");
static_assert(sizeof(BRRulesetGameType_NotifyJoinRuleset) == 0x000008, "Wrong size on BRRulesetGameType_NotifyJoinRuleset");
static_assert(offsetof(BRRulesetGameType_NotifyJoinRuleset, NewMember) == 0x000000, "Member 'BRRulesetGameType_NotifyJoinRuleset::NewMember' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.NotifyLeaveRuleset
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetGameType_NotifyLeaveRuleset final
{
public:
	class ABRPlayerState*                         OldMember;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_NotifyLeaveRuleset) == 0x000008, "Wrong alignment on BRRulesetGameType_NotifyLeaveRuleset");
static_assert(sizeof(BRRulesetGameType_NotifyLeaveRuleset) == 0x000008, "Wrong size on BRRulesetGameType_NotifyLeaveRuleset");
static_assert(offsetof(BRRulesetGameType_NotifyLeaveRuleset, OldMember) == 0x000000, "Member 'BRRulesetGameType_NotifyLeaveRuleset::OldMember' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.NotifyMemberGameTypeInit
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetGameType_NotifyMemberGameTypeInit final
{
public:
	class ABRPlayerState*                         Member;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_NotifyMemberGameTypeInit) == 0x000008, "Wrong alignment on BRRulesetGameType_NotifyMemberGameTypeInit");
static_assert(sizeof(BRRulesetGameType_NotifyMemberGameTypeInit) == 0x000008, "Wrong size on BRRulesetGameType_NotifyMemberGameTypeInit");
static_assert(offsetof(BRRulesetGameType_NotifyMemberGameTypeInit, Member) == 0x000000, "Member 'BRRulesetGameType_NotifyMemberGameTypeInit::Member' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.NotifyNewRound
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetGameType_NotifyNewRound final
{
public:
	int32                                         round;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_NotifyNewRound) == 0x000004, "Wrong alignment on BRRulesetGameType_NotifyNewRound");
static_assert(sizeof(BRRulesetGameType_NotifyNewRound) == 0x000004, "Wrong size on BRRulesetGameType_NotifyNewRound");
static_assert(offsetof(BRRulesetGameType_NotifyNewRound, round) == 0x000000, "Member 'BRRulesetGameType_NotifyNewRound::round' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.CanMemberBeDamagedBy
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetGameType_CanMemberBeDamagedBy final
{
public:
	TScriptInterface<class IBRRulesetMember>      Member;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetGameType_CanMemberBeDamagedBy) == 0x000008, "Wrong alignment on BRRulesetGameType_CanMemberBeDamagedBy");
static_assert(sizeof(BRRulesetGameType_CanMemberBeDamagedBy) == 0x000030, "Wrong size on BRRulesetGameType_CanMemberBeDamagedBy");
static_assert(offsetof(BRRulesetGameType_CanMemberBeDamagedBy, Member) == 0x000000, "Member 'BRRulesetGameType_CanMemberBeDamagedBy::Member' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_CanMemberBeDamagedBy, EventInstigator) == 0x000010, "Member 'BRRulesetGameType_CanMemberBeDamagedBy::EventInstigator' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_CanMemberBeDamagedBy, DamageCauser) == 0x000018, "Member 'BRRulesetGameType_CanMemberBeDamagedBy::DamageCauser' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_CanMemberBeDamagedBy, DamageTypeClass) == 0x000020, "Member 'BRRulesetGameType_CanMemberBeDamagedBy::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_CanMemberBeDamagedBy, ReturnValue) == 0x000028, "Member 'BRRulesetGameType_CanMemberBeDamagedBy::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetCanEnableGameplayPermission
// 0x000C (0x000C - 0x0000)
struct BRRulesetGameType_GetCanEnableGameplayPermission final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetGameType_GetCanEnableGameplayPermission) == 0x000004, "Wrong alignment on BRRulesetGameType_GetCanEnableGameplayPermission");
static_assert(sizeof(BRRulesetGameType_GetCanEnableGameplayPermission) == 0x00000C, "Wrong size on BRRulesetGameType_GetCanEnableGameplayPermission");
static_assert(offsetof(BRRulesetGameType_GetCanEnableGameplayPermission, Permission) == 0x000000, "Member 'BRRulesetGameType_GetCanEnableGameplayPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_GetCanEnableGameplayPermission, ReturnValue) == 0x000008, "Member 'BRRulesetGameType_GetCanEnableGameplayPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetNextRoundDelay
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetGameType_GetNextRoundDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_GetNextRoundDelay) == 0x000004, "Wrong alignment on BRRulesetGameType_GetNextRoundDelay");
static_assert(sizeof(BRRulesetGameType_GetNextRoundDelay) == 0x000004, "Wrong size on BRRulesetGameType_GetNextRoundDelay");
static_assert(offsetof(BRRulesetGameType_GetNextRoundDelay, ReturnValue) == 0x000000, "Member 'BRRulesetGameType_GetNextRoundDelay::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetNextRoundNumber
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetGameType_GetNextRoundNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_GetNextRoundNumber) == 0x000004, "Wrong alignment on BRRulesetGameType_GetNextRoundNumber");
static_assert(sizeof(BRRulesetGameType_GetNextRoundNumber) == 0x000004, "Wrong size on BRRulesetGameType_GetNextRoundNumber");
static_assert(offsetof(BRRulesetGameType_GetNextRoundNumber, ReturnValue) == 0x000000, "Member 'BRRulesetGameType_GetNextRoundNumber::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetPlayerCanRestart
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetGameType_GetPlayerCanRestart final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetGameType_GetPlayerCanRestart) == 0x000008, "Wrong alignment on BRRulesetGameType_GetPlayerCanRestart");
static_assert(sizeof(BRRulesetGameType_GetPlayerCanRestart) == 0x000010, "Wrong size on BRRulesetGameType_GetPlayerCanRestart");
static_assert(offsetof(BRRulesetGameType_GetPlayerCanRestart, State) == 0x000000, "Member 'BRRulesetGameType_GetPlayerCanRestart::State' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_GetPlayerCanRestart, ReturnValue) == 0x000008, "Member 'BRRulesetGameType_GetPlayerCanRestart::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetPlayerCanSwitchTeam
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetGameType_GetPlayerCanSwitchTeam final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetGameType_GetPlayerCanSwitchTeam) == 0x000008, "Wrong alignment on BRRulesetGameType_GetPlayerCanSwitchTeam");
static_assert(sizeof(BRRulesetGameType_GetPlayerCanSwitchTeam) == 0x000010, "Wrong size on BRRulesetGameType_GetPlayerCanSwitchTeam");
static_assert(offsetof(BRRulesetGameType_GetPlayerCanSwitchTeam, State) == 0x000000, "Member 'BRRulesetGameType_GetPlayerCanSwitchTeam::State' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_GetPlayerCanSwitchTeam, TeamId) == 0x000008, "Member 'BRRulesetGameType_GetPlayerCanSwitchTeam::TeamId' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_GetPlayerCanSwitchTeam, ReturnValue) == 0x00000C, "Member 'BRRulesetGameType_GetPlayerCanSwitchTeam::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetPlayerHasGameplayPermission
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetGameType_GetPlayerHasGameplayPermission final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Permission;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetGameType_GetPlayerHasGameplayPermission) == 0x000008, "Wrong alignment on BRRulesetGameType_GetPlayerHasGameplayPermission");
static_assert(sizeof(BRRulesetGameType_GetPlayerHasGameplayPermission) == 0x000018, "Wrong size on BRRulesetGameType_GetPlayerHasGameplayPermission");
static_assert(offsetof(BRRulesetGameType_GetPlayerHasGameplayPermission, State) == 0x000000, "Member 'BRRulesetGameType_GetPlayerHasGameplayPermission::State' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_GetPlayerHasGameplayPermission, Permission) == 0x000008, "Member 'BRRulesetGameType_GetPlayerHasGameplayPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_GetPlayerHasGameplayPermission, ReturnValue) == 0x000010, "Member 'BRRulesetGameType_GetPlayerHasGameplayPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetPlayerNameColor
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetGameType_GetPlayerNameColor final
{
public:
	class ABRPlayerState*                         Member;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_GetPlayerNameColor) == 0x000008, "Wrong alignment on BRRulesetGameType_GetPlayerNameColor");
static_assert(sizeof(BRRulesetGameType_GetPlayerNameColor) == 0x000018, "Wrong size on BRRulesetGameType_GetPlayerNameColor");
static_assert(offsetof(BRRulesetGameType_GetPlayerNameColor, Member) == 0x000000, "Member 'BRRulesetGameType_GetPlayerNameColor::Member' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_GetPlayerNameColor, ReturnValue) == 0x000008, "Member 'BRRulesetGameType_GetPlayerNameColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetPlayerStartTransform
// 0x0070 (0x0070 - 0x0000)
struct BRRulesetGameType_GetPlayerStartTransform final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_GetPlayerStartTransform) == 0x000010, "Wrong alignment on BRRulesetGameType_GetPlayerStartTransform");
static_assert(sizeof(BRRulesetGameType_GetPlayerStartTransform) == 0x000070, "Wrong size on BRRulesetGameType_GetPlayerStartTransform");
static_assert(offsetof(BRRulesetGameType_GetPlayerStartTransform, State) == 0x000000, "Member 'BRRulesetGameType_GetPlayerStartTransform::State' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_GetPlayerStartTransform, ReturnValue) == 0x000010, "Member 'BRRulesetGameType_GetPlayerStartTransform::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.GetRuleset
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetGameType_GetRuleset final
{
public:
	class ABRRuleset*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetGameType_GetRuleset) == 0x000008, "Wrong alignment on BRRulesetGameType_GetRuleset");
static_assert(sizeof(BRRulesetGameType_GetRuleset) == 0x000008, "Wrong size on BRRulesetGameType_GetRuleset");
static_assert(offsetof(BRRulesetGameType_GetRuleset, ReturnValue) == 0x000000, "Member 'BRRulesetGameType_GetRuleset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetGameType.IsLeaderboardColumnVisible
// 0x000C (0x000C - 0x0000)
struct BRRulesetGameType_IsLeaderboardColumnVisible final
{
public:
	class FName                                   ColumnName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetGameType_IsLeaderboardColumnVisible) == 0x000004, "Wrong alignment on BRRulesetGameType_IsLeaderboardColumnVisible");
static_assert(sizeof(BRRulesetGameType_IsLeaderboardColumnVisible) == 0x00000C, "Wrong size on BRRulesetGameType_IsLeaderboardColumnVisible");
static_assert(offsetof(BRRulesetGameType_IsLeaderboardColumnVisible, ColumnName) == 0x000000, "Member 'BRRulesetGameType_IsLeaderboardColumnVisible::ColumnName' has a wrong offset!");
static_assert(offsetof(BRRulesetGameType_IsLeaderboardColumnVisible, ReturnValue) == 0x000008, "Member 'BRRulesetGameType_IsLeaderboardColumnVisible::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameTypeComponent_Sandbox.SetSandboxiness
// 0x0004 (0x0004 - 0x0000)
struct BRGameTypeComponent_Sandbox_SetSandboxiness final
{
public:
	float                                         SandboxinessIn;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameTypeComponent_Sandbox_SetSandboxiness) == 0x000004, "Wrong alignment on BRGameTypeComponent_Sandbox_SetSandboxiness");
static_assert(sizeof(BRGameTypeComponent_Sandbox_SetSandboxiness) == 0x000004, "Wrong size on BRGameTypeComponent_Sandbox_SetSandboxiness");
static_assert(offsetof(BRGameTypeComponent_Sandbox_SetSandboxiness, SandboxinessIn) == 0x000000, "Member 'BRGameTypeComponent_Sandbox_SetSandboxiness::SandboxinessIn' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetAllowedScreenResolutionStringList
// 0x0010 (0x0010 - 0x0000)
struct BRGameUserSettings_GetAllowedScreenResolutionStringList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetAllowedScreenResolutionStringList) == 0x000008, "Wrong alignment on BRGameUserSettings_GetAllowedScreenResolutionStringList");
static_assert(sizeof(BRGameUserSettings_GetAllowedScreenResolutionStringList) == 0x000010, "Wrong size on BRGameUserSettings_GetAllowedScreenResolutionStringList");
static_assert(offsetof(BRGameUserSettings_GetAllowedScreenResolutionStringList, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetAllowedScreenResolutionStringList::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetBRGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct BRGameUserSettings_GetBRGameUserSettings final
{
public:
	class UBRGameUserSettings*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetBRGameUserSettings) == 0x000008, "Wrong alignment on BRGameUserSettings_GetBRGameUserSettings");
static_assert(sizeof(BRGameUserSettings_GetBRGameUserSettings) == 0x000008, "Wrong size on BRGameUserSettings_GetBRGameUserSettings");
static_assert(offsetof(BRGameUserSettings_GetBRGameUserSettings, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetBRGameUserSettings::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.BR_SetHDR_UI_Nits
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_BR_SetHDR_UI_Nits final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_BR_SetHDR_UI_Nits) == 0x000004, "Wrong alignment on BRGameUserSettings_BR_SetHDR_UI_Nits");
static_assert(sizeof(BRGameUserSettings_BR_SetHDR_UI_Nits) == 0x000004, "Wrong size on BRGameUserSettings_BR_SetHDR_UI_Nits");
static_assert(offsetof(BRGameUserSettings_BR_SetHDR_UI_Nits, Value) == 0x000000, "Member 'BRGameUserSettings_BR_SetHDR_UI_Nits::Value' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.BR_SetHDREnabled
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_BR_SetHDREnabled final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_BR_SetHDREnabled) == 0x000001, "Wrong alignment on BRGameUserSettings_BR_SetHDREnabled");
static_assert(sizeof(BRGameUserSettings_BR_SetHDREnabled) == 0x000001, "Wrong size on BRGameUserSettings_BR_SetHDREnabled");
static_assert(offsetof(BRGameUserSettings_BR_SetHDREnabled, bValue) == 0x000000, "Member 'BRGameUserSettings_BR_SetHDREnabled::bValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.BR_SetHDRNits
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_BR_SetHDRNits final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_BR_SetHDRNits) == 0x000004, "Wrong alignment on BRGameUserSettings_BR_SetHDRNits");
static_assert(sizeof(BRGameUserSettings_BR_SetHDRNits) == 0x000004, "Wrong size on BRGameUserSettings_BR_SetHDRNits");
static_assert(offsetof(BRGameUserSettings_BR_SetHDRNits, Value) == 0x000000, "Member 'BRGameUserSettings_BR_SetHDRNits::Value' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.PreviewApplySettings
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_PreviewApplySettings final
{
public:
	bool                                          bCheckForCommandLineOverrides;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_PreviewApplySettings) == 0x000001, "Wrong alignment on BRGameUserSettings_PreviewApplySettings");
static_assert(sizeof(BRGameUserSettings_PreviewApplySettings) == 0x000001, "Wrong size on BRGameUserSettings_PreviewApplySettings");
static_assert(offsetof(BRGameUserSettings_PreviewApplySettings, bCheckForCommandLineOverrides) == 0x000000, "Member 'BRGameUserSettings_PreviewApplySettings::bCheckForCommandLineOverrides' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetAntiAliasingMode
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetAntiAliasingMode final
{
public:
	EBRAntiAliasingMode                           Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetAntiAliasingMode) == 0x000001, "Wrong alignment on BRGameUserSettings_SetAntiAliasingMode");
static_assert(sizeof(BRGameUserSettings_SetAntiAliasingMode) == 0x000001, "Wrong size on BRGameUserSettings_SetAntiAliasingMode");
static_assert(offsetof(BRGameUserSettings_SetAntiAliasingMode, Value) == 0x000000, "Member 'BRGameUserSettings_SetAntiAliasingMode::Value' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetCameraShakeScale
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_SetCameraShakeScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetCameraShakeScale) == 0x000004, "Wrong alignment on BRGameUserSettings_SetCameraShakeScale");
static_assert(sizeof(BRGameUserSettings_SetCameraShakeScale) == 0x000004, "Wrong size on BRGameUserSettings_SetCameraShakeScale");
static_assert(offsetof(BRGameUserSettings_SetCameraShakeScale, Value) == 0x000000, "Member 'BRGameUserSettings_SetCameraShakeScale::Value' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetEnableGizmoMSAA
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetEnableGizmoMSAA final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetEnableGizmoMSAA) == 0x000001, "Wrong alignment on BRGameUserSettings_SetEnableGizmoMSAA");
static_assert(sizeof(BRGameUserSettings_SetEnableGizmoMSAA) == 0x000001, "Wrong size on BRGameUserSettings_SetEnableGizmoMSAA");
static_assert(offsetof(BRGameUserSettings_SetEnableGizmoMSAA, bValue) == 0x000000, "Member 'BRGameUserSettings_SetEnableGizmoMSAA::bValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetEnableGizmoPass
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetEnableGizmoPass final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetEnableGizmoPass) == 0x000001, "Wrong alignment on BRGameUserSettings_SetEnableGizmoPass");
static_assert(sizeof(BRGameUserSettings_SetEnableGizmoPass) == 0x000001, "Wrong size on BRGameUserSettings_SetEnableGizmoPass");
static_assert(offsetof(BRGameUserSettings_SetEnableGizmoPass, bValue) == 0x000000, "Member 'BRGameUserSettings_SetEnableGizmoPass::bValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetEnableOIT
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetEnableOIT final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetEnableOIT) == 0x000001, "Wrong alignment on BRGameUserSettings_SetEnableOIT");
static_assert(sizeof(BRGameUserSettings_SetEnableOIT) == 0x000001, "Wrong size on BRGameUserSettings_SetEnableOIT");
static_assert(offsetof(BRGameUserSettings_SetEnableOIT, bValue) == 0x000000, "Member 'BRGameUserSettings_SetEnableOIT::bValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_SetFieldOfView final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetFieldOfView) == 0x000004, "Wrong alignment on BRGameUserSettings_SetFieldOfView");
static_assert(sizeof(BRGameUserSettings_SetFieldOfView) == 0x000004, "Wrong size on BRGameUserSettings_SetFieldOfView");
static_assert(offsetof(BRGameUserSettings_SetFieldOfView, Value) == 0x000000, "Member 'BRGameUserSettings_SetFieldOfView::Value' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetFrameGenerationEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetFrameGenerationEnabled final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetFrameGenerationEnabled) == 0x000001, "Wrong alignment on BRGameUserSettings_SetFrameGenerationEnabled");
static_assert(sizeof(BRGameUserSettings_SetFrameGenerationEnabled) == 0x000001, "Wrong size on BRGameUserSettings_SetFrameGenerationEnabled");
static_assert(offsetof(BRGameUserSettings_SetFrameGenerationEnabled, bValue) == 0x000000, "Member 'BRGameUserSettings_SetFrameGenerationEnabled::bValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetGlobalIlluminationMode
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetGlobalIlluminationMode final
{
public:
	EBRGlobalIlluminationMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetGlobalIlluminationMode) == 0x000001, "Wrong alignment on BRGameUserSettings_SetGlobalIlluminationMode");
static_assert(sizeof(BRGameUserSettings_SetGlobalIlluminationMode) == 0x000001, "Wrong size on BRGameUserSettings_SetGlobalIlluminationMode");
static_assert(offsetof(BRGameUserSettings_SetGlobalIlluminationMode, Value) == 0x000000, "Member 'BRGameUserSettings_SetGlobalIlluminationMode::Value' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetMotionBlurMode
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetMotionBlurMode final
{
public:
	EBRMotionBlurMode                             Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetMotionBlurMode) == 0x000001, "Wrong alignment on BRGameUserSettings_SetMotionBlurMode");
static_assert(sizeof(BRGameUserSettings_SetMotionBlurMode) == 0x000001, "Wrong size on BRGameUserSettings_SetMotionBlurMode");
static_assert(offsetof(BRGameUserSettings_SetMotionBlurMode, Mode) == 0x000000, "Member 'BRGameUserSettings_SetMotionBlurMode::Mode' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetReflexEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetReflexEnabled final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetReflexEnabled) == 0x000001, "Wrong alignment on BRGameUserSettings_SetReflexEnabled");
static_assert(sizeof(BRGameUserSettings_SetReflexEnabled) == 0x000001, "Wrong size on BRGameUserSettings_SetReflexEnabled");
static_assert(offsetof(BRGameUserSettings_SetReflexEnabled, bValue) == 0x000000, "Member 'BRGameUserSettings_SetReflexEnabled::bValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetRenderingMode
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetRenderingMode final
{
public:
	EBRRenderingMode                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetRenderingMode) == 0x000001, "Wrong alignment on BRGameUserSettings_SetRenderingMode");
static_assert(sizeof(BRGameUserSettings_SetRenderingMode) == 0x000001, "Wrong size on BRGameUserSettings_SetRenderingMode");
static_assert(offsetof(BRGameUserSettings_SetRenderingMode, Value) == 0x000000, "Member 'BRGameUserSettings_SetRenderingMode::Value' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetResolutionScalePreset
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetResolutionScalePreset final
{
public:
	EBRResolutionScalePreset                      Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetResolutionScalePreset) == 0x000001, "Wrong alignment on BRGameUserSettings_SetResolutionScalePreset");
static_assert(sizeof(BRGameUserSettings_SetResolutionScalePreset) == 0x000001, "Wrong size on BRGameUserSettings_SetResolutionScalePreset");
static_assert(offsetof(BRGameUserSettings_SetResolutionScalePreset, Value) == 0x000000, "Member 'BRGameUserSettings_SetResolutionScalePreset::Value' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetScreenResolutionById
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_SetScreenResolutionById final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetScreenResolutionById) == 0x000004, "Wrong alignment on BRGameUserSettings_SetScreenResolutionById");
static_assert(sizeof(BRGameUserSettings_SetScreenResolutionById) == 0x000004, "Wrong size on BRGameUserSettings_SetScreenResolutionById");
static_assert(offsetof(BRGameUserSettings_SetScreenResolutionById, ID) == 0x000000, "Member 'BRGameUserSettings_SetScreenResolutionById::ID' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetSimpleShadingSupportLocalLights
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetSimpleShadingSupportLocalLights final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetSimpleShadingSupportLocalLights) == 0x000001, "Wrong alignment on BRGameUserSettings_SetSimpleShadingSupportLocalLights");
static_assert(sizeof(BRGameUserSettings_SetSimpleShadingSupportLocalLights) == 0x000001, "Wrong size on BRGameUserSettings_SetSimpleShadingSupportLocalLights");
static_assert(offsetof(BRGameUserSettings_SetSimpleShadingSupportLocalLights, bValue) == 0x000000, "Member 'BRGameUserSettings_SetSimpleShadingSupportLocalLights::bValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetSupportRayTracing
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetSupportRayTracing final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetSupportRayTracing) == 0x000001, "Wrong alignment on BRGameUserSettings_SetSupportRayTracing");
static_assert(sizeof(BRGameUserSettings_SetSupportRayTracing) == 0x000001, "Wrong size on BRGameUserSettings_SetSupportRayTracing");
static_assert(offsetof(BRGameUserSettings_SetSupportRayTracing, bValue) == 0x000000, "Member 'BRGameUserSettings_SetSupportRayTracing::bValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.SetUseVirtualShadowMaps
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_SetUseVirtualShadowMaps final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_SetUseVirtualShadowMaps) == 0x000001, "Wrong alignment on BRGameUserSettings_SetUseVirtualShadowMaps");
static_assert(sizeof(BRGameUserSettings_SetUseVirtualShadowMaps) == 0x000001, "Wrong size on BRGameUserSettings_SetUseVirtualShadowMaps");
static_assert(offsetof(BRGameUserSettings_SetUseVirtualShadowMaps, bValue) == 0x000000, "Member 'BRGameUserSettings_SetUseVirtualShadowMaps::bValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.BR_GetHDR_UI_Nits
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_BR_GetHDR_UI_Nits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_BR_GetHDR_UI_Nits) == 0x000004, "Wrong alignment on BRGameUserSettings_BR_GetHDR_UI_Nits");
static_assert(sizeof(BRGameUserSettings_BR_GetHDR_UI_Nits) == 0x000004, "Wrong size on BRGameUserSettings_BR_GetHDR_UI_Nits");
static_assert(offsetof(BRGameUserSettings_BR_GetHDR_UI_Nits, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_BR_GetHDR_UI_Nits::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.BR_GetHDREnabled
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_BR_GetHDREnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_BR_GetHDREnabled) == 0x000001, "Wrong alignment on BRGameUserSettings_BR_GetHDREnabled");
static_assert(sizeof(BRGameUserSettings_BR_GetHDREnabled) == 0x000001, "Wrong size on BRGameUserSettings_BR_GetHDREnabled");
static_assert(offsetof(BRGameUserSettings_BR_GetHDREnabled, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_BR_GetHDREnabled::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.BR_GetHDRNits
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_BR_GetHDRNits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_BR_GetHDRNits) == 0x000004, "Wrong alignment on BRGameUserSettings_BR_GetHDRNits");
static_assert(sizeof(BRGameUserSettings_BR_GetHDRNits) == 0x000004, "Wrong size on BRGameUserSettings_BR_GetHDRNits");
static_assert(offsetof(BRGameUserSettings_BR_GetHDRNits, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_BR_GetHDRNits::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.BR_GetHDRSupported
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_BR_GetHDRSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_BR_GetHDRSupported) == 0x000001, "Wrong alignment on BRGameUserSettings_BR_GetHDRSupported");
static_assert(sizeof(BRGameUserSettings_BR_GetHDRSupported) == 0x000001, "Wrong size on BRGameUserSettings_BR_GetHDRSupported");
static_assert(offsetof(BRGameUserSettings_BR_GetHDRSupported, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_BR_GetHDRSupported::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.ComputeAutoResolutionScalePreset
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_ComputeAutoResolutionScalePreset final
{
public:
	EBRResolutionScalePreset                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_ComputeAutoResolutionScalePreset) == 0x000001, "Wrong alignment on BRGameUserSettings_ComputeAutoResolutionScalePreset");
static_assert(sizeof(BRGameUserSettings_ComputeAutoResolutionScalePreset) == 0x000001, "Wrong size on BRGameUserSettings_ComputeAutoResolutionScalePreset");
static_assert(offsetof(BRGameUserSettings_ComputeAutoResolutionScalePreset, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_ComputeAutoResolutionScalePreset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetAntiAliasingMode
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetAntiAliasingMode final
{
public:
	EBRAntiAliasingMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetAntiAliasingMode) == 0x000001, "Wrong alignment on BRGameUserSettings_GetAntiAliasingMode");
static_assert(sizeof(BRGameUserSettings_GetAntiAliasingMode) == 0x000001, "Wrong size on BRGameUserSettings_GetAntiAliasingMode");
static_assert(offsetof(BRGameUserSettings_GetAntiAliasingMode, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetAntiAliasingMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetCameraShakeScale
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_GetCameraShakeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetCameraShakeScale) == 0x000004, "Wrong alignment on BRGameUserSettings_GetCameraShakeScale");
static_assert(sizeof(BRGameUserSettings_GetCameraShakeScale) == 0x000004, "Wrong size on BRGameUserSettings_GetCameraShakeScale");
static_assert(offsetof(BRGameUserSettings_GetCameraShakeScale, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetCameraShakeScale::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetCanChangeScreenResolution
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetCanChangeScreenResolution final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetCanChangeScreenResolution) == 0x000001, "Wrong alignment on BRGameUserSettings_GetCanChangeScreenResolution");
static_assert(sizeof(BRGameUserSettings_GetCanChangeScreenResolution) == 0x000001, "Wrong size on BRGameUserSettings_GetCanChangeScreenResolution");
static_assert(offsetof(BRGameUserSettings_GetCanChangeScreenResolution, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetCanChangeScreenResolution::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetEnableGizmoMSAA
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetEnableGizmoMSAA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetEnableGizmoMSAA) == 0x000001, "Wrong alignment on BRGameUserSettings_GetEnableGizmoMSAA");
static_assert(sizeof(BRGameUserSettings_GetEnableGizmoMSAA) == 0x000001, "Wrong size on BRGameUserSettings_GetEnableGizmoMSAA");
static_assert(offsetof(BRGameUserSettings_GetEnableGizmoMSAA, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetEnableGizmoMSAA::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetEnableGizmoPass
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetEnableGizmoPass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetEnableGizmoPass) == 0x000001, "Wrong alignment on BRGameUserSettings_GetEnableGizmoPass");
static_assert(sizeof(BRGameUserSettings_GetEnableGizmoPass) == 0x000001, "Wrong size on BRGameUserSettings_GetEnableGizmoPass");
static_assert(offsetof(BRGameUserSettings_GetEnableGizmoPass, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetEnableGizmoPass::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetEnableOIT
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetEnableOIT final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetEnableOIT) == 0x000001, "Wrong alignment on BRGameUserSettings_GetEnableOIT");
static_assert(sizeof(BRGameUserSettings_GetEnableOIT) == 0x000001, "Wrong size on BRGameUserSettings_GetEnableOIT");
static_assert(offsetof(BRGameUserSettings_GetEnableOIT, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetEnableOIT::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_GetFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetFieldOfView) == 0x000004, "Wrong alignment on BRGameUserSettings_GetFieldOfView");
static_assert(sizeof(BRGameUserSettings_GetFieldOfView) == 0x000004, "Wrong size on BRGameUserSettings_GetFieldOfView");
static_assert(offsetof(BRGameUserSettings_GetFieldOfView, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetFieldOfView::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetFrameGenerationDisabled
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetFrameGenerationDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetFrameGenerationDisabled) == 0x000001, "Wrong alignment on BRGameUserSettings_GetFrameGenerationDisabled");
static_assert(sizeof(BRGameUserSettings_GetFrameGenerationDisabled) == 0x000001, "Wrong size on BRGameUserSettings_GetFrameGenerationDisabled");
static_assert(offsetof(BRGameUserSettings_GetFrameGenerationDisabled, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetFrameGenerationDisabled::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetFrameGenerationEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetFrameGenerationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetFrameGenerationEnabled) == 0x000001, "Wrong alignment on BRGameUserSettings_GetFrameGenerationEnabled");
static_assert(sizeof(BRGameUserSettings_GetFrameGenerationEnabled) == 0x000001, "Wrong size on BRGameUserSettings_GetFrameGenerationEnabled");
static_assert(offsetof(BRGameUserSettings_GetFrameGenerationEnabled, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetFrameGenerationEnabled::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetGlobalIlluminationMode
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetGlobalIlluminationMode final
{
public:
	EBRGlobalIlluminationMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetGlobalIlluminationMode) == 0x000001, "Wrong alignment on BRGameUserSettings_GetGlobalIlluminationMode");
static_assert(sizeof(BRGameUserSettings_GetGlobalIlluminationMode) == 0x000001, "Wrong size on BRGameUserSettings_GetGlobalIlluminationMode");
static_assert(offsetof(BRGameUserSettings_GetGlobalIlluminationMode, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetGlobalIlluminationMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetMotionBlurMode
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetMotionBlurMode final
{
public:
	EBRMotionBlurMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetMotionBlurMode) == 0x000001, "Wrong alignment on BRGameUserSettings_GetMotionBlurMode");
static_assert(sizeof(BRGameUserSettings_GetMotionBlurMode) == 0x000001, "Wrong size on BRGameUserSettings_GetMotionBlurMode");
static_assert(offsetof(BRGameUserSettings_GetMotionBlurMode, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetMotionBlurMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetReflexDisabled
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetReflexDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetReflexDisabled) == 0x000001, "Wrong alignment on BRGameUserSettings_GetReflexDisabled");
static_assert(sizeof(BRGameUserSettings_GetReflexDisabled) == 0x000001, "Wrong size on BRGameUserSettings_GetReflexDisabled");
static_assert(offsetof(BRGameUserSettings_GetReflexDisabled, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetReflexDisabled::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetReflexEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetReflexEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetReflexEnabled) == 0x000001, "Wrong alignment on BRGameUserSettings_GetReflexEnabled");
static_assert(sizeof(BRGameUserSettings_GetReflexEnabled) == 0x000001, "Wrong size on BRGameUserSettings_GetReflexEnabled");
static_assert(offsetof(BRGameUserSettings_GetReflexEnabled, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetReflexEnabled::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetRenderingMode
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetRenderingMode final
{
public:
	EBRRenderingMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetRenderingMode) == 0x000001, "Wrong alignment on BRGameUserSettings_GetRenderingMode");
static_assert(sizeof(BRGameUserSettings_GetRenderingMode) == 0x000001, "Wrong size on BRGameUserSettings_GetRenderingMode");
static_assert(offsetof(BRGameUserSettings_GetRenderingMode, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetRenderingMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetResolutionScalePreset
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetResolutionScalePreset final
{
public:
	EBRResolutionScalePreset                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetResolutionScalePreset) == 0x000001, "Wrong alignment on BRGameUserSettings_GetResolutionScalePreset");
static_assert(sizeof(BRGameUserSettings_GetResolutionScalePreset) == 0x000001, "Wrong size on BRGameUserSettings_GetResolutionScalePreset");
static_assert(offsetof(BRGameUserSettings_GetResolutionScalePreset, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetResolutionScalePreset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetResolutionScalePresetScaleFactor
// 0x0008 (0x0008 - 0x0000)
struct BRGameUserSettings_GetResolutionScalePresetScaleFactor final
{
public:
	EBRResolutionScalePreset                      Preset;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetResolutionScalePresetScaleFactor) == 0x000004, "Wrong alignment on BRGameUserSettings_GetResolutionScalePresetScaleFactor");
static_assert(sizeof(BRGameUserSettings_GetResolutionScalePresetScaleFactor) == 0x000008, "Wrong size on BRGameUserSettings_GetResolutionScalePresetScaleFactor");
static_assert(offsetof(BRGameUserSettings_GetResolutionScalePresetScaleFactor, Preset) == 0x000000, "Member 'BRGameUserSettings_GetResolutionScalePresetScaleFactor::Preset' has a wrong offset!");
static_assert(offsetof(BRGameUserSettings_GetResolutionScalePresetScaleFactor, ReturnValue) == 0x000004, "Member 'BRGameUserSettings_GetResolutionScalePresetScaleFactor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetResolutionScaleValueEx
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_GetResolutionScaleValueEx final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetResolutionScaleValueEx) == 0x000004, "Wrong alignment on BRGameUserSettings_GetResolutionScaleValueEx");
static_assert(sizeof(BRGameUserSettings_GetResolutionScaleValueEx) == 0x000004, "Wrong size on BRGameUserSettings_GetResolutionScaleValueEx");
static_assert(offsetof(BRGameUserSettings_GetResolutionScaleValueEx, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetResolutionScaleValueEx::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetScreenResolutionById
// 0x0004 (0x0004 - 0x0000)
struct BRGameUserSettings_GetScreenResolutionById final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetScreenResolutionById) == 0x000004, "Wrong alignment on BRGameUserSettings_GetScreenResolutionById");
static_assert(sizeof(BRGameUserSettings_GetScreenResolutionById) == 0x000004, "Wrong size on BRGameUserSettings_GetScreenResolutionById");
static_assert(offsetof(BRGameUserSettings_GetScreenResolutionById, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetScreenResolutionById::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetSimpleShadingSupportLocalLights
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetSimpleShadingSupportLocalLights final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetSimpleShadingSupportLocalLights) == 0x000001, "Wrong alignment on BRGameUserSettings_GetSimpleShadingSupportLocalLights");
static_assert(sizeof(BRGameUserSettings_GetSimpleShadingSupportLocalLights) == 0x000001, "Wrong size on BRGameUserSettings_GetSimpleShadingSupportLocalLights");
static_assert(offsetof(BRGameUserSettings_GetSimpleShadingSupportLocalLights, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetSimpleShadingSupportLocalLights::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetSupportRayTracing
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetSupportRayTracing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetSupportRayTracing) == 0x000001, "Wrong alignment on BRGameUserSettings_GetSupportRayTracing");
static_assert(sizeof(BRGameUserSettings_GetSupportRayTracing) == 0x000001, "Wrong size on BRGameUserSettings_GetSupportRayTracing");
static_assert(offsetof(BRGameUserSettings_GetSupportRayTracing, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetSupportRayTracing::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.GetUseVirtualShadowMaps
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_GetUseVirtualShadowMaps final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_GetUseVirtualShadowMaps) == 0x000001, "Wrong alignment on BRGameUserSettings_GetUseVirtualShadowMaps");
static_assert(sizeof(BRGameUserSettings_GetUseVirtualShadowMaps) == 0x000001, "Wrong size on BRGameUserSettings_GetUseVirtualShadowMaps");
static_assert(offsetof(BRGameUserSettings_GetUseVirtualShadowMaps, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_GetUseVirtualShadowMaps::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsAntiAliasingModeCustom
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsAntiAliasingModeCustom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsAntiAliasingModeCustom) == 0x000001, "Wrong alignment on BRGameUserSettings_IsAntiAliasingModeCustom");
static_assert(sizeof(BRGameUserSettings_IsAntiAliasingModeCustom) == 0x000001, "Wrong size on BRGameUserSettings_IsAntiAliasingModeCustom");
static_assert(offsetof(BRGameUserSettings_IsAntiAliasingModeCustom, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsAntiAliasingModeCustom::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsAntiAliasingModeNotCustom
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsAntiAliasingModeNotCustom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsAntiAliasingModeNotCustom) == 0x000001, "Wrong alignment on BRGameUserSettings_IsAntiAliasingModeNotCustom");
static_assert(sizeof(BRGameUserSettings_IsAntiAliasingModeNotCustom) == 0x000001, "Wrong size on BRGameUserSettings_IsAntiAliasingModeNotCustom");
static_assert(offsetof(BRGameUserSettings_IsAntiAliasingModeNotCustom, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsAntiAliasingModeNotCustom::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsAntiAliasingModeSupported
// 0x0002 (0x0002 - 0x0000)
struct BRGameUserSettings_IsAntiAliasingModeSupported final
{
public:
	EBRAntiAliasingMode                           Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsAntiAliasingModeSupported) == 0x000001, "Wrong alignment on BRGameUserSettings_IsAntiAliasingModeSupported");
static_assert(sizeof(BRGameUserSettings_IsAntiAliasingModeSupported) == 0x000002, "Wrong size on BRGameUserSettings_IsAntiAliasingModeSupported");
static_assert(offsetof(BRGameUserSettings_IsAntiAliasingModeSupported, Mode) == 0x000000, "Member 'BRGameUserSettings_IsAntiAliasingModeSupported::Mode' has a wrong offset!");
static_assert(offsetof(BRGameUserSettings_IsAntiAliasingModeSupported, ReturnValue) == 0x000001, "Member 'BRGameUserSettings_IsAntiAliasingModeSupported::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsFrameGenerationSupported
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsFrameGenerationSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsFrameGenerationSupported) == 0x000001, "Wrong alignment on BRGameUserSettings_IsFrameGenerationSupported");
static_assert(sizeof(BRGameUserSettings_IsFrameGenerationSupported) == 0x000001, "Wrong size on BRGameUserSettings_IsFrameGenerationSupported");
static_assert(offsetof(BRGameUserSettings_IsFrameGenerationSupported, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsFrameGenerationSupported::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsGlobalIlluminationModeNotNone
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsGlobalIlluminationModeNotNone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsGlobalIlluminationModeNotNone) == 0x000001, "Wrong alignment on BRGameUserSettings_IsGlobalIlluminationModeNotNone");
static_assert(sizeof(BRGameUserSettings_IsGlobalIlluminationModeNotNone) == 0x000001, "Wrong size on BRGameUserSettings_IsGlobalIlluminationModeNotNone");
static_assert(offsetof(BRGameUserSettings_IsGlobalIlluminationModeNotNone, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsGlobalIlluminationModeNotNone::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsGlobalIlluminationQualitySupported
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsGlobalIlluminationQualitySupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsGlobalIlluminationQualitySupported) == 0x000001, "Wrong alignment on BRGameUserSettings_IsGlobalIlluminationQualitySupported");
static_assert(sizeof(BRGameUserSettings_IsGlobalIlluminationQualitySupported) == 0x000001, "Wrong size on BRGameUserSettings_IsGlobalIlluminationQualitySupported");
static_assert(offsetof(BRGameUserSettings_IsGlobalIlluminationQualitySupported, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsGlobalIlluminationQualitySupported::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsOITSupported
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsOITSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsOITSupported) == 0x000001, "Wrong alignment on BRGameUserSettings_IsOITSupported");
static_assert(sizeof(BRGameUserSettings_IsOITSupported) == 0x000001, "Wrong size on BRGameUserSettings_IsOITSupported");
static_assert(offsetof(BRGameUserSettings_IsOITSupported, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsOITSupported::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsReflexSupported
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsReflexSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsReflexSupported) == 0x000001, "Wrong alignment on BRGameUserSettings_IsReflexSupported");
static_assert(sizeof(BRGameUserSettings_IsReflexSupported) == 0x000001, "Wrong size on BRGameUserSettings_IsReflexSupported");
static_assert(offsetof(BRGameUserSettings_IsReflexSupported, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsReflexSupported::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsRenderingModeDirectX12
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsRenderingModeDirectX12 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsRenderingModeDirectX12) == 0x000001, "Wrong alignment on BRGameUserSettings_IsRenderingModeDirectX12");
static_assert(sizeof(BRGameUserSettings_IsRenderingModeDirectX12) == 0x000001, "Wrong size on BRGameUserSettings_IsRenderingModeDirectX12");
static_assert(offsetof(BRGameUserSettings_IsRenderingModeDirectX12, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsRenderingModeDirectX12::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsRenderingModeNotSimpleShading
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsRenderingModeNotSimpleShading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsRenderingModeNotSimpleShading) == 0x000001, "Wrong alignment on BRGameUserSettings_IsRenderingModeNotSimpleShading");
static_assert(sizeof(BRGameUserSettings_IsRenderingModeNotSimpleShading) == 0x000001, "Wrong size on BRGameUserSettings_IsRenderingModeNotSimpleShading");
static_assert(offsetof(BRGameUserSettings_IsRenderingModeNotSimpleShading, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsRenderingModeNotSimpleShading::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsRenderingModeSimpleShading
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsRenderingModeSimpleShading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsRenderingModeSimpleShading) == 0x000001, "Wrong alignment on BRGameUserSettings_IsRenderingModeSimpleShading");
static_assert(sizeof(BRGameUserSettings_IsRenderingModeSimpleShading) == 0x000001, "Wrong size on BRGameUserSettings_IsRenderingModeSimpleShading");
static_assert(offsetof(BRGameUserSettings_IsRenderingModeSimpleShading, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsRenderingModeSimpleShading::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsResolutionScalePresetCustom
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsResolutionScalePresetCustom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsResolutionScalePresetCustom) == 0x000001, "Wrong alignment on BRGameUserSettings_IsResolutionScalePresetCustom");
static_assert(sizeof(BRGameUserSettings_IsResolutionScalePresetCustom) == 0x000001, "Wrong size on BRGameUserSettings_IsResolutionScalePresetCustom");
static_assert(offsetof(BRGameUserSettings_IsResolutionScalePresetCustom, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsResolutionScalePresetCustom::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGameUserSettings.IsResolutionScalePresetNotCustom
// 0x0001 (0x0001 - 0x0000)
struct BRGameUserSettings_IsResolutionScalePresetNotCustom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGameUserSettings_IsResolutionScalePresetNotCustom) == 0x000001, "Wrong alignment on BRGameUserSettings_IsResolutionScalePresetNotCustom");
static_assert(sizeof(BRGameUserSettings_IsResolutionScalePresetNotCustom) == 0x000001, "Wrong size on BRGameUserSettings_IsResolutionScalePresetNotCustom");
static_assert(offsetof(BRGameUserSettings_IsResolutionScalePresetNotCustom, ReturnValue) == 0x000000, "Member 'BRGameUserSettings_IsResolutionScalePresetNotCustom::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGenericCatalogEntryWidget.HandleDropped
// 0x0008 (0x0008 - 0x0000)
struct BRGenericCatalogEntryWidget_HandleDropped final
{
public:
	class UDragDropOperation*                     Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogEntryWidget_HandleDropped) == 0x000008, "Wrong alignment on BRGenericCatalogEntryWidget_HandleDropped");
static_assert(sizeof(BRGenericCatalogEntryWidget_HandleDropped) == 0x000008, "Wrong size on BRGenericCatalogEntryWidget_HandleDropped");
static_assert(offsetof(BRGenericCatalogEntryWidget_HandleDropped, Operation) == 0x000000, "Member 'BRGenericCatalogEntryWidget_HandleDropped::Operation' has a wrong offset!");

// Function Brickadia.BRGenericCatalogTabButtonWidget.SetShowSelected
// 0x0001 (0x0001 - 0x0000)
struct BRGenericCatalogTabButtonWidget_SetShowSelected final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogTabButtonWidget_SetShowSelected) == 0x000001, "Wrong alignment on BRGenericCatalogTabButtonWidget_SetShowSelected");
static_assert(sizeof(BRGenericCatalogTabButtonWidget_SetShowSelected) == 0x000001, "Wrong size on BRGenericCatalogTabButtonWidget_SetShowSelected");
static_assert(offsetof(BRGenericCatalogTabButtonWidget_SetShowSelected, Selected) == 0x000000, "Member 'BRGenericCatalogTabButtonWidget_SetShowSelected::Selected' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.BringObjectIntoView
// 0x0008 (0x0008 - 0x0000)
struct BRGenericCatalogWidget_BringObjectIntoView final
{
public:
	class UObject*                                TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_BringObjectIntoView) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_BringObjectIntoView");
static_assert(sizeof(BRGenericCatalogWidget_BringObjectIntoView) == 0x000008, "Wrong size on BRGenericCatalogWidget_BringObjectIntoView");
static_assert(offsetof(BRGenericCatalogWidget_BringObjectIntoView, TARGET) == 0x000000, "Member 'BRGenericCatalogWidget_BringObjectIntoView::TARGET' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.CreateEntryWidget
// 0x0048 (0x0048 - 0x0000)
struct BRGenericCatalogWidget_CreateEntryWidget final
{
public:
	struct FBRCatalogEntry                        CatalogEntry;                                      // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRGenericCatalogEntryWidget> UsedEntryWidget;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRGenericCatalogEntryWidget*           ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_CreateEntryWidget) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_CreateEntryWidget");
static_assert(sizeof(BRGenericCatalogWidget_CreateEntryWidget) == 0x000048, "Wrong size on BRGenericCatalogWidget_CreateEntryWidget");
static_assert(offsetof(BRGenericCatalogWidget_CreateEntryWidget, CatalogEntry) == 0x000000, "Member 'BRGenericCatalogWidget_CreateEntryWidget::CatalogEntry' has a wrong offset!");
static_assert(offsetof(BRGenericCatalogWidget_CreateEntryWidget, UsedEntryWidget) == 0x000038, "Member 'BRGenericCatalogWidget_CreateEntryWidget::UsedEntryWidget' has a wrong offset!");
static_assert(offsetof(BRGenericCatalogWidget_CreateEntryWidget, ReturnValue) == 0x000040, "Member 'BRGenericCatalogWidget_CreateEntryWidget::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.HandleEntryDragEnded
// 0x0008 (0x0008 - 0x0000)
struct BRGenericCatalogWidget_HandleEntryDragEnded final
{
public:
	class UBRGenericCatalogEntryWidget*           Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_HandleEntryDragEnded) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_HandleEntryDragEnded");
static_assert(sizeof(BRGenericCatalogWidget_HandleEntryDragEnded) == 0x000008, "Wrong size on BRGenericCatalogWidget_HandleEntryDragEnded");
static_assert(offsetof(BRGenericCatalogWidget_HandleEntryDragEnded, Entry) == 0x000000, "Member 'BRGenericCatalogWidget_HandleEntryDragEnded::Entry' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.HandleEntryDragStarted
// 0x0008 (0x0008 - 0x0000)
struct BRGenericCatalogWidget_HandleEntryDragStarted final
{
public:
	class UBRGenericCatalogEntryWidget*           Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_HandleEntryDragStarted) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_HandleEntryDragStarted");
static_assert(sizeof(BRGenericCatalogWidget_HandleEntryDragStarted) == 0x000008, "Wrong size on BRGenericCatalogWidget_HandleEntryDragStarted");
static_assert(offsetof(BRGenericCatalogWidget_HandleEntryDragStarted, Entry) == 0x000000, "Member 'BRGenericCatalogWidget_HandleEntryDragStarted::Entry' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.HandleEntryHoverEnded
// 0x0008 (0x0008 - 0x0000)
struct BRGenericCatalogWidget_HandleEntryHoverEnded final
{
public:
	class UBRGenericCatalogEntryWidget*           Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_HandleEntryHoverEnded) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_HandleEntryHoverEnded");
static_assert(sizeof(BRGenericCatalogWidget_HandleEntryHoverEnded) == 0x000008, "Wrong size on BRGenericCatalogWidget_HandleEntryHoverEnded");
static_assert(offsetof(BRGenericCatalogWidget_HandleEntryHoverEnded, Entry) == 0x000000, "Member 'BRGenericCatalogWidget_HandleEntryHoverEnded::Entry' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.HandleEntryHoverStarted
// 0x0008 (0x0008 - 0x0000)
struct BRGenericCatalogWidget_HandleEntryHoverStarted final
{
public:
	class UBRGenericCatalogEntryWidget*           Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_HandleEntryHoverStarted) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_HandleEntryHoverStarted");
static_assert(sizeof(BRGenericCatalogWidget_HandleEntryHoverStarted) == 0x000008, "Wrong size on BRGenericCatalogWidget_HandleEntryHoverStarted");
static_assert(offsetof(BRGenericCatalogWidget_HandleEntryHoverStarted, Entry) == 0x000000, "Member 'BRGenericCatalogWidget_HandleEntryHoverStarted::Entry' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.HandleEntryLeftClick
// 0x0008 (0x0008 - 0x0000)
struct BRGenericCatalogWidget_HandleEntryLeftClick final
{
public:
	class UBRGenericCatalogEntryWidget*           Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_HandleEntryLeftClick) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_HandleEntryLeftClick");
static_assert(sizeof(BRGenericCatalogWidget_HandleEntryLeftClick) == 0x000008, "Wrong size on BRGenericCatalogWidget_HandleEntryLeftClick");
static_assert(offsetof(BRGenericCatalogWidget_HandleEntryLeftClick, Entry) == 0x000000, "Member 'BRGenericCatalogWidget_HandleEntryLeftClick::Entry' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.HandleEntryMiddleClick
// 0x0008 (0x0008 - 0x0000)
struct BRGenericCatalogWidget_HandleEntryMiddleClick final
{
public:
	class UBRGenericCatalogEntryWidget*           Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_HandleEntryMiddleClick) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_HandleEntryMiddleClick");
static_assert(sizeof(BRGenericCatalogWidget_HandleEntryMiddleClick) == 0x000008, "Wrong size on BRGenericCatalogWidget_HandleEntryMiddleClick");
static_assert(offsetof(BRGenericCatalogWidget_HandleEntryMiddleClick, Entry) == 0x000000, "Member 'BRGenericCatalogWidget_HandleEntryMiddleClick::Entry' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.HandleTabSelection
// 0x0008 (0x0008 - 0x0000)
struct BRGenericCatalogWidget_HandleTabSelection final
{
public:
	class UBRGenericCatalogTabButtonWidget*       Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_HandleTabSelection) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_HandleTabSelection");
static_assert(sizeof(BRGenericCatalogWidget_HandleTabSelection) == 0x000008, "Wrong size on BRGenericCatalogWidget_HandleTabSelection");
static_assert(offsetof(BRGenericCatalogWidget_HandleTabSelection, Button) == 0x000000, "Member 'BRGenericCatalogWidget_HandleTabSelection::Button' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.InsertCustomTab
// 0x0028 (0x0028 - 0x0000)
struct BRGenericCatalogWidget_InsertCustomTab final
{
public:
	struct FBRCatalogCustomTab                    TabData;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_InsertCustomTab) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_InsertCustomTab");
static_assert(sizeof(BRGenericCatalogWidget_InsertCustomTab) == 0x000028, "Wrong size on BRGenericCatalogWidget_InsertCustomTab");
static_assert(offsetof(BRGenericCatalogWidget_InsertCustomTab, TabData) == 0x000000, "Member 'BRGenericCatalogWidget_InsertCustomTab::TabData' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.Rebuild
// 0x0008 (0x0008 - 0x0000)
struct BRGenericCatalogWidget_Rebuild final
{
public:
	class UBRCatalog*                             InCatalog;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_Rebuild) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_Rebuild");
static_assert(sizeof(BRGenericCatalogWidget_Rebuild) == 0x000008, "Wrong size on BRGenericCatalogWidget_Rebuild");
static_assert(offsetof(BRGenericCatalogWidget_Rebuild, InCatalog) == 0x000000, "Member 'BRGenericCatalogWidget_Rebuild::InCatalog' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.RebuildAdv
// 0x0028 (0x0028 - 0x0000)
struct BRGenericCatalogWidget_RebuildAdv final
{
public:
	class UBRCatalog*                             InCatalog;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBRCatalogCustomTab>            CustomTabsAtStart;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FBRCatalogCustomTab>            CustomTabsAtEnd;                                   // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_RebuildAdv) == 0x000008, "Wrong alignment on BRGenericCatalogWidget_RebuildAdv");
static_assert(sizeof(BRGenericCatalogWidget_RebuildAdv) == 0x000028, "Wrong size on BRGenericCatalogWidget_RebuildAdv");
static_assert(offsetof(BRGenericCatalogWidget_RebuildAdv, InCatalog) == 0x000000, "Member 'BRGenericCatalogWidget_RebuildAdv::InCatalog' has a wrong offset!");
static_assert(offsetof(BRGenericCatalogWidget_RebuildAdv, CustomTabsAtStart) == 0x000008, "Member 'BRGenericCatalogWidget_RebuildAdv::CustomTabsAtStart' has a wrong offset!");
static_assert(offsetof(BRGenericCatalogWidget_RebuildAdv, CustomTabsAtEnd) == 0x000018, "Member 'BRGenericCatalogWidget_RebuildAdv::CustomTabsAtEnd' has a wrong offset!");

// Function Brickadia.BRGenericCatalogWidget.SelectTab
// 0x0004 (0x0004 - 0x0000)
struct BRGenericCatalogWidget_SelectTab final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGenericCatalogWidget_SelectTab) == 0x000004, "Wrong alignment on BRGenericCatalogWidget_SelectTab");
static_assert(sizeof(BRGenericCatalogWidget_SelectTab) == 0x000004, "Wrong size on BRGenericCatalogWidget_SelectTab");
static_assert(offsetof(BRGenericCatalogWidget_SelectTab, TabIndex) == 0x000000, "Member 'BRGenericCatalogWidget_SelectTab::TabIndex' has a wrong offset!");

// Function Brickadia.BRGizmoText.Setup
// 0x0020 (0x0020 - 0x0000)
struct BRGizmoText_Setup final
{
public:
	class FText                                   InCount;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGizmoText_Setup) == 0x000008, "Wrong alignment on BRGizmoText_Setup");
static_assert(sizeof(BRGizmoText_Setup) == 0x000020, "Wrong size on BRGizmoText_Setup");
static_assert(offsetof(BRGizmoText_Setup, InCount) == 0x000000, "Member 'BRGizmoText_Setup::InCount' has a wrong offset!");
static_assert(offsetof(BRGizmoText_Setup, Color) == 0x000010, "Member 'BRGizmoText_Setup::Color' has a wrong offset!");

// Function Brickadia.BrickDebugComponent.SetBrickColor
// 0x0004 (0x0004 - 0x0000)
struct BrickDebugComponent_SetBrickColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDebugComponent_SetBrickColor) == 0x000004, "Wrong alignment on BrickDebugComponent_SetBrickColor");
static_assert(sizeof(BrickDebugComponent_SetBrickColor) == 0x000004, "Wrong size on BrickDebugComponent_SetBrickColor");
static_assert(offsetof(BrickDebugComponent_SetBrickColor, NewColor) == 0x000000, "Member 'BrickDebugComponent_SetBrickColor::NewColor' has a wrong offset!");

// Function Brickadia.BrickDebugComponent.SetBrickType
// 0x0008 (0x0008 - 0x0000)
struct BrickDebugComponent_SetBrickType final
{
public:
	class UBrickType*                             NewBrickType;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDebugComponent_SetBrickType) == 0x000008, "Wrong alignment on BrickDebugComponent_SetBrickType");
static_assert(sizeof(BrickDebugComponent_SetBrickType) == 0x000008, "Wrong size on BrickDebugComponent_SetBrickType");
static_assert(offsetof(BrickDebugComponent_SetBrickType, NewBrickType) == 0x000000, "Member 'BrickDebugComponent_SetBrickType::NewBrickType' has a wrong offset!");

// Function Brickadia.BrickDebugComponent.GetBrickColor
// 0x0004 (0x0004 - 0x0000)
struct BrickDebugComponent_GetBrickColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDebugComponent_GetBrickColor) == 0x000004, "Wrong alignment on BrickDebugComponent_GetBrickColor");
static_assert(sizeof(BrickDebugComponent_GetBrickColor) == 0x000004, "Wrong size on BrickDebugComponent_GetBrickColor");
static_assert(offsetof(BrickDebugComponent_GetBrickColor, ReturnValue) == 0x000000, "Member 'BrickDebugComponent_GetBrickColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickDebugComponent.GetBrickType
// 0x0008 (0x0008 - 0x0000)
struct BrickDebugComponent_GetBrickType final
{
public:
	class UBrickType*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDebugComponent_GetBrickType) == 0x000008, "Wrong alignment on BrickDebugComponent_GetBrickType");
static_assert(sizeof(BrickDebugComponent_GetBrickType) == 0x000008, "Wrong size on BrickDebugComponent_GetBrickType");
static_assert(offsetof(BrickDebugComponent_GetBrickType, ReturnValue) == 0x000000, "Member 'BrickDebugComponent_GetBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.BasicBrickDebugComponent.SetBrick
// 0x0008 (0x0008 - 0x0000)
struct BasicBrickDebugComponent_SetBrick final
{
public:
	class UBasicBrick*                            NewBrick;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasicBrickDebugComponent_SetBrick) == 0x000008, "Wrong alignment on BasicBrickDebugComponent_SetBrick");
static_assert(sizeof(BasicBrickDebugComponent_SetBrick) == 0x000008, "Wrong size on BasicBrickDebugComponent_SetBrick");
static_assert(offsetof(BasicBrickDebugComponent_SetBrick, NewBrick) == 0x000000, "Member 'BasicBrickDebugComponent_SetBrick::NewBrick' has a wrong offset!");

// Function Brickadia.InspectorPropertyDescriptorList.FindDescriptor
// 0x0010 (0x0010 - 0x0000)
struct InspectorPropertyDescriptorList_FindDescriptor final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptor*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyDescriptorList_FindDescriptor) == 0x000008, "Wrong alignment on InspectorPropertyDescriptorList_FindDescriptor");
static_assert(sizeof(InspectorPropertyDescriptorList_FindDescriptor) == 0x000010, "Wrong size on InspectorPropertyDescriptorList_FindDescriptor");
static_assert(offsetof(InspectorPropertyDescriptorList_FindDescriptor, Name_0) == 0x000000, "Member 'InspectorPropertyDescriptorList_FindDescriptor::Name_0' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptorList_FindDescriptor, ReturnValue) == 0x000008, "Member 'InspectorPropertyDescriptorList_FindDescriptor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGuidLibrary.Conv_BRGuidToString
// 0x0020 (0x0020 - 0x0000)
struct BRGuidLibrary_Conv_BRGuidToString final
{
public:
	struct FBRGuid                                InGuid;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGuidLibrary_Conv_BRGuidToString) == 0x000008, "Wrong alignment on BRGuidLibrary_Conv_BRGuidToString");
static_assert(sizeof(BRGuidLibrary_Conv_BRGuidToString) == 0x000020, "Wrong size on BRGuidLibrary_Conv_BRGuidToString");
static_assert(offsetof(BRGuidLibrary_Conv_BRGuidToString, InGuid) == 0x000000, "Member 'BRGuidLibrary_Conv_BRGuidToString::InGuid' has a wrong offset!");
static_assert(offsetof(BRGuidLibrary_Conv_BRGuidToString, ReturnValue) == 0x000010, "Member 'BRGuidLibrary_Conv_BRGuidToString::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGuidLibrary.EqualEqual_BRGuidBRGuid
// 0x0024 (0x0024 - 0x0000)
struct BRGuidLibrary_EqualEqual_BRGuidBRGuid final
{
public:
	struct FBRGuid                                A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGuidLibrary_EqualEqual_BRGuidBRGuid) == 0x000004, "Wrong alignment on BRGuidLibrary_EqualEqual_BRGuidBRGuid");
static_assert(sizeof(BRGuidLibrary_EqualEqual_BRGuidBRGuid) == 0x000024, "Wrong size on BRGuidLibrary_EqualEqual_BRGuidBRGuid");
static_assert(offsetof(BRGuidLibrary_EqualEqual_BRGuidBRGuid, A) == 0x000000, "Member 'BRGuidLibrary_EqualEqual_BRGuidBRGuid::A' has a wrong offset!");
static_assert(offsetof(BRGuidLibrary_EqualEqual_BRGuidBRGuid, B) == 0x000010, "Member 'BRGuidLibrary_EqualEqual_BRGuidBRGuid::B' has a wrong offset!");
static_assert(offsetof(BRGuidLibrary_EqualEqual_BRGuidBRGuid, ReturnValue) == 0x000020, "Member 'BRGuidLibrary_EqualEqual_BRGuidBRGuid::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGuidLibrary.Invalidate_BRGuid
// 0x0010 (0x0010 - 0x0000)
struct BRGuidLibrary_Invalidate_BRGuid final
{
public:
	struct FBRGuid                                InGuid;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGuidLibrary_Invalidate_BRGuid) == 0x000004, "Wrong alignment on BRGuidLibrary_Invalidate_BRGuid");
static_assert(sizeof(BRGuidLibrary_Invalidate_BRGuid) == 0x000010, "Wrong size on BRGuidLibrary_Invalidate_BRGuid");
static_assert(offsetof(BRGuidLibrary_Invalidate_BRGuid, InGuid) == 0x000000, "Member 'BRGuidLibrary_Invalidate_BRGuid::InGuid' has a wrong offset!");

// Function Brickadia.BRGuidLibrary.IsValid_BRGuid
// 0x0014 (0x0014 - 0x0000)
struct BRGuidLibrary_IsValid_BRGuid final
{
public:
	struct FBRGuid                                InGuid;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGuidLibrary_IsValid_BRGuid) == 0x000004, "Wrong alignment on BRGuidLibrary_IsValid_BRGuid");
static_assert(sizeof(BRGuidLibrary_IsValid_BRGuid) == 0x000014, "Wrong size on BRGuidLibrary_IsValid_BRGuid");
static_assert(offsetof(BRGuidLibrary_IsValid_BRGuid, InGuid) == 0x000000, "Member 'BRGuidLibrary_IsValid_BRGuid::InGuid' has a wrong offset!");
static_assert(offsetof(BRGuidLibrary_IsValid_BRGuid, ReturnValue) == 0x000010, "Member 'BRGuidLibrary_IsValid_BRGuid::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGuidLibrary.MakePublicBrickOwnerId
// 0x0010 (0x0010 - 0x0000)
struct BRGuidLibrary_MakePublicBrickOwnerId final
{
public:
	struct FBRGuid                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRGuidLibrary_MakePublicBrickOwnerId) == 0x000004, "Wrong alignment on BRGuidLibrary_MakePublicBrickOwnerId");
static_assert(sizeof(BRGuidLibrary_MakePublicBrickOwnerId) == 0x000010, "Wrong size on BRGuidLibrary_MakePublicBrickOwnerId");
static_assert(offsetof(BRGuidLibrary_MakePublicBrickOwnerId, ReturnValue) == 0x000000, "Member 'BRGuidLibrary_MakePublicBrickOwnerId::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGuidLibrary.NotEqual_BRGuidBRGuid
// 0x0024 (0x0024 - 0x0000)
struct BRGuidLibrary_NotEqual_BRGuidBRGuid final
{
public:
	struct FBRGuid                                A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGuidLibrary_NotEqual_BRGuidBRGuid) == 0x000004, "Wrong alignment on BRGuidLibrary_NotEqual_BRGuidBRGuid");
static_assert(sizeof(BRGuidLibrary_NotEqual_BRGuidBRGuid) == 0x000024, "Wrong size on BRGuidLibrary_NotEqual_BRGuidBRGuid");
static_assert(offsetof(BRGuidLibrary_NotEqual_BRGuidBRGuid, A) == 0x000000, "Member 'BRGuidLibrary_NotEqual_BRGuidBRGuid::A' has a wrong offset!");
static_assert(offsetof(BRGuidLibrary_NotEqual_BRGuidBRGuid, B) == 0x000010, "Member 'BRGuidLibrary_NotEqual_BRGuidBRGuid::B' has a wrong offset!");
static_assert(offsetof(BRGuidLibrary_NotEqual_BRGuidBRGuid, ReturnValue) == 0x000020, "Member 'BRGuidLibrary_NotEqual_BRGuidBRGuid::ReturnValue' has a wrong offset!");

// Function Brickadia.BRGuidLibrary.Parse_StringToBRGuid
// 0x0028 (0x0028 - 0x0000)
struct BRGuidLibrary_Parse_StringToBRGuid final
{
public:
	class FString                                 GuidString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                OutGuid;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutSuccess;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRGuidLibrary_Parse_StringToBRGuid) == 0x000008, "Wrong alignment on BRGuidLibrary_Parse_StringToBRGuid");
static_assert(sizeof(BRGuidLibrary_Parse_StringToBRGuid) == 0x000028, "Wrong size on BRGuidLibrary_Parse_StringToBRGuid");
static_assert(offsetof(BRGuidLibrary_Parse_StringToBRGuid, GuidString) == 0x000000, "Member 'BRGuidLibrary_Parse_StringToBRGuid::GuidString' has a wrong offset!");
static_assert(offsetof(BRGuidLibrary_Parse_StringToBRGuid, OutGuid) == 0x000010, "Member 'BRGuidLibrary_Parse_StringToBRGuid::OutGuid' has a wrong offset!");
static_assert(offsetof(BRGuidLibrary_Parse_StringToBRGuid, bOutSuccess) == 0x000020, "Member 'BRGuidLibrary_Parse_StringToBRGuid::bOutSuccess' has a wrong offset!");

// Function Brickadia.BRHintSubsystem.AllowCloseHints
// 0x0001 (0x0001 - 0x0000)
struct BRHintSubsystem_AllowCloseHints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHintSubsystem_AllowCloseHints) == 0x000001, "Wrong alignment on BRHintSubsystem_AllowCloseHints");
static_assert(sizeof(BRHintSubsystem_AllowCloseHints) == 0x000001, "Wrong size on BRHintSubsystem_AllowCloseHints");
static_assert(offsetof(BRHintSubsystem_AllowCloseHints, ReturnValue) == 0x000000, "Member 'BRHintSubsystem_AllowCloseHints::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHintSubsystem.GetAllHints
// 0x0010 (0x0010 - 0x0000)
struct BRHintSubsystem_GetAllHints final
{
public:
	TArray<struct FHintInfoTableRow>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHintSubsystem_GetAllHints) == 0x000008, "Wrong alignment on BRHintSubsystem_GetAllHints");
static_assert(sizeof(BRHintSubsystem_GetAllHints) == 0x000010, "Wrong size on BRHintSubsystem_GetAllHints");
static_assert(offsetof(BRHintSubsystem_GetAllHints, ReturnValue) == 0x000000, "Member 'BRHintSubsystem_GetAllHints::ReturnValue' has a wrong offset!");

// Function Brickadia.BRHintSubsystem.RequestHintCategory
// 0x0002 (0x0002 - 0x0000)
struct BRHintSubsystem_RequestHintCategory final
{
public:
	EHintCategory                                 Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceDisplay;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRHintSubsystem_RequestHintCategory) == 0x000001, "Wrong alignment on BRHintSubsystem_RequestHintCategory");
static_assert(sizeof(BRHintSubsystem_RequestHintCategory) == 0x000002, "Wrong size on BRHintSubsystem_RequestHintCategory");
static_assert(offsetof(BRHintSubsystem_RequestHintCategory, Category) == 0x000000, "Member 'BRHintSubsystem_RequestHintCategory::Category' has a wrong offset!");
static_assert(offsetof(BRHintSubsystem_RequestHintCategory, ForceDisplay) == 0x000001, "Member 'BRHintSubsystem_RequestHintCategory::ForceDisplay' has a wrong offset!");

// Function Brickadia.HUDWidgetIngameBase.OnPossessedPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct HUDWidgetIngameBase_OnPossessedPawnChanged final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDWidgetIngameBase_OnPossessedPawnChanged) == 0x000008, "Wrong alignment on HUDWidgetIngameBase_OnPossessedPawnChanged");
static_assert(sizeof(HUDWidgetIngameBase_OnPossessedPawnChanged) == 0x000010, "Wrong size on HUDWidgetIngameBase_OnPossessedPawnChanged");
static_assert(offsetof(HUDWidgetIngameBase_OnPossessedPawnChanged, OldPawn) == 0x000000, "Member 'HUDWidgetIngameBase_OnPossessedPawnChanged::OldPawn' has a wrong offset!");
static_assert(offsetof(HUDWidgetIngameBase_OnPossessedPawnChanged, NewPawn) == 0x000008, "Member 'HUDWidgetIngameBase_OnPossessedPawnChanged::NewPawn' has a wrong offset!");

// Function Brickadia.BasicBrick.GetBrickType
// 0x0008 (0x0008 - 0x0000)
struct BasicBrick_GetBrickType final
{
public:
	class UBrickType*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasicBrick_GetBrickType) == 0x000008, "Wrong alignment on BasicBrick_GetBrickType");
static_assert(sizeof(BasicBrick_GetBrickType) == 0x000008, "Wrong size on BasicBrick_GetBrickType");
static_assert(offsetof(BasicBrick_GetBrickType, ReturnValue) == 0x000000, "Member 'BasicBrick_GetBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickComponentLibrary.AttachComponent
// 0x0020 (0x0020 - 0x0000)
struct BrickComponentLibrary_AttachComponent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                ComponentType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckQuota;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickComponentAttachResult                   ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComponentLibrary_AttachComponent) == 0x000008, "Wrong alignment on BrickComponentLibrary_AttachComponent");
static_assert(sizeof(BrickComponentLibrary_AttachComponent) == 0x000020, "Wrong size on BrickComponentLibrary_AttachComponent");
static_assert(offsetof(BrickComponentLibrary_AttachComponent, WorldContextObject) == 0x000000, "Member 'BrickComponentLibrary_AttachComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_AttachComponent, BrickHandle) == 0x000008, "Member 'BrickComponentLibrary_AttachComponent::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_AttachComponent, ComponentType) == 0x000010, "Member 'BrickComponentLibrary_AttachComponent::ComponentType' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_AttachComponent, bCheckQuota) == 0x000018, "Member 'BrickComponentLibrary_AttachComponent::bCheckQuota' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_AttachComponent, ReturnValue) == 0x000019, "Member 'BrickComponentLibrary_AttachComponent::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickComponentLibrary.DetachComponent
// 0x0020 (0x0020 - 0x0000)
struct BrickComponentLibrary_DetachComponent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                ComponentType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickComponentDetachResult                   ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComponentLibrary_DetachComponent) == 0x000008, "Wrong alignment on BrickComponentLibrary_DetachComponent");
static_assert(sizeof(BrickComponentLibrary_DetachComponent) == 0x000020, "Wrong size on BrickComponentLibrary_DetachComponent");
static_assert(offsetof(BrickComponentLibrary_DetachComponent, WorldContextObject) == 0x000000, "Member 'BrickComponentLibrary_DetachComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_DetachComponent, BrickHandle) == 0x000008, "Member 'BrickComponentLibrary_DetachComponent::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_DetachComponent, ComponentType) == 0x000010, "Member 'BrickComponentLibrary_DetachComponent::ComponentType' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_DetachComponent, ReturnValue) == 0x000018, "Member 'BrickComponentLibrary_DetachComponent::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickComponentLibrary.GetAllComponentTypes
// 0x0020 (0x0020 - 0x0000)
struct BrickComponentLibrary_GetAllComponentTypes final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBrickComponentTypeBase*>        OutComponentTypes;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComponentLibrary_GetAllComponentTypes) == 0x000008, "Wrong alignment on BrickComponentLibrary_GetAllComponentTypes");
static_assert(sizeof(BrickComponentLibrary_GetAllComponentTypes) == 0x000020, "Wrong size on BrickComponentLibrary_GetAllComponentTypes");
static_assert(offsetof(BrickComponentLibrary_GetAllComponentTypes, WorldContextObject) == 0x000000, "Member 'BrickComponentLibrary_GetAllComponentTypes::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetAllComponentTypes, BrickHandle) == 0x000008, "Member 'BrickComponentLibrary_GetAllComponentTypes::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetAllComponentTypes, OutComponentTypes) == 0x000010, "Member 'BrickComponentLibrary_GetAllComponentTypes::OutComponentTypes' has a wrong offset!");

// Function Brickadia.BrickComponentLibrary.GetAllRegisteredComponentTypes
// 0x0020 (0x0020 - 0x0000)
struct BrickComponentLibrary_GetAllRegisteredComponentTypes final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBrickComponentTypeBase*>        OutComponentTypes;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIncludeTombstones;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComponentLibrary_GetAllRegisteredComponentTypes) == 0x000008, "Wrong alignment on BrickComponentLibrary_GetAllRegisteredComponentTypes");
static_assert(sizeof(BrickComponentLibrary_GetAllRegisteredComponentTypes) == 0x000020, "Wrong size on BrickComponentLibrary_GetAllRegisteredComponentTypes");
static_assert(offsetof(BrickComponentLibrary_GetAllRegisteredComponentTypes, WorldContextObject) == 0x000000, "Member 'BrickComponentLibrary_GetAllRegisteredComponentTypes::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetAllRegisteredComponentTypes, OutComponentTypes) == 0x000008, "Member 'BrickComponentLibrary_GetAllRegisteredComponentTypes::OutComponentTypes' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetAllRegisteredComponentTypes, bIncludeTombstones) == 0x000018, "Member 'BrickComponentLibrary_GetAllRegisteredComponentTypes::bIncludeTombstones' has a wrong offset!");

// Function Brickadia.BrickComponentLibrary.GetComponentType
// 0x0018 (0x0018 - 0x0000)
struct BrickComponentLibrary_GetComponentType final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBrickComponentTypeBase>    ComponentTypeClass;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComponentLibrary_GetComponentType) == 0x000008, "Wrong alignment on BrickComponentLibrary_GetComponentType");
static_assert(sizeof(BrickComponentLibrary_GetComponentType) == 0x000018, "Wrong size on BrickComponentLibrary_GetComponentType");
static_assert(offsetof(BrickComponentLibrary_GetComponentType, WorldContextObject) == 0x000000, "Member 'BrickComponentLibrary_GetComponentType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetComponentType, ComponentTypeClass) == 0x000008, "Member 'BrickComponentLibrary_GetComponentType::ComponentTypeClass' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetComponentType, ReturnValue) == 0x000010, "Member 'BrickComponentLibrary_GetComponentType::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickComponentLibrary.GetComponentTypeByName
// 0x0018 (0x0018 - 0x0000)
struct BrickComponentLibrary_GetComponentTypeByName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComponentLibrary_GetComponentTypeByName) == 0x000008, "Wrong alignment on BrickComponentLibrary_GetComponentTypeByName");
static_assert(sizeof(BrickComponentLibrary_GetComponentTypeByName) == 0x000018, "Wrong size on BrickComponentLibrary_GetComponentTypeByName");
static_assert(offsetof(BrickComponentLibrary_GetComponentTypeByName, WorldContextObject) == 0x000000, "Member 'BrickComponentLibrary_GetComponentTypeByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetComponentTypeByName, Name_0) == 0x000008, "Member 'BrickComponentLibrary_GetComponentTypeByName::Name_0' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetComponentTypeByName, ReturnValue) == 0x000010, "Member 'BrickComponentLibrary_GetComponentTypeByName::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickComponentLibrary.GetComponentTypeDerivedFrom
// 0x0018 (0x0018 - 0x0000)
struct BrickComponentLibrary_GetComponentTypeDerivedFrom final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBrickComponentTypeBase>    ComponentTypeClass;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComponentLibrary_GetComponentTypeDerivedFrom) == 0x000008, "Wrong alignment on BrickComponentLibrary_GetComponentTypeDerivedFrom");
static_assert(sizeof(BrickComponentLibrary_GetComponentTypeDerivedFrom) == 0x000018, "Wrong size on BrickComponentLibrary_GetComponentTypeDerivedFrom");
static_assert(offsetof(BrickComponentLibrary_GetComponentTypeDerivedFrom, WorldContextObject) == 0x000000, "Member 'BrickComponentLibrary_GetComponentTypeDerivedFrom::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetComponentTypeDerivedFrom, ComponentTypeClass) == 0x000008, "Member 'BrickComponentLibrary_GetComponentTypeDerivedFrom::ComponentTypeClass' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetComponentTypeDerivedFrom, ReturnValue) == 0x000010, "Member 'BrickComponentLibrary_GetComponentTypeDerivedFrom::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickComponentLibrary.GetNumRegisteredComponentClasses
// 0x0010 (0x0010 - 0x0000)
struct BrickComponentLibrary_GetNumRegisteredComponentClasses final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComponentLibrary_GetNumRegisteredComponentClasses) == 0x000008, "Wrong alignment on BrickComponentLibrary_GetNumRegisteredComponentClasses");
static_assert(sizeof(BrickComponentLibrary_GetNumRegisteredComponentClasses) == 0x000010, "Wrong size on BrickComponentLibrary_GetNumRegisteredComponentClasses");
static_assert(offsetof(BrickComponentLibrary_GetNumRegisteredComponentClasses, WorldContextObject) == 0x000000, "Member 'BrickComponentLibrary_GetNumRegisteredComponentClasses::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_GetNumRegisteredComponentClasses, ReturnValue) == 0x000008, "Member 'BrickComponentLibrary_GetNumRegisteredComponentClasses::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickComponentLibrary.HasAnyComponents
// 0x0018 (0x0018 - 0x0000)
struct BrickComponentLibrary_HasAnyComponents final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComponentLibrary_HasAnyComponents) == 0x000008, "Wrong alignment on BrickComponentLibrary_HasAnyComponents");
static_assert(sizeof(BrickComponentLibrary_HasAnyComponents) == 0x000018, "Wrong size on BrickComponentLibrary_HasAnyComponents");
static_assert(offsetof(BrickComponentLibrary_HasAnyComponents, WorldContextObject) == 0x000000, "Member 'BrickComponentLibrary_HasAnyComponents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_HasAnyComponents, BrickHandle) == 0x000008, "Member 'BrickComponentLibrary_HasAnyComponents::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_HasAnyComponents, ReturnValue) == 0x000010, "Member 'BrickComponentLibrary_HasAnyComponents::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickComponentLibrary.HasComponent
// 0x0020 (0x0020 - 0x0000)
struct BrickComponentLibrary_HasComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                ComponentType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComponentLibrary_HasComponent) == 0x000008, "Wrong alignment on BrickComponentLibrary_HasComponent");
static_assert(sizeof(BrickComponentLibrary_HasComponent) == 0x000020, "Wrong size on BrickComponentLibrary_HasComponent");
static_assert(offsetof(BrickComponentLibrary_HasComponent, WorldContextObject) == 0x000000, "Member 'BrickComponentLibrary_HasComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_HasComponent, BrickHandle) == 0x000008, "Member 'BrickComponentLibrary_HasComponent::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_HasComponent, ComponentType) == 0x000010, "Member 'BrickComponentLibrary_HasComponent::ComponentType' has a wrong offset!");
static_assert(offsetof(BrickComponentLibrary_HasComponent, ReturnValue) == 0x000018, "Member 'BrickComponentLibrary_HasComponent::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_AnyStruct
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_BoxPropertyValue_AnyStruct final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_BoxPropertyValue_AnyStruct) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_BoxPropertyValue_AnyStruct");
static_assert(sizeof(InspectorPropertyValueLibrary_BoxPropertyValue_AnyStruct) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_BoxPropertyValue_AnyStruct");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_AnyStruct, InValue) == 0x000000, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_AnyStruct::InValue' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_AnyStruct, ReturnValue) == 0x000008, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_AnyStruct::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Boolean
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_BoxPropertyValue_Boolean final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_BoxPropertyValue_Boolean) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_BoxPropertyValue_Boolean");
static_assert(sizeof(InspectorPropertyValueLibrary_BoxPropertyValue_Boolean) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_BoxPropertyValue_Boolean");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Boolean, InValue) == 0x000000, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Boolean::InValue' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Boolean, ReturnValue) == 0x000008, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Boolean::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Byte
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_BoxPropertyValue_Byte final
{
public:
	uint8                                         InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_BoxPropertyValue_Byte) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_BoxPropertyValue_Byte");
static_assert(sizeof(InspectorPropertyValueLibrary_BoxPropertyValue_Byte) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_BoxPropertyValue_Byte");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Byte, InValue) == 0x000000, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Byte::InValue' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Byte, ReturnValue) == 0x000008, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Byte::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Double
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_BoxPropertyValue_Double final
{
public:
	double                                        InValue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_BoxPropertyValue_Double) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_BoxPropertyValue_Double");
static_assert(sizeof(InspectorPropertyValueLibrary_BoxPropertyValue_Double) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_BoxPropertyValue_Double");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Double, InValue) == 0x000000, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Double::InValue' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Double, ReturnValue) == 0x000008, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Double::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Float
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_BoxPropertyValue_Float final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_BoxPropertyValue_Float) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_BoxPropertyValue_Float");
static_assert(sizeof(InspectorPropertyValueLibrary_BoxPropertyValue_Float) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_BoxPropertyValue_Float");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Float, InValue) == 0x000000, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Float::InValue' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Float, ReturnValue) == 0x000008, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Float::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Int
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_BoxPropertyValue_Int final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_BoxPropertyValue_Int) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_BoxPropertyValue_Int");
static_assert(sizeof(InspectorPropertyValueLibrary_BoxPropertyValue_Int) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_BoxPropertyValue_Int");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Int, InValue) == 0x000000, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Int::InValue' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Int, ReturnValue) == 0x000008, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Int::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Int64
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_BoxPropertyValue_Int64 final
{
public:
	int64                                         InValue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_BoxPropertyValue_Int64) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_BoxPropertyValue_Int64");
static_assert(sizeof(InspectorPropertyValueLibrary_BoxPropertyValue_Int64) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_BoxPropertyValue_Int64");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Int64, InValue) == 0x000000, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Int64::InValue' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Int64, ReturnValue) == 0x000008, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Int64::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Name
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_BoxPropertyValue_Name final
{
public:
	class FName                                   InValue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_BoxPropertyValue_Name) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_BoxPropertyValue_Name");
static_assert(sizeof(InspectorPropertyValueLibrary_BoxPropertyValue_Name) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_BoxPropertyValue_Name");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Name, InValue) == 0x000000, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Name::InValue' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Name, ReturnValue) == 0x000008, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Name::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Null
// 0x0018 (0x0018 - 0x0000)
struct InspectorPropertyValueLibrary_BoxPropertyValue_Null final
{
public:
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_BoxPropertyValue_Null) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_BoxPropertyValue_Null");
static_assert(sizeof(InspectorPropertyValueLibrary_BoxPropertyValue_Null) == 0x000018, "Wrong size on InspectorPropertyValueLibrary_BoxPropertyValue_Null");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_Null, ReturnValue) == 0x000000, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_Null::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_String
// 0x0028 (0x0028 - 0x0000)
struct InspectorPropertyValueLibrary_BoxPropertyValue_String final
{
public:
	class FString                                 InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_BoxPropertyValue_String) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_BoxPropertyValue_String");
static_assert(sizeof(InspectorPropertyValueLibrary_BoxPropertyValue_String) == 0x000028, "Wrong size on InspectorPropertyValueLibrary_BoxPropertyValue_String");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_String, InValue) == 0x000000, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_String::InValue' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_BoxPropertyValue_String, ReturnValue) == 0x000010, "Member 'InspectorPropertyValueLibrary_BoxPropertyValue_String::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.GetPropertyValueType
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_GetPropertyValueType final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EInspectorPropertyValueType                   ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPropertyValueLibrary_GetPropertyValueType) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_GetPropertyValueType");
static_assert(sizeof(InspectorPropertyValueLibrary_GetPropertyValueType) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_GetPropertyValueType");
static_assert(offsetof(InspectorPropertyValueLibrary_GetPropertyValueType, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_GetPropertyValueType::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_GetPropertyValueType, ReturnValue) == 0x000018, "Member 'InspectorPropertyValueLibrary_GetPropertyValueType::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.Int64ToString
// 0x0018 (0x0018 - 0x0000)
struct InspectorPropertyValueLibrary_Int64ToString final
{
public:
	int64                                         Input;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_Int64ToString) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_Int64ToString");
static_assert(sizeof(InspectorPropertyValueLibrary_Int64ToString) == 0x000018, "Wrong size on InspectorPropertyValueLibrary_Int64ToString");
static_assert(offsetof(InspectorPropertyValueLibrary_Int64ToString, Input) == 0x000000, "Member 'InspectorPropertyValueLibrary_Int64ToString::Input' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_Int64ToString, ReturnValue) == 0x000008, "Member 'InspectorPropertyValueLibrary_Int64ToString::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.PropertyValueToString
// 0x0028 (0x0028 - 0x0000)
struct InspectorPropertyValueLibrary_PropertyValueToString final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_PropertyValueToString) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_PropertyValueToString");
static_assert(sizeof(InspectorPropertyValueLibrary_PropertyValueToString) == 0x000028, "Wrong size on InspectorPropertyValueLibrary_PropertyValueToString");
static_assert(offsetof(InspectorPropertyValueLibrary_PropertyValueToString, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_PropertyValueToString::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_PropertyValueToString, ReturnValue) == 0x000018, "Member 'InspectorPropertyValueLibrary_PropertyValueToString::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.StringToInt64
// 0x0018 (0x0018 - 0x0000)
struct InspectorPropertyValueLibrary_StringToInt64 final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_StringToInt64) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_StringToInt64");
static_assert(sizeof(InspectorPropertyValueLibrary_StringToInt64) == 0x000018, "Wrong size on InspectorPropertyValueLibrary_StringToInt64");
static_assert(offsetof(InspectorPropertyValueLibrary_StringToInt64, Input) == 0x000000, "Member 'InspectorPropertyValueLibrary_StringToInt64::Input' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_StringToInt64, ReturnValue) == 0x000010, "Member 'InspectorPropertyValueLibrary_StringToInt64::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_AnyStruct
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Unboxed;                                           // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct");
static_assert(sizeof(InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct, bIsValid) == 0x000018, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct::bIsValid' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct, Unboxed) == 0x00001C, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct::Unboxed' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Boolean
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Unboxed;                                           // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean");
static_assert(sizeof(InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean, bIsValid) == 0x000018, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean::bIsValid' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean, Unboxed) == 0x000019, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean::Unboxed' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Byte
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_UnboxPropertyValue_Byte final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Unboxed;                                           // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPropertyValueLibrary_UnboxPropertyValue_Byte) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_UnboxPropertyValue_Byte");
static_assert(sizeof(InspectorPropertyValueLibrary_UnboxPropertyValue_Byte) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_UnboxPropertyValue_Byte");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Byte, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Byte::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Byte, bIsValid) == 0x000018, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Byte::bIsValid' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Byte, Unboxed) == 0x000019, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Byte::Unboxed' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Double
// 0x0028 (0x0028 - 0x0000)
struct InspectorPropertyValueLibrary_UnboxPropertyValue_Double final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Unboxed;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_UnboxPropertyValue_Double) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_UnboxPropertyValue_Double");
static_assert(sizeof(InspectorPropertyValueLibrary_UnboxPropertyValue_Double) == 0x000028, "Wrong size on InspectorPropertyValueLibrary_UnboxPropertyValue_Double");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Double, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Double::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Double, bIsValid) == 0x000018, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Double::bIsValid' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Double, Unboxed) == 0x000020, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Double::Unboxed' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Float
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_UnboxPropertyValue_Float final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Unboxed;                                           // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_UnboxPropertyValue_Float) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_UnboxPropertyValue_Float");
static_assert(sizeof(InspectorPropertyValueLibrary_UnboxPropertyValue_Float) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_UnboxPropertyValue_Float");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Float, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Float::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Float, bIsValid) == 0x000018, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Float::bIsValid' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Float, Unboxed) == 0x00001C, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Float::Unboxed' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Int
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyValueLibrary_UnboxPropertyValue_Int final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Unboxed;                                           // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_UnboxPropertyValue_Int) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_UnboxPropertyValue_Int");
static_assert(sizeof(InspectorPropertyValueLibrary_UnboxPropertyValue_Int) == 0x000020, "Wrong size on InspectorPropertyValueLibrary_UnboxPropertyValue_Int");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Int, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Int::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Int, bIsValid) == 0x000018, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Int::bIsValid' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Int, Unboxed) == 0x00001C, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Int::Unboxed' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Int64
// 0x0028 (0x0028 - 0x0000)
struct InspectorPropertyValueLibrary_UnboxPropertyValue_Int64 final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Unboxed;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_UnboxPropertyValue_Int64) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_UnboxPropertyValue_Int64");
static_assert(sizeof(InspectorPropertyValueLibrary_UnboxPropertyValue_Int64) == 0x000028, "Wrong size on InspectorPropertyValueLibrary_UnboxPropertyValue_Int64");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Int64, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Int64::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Int64, bIsValid) == 0x000018, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Int64::bIsValid' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Int64, Unboxed) == 0x000020, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Int64::Unboxed' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Name
// 0x0028 (0x0028 - 0x0000)
struct InspectorPropertyValueLibrary_UnboxPropertyValue_Name final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Unboxed;                                           // 0x001C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPropertyValueLibrary_UnboxPropertyValue_Name) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_UnboxPropertyValue_Name");
static_assert(sizeof(InspectorPropertyValueLibrary_UnboxPropertyValue_Name) == 0x000028, "Wrong size on InspectorPropertyValueLibrary_UnboxPropertyValue_Name");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Name, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Name::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Name, bIsValid) == 0x000018, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Name::bIsValid' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_Name, Unboxed) == 0x00001C, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_Name::Unboxed' has a wrong offset!");

// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_String
// 0x0030 (0x0030 - 0x0000)
struct InspectorPropertyValueLibrary_UnboxPropertyValue_String final
{
public:
	struct FInspectorPropertyValue                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Unboxed;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyValueLibrary_UnboxPropertyValue_String) == 0x000008, "Wrong alignment on InspectorPropertyValueLibrary_UnboxPropertyValue_String");
static_assert(sizeof(InspectorPropertyValueLibrary_UnboxPropertyValue_String) == 0x000030, "Wrong size on InspectorPropertyValueLibrary_UnboxPropertyValue_String");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_String, Value) == 0x000000, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_String::Value' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_String, bIsValid) == 0x000018, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_String::bIsValid' has a wrong offset!");
static_assert(offsetof(InspectorPropertyValueLibrary_UnboxPropertyValue_String, Unboxed) == 0x000020, "Member 'InspectorPropertyValueLibrary_UnboxPropertyValue_String::Unboxed' has a wrong offset!");

// Function Brickadia.BRPlayerPartComponent.GetMeshColorSectionIndex
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerPartComponent_GetMeshColorSectionIndex final
{
public:
	int32                                         FaceIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerPartComponent_GetMeshColorSectionIndex) == 0x000004, "Wrong alignment on BRPlayerPartComponent_GetMeshColorSectionIndex");
static_assert(sizeof(BRPlayerPartComponent_GetMeshColorSectionIndex) == 0x000008, "Wrong size on BRPlayerPartComponent_GetMeshColorSectionIndex");
static_assert(offsetof(BRPlayerPartComponent_GetMeshColorSectionIndex, FaceIndex) == 0x000000, "Member 'BRPlayerPartComponent_GetMeshColorSectionIndex::FaceIndex' has a wrong offset!");
static_assert(offsetof(BRPlayerPartComponent_GetMeshColorSectionIndex, ReturnValue) == 0x000004, "Member 'BRPlayerPartComponent_GetMeshColorSectionIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerPartComponent.SetDecal
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerPartComponent_SetDecal final
{
public:
	class UBRPlayerDecalDescriptor*               NewDecal;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerPartComponent_SetDecal) == 0x000008, "Wrong alignment on BRPlayerPartComponent_SetDecal");
static_assert(sizeof(BRPlayerPartComponent_SetDecal) == 0x000008, "Wrong size on BRPlayerPartComponent_SetDecal");
static_assert(offsetof(BRPlayerPartComponent_SetDecal, NewDecal) == 0x000000, "Member 'BRPlayerPartComponent_SetDecal::NewDecal' has a wrong offset!");

// Function Brickadia.BRPlayerPartComponent.SetDescriptor
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerPartComponent_SetDescriptor final
{
public:
	class UBRPlayerPartDescriptor*                NewDescriptor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerPartComponent_SetDescriptor) == 0x000008, "Wrong alignment on BRPlayerPartComponent_SetDescriptor");
static_assert(sizeof(BRPlayerPartComponent_SetDescriptor) == 0x000008, "Wrong size on BRPlayerPartComponent_SetDescriptor");
static_assert(offsetof(BRPlayerPartComponent_SetDescriptor, NewDescriptor) == 0x000000, "Member 'BRPlayerPartComponent_SetDescriptor::NewDescriptor' has a wrong offset!");

// Function Brickadia.BRPlayerPartComponent.SetMeshColor
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerPartComponent_SetMeshColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerPartComponent_SetMeshColor) == 0x000004, "Wrong alignment on BRPlayerPartComponent_SetMeshColor");
static_assert(sizeof(BRPlayerPartComponent_SetMeshColor) == 0x000008, "Wrong size on BRPlayerPartComponent_SetMeshColor");
static_assert(offsetof(BRPlayerPartComponent_SetMeshColor, Index_0) == 0x000000, "Member 'BRPlayerPartComponent_SetMeshColor::Index_0' has a wrong offset!");
static_assert(offsetof(BRPlayerPartComponent_SetMeshColor, Value) == 0x000004, "Member 'BRPlayerPartComponent_SetMeshColor::Value' has a wrong offset!");

// Function Brickadia.BRPlayerPartComponent.SetMirrored
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerPartComponent_SetMirrored final
{
public:
	bool                                          bMirror;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerPartComponent_SetMirrored) == 0x000001, "Wrong alignment on BRPlayerPartComponent_SetMirrored");
static_assert(sizeof(BRPlayerPartComponent_SetMirrored) == 0x000001, "Wrong size on BRPlayerPartComponent_SetMirrored");
static_assert(offsetof(BRPlayerPartComponent_SetMirrored, bMirror) == 0x000000, "Member 'BRPlayerPartComponent_SetMirrored::bMirror' has a wrong offset!");

// Function Brickadia.BRPlayerPartComponent.GetMeshColor
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerPartComponent_GetMeshColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerPartComponent_GetMeshColor) == 0x000004, "Wrong alignment on BRPlayerPartComponent_GetMeshColor");
static_assert(sizeof(BRPlayerPartComponent_GetMeshColor) == 0x000008, "Wrong size on BRPlayerPartComponent_GetMeshColor");
static_assert(offsetof(BRPlayerPartComponent_GetMeshColor, Index_0) == 0x000000, "Member 'BRPlayerPartComponent_GetMeshColor::Index_0' has a wrong offset!");
static_assert(offsetof(BRPlayerPartComponent_GetMeshColor, ReturnValue) == 0x000004, "Member 'BRPlayerPartComponent_GetMeshColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPainterScrollPalette.ColorSelected
// 0x0004 (0x0004 - 0x0000)
struct BRPainterScrollPalette_ColorSelected final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPainterScrollPalette_ColorSelected) == 0x000004, "Wrong alignment on BRPainterScrollPalette_ColorSelected");
static_assert(sizeof(BRPainterScrollPalette_ColorSelected) == 0x000004, "Wrong size on BRPainterScrollPalette_ColorSelected");
static_assert(offsetof(BRPainterScrollPalette_ColorSelected, Color) == 0x000000, "Member 'BRPainterScrollPalette_ColorSelected::Color' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetAlwaysUsesDeltaSnap
// 0x0001 (0x0001 - 0x0000)
struct SpinBoxInteger_SetAlwaysUsesDeltaSnap final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetAlwaysUsesDeltaSnap) == 0x000001, "Wrong alignment on SpinBoxInteger_SetAlwaysUsesDeltaSnap");
static_assert(sizeof(SpinBoxInteger_SetAlwaysUsesDeltaSnap) == 0x000001, "Wrong size on SpinBoxInteger_SetAlwaysUsesDeltaSnap");
static_assert(offsetof(SpinBoxInteger_SetAlwaysUsesDeltaSnap, bNewValue) == 0x000000, "Member 'SpinBoxInteger_SetAlwaysUsesDeltaSnap::bNewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetDelta
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_SetDelta final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetDelta) == 0x000004, "Wrong alignment on SpinBoxInteger_SetDelta");
static_assert(sizeof(SpinBoxInteger_SetDelta) == 0x000004, "Wrong size on SpinBoxInteger_SetDelta");
static_assert(offsetof(SpinBoxInteger_SetDelta, NewValue) == 0x000000, "Member 'SpinBoxInteger_SetDelta::NewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetDisplayUnit
// 0x0001 (0x0001 - 0x0000)
struct SpinBoxInteger_SetDisplayUnit final
{
public:
	EUnit                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetDisplayUnit) == 0x000001, "Wrong alignment on SpinBoxInteger_SetDisplayUnit");
static_assert(sizeof(SpinBoxInteger_SetDisplayUnit) == 0x000001, "Wrong size on SpinBoxInteger_SetDisplayUnit");
static_assert(offsetof(SpinBoxInteger_SetDisplayUnit, NewValue) == 0x000000, "Member 'SpinBoxInteger_SetDisplayUnit::NewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetForegroundColor
// 0x0014 (0x0014 - 0x0000)
struct SpinBoxInteger_SetForegroundColor final
{
public:
	struct FSlateColor                            InForegroundColor;                                 // 0x0000(0x0014)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetForegroundColor) == 0x000004, "Wrong alignment on SpinBoxInteger_SetForegroundColor");
static_assert(sizeof(SpinBoxInteger_SetForegroundColor) == 0x000014, "Wrong size on SpinBoxInteger_SetForegroundColor");
static_assert(offsetof(SpinBoxInteger_SetForegroundColor, InForegroundColor) == 0x000000, "Member 'SpinBoxInteger_SetForegroundColor::InForegroundColor' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetMaxFractionalDigits
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_SetMaxFractionalDigits final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetMaxFractionalDigits) == 0x000004, "Wrong alignment on SpinBoxInteger_SetMaxFractionalDigits");
static_assert(sizeof(SpinBoxInteger_SetMaxFractionalDigits) == 0x000004, "Wrong size on SpinBoxInteger_SetMaxFractionalDigits");
static_assert(offsetof(SpinBoxInteger_SetMaxFractionalDigits, NewValue) == 0x000000, "Member 'SpinBoxInteger_SetMaxFractionalDigits::NewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetMaxSliderValue
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_SetMaxSliderValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetMaxSliderValue) == 0x000004, "Wrong alignment on SpinBoxInteger_SetMaxSliderValue");
static_assert(sizeof(SpinBoxInteger_SetMaxSliderValue) == 0x000004, "Wrong size on SpinBoxInteger_SetMaxSliderValue");
static_assert(offsetof(SpinBoxInteger_SetMaxSliderValue, NewValue) == 0x000000, "Member 'SpinBoxInteger_SetMaxSliderValue::NewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_SetMaxValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetMaxValue) == 0x000004, "Wrong alignment on SpinBoxInteger_SetMaxValue");
static_assert(sizeof(SpinBoxInteger_SetMaxValue) == 0x000004, "Wrong size on SpinBoxInteger_SetMaxValue");
static_assert(offsetof(SpinBoxInteger_SetMaxValue, NewValue) == 0x000000, "Member 'SpinBoxInteger_SetMaxValue::NewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetMinFractionalDigits
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_SetMinFractionalDigits final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetMinFractionalDigits) == 0x000004, "Wrong alignment on SpinBoxInteger_SetMinFractionalDigits");
static_assert(sizeof(SpinBoxInteger_SetMinFractionalDigits) == 0x000004, "Wrong size on SpinBoxInteger_SetMinFractionalDigits");
static_assert(offsetof(SpinBoxInteger_SetMinFractionalDigits, NewValue) == 0x000000, "Member 'SpinBoxInteger_SetMinFractionalDigits::NewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetMinSliderValue
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_SetMinSliderValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetMinSliderValue) == 0x000004, "Wrong alignment on SpinBoxInteger_SetMinSliderValue");
static_assert(sizeof(SpinBoxInteger_SetMinSliderValue) == 0x000004, "Wrong size on SpinBoxInteger_SetMinSliderValue");
static_assert(offsetof(SpinBoxInteger_SetMinSliderValue, NewValue) == 0x000000, "Member 'SpinBoxInteger_SetMinSliderValue::NewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetMinValue
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_SetMinValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetMinValue) == 0x000004, "Wrong alignment on SpinBoxInteger_SetMinValue");
static_assert(sizeof(SpinBoxInteger_SetMinValue) == 0x000004, "Wrong size on SpinBoxInteger_SetMinValue");
static_assert(offsetof(SpinBoxInteger_SetMinValue, NewValue) == 0x000000, "Member 'SpinBoxInteger_SetMinValue::NewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetUnderlyingUnit
// 0x0001 (0x0001 - 0x0000)
struct SpinBoxInteger_SetUnderlyingUnit final
{
public:
	EUnit                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetUnderlyingUnit) == 0x000001, "Wrong alignment on SpinBoxInteger_SetUnderlyingUnit");
static_assert(sizeof(SpinBoxInteger_SetUnderlyingUnit) == 0x000001, "Wrong size on SpinBoxInteger_SetUnderlyingUnit");
static_assert(offsetof(SpinBoxInteger_SetUnderlyingUnit, NewValue) == 0x000000, "Member 'SpinBoxInteger_SetUnderlyingUnit::NewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.SetValue
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_SetValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_SetValue) == 0x000004, "Wrong alignment on SpinBoxInteger_SetValue");
static_assert(sizeof(SpinBoxInteger_SetValue) == 0x000004, "Wrong size on SpinBoxInteger_SetValue");
static_assert(offsetof(SpinBoxInteger_SetValue, NewValue) == 0x000000, "Member 'SpinBoxInteger_SetValue::NewValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetAlwaysUsesDeltaSnap
// 0x0001 (0x0001 - 0x0000)
struct SpinBoxInteger_GetAlwaysUsesDeltaSnap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetAlwaysUsesDeltaSnap) == 0x000001, "Wrong alignment on SpinBoxInteger_GetAlwaysUsesDeltaSnap");
static_assert(sizeof(SpinBoxInteger_GetAlwaysUsesDeltaSnap) == 0x000001, "Wrong size on SpinBoxInteger_GetAlwaysUsesDeltaSnap");
static_assert(offsetof(SpinBoxInteger_GetAlwaysUsesDeltaSnap, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetAlwaysUsesDeltaSnap::ReturnValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetDelta
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_GetDelta final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetDelta) == 0x000004, "Wrong alignment on SpinBoxInteger_GetDelta");
static_assert(sizeof(SpinBoxInteger_GetDelta) == 0x000004, "Wrong size on SpinBoxInteger_GetDelta");
static_assert(offsetof(SpinBoxInteger_GetDelta, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetDelta::ReturnValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetDisplayUnit
// 0x0001 (0x0001 - 0x0000)
struct SpinBoxInteger_GetDisplayUnit final
{
public:
	EUnit                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetDisplayUnit) == 0x000001, "Wrong alignment on SpinBoxInteger_GetDisplayUnit");
static_assert(sizeof(SpinBoxInteger_GetDisplayUnit) == 0x000001, "Wrong size on SpinBoxInteger_GetDisplayUnit");
static_assert(offsetof(SpinBoxInteger_GetDisplayUnit, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetDisplayUnit::ReturnValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetMaxFractionalDigits
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_GetMaxFractionalDigits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetMaxFractionalDigits) == 0x000004, "Wrong alignment on SpinBoxInteger_GetMaxFractionalDigits");
static_assert(sizeof(SpinBoxInteger_GetMaxFractionalDigits) == 0x000004, "Wrong size on SpinBoxInteger_GetMaxFractionalDigits");
static_assert(offsetof(SpinBoxInteger_GetMaxFractionalDigits, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetMaxFractionalDigits::ReturnValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetMaxSliderValue
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_GetMaxSliderValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetMaxSliderValue) == 0x000004, "Wrong alignment on SpinBoxInteger_GetMaxSliderValue");
static_assert(sizeof(SpinBoxInteger_GetMaxSliderValue) == 0x000004, "Wrong size on SpinBoxInteger_GetMaxSliderValue");
static_assert(offsetof(SpinBoxInteger_GetMaxSliderValue, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetMaxSliderValue::ReturnValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_GetMaxValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetMaxValue) == 0x000004, "Wrong alignment on SpinBoxInteger_GetMaxValue");
static_assert(sizeof(SpinBoxInteger_GetMaxValue) == 0x000004, "Wrong size on SpinBoxInteger_GetMaxValue");
static_assert(offsetof(SpinBoxInteger_GetMaxValue, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetMaxValue::ReturnValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetMinFractionalDigits
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_GetMinFractionalDigits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetMinFractionalDigits) == 0x000004, "Wrong alignment on SpinBoxInteger_GetMinFractionalDigits");
static_assert(sizeof(SpinBoxInteger_GetMinFractionalDigits) == 0x000004, "Wrong size on SpinBoxInteger_GetMinFractionalDigits");
static_assert(offsetof(SpinBoxInteger_GetMinFractionalDigits, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetMinFractionalDigits::ReturnValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetMinSliderValue
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_GetMinSliderValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetMinSliderValue) == 0x000004, "Wrong alignment on SpinBoxInteger_GetMinSliderValue");
static_assert(sizeof(SpinBoxInteger_GetMinSliderValue) == 0x000004, "Wrong size on SpinBoxInteger_GetMinSliderValue");
static_assert(offsetof(SpinBoxInteger_GetMinSliderValue, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetMinSliderValue::ReturnValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetMinValue
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_GetMinValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetMinValue) == 0x000004, "Wrong alignment on SpinBoxInteger_GetMinValue");
static_assert(sizeof(SpinBoxInteger_GetMinValue) == 0x000004, "Wrong size on SpinBoxInteger_GetMinValue");
static_assert(offsetof(SpinBoxInteger_GetMinValue, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetMinValue::ReturnValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetUnderlyingUnit
// 0x0001 (0x0001 - 0x0000)
struct SpinBoxInteger_GetUnderlyingUnit final
{
public:
	EUnit                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetUnderlyingUnit) == 0x000001, "Wrong alignment on SpinBoxInteger_GetUnderlyingUnit");
static_assert(sizeof(SpinBoxInteger_GetUnderlyingUnit) == 0x000001, "Wrong size on SpinBoxInteger_GetUnderlyingUnit");
static_assert(offsetof(SpinBoxInteger_GetUnderlyingUnit, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetUnderlyingUnit::ReturnValue' has a wrong offset!");

// Function Brickadia.SpinBoxInteger.GetValue
// 0x0004 (0x0004 - 0x0000)
struct SpinBoxInteger_GetValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinBoxInteger_GetValue) == 0x000004, "Wrong alignment on SpinBoxInteger_GetValue");
static_assert(sizeof(SpinBoxInteger_GetValue) == 0x000004, "Wrong size on SpinBoxInteger_GetValue");
static_assert(offsetof(SpinBoxInteger_GetValue, ReturnValue) == 0x000000, "Member 'SpinBoxInteger_GetValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickComponentType_Internal_WheelEngine.Effects_OnEngineAttached
// 0x0080 (0x0080 - 0x0000)
struct BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached final
{
public:
	struct FBrickComponentInstanceRef             InstanceRef;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentData_WheelEngine        EngineState;                                       // 0x0010(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EBrickComponentAttachReason                   Reason;                                            // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached) == 0x000008, "Wrong alignment on BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached");
static_assert(sizeof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached) == 0x000080, "Wrong size on BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached, InstanceRef) == 0x000000, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached::InstanceRef' has a wrong offset!");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached, EngineState) == 0x000010, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached::EngineState' has a wrong offset!");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached, Reason) == 0x000078, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached::Reason' has a wrong offset!");

// Function Brickadia.BrickComponentType_Internal_WheelEngine.Effects_OnEngineAudioDescriptorUpdated
// 0x0080 (0x0080 - 0x0000)
struct BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated final
{
public:
	struct FBrickComponentInstanceRef             InstanceRef;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentData_WheelEngine        EngineState;                                       // 0x0010(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EBrickComponentPropertyChangeReason           Reason;                                            // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated) == 0x000008, "Wrong alignment on BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated");
static_assert(sizeof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated) == 0x000080, "Wrong size on BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated, InstanceRef) == 0x000000, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated::InstanceRef' has a wrong offset!");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated, EngineState) == 0x000010, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated::EngineState' has a wrong offset!");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated, Reason) == 0x000078, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated::Reason' has a wrong offset!");

// Function Brickadia.BrickComponentType_Internal_WheelEngine.Effects_OnEngineOnStateChanged
// 0x0190 (0x0190 - 0x0000)
struct BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged final
{
public:
	struct FBrickComponentInstanceRef             InstanceRef;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentData_WheelEngine        EngineState;                                       // 0x0010(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickWheelEngineUpdateContext         EngineContext;                                     // 0x0080(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged) == 0x000010, "Wrong alignment on BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged");
static_assert(sizeof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged) == 0x000190, "Wrong size on BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged, InstanceRef) == 0x000000, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged::InstanceRef' has a wrong offset!");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged, EngineState) == 0x000010, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged::EngineState' has a wrong offset!");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged, EngineContext) == 0x000080, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged::EngineContext' has a wrong offset!");

// Function Brickadia.BrickComponentType_Internal_WheelEngine.Effects_OnEngineUpdate
// 0x0190 (0x0190 - 0x0000)
struct BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate final
{
public:
	struct FBrickComponentInstanceRef             InstanceRef;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentData_WheelEngine        EngineState;                                       // 0x0010(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickWheelEngineUpdateContext         EngineContext;                                     // 0x0080(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate) == 0x000010, "Wrong alignment on BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate");
static_assert(sizeof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate) == 0x000190, "Wrong size on BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate, InstanceRef) == 0x000000, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate::InstanceRef' has a wrong offset!");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate, EngineState) == 0x000010, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate::EngineState' has a wrong offset!");
static_assert(offsetof(BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate, EngineContext) == 0x000080, "Member 'BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate::EngineContext' has a wrong offset!");

// Function Brickadia.ProceduralBrickDebugComponent.SetBrick
// 0x0008 (0x0008 - 0x0000)
struct ProceduralBrickDebugComponent_SetBrick final
{
public:
	class UProceduralBrick*                       NewBrick;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralBrickDebugComponent_SetBrick) == 0x000008, "Wrong alignment on ProceduralBrickDebugComponent_SetBrick");
static_assert(sizeof(ProceduralBrickDebugComponent_SetBrick) == 0x000008, "Wrong size on ProceduralBrickDebugComponent_SetBrick");
static_assert(offsetof(ProceduralBrickDebugComponent_SetBrick, NewBrick) == 0x000000, "Member 'ProceduralBrickDebugComponent_SetBrick::NewBrick' has a wrong offset!");

// Function Brickadia.BrickBuildingTemplate.IsValid
// 0x0001 (0x0001 - 0x0000)
struct BrickBuildingTemplate_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickBuildingTemplate_IsValid) == 0x000001, "Wrong alignment on BrickBuildingTemplate_IsValid");
static_assert(sizeof(BrickBuildingTemplate_IsValid) == 0x000001, "Wrong size on BrickBuildingTemplate_IsValid");
static_assert(offsetof(BrickBuildingTemplate_IsValid, ReturnValue) == 0x000000, "Member 'BrickBuildingTemplate_IsValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickDuplicatorLibrary.CaptureSelectionFromBox
// 0x0040 (0x0040 - 0x0000)
struct BrickDuplicatorLibrary_CaptureSelectionFromBox final
{
public:
	class UBrickGridComponent*                    BrickGrid;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntBox                                Box;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxBricks;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutOverflow;                                      // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireTrust;                                     // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABRPlayerController*                    ControllerForTrustCheck;                           // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumTrustFails;                                  // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickSelection*                        ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDuplicatorLibrary_CaptureSelectionFromBox) == 0x000008, "Wrong alignment on BrickDuplicatorLibrary_CaptureSelectionFromBox");
static_assert(sizeof(BrickDuplicatorLibrary_CaptureSelectionFromBox) == 0x000040, "Wrong size on BrickDuplicatorLibrary_CaptureSelectionFromBox");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureSelectionFromBox, BrickGrid) == 0x000000, "Member 'BrickDuplicatorLibrary_CaptureSelectionFromBox::BrickGrid' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureSelectionFromBox, Box) == 0x000008, "Member 'BrickDuplicatorLibrary_CaptureSelectionFromBox::Box' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureSelectionFromBox, MaxBricks) == 0x000020, "Member 'BrickDuplicatorLibrary_CaptureSelectionFromBox::MaxBricks' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureSelectionFromBox, bOutOverflow) == 0x000024, "Member 'BrickDuplicatorLibrary_CaptureSelectionFromBox::bOutOverflow' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureSelectionFromBox, bRequireTrust) == 0x000025, "Member 'BrickDuplicatorLibrary_CaptureSelectionFromBox::bRequireTrust' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureSelectionFromBox, ControllerForTrustCheck) == 0x000028, "Member 'BrickDuplicatorLibrary_CaptureSelectionFromBox::ControllerForTrustCheck' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureSelectionFromBox, OutNumTrustFails) == 0x000030, "Member 'BrickDuplicatorLibrary_CaptureSelectionFromBox::OutNumTrustFails' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureSelectionFromBox, ReturnValue) == 0x000038, "Member 'BrickDuplicatorLibrary_CaptureSelectionFromBox::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickDuplicatorLibrary.CaptureSelectionFromGrid
// 0x0010 (0x0010 - 0x0000)
struct BrickDuplicatorLibrary_CaptureSelectionFromGrid final
{
public:
	class UBrickGridComponent*                    BrickGrid;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickSelection*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDuplicatorLibrary_CaptureSelectionFromGrid) == 0x000008, "Wrong alignment on BrickDuplicatorLibrary_CaptureSelectionFromGrid");
static_assert(sizeof(BrickDuplicatorLibrary_CaptureSelectionFromGrid) == 0x000010, "Wrong size on BrickDuplicatorLibrary_CaptureSelectionFromGrid");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureSelectionFromGrid, BrickGrid) == 0x000000, "Member 'BrickDuplicatorLibrary_CaptureSelectionFromGrid::BrickGrid' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureSelectionFromGrid, ReturnValue) == 0x000008, "Member 'BrickDuplicatorLibrary_CaptureSelectionFromGrid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickDuplicatorLibrary.CaptureTemplateFromBox
// 0x0040 (0x0040 - 0x0000)
struct BrickDuplicatorLibrary_CaptureTemplateFromBox final
{
public:
	class UBrickGridComponent*                    BrickGrid;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntBox                                Box;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxBricks;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutOverflow;                                      // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireTrust;                                     // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABRPlayerController*                    ControllerForTrustCheck;                           // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumTrustFails;                                  // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickBuildingTemplate*                 ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDuplicatorLibrary_CaptureTemplateFromBox) == 0x000008, "Wrong alignment on BrickDuplicatorLibrary_CaptureTemplateFromBox");
static_assert(sizeof(BrickDuplicatorLibrary_CaptureTemplateFromBox) == 0x000040, "Wrong size on BrickDuplicatorLibrary_CaptureTemplateFromBox");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureTemplateFromBox, BrickGrid) == 0x000000, "Member 'BrickDuplicatorLibrary_CaptureTemplateFromBox::BrickGrid' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureTemplateFromBox, Box) == 0x000008, "Member 'BrickDuplicatorLibrary_CaptureTemplateFromBox::Box' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureTemplateFromBox, MaxBricks) == 0x000020, "Member 'BrickDuplicatorLibrary_CaptureTemplateFromBox::MaxBricks' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureTemplateFromBox, bOutOverflow) == 0x000024, "Member 'BrickDuplicatorLibrary_CaptureTemplateFromBox::bOutOverflow' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureTemplateFromBox, bRequireTrust) == 0x000025, "Member 'BrickDuplicatorLibrary_CaptureTemplateFromBox::bRequireTrust' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureTemplateFromBox, ControllerForTrustCheck) == 0x000028, "Member 'BrickDuplicatorLibrary_CaptureTemplateFromBox::ControllerForTrustCheck' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureTemplateFromBox, OutNumTrustFails) == 0x000030, "Member 'BrickDuplicatorLibrary_CaptureTemplateFromBox::OutNumTrustFails' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CaptureTemplateFromBox, ReturnValue) == 0x000038, "Member 'BrickDuplicatorLibrary_CaptureTemplateFromBox::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickDuplicatorLibrary.CreateTemplateFromSelection
// 0x0020 (0x0020 - 0x0000)
struct BrickDuplicatorLibrary_CreateTemplateFromSelection final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickSelection*                        Selection;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreWires;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickBuildingTemplate*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDuplicatorLibrary_CreateTemplateFromSelection) == 0x000008, "Wrong alignment on BrickDuplicatorLibrary_CreateTemplateFromSelection");
static_assert(sizeof(BrickDuplicatorLibrary_CreateTemplateFromSelection) == 0x000020, "Wrong size on BrickDuplicatorLibrary_CreateTemplateFromSelection");
static_assert(offsetof(BrickDuplicatorLibrary_CreateTemplateFromSelection, WorldContextObject) == 0x000000, "Member 'BrickDuplicatorLibrary_CreateTemplateFromSelection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CreateTemplateFromSelection, Selection) == 0x000008, "Member 'BrickDuplicatorLibrary_CreateTemplateFromSelection::Selection' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CreateTemplateFromSelection, bIgnoreWires) == 0x000010, "Member 'BrickDuplicatorLibrary_CreateTemplateFromSelection::bIgnoreWires' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_CreateTemplateFromSelection, ReturnValue) == 0x000018, "Member 'BrickDuplicatorLibrary_CreateTemplateFromSelection::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickDuplicatorLibrary.GetTemplatePlacementInfo
// 0x0098 (0x0098 - 0x0000)
struct BrickDuplicatorLibrary_GetTemplatePlacementInfo final
{
public:
	class UBrickRegistry*                         Registry;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickBuildingTemplate*                 Template;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickTemplatePlacementInfo            ReturnValue;                                       // 0x0010(0x0088)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDuplicatorLibrary_GetTemplatePlacementInfo) == 0x000008, "Wrong alignment on BrickDuplicatorLibrary_GetTemplatePlacementInfo");
static_assert(sizeof(BrickDuplicatorLibrary_GetTemplatePlacementInfo) == 0x000098, "Wrong size on BrickDuplicatorLibrary_GetTemplatePlacementInfo");
static_assert(offsetof(BrickDuplicatorLibrary_GetTemplatePlacementInfo, Registry) == 0x000000, "Member 'BrickDuplicatorLibrary_GetTemplatePlacementInfo::Registry' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_GetTemplatePlacementInfo, Template) == 0x000008, "Member 'BrickDuplicatorLibrary_GetTemplatePlacementInfo::Template' has a wrong offset!");
static_assert(offsetof(BrickDuplicatorLibrary_GetTemplatePlacementInfo, ReturnValue) == 0x000010, "Member 'BrickDuplicatorLibrary_GetTemplatePlacementInfo::ReturnValue' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerAddColorPalette
// 0x0020 (0x0020 - 0x0000)
struct BRServerSettingsManagerComponent_ServerAddColorPalette final
{
public:
	struct FBRColorPaletteData                    Data;                                              // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerAddColorPalette) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerAddColorPalette");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerAddColorPalette) == 0x000020, "Wrong size on BRServerSettingsManagerComponent_ServerAddColorPalette");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerAddColorPalette, Data) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerAddColorPalette::Data' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerChangeMap
// 0x0008 (0x0008 - 0x0000)
struct BRServerSettingsManagerComponent_ServerChangeMap final
{
public:
	class UBRMapInfo*                             NewMap;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerChangeMap) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerChangeMap");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerChangeMap) == 0x000008, "Wrong size on BRServerSettingsManagerComponent_ServerChangeMap");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerChangeMap, NewMap) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerChangeMap::NewMap' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerChangeRoleName
// 0x0028 (0x0028 - 0x0000)
struct BRServerSettingsManagerComponent_ServerChangeRoleName final
{
public:
	class FString                                 RoleId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnnounce;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerChangeRoleName) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerChangeRoleName");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerChangeRoleName) == 0x000028, "Wrong size on BRServerSettingsManagerComponent_ServerChangeRoleName");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerChangeRoleName, RoleId) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerChangeRoleName::RoleId' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerChangeRoleName, Name_0) == 0x000010, "Member 'BRServerSettingsManagerComponent_ServerChangeRoleName::Name_0' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerChangeRoleName, bAnnounce) == 0x000020, "Member 'BRServerSettingsManagerComponent_ServerChangeRoleName::bAnnounce' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerChangeRoleSettings
// 0x0028 (0x0028 - 0x0000)
struct BRServerSettingsManagerComponent_ServerChangeRoleSettings final
{
public:
	class FString                                 RoleId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0010(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAnnounce;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerChangeRoleSettings) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerChangeRoleSettings");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerChangeRoleSettings) == 0x000028, "Wrong size on BRServerSettingsManagerComponent_ServerChangeRoleSettings");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerChangeRoleSettings, RoleId) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerChangeRoleSettings::RoleId' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerChangeRoleSettings, Changelist) == 0x000010, "Member 'BRServerSettingsManagerComponent_ServerChangeRoleSettings::Changelist' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerChangeRoleSettings, bAnnounce) == 0x000020, "Member 'BRServerSettingsManagerComponent_ServerChangeRoleSettings::bAnnounce' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerChangeSettings
// 0x0020 (0x0020 - 0x0000)
struct BRServerSettingsManagerComponent_ServerChangeSettings final
{
public:
	TSubclassOf<class UBRServerSettingsBase>      ServerSettingsClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAnnounce;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerChangeSettings) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerChangeSettings");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerChangeSettings) == 0x000020, "Wrong size on BRServerSettingsManagerComponent_ServerChangeSettings");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerChangeSettings, ServerSettingsClass) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerChangeSettings::ServerSettingsClass' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerChangeSettings, Changelist) == 0x000008, "Member 'BRServerSettingsManagerComponent_ServerChangeSettings::Changelist' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerChangeSettings, bAnnounce) == 0x000018, "Member 'BRServerSettingsManagerComponent_ServerChangeSettings::bAnnounce' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerCreateRole
// 0x0038 (0x0038 - 0x0000)
struct BRServerSettingsManagerComponent_ServerCreateRole final
{
public:
	class FString                                 RoleId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreateAfterRoleId;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0020(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAnnounce;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerCreateRole) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerCreateRole");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerCreateRole) == 0x000038, "Wrong size on BRServerSettingsManagerComponent_ServerCreateRole");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerCreateRole, RoleId) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerCreateRole::RoleId' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerCreateRole, CreateAfterRoleId) == 0x000010, "Member 'BRServerSettingsManagerComponent_ServerCreateRole::CreateAfterRoleId' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerCreateRole, Changelist) == 0x000020, "Member 'BRServerSettingsManagerComponent_ServerCreateRole::Changelist' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerCreateRole, bAnnounce) == 0x000030, "Member 'BRServerSettingsManagerComponent_ServerCreateRole::bAnnounce' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerDeleteRole
// 0x0018 (0x0018 - 0x0000)
struct BRServerSettingsManagerComponent_ServerDeleteRole final
{
public:
	class FString                                 RoleId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnnounce;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerDeleteRole) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerDeleteRole");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerDeleteRole) == 0x000018, "Wrong size on BRServerSettingsManagerComponent_ServerDeleteRole");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerDeleteRole, RoleId) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerDeleteRole::RoleId' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerDeleteRole, bAnnounce) == 0x000010, "Member 'BRServerSettingsManagerComponent_ServerDeleteRole::bAnnounce' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerMigrateColorsInPalette
// 0x0048 (0x0048 - 0x0000)
struct BRServerSettingsManagerComponent_ServerMigrateColorsInPalette final
{
public:
	struct FBRColorPaletteData                    OldPalette;                                        // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBRColorPaletteData                    NewPalette;                                        // 0x0020(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	EBRColorMigrationMode                         Mode;                                              // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerMigrateColorsInPalette) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerMigrateColorsInPalette");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerMigrateColorsInPalette) == 0x000048, "Wrong size on BRServerSettingsManagerComponent_ServerMigrateColorsInPalette");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerMigrateColorsInPalette, OldPalette) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerMigrateColorsInPalette::OldPalette' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerMigrateColorsInPalette, NewPalette) == 0x000020, "Member 'BRServerSettingsManagerComponent_ServerMigrateColorsInPalette::NewPalette' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerMigrateColorsInPalette, Mode) == 0x000040, "Member 'BRServerSettingsManagerComponent_ServerMigrateColorsInPalette::Mode' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerRemoveColorPalette
// 0x0004 (0x0004 - 0x0000)
struct BRServerSettingsManagerComponent_ServerRemoveColorPalette final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerRemoveColorPalette) == 0x000004, "Wrong alignment on BRServerSettingsManagerComponent_ServerRemoveColorPalette");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerRemoveColorPalette) == 0x000004, "Wrong size on BRServerSettingsManagerComponent_ServerRemoveColorPalette");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerRemoveColorPalette, Index_0) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerRemoveColorPalette::Index_0' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerReorderRoles
// 0x0020 (0x0020 - 0x0000)
struct BRServerSettingsManagerComponent_ServerReorderRoles final
{
public:
	class FString                                 RoleToMove;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleToMoveAfter;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerReorderRoles) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerReorderRoles");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerReorderRoles) == 0x000020, "Wrong size on BRServerSettingsManagerComponent_ServerReorderRoles");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerReorderRoles, RoleToMove) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerReorderRoles::RoleToMove' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerReorderRoles, RoleToMoveAfter) == 0x000010, "Member 'BRServerSettingsManagerComponent_ServerReorderRoles::RoleToMoveAfter' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerSetColorPalette
// 0x0028 (0x0028 - 0x0000)
struct BRServerSettingsManagerComponent_ServerSetColorPalette final
{
public:
	struct FBRColorPaletteData                    Data;                                              // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerSetColorPalette) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerSetColorPalette");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerSetColorPalette) == 0x000028, "Wrong size on BRServerSettingsManagerComponent_ServerSetColorPalette");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerSetColorPalette, Data) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerSetColorPalette::Data' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerSetColorPalette, Index_0) == 0x000020, "Member 'BRServerSettingsManagerComponent_ServerSetColorPalette::Index_0' has a wrong offset!");

// Function Brickadia.BRServerSettingsManagerComponent.ServerSetHasRole
// 0x0020 (0x0020 - 0x0000)
struct BRServerSettingsManagerComponent_ServerSetHasRole final
{
public:
	class ABRPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHas;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRServerSettingsManagerComponent_ServerSetHasRole) == 0x000008, "Wrong alignment on BRServerSettingsManagerComponent_ServerSetHasRole");
static_assert(sizeof(BRServerSettingsManagerComponent_ServerSetHasRole) == 0x000020, "Wrong size on BRServerSettingsManagerComponent_ServerSetHasRole");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerSetHasRole, PlayerState) == 0x000000, "Member 'BRServerSettingsManagerComponent_ServerSetHasRole::PlayerState' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerSetHasRole, Role) == 0x000008, "Member 'BRServerSettingsManagerComponent_ServerSetHasRole::Role' has a wrong offset!");
static_assert(offsetof(BRServerSettingsManagerComponent_ServerSetHasRole, bHas) == 0x000018, "Member 'BRServerSettingsManagerComponent_ServerSetHasRole::bHas' has a wrong offset!");

// Function Brickadia.BrickGridActor.GetBrickGrid
// 0x0008 (0x0008 - 0x0000)
struct BrickGridActor_GetBrickGrid final
{
public:
	class UBrickGridComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridActor_GetBrickGrid) == 0x000008, "Wrong alignment on BrickGridActor_GetBrickGrid");
static_assert(sizeof(BrickGridActor_GetBrickGrid) == 0x000008, "Wrong size on BrickGridActor_GetBrickGrid");
static_assert(offsetof(BrickGridActor_GetBrickGrid, ReturnValue) == 0x000000, "Member 'BrickGridActor_GetBrickGrid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.ContainsPoint
// 0x0010 (0x0010 - 0x0000)
struct BrickGridComponent_ContainsPoint final
{
public:
	struct FIntVector                             Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGridComponent_ContainsPoint) == 0x000004, "Wrong alignment on BrickGridComponent_ContainsPoint");
static_assert(sizeof(BrickGridComponent_ContainsPoint) == 0x000010, "Wrong size on BrickGridComponent_ContainsPoint");
static_assert(offsetof(BrickGridComponent_ContainsPoint, Point) == 0x000000, "Member 'BrickGridComponent_ContainsPoint::Point' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_ContainsPoint, ReturnValue) == 0x00000C, "Member 'BrickGridComponent_ContainsPoint::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.BulkInsertOrDeleteBricks
// 0x0018 (0x0018 - 0x0000)
struct BrickGridComponent_BulkInsertOrDeleteBricks final
{
public:
	TArray<struct FBrickHandle>                   BrickHandles;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EBrickInsertFlags                             Flags_0;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_BulkInsertOrDeleteBricks) == 0x000008, "Wrong alignment on BrickGridComponent_BulkInsertOrDeleteBricks");
static_assert(sizeof(BrickGridComponent_BulkInsertOrDeleteBricks) == 0x000018, "Wrong size on BrickGridComponent_BulkInsertOrDeleteBricks");
static_assert(offsetof(BrickGridComponent_BulkInsertOrDeleteBricks, BrickHandles) == 0x000000, "Member 'BrickGridComponent_BulkInsertOrDeleteBricks::BrickHandles' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_BulkInsertOrDeleteBricks, Flags_0) == 0x000010, "Member 'BrickGridComponent_BulkInsertOrDeleteBricks::Flags_0' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_BulkInsertOrDeleteBricks, ReturnValue) == 0x000014, "Member 'BrickGridComponent_BulkInsertOrDeleteBricks::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.BulkRemoveAndDeleteBricks
// 0x0010 (0x0010 - 0x0000)
struct BrickGridComponent_BulkRemoveAndDeleteBricks final
{
public:
	TArray<struct FBrickHandle>                   BrickHandles;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_BulkRemoveAndDeleteBricks) == 0x000008, "Wrong alignment on BrickGridComponent_BulkRemoveAndDeleteBricks");
static_assert(sizeof(BrickGridComponent_BulkRemoveAndDeleteBricks) == 0x000010, "Wrong size on BrickGridComponent_BulkRemoveAndDeleteBricks");
static_assert(offsetof(BrickGridComponent_BulkRemoveAndDeleteBricks, BrickHandles) == 0x000000, "Member 'BrickGridComponent_BulkRemoveAndDeleteBricks::BrickHandles' has a wrong offset!");

// Function Brickadia.BrickGridComponent.ClearAndDeleteBricks
// 0x0004 (0x0004 - 0x0000)
struct BrickGridComponent_ClearAndDeleteBricks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_ClearAndDeleteBricks) == 0x000004, "Wrong alignment on BrickGridComponent_ClearAndDeleteBricks");
static_assert(sizeof(BrickGridComponent_ClearAndDeleteBricks) == 0x000004, "Wrong size on BrickGridComponent_ClearAndDeleteBricks");
static_assert(offsetof(BrickGridComponent_ClearAndDeleteBricks, ReturnValue) == 0x000000, "Member 'BrickGridComponent_ClearAndDeleteBricks::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.ClearAndDeleteBricksByUser
// 0x0014 (0x0014 - 0x0000)
struct BrickGridComponent_ClearAndDeleteBricksByUser final
{
public:
	struct FBRGuid                                UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_ClearAndDeleteBricksByUser) == 0x000004, "Wrong alignment on BrickGridComponent_ClearAndDeleteBricksByUser");
static_assert(sizeof(BrickGridComponent_ClearAndDeleteBricksByUser) == 0x000014, "Wrong size on BrickGridComponent_ClearAndDeleteBricksByUser");
static_assert(offsetof(BrickGridComponent_ClearAndDeleteBricksByUser, UserId) == 0x000000, "Member 'BrickGridComponent_ClearAndDeleteBricksByUser::UserId' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_ClearAndDeleteBricksByUser, ReturnValue) == 0x000010, "Member 'BrickGridComponent_ClearAndDeleteBricksByUser::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.CollectAllBricks
// 0x0010 (0x0010 - 0x0000)
struct BrickGridComponent_CollectAllBricks final
{
public:
	TArray<struct FBrickHandle>                   OutBrickHandles;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_CollectAllBricks) == 0x000008, "Wrong alignment on BrickGridComponent_CollectAllBricks");
static_assert(sizeof(BrickGridComponent_CollectAllBricks) == 0x000010, "Wrong size on BrickGridComponent_CollectAllBricks");
static_assert(offsetof(BrickGridComponent_CollectAllBricks, OutBrickHandles) == 0x000000, "Member 'BrickGridComponent_CollectAllBricks::OutBrickHandles' has a wrong offset!");

// Function Brickadia.BrickGridComponent.CollectAllBricksForOwner
// 0x0020 (0x0020 - 0x0000)
struct BrickGridComponent_CollectAllBricksForOwner final
{
public:
	TArray<struct FBrickHandle>                   OutBrickHandles;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBRGuid                                Owner;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_CollectAllBricksForOwner) == 0x000008, "Wrong alignment on BrickGridComponent_CollectAllBricksForOwner");
static_assert(sizeof(BrickGridComponent_CollectAllBricksForOwner) == 0x000020, "Wrong size on BrickGridComponent_CollectAllBricksForOwner");
static_assert(offsetof(BrickGridComponent_CollectAllBricksForOwner, OutBrickHandles) == 0x000000, "Member 'BrickGridComponent_CollectAllBricksForOwner::OutBrickHandles' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_CollectAllBricksForOwner, Owner) == 0x000010, "Member 'BrickGridComponent_CollectAllBricksForOwner::Owner' has a wrong offset!");

// Function Brickadia.BrickGridComponent.CollectAllBricksForOwnerInRegion
// 0x0038 (0x0038 - 0x0000)
struct BrickGridComponent_CollectAllBricksForOwnerInRegion final
{
public:
	TArray<struct FBrickHandle>                   OutBrickHandles;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBRGuid                                Owner;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntBox                                Range;                                             // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_CollectAllBricksForOwnerInRegion) == 0x000008, "Wrong alignment on BrickGridComponent_CollectAllBricksForOwnerInRegion");
static_assert(sizeof(BrickGridComponent_CollectAllBricksForOwnerInRegion) == 0x000038, "Wrong size on BrickGridComponent_CollectAllBricksForOwnerInRegion");
static_assert(offsetof(BrickGridComponent_CollectAllBricksForOwnerInRegion, OutBrickHandles) == 0x000000, "Member 'BrickGridComponent_CollectAllBricksForOwnerInRegion::OutBrickHandles' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_CollectAllBricksForOwnerInRegion, Owner) == 0x000010, "Member 'BrickGridComponent_CollectAllBricksForOwnerInRegion::Owner' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_CollectAllBricksForOwnerInRegion, Range) == 0x000020, "Member 'BrickGridComponent_CollectAllBricksForOwnerInRegion::Range' has a wrong offset!");

// Function Brickadia.BrickGridComponent.GetBrickAndComponentCount
// 0x0008 (0x0008 - 0x0000)
struct BrickGridComponent_GetBrickAndComponentCount final
{
public:
	int32                                         OutBricks;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutComponents;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_GetBrickAndComponentCount) == 0x000004, "Wrong alignment on BrickGridComponent_GetBrickAndComponentCount");
static_assert(sizeof(BrickGridComponent_GetBrickAndComponentCount) == 0x000008, "Wrong size on BrickGridComponent_GetBrickAndComponentCount");
static_assert(offsetof(BrickGridComponent_GetBrickAndComponentCount, OutBricks) == 0x000000, "Member 'BrickGridComponent_GetBrickAndComponentCount::OutBricks' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_GetBrickAndComponentCount, OutComponents) == 0x000004, "Member 'BrickGridComponent_GetBrickAndComponentCount::OutComponents' has a wrong offset!");

// Function Brickadia.BrickGridComponent.GetBrickCount
// 0x0004 (0x0004 - 0x0000)
struct BrickGridComponent_GetBrickCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_GetBrickCount) == 0x000004, "Wrong alignment on BrickGridComponent_GetBrickCount");
static_assert(sizeof(BrickGridComponent_GetBrickCount) == 0x000004, "Wrong size on BrickGridComponent_GetBrickCount");
static_assert(offsetof(BrickGridComponent_GetBrickCount, ReturnValue) == 0x000000, "Member 'BrickGridComponent_GetBrickCount::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.InsertOrDeleteBrick
// 0x000C (0x000C - 0x0000)
struct BrickGridComponent_InsertOrDeleteBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickInsertFlags                             Flags_0;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGridComponent_InsertOrDeleteBrick) == 0x000004, "Wrong alignment on BrickGridComponent_InsertOrDeleteBrick");
static_assert(sizeof(BrickGridComponent_InsertOrDeleteBrick) == 0x00000C, "Wrong size on BrickGridComponent_InsertOrDeleteBrick");
static_assert(offsetof(BrickGridComponent_InsertOrDeleteBrick, BrickHandle) == 0x000000, "Member 'BrickGridComponent_InsertOrDeleteBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_InsertOrDeleteBrick, Flags_0) == 0x000008, "Member 'BrickGridComponent_InsertOrDeleteBrick::Flags_0' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_InsertOrDeleteBrick, ReturnValue) == 0x000009, "Member 'BrickGridComponent_InsertOrDeleteBrick::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.RemoveAndDeleteBrick
// 0x000C (0x000C - 0x0000)
struct BrickGridComponent_RemoveAndDeleteBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGridComponent_RemoveAndDeleteBrick) == 0x000004, "Wrong alignment on BrickGridComponent_RemoveAndDeleteBrick");
static_assert(sizeof(BrickGridComponent_RemoveAndDeleteBrick) == 0x00000C, "Wrong size on BrickGridComponent_RemoveAndDeleteBrick");
static_assert(offsetof(BrickGridComponent_RemoveAndDeleteBrick, BrickHandle) == 0x000000, "Member 'BrickGridComponent_RemoveAndDeleteBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_RemoveAndDeleteBrick, ReturnValue) == 0x000008, "Member 'BrickGridComponent_RemoveAndDeleteBrick::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.SetChunkOffset
// 0x0010 (0x0010 - 0x0000)
struct BrickGridComponent_SetChunkOffset final
{
public:
	struct FIntVector                             Offset;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGridComponent_SetChunkOffset) == 0x000004, "Wrong alignment on BrickGridComponent_SetChunkOffset");
static_assert(sizeof(BrickGridComponent_SetChunkOffset) == 0x000010, "Wrong size on BrickGridComponent_SetChunkOffset");
static_assert(offsetof(BrickGridComponent_SetChunkOffset, Offset) == 0x000000, "Member 'BrickGridComponent_SetChunkOffset::Offset' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_SetChunkOffset, ReturnValue) == 0x00000C, "Member 'BrickGridComponent_SetChunkOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.SetChunkSize
// 0x0008 (0x0008 - 0x0000)
struct BrickGridComponent_SetChunkSize final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGridComponent_SetChunkSize) == 0x000004, "Wrong alignment on BrickGridComponent_SetChunkSize");
static_assert(sizeof(BrickGridComponent_SetChunkSize) == 0x000008, "Wrong size on BrickGridComponent_SetChunkSize");
static_assert(offsetof(BrickGridComponent_SetChunkSize, Size) == 0x000000, "Member 'BrickGridComponent_SetChunkSize::Size' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_SetChunkSize, ReturnValue) == 0x000004, "Member 'BrickGridComponent_SetChunkSize::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.SetInstancing
// 0x0018 (0x0018 - 0x0000)
struct BrickGridComponent_SetInstancing final
{
public:
	struct FIntVector                             Offset;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Counts;                                            // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_SetInstancing) == 0x000004, "Wrong alignment on BrickGridComponent_SetInstancing");
static_assert(sizeof(BrickGridComponent_SetInstancing) == 0x000018, "Wrong size on BrickGridComponent_SetInstancing");
static_assert(offsetof(BrickGridComponent_SetInstancing, Offset) == 0x000000, "Member 'BrickGridComponent_SetInstancing::Offset' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_SetInstancing, Counts) == 0x00000C, "Member 'BrickGridComponent_SetInstancing::Counts' has a wrong offset!");

// Function Brickadia.BrickGridComponent.BrickBoxSearchMulti
// 0x0030 (0x0030 - 0x0000)
struct BrickGridComponent_BrickBoxSearchMulti final
{
public:
	TArray<struct FBrickHandle>                   Results;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FIntBox                                Range;                                             // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRequireContains;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxResults;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_BrickBoxSearchMulti) == 0x000008, "Wrong alignment on BrickGridComponent_BrickBoxSearchMulti");
static_assert(sizeof(BrickGridComponent_BrickBoxSearchMulti) == 0x000030, "Wrong size on BrickGridComponent_BrickBoxSearchMulti");
static_assert(offsetof(BrickGridComponent_BrickBoxSearchMulti, Results) == 0x000000, "Member 'BrickGridComponent_BrickBoxSearchMulti::Results' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_BrickBoxSearchMulti, Range) == 0x000010, "Member 'BrickGridComponent_BrickBoxSearchMulti::Range' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_BrickBoxSearchMulti, bRequireContains) == 0x000028, "Member 'BrickGridComponent_BrickBoxSearchMulti::bRequireContains' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_BrickBoxSearchMulti, MaxResults) == 0x00002C, "Member 'BrickGridComponent_BrickBoxSearchMulti::MaxResults' has a wrong offset!");

// Function Brickadia.BrickGridComponent.BrickBoxSearchSingle
// 0x0024 (0x0024 - 0x0000)
struct BrickGridComponent_BrickBoxSearchSingle final
{
public:
	struct FIntBox                                Range;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRequireContains;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickHandle                           ReturnValue;                                       // 0x001C(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_BrickBoxSearchSingle) == 0x000004, "Wrong alignment on BrickGridComponent_BrickBoxSearchSingle");
static_assert(sizeof(BrickGridComponent_BrickBoxSearchSingle) == 0x000024, "Wrong size on BrickGridComponent_BrickBoxSearchSingle");
static_assert(offsetof(BrickGridComponent_BrickBoxSearchSingle, Range) == 0x000000, "Member 'BrickGridComponent_BrickBoxSearchSingle::Range' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_BrickBoxSearchSingle, bRequireContains) == 0x000018, "Member 'BrickGridComponent_BrickBoxSearchSingle::bRequireContains' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_BrickBoxSearchSingle, ReturnValue) == 0x00001C, "Member 'BrickGridComponent_BrickBoxSearchSingle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.CanInsertBrick
// 0x000C (0x000C - 0x0000)
struct BrickGridComponent_CanInsertBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickInsertFlags                             Flags_0;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGridComponent_CanInsertBrick) == 0x000004, "Wrong alignment on BrickGridComponent_CanInsertBrick");
static_assert(sizeof(BrickGridComponent_CanInsertBrick) == 0x00000C, "Wrong size on BrickGridComponent_CanInsertBrick");
static_assert(offsetof(BrickGridComponent_CanInsertBrick, BrickHandle) == 0x000000, "Member 'BrickGridComponent_CanInsertBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_CanInsertBrick, Flags_0) == 0x000008, "Member 'BrickGridComponent_CanInsertBrick::Flags_0' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_CanInsertBrick, ReturnValue) == 0x000009, "Member 'BrickGridComponent_CanInsertBrick::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.CanInsertBrickType
// 0x0030 (0x0030 - 0x0000)
struct BrickGridComponent_CanInsertBrickType final
{
public:
	const class UBrickType*                       Type;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             position;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickInsertFlags                             Flags_0;                                           // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBrickHandle>                   IgnoredBricks;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGridComponent_CanInsertBrickType) == 0x000008, "Wrong alignment on BrickGridComponent_CanInsertBrickType");
static_assert(sizeof(BrickGridComponent_CanInsertBrickType) == 0x000030, "Wrong size on BrickGridComponent_CanInsertBrickType");
static_assert(offsetof(BrickGridComponent_CanInsertBrickType, Type) == 0x000000, "Member 'BrickGridComponent_CanInsertBrickType::Type' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_CanInsertBrickType, position) == 0x000008, "Member 'BrickGridComponent_CanInsertBrickType::position' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_CanInsertBrickType, Orientation) == 0x000014, "Member 'BrickGridComponent_CanInsertBrickType::Orientation' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_CanInsertBrickType, Flags_0) == 0x000015, "Member 'BrickGridComponent_CanInsertBrickType::Flags_0' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_CanInsertBrickType, IgnoredBricks) == 0x000018, "Member 'BrickGridComponent_CanInsertBrickType::IgnoredBricks' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_CanInsertBrickType, ReturnValue) == 0x000028, "Member 'BrickGridComponent_CanInsertBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.GetChunkOffset
// 0x000C (0x000C - 0x0000)
struct BrickGridComponent_GetChunkOffset final
{
public:
	struct FIntVector                             ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_GetChunkOffset) == 0x000004, "Wrong alignment on BrickGridComponent_GetChunkOffset");
static_assert(sizeof(BrickGridComponent_GetChunkOffset) == 0x00000C, "Wrong size on BrickGridComponent_GetChunkOffset");
static_assert(offsetof(BrickGridComponent_GetChunkOffset, ReturnValue) == 0x000000, "Member 'BrickGridComponent_GetChunkOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.GetChunkSize
// 0x0004 (0x0004 - 0x0000)
struct BrickGridComponent_GetChunkSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_GetChunkSize) == 0x000004, "Wrong alignment on BrickGridComponent_GetChunkSize");
static_assert(sizeof(BrickGridComponent_GetChunkSize) == 0x000004, "Wrong size on BrickGridComponent_GetChunkSize");
static_assert(offsetof(BrickGridComponent_GetChunkSize, ReturnValue) == 0x000000, "Member 'BrickGridComponent_GetChunkSize::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.GetInstancing
// 0x0018 (0x0018 - 0x0000)
struct BrickGridComponent_GetInstancing final
{
public:
	struct FIntVector                             OutOffset;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutCounts;                                         // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_GetInstancing) == 0x000004, "Wrong alignment on BrickGridComponent_GetInstancing");
static_assert(sizeof(BrickGridComponent_GetInstancing) == 0x000018, "Wrong size on BrickGridComponent_GetInstancing");
static_assert(offsetof(BrickGridComponent_GetInstancing, OutOffset) == 0x000000, "Member 'BrickGridComponent_GetInstancing::OutOffset' has a wrong offset!");
static_assert(offsetof(BrickGridComponent_GetInstancing, OutCounts) == 0x00000C, "Member 'BrickGridComponent_GetInstancing::OutCounts' has a wrong offset!");

// Function Brickadia.BrickGridComponent.GetRowInstancingOffset
// 0x000C (0x000C - 0x0000)
struct BrickGridComponent_GetRowInstancingOffset final
{
public:
	struct FIntVector                             ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_GetRowInstancingOffset) == 0x000004, "Wrong alignment on BrickGridComponent_GetRowInstancingOffset");
static_assert(sizeof(BrickGridComponent_GetRowInstancingOffset) == 0x00000C, "Wrong size on BrickGridComponent_GetRowInstancingOffset");
static_assert(offsetof(BrickGridComponent_GetRowInstancingOffset, ReturnValue) == 0x000000, "Member 'BrickGridComponent_GetRowInstancingOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridComponent.IsModificationAllowed
// 0x0001 (0x0001 - 0x0000)
struct BrickGridComponent_IsModificationAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridComponent_IsModificationAllowed) == 0x000001, "Wrong alignment on BrickGridComponent_IsModificationAllowed");
static_assert(sizeof(BrickGridComponent_IsModificationAllowed) == 0x000001, "Wrong size on BrickGridComponent_IsModificationAllowed");
static_assert(offsetof(BrickGridComponent_IsModificationAllowed, ReturnValue) == 0x000000, "Member 'BrickGridComponent_IsModificationAllowed::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_AlignmentMode_Change
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Placer_Audio_AlignmentMode_Change final
{
public:
	class UBRPlacerAlignmentModeBase*             NewAlignmentMode;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Audio_AlignmentMode_Change) == 0x000008, "Wrong alignment on BRTool_Placer_Audio_AlignmentMode_Change");
static_assert(sizeof(BRTool_Placer_Audio_AlignmentMode_Change) == 0x000008, "Wrong size on BRTool_Placer_Audio_AlignmentMode_Change");
static_assert(offsetof(BRTool_Placer_Audio_AlignmentMode_Change, NewAlignmentMode) == 0x000000, "Member 'BRTool_Placer_Audio_AlignmentMode_Change::NewAlignmentMode' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_ControlMode_Change
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Placer_Audio_ControlMode_Change final
{
public:
	class UBRPlacerControlModeBase*               NewControlMode;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Audio_ControlMode_Change) == 0x000008, "Wrong alignment on BRTool_Placer_Audio_ControlMode_Change");
static_assert(sizeof(BRTool_Placer_Audio_ControlMode_Change) == 0x000008, "Wrong size on BRTool_Placer_Audio_ControlMode_Change");
static_assert(offsetof(BRTool_Placer_Audio_ControlMode_Change, NewControlMode) == 0x000000, "Member 'BRTool_Placer_Audio_ControlMode_Change::NewControlMode' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_KeyboardMode_MoveBrick
// 0x0038 (0x0038 - 0x0000)
struct BRTool_Placer_Audio_KeyboardMode_MoveBrick final
{
public:
	struct FVector                                OldLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLocation;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRepeating;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Placer_Audio_KeyboardMode_MoveBrick) == 0x000008, "Wrong alignment on BRTool_Placer_Audio_KeyboardMode_MoveBrick");
static_assert(sizeof(BRTool_Placer_Audio_KeyboardMode_MoveBrick) == 0x000038, "Wrong size on BRTool_Placer_Audio_KeyboardMode_MoveBrick");
static_assert(offsetof(BRTool_Placer_Audio_KeyboardMode_MoveBrick, OldLocation) == 0x000000, "Member 'BRTool_Placer_Audio_KeyboardMode_MoveBrick::OldLocation' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_KeyboardMode_MoveBrick, NewLocation) == 0x000018, "Member 'BRTool_Placer_Audio_KeyboardMode_MoveBrick::NewLocation' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_KeyboardMode_MoveBrick, bIsRepeating) == 0x000030, "Member 'BRTool_Placer_Audio_KeyboardMode_MoveBrick::bIsRepeating' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_KeyboardMode_StateChange
// 0x0002 (0x0002 - 0x0000)
struct BRTool_Placer_Audio_KeyboardMode_StateChange final
{
public:
	EBRPlacerKeyboardModeState                    OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRPlacerKeyboardModeState                    NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Audio_KeyboardMode_StateChange) == 0x000001, "Wrong alignment on BRTool_Placer_Audio_KeyboardMode_StateChange");
static_assert(sizeof(BRTool_Placer_Audio_KeyboardMode_StateChange) == 0x000002, "Wrong size on BRTool_Placer_Audio_KeyboardMode_StateChange");
static_assert(offsetof(BRTool_Placer_Audio_KeyboardMode_StateChange, OldState) == 0x000000, "Member 'BRTool_Placer_Audio_KeyboardMode_StateChange::OldState' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_KeyboardMode_StateChange, NewState) == 0x000001, "Member 'BRTool_Placer_Audio_KeyboardMode_StateChange::NewState' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_Mouse_Float_ChangeDistance
// 0x0004 (0x0004 - 0x0000)
struct BRTool_Placer_Audio_Mouse_Float_ChangeDistance final
{
public:
	int32                                         NewDistance;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Audio_Mouse_Float_ChangeDistance) == 0x000004, "Wrong alignment on BRTool_Placer_Audio_Mouse_Float_ChangeDistance");
static_assert(sizeof(BRTool_Placer_Audio_Mouse_Float_ChangeDistance) == 0x000004, "Wrong size on BRTool_Placer_Audio_Mouse_Float_ChangeDistance");
static_assert(offsetof(BRTool_Placer_Audio_Mouse_Float_ChangeDistance, NewDistance) == 0x000000, "Member 'BRTool_Placer_Audio_Mouse_Float_ChangeDistance::NewDistance' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_Mouse_Float_Start
// 0x0004 (0x0004 - 0x0000)
struct BRTool_Placer_Audio_Mouse_Float_Start final
{
public:
	int32                                         StartingDistance;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Audio_Mouse_Float_Start) == 0x000004, "Wrong alignment on BRTool_Placer_Audio_Mouse_Float_Start");
static_assert(sizeof(BRTool_Placer_Audio_Mouse_Float_Start) == 0x000004, "Wrong size on BRTool_Placer_Audio_Mouse_Float_Start");
static_assert(offsetof(BRTool_Placer_Audio_Mouse_Float_Start, StartingDistance) == 0x000000, "Member 'BRTool_Placer_Audio_Mouse_Float_Start::StartingDistance' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_Mouse_Locking_ChangeDistance
// 0x0004 (0x0004 - 0x0000)
struct BRTool_Placer_Audio_Mouse_Locking_ChangeDistance final
{
public:
	int32                                         NewDistance;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Audio_Mouse_Locking_ChangeDistance) == 0x000004, "Wrong alignment on BRTool_Placer_Audio_Mouse_Locking_ChangeDistance");
static_assert(sizeof(BRTool_Placer_Audio_Mouse_Locking_ChangeDistance) == 0x000004, "Wrong size on BRTool_Placer_Audio_Mouse_Locking_ChangeDistance");
static_assert(offsetof(BRTool_Placer_Audio_Mouse_Locking_ChangeDistance, NewDistance) == 0x000000, "Member 'BRTool_Placer_Audio_Mouse_Locking_ChangeDistance::NewDistance' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_Mouse_Locking_Start
// 0x0004 (0x0004 - 0x0000)
struct BRTool_Placer_Audio_Mouse_Locking_Start final
{
public:
	int32                                         StartingDistance;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Audio_Mouse_Locking_Start) == 0x000004, "Wrong alignment on BRTool_Placer_Audio_Mouse_Locking_Start");
static_assert(sizeof(BRTool_Placer_Audio_Mouse_Locking_Start) == 0x000004, "Wrong size on BRTool_Placer_Audio_Mouse_Locking_Start");
static_assert(offsetof(BRTool_Placer_Audio_Mouse_Locking_Start, StartingDistance) == 0x000000, "Member 'BRTool_Placer_Audio_Mouse_Locking_Start::StartingDistance' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_Mouse_StateChange
// 0x0002 (0x0002 - 0x0000)
struct BRTool_Placer_Audio_Mouse_StateChange final
{
public:
	EBRPlacerMouseModeState                       OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRPlacerMouseModeState                       NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Audio_Mouse_StateChange) == 0x000001, "Wrong alignment on BRTool_Placer_Audio_Mouse_StateChange");
static_assert(sizeof(BRTool_Placer_Audio_Mouse_StateChange) == 0x000002, "Wrong size on BRTool_Placer_Audio_Mouse_StateChange");
static_assert(offsetof(BRTool_Placer_Audio_Mouse_StateChange, OldState) == 0x000000, "Member 'BRTool_Placer_Audio_Mouse_StateChange::OldState' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_Mouse_StateChange, NewState) == 0x000001, "Member 'BRTool_Placer_Audio_Mouse_StateChange::NewState' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_PlacementMode_Change
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Placer_Audio_PlacementMode_Change final
{
public:
	class UBRPlacerPlacementModeBase*             NewPlacementMode;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Audio_PlacementMode_Change) == 0x000008, "Wrong alignment on BRTool_Placer_Audio_PlacementMode_Change");
static_assert(sizeof(BRTool_Placer_Audio_PlacementMode_Change) == 0x000008, "Wrong size on BRTool_Placer_Audio_PlacementMode_Change");
static_assert(offsetof(BRTool_Placer_Audio_PlacementMode_Change, NewPlacementMode) == 0x000000, "Member 'BRTool_Placer_Audio_PlacementMode_Change::NewPlacementMode' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_Placing_ChangePlacementSize
// 0x0010 (0x0010 - 0x0000)
struct BRTool_Placer_Audio_Placing_ChangePlacementSize final
{
public:
	struct FIntVector                             NewPlacementSize;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAxis                                    ChangedAxis;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Placer_Audio_Placing_ChangePlacementSize) == 0x000004, "Wrong alignment on BRTool_Placer_Audio_Placing_ChangePlacementSize");
static_assert(sizeof(BRTool_Placer_Audio_Placing_ChangePlacementSize) == 0x000010, "Wrong size on BRTool_Placer_Audio_Placing_ChangePlacementSize");
static_assert(offsetof(BRTool_Placer_Audio_Placing_ChangePlacementSize, NewPlacementSize) == 0x000000, "Member 'BRTool_Placer_Audio_Placing_ChangePlacementSize::NewPlacementSize' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_Placing_ChangePlacementSize, ChangedAxis) == 0x00000C, "Member 'BRTool_Placer_Audio_Placing_ChangePlacementSize::ChangedAxis' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_Placing_ChangePlacementSpacing
// 0x0010 (0x0010 - 0x0000)
struct BRTool_Placer_Audio_Placing_ChangePlacementSpacing final
{
public:
	struct FIntVector                             NewPlacementSpacing;                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAxis                                    ChangedSpacingAxis;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Placer_Audio_Placing_ChangePlacementSpacing) == 0x000004, "Wrong alignment on BRTool_Placer_Audio_Placing_ChangePlacementSpacing");
static_assert(sizeof(BRTool_Placer_Audio_Placing_ChangePlacementSpacing) == 0x000010, "Wrong size on BRTool_Placer_Audio_Placing_ChangePlacementSpacing");
static_assert(offsetof(BRTool_Placer_Audio_Placing_ChangePlacementSpacing, NewPlacementSpacing) == 0x000000, "Member 'BRTool_Placer_Audio_Placing_ChangePlacementSpacing::NewPlacementSpacing' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_Placing_ChangePlacementSpacing, ChangedSpacingAxis) == 0x00000C, "Member 'BRTool_Placer_Audio_Placing_ChangePlacementSpacing::ChangedSpacingAxis' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_Placing_Commit
// 0x0040 (0x0040 - 0x0000)
struct BRTool_Placer_Audio_Placing_Commit final
{
public:
	struct FVector                                PlacementStartBrickPos;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlacementEndBrickPos;                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             PlacementBounds;                                   // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Placer_Audio_Placing_Commit) == 0x000008, "Wrong alignment on BRTool_Placer_Audio_Placing_Commit");
static_assert(sizeof(BRTool_Placer_Audio_Placing_Commit) == 0x000040, "Wrong size on BRTool_Placer_Audio_Placing_Commit");
static_assert(offsetof(BRTool_Placer_Audio_Placing_Commit, PlacementStartBrickPos) == 0x000000, "Member 'BRTool_Placer_Audio_Placing_Commit::PlacementStartBrickPos' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_Placing_Commit, PlacementEndBrickPos) == 0x000018, "Member 'BRTool_Placer_Audio_Placing_Commit::PlacementEndBrickPos' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_Placing_Commit, PlacementBounds) == 0x000030, "Member 'BRTool_Placer_Audio_Placing_Commit::PlacementBounds' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_Placing_Start
// 0x0018 (0x0018 - 0x0000)
struct BRTool_Placer_Audio_Placing_Start final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Audio_Placing_Start) == 0x000008, "Wrong alignment on BRTool_Placer_Audio_Placing_Start");
static_assert(sizeof(BRTool_Placer_Audio_Placing_Start) == 0x000018, "Wrong size on BRTool_Placer_Audio_Placing_Start");
static_assert(offsetof(BRTool_Placer_Audio_Placing_Start, Location) == 0x000000, "Member 'BRTool_Placer_Audio_Placing_Start::Location' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_ReorientBrick
// 0x0020 (0x0020 - 0x0000)
struct BRTool_Placer_Audio_ReorientBrick final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               OldDirection;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               NewDirection;                                      // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Placer_Audio_ReorientBrick) == 0x000008, "Wrong alignment on BRTool_Placer_Audio_ReorientBrick");
static_assert(sizeof(BRTool_Placer_Audio_ReorientBrick) == 0x000020, "Wrong size on BRTool_Placer_Audio_ReorientBrick");
static_assert(offsetof(BRTool_Placer_Audio_ReorientBrick, Location) == 0x000000, "Member 'BRTool_Placer_Audio_ReorientBrick::Location' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_ReorientBrick, OldDirection) == 0x000018, "Member 'BRTool_Placer_Audio_ReorientBrick::OldDirection' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_ReorientBrick, NewDirection) == 0x000019, "Member 'BRTool_Placer_Audio_ReorientBrick::NewDirection' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Audio_RotateBrick
// 0x0020 (0x0020 - 0x0000)
struct BRTool_Placer_Audio_RotateBrick final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             OldOrientation;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAxis                                    AboutAxis;                                         // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRepeating;                                      // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Placer_Audio_RotateBrick) == 0x000008, "Wrong alignment on BRTool_Placer_Audio_RotateBrick");
static_assert(sizeof(BRTool_Placer_Audio_RotateBrick) == 0x000020, "Wrong size on BRTool_Placer_Audio_RotateBrick");
static_assert(offsetof(BRTool_Placer_Audio_RotateBrick, Location) == 0x000000, "Member 'BRTool_Placer_Audio_RotateBrick::Location' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_RotateBrick, OldOrientation) == 0x000018, "Member 'BRTool_Placer_Audio_RotateBrick::OldOrientation' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_RotateBrick, AboutAxis) == 0x000019, "Member 'BRTool_Placer_Audio_RotateBrick::AboutAxis' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Audio_RotateBrick, bIsRepeating) == 0x00001A, "Member 'BRTool_Placer_Audio_RotateBrick::bIsRepeating' has a wrong offset!");

// Function Brickadia.BRTool_Placer.OnCurrentBrickGridDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Placer_OnCurrentBrickGridDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_OnCurrentBrickGridDestroyed) == 0x000008, "Wrong alignment on BRTool_Placer_OnCurrentBrickGridDestroyed");
static_assert(sizeof(BRTool_Placer_OnCurrentBrickGridDestroyed) == 0x000008, "Wrong size on BRTool_Placer_OnCurrentBrickGridDestroyed");
static_assert(offsetof(BRTool_Placer_OnCurrentBrickGridDestroyed, DestroyedActor) == 0x000000, "Member 'BRTool_Placer_OnCurrentBrickGridDestroyed::DestroyedActor' has a wrong offset!");

// Function Brickadia.BRTool_Placer.ServerPlaceCurrentTemplateVolume
// 0x00E0 (0x00E0 - 0x0000)
struct BRTool_Placer_ServerPlaceCurrentTemplateVolume final
{
public:
	struct FBRPlacementContext                    Context;                                           // 0x0000(0x0080)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FIntVector                             position;                                          // 0x0080(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                JointStartPosition;                                // 0x0090(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             InstanceSize;                                      // 0x00AC(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             InstanceSpacing;                                   // 0x00B8(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VolumeSize;                                        // 0x00C4(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VolumeSigns;                                       // 0x00D0(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithPhysics;                                      // 0x00DC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Placer_ServerPlaceCurrentTemplateVolume) == 0x000010, "Wrong alignment on BRTool_Placer_ServerPlaceCurrentTemplateVolume");
static_assert(sizeof(BRTool_Placer_ServerPlaceCurrentTemplateVolume) == 0x0000E0, "Wrong size on BRTool_Placer_ServerPlaceCurrentTemplateVolume");
static_assert(offsetof(BRTool_Placer_ServerPlaceCurrentTemplateVolume, Context) == 0x000000, "Member 'BRTool_Placer_ServerPlaceCurrentTemplateVolume::Context' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceCurrentTemplateVolume, position) == 0x000080, "Member 'BRTool_Placer_ServerPlaceCurrentTemplateVolume::position' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceCurrentTemplateVolume, JointStartPosition) == 0x000090, "Member 'BRTool_Placer_ServerPlaceCurrentTemplateVolume::JointStartPosition' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceCurrentTemplateVolume, Orientation) == 0x0000A8, "Member 'BRTool_Placer_ServerPlaceCurrentTemplateVolume::Orientation' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceCurrentTemplateVolume, InstanceSize) == 0x0000AC, "Member 'BRTool_Placer_ServerPlaceCurrentTemplateVolume::InstanceSize' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceCurrentTemplateVolume, InstanceSpacing) == 0x0000B8, "Member 'BRTool_Placer_ServerPlaceCurrentTemplateVolume::InstanceSpacing' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceCurrentTemplateVolume, VolumeSize) == 0x0000C4, "Member 'BRTool_Placer_ServerPlaceCurrentTemplateVolume::VolumeSize' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceCurrentTemplateVolume, VolumeSigns) == 0x0000D0, "Member 'BRTool_Placer_ServerPlaceCurrentTemplateVolume::VolumeSigns' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceCurrentTemplateVolume, bWithPhysics) == 0x0000DC, "Member 'BRTool_Placer_ServerPlaceCurrentTemplateVolume::bWithPhysics' has a wrong offset!");

// Function Brickadia.BRTool_Placer.ServerPlaceSimpleBrickVolume
// 0x0100 (0x0100 - 0x0000)
struct BRTool_Placer_ServerPlaceSimpleBrickVolume final
{
public:
	struct FBRPlacementContext                    Context;                                           // 0x0000(0x0080)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBrickTypeNetWrapper                   BrickType;                                         // 0x0080(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorAndAlpha;                                     // 0x0098(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x009C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             position;                                          // 0x00A0(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                JointStartPosition;                                // 0x00B0(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x00C8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             InstanceSize;                                      // 0x00CC(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             InstanceSpacing;                                   // 0x00D8(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VolumeSize;                                        // 0x00E4(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VolumeSigns;                                       // 0x00F0(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Placer_ServerPlaceSimpleBrickVolume) == 0x000010, "Wrong alignment on BRTool_Placer_ServerPlaceSimpleBrickVolume");
static_assert(sizeof(BRTool_Placer_ServerPlaceSimpleBrickVolume) == 0x000100, "Wrong size on BRTool_Placer_ServerPlaceSimpleBrickVolume");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, Context) == 0x000000, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::Context' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, BrickType) == 0x000080, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::BrickType' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, ColorAndAlpha) == 0x000098, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::ColorAndAlpha' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, MaterialIndex) == 0x00009C, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::MaterialIndex' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, position) == 0x0000A0, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::position' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, JointStartPosition) == 0x0000B0, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::JointStartPosition' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, Orientation) == 0x0000C8, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::Orientation' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, InstanceSize) == 0x0000CC, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::InstanceSize' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, InstanceSpacing) == 0x0000D8, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::InstanceSpacing' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, VolumeSize) == 0x0000E4, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::VolumeSize' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleBrickVolume, VolumeSigns) == 0x0000F0, "Member 'BRTool_Placer_ServerPlaceSimpleBrickVolume::VolumeSigns' has a wrong offset!");

// Function Brickadia.BRTool_Placer.ServerPlaceSimpleEntityVolume
// 0x00F0 (0x00F0 - 0x0000)
struct BRTool_Placer_ServerPlaceSimpleEntityVolume final
{
public:
	struct FBRPlacementContext                    Context;                                           // 0x0000(0x0080)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UBREntityTypeBase*                      EntityType;                                        // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorAndAlpha;                                     // 0x0088(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             position;                                          // 0x008C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JointStartPosition;                                // 0x0098(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             InstanceSize;                                      // 0x00B4(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             InstanceSpacing;                                   // 0x00C0(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VolumeSize;                                        // 0x00CC(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VolumeSigns;                                       // 0x00D8(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Placer_ServerPlaceSimpleEntityVolume) == 0x000010, "Wrong alignment on BRTool_Placer_ServerPlaceSimpleEntityVolume");
static_assert(sizeof(BRTool_Placer_ServerPlaceSimpleEntityVolume) == 0x0000F0, "Wrong size on BRTool_Placer_ServerPlaceSimpleEntityVolume");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleEntityVolume, Context) == 0x000000, "Member 'BRTool_Placer_ServerPlaceSimpleEntityVolume::Context' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleEntityVolume, EntityType) == 0x000080, "Member 'BRTool_Placer_ServerPlaceSimpleEntityVolume::EntityType' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleEntityVolume, ColorAndAlpha) == 0x000088, "Member 'BRTool_Placer_ServerPlaceSimpleEntityVolume::ColorAndAlpha' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleEntityVolume, position) == 0x00008C, "Member 'BRTool_Placer_ServerPlaceSimpleEntityVolume::position' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleEntityVolume, JointStartPosition) == 0x000098, "Member 'BRTool_Placer_ServerPlaceSimpleEntityVolume::JointStartPosition' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleEntityVolume, Orientation) == 0x0000B0, "Member 'BRTool_Placer_ServerPlaceSimpleEntityVolume::Orientation' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleEntityVolume, InstanceSize) == 0x0000B4, "Member 'BRTool_Placer_ServerPlaceSimpleEntityVolume::InstanceSize' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleEntityVolume, InstanceSpacing) == 0x0000C0, "Member 'BRTool_Placer_ServerPlaceSimpleEntityVolume::InstanceSpacing' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleEntityVolume, VolumeSize) == 0x0000CC, "Member 'BRTool_Placer_ServerPlaceSimpleEntityVolume::VolumeSize' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_ServerPlaceSimpleEntityVolume, VolumeSigns) == 0x0000D8, "Member 'BRTool_Placer_ServerPlaceSimpleEntityVolume::VolumeSigns' has a wrong offset!");

// Function Brickadia.BRTool_Placer.SwitchAlignmentMode
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Placer_SwitchAlignmentMode final
{
public:
	class FName                                   NewAlignmentMode;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_SwitchAlignmentMode) == 0x000004, "Wrong alignment on BRTool_Placer_SwitchAlignmentMode");
static_assert(sizeof(BRTool_Placer_SwitchAlignmentMode) == 0x000008, "Wrong size on BRTool_Placer_SwitchAlignmentMode");
static_assert(offsetof(BRTool_Placer_SwitchAlignmentMode, NewAlignmentMode) == 0x000000, "Member 'BRTool_Placer_SwitchAlignmentMode::NewAlignmentMode' has a wrong offset!");

// Function Brickadia.BRTool_Placer.SwitchControlMode
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Placer_SwitchControlMode final
{
public:
	class FName                                   NewControlMode;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_SwitchControlMode) == 0x000004, "Wrong alignment on BRTool_Placer_SwitchControlMode");
static_assert(sizeof(BRTool_Placer_SwitchControlMode) == 0x000008, "Wrong size on BRTool_Placer_SwitchControlMode");
static_assert(offsetof(BRTool_Placer_SwitchControlMode, NewControlMode) == 0x000000, "Member 'BRTool_Placer_SwitchControlMode::NewControlMode' has a wrong offset!");

// Function Brickadia.BRTool_Placer.SwitchPlacementMode
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Placer_SwitchPlacementMode final
{
public:
	class FName                                   NewPlacementMode;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_SwitchPlacementMode) == 0x000004, "Wrong alignment on BRTool_Placer_SwitchPlacementMode");
static_assert(sizeof(BRTool_Placer_SwitchPlacementMode) == 0x000008, "Wrong size on BRTool_Placer_SwitchPlacementMode");
static_assert(offsetof(BRTool_Placer_SwitchPlacementMode, NewPlacementMode) == 0x000000, "Member 'BRTool_Placer_SwitchPlacementMode::NewPlacementMode' has a wrong offset!");

// Function Brickadia.BRTool_Placer.Visuals_ChangeScreen
// 0x0010 (0x0010 - 0x0000)
struct BRTool_Placer_Visuals_ChangeScreen final
{
public:
	TSubclassOf<class UThumbnailProcessor>        ThumbnailProcessor;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ThumbnailObject;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_Visuals_ChangeScreen) == 0x000008, "Wrong alignment on BRTool_Placer_Visuals_ChangeScreen");
static_assert(sizeof(BRTool_Placer_Visuals_ChangeScreen) == 0x000010, "Wrong size on BRTool_Placer_Visuals_ChangeScreen");
static_assert(offsetof(BRTool_Placer_Visuals_ChangeScreen, ThumbnailProcessor) == 0x000000, "Member 'BRTool_Placer_Visuals_ChangeScreen::ThumbnailProcessor' has a wrong offset!");
static_assert(offsetof(BRTool_Placer_Visuals_ChangeScreen, ThumbnailObject) == 0x000008, "Member 'BRTool_Placer_Visuals_ChangeScreen::ThumbnailObject' has a wrong offset!");

// Function Brickadia.BRTool_Placer.GetAlignmentModes_BP
// 0x0050 (0x0050 - 0x0000)
struct BRTool_Placer_GetAlignmentModes_BP final
{
public:
	TMap<class FName, class UBRPlacerAlignmentModeBase*> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, ExportObject, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_GetAlignmentModes_BP) == 0x000008, "Wrong alignment on BRTool_Placer_GetAlignmentModes_BP");
static_assert(sizeof(BRTool_Placer_GetAlignmentModes_BP) == 0x000050, "Wrong size on BRTool_Placer_GetAlignmentModes_BP");
static_assert(offsetof(BRTool_Placer_GetAlignmentModes_BP, ReturnValue) == 0x000000, "Member 'BRTool_Placer_GetAlignmentModes_BP::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Placer.GetControlModes_BP
// 0x0050 (0x0050 - 0x0000)
struct BRTool_Placer_GetControlModes_BP final
{
public:
	TMap<class FName, class UBRPlacerControlModeBase*> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, ExportObject, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_GetControlModes_BP) == 0x000008, "Wrong alignment on BRTool_Placer_GetControlModes_BP");
static_assert(sizeof(BRTool_Placer_GetControlModes_BP) == 0x000050, "Wrong size on BRTool_Placer_GetControlModes_BP");
static_assert(offsetof(BRTool_Placer_GetControlModes_BP, ReturnValue) == 0x000000, "Member 'BRTool_Placer_GetControlModes_BP::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Placer.GetCurrentAlignmentMode
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Placer_GetCurrentAlignmentMode final
{
public:
	class UBRPlacerAlignmentModeBase*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_GetCurrentAlignmentMode) == 0x000008, "Wrong alignment on BRTool_Placer_GetCurrentAlignmentMode");
static_assert(sizeof(BRTool_Placer_GetCurrentAlignmentMode) == 0x000008, "Wrong size on BRTool_Placer_GetCurrentAlignmentMode");
static_assert(offsetof(BRTool_Placer_GetCurrentAlignmentMode, ReturnValue) == 0x000000, "Member 'BRTool_Placer_GetCurrentAlignmentMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Placer.GetCurrentControlMode
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Placer_GetCurrentControlMode final
{
public:
	class UBRPlacerControlModeBase*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_GetCurrentControlMode) == 0x000008, "Wrong alignment on BRTool_Placer_GetCurrentControlMode");
static_assert(sizeof(BRTool_Placer_GetCurrentControlMode) == 0x000008, "Wrong size on BRTool_Placer_GetCurrentControlMode");
static_assert(offsetof(BRTool_Placer_GetCurrentControlMode, ReturnValue) == 0x000000, "Member 'BRTool_Placer_GetCurrentControlMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Placer.GetCurrentPivots
// 0x0064 (0x0064 - 0x0000)
struct BRTool_Placer_GetCurrentPivots final
{
public:
	struct FBrickPlacementPivots                  ReturnValue;                                       // 0x0000(0x0064)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_GetCurrentPivots) == 0x000004, "Wrong alignment on BRTool_Placer_GetCurrentPivots");
static_assert(sizeof(BRTool_Placer_GetCurrentPivots) == 0x000064, "Wrong size on BRTool_Placer_GetCurrentPivots");
static_assert(offsetof(BRTool_Placer_GetCurrentPivots, ReturnValue) == 0x000000, "Member 'BRTool_Placer_GetCurrentPivots::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Placer.GetCurrentPlacementMode
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Placer_GetCurrentPlacementMode final
{
public:
	class UBRPlacerPlacementModeBase*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_GetCurrentPlacementMode) == 0x000008, "Wrong alignment on BRTool_Placer_GetCurrentPlacementMode");
static_assert(sizeof(BRTool_Placer_GetCurrentPlacementMode) == 0x000008, "Wrong size on BRTool_Placer_GetCurrentPlacementMode");
static_assert(offsetof(BRTool_Placer_GetCurrentPlacementMode, ReturnValue) == 0x000000, "Member 'BRTool_Placer_GetCurrentPlacementMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Placer.GetPlacementAudioLocation
// 0x0018 (0x0018 - 0x0000)
struct BRTool_Placer_GetPlacementAudioLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_GetPlacementAudioLocation) == 0x000008, "Wrong alignment on BRTool_Placer_GetPlacementAudioLocation");
static_assert(sizeof(BRTool_Placer_GetPlacementAudioLocation) == 0x000018, "Wrong size on BRTool_Placer_GetPlacementAudioLocation");
static_assert(offsetof(BRTool_Placer_GetPlacementAudioLocation, ReturnValue) == 0x000000, "Member 'BRTool_Placer_GetPlacementAudioLocation::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Placer.GetPlacementModes_BP
// 0x0050 (0x0050 - 0x0000)
struct BRTool_Placer_GetPlacementModes_BP final
{
public:
	TMap<class FName, class UBRPlacerPlacementModeBase*> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, ExportObject, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Placer_GetPlacementModes_BP) == 0x000008, "Wrong alignment on BRTool_Placer_GetPlacementModes_BP");
static_assert(sizeof(BRTool_Placer_GetPlacementModes_BP) == 0x000050, "Wrong size on BRTool_Placer_GetPlacementModes_BP");
static_assert(offsetof(BRTool_Placer_GetPlacementModes_BP, ReturnValue) == 0x000000, "Member 'BRTool_Placer_GetPlacementModes_BP::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.CompressMaterialAlpha
// 0x0002 (0x0002 - 0x0000)
struct BrickInstanceStatics_CompressMaterialAlpha final
{
public:
	uint8                                         MaterialAlpha;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_CompressMaterialAlpha) == 0x000001, "Wrong alignment on BrickInstanceStatics_CompressMaterialAlpha");
static_assert(sizeof(BrickInstanceStatics_CompressMaterialAlpha) == 0x000002, "Wrong size on BrickInstanceStatics_CompressMaterialAlpha");
static_assert(offsetof(BrickInstanceStatics_CompressMaterialAlpha, MaterialAlpha) == 0x000000, "Member 'BrickInstanceStatics_CompressMaterialAlpha::MaterialAlpha' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_CompressMaterialAlpha, ReturnValue) == 0x000001, "Member 'BrickInstanceStatics_CompressMaterialAlpha::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.DecompressMaterialAlpha
// 0x0002 (0x0002 - 0x0000)
struct BrickInstanceStatics_DecompressMaterialAlpha final
{
public:
	uint8                                         MaterialAlphaCompressed;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_DecompressMaterialAlpha) == 0x000001, "Wrong alignment on BrickInstanceStatics_DecompressMaterialAlpha");
static_assert(sizeof(BrickInstanceStatics_DecompressMaterialAlpha) == 0x000002, "Wrong size on BrickInstanceStatics_DecompressMaterialAlpha");
static_assert(offsetof(BrickInstanceStatics_DecompressMaterialAlpha, MaterialAlphaCompressed) == 0x000000, "Member 'BrickInstanceStatics_DecompressMaterialAlpha::MaterialAlphaCompressed' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_DecompressMaterialAlpha, ReturnValue) == 0x000001, "Member 'BrickInstanceStatics_DecompressMaterialAlpha::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.EqualEqual_BrickHandle
// 0x0014 (0x0014 - 0x0000)
struct BrickInstanceStatics_EqualEqual_BrickHandle final
{
public:
	struct FBrickHandle                           A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_EqualEqual_BrickHandle) == 0x000004, "Wrong alignment on BrickInstanceStatics_EqualEqual_BrickHandle");
static_assert(sizeof(BrickInstanceStatics_EqualEqual_BrickHandle) == 0x000014, "Wrong size on BrickInstanceStatics_EqualEqual_BrickHandle");
static_assert(offsetof(BrickInstanceStatics_EqualEqual_BrickHandle, A) == 0x000000, "Member 'BrickInstanceStatics_EqualEqual_BrickHandle::A' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_EqualEqual_BrickHandle, B) == 0x000008, "Member 'BrickInstanceStatics_EqualEqual_BrickHandle::B' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_EqualEqual_BrickHandle, ReturnValue) == 0x000010, "Member 'BrickInstanceStatics_EqualEqual_BrickHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.EqualEqual_BrickPersistentHandle
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_EqualEqual_BrickPersistentHandle final
{
public:
	struct FBrickPersistentHandle                 A;                                                 // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickPersistentHandle                 B;                                                 // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_EqualEqual_BrickPersistentHandle) == 0x000004, "Wrong alignment on BrickInstanceStatics_EqualEqual_BrickPersistentHandle");
static_assert(sizeof(BrickInstanceStatics_EqualEqual_BrickPersistentHandle) == 0x00000C, "Wrong size on BrickInstanceStatics_EqualEqual_BrickPersistentHandle");
static_assert(offsetof(BrickInstanceStatics_EqualEqual_BrickPersistentHandle, A) == 0x000000, "Member 'BrickInstanceStatics_EqualEqual_BrickPersistentHandle::A' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_EqualEqual_BrickPersistentHandle, B) == 0x000004, "Member 'BrickInstanceStatics_EqualEqual_BrickPersistentHandle::B' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_EqualEqual_BrickPersistentHandle, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_EqualEqual_BrickPersistentHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.FindOwner
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_FindOwner final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerController*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_FindOwner) == 0x000008, "Wrong alignment on BrickInstanceStatics_FindOwner");
static_assert(sizeof(BrickInstanceStatics_FindOwner) == 0x000018, "Wrong size on BrickInstanceStatics_FindOwner");
static_assert(offsetof(BrickInstanceStatics_FindOwner, WorldContextObject) == 0x000000, "Member 'BrickInstanceStatics_FindOwner::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_FindOwner, BrickHandle) == 0x000008, "Member 'BrickInstanceStatics_FindOwner::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_FindOwner, ReturnValue) == 0x000010, "Member 'BrickInstanceStatics_FindOwner::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetBasicBrick
// 0x0010 (0x0010 - 0x0000)
struct BrickInstanceStatics_GetBasicBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBasicBrick*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetBasicBrick) == 0x000008, "Wrong alignment on BrickInstanceStatics_GetBasicBrick");
static_assert(sizeof(BrickInstanceStatics_GetBasicBrick) == 0x000010, "Wrong size on BrickInstanceStatics_GetBasicBrick");
static_assert(offsetof(BrickInstanceStatics_GetBasicBrick, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetBasicBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetBasicBrick, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetBasicBrick::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetBrickAsset
// 0x0010 (0x0010 - 0x0000)
struct BrickInstanceStatics_GetBrickAsset final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickAsset*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetBrickAsset) == 0x000008, "Wrong alignment on BrickInstanceStatics_GetBrickAsset");
static_assert(sizeof(BrickInstanceStatics_GetBrickAsset) == 0x000010, "Wrong size on BrickInstanceStatics_GetBrickAsset");
static_assert(offsetof(BrickInstanceStatics_GetBrickAsset, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetBrickAsset::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetBrickAsset, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetBrickAsset::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetBrickGrid
// 0x0010 (0x0010 - 0x0000)
struct BrickInstanceStatics_GetBrickGrid final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickGridComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetBrickGrid) == 0x000008, "Wrong alignment on BrickInstanceStatics_GetBrickGrid");
static_assert(sizeof(BrickInstanceStatics_GetBrickGrid) == 0x000010, "Wrong size on BrickInstanceStatics_GetBrickGrid");
static_assert(offsetof(BrickInstanceStatics_GetBrickGrid, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetBrickGrid::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetBrickGrid, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetBrickGrid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetBrickOwnerData
// 0x0040 (0x0040 - 0x0000)
struct BrickInstanceStatics_GetBrickOwnerData final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickOwnerData                        ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetBrickOwnerData) == 0x000008, "Wrong alignment on BrickInstanceStatics_GetBrickOwnerData");
static_assert(sizeof(BrickInstanceStatics_GetBrickOwnerData) == 0x000040, "Wrong size on BrickInstanceStatics_GetBrickOwnerData");
static_assert(offsetof(BrickInstanceStatics_GetBrickOwnerData, WorldContextObject) == 0x000000, "Member 'BrickInstanceStatics_GetBrickOwnerData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetBrickOwnerData, BrickHandle) == 0x000008, "Member 'BrickInstanceStatics_GetBrickOwnerData::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetBrickOwnerData, ReturnValue) == 0x000010, "Member 'BrickInstanceStatics_GetBrickOwnerData::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetBrickType
// 0x0010 (0x0010 - 0x0000)
struct BrickInstanceStatics_GetBrickType final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickType*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetBrickType) == 0x000008, "Wrong alignment on BrickInstanceStatics_GetBrickType");
static_assert(sizeof(BrickInstanceStatics_GetBrickType) == 0x000010, "Wrong size on BrickInstanceStatics_GetBrickType");
static_assert(offsetof(BrickInstanceStatics_GetBrickType, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetBrickType::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetBrickType, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetCollisionChannel
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetCollisionChannel final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickCollisionChannels                       Channel;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_GetCollisionChannel) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetCollisionChannel");
static_assert(sizeof(BrickInstanceStatics_GetCollisionChannel) == 0x00000C, "Wrong size on BrickInstanceStatics_GetCollisionChannel");
static_assert(offsetof(BrickInstanceStatics_GetCollisionChannel, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetCollisionChannel::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetCollisionChannel, Channel) == 0x000008, "Member 'BrickInstanceStatics_GetCollisionChannel::Channel' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetCollisionChannel, ReturnValue) == 0x000009, "Member 'BrickInstanceStatics_GetCollisionChannel::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetCollisionChannels
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetCollisionChannels final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickCollisionChannels                       ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_GetCollisionChannels) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetCollisionChannels");
static_assert(sizeof(BrickInstanceStatics_GetCollisionChannels) == 0x00000C, "Wrong size on BrickInstanceStatics_GetCollisionChannels");
static_assert(offsetof(BrickInstanceStatics_GetCollisionChannels, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetCollisionChannels::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetCollisionChannels, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetCollisionChannels::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetColor
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetColor final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetColor) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetColor");
static_assert(sizeof(BrickInstanceStatics_GetColor) == 0x00000C, "Wrong size on BrickInstanceStatics_GetColor");
static_assert(offsetof(BrickInstanceStatics_GetColor, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetColor::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetColor, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetColorAndAlpha
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetColorAndAlpha final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetColorAndAlpha) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetColorAndAlpha");
static_assert(sizeof(BrickInstanceStatics_GetColorAndAlpha) == 0x00000C, "Wrong size on BrickInstanceStatics_GetColorAndAlpha");
static_assert(offsetof(BrickInstanceStatics_GetColorAndAlpha, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetColorAndAlpha::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetColorAndAlpha, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetColorAndAlpha::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetDirection
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetDirection final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_GetDirection) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetDirection");
static_assert(sizeof(BrickInstanceStatics_GetDirection) == 0x00000C, "Wrong size on BrickInstanceStatics_GetDirection");
static_assert(offsetof(BrickInstanceStatics_GetDirection, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetDirection::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetDirection, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetDirection::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetHalfSize
// 0x0014 (0x0014 - 0x0000)
struct BrickInstanceStatics_GetHalfSize final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetHalfSize) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetHalfSize");
static_assert(sizeof(BrickInstanceStatics_GetHalfSize) == 0x000014, "Wrong size on BrickInstanceStatics_GetHalfSize");
static_assert(offsetof(BrickInstanceStatics_GetHalfSize, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetHalfSize::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetHalfSize, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetHalfSize::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetIntBox
// 0x0020 (0x0020 - 0x0000)
struct BrickInstanceStatics_GetIntBox final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntBox                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetIntBox) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetIntBox");
static_assert(sizeof(BrickInstanceStatics_GetIntBox) == 0x000020, "Wrong size on BrickInstanceStatics_GetIntBox");
static_assert(offsetof(BrickInstanceStatics_GetIntBox, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetIntBox::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetIntBox, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetIntBox::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetMaterialAlpha
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetMaterialAlpha final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_GetMaterialAlpha) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetMaterialAlpha");
static_assert(sizeof(BrickInstanceStatics_GetMaterialAlpha) == 0x00000C, "Wrong size on BrickInstanceStatics_GetMaterialAlpha");
static_assert(offsetof(BrickInstanceStatics_GetMaterialAlpha, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetMaterialAlpha::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetMaterialAlpha, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetMaterialAlpha::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetMaterialIndex
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetMaterialIndex final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetMaterialIndex) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetMaterialIndex");
static_assert(sizeof(BrickInstanceStatics_GetMaterialIndex) == 0x00000C, "Wrong size on BrickInstanceStatics_GetMaterialIndex");
static_assert(offsetof(BrickInstanceStatics_GetMaterialIndex, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetMaterialIndex::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetMaterialIndex, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetMaterialIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetOrientation
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetOrientation final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_GetOrientation) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetOrientation");
static_assert(sizeof(BrickInstanceStatics_GetOrientation) == 0x00000C, "Wrong size on BrickInstanceStatics_GetOrientation");
static_assert(offsetof(BrickInstanceStatics_GetOrientation, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetOrientation::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetOrientation, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetOrientation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetOwnerId
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetOwnerId final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetOwnerId) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetOwnerId");
static_assert(sizeof(BrickInstanceStatics_GetOwnerId) == 0x00000C, "Wrong size on BrickInstanceStatics_GetOwnerId");
static_assert(offsetof(BrickInstanceStatics_GetOwnerId, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetOwnerId::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetOwnerId, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetOwnerId::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetPosition
// 0x0014 (0x0014 - 0x0000)
struct BrickInstanceStatics_GetPosition final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetPosition) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetPosition");
static_assert(sizeof(BrickInstanceStatics_GetPosition) == 0x000014, "Wrong size on BrickInstanceStatics_GetPosition");
static_assert(offsetof(BrickInstanceStatics_GetPosition, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetPosition::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetPosition, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetPosition::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetProceduralBrick
// 0x0010 (0x0010 - 0x0000)
struct BrickInstanceStatics_GetProceduralBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProceduralBrick*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetProceduralBrick) == 0x000008, "Wrong alignment on BrickInstanceStatics_GetProceduralBrick");
static_assert(sizeof(BrickInstanceStatics_GetProceduralBrick) == 0x000010, "Wrong size on BrickInstanceStatics_GetProceduralBrick");
static_assert(offsetof(BrickInstanceStatics_GetProceduralBrick, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetProceduralBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetProceduralBrick, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetProceduralBrick::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetRotatedHalfSize
// 0x0014 (0x0014 - 0x0000)
struct BrickInstanceStatics_GetRotatedHalfSize final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetRotatedHalfSize) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetRotatedHalfSize");
static_assert(sizeof(BrickInstanceStatics_GetRotatedHalfSize) == 0x000014, "Wrong size on BrickInstanceStatics_GetRotatedHalfSize");
static_assert(offsetof(BrickInstanceStatics_GetRotatedHalfSize, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetRotatedHalfSize::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetRotatedHalfSize, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetRotatedHalfSize::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetRotation
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetRotation final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickRotation                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_GetRotation) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetRotation");
static_assert(sizeof(BrickInstanceStatics_GetRotation) == 0x00000C, "Wrong size on BrickInstanceStatics_GetRotation");
static_assert(offsetof(BrickInstanceStatics_GetRotation, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetRotation::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetRotation, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetRotation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetSelectionLayer
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetSelectionLayer final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickSelectionLayers                         Layer;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_GetSelectionLayer) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetSelectionLayer");
static_assert(sizeof(BrickInstanceStatics_GetSelectionLayer) == 0x00000C, "Wrong size on BrickInstanceStatics_GetSelectionLayer");
static_assert(offsetof(BrickInstanceStatics_GetSelectionLayer, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetSelectionLayer::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetSelectionLayer, Layer) == 0x000008, "Member 'BrickInstanceStatics_GetSelectionLayer::Layer' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetSelectionLayer, ReturnValue) == 0x000009, "Member 'BrickInstanceStatics_GetSelectionLayer::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetSelectionLayers
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetSelectionLayers final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickSelectionLayers                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_GetSelectionLayers) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetSelectionLayers");
static_assert(sizeof(BrickInstanceStatics_GetSelectionLayers) == 0x00000C, "Wrong size on BrickInstanceStatics_GetSelectionLayers");
static_assert(offsetof(BrickInstanceStatics_GetSelectionLayers, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetSelectionLayers::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetSelectionLayers, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetSelectionLayers::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetSpawnTransformAboveBrick
// 0x0070 (0x0070 - 0x0000)
struct BrickInstanceStatics_GetSpawnTransformAboveBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterHalfHeight;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_GetSpawnTransformAboveBrick) == 0x000010, "Wrong alignment on BrickInstanceStatics_GetSpawnTransformAboveBrick");
static_assert(sizeof(BrickInstanceStatics_GetSpawnTransformAboveBrick) == 0x000070, "Wrong size on BrickInstanceStatics_GetSpawnTransformAboveBrick");
static_assert(offsetof(BrickInstanceStatics_GetSpawnTransformAboveBrick, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetSpawnTransformAboveBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetSpawnTransformAboveBrick, CharacterHalfHeight) == 0x000008, "Member 'BrickInstanceStatics_GetSpawnTransformAboveBrick::CharacterHalfHeight' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetSpawnTransformAboveBrick, ReturnValue) == 0x000010, "Member 'BrickInstanceStatics_GetSpawnTransformAboveBrick::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.GetVisibility
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_GetVisibility final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_GetVisibility) == 0x000004, "Wrong alignment on BrickInstanceStatics_GetVisibility");
static_assert(sizeof(BrickInstanceStatics_GetVisibility) == 0x00000C, "Wrong size on BrickInstanceStatics_GetVisibility");
static_assert(offsetof(BrickInstanceStatics_GetVisibility, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_GetVisibility::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_GetVisibility, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_GetVisibility::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.HasTrustToModifyBrick
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_HasTrustToModifyBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ABRPlayerController*              Controller;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_HasTrustToModifyBrick) == 0x000008, "Wrong alignment on BrickInstanceStatics_HasTrustToModifyBrick");
static_assert(sizeof(BrickInstanceStatics_HasTrustToModifyBrick) == 0x000018, "Wrong size on BrickInstanceStatics_HasTrustToModifyBrick");
static_assert(offsetof(BrickInstanceStatics_HasTrustToModifyBrick, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_HasTrustToModifyBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_HasTrustToModifyBrick, Controller) == 0x000008, "Member 'BrickInstanceStatics_HasTrustToModifyBrick::Controller' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_HasTrustToModifyBrick, ReturnValue) == 0x000010, "Member 'BrickInstanceStatics_HasTrustToModifyBrick::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.IsHandleValid
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_IsHandleValid final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_IsHandleValid) == 0x000004, "Wrong alignment on BrickInstanceStatics_IsHandleValid");
static_assert(sizeof(BrickInstanceStatics_IsHandleValid) == 0x00000C, "Wrong size on BrickInstanceStatics_IsHandleValid");
static_assert(offsetof(BrickInstanceStatics_IsHandleValid, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_IsHandleValid::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_IsHandleValid, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_IsHandleValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.IsPersistentHandleValid
// 0x0008 (0x0008 - 0x0000)
struct BrickInstanceStatics_IsPersistentHandleValid final
{
public:
	struct FBrickPersistentHandle                 BrickPersistentHandle;                             // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_IsPersistentHandleValid) == 0x000004, "Wrong alignment on BrickInstanceStatics_IsPersistentHandleValid");
static_assert(sizeof(BrickInstanceStatics_IsPersistentHandleValid) == 0x000008, "Wrong size on BrickInstanceStatics_IsPersistentHandleValid");
static_assert(offsetof(BrickInstanceStatics_IsPersistentHandleValid, BrickPersistentHandle) == 0x000000, "Member 'BrickInstanceStatics_IsPersistentHandleValid::BrickPersistentHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_IsPersistentHandleValid, ReturnValue) == 0x000004, "Member 'BrickInstanceStatics_IsPersistentHandleValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.MergeCollisionChannels
// 0x0005 (0x0005 - 0x0000)
struct BrickInstanceStatics_MergeCollisionChannels final
{
public:
	bool                                          bPlayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeapon;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInteraction;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTool;                                             // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickCollisionChannels                       ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_MergeCollisionChannels) == 0x000001, "Wrong alignment on BrickInstanceStatics_MergeCollisionChannels");
static_assert(sizeof(BrickInstanceStatics_MergeCollisionChannels) == 0x000005, "Wrong size on BrickInstanceStatics_MergeCollisionChannels");
static_assert(offsetof(BrickInstanceStatics_MergeCollisionChannels, bPlayer) == 0x000000, "Member 'BrickInstanceStatics_MergeCollisionChannels::bPlayer' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_MergeCollisionChannels, bWeapon) == 0x000001, "Member 'BrickInstanceStatics_MergeCollisionChannels::bWeapon' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_MergeCollisionChannels, bInteraction) == 0x000002, "Member 'BrickInstanceStatics_MergeCollisionChannels::bInteraction' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_MergeCollisionChannels, bTool) == 0x000003, "Member 'BrickInstanceStatics_MergeCollisionChannels::bTool' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_MergeCollisionChannels, ReturnValue) == 0x000004, "Member 'BrickInstanceStatics_MergeCollisionChannels::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.NotEqual_BrickHandle
// 0x0014 (0x0014 - 0x0000)
struct BrickInstanceStatics_NotEqual_BrickHandle final
{
public:
	struct FBrickHandle                           A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_NotEqual_BrickHandle) == 0x000004, "Wrong alignment on BrickInstanceStatics_NotEqual_BrickHandle");
static_assert(sizeof(BrickInstanceStatics_NotEqual_BrickHandle) == 0x000014, "Wrong size on BrickInstanceStatics_NotEqual_BrickHandle");
static_assert(offsetof(BrickInstanceStatics_NotEqual_BrickHandle, A) == 0x000000, "Member 'BrickInstanceStatics_NotEqual_BrickHandle::A' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_NotEqual_BrickHandle, B) == 0x000008, "Member 'BrickInstanceStatics_NotEqual_BrickHandle::B' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_NotEqual_BrickHandle, ReturnValue) == 0x000010, "Member 'BrickInstanceStatics_NotEqual_BrickHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.NotEqual_BrickPersistentHandle
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_NotEqual_BrickPersistentHandle final
{
public:
	struct FBrickPersistentHandle                 A;                                                 // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickPersistentHandle                 B;                                                 // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_NotEqual_BrickPersistentHandle) == 0x000004, "Wrong alignment on BrickInstanceStatics_NotEqual_BrickPersistentHandle");
static_assert(sizeof(BrickInstanceStatics_NotEqual_BrickPersistentHandle) == 0x00000C, "Wrong size on BrickInstanceStatics_NotEqual_BrickPersistentHandle");
static_assert(offsetof(BrickInstanceStatics_NotEqual_BrickPersistentHandle, A) == 0x000000, "Member 'BrickInstanceStatics_NotEqual_BrickPersistentHandle::A' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_NotEqual_BrickPersistentHandle, B) == 0x000004, "Member 'BrickInstanceStatics_NotEqual_BrickPersistentHandle::B' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_NotEqual_BrickPersistentHandle, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_NotEqual_BrickPersistentHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.QuantizeMaterialAlpha
// 0x0002 (0x0002 - 0x0000)
struct BrickInstanceStatics_QuantizeMaterialAlpha final
{
public:
	uint8                                         MaterialAlpha;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_QuantizeMaterialAlpha) == 0x000001, "Wrong alignment on BrickInstanceStatics_QuantizeMaterialAlpha");
static_assert(sizeof(BrickInstanceStatics_QuantizeMaterialAlpha) == 0x000002, "Wrong size on BrickInstanceStatics_QuantizeMaterialAlpha");
static_assert(offsetof(BrickInstanceStatics_QuantizeMaterialAlpha, MaterialAlpha) == 0x000000, "Member 'BrickInstanceStatics_QuantizeMaterialAlpha::MaterialAlpha' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_QuantizeMaterialAlpha, ReturnValue) == 0x000001, "Member 'BrickInstanceStatics_QuantizeMaterialAlpha::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.ResolvePersistentHandle
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_ResolvePersistentHandle final
{
public:
	struct FBrickPersistentHandle                 BrickPersistentHandle;                             // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_ResolvePersistentHandle) == 0x000004, "Wrong alignment on BrickInstanceStatics_ResolvePersistentHandle");
static_assert(sizeof(BrickInstanceStatics_ResolvePersistentHandle) == 0x00000C, "Wrong size on BrickInstanceStatics_ResolvePersistentHandle");
static_assert(offsetof(BrickInstanceStatics_ResolvePersistentHandle, BrickPersistentHandle) == 0x000000, "Member 'BrickInstanceStatics_ResolvePersistentHandle::BrickPersistentHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_ResolvePersistentHandle, ReturnValue) == 0x000004, "Member 'BrickInstanceStatics_ResolvePersistentHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.ResolvePersistentHandleArray
// 0x0028 (0x0028 - 0x0000)
struct BrickInstanceStatics_ResolvePersistentHandleArray final
{
public:
	TArray<struct FBrickPersistentHandle>         BrickPersistentHandles;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FBrickHandle>                   OutHandles;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeInvalid;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_ResolvePersistentHandleArray) == 0x000008, "Wrong alignment on BrickInstanceStatics_ResolvePersistentHandleArray");
static_assert(sizeof(BrickInstanceStatics_ResolvePersistentHandleArray) == 0x000028, "Wrong size on BrickInstanceStatics_ResolvePersistentHandleArray");
static_assert(offsetof(BrickInstanceStatics_ResolvePersistentHandleArray, BrickPersistentHandles) == 0x000000, "Member 'BrickInstanceStatics_ResolvePersistentHandleArray::BrickPersistentHandles' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_ResolvePersistentHandleArray, OutHandles) == 0x000010, "Member 'BrickInstanceStatics_ResolvePersistentHandleArray::OutHandles' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_ResolvePersistentHandleArray, bExcludeInvalid) == 0x000020, "Member 'BrickInstanceStatics_ResolvePersistentHandleArray::bExcludeInvalid' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetBrickType
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetBrickType final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickType*                             NewBrickType;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetBrickType) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetBrickType");
static_assert(sizeof(BrickInstanceStatics_SetBrickType) == 0x000018, "Wrong size on BrickInstanceStatics_SetBrickType");
static_assert(offsetof(BrickInstanceStatics_SetBrickType, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetBrickType::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetBrickType, NewBrickType) == 0x000008, "Member 'BrickInstanceStatics_SetBrickType::NewBrickType' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetBrickType, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetBrickType::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetBrickTypeFromBasicBrick
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetBrickTypeFromBasicBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBasicBrick*                            NewBasicBrick;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetBrickTypeFromBasicBrick) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetBrickTypeFromBasicBrick");
static_assert(sizeof(BrickInstanceStatics_SetBrickTypeFromBasicBrick) == 0x000018, "Wrong size on BrickInstanceStatics_SetBrickTypeFromBasicBrick");
static_assert(offsetof(BrickInstanceStatics_SetBrickTypeFromBasicBrick, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetBrickTypeFromBasicBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetBrickTypeFromBasicBrick, NewBasicBrick) == 0x000008, "Member 'BrickInstanceStatics_SetBrickTypeFromBasicBrick::NewBasicBrick' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetBrickTypeFromBasicBrick, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetBrickTypeFromBasicBrick::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetBrickTypeFromProceduralBrick
// 0x0028 (0x0028 - 0x0000)
struct BrickInstanceStatics_SetBrickTypeFromProceduralBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProceduralBrick*                       NewProceduralBrick;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             NewSize;                                           // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetBrickTypeFromProceduralBrick) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetBrickTypeFromProceduralBrick");
static_assert(sizeof(BrickInstanceStatics_SetBrickTypeFromProceduralBrick) == 0x000028, "Wrong size on BrickInstanceStatics_SetBrickTypeFromProceduralBrick");
static_assert(offsetof(BrickInstanceStatics_SetBrickTypeFromProceduralBrick, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetBrickTypeFromProceduralBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetBrickTypeFromProceduralBrick, NewProceduralBrick) == 0x000008, "Member 'BrickInstanceStatics_SetBrickTypeFromProceduralBrick::NewProceduralBrick' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetBrickTypeFromProceduralBrick, NewSize) == 0x000010, "Member 'BrickInstanceStatics_SetBrickTypeFromProceduralBrick::NewSize' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetBrickTypeFromProceduralBrick, WorldContextObject) == 0x000020, "Member 'BrickInstanceStatics_SetBrickTypeFromProceduralBrick::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetCollisionChannel
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetCollisionChannel final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickCollisionChannels                       Channel;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetCollisionChannel) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetCollisionChannel");
static_assert(sizeof(BrickInstanceStatics_SetCollisionChannel) == 0x000018, "Wrong size on BrickInstanceStatics_SetCollisionChannel");
static_assert(offsetof(BrickInstanceStatics_SetCollisionChannel, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetCollisionChannel::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetCollisionChannel, Channel) == 0x000008, "Member 'BrickInstanceStatics_SetCollisionChannel::Channel' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetCollisionChannel, bValue) == 0x000009, "Member 'BrickInstanceStatics_SetCollisionChannel::bValue' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetCollisionChannel, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetCollisionChannel::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetCollisionChannels
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetCollisionChannels final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickCollisionChannels                       NewCollisionChannels;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetCollisionChannels) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetCollisionChannels");
static_assert(sizeof(BrickInstanceStatics_SetCollisionChannels) == 0x000018, "Wrong size on BrickInstanceStatics_SetCollisionChannels");
static_assert(offsetof(BrickInstanceStatics_SetCollisionChannels, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetCollisionChannels::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetCollisionChannels, NewCollisionChannels) == 0x000008, "Member 'BrickInstanceStatics_SetCollisionChannels::NewCollisionChannels' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetCollisionChannels, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetCollisionChannels::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetColor
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetColor final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NewColor;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetColor) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetColor");
static_assert(sizeof(BrickInstanceStatics_SetColor) == 0x000018, "Wrong size on BrickInstanceStatics_SetColor");
static_assert(offsetof(BrickInstanceStatics_SetColor, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetColor::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetColor, NewColor) == 0x000008, "Member 'BrickInstanceStatics_SetColor::NewColor' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetColor, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetColor::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetDirection
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetDirection final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               NewDirection;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetDirection) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetDirection");
static_assert(sizeof(BrickInstanceStatics_SetDirection) == 0x000018, "Wrong size on BrickInstanceStatics_SetDirection");
static_assert(offsetof(BrickInstanceStatics_SetDirection, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetDirection::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetDirection, NewDirection) == 0x000008, "Member 'BrickInstanceStatics_SetDirection::NewDirection' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetDirection, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetDirection::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetMaterialAlpha
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetMaterialAlpha final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewMaterialAlpha;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetMaterialAlpha) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetMaterialAlpha");
static_assert(sizeof(BrickInstanceStatics_SetMaterialAlpha) == 0x000018, "Wrong size on BrickInstanceStatics_SetMaterialAlpha");
static_assert(offsetof(BrickInstanceStatics_SetMaterialAlpha, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetMaterialAlpha::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetMaterialAlpha, NewMaterialAlpha) == 0x000008, "Member 'BrickInstanceStatics_SetMaterialAlpha::NewMaterialAlpha' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetMaterialAlpha, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetMaterialAlpha::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetMaterialIndex
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetMaterialIndex final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewMaterialIndex;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetMaterialIndex) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetMaterialIndex");
static_assert(sizeof(BrickInstanceStatics_SetMaterialIndex) == 0x000018, "Wrong size on BrickInstanceStatics_SetMaterialIndex");
static_assert(offsetof(BrickInstanceStatics_SetMaterialIndex, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetMaterialIndex::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetMaterialIndex, NewMaterialIndex) == 0x000008, "Member 'BrickInstanceStatics_SetMaterialIndex::NewMaterialIndex' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetMaterialIndex, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetMaterialIndex::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetOrientation
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetOrientation final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             NewOrientation;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetOrientation) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetOrientation");
static_assert(sizeof(BrickInstanceStatics_SetOrientation) == 0x000018, "Wrong size on BrickInstanceStatics_SetOrientation");
static_assert(offsetof(BrickInstanceStatics_SetOrientation, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetOrientation::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetOrientation, NewOrientation) == 0x000008, "Member 'BrickInstanceStatics_SetOrientation::NewOrientation' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetOrientation, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetOrientation::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetOwnerId
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetOwnerId final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetOwnerId) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetOwnerId");
static_assert(sizeof(BrickInstanceStatics_SetOwnerId) == 0x000018, "Wrong size on BrickInstanceStatics_SetOwnerId");
static_assert(offsetof(BrickInstanceStatics_SetOwnerId, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetOwnerId::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetOwnerId, NewId) == 0x000008, "Member 'BrickInstanceStatics_SetOwnerId::NewId' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetOwnerId, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetOwnerId::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetPosition
// 0x0020 (0x0020 - 0x0000)
struct BrickInstanceStatics_SetPosition final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             NewPosition;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetPosition) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetPosition");
static_assert(sizeof(BrickInstanceStatics_SetPosition) == 0x000020, "Wrong size on BrickInstanceStatics_SetPosition");
static_assert(offsetof(BrickInstanceStatics_SetPosition, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetPosition::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetPosition, NewPosition) == 0x000008, "Member 'BrickInstanceStatics_SetPosition::NewPosition' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetPosition, WorldContextObject) == 0x000018, "Member 'BrickInstanceStatics_SetPosition::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetRotation
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetRotation final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickRotation                                NewRotation;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetRotation) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetRotation");
static_assert(sizeof(BrickInstanceStatics_SetRotation) == 0x000018, "Wrong size on BrickInstanceStatics_SetRotation");
static_assert(offsetof(BrickInstanceStatics_SetRotation, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetRotation::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetRotation, NewRotation) == 0x000008, "Member 'BrickInstanceStatics_SetRotation::NewRotation' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetRotation, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetRotation::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetSelectionLayer
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetSelectionLayer final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickSelectionLayers                         Layer;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetSelectionLayer) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetSelectionLayer");
static_assert(sizeof(BrickInstanceStatics_SetSelectionLayer) == 0x000018, "Wrong size on BrickInstanceStatics_SetSelectionLayer");
static_assert(offsetof(BrickInstanceStatics_SetSelectionLayer, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetSelectionLayer::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetSelectionLayer, Layer) == 0x000008, "Member 'BrickInstanceStatics_SetSelectionLayer::Layer' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetSelectionLayer, bValue) == 0x000009, "Member 'BrickInstanceStatics_SetSelectionLayer::bValue' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetSelectionLayer, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetSelectionLayer::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetSelectionLayers
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetSelectionLayers final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickSelectionLayers                         NewSelectionLayers;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetSelectionLayers) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetSelectionLayers");
static_assert(sizeof(BrickInstanceStatics_SetSelectionLayers) == 0x000018, "Wrong size on BrickInstanceStatics_SetSelectionLayers");
static_assert(offsetof(BrickInstanceStatics_SetSelectionLayers, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetSelectionLayers::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetSelectionLayers, NewSelectionLayers) == 0x000008, "Member 'BrickInstanceStatics_SetSelectionLayers::NewSelectionLayers' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetSelectionLayers, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetSelectionLayers::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SetVisibility
// 0x0018 (0x0018 - 0x0000)
struct BrickInstanceStatics_SetVisibility final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewVisibility;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SetVisibility) == 0x000008, "Wrong alignment on BrickInstanceStatics_SetVisibility");
static_assert(sizeof(BrickInstanceStatics_SetVisibility) == 0x000018, "Wrong size on BrickInstanceStatics_SetVisibility");
static_assert(offsetof(BrickInstanceStatics_SetVisibility, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_SetVisibility::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetVisibility, bNewVisibility) == 0x000008, "Member 'BrickInstanceStatics_SetVisibility::bNewVisibility' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SetVisibility, WorldContextObject) == 0x000010, "Member 'BrickInstanceStatics_SetVisibility::WorldContextObject' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.SplitCollisionChannels
// 0x0005 (0x0005 - 0x0000)
struct BrickInstanceStatics_SplitCollisionChannels final
{
public:
	EBrickCollisionChannels                       CollisionChannels;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutPlayer;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutWeapon;                                        // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutInteraction;                                   // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutTool;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_SplitCollisionChannels) == 0x000001, "Wrong alignment on BrickInstanceStatics_SplitCollisionChannels");
static_assert(sizeof(BrickInstanceStatics_SplitCollisionChannels) == 0x000005, "Wrong size on BrickInstanceStatics_SplitCollisionChannels");
static_assert(offsetof(BrickInstanceStatics_SplitCollisionChannels, CollisionChannels) == 0x000000, "Member 'BrickInstanceStatics_SplitCollisionChannels::CollisionChannels' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SplitCollisionChannels, bOutPlayer) == 0x000001, "Member 'BrickInstanceStatics_SplitCollisionChannels::bOutPlayer' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SplitCollisionChannels, bOutWeapon) == 0x000002, "Member 'BrickInstanceStatics_SplitCollisionChannels::bOutWeapon' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SplitCollisionChannels, bOutInteraction) == 0x000003, "Member 'BrickInstanceStatics_SplitCollisionChannels::bOutInteraction' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_SplitCollisionChannels, bOutTool) == 0x000004, "Member 'BrickInstanceStatics_SplitCollisionChannels::bOutTool' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.ToPersistentHandle
// 0x000C (0x000C - 0x0000)
struct BrickInstanceStatics_ToPersistentHandle final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickPersistentHandle                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickInstanceStatics_ToPersistentHandle) == 0x000004, "Wrong alignment on BrickInstanceStatics_ToPersistentHandle");
static_assert(sizeof(BrickInstanceStatics_ToPersistentHandle) == 0x00000C, "Wrong size on BrickInstanceStatics_ToPersistentHandle");
static_assert(offsetof(BrickInstanceStatics_ToPersistentHandle, BrickHandle) == 0x000000, "Member 'BrickInstanceStatics_ToPersistentHandle::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_ToPersistentHandle, ReturnValue) == 0x000008, "Member 'BrickInstanceStatics_ToPersistentHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickInstanceStatics.ToPersistentHandleArray
// 0x0028 (0x0028 - 0x0000)
struct BrickInstanceStatics_ToPersistentHandleArray final
{
public:
	TArray<struct FBrickHandle>                   BrickHandles;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FBrickPersistentHandle>         OutPersistentHandles;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeInvalid;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickInstanceStatics_ToPersistentHandleArray) == 0x000008, "Wrong alignment on BrickInstanceStatics_ToPersistentHandleArray");
static_assert(sizeof(BrickInstanceStatics_ToPersistentHandleArray) == 0x000028, "Wrong size on BrickInstanceStatics_ToPersistentHandleArray");
static_assert(offsetof(BrickInstanceStatics_ToPersistentHandleArray, BrickHandles) == 0x000000, "Member 'BrickInstanceStatics_ToPersistentHandleArray::BrickHandles' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_ToPersistentHandleArray, OutPersistentHandles) == 0x000010, "Member 'BrickInstanceStatics_ToPersistentHandleArray::OutPersistentHandles' has a wrong offset!");
static_assert(offsetof(BrickInstanceStatics_ToPersistentHandleArray, bExcludeInvalid) == 0x000020, "Member 'BrickInstanceStatics_ToPersistentHandleArray::bExcludeInvalid' has a wrong offset!");

// Function Brickadia.BrickMaterialCollection.GetMaterial
// 0x0010 (0x0010 - 0x0000)
struct BrickMaterialCollection_GetMaterial final
{
public:
	EBrickTextureGroup                            Texture;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMaterialCollection_GetMaterial) == 0x000008, "Wrong alignment on BrickMaterialCollection_GetMaterial");
static_assert(sizeof(BrickMaterialCollection_GetMaterial) == 0x000010, "Wrong size on BrickMaterialCollection_GetMaterial");
static_assert(offsetof(BrickMaterialCollection_GetMaterial, Texture) == 0x000000, "Member 'BrickMaterialCollection_GetMaterial::Texture' has a wrong offset!");
static_assert(offsetof(BrickMaterialCollection_GetMaterial, ReturnValue) == 0x000008, "Member 'BrickMaterialCollection_GetMaterial::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.AlignGhostBrickToHitResult
// 0x0118 (0x0118 - 0x0000)
struct BrickMathLibrary_AlignGhostBrickToHitResult final
{
public:
	class UBrickGridComponent*                    TargetGrid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickType*                             BrickType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0010(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EBrickRotation                                DesiredRotation;                                   // 0x0100(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             OutPosition;                                       // 0x0104(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             OutOrientation;                                    // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_AlignGhostBrickToHitResult) == 0x000008, "Wrong alignment on BrickMathLibrary_AlignGhostBrickToHitResult");
static_assert(sizeof(BrickMathLibrary_AlignGhostBrickToHitResult) == 0x000118, "Wrong size on BrickMathLibrary_AlignGhostBrickToHitResult");
static_assert(offsetof(BrickMathLibrary_AlignGhostBrickToHitResult, TargetGrid) == 0x000000, "Member 'BrickMathLibrary_AlignGhostBrickToHitResult::TargetGrid' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_AlignGhostBrickToHitResult, BrickType) == 0x000008, "Member 'BrickMathLibrary_AlignGhostBrickToHitResult::BrickType' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_AlignGhostBrickToHitResult, HitResult) == 0x000010, "Member 'BrickMathLibrary_AlignGhostBrickToHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_AlignGhostBrickToHitResult, DesiredRotation) == 0x000100, "Member 'BrickMathLibrary_AlignGhostBrickToHitResult::DesiredRotation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_AlignGhostBrickToHitResult, OutPosition) == 0x000104, "Member 'BrickMathLibrary_AlignGhostBrickToHitResult::OutPosition' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_AlignGhostBrickToHitResult, OutOrientation) == 0x000110, "Member 'BrickMathLibrary_AlignGhostBrickToHitResult::OutOrientation' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.CheckOrientation
// 0x0002 (0x0002 - 0x0000)
struct BrickMathLibrary_CheckOrientation final
{
public:
	EBrickOrientation                             Orientation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_CheckOrientation) == 0x000001, "Wrong alignment on BrickMathLibrary_CheckOrientation");
static_assert(sizeof(BrickMathLibrary_CheckOrientation) == 0x000002, "Wrong size on BrickMathLibrary_CheckOrientation");
static_assert(offsetof(BrickMathLibrary_CheckOrientation, Orientation) == 0x000000, "Member 'BrickMathLibrary_CheckOrientation::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_CheckOrientation, ReturnValue) == 0x000001, "Member 'BrickMathLibrary_CheckOrientation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.CombineIntBoxes
// 0x0048 (0x0048 - 0x0000)
struct BrickMathLibrary_CombineIntBoxes final
{
public:
	struct FIntBox                                BoxA;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntBox                                BoxB;                                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntBox                                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_CombineIntBoxes) == 0x000004, "Wrong alignment on BrickMathLibrary_CombineIntBoxes");
static_assert(sizeof(BrickMathLibrary_CombineIntBoxes) == 0x000048, "Wrong size on BrickMathLibrary_CombineIntBoxes");
static_assert(offsetof(BrickMathLibrary_CombineIntBoxes, BoxA) == 0x000000, "Member 'BrickMathLibrary_CombineIntBoxes::BoxA' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_CombineIntBoxes, BoxB) == 0x000018, "Member 'BrickMathLibrary_CombineIntBoxes::BoxB' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_CombineIntBoxes, ReturnValue) == 0x000030, "Member 'BrickMathLibrary_CombineIntBoxes::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.CombineIntBoxesWithLimit
// 0x0058 (0x0058 - 0x0000)
struct BrickMathLibrary_CombineIntBoxesWithLimit final
{
public:
	struct FIntBox                                BoxA;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntBox                                BoxB;                                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntVector                             MaxExtent;                                         // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutLimitExceeded;                                 // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntBox                                ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_CombineIntBoxesWithLimit) == 0x000004, "Wrong alignment on BrickMathLibrary_CombineIntBoxesWithLimit");
static_assert(sizeof(BrickMathLibrary_CombineIntBoxesWithLimit) == 0x000058, "Wrong size on BrickMathLibrary_CombineIntBoxesWithLimit");
static_assert(offsetof(BrickMathLibrary_CombineIntBoxesWithLimit, BoxA) == 0x000000, "Member 'BrickMathLibrary_CombineIntBoxesWithLimit::BoxA' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_CombineIntBoxesWithLimit, BoxB) == 0x000018, "Member 'BrickMathLibrary_CombineIntBoxesWithLimit::BoxB' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_CombineIntBoxesWithLimit, MaxExtent) == 0x000030, "Member 'BrickMathLibrary_CombineIntBoxesWithLimit::MaxExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_CombineIntBoxesWithLimit, bOutLimitExceeded) == 0x00003C, "Member 'BrickMathLibrary_CombineIntBoxesWithLimit::bOutLimitExceeded' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_CombineIntBoxesWithLimit, ReturnValue) == 0x000040, "Member 'BrickMathLibrary_CombineIntBoxesWithLimit::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.CombineOrientation
// 0x0003 (0x0003 - 0x0000)
struct BrickMathLibrary_CombineOrientation final
{
public:
	EBrickDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickRotation                                Rotation;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_CombineOrientation) == 0x000001, "Wrong alignment on BrickMathLibrary_CombineOrientation");
static_assert(sizeof(BrickMathLibrary_CombineOrientation) == 0x000003, "Wrong size on BrickMathLibrary_CombineOrientation");
static_assert(offsetof(BrickMathLibrary_CombineOrientation, Direction) == 0x000000, "Member 'BrickMathLibrary_CombineOrientation::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_CombineOrientation, Rotation) == 0x000001, "Member 'BrickMathLibrary_CombineOrientation::Rotation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_CombineOrientation, ReturnValue) == 0x000002, "Member 'BrickMathLibrary_CombineOrientation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeDesiredOrientation
// 0x0068 (0x0068 - 0x0000)
struct BrickMathLibrary_ComputeDesiredOrientation final
{
public:
	struct FBrickPlacementPivots                  Pivots;                                            // 0x0000(0x0064)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EBrickDirection                               OtherStudDirection;                                // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAnchorType                              OtherStudType;                                     // 0x0065(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickRotation                                DesiredRotation;                                   // 0x0066(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             ReturnValue;                                       // 0x0067(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ComputeDesiredOrientation) == 0x000004, "Wrong alignment on BrickMathLibrary_ComputeDesiredOrientation");
static_assert(sizeof(BrickMathLibrary_ComputeDesiredOrientation) == 0x000068, "Wrong size on BrickMathLibrary_ComputeDesiredOrientation");
static_assert(offsetof(BrickMathLibrary_ComputeDesiredOrientation, Pivots) == 0x000000, "Member 'BrickMathLibrary_ComputeDesiredOrientation::Pivots' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeDesiredOrientation, OtherStudDirection) == 0x000064, "Member 'BrickMathLibrary_ComputeDesiredOrientation::OtherStudDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeDesiredOrientation, OtherStudType) == 0x000065, "Member 'BrickMathLibrary_ComputeDesiredOrientation::OtherStudType' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeDesiredOrientation, DesiredRotation) == 0x000066, "Member 'BrickMathLibrary_ComputeDesiredOrientation::DesiredRotation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeDesiredOrientation, ReturnValue) == 0x000067, "Member 'BrickMathLibrary_ComputeDesiredOrientation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeExpandedPivot
// 0x0040 (0x0040 - 0x0000)
struct BrickMathLibrary_ComputeExpandedPivot final
{
public:
	struct FIntBox                                Pivot;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntVector                             HalfSize;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               Direction;                                         // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntBox                                OutResult;                                         // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ComputeExpandedPivot) == 0x000004, "Wrong alignment on BrickMathLibrary_ComputeExpandedPivot");
static_assert(sizeof(BrickMathLibrary_ComputeExpandedPivot) == 0x000040, "Wrong size on BrickMathLibrary_ComputeExpandedPivot");
static_assert(offsetof(BrickMathLibrary_ComputeExpandedPivot, Pivot) == 0x000000, "Member 'BrickMathLibrary_ComputeExpandedPivot::Pivot' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeExpandedPivot, HalfSize) == 0x000018, "Member 'BrickMathLibrary_ComputeExpandedPivot::HalfSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeExpandedPivot, Direction) == 0x000024, "Member 'BrickMathLibrary_ComputeExpandedPivot::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeExpandedPivot, OutResult) == 0x000028, "Member 'BrickMathLibrary_ComputeExpandedPivot::OutResult' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeGeneralResizeDraggingStartOffset
// 0x00C0 (0x00C0 - 0x0000)
struct BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset final
{
public:
	struct FTransform                             GridTransform;                                     // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             CurrentCenter;                                     // 0x0060(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             CurrentSize;                                       // 0x006C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayStart;                                          // 0x0078(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayEnd;                                            // 0x0090(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               HandleDirection;                                   // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HandleMargin;                                      // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00B0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0xC];                                       // 0x00B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset) == 0x000010, "Wrong alignment on BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset");
static_assert(sizeof(BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset) == 0x0000C0, "Wrong size on BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset");
static_assert(offsetof(BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset, GridTransform) == 0x000000, "Member 'BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset::GridTransform' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset, CurrentCenter) == 0x000060, "Member 'BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset::CurrentCenter' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset, CurrentSize) == 0x00006C, "Member 'BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset::CurrentSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset, RayStart) == 0x000078, "Member 'BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset::RayStart' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset, RayEnd) == 0x000090, "Member 'BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset::RayEnd' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset, HandleDirection) == 0x0000A8, "Member 'BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset::HandleDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset, HandleMargin) == 0x0000AC, "Member 'BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset::HandleMargin' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset, ReturnValue) == 0x0000B0, "Member 'BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeGridAlignment3D
// 0x0050 (0x0050 - 0x0000)
struct BrickMathLibrary_ComputeGridAlignment3D final
{
public:
	struct FIntVector                             GridOrigin;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             GridCellSize;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             PivotExtent;                                       // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitPosition;                                       // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               AlignmentDirection;                                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0044(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ComputeGridAlignment3D) == 0x000008, "Wrong alignment on BrickMathLibrary_ComputeGridAlignment3D");
static_assert(sizeof(BrickMathLibrary_ComputeGridAlignment3D) == 0x000050, "Wrong size on BrickMathLibrary_ComputeGridAlignment3D");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignment3D, GridOrigin) == 0x000000, "Member 'BrickMathLibrary_ComputeGridAlignment3D::GridOrigin' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignment3D, GridCellSize) == 0x00000C, "Member 'BrickMathLibrary_ComputeGridAlignment3D::GridCellSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignment3D, PivotExtent) == 0x000018, "Member 'BrickMathLibrary_ComputeGridAlignment3D::PivotExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignment3D, HitPosition) == 0x000028, "Member 'BrickMathLibrary_ComputeGridAlignment3D::HitPosition' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignment3D, AlignmentDirection) == 0x000040, "Member 'BrickMathLibrary_ComputeGridAlignment3D::AlignmentDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignment3D, ReturnValue) == 0x000044, "Member 'BrickMathLibrary_ComputeGridAlignment3D::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeGridAlignmentOffset3D
// 0x0050 (0x0050 - 0x0000)
struct BrickMathLibrary_ComputeGridAlignmentOffset3D final
{
public:
	struct FIntVector                             GridOrigin;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             GridCellSize;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             PivotExtent;                                       // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitPosition;                                       // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               AlignmentDirection;                                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0044(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ComputeGridAlignmentOffset3D) == 0x000008, "Wrong alignment on BrickMathLibrary_ComputeGridAlignmentOffset3D");
static_assert(sizeof(BrickMathLibrary_ComputeGridAlignmentOffset3D) == 0x000050, "Wrong size on BrickMathLibrary_ComputeGridAlignmentOffset3D");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignmentOffset3D, GridOrigin) == 0x000000, "Member 'BrickMathLibrary_ComputeGridAlignmentOffset3D::GridOrigin' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignmentOffset3D, GridCellSize) == 0x00000C, "Member 'BrickMathLibrary_ComputeGridAlignmentOffset3D::GridCellSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignmentOffset3D, PivotExtent) == 0x000018, "Member 'BrickMathLibrary_ComputeGridAlignmentOffset3D::PivotExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignmentOffset3D, HitPosition) == 0x000028, "Member 'BrickMathLibrary_ComputeGridAlignmentOffset3D::HitPosition' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignmentOffset3D, AlignmentDirection) == 0x000040, "Member 'BrickMathLibrary_ComputeGridAlignmentOffset3D::AlignmentDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridAlignmentOffset3D, ReturnValue) == 0x000044, "Member 'BrickMathLibrary_ComputeGridAlignmentOffset3D::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeGridOriginBelowPivot
// 0x0040 (0x0040 - 0x0000)
struct BrickMathLibrary_ComputeGridOriginBelowPivot final
{
public:
	struct FIntBox                                Pivot;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntVector                             position;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             GridCellSize;                                      // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             PivotOrientation;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               BottomDirection;                                   // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ComputeGridOriginBelowPivot) == 0x000004, "Wrong alignment on BrickMathLibrary_ComputeGridOriginBelowPivot");
static_assert(sizeof(BrickMathLibrary_ComputeGridOriginBelowPivot) == 0x000040, "Wrong size on BrickMathLibrary_ComputeGridOriginBelowPivot");
static_assert(offsetof(BrickMathLibrary_ComputeGridOriginBelowPivot, Pivot) == 0x000000, "Member 'BrickMathLibrary_ComputeGridOriginBelowPivot::Pivot' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridOriginBelowPivot, position) == 0x000018, "Member 'BrickMathLibrary_ComputeGridOriginBelowPivot::position' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridOriginBelowPivot, GridCellSize) == 0x000024, "Member 'BrickMathLibrary_ComputeGridOriginBelowPivot::GridCellSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridOriginBelowPivot, PivotOrientation) == 0x000030, "Member 'BrickMathLibrary_ComputeGridOriginBelowPivot::PivotOrientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridOriginBelowPivot, BottomDirection) == 0x000031, "Member 'BrickMathLibrary_ComputeGridOriginBelowPivot::BottomDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridOriginBelowPivot, ReturnValue) == 0x000034, "Member 'BrickMathLibrary_ComputeGridOriginBelowPivot::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeGridSideAlignment1D
// 0x0010 (0x0010 - 0x0000)
struct BrickMathLibrary_ComputeGridSideAlignment1D final
{
public:
	int32                                         GridCellSize;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PivotExtent;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitCell;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ComputeGridSideAlignment1D) == 0x000004, "Wrong alignment on BrickMathLibrary_ComputeGridSideAlignment1D");
static_assert(sizeof(BrickMathLibrary_ComputeGridSideAlignment1D) == 0x000010, "Wrong size on BrickMathLibrary_ComputeGridSideAlignment1D");
static_assert(offsetof(BrickMathLibrary_ComputeGridSideAlignment1D, GridCellSize) == 0x000000, "Member 'BrickMathLibrary_ComputeGridSideAlignment1D::GridCellSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridSideAlignment1D, PivotExtent) == 0x000004, "Member 'BrickMathLibrary_ComputeGridSideAlignment1D::PivotExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridSideAlignment1D, HitCell) == 0x000008, "Member 'BrickMathLibrary_ComputeGridSideAlignment1D::HitCell' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridSideAlignment1D, ReturnValue) == 0x00000C, "Member 'BrickMathLibrary_ComputeGridSideAlignment1D::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeGridSideAlignmentOffset1D
// 0x0010 (0x0010 - 0x0000)
struct BrickMathLibrary_ComputeGridSideAlignmentOffset1D final
{
public:
	int32                                         GridCellSize;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PivotExtent;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitCell;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ComputeGridSideAlignmentOffset1D) == 0x000004, "Wrong alignment on BrickMathLibrary_ComputeGridSideAlignmentOffset1D");
static_assert(sizeof(BrickMathLibrary_ComputeGridSideAlignmentOffset1D) == 0x000010, "Wrong size on BrickMathLibrary_ComputeGridSideAlignmentOffset1D");
static_assert(offsetof(BrickMathLibrary_ComputeGridSideAlignmentOffset1D, GridCellSize) == 0x000000, "Member 'BrickMathLibrary_ComputeGridSideAlignmentOffset1D::GridCellSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridSideAlignmentOffset1D, PivotExtent) == 0x000004, "Member 'BrickMathLibrary_ComputeGridSideAlignmentOffset1D::PivotExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridSideAlignmentOffset1D, HitCell) == 0x000008, "Member 'BrickMathLibrary_ComputeGridSideAlignmentOffset1D::HitCell' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridSideAlignmentOffset1D, ReturnValue) == 0x00000C, "Member 'BrickMathLibrary_ComputeGridSideAlignmentOffset1D::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeGridTopAlignment1D
// 0x0010 (0x0010 - 0x0000)
struct BrickMathLibrary_ComputeGridTopAlignment1D final
{
public:
	int32                                         GridCellSize;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitCell;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlignUp;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ComputeGridTopAlignment1D) == 0x000004, "Wrong alignment on BrickMathLibrary_ComputeGridTopAlignment1D");
static_assert(sizeof(BrickMathLibrary_ComputeGridTopAlignment1D) == 0x000010, "Wrong size on BrickMathLibrary_ComputeGridTopAlignment1D");
static_assert(offsetof(BrickMathLibrary_ComputeGridTopAlignment1D, GridCellSize) == 0x000000, "Member 'BrickMathLibrary_ComputeGridTopAlignment1D::GridCellSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridTopAlignment1D, HitCell) == 0x000004, "Member 'BrickMathLibrary_ComputeGridTopAlignment1D::HitCell' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridTopAlignment1D, bAlignUp) == 0x000008, "Member 'BrickMathLibrary_ComputeGridTopAlignment1D::bAlignUp' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridTopAlignment1D, ReturnValue) == 0x00000C, "Member 'BrickMathLibrary_ComputeGridTopAlignment1D::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeGridTopAlignmentOffset1D
// 0x0014 (0x0014 - 0x0000)
struct BrickMathLibrary_ComputeGridTopAlignmentOffset1D final
{
public:
	int32                                         GridCellSize;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PivotExtent;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitCell;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlignUp;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ComputeGridTopAlignmentOffset1D) == 0x000004, "Wrong alignment on BrickMathLibrary_ComputeGridTopAlignmentOffset1D");
static_assert(sizeof(BrickMathLibrary_ComputeGridTopAlignmentOffset1D) == 0x000014, "Wrong size on BrickMathLibrary_ComputeGridTopAlignmentOffset1D");
static_assert(offsetof(BrickMathLibrary_ComputeGridTopAlignmentOffset1D, GridCellSize) == 0x000000, "Member 'BrickMathLibrary_ComputeGridTopAlignmentOffset1D::GridCellSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridTopAlignmentOffset1D, PivotExtent) == 0x000004, "Member 'BrickMathLibrary_ComputeGridTopAlignmentOffset1D::PivotExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridTopAlignmentOffset1D, HitCell) == 0x000008, "Member 'BrickMathLibrary_ComputeGridTopAlignmentOffset1D::HitCell' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridTopAlignmentOffset1D, bAlignUp) == 0x00000C, "Member 'BrickMathLibrary_ComputeGridTopAlignmentOffset1D::bAlignUp' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeGridTopAlignmentOffset1D, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_ComputeGridTopAlignmentOffset1D::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeOptimalGridFromHitResult
// 0x0120 (0x0120 - 0x0000)
struct BrickMathLibrary_ComputeOptimalGridFromHitResult final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UBrickGridComponent*                    OutBrickGrid;                                      // 0x00F8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutGridOrigin;                                     // 0x0100(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutGridCellSize;                                   // 0x010C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               OutStudDirection;                                  // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAnchorType                              OutStudType;                                       // 0x0119(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutHitStuds;                                      // 0x011A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_ComputeOptimalGridFromHitResult) == 0x000008, "Wrong alignment on BrickMathLibrary_ComputeOptimalGridFromHitResult");
static_assert(sizeof(BrickMathLibrary_ComputeOptimalGridFromHitResult) == 0x000120, "Wrong size on BrickMathLibrary_ComputeOptimalGridFromHitResult");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromHitResult, WorldContextObject) == 0x000000, "Member 'BrickMathLibrary_ComputeOptimalGridFromHitResult::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromHitResult, HitResult) == 0x000008, "Member 'BrickMathLibrary_ComputeOptimalGridFromHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromHitResult, OutBrickGrid) == 0x0000F8, "Member 'BrickMathLibrary_ComputeOptimalGridFromHitResult::OutBrickGrid' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromHitResult, OutGridOrigin) == 0x000100, "Member 'BrickMathLibrary_ComputeOptimalGridFromHitResult::OutGridOrigin' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromHitResult, OutGridCellSize) == 0x00010C, "Member 'BrickMathLibrary_ComputeOptimalGridFromHitResult::OutGridCellSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromHitResult, OutStudDirection) == 0x000118, "Member 'BrickMathLibrary_ComputeOptimalGridFromHitResult::OutStudDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromHitResult, OutStudType) == 0x000119, "Member 'BrickMathLibrary_ComputeOptimalGridFromHitResult::OutStudType' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromHitResult, bOutHitStuds) == 0x00011A, "Member 'BrickMathLibrary_ComputeOptimalGridFromHitResult::bOutHitStuds' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeOptimalGridFromStudGroup
// 0x003C (0x003C - 0x0000)
struct BrickMathLibrary_ComputeOptimalGridFromStudGroup final
{
public:
	struct FBrickStudGroup                        Studs;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntVector                             BrickPosition;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             BrickOrientation;                                  // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             OutGridOrigin;                                     // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutGridCellSize;                                   // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               OutStudDirection;                                  // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAnchorType                              OutStudType;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_ComputeOptimalGridFromStudGroup) == 0x000004, "Wrong alignment on BrickMathLibrary_ComputeOptimalGridFromStudGroup");
static_assert(sizeof(BrickMathLibrary_ComputeOptimalGridFromStudGroup) == 0x00003C, "Wrong size on BrickMathLibrary_ComputeOptimalGridFromStudGroup");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromStudGroup, Studs) == 0x000000, "Member 'BrickMathLibrary_ComputeOptimalGridFromStudGroup::Studs' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromStudGroup, BrickPosition) == 0x000010, "Member 'BrickMathLibrary_ComputeOptimalGridFromStudGroup::BrickPosition' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromStudGroup, BrickOrientation) == 0x00001C, "Member 'BrickMathLibrary_ComputeOptimalGridFromStudGroup::BrickOrientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromStudGroup, OutGridOrigin) == 0x000020, "Member 'BrickMathLibrary_ComputeOptimalGridFromStudGroup::OutGridOrigin' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromStudGroup, OutGridCellSize) == 0x00002C, "Member 'BrickMathLibrary_ComputeOptimalGridFromStudGroup::OutGridCellSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromStudGroup, OutStudDirection) == 0x000038, "Member 'BrickMathLibrary_ComputeOptimalGridFromStudGroup::OutStudDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeOptimalGridFromStudGroup, OutStudType) == 0x000039, "Member 'BrickMathLibrary_ComputeOptimalGridFromStudGroup::OutStudType' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputePivotForStudGroup
// 0x002C (0x002C - 0x0000)
struct BrickMathLibrary_ComputePivotForStudGroup final
{
public:
	struct FBrickStudGroup                        Studs;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntBox                                OutPivot;                                          // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBrickDirection                               OutDirection;                                      // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_ComputePivotForStudGroup) == 0x000004, "Wrong alignment on BrickMathLibrary_ComputePivotForStudGroup");
static_assert(sizeof(BrickMathLibrary_ComputePivotForStudGroup) == 0x00002C, "Wrong size on BrickMathLibrary_ComputePivotForStudGroup");
static_assert(offsetof(BrickMathLibrary_ComputePivotForStudGroup, Studs) == 0x000000, "Member 'BrickMathLibrary_ComputePivotForStudGroup::Studs' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputePivotForStudGroup, OutPivot) == 0x000010, "Member 'BrickMathLibrary_ComputePivotForStudGroup::OutPivot' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputePivotForStudGroup, OutDirection) == 0x000028, "Member 'BrickMathLibrary_ComputePivotForStudGroup::OutDirection' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputePivotsForBrickType
// 0x0070 (0x0070 - 0x0000)
struct BrickMathLibrary_ComputePivotsForBrickType final
{
public:
	class UBrickType*                             BrickType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickPlacementPivots                  ReturnValue;                                       // 0x0008(0x0064)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_ComputePivotsForBrickType) == 0x000008, "Wrong alignment on BrickMathLibrary_ComputePivotsForBrickType");
static_assert(sizeof(BrickMathLibrary_ComputePivotsForBrickType) == 0x000070, "Wrong size on BrickMathLibrary_ComputePivotsForBrickType");
static_assert(offsetof(BrickMathLibrary_ComputePivotsForBrickType, BrickType) == 0x000000, "Member 'BrickMathLibrary_ComputePivotsForBrickType::BrickType' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputePivotsForBrickType, ReturnValue) == 0x000008, "Member 'BrickMathLibrary_ComputePivotsForBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputePivotsForEntity
// 0x0070 (0x0070 - 0x0000)
struct BrickMathLibrary_ComputePivotsForEntity final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickPlacementPivots                  ReturnValue;                                       // 0x0008(0x0064)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_ComputePivotsForEntity) == 0x000008, "Wrong alignment on BrickMathLibrary_ComputePivotsForEntity");
static_assert(sizeof(BrickMathLibrary_ComputePivotsForEntity) == 0x000070, "Wrong size on BrickMathLibrary_ComputePivotsForEntity");
static_assert(offsetof(BrickMathLibrary_ComputePivotsForEntity, ENTITY) == 0x000000, "Member 'BrickMathLibrary_ComputePivotsForEntity::ENTITY' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputePivotsForEntity, ReturnValue) == 0x000008, "Member 'BrickMathLibrary_ComputePivotsForEntity::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputePivotsForEntityType
// 0x0070 (0x0070 - 0x0000)
struct BrickMathLibrary_ComputePivotsForEntityType final
{
public:
	class UBREntityTypeBase*                      EntityType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickPlacementPivots                  ReturnValue;                                       // 0x0008(0x0064)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_ComputePivotsForEntityType) == 0x000008, "Wrong alignment on BrickMathLibrary_ComputePivotsForEntityType");
static_assert(sizeof(BrickMathLibrary_ComputePivotsForEntityType) == 0x000070, "Wrong size on BrickMathLibrary_ComputePivotsForEntityType");
static_assert(offsetof(BrickMathLibrary_ComputePivotsForEntityType, EntityType) == 0x000000, "Member 'BrickMathLibrary_ComputePivotsForEntityType::EntityType' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputePivotsForEntityType, ReturnValue) == 0x000008, "Member 'BrickMathLibrary_ComputePivotsForEntityType::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeRowDragging
// 0x00E0 (0x00E0 - 0x0000)
struct BrickMathLibrary_ComputeRowDragging final
{
public:
	struct FTransform                             GridTransform;                                     // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GridRelativeRoot;                                  // 0x0060(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldRayStart;                                     // 0x0078(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldRayDirection;                                 // 0x0090(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OrientedPivotExtent;                               // 0x00A8(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OrientedSpacing;                                   // 0x00B4(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OrientedDragCellExtent;                            // 0x00C0(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowXAxis;                                       // 0x00CC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowYAxis;                                       // 0x00CD(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowZAxis;                                       // 0x00CE(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               OutRowDirection;                                   // 0x00CF(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRowLength;                                      // 0x00D0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0xB];                                       // 0x00D5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_ComputeRowDragging) == 0x000010, "Wrong alignment on BrickMathLibrary_ComputeRowDragging");
static_assert(sizeof(BrickMathLibrary_ComputeRowDragging) == 0x0000E0, "Wrong size on BrickMathLibrary_ComputeRowDragging");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, GridTransform) == 0x000000, "Member 'BrickMathLibrary_ComputeRowDragging::GridTransform' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, GridRelativeRoot) == 0x000060, "Member 'BrickMathLibrary_ComputeRowDragging::GridRelativeRoot' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, WorldRayStart) == 0x000078, "Member 'BrickMathLibrary_ComputeRowDragging::WorldRayStart' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, WorldRayDirection) == 0x000090, "Member 'BrickMathLibrary_ComputeRowDragging::WorldRayDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, OrientedPivotExtent) == 0x0000A8, "Member 'BrickMathLibrary_ComputeRowDragging::OrientedPivotExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, OrientedSpacing) == 0x0000B4, "Member 'BrickMathLibrary_ComputeRowDragging::OrientedSpacing' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, OrientedDragCellExtent) == 0x0000C0, "Member 'BrickMathLibrary_ComputeRowDragging::OrientedDragCellExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, bAllowXAxis) == 0x0000CC, "Member 'BrickMathLibrary_ComputeRowDragging::bAllowXAxis' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, bAllowYAxis) == 0x0000CD, "Member 'BrickMathLibrary_ComputeRowDragging::bAllowYAxis' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, bAllowZAxis) == 0x0000CE, "Member 'BrickMathLibrary_ComputeRowDragging::bAllowZAxis' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, OutRowDirection) == 0x0000CF, "Member 'BrickMathLibrary_ComputeRowDragging::OutRowDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, OutRowLength) == 0x0000D0, "Member 'BrickMathLibrary_ComputeRowDragging::OutRowLength' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDragging, ReturnValue) == 0x0000D4, "Member 'BrickMathLibrary_ComputeRowDragging::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeRowDraggingV2
// 0x0100 (0x0100 - 0x0000)
struct BrickMathLibrary_ComputeRowDraggingV2 final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GridTransform;                                     // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GridRelativeRoot;                                  // 0x0070(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldRayStart;                                     // 0x0088(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldRayDirection;                                 // 0x00A0(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x00B8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OrientedPivotExtent;                               // 0x00C8(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OrientedSpacing;                                   // 0x00D4(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OrientedDragCellExtent;                            // 0x00E0(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowXAxis;                                       // 0x00EC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowYAxis;                                       // 0x00ED(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowZAxis;                                       // 0x00EE(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               OutRowDirection;                                   // 0x00EF(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRowLength;                                      // 0x00F0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0xB];                                       // 0x00F5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_ComputeRowDraggingV2) == 0x000010, "Wrong alignment on BrickMathLibrary_ComputeRowDraggingV2");
static_assert(sizeof(BrickMathLibrary_ComputeRowDraggingV2) == 0x000100, "Wrong size on BrickMathLibrary_ComputeRowDraggingV2");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, PlayerController) == 0x000000, "Member 'BrickMathLibrary_ComputeRowDraggingV2::PlayerController' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, GridTransform) == 0x000010, "Member 'BrickMathLibrary_ComputeRowDraggingV2::GridTransform' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, GridRelativeRoot) == 0x000070, "Member 'BrickMathLibrary_ComputeRowDraggingV2::GridRelativeRoot' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, WorldRayStart) == 0x000088, "Member 'BrickMathLibrary_ComputeRowDraggingV2::WorldRayStart' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, WorldRayDirection) == 0x0000A0, "Member 'BrickMathLibrary_ComputeRowDraggingV2::WorldRayDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, ScreenPosition) == 0x0000B8, "Member 'BrickMathLibrary_ComputeRowDraggingV2::ScreenPosition' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, OrientedPivotExtent) == 0x0000C8, "Member 'BrickMathLibrary_ComputeRowDraggingV2::OrientedPivotExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, OrientedSpacing) == 0x0000D4, "Member 'BrickMathLibrary_ComputeRowDraggingV2::OrientedSpacing' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, OrientedDragCellExtent) == 0x0000E0, "Member 'BrickMathLibrary_ComputeRowDraggingV2::OrientedDragCellExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, bAllowXAxis) == 0x0000EC, "Member 'BrickMathLibrary_ComputeRowDraggingV2::bAllowXAxis' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, bAllowYAxis) == 0x0000ED, "Member 'BrickMathLibrary_ComputeRowDraggingV2::bAllowYAxis' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, bAllowZAxis) == 0x0000EE, "Member 'BrickMathLibrary_ComputeRowDraggingV2::bAllowZAxis' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, OutRowDirection) == 0x0000EF, "Member 'BrickMathLibrary_ComputeRowDraggingV2::OutRowDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, OutRowLength) == 0x0000F0, "Member 'BrickMathLibrary_ComputeRowDraggingV2::OutRowLength' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowDraggingV2, ReturnValue) == 0x0000F4, "Member 'BrickMathLibrary_ComputeRowDraggingV2::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ComputeRowEndPositions
// 0x0050 (0x0050 - 0x0000)
struct BrickMathLibrary_ComputeRowEndPositions final
{
public:
	struct FIntVector                             OriginPosition;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OrientedPivotExtent;                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OrientedSpacing;                                   // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OrientedDragCellExtent;                            // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               RowDirection;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RowLength;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutRowStartPosition;                               // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutRowEndPosition;                                 // 0x0044(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ComputeRowEndPositions) == 0x000004, "Wrong alignment on BrickMathLibrary_ComputeRowEndPositions");
static_assert(sizeof(BrickMathLibrary_ComputeRowEndPositions) == 0x000050, "Wrong size on BrickMathLibrary_ComputeRowEndPositions");
static_assert(offsetof(BrickMathLibrary_ComputeRowEndPositions, OriginPosition) == 0x000000, "Member 'BrickMathLibrary_ComputeRowEndPositions::OriginPosition' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowEndPositions, OrientedPivotExtent) == 0x00000C, "Member 'BrickMathLibrary_ComputeRowEndPositions::OrientedPivotExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowEndPositions, OrientedSpacing) == 0x000018, "Member 'BrickMathLibrary_ComputeRowEndPositions::OrientedSpacing' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowEndPositions, OrientedDragCellExtent) == 0x000024, "Member 'BrickMathLibrary_ComputeRowEndPositions::OrientedDragCellExtent' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowEndPositions, RowDirection) == 0x000030, "Member 'BrickMathLibrary_ComputeRowEndPositions::RowDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowEndPositions, RowLength) == 0x000034, "Member 'BrickMathLibrary_ComputeRowEndPositions::RowLength' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowEndPositions, OutRowStartPosition) == 0x000038, "Member 'BrickMathLibrary_ComputeRowEndPositions::OutRowStartPosition' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ComputeRowEndPositions, OutRowEndPosition) == 0x000044, "Member 'BrickMathLibrary_ComputeRowEndPositions::OutRowEndPosition' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.FindOptimalPlacement
// 0x0058 (0x0058 - 0x0000)
struct BrickMathLibrary_FindOptimalPlacement final
{
public:
	class UBrickGridComponent*                    TargetGrid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickType*                             BrickType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               Direction;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickRotation                                Rotation;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0048(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_FindOptimalPlacement) == 0x000008, "Wrong alignment on BrickMathLibrary_FindOptimalPlacement");
static_assert(sizeof(BrickMathLibrary_FindOptimalPlacement) == 0x000058, "Wrong size on BrickMathLibrary_FindOptimalPlacement");
static_assert(offsetof(BrickMathLibrary_FindOptimalPlacement, TargetGrid) == 0x000000, "Member 'BrickMathLibrary_FindOptimalPlacement::TargetGrid' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_FindOptimalPlacement, BrickType) == 0x000008, "Member 'BrickMathLibrary_FindOptimalPlacement::BrickType' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_FindOptimalPlacement, Direction) == 0x000010, "Member 'BrickMathLibrary_FindOptimalPlacement::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_FindOptimalPlacement, Rotation) == 0x000011, "Member 'BrickMathLibrary_FindOptimalPlacement::Rotation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_FindOptimalPlacement, HitLocation) == 0x000018, "Member 'BrickMathLibrary_FindOptimalPlacement::HitLocation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_FindOptimalPlacement, HitNormal) == 0x000030, "Member 'BrickMathLibrary_FindOptimalPlacement::HitNormal' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_FindOptimalPlacement, ReturnValue) == 0x000048, "Member 'BrickMathLibrary_FindOptimalPlacement::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.FlipDirection
// 0x0002 (0x0002 - 0x0000)
struct BrickMathLibrary_FlipDirection final
{
public:
	EBrickDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_FlipDirection) == 0x000001, "Wrong alignment on BrickMathLibrary_FlipDirection");
static_assert(sizeof(BrickMathLibrary_FlipDirection) == 0x000002, "Wrong size on BrickMathLibrary_FlipDirection");
static_assert(offsetof(BrickMathLibrary_FlipDirection, Direction) == 0x000000, "Member 'BrickMathLibrary_FlipDirection::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_FlipDirection, ReturnValue) == 0x000001, "Member 'BrickMathLibrary_FlipDirection::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.FlipRotation
// 0x0002 (0x0002 - 0x0000)
struct BrickMathLibrary_FlipRotation final
{
public:
	EBrickRotation                                Rotation;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickRotation                                ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_FlipRotation) == 0x000001, "Wrong alignment on BrickMathLibrary_FlipRotation");
static_assert(sizeof(BrickMathLibrary_FlipRotation) == 0x000002, "Wrong size on BrickMathLibrary_FlipRotation");
static_assert(offsetof(BrickMathLibrary_FlipRotation, Rotation) == 0x000000, "Member 'BrickMathLibrary_FlipRotation::Rotation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_FlipRotation, ReturnValue) == 0x000001, "Member 'BrickMathLibrary_FlipRotation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetAxisIntVector
// 0x0010 (0x0010 - 0x0000)
struct BrickMathLibrary_GetAxisIntVector final
{
public:
	EBrickAxis                                    Axis;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetAxisIntVector) == 0x000004, "Wrong alignment on BrickMathLibrary_GetAxisIntVector");
static_assert(sizeof(BrickMathLibrary_GetAxisIntVector) == 0x000010, "Wrong size on BrickMathLibrary_GetAxisIntVector");
static_assert(offsetof(BrickMathLibrary_GetAxisIntVector, Axis) == 0x000000, "Member 'BrickMathLibrary_GetAxisIntVector::Axis' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetAxisIntVector, ReturnValue) == 0x000004, "Member 'BrickMathLibrary_GetAxisIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetAxisNegativeDirection
// 0x0002 (0x0002 - 0x0000)
struct BrickMathLibrary_GetAxisNegativeDirection final
{
public:
	EBrickAxis                                    Axis;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetAxisNegativeDirection) == 0x000001, "Wrong alignment on BrickMathLibrary_GetAxisNegativeDirection");
static_assert(sizeof(BrickMathLibrary_GetAxisNegativeDirection) == 0x000002, "Wrong size on BrickMathLibrary_GetAxisNegativeDirection");
static_assert(offsetof(BrickMathLibrary_GetAxisNegativeDirection, Axis) == 0x000000, "Member 'BrickMathLibrary_GetAxisNegativeDirection::Axis' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetAxisNegativeDirection, ReturnValue) == 0x000001, "Member 'BrickMathLibrary_GetAxisNegativeDirection::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetAxisPositiveDirection
// 0x0002 (0x0002 - 0x0000)
struct BrickMathLibrary_GetAxisPositiveDirection final
{
public:
	EBrickAxis                                    Axis;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetAxisPositiveDirection) == 0x000001, "Wrong alignment on BrickMathLibrary_GetAxisPositiveDirection");
static_assert(sizeof(BrickMathLibrary_GetAxisPositiveDirection) == 0x000002, "Wrong size on BrickMathLibrary_GetAxisPositiveDirection");
static_assert(offsetof(BrickMathLibrary_GetAxisPositiveDirection, Axis) == 0x000000, "Member 'BrickMathLibrary_GetAxisPositiveDirection::Axis' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetAxisPositiveDirection, ReturnValue) == 0x000001, "Member 'BrickMathLibrary_GetAxisPositiveDirection::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetAxisVector
// 0x0020 (0x0020 - 0x0000)
struct BrickMathLibrary_GetAxisVector final
{
public:
	EBrickAxis                                    Axis;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetAxisVector) == 0x000008, "Wrong alignment on BrickMathLibrary_GetAxisVector");
static_assert(sizeof(BrickMathLibrary_GetAxisVector) == 0x000020, "Wrong size on BrickMathLibrary_GetAxisVector");
static_assert(offsetof(BrickMathLibrary_GetAxisVector, Axis) == 0x000000, "Member 'BrickMathLibrary_GetAxisVector::Axis' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetAxisVector, ReturnValue) == 0x000008, "Member 'BrickMathLibrary_GetAxisVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetDirectionAxis
// 0x0002 (0x0002 - 0x0000)
struct BrickMathLibrary_GetDirectionAxis final
{
public:
	EBrickDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAxis                                    ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetDirectionAxis) == 0x000001, "Wrong alignment on BrickMathLibrary_GetDirectionAxis");
static_assert(sizeof(BrickMathLibrary_GetDirectionAxis) == 0x000002, "Wrong size on BrickMathLibrary_GetDirectionAxis");
static_assert(offsetof(BrickMathLibrary_GetDirectionAxis, Direction) == 0x000000, "Member 'BrickMathLibrary_GetDirectionAxis::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetDirectionAxis, ReturnValue) == 0x000001, "Member 'BrickMathLibrary_GetDirectionAxis::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetDirectionIntVector
// 0x0010 (0x0010 - 0x0000)
struct BrickMathLibrary_GetDirectionIntVector final
{
public:
	EBrickDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetDirectionIntVector) == 0x000004, "Wrong alignment on BrickMathLibrary_GetDirectionIntVector");
static_assert(sizeof(BrickMathLibrary_GetDirectionIntVector) == 0x000010, "Wrong size on BrickMathLibrary_GetDirectionIntVector");
static_assert(offsetof(BrickMathLibrary_GetDirectionIntVector, Direction) == 0x000000, "Member 'BrickMathLibrary_GetDirectionIntVector::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetDirectionIntVector, ReturnValue) == 0x000004, "Member 'BrickMathLibrary_GetDirectionIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetDirectionQuat
// 0x0030 (0x0030 - 0x0000)
struct BrickMathLibrary_GetDirectionQuat final
{
public:
	EBrickDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetDirectionQuat) == 0x000010, "Wrong alignment on BrickMathLibrary_GetDirectionQuat");
static_assert(sizeof(BrickMathLibrary_GetDirectionQuat) == 0x000030, "Wrong size on BrickMathLibrary_GetDirectionQuat");
static_assert(offsetof(BrickMathLibrary_GetDirectionQuat, Direction) == 0x000000, "Member 'BrickMathLibrary_GetDirectionQuat::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetDirectionQuat, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_GetDirectionQuat::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetDirectionRotator
// 0x0020 (0x0020 - 0x0000)
struct BrickMathLibrary_GetDirectionRotator final
{
public:
	EBrickDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetDirectionRotator) == 0x000008, "Wrong alignment on BrickMathLibrary_GetDirectionRotator");
static_assert(sizeof(BrickMathLibrary_GetDirectionRotator) == 0x000020, "Wrong size on BrickMathLibrary_GetDirectionRotator");
static_assert(offsetof(BrickMathLibrary_GetDirectionRotator, Direction) == 0x000000, "Member 'BrickMathLibrary_GetDirectionRotator::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetDirectionRotator, ReturnValue) == 0x000008, "Member 'BrickMathLibrary_GetDirectionRotator::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetDirectionSign
// 0x0008 (0x0008 - 0x0000)
struct BrickMathLibrary_GetDirectionSign final
{
public:
	EBrickDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetDirectionSign) == 0x000004, "Wrong alignment on BrickMathLibrary_GetDirectionSign");
static_assert(sizeof(BrickMathLibrary_GetDirectionSign) == 0x000008, "Wrong size on BrickMathLibrary_GetDirectionSign");
static_assert(offsetof(BrickMathLibrary_GetDirectionSign, Direction) == 0x000000, "Member 'BrickMathLibrary_GetDirectionSign::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetDirectionSign, ReturnValue) == 0x000004, "Member 'BrickMathLibrary_GetDirectionSign::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetDirectionVector
// 0x0020 (0x0020 - 0x0000)
struct BrickMathLibrary_GetDirectionVector final
{
public:
	EBrickDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetDirectionVector) == 0x000008, "Wrong alignment on BrickMathLibrary_GetDirectionVector");
static_assert(sizeof(BrickMathLibrary_GetDirectionVector) == 0x000020, "Wrong size on BrickMathLibrary_GetDirectionVector");
static_assert(offsetof(BrickMathLibrary_GetDirectionVector, Direction) == 0x000000, "Member 'BrickMathLibrary_GetDirectionVector::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetDirectionVector, ReturnValue) == 0x000008, "Member 'BrickMathLibrary_GetDirectionVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetIntVectorAxisValue
// 0x0014 (0x0014 - 0x0000)
struct BrickMathLibrary_GetIntVectorAxisValue final
{
public:
	struct FIntVector                             Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               AxisDirection;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetIntVectorAxisValue) == 0x000004, "Wrong alignment on BrickMathLibrary_GetIntVectorAxisValue");
static_assert(sizeof(BrickMathLibrary_GetIntVectorAxisValue) == 0x000014, "Wrong size on BrickMathLibrary_GetIntVectorAxisValue");
static_assert(offsetof(BrickMathLibrary_GetIntVectorAxisValue, Vector) == 0x000000, "Member 'BrickMathLibrary_GetIntVectorAxisValue::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetIntVectorAxisValue, AxisDirection) == 0x00000C, "Member 'BrickMathLibrary_GetIntVectorAxisValue::AxisDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetIntVectorAxisValue, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_GetIntVectorAxisValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetLargestComponentNormal
// 0x0030 (0x0030 - 0x0000)
struct BrickMathLibrary_GetLargestComponentNormal final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetLargestComponentNormal) == 0x000008, "Wrong alignment on BrickMathLibrary_GetLargestComponentNormal");
static_assert(sizeof(BrickMathLibrary_GetLargestComponentNormal) == 0x000030, "Wrong size on BrickMathLibrary_GetLargestComponentNormal");
static_assert(offsetof(BrickMathLibrary_GetLargestComponentNormal, Vector) == 0x000000, "Member 'BrickMathLibrary_GetLargestComponentNormal::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetLargestComponentNormal, ReturnValue) == 0x000018, "Member 'BrickMathLibrary_GetLargestComponentNormal::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetLargestComponentVector
// 0x0030 (0x0030 - 0x0000)
struct BrickMathLibrary_GetLargestComponentVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetLargestComponentVector) == 0x000008, "Wrong alignment on BrickMathLibrary_GetLargestComponentVector");
static_assert(sizeof(BrickMathLibrary_GetLargestComponentVector) == 0x000030, "Wrong size on BrickMathLibrary_GetLargestComponentVector");
static_assert(offsetof(BrickMathLibrary_GetLargestComponentVector, Vector) == 0x000000, "Member 'BrickMathLibrary_GetLargestComponentVector::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetLargestComponentVector, ReturnValue) == 0x000018, "Member 'BrickMathLibrary_GetLargestComponentVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetNearestDirection
// 0x0020 (0x0020 - 0x0000)
struct BrickMathLibrary_GetNearestDirection final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_GetNearestDirection) == 0x000008, "Wrong alignment on BrickMathLibrary_GetNearestDirection");
static_assert(sizeof(BrickMathLibrary_GetNearestDirection) == 0x000020, "Wrong size on BrickMathLibrary_GetNearestDirection");
static_assert(offsetof(BrickMathLibrary_GetNearestDirection, Vector) == 0x000000, "Member 'BrickMathLibrary_GetNearestDirection::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetNearestDirection, ReturnValue) == 0x000018, "Member 'BrickMathLibrary_GetNearestDirection::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetNearestDirectionIgnoringZ
// 0x0020 (0x0020 - 0x0000)
struct BrickMathLibrary_GetNearestDirectionIgnoringZ final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_GetNearestDirectionIgnoringZ) == 0x000008, "Wrong alignment on BrickMathLibrary_GetNearestDirectionIgnoringZ");
static_assert(sizeof(BrickMathLibrary_GetNearestDirectionIgnoringZ) == 0x000020, "Wrong size on BrickMathLibrary_GetNearestDirectionIgnoringZ");
static_assert(offsetof(BrickMathLibrary_GetNearestDirectionIgnoringZ, Vector) == 0x000000, "Member 'BrickMathLibrary_GetNearestDirectionIgnoringZ::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetNearestDirectionIgnoringZ, ReturnValue) == 0x000018, "Member 'BrickMathLibrary_GetNearestDirectionIgnoringZ::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetNearestDirectionIntVector
// 0x0028 (0x0028 - 0x0000)
struct BrickMathLibrary_GetNearestDirectionIntVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreZ;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetNearestDirectionIntVector) == 0x000008, "Wrong alignment on BrickMathLibrary_GetNearestDirectionIntVector");
static_assert(sizeof(BrickMathLibrary_GetNearestDirectionIntVector) == 0x000028, "Wrong size on BrickMathLibrary_GetNearestDirectionIntVector");
static_assert(offsetof(BrickMathLibrary_GetNearestDirectionIntVector, Vector) == 0x000000, "Member 'BrickMathLibrary_GetNearestDirectionIntVector::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetNearestDirectionIntVector, bIgnoreZ) == 0x000018, "Member 'BrickMathLibrary_GetNearestDirectionIntVector::bIgnoreZ' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetNearestDirectionIntVector, ReturnValue) == 0x00001C, "Member 'BrickMathLibrary_GetNearestDirectionIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetNearestDirectionVector
// 0x0038 (0x0038 - 0x0000)
struct BrickMathLibrary_GetNearestDirectionVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreZ;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetNearestDirectionVector) == 0x000008, "Wrong alignment on BrickMathLibrary_GetNearestDirectionVector");
static_assert(sizeof(BrickMathLibrary_GetNearestDirectionVector) == 0x000038, "Wrong size on BrickMathLibrary_GetNearestDirectionVector");
static_assert(offsetof(BrickMathLibrary_GetNearestDirectionVector, Vector) == 0x000000, "Member 'BrickMathLibrary_GetNearestDirectionVector::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetNearestDirectionVector, bIgnoreZ) == 0x000018, "Member 'BrickMathLibrary_GetNearestDirectionVector::bIgnoreZ' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetNearestDirectionVector, ReturnValue) == 0x000020, "Member 'BrickMathLibrary_GetNearestDirectionVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetNearestRotation
// 0x0018 (0x0018 - 0x0000)
struct BrickMathLibrary_GetNearestRotation final
{
public:
	struct FVector2D                              Vector2D;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickRotation                                ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_GetNearestRotation) == 0x000008, "Wrong alignment on BrickMathLibrary_GetNearestRotation");
static_assert(sizeof(BrickMathLibrary_GetNearestRotation) == 0x000018, "Wrong size on BrickMathLibrary_GetNearestRotation");
static_assert(offsetof(BrickMathLibrary_GetNearestRotation, Vector2D) == 0x000000, "Member 'BrickMathLibrary_GetNearestRotation::Vector2D' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetNearestRotation, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_GetNearestRotation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetOptimalBoxViewDistance
// 0x0048 (0x0048 - 0x0000)
struct BrickMathLibrary_GetOptimalBoxViewDistance final
{
public:
	float                                         InFOVDegrees;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   Box;                                               // 0x0008(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_GetOptimalBoxViewDistance) == 0x000008, "Wrong alignment on BrickMathLibrary_GetOptimalBoxViewDistance");
static_assert(sizeof(BrickMathLibrary_GetOptimalBoxViewDistance) == 0x000048, "Wrong size on BrickMathLibrary_GetOptimalBoxViewDistance");
static_assert(offsetof(BrickMathLibrary_GetOptimalBoxViewDistance, InFOVDegrees) == 0x000000, "Member 'BrickMathLibrary_GetOptimalBoxViewDistance::InFOVDegrees' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetOptimalBoxViewDistance, Box) == 0x000008, "Member 'BrickMathLibrary_GetOptimalBoxViewDistance::Box' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetOptimalBoxViewDistance, ReturnValue) == 0x000040, "Member 'BrickMathLibrary_GetOptimalBoxViewDistance::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetOrientationFromQuat
// 0x0030 (0x0030 - 0x0000)
struct BrickMathLibrary_GetOrientationFromQuat final
{
public:
	struct FQuat                                  Quat;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_GetOrientationFromQuat) == 0x000010, "Wrong alignment on BrickMathLibrary_GetOrientationFromQuat");
static_assert(sizeof(BrickMathLibrary_GetOrientationFromQuat) == 0x000030, "Wrong size on BrickMathLibrary_GetOrientationFromQuat");
static_assert(offsetof(BrickMathLibrary_GetOrientationFromQuat, Quat) == 0x000000, "Member 'BrickMathLibrary_GetOrientationFromQuat::Quat' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetOrientationFromQuat, ReturnValue) == 0x000020, "Member 'BrickMathLibrary_GetOrientationFromQuat::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetOrientationFromRotator
// 0x0020 (0x0020 - 0x0000)
struct BrickMathLibrary_GetOrientationFromRotator final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBrickOrientation                             ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_GetOrientationFromRotator) == 0x000008, "Wrong alignment on BrickMathLibrary_GetOrientationFromRotator");
static_assert(sizeof(BrickMathLibrary_GetOrientationFromRotator) == 0x000020, "Wrong size on BrickMathLibrary_GetOrientationFromRotator");
static_assert(offsetof(BrickMathLibrary_GetOrientationFromRotator, Rotator) == 0x000000, "Member 'BrickMathLibrary_GetOrientationFromRotator::Rotator' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetOrientationFromRotator, ReturnValue) == 0x000018, "Member 'BrickMathLibrary_GetOrientationFromRotator::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetOrientationQuat
// 0x0030 (0x0030 - 0x0000)
struct BrickMathLibrary_GetOrientationQuat final
{
public:
	EBrickOrientation                             Orientation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetOrientationQuat) == 0x000010, "Wrong alignment on BrickMathLibrary_GetOrientationQuat");
static_assert(sizeof(BrickMathLibrary_GetOrientationQuat) == 0x000030, "Wrong size on BrickMathLibrary_GetOrientationQuat");
static_assert(offsetof(BrickMathLibrary_GetOrientationQuat, Orientation) == 0x000000, "Member 'BrickMathLibrary_GetOrientationQuat::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetOrientationQuat, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_GetOrientationQuat::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetOrientationRotator
// 0x0020 (0x0020 - 0x0000)
struct BrickMathLibrary_GetOrientationRotator final
{
public:
	EBrickOrientation                             Orientation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetOrientationRotator) == 0x000008, "Wrong alignment on BrickMathLibrary_GetOrientationRotator");
static_assert(sizeof(BrickMathLibrary_GetOrientationRotator) == 0x000020, "Wrong size on BrickMathLibrary_GetOrientationRotator");
static_assert(offsetof(BrickMathLibrary_GetOrientationRotator, Orientation) == 0x000000, "Member 'BrickMathLibrary_GetOrientationRotator::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetOrientationRotator, ReturnValue) == 0x000008, "Member 'BrickMathLibrary_GetOrientationRotator::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetPlaneFromIntVector
// 0x0030 (0x0030 - 0x0000)
struct BrickMathLibrary_GetPlaneFromIntVector final
{
public:
	struct FIntVector                             Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               Direction;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlane                                 ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetPlaneFromIntVector) == 0x000010, "Wrong alignment on BrickMathLibrary_GetPlaneFromIntVector");
static_assert(sizeof(BrickMathLibrary_GetPlaneFromIntVector) == 0x000030, "Wrong size on BrickMathLibrary_GetPlaneFromIntVector");
static_assert(offsetof(BrickMathLibrary_GetPlaneFromIntVector, Origin) == 0x000000, "Member 'BrickMathLibrary_GetPlaneFromIntVector::Origin' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetPlaneFromIntVector, Direction) == 0x00000C, "Member 'BrickMathLibrary_GetPlaneFromIntVector::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetPlaneFromIntVector, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_GetPlaneFromIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetPointDistanceToBoxFrame
// 0x0058 (0x0058 - 0x0000)
struct BrickMathLibrary_GetPointDistanceToBoxFrame final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_GetPointDistanceToBoxFrame) == 0x000008, "Wrong alignment on BrickMathLibrary_GetPointDistanceToBoxFrame");
static_assert(sizeof(BrickMathLibrary_GetPointDistanceToBoxFrame) == 0x000058, "Wrong size on BrickMathLibrary_GetPointDistanceToBoxFrame");
static_assert(offsetof(BrickMathLibrary_GetPointDistanceToBoxFrame, Box) == 0x000000, "Member 'BrickMathLibrary_GetPointDistanceToBoxFrame::Box' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetPointDistanceToBoxFrame, Point) == 0x000038, "Member 'BrickMathLibrary_GetPointDistanceToBoxFrame::Point' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetPointDistanceToBoxFrame, ReturnValue) == 0x000050, "Member 'BrickMathLibrary_GetPointDistanceToBoxFrame::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetRemainingAxis
// 0x0003 (0x0003 - 0x0000)
struct BrickMathLibrary_GetRemainingAxis final
{
public:
	EBrickAxis                                    AxisA;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAxis                                    AxisB;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAxis                                    ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetRemainingAxis) == 0x000001, "Wrong alignment on BrickMathLibrary_GetRemainingAxis");
static_assert(sizeof(BrickMathLibrary_GetRemainingAxis) == 0x000003, "Wrong size on BrickMathLibrary_GetRemainingAxis");
static_assert(offsetof(BrickMathLibrary_GetRemainingAxis, AxisA) == 0x000000, "Member 'BrickMathLibrary_GetRemainingAxis::AxisA' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetRemainingAxis, AxisB) == 0x000001, "Member 'BrickMathLibrary_GetRemainingAxis::AxisB' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetRemainingAxis, ReturnValue) == 0x000002, "Member 'BrickMathLibrary_GetRemainingAxis::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetRotationQuat
// 0x0030 (0x0030 - 0x0000)
struct BrickMathLibrary_GetRotationQuat final
{
public:
	EBrickRotation                                Rotation;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetRotationQuat) == 0x000010, "Wrong alignment on BrickMathLibrary_GetRotationQuat");
static_assert(sizeof(BrickMathLibrary_GetRotationQuat) == 0x000030, "Wrong size on BrickMathLibrary_GetRotationQuat");
static_assert(offsetof(BrickMathLibrary_GetRotationQuat, Rotation) == 0x000000, "Member 'BrickMathLibrary_GetRotationQuat::Rotation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetRotationQuat, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_GetRotationQuat::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetRotationRotator
// 0x0020 (0x0020 - 0x0000)
struct BrickMathLibrary_GetRotationRotator final
{
public:
	EBrickRotation                                Rotation;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetRotationRotator) == 0x000008, "Wrong alignment on BrickMathLibrary_GetRotationRotator");
static_assert(sizeof(BrickMathLibrary_GetRotationRotator) == 0x000020, "Wrong size on BrickMathLibrary_GetRotationRotator");
static_assert(offsetof(BrickMathLibrary_GetRotationRotator, Rotation) == 0x000000, "Member 'BrickMathLibrary_GetRotationRotator::Rotation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetRotationRotator, ReturnValue) == 0x000008, "Member 'BrickMathLibrary_GetRotationRotator::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetRowEndOffset
// 0x0028 (0x0028 - 0x0000)
struct BrickMathLibrary_GetRowEndOffset final
{
public:
	EBrickDirection                               RowDirection;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RowLength;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowSpacing;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             BrickSize;                                         // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             BrickOrientation;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetRowEndOffset) == 0x000004, "Wrong alignment on BrickMathLibrary_GetRowEndOffset");
static_assert(sizeof(BrickMathLibrary_GetRowEndOffset) == 0x000028, "Wrong size on BrickMathLibrary_GetRowEndOffset");
static_assert(offsetof(BrickMathLibrary_GetRowEndOffset, RowDirection) == 0x000000, "Member 'BrickMathLibrary_GetRowEndOffset::RowDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetRowEndOffset, RowLength) == 0x000004, "Member 'BrickMathLibrary_GetRowEndOffset::RowLength' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetRowEndOffset, RowSpacing) == 0x000008, "Member 'BrickMathLibrary_GetRowEndOffset::RowSpacing' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetRowEndOffset, BrickSize) == 0x00000C, "Member 'BrickMathLibrary_GetRowEndOffset::BrickSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetRowEndOffset, BrickOrientation) == 0x000018, "Member 'BrickMathLibrary_GetRowEndOffset::BrickOrientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetRowEndOffset, ReturnValue) == 0x00001C, "Member 'BrickMathLibrary_GetRowEndOffset::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.GetWorldTransform
// 0x0070 (0x0070 - 0x0000)
struct BrickMathLibrary_GetWorldTransform final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_GetWorldTransform) == 0x000010, "Wrong alignment on BrickMathLibrary_GetWorldTransform");
static_assert(sizeof(BrickMathLibrary_GetWorldTransform) == 0x000070, "Wrong size on BrickMathLibrary_GetWorldTransform");
static_assert(offsetof(BrickMathLibrary_GetWorldTransform, BrickHandle) == 0x000000, "Member 'BrickMathLibrary_GetWorldTransform::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_GetWorldTransform, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_GetWorldTransform::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.HandleGeneralResizeDragging
// 0x0100 (0x0100 - 0x0000)
struct BrickMathLibrary_HandleGeneralResizeDragging final
{
public:
	struct FTransform                             GridTransform;                                     // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             CurrentCenter;                                     // 0x0060(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             CurrentSize;                                       // 0x006C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             MinSize;                                           // 0x0078(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             MaxSize;                                           // 0x0084(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             GridIncrements;                                    // 0x0090(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RayStart;                                          // 0x00A0(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayEnd;                                            // 0x00B8(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               HandleDirection;                                   // 0x00D0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HandleMargin;                                      // 0x00D4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x00D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutNewCenter;                                      // 0x00DC(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutNewSize;                                        // 0x00E8(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0xB];                                       // 0x00F5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickMathLibrary_HandleGeneralResizeDragging) == 0x000010, "Wrong alignment on BrickMathLibrary_HandleGeneralResizeDragging");
static_assert(sizeof(BrickMathLibrary_HandleGeneralResizeDragging) == 0x000100, "Wrong size on BrickMathLibrary_HandleGeneralResizeDragging");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, GridTransform) == 0x000000, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::GridTransform' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, CurrentCenter) == 0x000060, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::CurrentCenter' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, CurrentSize) == 0x00006C, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::CurrentSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, MinSize) == 0x000078, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::MinSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, MaxSize) == 0x000084, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::MaxSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, GridIncrements) == 0x000090, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::GridIncrements' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, RayStart) == 0x0000A0, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::RayStart' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, RayEnd) == 0x0000B8, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::RayEnd' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, HandleDirection) == 0x0000D0, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::HandleDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, HandleMargin) == 0x0000D4, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::HandleMargin' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, StartOffset) == 0x0000D8, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::StartOffset' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, OutNewCenter) == 0x0000DC, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::OutNewCenter' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, OutNewSize) == 0x0000E8, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::OutNewSize' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_HandleGeneralResizeDragging, ReturnValue) == 0x0000F4, "Member 'BrickMathLibrary_HandleGeneralResizeDragging::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.InverseMultiplyOrientation
// 0x0003 (0x0003 - 0x0000)
struct BrickMathLibrary_InverseMultiplyOrientation final
{
public:
	EBrickOrientation                             OrientationA;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             OrientationB;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_InverseMultiplyOrientation) == 0x000001, "Wrong alignment on BrickMathLibrary_InverseMultiplyOrientation");
static_assert(sizeof(BrickMathLibrary_InverseMultiplyOrientation) == 0x000003, "Wrong size on BrickMathLibrary_InverseMultiplyOrientation");
static_assert(offsetof(BrickMathLibrary_InverseMultiplyOrientation, OrientationA) == 0x000000, "Member 'BrickMathLibrary_InverseMultiplyOrientation::OrientationA' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_InverseMultiplyOrientation, OrientationB) == 0x000001, "Member 'BrickMathLibrary_InverseMultiplyOrientation::OrientationB' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_InverseMultiplyOrientation, ReturnValue) == 0x000002, "Member 'BrickMathLibrary_InverseMultiplyOrientation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.InverseOrientation
// 0x0002 (0x0002 - 0x0000)
struct BrickMathLibrary_InverseOrientation final
{
public:
	EBrickOrientation                             Orientation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_InverseOrientation) == 0x000001, "Wrong alignment on BrickMathLibrary_InverseOrientation");
static_assert(sizeof(BrickMathLibrary_InverseOrientation) == 0x000002, "Wrong size on BrickMathLibrary_InverseOrientation");
static_assert(offsetof(BrickMathLibrary_InverseOrientation, Orientation) == 0x000000, "Member 'BrickMathLibrary_InverseOrientation::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_InverseOrientation, ReturnValue) == 0x000001, "Member 'BrickMathLibrary_InverseOrientation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.MultiplyOrientation
// 0x0003 (0x0003 - 0x0000)
struct BrickMathLibrary_MultiplyOrientation final
{
public:
	EBrickOrientation                             OrientationA;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             OrientationB;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_MultiplyOrientation) == 0x000001, "Wrong alignment on BrickMathLibrary_MultiplyOrientation");
static_assert(sizeof(BrickMathLibrary_MultiplyOrientation) == 0x000003, "Wrong size on BrickMathLibrary_MultiplyOrientation");
static_assert(offsetof(BrickMathLibrary_MultiplyOrientation, OrientationA) == 0x000000, "Member 'BrickMathLibrary_MultiplyOrientation::OrientationA' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_MultiplyOrientation, OrientationB) == 0x000001, "Member 'BrickMathLibrary_MultiplyOrientation::OrientationB' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_MultiplyOrientation, ReturnValue) == 0x000002, "Member 'BrickMathLibrary_MultiplyOrientation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ProjectIntVectorOntoAxis
// 0x001C (0x001C - 0x0000)
struct BrickMathLibrary_ProjectIntVectorOntoAxis final
{
public:
	struct FIntVector                             Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               AxisDirection;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ProjectIntVectorOntoAxis) == 0x000004, "Wrong alignment on BrickMathLibrary_ProjectIntVectorOntoAxis");
static_assert(sizeof(BrickMathLibrary_ProjectIntVectorOntoAxis) == 0x00001C, "Wrong size on BrickMathLibrary_ProjectIntVectorOntoAxis");
static_assert(offsetof(BrickMathLibrary_ProjectIntVectorOntoAxis, Vector) == 0x000000, "Member 'BrickMathLibrary_ProjectIntVectorOntoAxis::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ProjectIntVectorOntoAxis, AxisDirection) == 0x00000C, "Member 'BrickMathLibrary_ProjectIntVectorOntoAxis::AxisDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ProjectIntVectorOntoAxis, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_ProjectIntVectorOntoAxis::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ProjectIntVectorOntoPlane
// 0x0028 (0x0028 - 0x0000)
struct BrickMathLibrary_ProjectIntVectorOntoPlane final
{
public:
	struct FIntVector                             Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             PointOnPlane;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               PlaneNormalDirection;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ProjectIntVectorOntoPlane) == 0x000004, "Wrong alignment on BrickMathLibrary_ProjectIntVectorOntoPlane");
static_assert(sizeof(BrickMathLibrary_ProjectIntVectorOntoPlane) == 0x000028, "Wrong size on BrickMathLibrary_ProjectIntVectorOntoPlane");
static_assert(offsetof(BrickMathLibrary_ProjectIntVectorOntoPlane, Vector) == 0x000000, "Member 'BrickMathLibrary_ProjectIntVectorOntoPlane::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ProjectIntVectorOntoPlane, PointOnPlane) == 0x00000C, "Member 'BrickMathLibrary_ProjectIntVectorOntoPlane::PointOnPlane' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ProjectIntVectorOntoPlane, PlaneNormalDirection) == 0x000018, "Member 'BrickMathLibrary_ProjectIntVectorOntoPlane::PlaneNormalDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ProjectIntVectorOntoPlane, ReturnValue) == 0x00001C, "Member 'BrickMathLibrary_ProjectIntVectorOntoPlane::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.ProjectIntVectorOntoZeroPlane
// 0x001C (0x001C - 0x0000)
struct BrickMathLibrary_ProjectIntVectorOntoZeroPlane final
{
public:
	struct FIntVector                             Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               PlaneNormalDirection;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_ProjectIntVectorOntoZeroPlane) == 0x000004, "Wrong alignment on BrickMathLibrary_ProjectIntVectorOntoZeroPlane");
static_assert(sizeof(BrickMathLibrary_ProjectIntVectorOntoZeroPlane) == 0x00001C, "Wrong size on BrickMathLibrary_ProjectIntVectorOntoZeroPlane");
static_assert(offsetof(BrickMathLibrary_ProjectIntVectorOntoZeroPlane, Vector) == 0x000000, "Member 'BrickMathLibrary_ProjectIntVectorOntoZeroPlane::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ProjectIntVectorOntoZeroPlane, PlaneNormalDirection) == 0x00000C, "Member 'BrickMathLibrary_ProjectIntVectorOntoZeroPlane::PlaneNormalDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_ProjectIntVectorOntoZeroPlane, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_ProjectIntVectorOntoZeroPlane::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.RotateDirection
// 0x0003 (0x0003 - 0x0000)
struct BrickMathLibrary_RotateDirection final
{
public:
	EBrickDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_RotateDirection) == 0x000001, "Wrong alignment on BrickMathLibrary_RotateDirection");
static_assert(sizeof(BrickMathLibrary_RotateDirection) == 0x000003, "Wrong size on BrickMathLibrary_RotateDirection");
static_assert(offsetof(BrickMathLibrary_RotateDirection, Direction) == 0x000000, "Member 'BrickMathLibrary_RotateDirection::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateDirection, Orientation) == 0x000001, "Member 'BrickMathLibrary_RotateDirection::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateDirection, ReturnValue) == 0x000002, "Member 'BrickMathLibrary_RotateDirection::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.RotateIntBox
// 0x0034 (0x0034 - 0x0000)
struct BrickMathLibrary_RotateIntBox final
{
public:
	struct FIntBox                                Box;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntBox                                ReturnValue;                                       // 0x001C(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_RotateIntBox) == 0x000004, "Wrong alignment on BrickMathLibrary_RotateIntBox");
static_assert(sizeof(BrickMathLibrary_RotateIntBox) == 0x000034, "Wrong size on BrickMathLibrary_RotateIntBox");
static_assert(offsetof(BrickMathLibrary_RotateIntBox, Box) == 0x000000, "Member 'BrickMathLibrary_RotateIntBox::Box' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateIntBox, Orientation) == 0x000018, "Member 'BrickMathLibrary_RotateIntBox::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateIntBox, ReturnValue) == 0x00001C, "Member 'BrickMathLibrary_RotateIntBox::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.RotateIntVector
// 0x001C (0x001C - 0x0000)
struct BrickMathLibrary_RotateIntVector final
{
public:
	struct FIntVector                             Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_RotateIntVector) == 0x000004, "Wrong alignment on BrickMathLibrary_RotateIntVector");
static_assert(sizeof(BrickMathLibrary_RotateIntVector) == 0x00001C, "Wrong size on BrickMathLibrary_RotateIntVector");
static_assert(offsetof(BrickMathLibrary_RotateIntVector, Vector) == 0x000000, "Member 'BrickMathLibrary_RotateIntVector::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateIntVector, Orientation) == 0x00000C, "Member 'BrickMathLibrary_RotateIntVector::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateIntVector, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_RotateIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.RotateSize
// 0x001C (0x001C - 0x0000)
struct BrickMathLibrary_RotateSize final
{
public:
	struct FIntVector                             Size;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_RotateSize) == 0x000004, "Wrong alignment on BrickMathLibrary_RotateSize");
static_assert(sizeof(BrickMathLibrary_RotateSize) == 0x00001C, "Wrong size on BrickMathLibrary_RotateSize");
static_assert(offsetof(BrickMathLibrary_RotateSize, Size) == 0x000000, "Member 'BrickMathLibrary_RotateSize::Size' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateSize, Orientation) == 0x00000C, "Member 'BrickMathLibrary_RotateSize::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateSize, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_RotateSize::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.RotateSize3f
// 0x001C (0x001C - 0x0000)
struct BrickMathLibrary_RotateSize3f final
{
public:
	struct FVector3f                              Size;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector3f                              ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_RotateSize3f) == 0x000004, "Wrong alignment on BrickMathLibrary_RotateSize3f");
static_assert(sizeof(BrickMathLibrary_RotateSize3f) == 0x00001C, "Wrong size on BrickMathLibrary_RotateSize3f");
static_assert(offsetof(BrickMathLibrary_RotateSize3f, Size) == 0x000000, "Member 'BrickMathLibrary_RotateSize3f::Size' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateSize3f, Orientation) == 0x00000C, "Member 'BrickMathLibrary_RotateSize3f::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateSize3f, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_RotateSize3f::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.RotateVector
// 0x0038 (0x0038 - 0x0000)
struct BrickMathLibrary_RotateVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_RotateVector) == 0x000008, "Wrong alignment on BrickMathLibrary_RotateVector");
static_assert(sizeof(BrickMathLibrary_RotateVector) == 0x000038, "Wrong size on BrickMathLibrary_RotateVector");
static_assert(offsetof(BrickMathLibrary_RotateVector, Vector) == 0x000000, "Member 'BrickMathLibrary_RotateVector::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateVector, Orientation) == 0x000018, "Member 'BrickMathLibrary_RotateVector::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateVector, ReturnValue) == 0x000020, "Member 'BrickMathLibrary_RotateVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.RotateVector3f
// 0x001C (0x001C - 0x0000)
struct BrickMathLibrary_RotateVector3f final
{
public:
	struct FVector3f                              Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector3f                              ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_RotateVector3f) == 0x000004, "Wrong alignment on BrickMathLibrary_RotateVector3f");
static_assert(sizeof(BrickMathLibrary_RotateVector3f) == 0x00001C, "Wrong size on BrickMathLibrary_RotateVector3f");
static_assert(offsetof(BrickMathLibrary_RotateVector3f, Vector) == 0x000000, "Member 'BrickMathLibrary_RotateVector3f::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateVector3f, Orientation) == 0x00000C, "Member 'BrickMathLibrary_RotateVector3f::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_RotateVector3f, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_RotateVector3f::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.SetIntVectorAxisValue
// 0x0020 (0x0020 - 0x0000)
struct BrickMathLibrary_SetIntVectorAxisValue final
{
public:
	struct FIntVector                             Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               AxisDirection;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_SetIntVectorAxisValue) == 0x000004, "Wrong alignment on BrickMathLibrary_SetIntVectorAxisValue");
static_assert(sizeof(BrickMathLibrary_SetIntVectorAxisValue) == 0x000020, "Wrong size on BrickMathLibrary_SetIntVectorAxisValue");
static_assert(offsetof(BrickMathLibrary_SetIntVectorAxisValue, Vector) == 0x000000, "Member 'BrickMathLibrary_SetIntVectorAxisValue::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_SetIntVectorAxisValue, Value) == 0x00000C, "Member 'BrickMathLibrary_SetIntVectorAxisValue::Value' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_SetIntVectorAxisValue, AxisDirection) == 0x000010, "Member 'BrickMathLibrary_SetIntVectorAxisValue::AxisDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_SetIntVectorAxisValue, ReturnValue) == 0x000014, "Member 'BrickMathLibrary_SetIntVectorAxisValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.SplitOrientation
// 0x0003 (0x0003 - 0x0000)
struct BrickMathLibrary_SplitOrientation final
{
public:
	EBrickOrientation                             Orientation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               OutDirection;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickRotation                                OutRotation;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_SplitOrientation) == 0x000001, "Wrong alignment on BrickMathLibrary_SplitOrientation");
static_assert(sizeof(BrickMathLibrary_SplitOrientation) == 0x000003, "Wrong size on BrickMathLibrary_SplitOrientation");
static_assert(offsetof(BrickMathLibrary_SplitOrientation, Orientation) == 0x000000, "Member 'BrickMathLibrary_SplitOrientation::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_SplitOrientation, OutDirection) == 0x000001, "Member 'BrickMathLibrary_SplitOrientation::OutDirection' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_SplitOrientation, OutRotation) == 0x000002, "Member 'BrickMathLibrary_SplitOrientation::OutRotation' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.TransformIntBox
// 0x0040 (0x0040 - 0x0000)
struct BrickMathLibrary_TransformIntBox final
{
public:
	struct FIntBox                                Box;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntVector                             position;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntBox                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_TransformIntBox) == 0x000004, "Wrong alignment on BrickMathLibrary_TransformIntBox");
static_assert(sizeof(BrickMathLibrary_TransformIntBox) == 0x000040, "Wrong size on BrickMathLibrary_TransformIntBox");
static_assert(offsetof(BrickMathLibrary_TransformIntBox, Box) == 0x000000, "Member 'BrickMathLibrary_TransformIntBox::Box' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_TransformIntBox, position) == 0x000018, "Member 'BrickMathLibrary_TransformIntBox::position' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_TransformIntBox, Orientation) == 0x000024, "Member 'BrickMathLibrary_TransformIntBox::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_TransformIntBox, ReturnValue) == 0x000028, "Member 'BrickMathLibrary_TransformIntBox::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.UnrotateDirection
// 0x0003 (0x0003 - 0x0000)
struct BrickMathLibrary_UnrotateDirection final
{
public:
	EBrickDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_UnrotateDirection) == 0x000001, "Wrong alignment on BrickMathLibrary_UnrotateDirection");
static_assert(sizeof(BrickMathLibrary_UnrotateDirection) == 0x000003, "Wrong size on BrickMathLibrary_UnrotateDirection");
static_assert(offsetof(BrickMathLibrary_UnrotateDirection, Direction) == 0x000000, "Member 'BrickMathLibrary_UnrotateDirection::Direction' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateDirection, Orientation) == 0x000001, "Member 'BrickMathLibrary_UnrotateDirection::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateDirection, ReturnValue) == 0x000002, "Member 'BrickMathLibrary_UnrotateDirection::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.UnrotateIntBox
// 0x0034 (0x0034 - 0x0000)
struct BrickMathLibrary_UnrotateIntBox final
{
public:
	struct FIntBox                                Box;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntBox                                ReturnValue;                                       // 0x001C(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_UnrotateIntBox) == 0x000004, "Wrong alignment on BrickMathLibrary_UnrotateIntBox");
static_assert(sizeof(BrickMathLibrary_UnrotateIntBox) == 0x000034, "Wrong size on BrickMathLibrary_UnrotateIntBox");
static_assert(offsetof(BrickMathLibrary_UnrotateIntBox, Box) == 0x000000, "Member 'BrickMathLibrary_UnrotateIntBox::Box' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateIntBox, Orientation) == 0x000018, "Member 'BrickMathLibrary_UnrotateIntBox::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateIntBox, ReturnValue) == 0x00001C, "Member 'BrickMathLibrary_UnrotateIntBox::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.UnrotateIntVector
// 0x001C (0x001C - 0x0000)
struct BrickMathLibrary_UnrotateIntVector final
{
public:
	struct FIntVector                             Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_UnrotateIntVector) == 0x000004, "Wrong alignment on BrickMathLibrary_UnrotateIntVector");
static_assert(sizeof(BrickMathLibrary_UnrotateIntVector) == 0x00001C, "Wrong size on BrickMathLibrary_UnrotateIntVector");
static_assert(offsetof(BrickMathLibrary_UnrotateIntVector, Vector) == 0x000000, "Member 'BrickMathLibrary_UnrotateIntVector::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateIntVector, Orientation) == 0x00000C, "Member 'BrickMathLibrary_UnrotateIntVector::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateIntVector, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_UnrotateIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.UnrotateSize
// 0x001C (0x001C - 0x0000)
struct BrickMathLibrary_UnrotateSize final
{
public:
	struct FIntVector                             Size;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_UnrotateSize) == 0x000004, "Wrong alignment on BrickMathLibrary_UnrotateSize");
static_assert(sizeof(BrickMathLibrary_UnrotateSize) == 0x00001C, "Wrong size on BrickMathLibrary_UnrotateSize");
static_assert(offsetof(BrickMathLibrary_UnrotateSize, Size) == 0x000000, "Member 'BrickMathLibrary_UnrotateSize::Size' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateSize, Orientation) == 0x00000C, "Member 'BrickMathLibrary_UnrotateSize::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateSize, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_UnrotateSize::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.UnrotateSize3f
// 0x001C (0x001C - 0x0000)
struct BrickMathLibrary_UnrotateSize3f final
{
public:
	struct FVector3f                              Size;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector3f                              ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_UnrotateSize3f) == 0x000004, "Wrong alignment on BrickMathLibrary_UnrotateSize3f");
static_assert(sizeof(BrickMathLibrary_UnrotateSize3f) == 0x00001C, "Wrong size on BrickMathLibrary_UnrotateSize3f");
static_assert(offsetof(BrickMathLibrary_UnrotateSize3f, Size) == 0x000000, "Member 'BrickMathLibrary_UnrotateSize3f::Size' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateSize3f, Orientation) == 0x00000C, "Member 'BrickMathLibrary_UnrotateSize3f::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateSize3f, ReturnValue) == 0x000010, "Member 'BrickMathLibrary_UnrotateSize3f::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickMathLibrary.UnrotateVector
// 0x0038 (0x0038 - 0x0000)
struct BrickMathLibrary_UnrotateVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickMathLibrary_UnrotateVector) == 0x000008, "Wrong alignment on BrickMathLibrary_UnrotateVector");
static_assert(sizeof(BrickMathLibrary_UnrotateVector) == 0x000038, "Wrong size on BrickMathLibrary_UnrotateVector");
static_assert(offsetof(BrickMathLibrary_UnrotateVector, Vector) == 0x000000, "Member 'BrickMathLibrary_UnrotateVector::Vector' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateVector, Orientation) == 0x000018, "Member 'BrickMathLibrary_UnrotateVector::Orientation' has a wrong offset!");
static_assert(offsetof(BrickMathLibrary_UnrotateVector, ReturnValue) == 0x000020, "Member 'BrickMathLibrary_UnrotateVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerAvatarManagerComponent.FindPlayerPartDescriptor
// 0x0028 (0x0028 - 0x0000)
struct BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor final
{
public:
	class FText                                   InCategory;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   InDisplayName;                                     // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UBRPlayerPartDescriptor*                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor) == 0x000008, "Wrong alignment on BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor");
static_assert(sizeof(BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor) == 0x000028, "Wrong size on BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor");
static_assert(offsetof(BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor, InCategory) == 0x000000, "Member 'BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor::InCategory' has a wrong offset!");
static_assert(offsetof(BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor, InDisplayName) == 0x000010, "Member 'BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor::InDisplayName' has a wrong offset!");
static_assert(offsetof(BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor, ReturnValue) == 0x000020, "Member 'BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerAvatarManagerComponent.FixupOldColorsToLinear
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerAvatarManagerComponent_FixupOldColorsToLinear final
{
public:
	struct FBRPlayerAvatarCustomizationV2         Avatar;                                            // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerAvatarManagerComponent_FixupOldColorsToLinear) == 0x000008, "Wrong alignment on BRPlayerAvatarManagerComponent_FixupOldColorsToLinear");
static_assert(sizeof(BRPlayerAvatarManagerComponent_FixupOldColorsToLinear) == 0x000010, "Wrong size on BRPlayerAvatarManagerComponent_FixupOldColorsToLinear");
static_assert(offsetof(BRPlayerAvatarManagerComponent_FixupOldColorsToLinear, Avatar) == 0x000000, "Member 'BRPlayerAvatarManagerComponent_FixupOldColorsToLinear::Avatar' has a wrong offset!");

// Function Brickadia.BRPlayerAvatarManagerComponent.UpgradeCustomization
// 0x0020 (0x0020 - 0x0000)
struct BRPlayerAvatarManagerComponent_UpgradeCustomization final
{
public:
	struct FBRPlayerAvatarCustomizationV2         Old;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBRPlayerAvatarCustomizationV3         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerAvatarManagerComponent_UpgradeCustomization) == 0x000008, "Wrong alignment on BRPlayerAvatarManagerComponent_UpgradeCustomization");
static_assert(sizeof(BRPlayerAvatarManagerComponent_UpgradeCustomization) == 0x000020, "Wrong size on BRPlayerAvatarManagerComponent_UpgradeCustomization");
static_assert(offsetof(BRPlayerAvatarManagerComponent_UpgradeCustomization, Old) == 0x000000, "Member 'BRPlayerAvatarManagerComponent_UpgradeCustomization::Old' has a wrong offset!");
static_assert(offsetof(BRPlayerAvatarManagerComponent_UpgradeCustomization, ReturnValue) == 0x000010, "Member 'BRPlayerAvatarManagerComponent_UpgradeCustomization::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerAvatarManagerComponent.ServerUpdatePlayerAvatar
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerAvatarManagerComponent_ServerUpdatePlayerAvatar final
{
public:
	struct FBRPlayerAvatarCustomizationV3         NewAvatar;                                         // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerAvatarManagerComponent_ServerUpdatePlayerAvatar) == 0x000008, "Wrong alignment on BRPlayerAvatarManagerComponent_ServerUpdatePlayerAvatar");
static_assert(sizeof(BRPlayerAvatarManagerComponent_ServerUpdatePlayerAvatar) == 0x000010, "Wrong size on BRPlayerAvatarManagerComponent_ServerUpdatePlayerAvatar");
static_assert(offsetof(BRPlayerAvatarManagerComponent_ServerUpdatePlayerAvatar, NewAvatar) == 0x000000, "Member 'BRPlayerAvatarManagerComponent_ServerUpdatePlayerAvatar::NewAvatar' has a wrong offset!");

// Function Brickadia.BRPlayerAvatarManagerComponent.UpdatePlayerAvatar
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerAvatarManagerComponent_UpdatePlayerAvatar final
{
public:
	struct FBRPlayerAvatarCustomizationV3         NewAvatar;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerAvatarManagerComponent_UpdatePlayerAvatar) == 0x000008, "Wrong alignment on BRPlayerAvatarManagerComponent_UpdatePlayerAvatar");
static_assert(sizeof(BRPlayerAvatarManagerComponent_UpdatePlayerAvatar) == 0x000010, "Wrong size on BRPlayerAvatarManagerComponent_UpdatePlayerAvatar");
static_assert(offsetof(BRPlayerAvatarManagerComponent_UpdatePlayerAvatar, NewAvatar) == 0x000000, "Member 'BRPlayerAvatarManagerComponent_UpdatePlayerAvatar::NewAvatar' has a wrong offset!");

// Function Brickadia.BrickHelpers.GetBrickFromHitResult
// 0x00F8 (0x00F8 - 0x0000)
struct BrickHelpers_GetBrickFromHitResult final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBrickHandle                           ReturnValue;                                       // 0x00F0(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickHelpers_GetBrickFromHitResult) == 0x000008, "Wrong alignment on BrickHelpers_GetBrickFromHitResult");
static_assert(sizeof(BrickHelpers_GetBrickFromHitResult) == 0x0000F8, "Wrong size on BrickHelpers_GetBrickFromHitResult");
static_assert(offsetof(BrickHelpers_GetBrickFromHitResult, HitResult) == 0x000000, "Member 'BrickHelpers_GetBrickFromHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(BrickHelpers_GetBrickFromHitResult, ReturnValue) == 0x0000F0, "Member 'BrickHelpers_GetBrickFromHitResult::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickHelpers.GetBrickTypeFromBrickAsset
// 0x0020 (0x0020 - 0x0000)
struct BrickHelpers_GetBrickTypeFromBrickAsset final
{
public:
	class UBrickAsset*                            Brick;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ProceduralSize;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickType*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickHelpers_GetBrickTypeFromBrickAsset) == 0x000008, "Wrong alignment on BrickHelpers_GetBrickTypeFromBrickAsset");
static_assert(sizeof(BrickHelpers_GetBrickTypeFromBrickAsset) == 0x000020, "Wrong size on BrickHelpers_GetBrickTypeFromBrickAsset");
static_assert(offsetof(BrickHelpers_GetBrickTypeFromBrickAsset, Brick) == 0x000000, "Member 'BrickHelpers_GetBrickTypeFromBrickAsset::Brick' has a wrong offset!");
static_assert(offsetof(BrickHelpers_GetBrickTypeFromBrickAsset, ProceduralSize) == 0x000008, "Member 'BrickHelpers_GetBrickTypeFromBrickAsset::ProceduralSize' has a wrong offset!");
static_assert(offsetof(BrickHelpers_GetBrickTypeFromBrickAsset, ReturnValue) == 0x000018, "Member 'BrickHelpers_GetBrickTypeFromBrickAsset::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickHelpers.GetGlobalBrickGrid
// 0x0010 (0x0010 - 0x0000)
struct BrickHelpers_GetGlobalBrickGrid final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickGridComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickHelpers_GetGlobalBrickGrid) == 0x000008, "Wrong alignment on BrickHelpers_GetGlobalBrickGrid");
static_assert(sizeof(BrickHelpers_GetGlobalBrickGrid) == 0x000010, "Wrong size on BrickHelpers_GetGlobalBrickGrid");
static_assert(offsetof(BrickHelpers_GetGlobalBrickGrid, WorldContextObject) == 0x000000, "Member 'BrickHelpers_GetGlobalBrickGrid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickHelpers_GetGlobalBrickGrid, ReturnValue) == 0x000008, "Member 'BrickHelpers_GetGlobalBrickGrid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickHelpers.GetGlobalBrickGridActor
// 0x0010 (0x0010 - 0x0000)
struct BrickHelpers_GetGlobalBrickGridActor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABrickGridActor*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickHelpers_GetGlobalBrickGridActor) == 0x000008, "Wrong alignment on BrickHelpers_GetGlobalBrickGridActor");
static_assert(sizeof(BrickHelpers_GetGlobalBrickGridActor) == 0x000010, "Wrong size on BrickHelpers_GetGlobalBrickGridActor");
static_assert(offsetof(BrickHelpers_GetGlobalBrickGridActor, WorldContextObject) == 0x000000, "Member 'BrickHelpers_GetGlobalBrickGridActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickHelpers_GetGlobalBrickGridActor, ReturnValue) == 0x000008, "Member 'BrickHelpers_GetGlobalBrickGridActor::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickHelpers.GetGlobalBrickGridEntityHandle
// 0x0010 (0x0010 - 0x0000)
struct BrickHelpers_GetGlobalBrickGridEntityHandle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBREntityPersistentHandle              ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickHelpers_GetGlobalBrickGridEntityHandle) == 0x000008, "Wrong alignment on BrickHelpers_GetGlobalBrickGridEntityHandle");
static_assert(sizeof(BrickHelpers_GetGlobalBrickGridEntityHandle) == 0x000010, "Wrong size on BrickHelpers_GetGlobalBrickGridEntityHandle");
static_assert(offsetof(BrickHelpers_GetGlobalBrickGridEntityHandle, WorldContextObject) == 0x000000, "Member 'BrickHelpers_GetGlobalBrickGridEntityHandle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickHelpers_GetGlobalBrickGridEntityHandle, ReturnValue) == 0x000008, "Member 'BrickHelpers_GetGlobalBrickGridEntityHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridPreviewActor.GetActiveBrickGrid
// 0x0008 (0x0008 - 0x0000)
struct BrickGridPreviewActor_GetActiveBrickGrid final
{
public:
	class UBrickGridComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridPreviewActor_GetActiveBrickGrid) == 0x000008, "Wrong alignment on BrickGridPreviewActor_GetActiveBrickGrid");
static_assert(sizeof(BrickGridPreviewActor_GetActiveBrickGrid) == 0x000008, "Wrong size on BrickGridPreviewActor_GetActiveBrickGrid");
static_assert(offsetof(BrickGridPreviewActor_GetActiveBrickGrid, ReturnValue) == 0x000000, "Member 'BrickGridPreviewActor_GetActiveBrickGrid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridPreviewActor.GetFreeBrickGrid
// 0x0008 (0x0008 - 0x0000)
struct BrickGridPreviewActor_GetFreeBrickGrid final
{
public:
	class UBrickGridComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridPreviewActor_GetFreeBrickGrid) == 0x000008, "Wrong alignment on BrickGridPreviewActor_GetFreeBrickGrid");
static_assert(sizeof(BrickGridPreviewActor_GetFreeBrickGrid) == 0x000008, "Wrong size on BrickGridPreviewActor_GetFreeBrickGrid");
static_assert(offsetof(BrickGridPreviewActor_GetFreeBrickGrid, ReturnValue) == 0x000000, "Member 'BrickGridPreviewActor_GetFreeBrickGrid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGridPreviewActor.GetSimpleBrickGrid
// 0x0008 (0x0008 - 0x0000)
struct BrickGridPreviewActor_GetSimpleBrickGrid final
{
public:
	class UBrickGridComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridPreviewActor_GetSimpleBrickGrid) == 0x000008, "Wrong alignment on BrickGridPreviewActor_GetSimpleBrickGrid");
static_assert(sizeof(BrickGridPreviewActor_GetSimpleBrickGrid) == 0x000008, "Wrong size on BrickGridPreviewActor_GetSimpleBrickGrid");
static_assert(offsetof(BrickGridPreviewActor_GetSimpleBrickGrid, ReturnValue) == 0x000000, "Member 'BrickGridPreviewActor_GetSimpleBrickGrid::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWeaponProjectile.ProcessBounce
// 0x0108 (0x0108 - 0x0000)
struct BRWeaponProjectile_ProcessBounce final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x00F0(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponProjectile_ProcessBounce) == 0x000008, "Wrong alignment on BRWeaponProjectile_ProcessBounce");
static_assert(sizeof(BRWeaponProjectile_ProcessBounce) == 0x000108, "Wrong size on BRWeaponProjectile_ProcessBounce");
static_assert(offsetof(BRWeaponProjectile_ProcessBounce, ImpactResult) == 0x000000, "Member 'BRWeaponProjectile_ProcessBounce::ImpactResult' has a wrong offset!");
static_assert(offsetof(BRWeaponProjectile_ProcessBounce, ImpactVelocity) == 0x0000F0, "Member 'BRWeaponProjectile_ProcessBounce::ImpactVelocity' has a wrong offset!");

// Function Brickadia.BRWeaponProjectile.ProcessImpactDamageableObject
// 0x00F8 (0x00F8 - 0x0000)
struct BRWeaponProjectile_ProcessImpactDamageableObject final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRWeaponProjectile_ProcessImpactDamageableObject) == 0x000008, "Wrong alignment on BRWeaponProjectile_ProcessImpactDamageableObject");
static_assert(sizeof(BRWeaponProjectile_ProcessImpactDamageableObject) == 0x0000F8, "Wrong size on BRWeaponProjectile_ProcessImpactDamageableObject");
static_assert(offsetof(BRWeaponProjectile_ProcessImpactDamageableObject, ImpactResult) == 0x000000, "Member 'BRWeaponProjectile_ProcessImpactDamageableObject::ImpactResult' has a wrong offset!");
static_assert(offsetof(BRWeaponProjectile_ProcessImpactDamageableObject, ReturnValue) == 0x0000F0, "Member 'BRWeaponProjectile_ProcessImpactDamageableObject::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWeaponProjectile.ProcessStop
// 0x00F0 (0x00F0 - 0x0000)
struct BRWeaponProjectile_ProcessStop final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponProjectile_ProcessStop) == 0x000008, "Wrong alignment on BRWeaponProjectile_ProcessStop");
static_assert(sizeof(BRWeaponProjectile_ProcessStop) == 0x0000F0, "Wrong size on BRWeaponProjectile_ProcessStop");
static_assert(offsetof(BRWeaponProjectile_ProcessStop, ImpactResult) == 0x000000, "Member 'BRWeaponProjectile_ProcessStop::ImpactResult' has a wrong offset!");

// Function Brickadia.BRWeaponProjectile.SetMeshColor
// 0x0008 (0x0008 - 0x0000)
struct BRWeaponProjectile_SetMeshColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponProjectile_SetMeshColor) == 0x000004, "Wrong alignment on BRWeaponProjectile_SetMeshColor");
static_assert(sizeof(BRWeaponProjectile_SetMeshColor) == 0x000008, "Wrong size on BRWeaponProjectile_SetMeshColor");
static_assert(offsetof(BRWeaponProjectile_SetMeshColor, Index_0) == 0x000000, "Member 'BRWeaponProjectile_SetMeshColor::Index_0' has a wrong offset!");
static_assert(offsetof(BRWeaponProjectile_SetMeshColor, Value) == 0x000004, "Member 'BRWeaponProjectile_SetMeshColor::Value' has a wrong offset!");

// Function Brickadia.BRWeaponProjectile.GetImpactExplosion
// 0x0010 (0x0010 - 0x0000)
struct BRWeaponProjectile_GetImpactExplosion final
{
public:
	bool                                          bDirectHit;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeadshot;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UBRWeaponExplosion>         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponProjectile_GetImpactExplosion) == 0x000008, "Wrong alignment on BRWeaponProjectile_GetImpactExplosion");
static_assert(sizeof(BRWeaponProjectile_GetImpactExplosion) == 0x000010, "Wrong size on BRWeaponProjectile_GetImpactExplosion");
static_assert(offsetof(BRWeaponProjectile_GetImpactExplosion, bDirectHit) == 0x000000, "Member 'BRWeaponProjectile_GetImpactExplosion::bDirectHit' has a wrong offset!");
static_assert(offsetof(BRWeaponProjectile_GetImpactExplosion, bHeadshot) == 0x000001, "Member 'BRWeaponProjectile_GetImpactExplosion::bHeadshot' has a wrong offset!");
static_assert(offsetof(BRWeaponProjectile_GetImpactExplosion, ReturnValue) == 0x000008, "Member 'BRWeaponProjectile_GetImpactExplosion::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWeaponProjectile.GetMeshColor
// 0x0008 (0x0008 - 0x0000)
struct BRWeaponProjectile_GetMeshColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponProjectile_GetMeshColor) == 0x000004, "Wrong alignment on BRWeaponProjectile_GetMeshColor");
static_assert(sizeof(BRWeaponProjectile_GetMeshColor) == 0x000008, "Wrong size on BRWeaponProjectile_GetMeshColor");
static_assert(offsetof(BRWeaponProjectile_GetMeshColor, Index_0) == 0x000000, "Member 'BRWeaponProjectile_GetMeshColor::Index_0' has a wrong offset!");
static_assert(offsetof(BRWeaponProjectile_GetMeshColor, ReturnValue) == 0x000004, "Member 'BRWeaponProjectile_GetMeshColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.ServerSetPreviewMode_TEMP
// 0x0001 (0x0001 - 0x0000)
struct BrickPreviewManagerComponent_ServerSetPreviewMode_TEMP final
{
public:
	EBrickPreviewMode                             NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPreviewManagerComponent_ServerSetPreviewMode_TEMP) == 0x000001, "Wrong alignment on BrickPreviewManagerComponent_ServerSetPreviewMode_TEMP");
static_assert(sizeof(BrickPreviewManagerComponent_ServerSetPreviewMode_TEMP) == 0x000001, "Wrong size on BrickPreviewManagerComponent_ServerSetPreviewMode_TEMP");
static_assert(offsetof(BrickPreviewManagerComponent_ServerSetPreviewMode_TEMP, NewMode) == 0x000000, "Member 'BrickPreviewManagerComponent_ServerSetPreviewMode_TEMP::NewMode' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.ServerSetPreviewSimpleParameters
// 0x0030 (0x0030 - 0x0000)
struct BrickPreviewManagerComponent_ServerSetPreviewSimpleParameters final
{
public:
	struct FBrickPreviewSimpleParameters          NewParameters;                                     // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPreviewManagerComponent_ServerSetPreviewSimpleParameters) == 0x000008, "Wrong alignment on BrickPreviewManagerComponent_ServerSetPreviewSimpleParameters");
static_assert(sizeof(BrickPreviewManagerComponent_ServerSetPreviewSimpleParameters) == 0x000030, "Wrong size on BrickPreviewManagerComponent_ServerSetPreviewSimpleParameters");
static_assert(offsetof(BrickPreviewManagerComponent_ServerSetPreviewSimpleParameters, NewParameters) == 0x000000, "Member 'BrickPreviewManagerComponent_ServerSetPreviewSimpleParameters::NewParameters' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.ServerSetPreviewTransformParameters
// 0x0018 (0x0018 - 0x0000)
struct BrickPreviewManagerComponent_ServerSetPreviewTransformParameters final
{
public:
	struct FBrickPreviewTransformParameters       NewParameters;                                     // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPreviewManagerComponent_ServerSetPreviewTransformParameters) == 0x000008, "Wrong alignment on BrickPreviewManagerComponent_ServerSetPreviewTransformParameters");
static_assert(sizeof(BrickPreviewManagerComponent_ServerSetPreviewTransformParameters) == 0x000018, "Wrong size on BrickPreviewManagerComponent_ServerSetPreviewTransformParameters");
static_assert(offsetof(BrickPreviewManagerComponent_ServerSetPreviewTransformParameters, NewParameters) == 0x000000, "Member 'BrickPreviewManagerComponent_ServerSetPreviewTransformParameters::NewParameters' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.ServerSetPreviewVisible
// 0x0001 (0x0001 - 0x0000)
struct BrickPreviewManagerComponent_ServerSetPreviewVisible final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPreviewManagerComponent_ServerSetPreviewVisible) == 0x000001, "Wrong alignment on BrickPreviewManagerComponent_ServerSetPreviewVisible");
static_assert(sizeof(BrickPreviewManagerComponent_ServerSetPreviewVisible) == 0x000001, "Wrong size on BrickPreviewManagerComponent_ServerSetPreviewVisible");
static_assert(offsetof(BrickPreviewManagerComponent_ServerSetPreviewVisible, bNewVisible) == 0x000000, "Member 'BrickPreviewManagerComponent_ServerSetPreviewVisible::bNewVisible' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.ServerSetPreviewVolumeParameters
// 0x0030 (0x0030 - 0x0000)
struct BrickPreviewManagerComponent_ServerSetPreviewVolumeParameters final
{
public:
	struct FBrickPreviewVolumeParameters          NewParameters;                                     // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPreviewManagerComponent_ServerSetPreviewVolumeParameters) == 0x000004, "Wrong alignment on BrickPreviewManagerComponent_ServerSetPreviewVolumeParameters");
static_assert(sizeof(BrickPreviewManagerComponent_ServerSetPreviewVolumeParameters) == 0x000030, "Wrong size on BrickPreviewManagerComponent_ServerSetPreviewVolumeParameters");
static_assert(offsetof(BrickPreviewManagerComponent_ServerSetPreviewVolumeParameters, NewParameters) == 0x000000, "Member 'BrickPreviewManagerComponent_ServerSetPreviewVolumeParameters::NewParameters' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.SetPreviewMode
// 0x0001 (0x0001 - 0x0000)
struct BrickPreviewManagerComponent_SetPreviewMode final
{
public:
	EBrickPreviewMode                             NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPreviewManagerComponent_SetPreviewMode) == 0x000001, "Wrong alignment on BrickPreviewManagerComponent_SetPreviewMode");
static_assert(sizeof(BrickPreviewManagerComponent_SetPreviewMode) == 0x000001, "Wrong size on BrickPreviewManagerComponent_SetPreviewMode");
static_assert(offsetof(BrickPreviewManagerComponent_SetPreviewMode, NewMode) == 0x000000, "Member 'BrickPreviewManagerComponent_SetPreviewMode::NewMode' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.SetPreviewSimpleParameters
// 0x0038 (0x0038 - 0x0000)
struct BrickPreviewManagerComponent_SetPreviewSimpleParameters final
{
public:
	struct FBrickPreviewSimpleParameters          NewParameters;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bKillPreview;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPreviewManagerComponent_SetPreviewSimpleParameters) == 0x000008, "Wrong alignment on BrickPreviewManagerComponent_SetPreviewSimpleParameters");
static_assert(sizeof(BrickPreviewManagerComponent_SetPreviewSimpleParameters) == 0x000038, "Wrong size on BrickPreviewManagerComponent_SetPreviewSimpleParameters");
static_assert(offsetof(BrickPreviewManagerComponent_SetPreviewSimpleParameters, NewParameters) == 0x000000, "Member 'BrickPreviewManagerComponent_SetPreviewSimpleParameters::NewParameters' has a wrong offset!");
static_assert(offsetof(BrickPreviewManagerComponent_SetPreviewSimpleParameters, bKillPreview) == 0x000030, "Member 'BrickPreviewManagerComponent_SetPreviewSimpleParameters::bKillPreview' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.SetPreviewTransformParameters
// 0x0018 (0x0018 - 0x0000)
struct BrickPreviewManagerComponent_SetPreviewTransformParameters final
{
public:
	struct FBrickPreviewTransformParameters       NewParameters;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPreviewManagerComponent_SetPreviewTransformParameters) == 0x000008, "Wrong alignment on BrickPreviewManagerComponent_SetPreviewTransformParameters");
static_assert(sizeof(BrickPreviewManagerComponent_SetPreviewTransformParameters) == 0x000018, "Wrong size on BrickPreviewManagerComponent_SetPreviewTransformParameters");
static_assert(offsetof(BrickPreviewManagerComponent_SetPreviewTransformParameters, NewParameters) == 0x000000, "Member 'BrickPreviewManagerComponent_SetPreviewTransformParameters::NewParameters' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.SetPreviewVisible
// 0x0001 (0x0001 - 0x0000)
struct BrickPreviewManagerComponent_SetPreviewVisible final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPreviewManagerComponent_SetPreviewVisible) == 0x000001, "Wrong alignment on BrickPreviewManagerComponent_SetPreviewVisible");
static_assert(sizeof(BrickPreviewManagerComponent_SetPreviewVisible) == 0x000001, "Wrong size on BrickPreviewManagerComponent_SetPreviewVisible");
static_assert(offsetof(BrickPreviewManagerComponent_SetPreviewVisible, bNewVisible) == 0x000000, "Member 'BrickPreviewManagerComponent_SetPreviewVisible::bNewVisible' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.SetPreviewVolumeParameters
// 0x0034 (0x0034 - 0x0000)
struct BrickPreviewManagerComponent_SetPreviewVolumeParameters final
{
public:
	struct FBrickPreviewVolumeParameters          NewParameters;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bKillPreview;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPreviewManagerComponent_SetPreviewVolumeParameters) == 0x000004, "Wrong alignment on BrickPreviewManagerComponent_SetPreviewVolumeParameters");
static_assert(sizeof(BrickPreviewManagerComponent_SetPreviewVolumeParameters) == 0x000034, "Wrong size on BrickPreviewManagerComponent_SetPreviewVolumeParameters");
static_assert(offsetof(BrickPreviewManagerComponent_SetPreviewVolumeParameters, NewParameters) == 0x000000, "Member 'BrickPreviewManagerComponent_SetPreviewVolumeParameters::NewParameters' has a wrong offset!");
static_assert(offsetof(BrickPreviewManagerComponent_SetPreviewVolumeParameters, bKillPreview) == 0x000030, "Member 'BrickPreviewManagerComponent_SetPreviewVolumeParameters::bKillPreview' has a wrong offset!");

// Function Brickadia.BrickPreviewManagerComponent.GetBrickGridPreviewActor
// 0x0008 (0x0008 - 0x0000)
struct BrickPreviewManagerComponent_GetBrickGridPreviewActor final
{
public:
	class ABrickGridPreviewActor*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPreviewManagerComponent_GetBrickGridPreviewActor) == 0x000008, "Wrong alignment on BrickPreviewManagerComponent_GetBrickGridPreviewActor");
static_assert(sizeof(BrickPreviewManagerComponent_GetBrickGridPreviewActor) == 0x000008, "Wrong size on BrickPreviewManagerComponent_GetBrickGridPreviewActor");
static_assert(offsetof(BrickPreviewManagerComponent_GetBrickGridPreviewActor, ReturnValue) == 0x000000, "Member 'BrickPreviewManagerComponent_GetBrickGridPreviewActor::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.CanConnectWire
// 0x0038 (0x0038 - 0x0000)
struct BrickRegistry_CanConnectWire final
{
public:
	struct FBrickComponentWirePortRef             SourcePortRef;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentWirePortRef             TargetPortRef;                                     // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickRegistry_CanConnectWire) == 0x000008, "Wrong alignment on BrickRegistry_CanConnectWire");
static_assert(sizeof(BrickRegistry_CanConnectWire) == 0x000038, "Wrong size on BrickRegistry_CanConnectWire");
static_assert(offsetof(BrickRegistry_CanConnectWire, SourcePortRef) == 0x000000, "Member 'BrickRegistry_CanConnectWire::SourcePortRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_CanConnectWire, TargetPortRef) == 0x000018, "Member 'BrickRegistry_CanConnectWire::TargetPortRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_CanConnectWire, ReturnValue) == 0x000030, "Member 'BrickRegistry_CanConnectWire::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.ConnectComponentWire
// 0x0038 (0x0038 - 0x0000)
struct BrickRegistry_ConnectComponentWire final
{
public:
	struct FBrickComponentWirePortRef             SourcePortRef;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentWirePortRef             TargetPortRef;                                     // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickComponentWireConnectResult              ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickRegistry_ConnectComponentWire) == 0x000008, "Wrong alignment on BrickRegistry_ConnectComponentWire");
static_assert(sizeof(BrickRegistry_ConnectComponentWire) == 0x000038, "Wrong size on BrickRegistry_ConnectComponentWire");
static_assert(offsetof(BrickRegistry_ConnectComponentWire, SourcePortRef) == 0x000000, "Member 'BrickRegistry_ConnectComponentWire::SourcePortRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_ConnectComponentWire, TargetPortRef) == 0x000018, "Member 'BrickRegistry_ConnectComponentWire::TargetPortRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_ConnectComponentWire, ReturnValue) == 0x000030, "Member 'BrickRegistry_ConnectComponentWire::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.DisconnectComponentWire
// 0x0038 (0x0038 - 0x0000)
struct BrickRegistry_DisconnectComponentWire final
{
public:
	struct FBrickComponentWirePortRef             SourcePortRef;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentWirePortRef             TargetPortRef;                                     // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickComponentWireDisconnectResult           ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickRegistry_DisconnectComponentWire) == 0x000008, "Wrong alignment on BrickRegistry_DisconnectComponentWire");
static_assert(sizeof(BrickRegistry_DisconnectComponentWire) == 0x000038, "Wrong size on BrickRegistry_DisconnectComponentWire");
static_assert(offsetof(BrickRegistry_DisconnectComponentWire, SourcePortRef) == 0x000000, "Member 'BrickRegistry_DisconnectComponentWire::SourcePortRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_DisconnectComponentWire, TargetPortRef) == 0x000018, "Member 'BrickRegistry_DisconnectComponentWire::TargetPortRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_DisconnectComponentWire, ReturnValue) == 0x000030, "Member 'BrickRegistry_DisconnectComponentWire::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.DisconnectComponentWireByIndex
// 0x0008 (0x0008 - 0x0000)
struct BrickRegistry_DisconnectComponentWireByIndex final
{
public:
	int32                                         WireIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickComponentWireDisconnectResult           ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickRegistry_DisconnectComponentWireByIndex) == 0x000004, "Wrong alignment on BrickRegistry_DisconnectComponentWireByIndex");
static_assert(sizeof(BrickRegistry_DisconnectComponentWireByIndex) == 0x000008, "Wrong size on BrickRegistry_DisconnectComponentWireByIndex");
static_assert(offsetof(BrickRegistry_DisconnectComponentWireByIndex, WireIndex) == 0x000000, "Member 'BrickRegistry_DisconnectComponentWireByIndex::WireIndex' has a wrong offset!");
static_assert(offsetof(BrickRegistry_DisconnectComponentWireByIndex, ReturnValue) == 0x000004, "Member 'BrickRegistry_DisconnectComponentWireByIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.DisconnectComponentWireByPort
// 0x0020 (0x0020 - 0x0000)
struct BrickRegistry_DisconnectComponentWireByPort final
{
public:
	struct FBrickComponentWirePortRef             PortRef;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsOutput;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickComponentWireDisconnectResult           ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickRegistry_DisconnectComponentWireByPort) == 0x000008, "Wrong alignment on BrickRegistry_DisconnectComponentWireByPort");
static_assert(sizeof(BrickRegistry_DisconnectComponentWireByPort) == 0x000020, "Wrong size on BrickRegistry_DisconnectComponentWireByPort");
static_assert(offsetof(BrickRegistry_DisconnectComponentWireByPort, PortRef) == 0x000000, "Member 'BrickRegistry_DisconnectComponentWireByPort::PortRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_DisconnectComponentWireByPort, bAsOutput) == 0x000018, "Member 'BrickRegistry_DisconnectComponentWireByPort::bAsOutput' has a wrong offset!");
static_assert(offsetof(BrickRegistry_DisconnectComponentWireByPort, ReturnValue) == 0x000019, "Member 'BrickRegistry_DisconnectComponentWireByPort::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.DisconnectComponentWiresByComponent
// 0x0010 (0x0010 - 0x0000)
struct BrickRegistry_DisconnectComponentWiresByComponent final
{
public:
	struct FBrickComponentInstanceRef             Component;                                         // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickRegistry_DisconnectComponentWiresByComponent) == 0x000008, "Wrong alignment on BrickRegistry_DisconnectComponentWiresByComponent");
static_assert(sizeof(BrickRegistry_DisconnectComponentWiresByComponent) == 0x000010, "Wrong size on BrickRegistry_DisconnectComponentWiresByComponent");
static_assert(offsetof(BrickRegistry_DisconnectComponentWiresByComponent, Component) == 0x000000, "Member 'BrickRegistry_DisconnectComponentWiresByComponent::Component' has a wrong offset!");

// Function Brickadia.BrickRegistry.ForceLastModifyTime
// 0x0008 (0x0008 - 0x0000)
struct BrickRegistry_ForceLastModifyTime final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickRegistry_ForceLastModifyTime) == 0x000008, "Wrong alignment on BrickRegistry_ForceLastModifyTime");
static_assert(sizeof(BrickRegistry_ForceLastModifyTime) == 0x000008, "Wrong size on BrickRegistry_ForceLastModifyTime");
static_assert(offsetof(BrickRegistry_ForceLastModifyTime, Time) == 0x000000, "Member 'BrickRegistry_ForceLastModifyTime::Time' has a wrong offset!");

// Function Brickadia.BrickRegistry.IsComponentInstanceRefValid
// 0x0018 (0x0018 - 0x0000)
struct BrickRegistry_IsComponentInstanceRefValid final
{
public:
	struct FBrickComponentInstanceRef             ComponentRef;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickRegistry_IsComponentInstanceRefValid) == 0x000008, "Wrong alignment on BrickRegistry_IsComponentInstanceRefValid");
static_assert(sizeof(BrickRegistry_IsComponentInstanceRefValid) == 0x000018, "Wrong size on BrickRegistry_IsComponentInstanceRefValid");
static_assert(offsetof(BrickRegistry_IsComponentInstanceRefValid, ComponentRef) == 0x000000, "Member 'BrickRegistry_IsComponentInstanceRefValid::ComponentRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_IsComponentInstanceRefValid, ReturnValue) == 0x000010, "Member 'BrickRegistry_IsComponentInstanceRefValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.IsComponentLatentInstanceRefValid
// 0x0020 (0x0020 - 0x0000)
struct BrickRegistry_IsComponentLatentInstanceRefValid final
{
public:
	struct FBrickComponentLatentInstanceRef       ComponentRef;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickRegistry_IsComponentLatentInstanceRefValid) == 0x000008, "Wrong alignment on BrickRegistry_IsComponentLatentInstanceRefValid");
static_assert(sizeof(BrickRegistry_IsComponentLatentInstanceRefValid) == 0x000020, "Wrong size on BrickRegistry_IsComponentLatentInstanceRefValid");
static_assert(offsetof(BrickRegistry_IsComponentLatentInstanceRefValid, ComponentRef) == 0x000000, "Member 'BrickRegistry_IsComponentLatentInstanceRefValid::ComponentRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_IsComponentLatentInstanceRefValid, ReturnValue) == 0x000018, "Member 'BrickRegistry_IsComponentLatentInstanceRefValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.IsComponentLatentWirePortRefValid
// 0x0028 (0x0028 - 0x0000)
struct BrickRegistry_IsComponentLatentWirePortRefValid final
{
public:
	struct FBrickComponentLatentWirePortRef       PortRef;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsOutput;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickRegistry_IsComponentLatentWirePortRefValid) == 0x000008, "Wrong alignment on BrickRegistry_IsComponentLatentWirePortRefValid");
static_assert(sizeof(BrickRegistry_IsComponentLatentWirePortRefValid) == 0x000028, "Wrong size on BrickRegistry_IsComponentLatentWirePortRefValid");
static_assert(offsetof(BrickRegistry_IsComponentLatentWirePortRefValid, PortRef) == 0x000000, "Member 'BrickRegistry_IsComponentLatentWirePortRefValid::PortRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_IsComponentLatentWirePortRefValid, bAsOutput) == 0x000020, "Member 'BrickRegistry_IsComponentLatentWirePortRefValid::bAsOutput' has a wrong offset!");
static_assert(offsetof(BrickRegistry_IsComponentLatentWirePortRefValid, ReturnValue) == 0x000021, "Member 'BrickRegistry_IsComponentLatentWirePortRefValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.IsComponentWirePortRefValid
// 0x0020 (0x0020 - 0x0000)
struct BrickRegistry_IsComponentWirePortRefValid final
{
public:
	struct FBrickComponentWirePortRef             PortRef;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsOutput;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickRegistry_IsComponentWirePortRefValid) == 0x000008, "Wrong alignment on BrickRegistry_IsComponentWirePortRefValid");
static_assert(sizeof(BrickRegistry_IsComponentWirePortRefValid) == 0x000020, "Wrong size on BrickRegistry_IsComponentWirePortRefValid");
static_assert(offsetof(BrickRegistry_IsComponentWirePortRefValid, PortRef) == 0x000000, "Member 'BrickRegistry_IsComponentWirePortRefValid::PortRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_IsComponentWirePortRefValid, bAsOutput) == 0x000018, "Member 'BrickRegistry_IsComponentWirePortRefValid::bAsOutput' has a wrong offset!");
static_assert(offsetof(BrickRegistry_IsComponentWirePortRefValid, ReturnValue) == 0x000019, "Member 'BrickRegistry_IsComponentWirePortRefValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.SetHiddenBrickRenderingEnabled
// 0x0001 (0x0001 - 0x0000)
struct BrickRegistry_SetHiddenBrickRenderingEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickRegistry_SetHiddenBrickRenderingEnabled) == 0x000001, "Wrong alignment on BrickRegistry_SetHiddenBrickRenderingEnabled");
static_assert(sizeof(BrickRegistry_SetHiddenBrickRenderingEnabled) == 0x000001, "Wrong size on BrickRegistry_SetHiddenBrickRenderingEnabled");
static_assert(offsetof(BrickRegistry_SetHiddenBrickRenderingEnabled, bEnabled) == 0x000000, "Member 'BrickRegistry_SetHiddenBrickRenderingEnabled::bEnabled' has a wrong offset!");

// Function Brickadia.BrickRegistry.SetWireRenderingEnabled
// 0x0001 (0x0001 - 0x0000)
struct BrickRegistry_SetWireRenderingEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickRegistry_SetWireRenderingEnabled) == 0x000001, "Wrong alignment on BrickRegistry_SetWireRenderingEnabled");
static_assert(sizeof(BrickRegistry_SetWireRenderingEnabled) == 0x000001, "Wrong size on BrickRegistry_SetWireRenderingEnabled");
static_assert(offsetof(BrickRegistry_SetWireRenderingEnabled, bEnabled) == 0x000000, "Member 'BrickRegistry_SetWireRenderingEnabled::bEnabled' has a wrong offset!");

// Function Brickadia.BrickRegistry.CreateBrickLatentHandle
// 0x0014 (0x0014 - 0x0000)
struct BrickRegistry_CreateBrickLatentHandle final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickLatentHandle                     ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickRegistry_CreateBrickLatentHandle) == 0x000004, "Wrong alignment on BrickRegistry_CreateBrickLatentHandle");
static_assert(sizeof(BrickRegistry_CreateBrickLatentHandle) == 0x000014, "Wrong size on BrickRegistry_CreateBrickLatentHandle");
static_assert(offsetof(BrickRegistry_CreateBrickLatentHandle, BrickHandle) == 0x000000, "Member 'BrickRegistry_CreateBrickLatentHandle::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickRegistry_CreateBrickLatentHandle, ReturnValue) == 0x000008, "Member 'BrickRegistry_CreateBrickLatentHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.FindBrickByLatentHandle
// 0x0014 (0x0014 - 0x0000)
struct BrickRegistry_FindBrickByLatentHandle final
{
public:
	struct FBrickLatentHandle                     LatentHandle;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickRegistry_FindBrickByLatentHandle) == 0x000004, "Wrong alignment on BrickRegistry_FindBrickByLatentHandle");
static_assert(sizeof(BrickRegistry_FindBrickByLatentHandle) == 0x000014, "Wrong size on BrickRegistry_FindBrickByLatentHandle");
static_assert(offsetof(BrickRegistry_FindBrickByLatentHandle, LatentHandle) == 0x000000, "Member 'BrickRegistry_FindBrickByLatentHandle::LatentHandle' has a wrong offset!");
static_assert(offsetof(BrickRegistry_FindBrickByLatentHandle, ReturnValue) == 0x00000C, "Member 'BrickRegistry_FindBrickByLatentHandle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.GetHiddenBrickRenderingEnabled
// 0x0001 (0x0001 - 0x0000)
struct BrickRegistry_GetHiddenBrickRenderingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickRegistry_GetHiddenBrickRenderingEnabled) == 0x000001, "Wrong alignment on BrickRegistry_GetHiddenBrickRenderingEnabled");
static_assert(sizeof(BrickRegistry_GetHiddenBrickRenderingEnabled) == 0x000001, "Wrong size on BrickRegistry_GetHiddenBrickRenderingEnabled");
static_assert(offsetof(BrickRegistry_GetHiddenBrickRenderingEnabled, ReturnValue) == 0x000000, "Member 'BrickRegistry_GetHiddenBrickRenderingEnabled::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.GetLastBrickModificationTime
// 0x0004 (0x0004 - 0x0000)
struct BrickRegistry_GetLastBrickModificationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickRegistry_GetLastBrickModificationTime) == 0x000004, "Wrong alignment on BrickRegistry_GetLastBrickModificationTime");
static_assert(sizeof(BrickRegistry_GetLastBrickModificationTime) == 0x000004, "Wrong size on BrickRegistry_GetLastBrickModificationTime");
static_assert(offsetof(BrickRegistry_GetLastBrickModificationTime, ReturnValue) == 0x000000, "Member 'BrickRegistry_GetLastBrickModificationTime::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.GetWireRenderingEnabled
// 0x0001 (0x0001 - 0x0000)
struct BrickRegistry_GetWireRenderingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickRegistry_GetWireRenderingEnabled) == 0x000001, "Wrong alignment on BrickRegistry_GetWireRenderingEnabled");
static_assert(sizeof(BrickRegistry_GetWireRenderingEnabled) == 0x000001, "Wrong size on BrickRegistry_GetWireRenderingEnabled");
static_assert(offsetof(BrickRegistry_GetWireRenderingEnabled, ReturnValue) == 0x000000, "Member 'BrickRegistry_GetWireRenderingEnabled::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickRegistry.HasWiresConnectedToPort
// 0x0020 (0x0020 - 0x0000)
struct BrickRegistry_HasWiresConnectedToPort final
{
public:
	struct FBrickComponentWirePortRef             PortRef;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsOutput;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickRegistry_HasWiresConnectedToPort) == 0x000008, "Wrong alignment on BrickRegistry_HasWiresConnectedToPort");
static_assert(sizeof(BrickRegistry_HasWiresConnectedToPort) == 0x000020, "Wrong size on BrickRegistry_HasWiresConnectedToPort");
static_assert(offsetof(BrickRegistry_HasWiresConnectedToPort, PortRef) == 0x000000, "Member 'BrickRegistry_HasWiresConnectedToPort::PortRef' has a wrong offset!");
static_assert(offsetof(BrickRegistry_HasWiresConnectedToPort, bAsOutput) == 0x000018, "Member 'BrickRegistry_HasWiresConnectedToPort::bAsOutput' has a wrong offset!");
static_assert(offsetof(BrickRegistry_HasWiresConnectedToPort, ReturnValue) == 0x000019, "Member 'BrickRegistry_HasWiresConnectedToPort::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.AddTrackedProjectile
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_AddTrackedProjectile final
{
public:
	class ABRWeaponProjectile*                    Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_AddTrackedProjectile) == 0x000008, "Wrong alignment on BRPlayerState_AddTrackedProjectile");
static_assert(sizeof(BRPlayerState_AddTrackedProjectile) == 0x000008, "Wrong size on BRPlayerState_AddTrackedProjectile");
static_assert(offsetof(BRPlayerState_AddTrackedProjectile, Projectile) == 0x000000, "Member 'BRPlayerState_AddTrackedProjectile::Projectile' has a wrong offset!");

// Function Brickadia.BRPlayerState.IncLeaderboardValue
// 0x000C (0x000C - 0x0000)
struct BRPlayerState_IncLeaderboardValue final
{
public:
	class FName                                   ValueName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_IncLeaderboardValue) == 0x000004, "Wrong alignment on BRPlayerState_IncLeaderboardValue");
static_assert(sizeof(BRPlayerState_IncLeaderboardValue) == 0x00000C, "Wrong size on BRPlayerState_IncLeaderboardValue");
static_assert(offsetof(BRPlayerState_IncLeaderboardValue, ValueName) == 0x000000, "Member 'BRPlayerState_IncLeaderboardValue::ValueName' has a wrong offset!");
static_assert(offsetof(BRPlayerState_IncLeaderboardValue, Value) == 0x000008, "Member 'BRPlayerState_IncLeaderboardValue::Value' has a wrong offset!");

// Function Brickadia.BRPlayerState.IncLeaderboardValueByIndex
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_IncLeaderboardValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_IncLeaderboardValueByIndex) == 0x000004, "Wrong alignment on BRPlayerState_IncLeaderboardValueByIndex");
static_assert(sizeof(BRPlayerState_IncLeaderboardValueByIndex) == 0x000008, "Wrong size on BRPlayerState_IncLeaderboardValueByIndex");
static_assert(offsetof(BRPlayerState_IncLeaderboardValueByIndex, Index_0) == 0x000000, "Member 'BRPlayerState_IncLeaderboardValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BRPlayerState_IncLeaderboardValueByIndex, Value) == 0x000004, "Member 'BRPlayerState_IncLeaderboardValueByIndex::Value' has a wrong offset!");

// Function Brickadia.BRPlayerState.RemoveTrackedProjectile
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_RemoveTrackedProjectile final
{
public:
	class ABRWeaponProjectile*                    Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_RemoveTrackedProjectile) == 0x000008, "Wrong alignment on BRPlayerState_RemoveTrackedProjectile");
static_assert(sizeof(BRPlayerState_RemoveTrackedProjectile) == 0x000008, "Wrong size on BRPlayerState_RemoveTrackedProjectile");
static_assert(offsetof(BRPlayerState_RemoveTrackedProjectile, Projectile) == 0x000000, "Member 'BRPlayerState_RemoveTrackedProjectile::Projectile' has a wrong offset!");

// Function Brickadia.BRPlayerState.ServerSetColorSelectionState
// 0x000C (0x000C - 0x0000)
struct BRPlayerState_ServerSetColorSelectionState final
{
public:
	struct FBRColorSelectionState                 SelectionState;                                    // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_ServerSetColorSelectionState) == 0x000004, "Wrong alignment on BRPlayerState_ServerSetColorSelectionState");
static_assert(sizeof(BRPlayerState_ServerSetColorSelectionState) == 0x00000C, "Wrong size on BRPlayerState_ServerSetColorSelectionState");
static_assert(offsetof(BRPlayerState_ServerSetColorSelectionState, SelectionState) == 0x000000, "Member 'BRPlayerState_ServerSetColorSelectionState::SelectionState' has a wrong offset!");

// Function Brickadia.BRPlayerState.SetColorSelectionState
// 0x000C (0x000C - 0x0000)
struct BRPlayerState_SetColorSelectionState final
{
public:
	struct FBRColorSelectionState                 SelectionState;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_SetColorSelectionState) == 0x000004, "Wrong alignment on BRPlayerState_SetColorSelectionState");
static_assert(sizeof(BRPlayerState_SetColorSelectionState) == 0x00000C, "Wrong size on BRPlayerState_SetColorSelectionState");
static_assert(offsetof(BRPlayerState_SetColorSelectionState, SelectionState) == 0x000000, "Member 'BRPlayerState_SetColorSelectionState::SelectionState' has a wrong offset!");

// Function Brickadia.BRPlayerState.SetHasRole
// 0x0018 (0x0018 - 0x0000)
struct BRPlayerState_SetHasRole final
{
public:
	class FString                                 RoleId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Has;                                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerState_SetHasRole) == 0x000008, "Wrong alignment on BRPlayerState_SetHasRole");
static_assert(sizeof(BRPlayerState_SetHasRole) == 0x000018, "Wrong size on BRPlayerState_SetHasRole");
static_assert(offsetof(BRPlayerState_SetHasRole, RoleId) == 0x000000, "Member 'BRPlayerState_SetHasRole::RoleId' has a wrong offset!");
static_assert(offsetof(BRPlayerState_SetHasRole, Has) == 0x000010, "Member 'BRPlayerState_SetHasRole::Has' has a wrong offset!");

// Function Brickadia.BRPlayerState.SetHasRoles
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerState_SetHasRoles final
{
public:
	TArray<class FString>                         RoleIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_SetHasRoles) == 0x000008, "Wrong alignment on BRPlayerState_SetHasRoles");
static_assert(sizeof(BRPlayerState_SetHasRoles) == 0x000010, "Wrong size on BRPlayerState_SetHasRoles");
static_assert(offsetof(BRPlayerState_SetHasRoles, RoleIds) == 0x000000, "Member 'BRPlayerState_SetHasRoles::RoleIds' has a wrong offset!");

// Function Brickadia.BRPlayerState.SetLeaderboardValue
// 0x000C (0x000C - 0x0000)
struct BRPlayerState_SetLeaderboardValue final
{
public:
	class FName                                   ValueName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_SetLeaderboardValue) == 0x000004, "Wrong alignment on BRPlayerState_SetLeaderboardValue");
static_assert(sizeof(BRPlayerState_SetLeaderboardValue) == 0x00000C, "Wrong size on BRPlayerState_SetLeaderboardValue");
static_assert(offsetof(BRPlayerState_SetLeaderboardValue, ValueName) == 0x000000, "Member 'BRPlayerState_SetLeaderboardValue::ValueName' has a wrong offset!");
static_assert(offsetof(BRPlayerState_SetLeaderboardValue, Value) == 0x000008, "Member 'BRPlayerState_SetLeaderboardValue::Value' has a wrong offset!");

// Function Brickadia.BRPlayerState.SetLeaderboardValueByIndex
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_SetLeaderboardValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_SetLeaderboardValueByIndex) == 0x000004, "Wrong alignment on BRPlayerState_SetLeaderboardValueByIndex");
static_assert(sizeof(BRPlayerState_SetLeaderboardValueByIndex) == 0x000008, "Wrong size on BRPlayerState_SetLeaderboardValueByIndex");
static_assert(offsetof(BRPlayerState_SetLeaderboardValueByIndex, Index_0) == 0x000000, "Member 'BRPlayerState_SetLeaderboardValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BRPlayerState_SetLeaderboardValueByIndex, Value) == 0x000004, "Member 'BRPlayerState_SetLeaderboardValueByIndex::Value' has a wrong offset!");

// Function Brickadia.BRPlayerState.CountBricksAndComponents
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_CountBricksAndComponents final
{
public:
	int32                                         OutNumBricks;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumComponents;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_CountBricksAndComponents) == 0x000004, "Wrong alignment on BRPlayerState_CountBricksAndComponents");
static_assert(sizeof(BRPlayerState_CountBricksAndComponents) == 0x000008, "Wrong size on BRPlayerState_CountBricksAndComponents");
static_assert(offsetof(BRPlayerState_CountBricksAndComponents, OutNumBricks) == 0x000000, "Member 'BRPlayerState_CountBricksAndComponents::OutNumBricks' has a wrong offset!");
static_assert(offsetof(BRPlayerState_CountBricksAndComponents, OutNumComponents) == 0x000004, "Member 'BRPlayerState_CountBricksAndComponents::OutNumComponents' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetAffiliatedTeamFor
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerState_GetAffiliatedTeamFor final
{
public:
	const class ABRPlayerState*                   OtherPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRRulesetTeam*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetAffiliatedTeamFor) == 0x000008, "Wrong alignment on BRPlayerState_GetAffiliatedTeamFor");
static_assert(sizeof(BRPlayerState_GetAffiliatedTeamFor) == 0x000010, "Wrong size on BRPlayerState_GetAffiliatedTeamFor");
static_assert(offsetof(BRPlayerState_GetAffiliatedTeamFor, OtherPlayer) == 0x000000, "Member 'BRPlayerState_GetAffiliatedTeamFor::OtherPlayer' has a wrong offset!");
static_assert(offsetof(BRPlayerState_GetAffiliatedTeamFor, ReturnValue) == 0x000008, "Member 'BRPlayerState_GetAffiliatedTeamFor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetChatNameColor
// 0x0004 (0x0004 - 0x0000)
struct BRPlayerState_GetChatNameColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetChatNameColor) == 0x000004, "Wrong alignment on BRPlayerState_GetChatNameColor");
static_assert(sizeof(BRPlayerState_GetChatNameColor) == 0x000004, "Wrong size on BRPlayerState_GetChatNameColor");
static_assert(offsetof(BRPlayerState_GetChatNameColor, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetChatNameColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetChatNameColorFor
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerState_GetChatNameColorFor final
{
public:
	class ABRPlayerState*                         OtherPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerState_GetChatNameColorFor) == 0x000008, "Wrong alignment on BRPlayerState_GetChatNameColorFor");
static_assert(sizeof(BRPlayerState_GetChatNameColorFor) == 0x000010, "Wrong size on BRPlayerState_GetChatNameColorFor");
static_assert(offsetof(BRPlayerState_GetChatNameColorFor, OtherPlayer) == 0x000000, "Member 'BRPlayerState_GetChatNameColorFor::OtherPlayer' has a wrong offset!");
static_assert(offsetof(BRPlayerState_GetChatNameColorFor, ReturnValue) == 0x000008, "Member 'BRPlayerState_GetChatNameColorFor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetCustomPermissionsRoles
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerState_GetCustomPermissionsRoles final
{
public:
	TArray<class UBRPermissionsRole*>             ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetCustomPermissionsRoles) == 0x000008, "Wrong alignment on BRPlayerState_GetCustomPermissionsRoles");
static_assert(sizeof(BRPlayerState_GetCustomPermissionsRoles) == 0x000010, "Wrong size on BRPlayerState_GetCustomPermissionsRoles");
static_assert(offsetof(BRPlayerState_GetCustomPermissionsRoles, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetCustomPermissionsRoles::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetDefaultRoleColor
// 0x0004 (0x0004 - 0x0000)
struct BRPlayerState_GetDefaultRoleColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetDefaultRoleColor) == 0x000004, "Wrong alignment on BRPlayerState_GetDefaultRoleColor");
static_assert(sizeof(BRPlayerState_GetDefaultRoleColor) == 0x000004, "Wrong size on BRPlayerState_GetDefaultRoleColor");
static_assert(offsetof(BRPlayerState_GetDefaultRoleColor, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetDefaultRoleColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetHasChatNameColor
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerState_GetHasChatNameColor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetHasChatNameColor) == 0x000001, "Wrong alignment on BRPlayerState_GetHasChatNameColor");
static_assert(sizeof(BRPlayerState_GetHasChatNameColor) == 0x000001, "Wrong size on BRPlayerState_GetHasChatNameColor");
static_assert(offsetof(BRPlayerState_GetHasChatNameColor, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetHasChatNameColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetHasRole
// 0x0018 (0x0018 - 0x0000)
struct BRPlayerState_GetHasRole final
{
public:
	class FString                                 PermissionsRoleIn;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerState_GetHasRole) == 0x000008, "Wrong alignment on BRPlayerState_GetHasRole");
static_assert(sizeof(BRPlayerState_GetHasRole) == 0x000018, "Wrong size on BRPlayerState_GetHasRole");
static_assert(offsetof(BRPlayerState_GetHasRole, PermissionsRoleIn) == 0x000000, "Member 'BRPlayerState_GetHasRole::PermissionsRoleIn' has a wrong offset!");
static_assert(offsetof(BRPlayerState_GetHasRole, ReturnValue) == 0x000010, "Member 'BRPlayerState_GetHasRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetHighestRole
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_GetHighestRole final
{
public:
	class UBRPermissionsRole*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetHighestRole) == 0x000008, "Wrong alignment on BRPlayerState_GetHighestRole");
static_assert(sizeof(BRPlayerState_GetHighestRole) == 0x000008, "Wrong size on BRPlayerState_GetHighestRole");
static_assert(offsetof(BRPlayerState_GetHighestRole, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetHighestRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetHighestRoleColor
// 0x0004 (0x0004 - 0x0000)
struct BRPlayerState_GetHighestRoleColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetHighestRoleColor) == 0x000004, "Wrong alignment on BRPlayerState_GetHighestRoleColor");
static_assert(sizeof(BRPlayerState_GetHighestRoleColor) == 0x000004, "Wrong size on BRPlayerState_GetHighestRoleColor");
static_assert(offsetof(BRPlayerState_GetHighestRoleColor, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetHighestRoleColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetHUDNameColor
// 0x0004 (0x0004 - 0x0000)
struct BRPlayerState_GetHUDNameColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetHUDNameColor) == 0x000004, "Wrong alignment on BRPlayerState_GetHUDNameColor");
static_assert(sizeof(BRPlayerState_GetHUDNameColor) == 0x000004, "Wrong size on BRPlayerState_GetHUDNameColor");
static_assert(offsetof(BRPlayerState_GetHUDNameColor, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetHUDNameColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetIsOwner
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerState_GetIsOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetIsOwner) == 0x000001, "Wrong alignment on BRPlayerState_GetIsOwner");
static_assert(sizeof(BRPlayerState_GetIsOwner) == 0x000001, "Wrong size on BRPlayerState_GetIsOwner");
static_assert(offsetof(BRPlayerState_GetIsOwner, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetIsOwner::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetLeaderboardValue
// 0x000C (0x000C - 0x0000)
struct BRPlayerState_GetLeaderboardValue final
{
public:
	class FName                                   ValueName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetLeaderboardValue) == 0x000004, "Wrong alignment on BRPlayerState_GetLeaderboardValue");
static_assert(sizeof(BRPlayerState_GetLeaderboardValue) == 0x00000C, "Wrong size on BRPlayerState_GetLeaderboardValue");
static_assert(offsetof(BRPlayerState_GetLeaderboardValue, ValueName) == 0x000000, "Member 'BRPlayerState_GetLeaderboardValue::ValueName' has a wrong offset!");
static_assert(offsetof(BRPlayerState_GetLeaderboardValue, ReturnValue) == 0x000008, "Member 'BRPlayerState_GetLeaderboardValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetLeaderboardValueByIndex
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_GetLeaderboardValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetLeaderboardValueByIndex) == 0x000004, "Wrong alignment on BRPlayerState_GetLeaderboardValueByIndex");
static_assert(sizeof(BRPlayerState_GetLeaderboardValueByIndex) == 0x000008, "Wrong size on BRPlayerState_GetLeaderboardValueByIndex");
static_assert(offsetof(BRPlayerState_GetLeaderboardValueByIndex, Index_0) == 0x000000, "Member 'BRPlayerState_GetLeaderboardValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BRPlayerState_GetLeaderboardValueByIndex, ReturnValue) == 0x000004, "Member 'BRPlayerState_GetLeaderboardValueByIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetOwnerBRPlayerController
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_GetOwnerBRPlayerController final
{
public:
	class ABRPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetOwnerBRPlayerController) == 0x000008, "Wrong alignment on BRPlayerState_GetOwnerBRPlayerController");
static_assert(sizeof(BRPlayerState_GetOwnerBRPlayerController) == 0x000008, "Wrong size on BRPlayerState_GetOwnerBRPlayerController");
static_assert(offsetof(BRPlayerState_GetOwnerBRPlayerController, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetOwnerBRPlayerController::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetPlacerTool
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_GetPlacerTool final
{
public:
	class ABRTool_Placer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetPlacerTool) == 0x000008, "Wrong alignment on BRPlayerState_GetPlacerTool");
static_assert(sizeof(BRPlayerState_GetPlacerTool) == 0x000008, "Wrong size on BRPlayerState_GetPlacerTool");
static_assert(offsetof(BRPlayerState_GetPlacerTool, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetPlacerTool::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetRoles
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerState_GetRoles final
{
public:
	TArray<class UBRPermissionsRole*>             ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetRoles) == 0x000008, "Wrong alignment on BRPlayerState_GetRoles");
static_assert(sizeof(BRPlayerState_GetRoles) == 0x000010, "Wrong size on BRPlayerState_GetRoles");
static_assert(offsetof(BRPlayerState_GetRoles, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetRoles::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetRolesExcludingDefault
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerState_GetRolesExcludingDefault final
{
public:
	TArray<class UBRPermissionsRole*>             ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetRolesExcludingDefault) == 0x000008, "Wrong alignment on BRPlayerState_GetRolesExcludingDefault");
static_assert(sizeof(BRPlayerState_GetRolesExcludingDefault) == 0x000010, "Wrong size on BRPlayerState_GetRolesExcludingDefault");
static_assert(offsetof(BRPlayerState_GetRolesExcludingDefault, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetRolesExcludingDefault::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetToolByClass
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerState_GetToolByClass final
{
public:
	TSubclassOf<class ABRToolBase>                ToolClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRToolBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetToolByClass) == 0x000008, "Wrong alignment on BRPlayerState_GetToolByClass");
static_assert(sizeof(BRPlayerState_GetToolByClass) == 0x000010, "Wrong size on BRPlayerState_GetToolByClass");
static_assert(offsetof(BRPlayerState_GetToolByClass, ToolClass) == 0x000000, "Member 'BRPlayerState_GetToolByClass::ToolClass' has a wrong offset!");
static_assert(offsetof(BRPlayerState_GetToolByClass, ReturnValue) == 0x000008, "Member 'BRPlayerState_GetToolByClass::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetToolInventoryEntry
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerState_GetToolInventoryEntry final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetToolInventoryEntry) == 0x000008, "Wrong alignment on BRPlayerState_GetToolInventoryEntry");
static_assert(sizeof(BRPlayerState_GetToolInventoryEntry) == 0x000010, "Wrong size on BRPlayerState_GetToolInventoryEntry");
static_assert(offsetof(BRPlayerState_GetToolInventoryEntry, Slot) == 0x000000, "Member 'BRPlayerState_GetToolInventoryEntry::Slot' has a wrong offset!");
static_assert(offsetof(BRPlayerState_GetToolInventoryEntry, ReturnValue) == 0x000008, "Member 'BRPlayerState_GetToolInventoryEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetToolsInventory
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_GetToolsInventory final
{
public:
	class UBRInventoryComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetToolsInventory) == 0x000008, "Wrong alignment on BRPlayerState_GetToolsInventory");
static_assert(sizeof(BRPlayerState_GetToolsInventory) == 0x000008, "Wrong size on BRPlayerState_GetToolsInventory");
static_assert(offsetof(BRPlayerState_GetToolsInventory, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetToolsInventory::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetUserId
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerState_GetUserId final
{
public:
	struct FBRGuid                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetUserId) == 0x000004, "Wrong alignment on BRPlayerState_GetUserId");
static_assert(sizeof(BRPlayerState_GetUserId) == 0x000010, "Wrong size on BRPlayerState_GetUserId");
static_assert(offsetof(BRPlayerState_GetUserId, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetUserId::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.GetUserName
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerState_GetUserName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_GetUserName) == 0x000008, "Wrong alignment on BRPlayerState_GetUserName");
static_assert(sizeof(BRPlayerState_GetUserName) == 0x000010, "Wrong size on BRPlayerState_GetUserName");
static_assert(offsetof(BRPlayerState_GetUserName, ReturnValue) == 0x000000, "Member 'BRPlayerState_GetUserName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.HasAnyRoles
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerState_HasAnyRoles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_HasAnyRoles) == 0x000001, "Wrong alignment on BRPlayerState_HasAnyRoles");
static_assert(sizeof(BRPlayerState_HasAnyRoles) == 0x000001, "Wrong size on BRPlayerState_HasAnyRoles");
static_assert(offsetof(BRPlayerState_HasAnyRoles, ReturnValue) == 0x000000, "Member 'BRPlayerState_HasAnyRoles::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.HasLivingCharacter
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerState_HasLivingCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerState_HasLivingCharacter) == 0x000001, "Wrong alignment on BRPlayerState_HasLivingCharacter");
static_assert(sizeof(BRPlayerState_HasLivingCharacter) == 0x000001, "Wrong size on BRPlayerState_HasLivingCharacter");
static_assert(offsetof(BRPlayerState_HasLivingCharacter, ReturnValue) == 0x000000, "Member 'BRPlayerState_HasLivingCharacter::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.HasPermission
// 0x000C (0x000C - 0x0000)
struct BRPlayerState_HasPermission final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerState_HasPermission) == 0x000004, "Wrong alignment on BRPlayerState_HasPermission");
static_assert(sizeof(BRPlayerState_HasPermission) == 0x00000C, "Wrong size on BRPlayerState_HasPermission");
static_assert(offsetof(BRPlayerState_HasPermission, Permission) == 0x000000, "Member 'BRPlayerState_HasPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRPlayerState_HasPermission, ReturnValue) == 0x000008, "Member 'BRPlayerState_HasPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerState.HasToolInventoryEntry
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerState_HasToolInventoryEntry final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerState_HasToolInventoryEntry) == 0x000004, "Wrong alignment on BRPlayerState_HasToolInventoryEntry");
static_assert(sizeof(BRPlayerState_HasToolInventoryEntry) == 0x000008, "Wrong size on BRPlayerState_HasToolInventoryEntry");
static_assert(offsetof(BRPlayerState_HasToolInventoryEntry, Slot) == 0x000000, "Member 'BRPlayerState_HasToolInventoryEntry::Slot' has a wrong offset!");
static_assert(offsetof(BRPlayerState_HasToolInventoryEntry, ReturnValue) == 0x000004, "Member 'BRPlayerState_HasToolInventoryEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWeaponStateBehavior_ScriptBase.OnAdvanceState
// 0x0020 (0x0020 - 0x0000)
struct BRWeaponStateBehavior_ScriptBase_OnAdvanceState final
{
public:
	class ABRWeaponBase*                          Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationContext             SimContext;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationFeedback            SimFeedback;                                       // 0x0018(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponStateBehavior_ScriptBase_OnAdvanceState) == 0x000008, "Wrong alignment on BRWeaponStateBehavior_ScriptBase_OnAdvanceState");
static_assert(sizeof(BRWeaponStateBehavior_ScriptBase_OnAdvanceState) == 0x000020, "Wrong size on BRWeaponStateBehavior_ScriptBase_OnAdvanceState");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnAdvanceState, Weapon) == 0x000000, "Member 'BRWeaponStateBehavior_ScriptBase_OnAdvanceState::Weapon' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnAdvanceState, SimContext) == 0x000008, "Member 'BRWeaponStateBehavior_ScriptBase_OnAdvanceState::SimContext' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnAdvanceState, SimFeedback) == 0x000018, "Member 'BRWeaponStateBehavior_ScriptBase_OnAdvanceState::SimFeedback' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnAdvanceState, Duration) == 0x00001C, "Member 'BRWeaponStateBehavior_ScriptBase_OnAdvanceState::Duration' has a wrong offset!");

// Function Brickadia.BRWeaponStateBehavior_ScriptBase.OnEnterState
// 0x0020 (0x0020 - 0x0000)
struct BRWeaponStateBehavior_ScriptBase_OnEnterState final
{
public:
	class ABRWeaponBase*                          Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationContext             SimContext;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationFeedback            SimFeedback;                                       // 0x0018(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRWeaponStateBehavior_ScriptBase_OnEnterState) == 0x000008, "Wrong alignment on BRWeaponStateBehavior_ScriptBase_OnEnterState");
static_assert(sizeof(BRWeaponStateBehavior_ScriptBase_OnEnterState) == 0x000020, "Wrong size on BRWeaponStateBehavior_ScriptBase_OnEnterState");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnEnterState, Weapon) == 0x000000, "Member 'BRWeaponStateBehavior_ScriptBase_OnEnterState::Weapon' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnEnterState, SimContext) == 0x000008, "Member 'BRWeaponStateBehavior_ScriptBase_OnEnterState::SimContext' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnEnterState, SimFeedback) == 0x000018, "Member 'BRWeaponStateBehavior_ScriptBase_OnEnterState::SimFeedback' has a wrong offset!");

// Function Brickadia.BRWeaponStateBehavior_ScriptBase.OnExitState
// 0x0020 (0x0020 - 0x0000)
struct BRWeaponStateBehavior_ScriptBase_OnExitState final
{
public:
	class ABRWeaponBase*                          Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationContext             SimContext;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationFeedback            SimFeedback;                                       // 0x0018(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRWeaponStateBehavior_ScriptBase_OnExitState) == 0x000008, "Wrong alignment on BRWeaponStateBehavior_ScriptBase_OnExitState");
static_assert(sizeof(BRWeaponStateBehavior_ScriptBase_OnExitState) == 0x000020, "Wrong size on BRWeaponStateBehavior_ScriptBase_OnExitState");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnExitState, Weapon) == 0x000000, "Member 'BRWeaponStateBehavior_ScriptBase_OnExitState::Weapon' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnExitState, SimContext) == 0x000008, "Member 'BRWeaponStateBehavior_ScriptBase_OnExitState::SimContext' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnExitState, SimFeedback) == 0x000018, "Member 'BRWeaponStateBehavior_ScriptBase_OnExitState::SimFeedback' has a wrong offset!");

// Function Brickadia.BRWeaponStateBehavior_ScriptBase.OnResumeState
// 0x0020 (0x0020 - 0x0000)
struct BRWeaponStateBehavior_ScriptBase_OnResumeState final
{
public:
	class ABRWeaponBase*                          Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationContext             SimContext;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationFeedback            SimFeedback;                                       // 0x0018(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRWeaponStateBehavior_ScriptBase_OnResumeState) == 0x000008, "Wrong alignment on BRWeaponStateBehavior_ScriptBase_OnResumeState");
static_assert(sizeof(BRWeaponStateBehavior_ScriptBase_OnResumeState) == 0x000020, "Wrong size on BRWeaponStateBehavior_ScriptBase_OnResumeState");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnResumeState, Weapon) == 0x000000, "Member 'BRWeaponStateBehavior_ScriptBase_OnResumeState::Weapon' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnResumeState, SimContext) == 0x000008, "Member 'BRWeaponStateBehavior_ScriptBase_OnResumeState::SimContext' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnResumeState, SimFeedback) == 0x000018, "Member 'BRWeaponStateBehavior_ScriptBase_OnResumeState::SimFeedback' has a wrong offset!");

// Function Brickadia.BRWeaponStateBehavior_ScriptBase.OnSuspendState
// 0x0020 (0x0020 - 0x0000)
struct BRWeaponStateBehavior_ScriptBase_OnSuspendState final
{
public:
	class ABRWeaponBase*                          Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationContext             SimContext;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationFeedback            SimFeedback;                                       // 0x0018(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRWeaponStateBehavior_ScriptBase_OnSuspendState) == 0x000008, "Wrong alignment on BRWeaponStateBehavior_ScriptBase_OnSuspendState");
static_assert(sizeof(BRWeaponStateBehavior_ScriptBase_OnSuspendState) == 0x000020, "Wrong size on BRWeaponStateBehavior_ScriptBase_OnSuspendState");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnSuspendState, Weapon) == 0x000000, "Member 'BRWeaponStateBehavior_ScriptBase_OnSuspendState::Weapon' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnSuspendState, SimContext) == 0x000008, "Member 'BRWeaponStateBehavior_ScriptBase_OnSuspendState::SimContext' has a wrong offset!");
static_assert(offsetof(BRWeaponStateBehavior_ScriptBase_OnSuspendState, SimFeedback) == 0x000018, "Member 'BRWeaponStateBehavior_ScriptBase_OnSuspendState::SimFeedback' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.CopySaveFile
// 0x0028 (0x0028 - 0x0000)
struct BrickSaveFileLibrary_CopySaveFile final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPath;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_CopySaveFile) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_CopySaveFile");
static_assert(sizeof(BrickSaveFileLibrary_CopySaveFile) == 0x000028, "Wrong size on BrickSaveFileLibrary_CopySaveFile");
static_assert(offsetof(BrickSaveFileLibrary_CopySaveFile, Path) == 0x000000, "Member 'BrickSaveFileLibrary_CopySaveFile::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_CopySaveFile, NewPath) == 0x000010, "Member 'BrickSaveFileLibrary_CopySaveFile::NewPath' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_CopySaveFile, ReturnValue) == 0x000020, "Member 'BrickSaveFileLibrary_CopySaveFile::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.CopySaveFolder
// 0x0028 (0x0028 - 0x0000)
struct BrickSaveFileLibrary_CopySaveFolder final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPath;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_CopySaveFolder) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_CopySaveFolder");
static_assert(sizeof(BrickSaveFileLibrary_CopySaveFolder) == 0x000028, "Wrong size on BrickSaveFileLibrary_CopySaveFolder");
static_assert(offsetof(BrickSaveFileLibrary_CopySaveFolder, Path) == 0x000000, "Member 'BrickSaveFileLibrary_CopySaveFolder::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_CopySaveFolder, NewPath) == 0x000010, "Member 'BrickSaveFileLibrary_CopySaveFolder::NewPath' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_CopySaveFolder, ReturnValue) == 0x000020, "Member 'BrickSaveFileLibrary_CopySaveFolder::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.CountContentItems
// 0x0028 (0x0028 - 0x0000)
struct BrickSaveFileLibrary_CountContentItems final
{
public:
	TArray<class UObject*>                        InItems;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         OutNumFolders;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumFiles;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumIncludedFolders;                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumIncludedFiles;                               // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OutSize;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSaveFileLibrary_CountContentItems) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_CountContentItems");
static_assert(sizeof(BrickSaveFileLibrary_CountContentItems) == 0x000028, "Wrong size on BrickSaveFileLibrary_CountContentItems");
static_assert(offsetof(BrickSaveFileLibrary_CountContentItems, InItems) == 0x000000, "Member 'BrickSaveFileLibrary_CountContentItems::InItems' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_CountContentItems, OutNumFolders) == 0x000010, "Member 'BrickSaveFileLibrary_CountContentItems::OutNumFolders' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_CountContentItems, OutNumFiles) == 0x000014, "Member 'BrickSaveFileLibrary_CountContentItems::OutNumFiles' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_CountContentItems, OutNumIncludedFolders) == 0x000018, "Member 'BrickSaveFileLibrary_CountContentItems::OutNumIncludedFolders' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_CountContentItems, OutNumIncludedFiles) == 0x00001C, "Member 'BrickSaveFileLibrary_CountContentItems::OutNumIncludedFiles' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_CountContentItems, OutSize) == 0x000020, "Member 'BrickSaveFileLibrary_CountContentItems::OutSize' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.CreateSaveFolder
// 0x0018 (0x0018 - 0x0000)
struct BrickSaveFileLibrary_CreateSaveFolder final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_CreateSaveFolder) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_CreateSaveFolder");
static_assert(sizeof(BrickSaveFileLibrary_CreateSaveFolder) == 0x000018, "Wrong size on BrickSaveFileLibrary_CreateSaveFolder");
static_assert(offsetof(BrickSaveFileLibrary_CreateSaveFolder, Path) == 0x000000, "Member 'BrickSaveFileLibrary_CreateSaveFolder::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_CreateSaveFolder, ReturnValue) == 0x000010, "Member 'BrickSaveFileLibrary_CreateSaveFolder::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.DeleteSaveFile
// 0x0018 (0x0018 - 0x0000)
struct BrickSaveFileLibrary_DeleteSaveFile final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_DeleteSaveFile) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_DeleteSaveFile");
static_assert(sizeof(BrickSaveFileLibrary_DeleteSaveFile) == 0x000018, "Wrong size on BrickSaveFileLibrary_DeleteSaveFile");
static_assert(offsetof(BrickSaveFileLibrary_DeleteSaveFile, Path) == 0x000000, "Member 'BrickSaveFileLibrary_DeleteSaveFile::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_DeleteSaveFile, ReturnValue) == 0x000010, "Member 'BrickSaveFileLibrary_DeleteSaveFile::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.DeleteSaveFolder
// 0x0018 (0x0018 - 0x0000)
struct BrickSaveFileLibrary_DeleteSaveFolder final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursiveDeletion;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_DeleteSaveFolder) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_DeleteSaveFolder");
static_assert(sizeof(BrickSaveFileLibrary_DeleteSaveFolder) == 0x000018, "Wrong size on BrickSaveFileLibrary_DeleteSaveFolder");
static_assert(offsetof(BrickSaveFileLibrary_DeleteSaveFolder, Path) == 0x000000, "Member 'BrickSaveFileLibrary_DeleteSaveFolder::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_DeleteSaveFolder, bRecursiveDeletion) == 0x000010, "Member 'BrickSaveFileLibrary_DeleteSaveFolder::bRecursiveDeletion' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_DeleteSaveFolder, ReturnValue) == 0x000011, "Member 'BrickSaveFileLibrary_DeleteSaveFolder::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.FilterContentItems
// 0x0040 (0x0040 - 0x0000)
struct BrickSaveFileLibrary_FilterContentItems final
{
public:
	TArray<class UObject*>                        InItems;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 SearchString;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        OutFilteredItems;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutNumFolders;                                     // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumFiles;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OutSize;                                           // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSaveFileLibrary_FilterContentItems) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_FilterContentItems");
static_assert(sizeof(BrickSaveFileLibrary_FilterContentItems) == 0x000040, "Wrong size on BrickSaveFileLibrary_FilterContentItems");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItems, InItems) == 0x000000, "Member 'BrickSaveFileLibrary_FilterContentItems::InItems' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItems, SearchString) == 0x000010, "Member 'BrickSaveFileLibrary_FilterContentItems::SearchString' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItems, OutFilteredItems) == 0x000020, "Member 'BrickSaveFileLibrary_FilterContentItems::OutFilteredItems' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItems, OutNumFolders) == 0x000030, "Member 'BrickSaveFileLibrary_FilterContentItems::OutNumFolders' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItems, OutNumFiles) == 0x000034, "Member 'BrickSaveFileLibrary_FilterContentItems::OutNumFiles' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItems, OutSize) == 0x000038, "Member 'BrickSaveFileLibrary_FilterContentItems::OutSize' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.FilterContentItemsExact
// 0x0030 (0x0030 - 0x0000)
struct BrickSaveFileLibrary_FilterContentItemsExact final
{
public:
	TArray<class UObject*>                        InItems;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 SearchString;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFolders;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFiles;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSaveFileLibrary_FilterContentItemsExact) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_FilterContentItemsExact");
static_assert(sizeof(BrickSaveFileLibrary_FilterContentItemsExact) == 0x000030, "Wrong size on BrickSaveFileLibrary_FilterContentItemsExact");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItemsExact, InItems) == 0x000000, "Member 'BrickSaveFileLibrary_FilterContentItemsExact::InItems' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItemsExact, SearchString) == 0x000010, "Member 'BrickSaveFileLibrary_FilterContentItemsExact::SearchString' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItemsExact, bAllowFolders) == 0x000020, "Member 'BrickSaveFileLibrary_FilterContentItemsExact::bAllowFolders' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItemsExact, bAllowFiles) == 0x000021, "Member 'BrickSaveFileLibrary_FilterContentItemsExact::bAllowFiles' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItemsExact, ReturnValue) == 0x000028, "Member 'BrickSaveFileLibrary_FilterContentItemsExact::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.FilterContentItemsExactArray
// 0x0040 (0x0040 - 0x0000)
struct BrickSaveFileLibrary_FilterContentItemsExactArray final
{
public:
	TArray<class UObject*>                        InItems;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         FolderNames;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         FileNames;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        OutFilteredItems;                                  // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSaveFileLibrary_FilterContentItemsExactArray) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_FilterContentItemsExactArray");
static_assert(sizeof(BrickSaveFileLibrary_FilterContentItemsExactArray) == 0x000040, "Wrong size on BrickSaveFileLibrary_FilterContentItemsExactArray");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItemsExactArray, InItems) == 0x000000, "Member 'BrickSaveFileLibrary_FilterContentItemsExactArray::InItems' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItemsExactArray, FolderNames) == 0x000010, "Member 'BrickSaveFileLibrary_FilterContentItemsExactArray::FolderNames' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItemsExactArray, FileNames) == 0x000020, "Member 'BrickSaveFileLibrary_FilterContentItemsExactArray::FileNames' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FilterContentItemsExactArray, OutFilteredItems) == 0x000030, "Member 'BrickSaveFileLibrary_FilterContentItemsExactArray::OutFilteredItems' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.FindNextFreeSaveFileName
// 0x0020 (0x0020 - 0x0000)
struct BrickSaveFileLibrary_FindNextFreeSaveFileName final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSaveFileLibrary_FindNextFreeSaveFileName) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_FindNextFreeSaveFileName");
static_assert(sizeof(BrickSaveFileLibrary_FindNextFreeSaveFileName) == 0x000020, "Wrong size on BrickSaveFileLibrary_FindNextFreeSaveFileName");
static_assert(offsetof(BrickSaveFileLibrary_FindNextFreeSaveFileName, Path) == 0x000000, "Member 'BrickSaveFileLibrary_FindNextFreeSaveFileName::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FindNextFreeSaveFileName, ReturnValue) == 0x000010, "Member 'BrickSaveFileLibrary_FindNextFreeSaveFileName::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.FindNextFreeSaveFolderName
// 0x0020 (0x0020 - 0x0000)
struct BrickSaveFileLibrary_FindNextFreeSaveFolderName final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSaveFileLibrary_FindNextFreeSaveFolderName) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_FindNextFreeSaveFolderName");
static_assert(sizeof(BrickSaveFileLibrary_FindNextFreeSaveFolderName) == 0x000020, "Wrong size on BrickSaveFileLibrary_FindNextFreeSaveFolderName");
static_assert(offsetof(BrickSaveFileLibrary_FindNextFreeSaveFolderName, Path) == 0x000000, "Member 'BrickSaveFileLibrary_FindNextFreeSaveFolderName::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_FindNextFreeSaveFolderName, ReturnValue) == 0x000010, "Member 'BrickSaveFileLibrary_FindNextFreeSaveFolderName::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.GetSaveFileDetails
// 0x00B0 (0x00B0 - 0x0000)
struct BrickSaveFileLibrary_GetSaveFileDetails final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickSaveFileDetails                  OutFileDetails;                                    // 0x0010(0x0098)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_GetSaveFileDetails) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_GetSaveFileDetails");
static_assert(sizeof(BrickSaveFileLibrary_GetSaveFileDetails) == 0x0000B0, "Wrong size on BrickSaveFileLibrary_GetSaveFileDetails");
static_assert(offsetof(BrickSaveFileLibrary_GetSaveFileDetails, Path) == 0x000000, "Member 'BrickSaveFileLibrary_GetSaveFileDetails::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_GetSaveFileDetails, OutFileDetails) == 0x000010, "Member 'BrickSaveFileLibrary_GetSaveFileDetails::OutFileDetails' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_GetSaveFileDetails, ReturnValue) == 0x0000A8, "Member 'BrickSaveFileLibrary_GetSaveFileDetails::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.GetSaveFileInfo
// 0x0040 (0x0040 - 0x0000)
struct BrickSaveFileLibrary_GetSaveFileInfo final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickSaveFileInfo                     OutFileInfo;                                       // 0x0010(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_GetSaveFileInfo) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_GetSaveFileInfo");
static_assert(sizeof(BrickSaveFileLibrary_GetSaveFileInfo) == 0x000040, "Wrong size on BrickSaveFileLibrary_GetSaveFileInfo");
static_assert(offsetof(BrickSaveFileLibrary_GetSaveFileInfo, Path) == 0x000000, "Member 'BrickSaveFileLibrary_GetSaveFileInfo::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_GetSaveFileInfo, OutFileInfo) == 0x000010, "Member 'BrickSaveFileLibrary_GetSaveFileInfo::OutFileInfo' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_GetSaveFileInfo, ReturnValue) == 0x000038, "Member 'BrickSaveFileLibrary_GetSaveFileInfo::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.GetSaveFolderInfo
// 0x0048 (0x0048 - 0x0000)
struct BrickSaveFileLibrary_GetSaveFolderInfo final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickSaveFolderInfo                   OutFolderInfo;                                     // 0x0010(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_GetSaveFolderInfo) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_GetSaveFolderInfo");
static_assert(sizeof(BrickSaveFileLibrary_GetSaveFolderInfo) == 0x000048, "Wrong size on BrickSaveFileLibrary_GetSaveFolderInfo");
static_assert(offsetof(BrickSaveFileLibrary_GetSaveFolderInfo, Path) == 0x000000, "Member 'BrickSaveFileLibrary_GetSaveFolderInfo::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_GetSaveFolderInfo, OutFolderInfo) == 0x000010, "Member 'BrickSaveFileLibrary_GetSaveFolderInfo::OutFolderInfo' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_GetSaveFolderInfo, ReturnValue) == 0x000040, "Member 'BrickSaveFileLibrary_GetSaveFolderInfo::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.IsSaveFileValid
// 0x0018 (0x0018 - 0x0000)
struct BrickSaveFileLibrary_IsSaveFileValid final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_IsSaveFileValid) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_IsSaveFileValid");
static_assert(sizeof(BrickSaveFileLibrary_IsSaveFileValid) == 0x000018, "Wrong size on BrickSaveFileLibrary_IsSaveFileValid");
static_assert(offsetof(BrickSaveFileLibrary_IsSaveFileValid, Path) == 0x000000, "Member 'BrickSaveFileLibrary_IsSaveFileValid::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_IsSaveFileValid, ReturnValue) == 0x000010, "Member 'BrickSaveFileLibrary_IsSaveFileValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.IsSaveFolderValid
// 0x0018 (0x0018 - 0x0000)
struct BrickSaveFileLibrary_IsSaveFolderValid final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_IsSaveFolderValid) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_IsSaveFolderValid");
static_assert(sizeof(BrickSaveFileLibrary_IsSaveFolderValid) == 0x000018, "Wrong size on BrickSaveFileLibrary_IsSaveFolderValid");
static_assert(offsetof(BrickSaveFileLibrary_IsSaveFolderValid, Path) == 0x000000, "Member 'BrickSaveFileLibrary_IsSaveFolderValid::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_IsSaveFolderValid, ReturnValue) == 0x000010, "Member 'BrickSaveFileLibrary_IsSaveFolderValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.ListSaveFolderContentItems
// 0x0038 (0x0038 - 0x0000)
struct BrickSaveFileLibrary_ListSaveFolderContentItems final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        OutItems;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutNumFolders;                                     // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumFiles;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OutSize;                                           // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_ListSaveFolderContentItems) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_ListSaveFolderContentItems");
static_assert(sizeof(BrickSaveFileLibrary_ListSaveFolderContentItems) == 0x000038, "Wrong size on BrickSaveFileLibrary_ListSaveFolderContentItems");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContentItems, Path) == 0x000000, "Member 'BrickSaveFileLibrary_ListSaveFolderContentItems::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContentItems, OutItems) == 0x000010, "Member 'BrickSaveFileLibrary_ListSaveFolderContentItems::OutItems' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContentItems, OutNumFolders) == 0x000020, "Member 'BrickSaveFileLibrary_ListSaveFolderContentItems::OutNumFolders' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContentItems, OutNumFiles) == 0x000024, "Member 'BrickSaveFileLibrary_ListSaveFolderContentItems::OutNumFiles' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContentItems, OutSize) == 0x000028, "Member 'BrickSaveFileLibrary_ListSaveFolderContentItems::OutSize' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContentItems, ReturnValue) == 0x000030, "Member 'BrickSaveFileLibrary_ListSaveFolderContentItems::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.ListSaveFolderContents
// 0x0040 (0x0040 - 0x0000)
struct BrickSaveFileLibrary_ListSaveFolderContents final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBrickSaveFolderInfo>           OutFolders;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBrickSaveFileInfo>             OutFiles;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         OutSize;                                           // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_ListSaveFolderContents) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_ListSaveFolderContents");
static_assert(sizeof(BrickSaveFileLibrary_ListSaveFolderContents) == 0x000040, "Wrong size on BrickSaveFileLibrary_ListSaveFolderContents");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContents, Path) == 0x000000, "Member 'BrickSaveFileLibrary_ListSaveFolderContents::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContents, OutFolders) == 0x000010, "Member 'BrickSaveFileLibrary_ListSaveFolderContents::OutFolders' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContents, OutFiles) == 0x000020, "Member 'BrickSaveFileLibrary_ListSaveFolderContents::OutFiles' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContents, OutSize) == 0x000030, "Member 'BrickSaveFileLibrary_ListSaveFolderContents::OutSize' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_ListSaveFolderContents, ReturnValue) == 0x000038, "Member 'BrickSaveFileLibrary_ListSaveFolderContents::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.LoadBuild
// 0x0050 (0x0050 - 0x0000)
struct BrickSaveFileLibrary_LoadBuild final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickGridComponent*                    BrickGrid;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickLoadParams                       Params_0;                                          // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 OutError;                                          // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_LoadBuild) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_LoadBuild");
static_assert(sizeof(BrickSaveFileLibrary_LoadBuild) == 0x000050, "Wrong size on BrickSaveFileLibrary_LoadBuild");
static_assert(offsetof(BrickSaveFileLibrary_LoadBuild, Path) == 0x000000, "Member 'BrickSaveFileLibrary_LoadBuild::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_LoadBuild, BrickGrid) == 0x000010, "Member 'BrickSaveFileLibrary_LoadBuild::BrickGrid' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_LoadBuild, Params_0) == 0x000018, "Member 'BrickSaveFileLibrary_LoadBuild::Params_0' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_LoadBuild, OutError) == 0x000038, "Member 'BrickSaveFileLibrary_LoadBuild::OutError' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_LoadBuild, ReturnValue) == 0x000048, "Member 'BrickSaveFileLibrary_LoadBuild::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.LoadTemplate
// 0x0050 (0x0050 - 0x0000)
struct BrickSaveFileLibrary_LoadTemplate final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerController*                    Controller;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickLoadParams                       Params_0;                                          // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 OutError;                                          // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_LoadTemplate) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_LoadTemplate");
static_assert(sizeof(BrickSaveFileLibrary_LoadTemplate) == 0x000050, "Wrong size on BrickSaveFileLibrary_LoadTemplate");
static_assert(offsetof(BrickSaveFileLibrary_LoadTemplate, Path) == 0x000000, "Member 'BrickSaveFileLibrary_LoadTemplate::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_LoadTemplate, Controller) == 0x000010, "Member 'BrickSaveFileLibrary_LoadTemplate::Controller' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_LoadTemplate, Params_0) == 0x000018, "Member 'BrickSaveFileLibrary_LoadTemplate::Params_0' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_LoadTemplate, OutError) == 0x000038, "Member 'BrickSaveFileLibrary_LoadTemplate::OutError' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_LoadTemplate, ReturnValue) == 0x000048, "Member 'BrickSaveFileLibrary_LoadTemplate::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.MoveSaveFile
// 0x0028 (0x0028 - 0x0000)
struct BrickSaveFileLibrary_MoveSaveFile final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPath;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_MoveSaveFile) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_MoveSaveFile");
static_assert(sizeof(BrickSaveFileLibrary_MoveSaveFile) == 0x000028, "Wrong size on BrickSaveFileLibrary_MoveSaveFile");
static_assert(offsetof(BrickSaveFileLibrary_MoveSaveFile, Path) == 0x000000, "Member 'BrickSaveFileLibrary_MoveSaveFile::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_MoveSaveFile, NewPath) == 0x000010, "Member 'BrickSaveFileLibrary_MoveSaveFile::NewPath' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_MoveSaveFile, ReturnValue) == 0x000020, "Member 'BrickSaveFileLibrary_MoveSaveFile::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.MoveSaveFolder
// 0x0028 (0x0028 - 0x0000)
struct BrickSaveFileLibrary_MoveSaveFolder final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPath;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_MoveSaveFolder) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_MoveSaveFolder");
static_assert(sizeof(BrickSaveFileLibrary_MoveSaveFolder) == 0x000028, "Wrong size on BrickSaveFileLibrary_MoveSaveFolder");
static_assert(offsetof(BrickSaveFileLibrary_MoveSaveFolder, Path) == 0x000000, "Member 'BrickSaveFileLibrary_MoveSaveFolder::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_MoveSaveFolder, NewPath) == 0x000010, "Member 'BrickSaveFileLibrary_MoveSaveFolder::NewPath' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_MoveSaveFolder, ReturnValue) == 0x000020, "Member 'BrickSaveFileLibrary_MoveSaveFolder::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.OpenExplorerOnSavePath
// 0x0010 (0x0010 - 0x0000)
struct BrickSaveFileLibrary_OpenExplorerOnSavePath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSaveFileLibrary_OpenExplorerOnSavePath) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_OpenExplorerOnSavePath");
static_assert(sizeof(BrickSaveFileLibrary_OpenExplorerOnSavePath) == 0x000010, "Wrong size on BrickSaveFileLibrary_OpenExplorerOnSavePath");
static_assert(offsetof(BrickSaveFileLibrary_OpenExplorerOnSavePath, Path) == 0x000000, "Member 'BrickSaveFileLibrary_OpenExplorerOnSavePath::Path' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.PerformClipboardPasteOperation
// 0x00B0 (0x00B0 - 0x0000)
struct BrickSaveFileLibrary_PerformClipboardPasteOperation final
{
public:
	bool                                          bShouldCut;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentBasePath;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClipboardBasePath;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ClipboardFolderPaths;                              // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ClipboardFilePaths;                                // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutMissingNames;                                   // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutDuplicateNames;                                 // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutFailedNames;                                    // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutRecursiveFolderNames;                           // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutNewFolderNames;                                 // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutNewFileNames;                                   // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_PerformClipboardPasteOperation) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_PerformClipboardPasteOperation");
static_assert(sizeof(BrickSaveFileLibrary_PerformClipboardPasteOperation) == 0x0000B0, "Wrong size on BrickSaveFileLibrary_PerformClipboardPasteOperation");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, bShouldCut) == 0x000000, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::bShouldCut' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, CurrentBasePath) == 0x000008, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::CurrentBasePath' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, ClipboardBasePath) == 0x000018, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::ClipboardBasePath' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, ClipboardFolderPaths) == 0x000028, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::ClipboardFolderPaths' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, ClipboardFilePaths) == 0x000038, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::ClipboardFilePaths' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, OutMissingNames) == 0x000048, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::OutMissingNames' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, OutDuplicateNames) == 0x000058, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::OutDuplicateNames' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, OutFailedNames) == 0x000068, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::OutFailedNames' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, OutRecursiveFolderNames) == 0x000078, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::OutRecursiveFolderNames' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, OutNewFolderNames) == 0x000088, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::OutNewFolderNames' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, OutNewFileNames) == 0x000098, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::OutNewFileNames' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_PerformClipboardPasteOperation, ReturnValue) == 0x0000A8, "Member 'BrickSaveFileLibrary_PerformClipboardPasteOperation::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.SaveFileExists
// 0x0018 (0x0018 - 0x0000)
struct BrickSaveFileLibrary_SaveFileExists final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_SaveFileExists) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_SaveFileExists");
static_assert(sizeof(BrickSaveFileLibrary_SaveFileExists) == 0x000018, "Wrong size on BrickSaveFileLibrary_SaveFileExists");
static_assert(offsetof(BrickSaveFileLibrary_SaveFileExists, Path) == 0x000000, "Member 'BrickSaveFileLibrary_SaveFileExists::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_SaveFileExists, ReturnValue) == 0x000010, "Member 'BrickSaveFileLibrary_SaveFileExists::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveFileLibrary.SaveFolderExists
// 0x0018 (0x0018 - 0x0000)
struct BrickSaveFileLibrary_SaveFolderExists final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSaveFileLibrary_SaveFolderExists) == 0x000008, "Wrong alignment on BrickSaveFileLibrary_SaveFolderExists");
static_assert(sizeof(BrickSaveFileLibrary_SaveFolderExists) == 0x000018, "Wrong size on BrickSaveFileLibrary_SaveFolderExists");
static_assert(offsetof(BrickSaveFileLibrary_SaveFolderExists, Path) == 0x000000, "Member 'BrickSaveFileLibrary_SaveFolderExists::Path' has a wrong offset!");
static_assert(offsetof(BrickSaveFileLibrary_SaveFolderExists, ReturnValue) == 0x000010, "Member 'BrickSaveFileLibrary_SaveFolderExists::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickSaveBuildAsyncAction.SaveBuild
// 0x0070 (0x0070 - 0x0000)
struct BrickSaveBuildAsyncAction_SaveBuild final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSequence;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickSaveParams                       Params_0;                                          // 0x0010(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UBrickSaveBuildAsyncAction*             ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSaveBuildAsyncAction_SaveBuild) == 0x000008, "Wrong alignment on BrickSaveBuildAsyncAction_SaveBuild");
static_assert(sizeof(BrickSaveBuildAsyncAction_SaveBuild) == 0x000070, "Wrong size on BrickSaveBuildAsyncAction_SaveBuild");
static_assert(offsetof(BrickSaveBuildAsyncAction_SaveBuild, WorldContextObject) == 0x000000, "Member 'BrickSaveBuildAsyncAction_SaveBuild::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickSaveBuildAsyncAction_SaveBuild, InSequence) == 0x000008, "Member 'BrickSaveBuildAsyncAction_SaveBuild::InSequence' has a wrong offset!");
static_assert(offsetof(BrickSaveBuildAsyncAction_SaveBuild, Params_0) == 0x000010, "Member 'BrickSaveBuildAsyncAction_SaveBuild::Params_0' has a wrong offset!");
static_assert(offsetof(BrickSaveBuildAsyncAction_SaveBuild, ReturnValue) == 0x000068, "Member 'BrickSaveBuildAsyncAction_SaveBuild::ReturnValue' has a wrong offset!");

// Function Brickadia.HierarchicalRichTextBlock.GetDecoratorByClass
// 0x0010 (0x0010 - 0x0000)
struct HierarchicalRichTextBlock_GetDecoratorByClass final
{
public:
	TSubclassOf<class UHierarchicalRichTextBlockDecorator> DecoratorClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHierarchicalRichTextBlockDecorator*    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HierarchicalRichTextBlock_GetDecoratorByClass) == 0x000008, "Wrong alignment on HierarchicalRichTextBlock_GetDecoratorByClass");
static_assert(sizeof(HierarchicalRichTextBlock_GetDecoratorByClass) == 0x000010, "Wrong size on HierarchicalRichTextBlock_GetDecoratorByClass");
static_assert(offsetof(HierarchicalRichTextBlock_GetDecoratorByClass, DecoratorClass) == 0x000000, "Member 'HierarchicalRichTextBlock_GetDecoratorByClass::DecoratorClass' has a wrong offset!");
static_assert(offsetof(HierarchicalRichTextBlock_GetDecoratorByClass, ReturnValue) == 0x000008, "Member 'HierarchicalRichTextBlock_GetDecoratorByClass::ReturnValue' has a wrong offset!");

// Function Brickadia.HierarchicalRichTextBlock.SetText
// 0x0010 (0x0010 - 0x0000)
struct HierarchicalRichTextBlock_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HierarchicalRichTextBlock_SetText) == 0x000008, "Wrong alignment on HierarchicalRichTextBlock_SetText");
static_assert(sizeof(HierarchicalRichTextBlock_SetText) == 0x000010, "Wrong size on HierarchicalRichTextBlock_SetText");
static_assert(offsetof(HierarchicalRichTextBlock_SetText, InText) == 0x000000, "Member 'HierarchicalRichTextBlock_SetText::InText' has a wrong offset!");

// Function Brickadia.BrickLoadSaveFileScreenshotAsyncAction.AsyncLoadSaveFileScreenshot
// 0x0030 (0x0030 - 0x0000)
struct BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSequence;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredWidth;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredHeight;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickLoadSaveFileScreenshotAsyncAction* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot) == 0x000008, "Wrong alignment on BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot");
static_assert(sizeof(BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot) == 0x000030, "Wrong size on BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot");
static_assert(offsetof(BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot, WorldContextObject) == 0x000000, "Member 'BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot, InSequence) == 0x000008, "Member 'BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot::InSequence' has a wrong offset!");
static_assert(offsetof(BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot, Path) == 0x000010, "Member 'BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot::Path' has a wrong offset!");
static_assert(offsetof(BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot, DesiredWidth) == 0x000020, "Member 'BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot::DesiredWidth' has a wrong offset!");
static_assert(offsetof(BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot, DesiredHeight) == 0x000024, "Member 'BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot::DesiredHeight' has a wrong offset!");
static_assert(offsetof(BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot, ReturnValue) == 0x000028, "Member 'BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickGetSaveFileDetailsAsyncAction.AsyncGetSaveFileDetails
// 0x0028 (0x0028 - 0x0000)
struct BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSequence;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickGetSaveFileDetailsAsyncAction*    ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails) == 0x000008, "Wrong alignment on BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails");
static_assert(sizeof(BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails) == 0x000028, "Wrong size on BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails");
static_assert(offsetof(BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails, WorldContextObject) == 0x000000, "Member 'BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails, InSequence) == 0x000008, "Member 'BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails::InSequence' has a wrong offset!");
static_assert(offsetof(BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails, Path) == 0x000010, "Member 'BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails::Path' has a wrong offset!");
static_assert(offsetof(BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails, ReturnValue) == 0x000020, "Member 'BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails::ReturnValue' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_AutoSave.SetAnnounceAutoSave
// 0x0001 (0x0001 - 0x0000)
struct BRServerSettingsBase_AutoSave_SetAnnounceAutoSave final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_AutoSave_SetAnnounceAutoSave) == 0x000001, "Wrong alignment on BRServerSettingsBase_AutoSave_SetAnnounceAutoSave");
static_assert(sizeof(BRServerSettingsBase_AutoSave_SetAnnounceAutoSave) == 0x000001, "Wrong size on BRServerSettingsBase_AutoSave_SetAnnounceAutoSave");
static_assert(offsetof(BRServerSettingsBase_AutoSave_SetAnnounceAutoSave, bValue) == 0x000000, "Member 'BRServerSettingsBase_AutoSave_SetAnnounceAutoSave::bValue' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_AutoSave.SetAutoSaveInterval
// 0x0004 (0x0004 - 0x0000)
struct BRServerSettingsBase_AutoSave_SetAutoSaveInterval final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_AutoSave_SetAutoSaveInterval) == 0x000004, "Wrong alignment on BRServerSettingsBase_AutoSave_SetAutoSaveInterval");
static_assert(sizeof(BRServerSettingsBase_AutoSave_SetAutoSaveInterval) == 0x000004, "Wrong size on BRServerSettingsBase_AutoSave_SetAutoSaveInterval");
static_assert(offsetof(BRServerSettingsBase_AutoSave_SetAutoSaveInterval, Value) == 0x000000, "Member 'BRServerSettingsBase_AutoSave_SetAutoSaveInterval::Value' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_AutoSave.SetEnableAutoSave
// 0x0001 (0x0001 - 0x0000)
struct BRServerSettingsBase_AutoSave_SetEnableAutoSave final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_AutoSave_SetEnableAutoSave) == 0x000001, "Wrong alignment on BRServerSettingsBase_AutoSave_SetEnableAutoSave");
static_assert(sizeof(BRServerSettingsBase_AutoSave_SetEnableAutoSave) == 0x000001, "Wrong size on BRServerSettingsBase_AutoSave_SetEnableAutoSave");
static_assert(offsetof(BRServerSettingsBase_AutoSave_SetEnableAutoSave, bValue) == 0x000000, "Member 'BRServerSettingsBase_AutoSave_SetEnableAutoSave::bValue' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_AutoSave.SetIncludeScreenshot
// 0x0001 (0x0001 - 0x0000)
struct BRServerSettingsBase_AutoSave_SetIncludeScreenshot final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_AutoSave_SetIncludeScreenshot) == 0x000001, "Wrong alignment on BRServerSettingsBase_AutoSave_SetIncludeScreenshot");
static_assert(sizeof(BRServerSettingsBase_AutoSave_SetIncludeScreenshot) == 0x000001, "Wrong size on BRServerSettingsBase_AutoSave_SetIncludeScreenshot");
static_assert(offsetof(BRServerSettingsBase_AutoSave_SetIncludeScreenshot, bValue) == 0x000000, "Member 'BRServerSettingsBase_AutoSave_SetIncludeScreenshot::bValue' has a wrong offset!");

// Function Brickadia.BrickListSaveFolderContentItemsAsyncAction.AsyncListSaveFolderContentItems
// 0x0028 (0x0028 - 0x0000)
struct BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSequence;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickListSaveFolderContentItemsAsyncAction* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems) == 0x000008, "Wrong alignment on BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems");
static_assert(sizeof(BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems) == 0x000028, "Wrong size on BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems");
static_assert(offsetof(BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems, WorldContextObject) == 0x000000, "Member 'BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems, InSequence) == 0x000008, "Member 'BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems::InSequence' has a wrong offset!");
static_assert(offsetof(BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems, Path) == 0x000010, "Member 'BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems::Path' has a wrong offset!");
static_assert(offsetof(BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems, ReturnValue) == 0x000020, "Member 'BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.HandleServerRemapColors
// 0x0050 (0x0050 - 0x0000)
struct BrickTransactionManagerComponent_HandleServerRemapColors final
{
public:
	TMap<struct FColor, struct FColor>            Mappings;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_HandleServerRemapColors) == 0x000008, "Wrong alignment on BrickTransactionManagerComponent_HandleServerRemapColors");
static_assert(sizeof(BrickTransactionManagerComponent_HandleServerRemapColors) == 0x000050, "Wrong size on BrickTransactionManagerComponent_HandleServerRemapColors");
static_assert(offsetof(BrickTransactionManagerComponent_HandleServerRemapColors, Mappings) == 0x000000, "Member 'BrickTransactionManagerComponent_HandleServerRemapColors::Mappings' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.PushNewTransaction
// 0x0018 (0x0018 - 0x0000)
struct BrickTransactionManagerComponent_PushNewTransaction final
{
public:
	class UBrickTransaction*                      Transaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickReverseTransactionMergeMode             MergeMode;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OptionalMergeTag;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferInitialTick;                                 // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCompleteImmediately;                         // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickTransactionTickResult                   OutInitialTickResult;                              // 0x0016(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickTransactionManagerComponent_PushNewTransaction) == 0x000008, "Wrong alignment on BrickTransactionManagerComponent_PushNewTransaction");
static_assert(sizeof(BrickTransactionManagerComponent_PushNewTransaction) == 0x000018, "Wrong size on BrickTransactionManagerComponent_PushNewTransaction");
static_assert(offsetof(BrickTransactionManagerComponent_PushNewTransaction, Transaction) == 0x000000, "Member 'BrickTransactionManagerComponent_PushNewTransaction::Transaction' has a wrong offset!");
static_assert(offsetof(BrickTransactionManagerComponent_PushNewTransaction, MergeMode) == 0x000008, "Member 'BrickTransactionManagerComponent_PushNewTransaction::MergeMode' has a wrong offset!");
static_assert(offsetof(BrickTransactionManagerComponent_PushNewTransaction, OptionalMergeTag) == 0x00000C, "Member 'BrickTransactionManagerComponent_PushNewTransaction::OptionalMergeTag' has a wrong offset!");
static_assert(offsetof(BrickTransactionManagerComponent_PushNewTransaction, bDeferInitialTick) == 0x000014, "Member 'BrickTransactionManagerComponent_PushNewTransaction::bDeferInitialTick' has a wrong offset!");
static_assert(offsetof(BrickTransactionManagerComponent_PushNewTransaction, bForceCompleteImmediately) == 0x000015, "Member 'BrickTransactionManagerComponent_PushNewTransaction::bForceCompleteImmediately' has a wrong offset!");
static_assert(offsetof(BrickTransactionManagerComponent_PushNewTransaction, OutInitialTickResult) == 0x000016, "Member 'BrickTransactionManagerComponent_PushNewTransaction::OutInitialTickResult' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.PushTransactionContext
// 0x0008 (0x0008 - 0x0000)
struct BrickTransactionManagerComponent_PushTransactionContext final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_PushTransactionContext) == 0x000004, "Wrong alignment on BrickTransactionManagerComponent_PushTransactionContext");
static_assert(sizeof(BrickTransactionManagerComponent_PushTransactionContext) == 0x000008, "Wrong size on BrickTransactionManagerComponent_PushTransactionContext");
static_assert(offsetof(BrickTransactionManagerComponent_PushTransactionContext, Name_0) == 0x000000, "Member 'BrickTransactionManagerComponent_PushTransactionContext::Name_0' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.TryRedoTransaction
// 0x0003 (0x0003 - 0x0000)
struct BrickTransactionManagerComponent_TryRedoTransaction final
{
public:
	bool                                          bDeferInitialTick;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCompleteImmediately;                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickTransactionTickResult                   OutInitialTickResult;                              // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_TryRedoTransaction) == 0x000001, "Wrong alignment on BrickTransactionManagerComponent_TryRedoTransaction");
static_assert(sizeof(BrickTransactionManagerComponent_TryRedoTransaction) == 0x000003, "Wrong size on BrickTransactionManagerComponent_TryRedoTransaction");
static_assert(offsetof(BrickTransactionManagerComponent_TryRedoTransaction, bDeferInitialTick) == 0x000000, "Member 'BrickTransactionManagerComponent_TryRedoTransaction::bDeferInitialTick' has a wrong offset!");
static_assert(offsetof(BrickTransactionManagerComponent_TryRedoTransaction, bForceCompleteImmediately) == 0x000001, "Member 'BrickTransactionManagerComponent_TryRedoTransaction::bForceCompleteImmediately' has a wrong offset!");
static_assert(offsetof(BrickTransactionManagerComponent_TryRedoTransaction, OutInitialTickResult) == 0x000002, "Member 'BrickTransactionManagerComponent_TryRedoTransaction::OutInitialTickResult' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.TryUndoTransaction
// 0x0003 (0x0003 - 0x0000)
struct BrickTransactionManagerComponent_TryUndoTransaction final
{
public:
	bool                                          bDeferInitialTick;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCompleteImmediately;                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickTransactionTickResult                   OutInitialTickResult;                              // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_TryUndoTransaction) == 0x000001, "Wrong alignment on BrickTransactionManagerComponent_TryUndoTransaction");
static_assert(sizeof(BrickTransactionManagerComponent_TryUndoTransaction) == 0x000003, "Wrong size on BrickTransactionManagerComponent_TryUndoTransaction");
static_assert(offsetof(BrickTransactionManagerComponent_TryUndoTransaction, bDeferInitialTick) == 0x000000, "Member 'BrickTransactionManagerComponent_TryUndoTransaction::bDeferInitialTick' has a wrong offset!");
static_assert(offsetof(BrickTransactionManagerComponent_TryUndoTransaction, bForceCompleteImmediately) == 0x000001, "Member 'BrickTransactionManagerComponent_TryUndoTransaction::bForceCompleteImmediately' has a wrong offset!");
static_assert(offsetof(BrickTransactionManagerComponent_TryUndoTransaction, OutInitialTickResult) == 0x000002, "Member 'BrickTransactionManagerComponent_TryUndoTransaction::OutInitialTickResult' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.AppendPendingCustomInformation
// 0x0010 (0x0010 - 0x0000)
struct BrickTransactionManagerComponent_AppendPendingCustomInformation final
{
public:
	TArray<class FText>                           OutReportLines;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_AppendPendingCustomInformation) == 0x000008, "Wrong alignment on BrickTransactionManagerComponent_AppendPendingCustomInformation");
static_assert(sizeof(BrickTransactionManagerComponent_AppendPendingCustomInformation) == 0x000010, "Wrong size on BrickTransactionManagerComponent_AppendPendingCustomInformation");
static_assert(offsetof(BrickTransactionManagerComponent_AppendPendingCustomInformation, OutReportLines) == 0x000000, "Member 'BrickTransactionManagerComponent_AppendPendingCustomInformation::OutReportLines' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.AppendPendingErrorInformation
// 0x0010 (0x0010 - 0x0000)
struct BrickTransactionManagerComponent_AppendPendingErrorInformation final
{
public:
	TArray<class FText>                           OutReportLines;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_AppendPendingErrorInformation) == 0x000008, "Wrong alignment on BrickTransactionManagerComponent_AppendPendingErrorInformation");
static_assert(sizeof(BrickTransactionManagerComponent_AppendPendingErrorInformation) == 0x000010, "Wrong size on BrickTransactionManagerComponent_AppendPendingErrorInformation");
static_assert(offsetof(BrickTransactionManagerComponent_AppendPendingErrorInformation, OutReportLines) == 0x000000, "Member 'BrickTransactionManagerComponent_AppendPendingErrorInformation::OutReportLines' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.AppendPendingStatusInformation
// 0x0010 (0x0010 - 0x0000)
struct BrickTransactionManagerComponent_AppendPendingStatusInformation final
{
public:
	TArray<class FText>                           OutReportLines;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_AppendPendingStatusInformation) == 0x000008, "Wrong alignment on BrickTransactionManagerComponent_AppendPendingStatusInformation");
static_assert(sizeof(BrickTransactionManagerComponent_AppendPendingStatusInformation) == 0x000010, "Wrong size on BrickTransactionManagerComponent_AppendPendingStatusInformation");
static_assert(offsetof(BrickTransactionManagerComponent_AppendPendingStatusInformation, OutReportLines) == 0x000000, "Member 'BrickTransactionManagerComponent_AppendPendingStatusInformation::OutReportLines' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.CanRedoTransaction
// 0x0001 (0x0001 - 0x0000)
struct BrickTransactionManagerComponent_CanRedoTransaction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_CanRedoTransaction) == 0x000001, "Wrong alignment on BrickTransactionManagerComponent_CanRedoTransaction");
static_assert(sizeof(BrickTransactionManagerComponent_CanRedoTransaction) == 0x000001, "Wrong size on BrickTransactionManagerComponent_CanRedoTransaction");
static_assert(offsetof(BrickTransactionManagerComponent_CanRedoTransaction, ReturnValue) == 0x000000, "Member 'BrickTransactionManagerComponent_CanRedoTransaction::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.CanUndoTransaction
// 0x0001 (0x0001 - 0x0000)
struct BrickTransactionManagerComponent_CanUndoTransaction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_CanUndoTransaction) == 0x000001, "Wrong alignment on BrickTransactionManagerComponent_CanUndoTransaction");
static_assert(sizeof(BrickTransactionManagerComponent_CanUndoTransaction) == 0x000001, "Wrong size on BrickTransactionManagerComponent_CanUndoTransaction");
static_assert(offsetof(BrickTransactionManagerComponent_CanUndoTransaction, ReturnValue) == 0x000000, "Member 'BrickTransactionManagerComponent_CanUndoTransaction::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.GetCurrentTransactionContextName
// 0x0008 (0x0008 - 0x0000)
struct BrickTransactionManagerComponent_GetCurrentTransactionContextName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_GetCurrentTransactionContextName) == 0x000004, "Wrong alignment on BrickTransactionManagerComponent_GetCurrentTransactionContextName");
static_assert(sizeof(BrickTransactionManagerComponent_GetCurrentTransactionContextName) == 0x000008, "Wrong size on BrickTransactionManagerComponent_GetCurrentTransactionContextName");
static_assert(offsetof(BrickTransactionManagerComponent_GetCurrentTransactionContextName, ReturnValue) == 0x000000, "Member 'BrickTransactionManagerComponent_GetCurrentTransactionContextName::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.GetState
// 0x0001 (0x0001 - 0x0000)
struct BrickTransactionManagerComponent_GetState final
{
public:
	EBrickTransactionManagerState                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_GetState) == 0x000001, "Wrong alignment on BrickTransactionManagerComponent_GetState");
static_assert(sizeof(BrickTransactionManagerComponent_GetState) == 0x000001, "Wrong size on BrickTransactionManagerComponent_GetState");
static_assert(offsetof(BrickTransactionManagerComponent_GetState, ReturnValue) == 0x000000, "Member 'BrickTransactionManagerComponent_GetState::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickTransactionManagerComponent.IsIdle
// 0x0001 (0x0001 - 0x0000)
struct BrickTransactionManagerComponent_IsIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionManagerComponent_IsIdle) == 0x000001, "Wrong alignment on BrickTransactionManagerComponent_IsIdle");
static_assert(sizeof(BrickTransactionManagerComponent_IsIdle) == 0x000001, "Wrong size on BrickTransactionManagerComponent_IsIdle");
static_assert(offsetof(BrickTransactionManagerComponent_IsIdle, ReturnValue) == 0x000000, "Member 'BrickTransactionManagerComponent_IsIdle::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickTransaction.AddAction
// 0x0004 (0x0004 - 0x0000)
struct BrickTransaction_AddAction final
{
public:
	int32                                         Action;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransaction_AddAction) == 0x000004, "Wrong alignment on BrickTransaction_AddAction");
static_assert(sizeof(BrickTransaction_AddAction) == 0x000004, "Wrong size on BrickTransaction_AddAction");
static_assert(offsetof(BrickTransaction_AddAction, Action) == 0x000000, "Member 'BrickTransaction_AddAction::Action' has a wrong offset!");

// Function Brickadia.BrickTransaction.HasAnyWork
// 0x0001 (0x0001 - 0x0000)
struct BrickTransaction_HasAnyWork final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransaction_HasAnyWork) == 0x000001, "Wrong alignment on BrickTransaction_HasAnyWork");
static_assert(sizeof(BrickTransaction_HasAnyWork) == 0x000001, "Wrong size on BrickTransaction_HasAnyWork");
static_assert(offsetof(BrickTransaction_HasAnyWork, ReturnValue) == 0x000000, "Member 'BrickTransaction_HasAnyWork::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPresetSubsystem.ValidatePresetName
// 0x0018 (0x0018 - 0x0000)
struct BRPresetSubsystem_ValidatePresetName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPresetSubsystem_ValidatePresetName) == 0x000008, "Wrong alignment on BRPresetSubsystem_ValidatePresetName");
static_assert(sizeof(BRPresetSubsystem_ValidatePresetName) == 0x000018, "Wrong size on BRPresetSubsystem_ValidatePresetName");
static_assert(offsetof(BRPresetSubsystem_ValidatePresetName, Name_0) == 0x000000, "Member 'BRPresetSubsystem_ValidatePresetName::Name_0' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_ValidatePresetName, ReturnValue) == 0x000010, "Member 'BRPresetSubsystem_ValidatePresetName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPresetSubsystem.CreatePreset
// 0x0020 (0x0020 - 0x0000)
struct BRPresetSubsystem_CreatePreset final
{
public:
	class UBRPresetDescriptor*                    Descriptor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRPreset*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPresetSubsystem_CreatePreset) == 0x000008, "Wrong alignment on BRPresetSubsystem_CreatePreset");
static_assert(sizeof(BRPresetSubsystem_CreatePreset) == 0x000020, "Wrong size on BRPresetSubsystem_CreatePreset");
static_assert(offsetof(BRPresetSubsystem_CreatePreset, Descriptor) == 0x000000, "Member 'BRPresetSubsystem_CreatePreset::Descriptor' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_CreatePreset, Name_0) == 0x000008, "Member 'BRPresetSubsystem_CreatePreset::Name_0' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_CreatePreset, ReturnValue) == 0x000018, "Member 'BRPresetSubsystem_CreatePreset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPresetSubsystem.DeletePreset
// 0x0010 (0x0010 - 0x0000)
struct BRPresetSubsystem_DeletePreset final
{
public:
	class UBRPreset*                              Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPresetSubsystem_DeletePreset) == 0x000008, "Wrong alignment on BRPresetSubsystem_DeletePreset");
static_assert(sizeof(BRPresetSubsystem_DeletePreset) == 0x000010, "Wrong size on BRPresetSubsystem_DeletePreset");
static_assert(offsetof(BRPresetSubsystem_DeletePreset, Preset) == 0x000000, "Member 'BRPresetSubsystem_DeletePreset::Preset' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_DeletePreset, ReturnValue) == 0x000008, "Member 'BRPresetSubsystem_DeletePreset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPresetSubsystem.GetPreset
// 0x0020 (0x0020 - 0x0000)
struct BRPresetSubsystem_GetPreset final
{
public:
	class UBRPresetDescriptor*                    Descriptor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRPreset*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPresetSubsystem_GetPreset) == 0x000008, "Wrong alignment on BRPresetSubsystem_GetPreset");
static_assert(sizeof(BRPresetSubsystem_GetPreset) == 0x000020, "Wrong size on BRPresetSubsystem_GetPreset");
static_assert(offsetof(BRPresetSubsystem_GetPreset, Descriptor) == 0x000000, "Member 'BRPresetSubsystem_GetPreset::Descriptor' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_GetPreset, Name_0) == 0x000008, "Member 'BRPresetSubsystem_GetPreset::Name_0' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_GetPreset, ReturnValue) == 0x000018, "Member 'BRPresetSubsystem_GetPreset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPresetSubsystem.GetPresetDescriptor
// 0x0010 (0x0010 - 0x0000)
struct BRPresetSubsystem_GetPresetDescriptor final
{
public:
	class FName                                   DescriptorName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRPresetDescriptor*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPresetSubsystem_GetPresetDescriptor) == 0x000008, "Wrong alignment on BRPresetSubsystem_GetPresetDescriptor");
static_assert(sizeof(BRPresetSubsystem_GetPresetDescriptor) == 0x000010, "Wrong size on BRPresetSubsystem_GetPresetDescriptor");
static_assert(offsetof(BRPresetSubsystem_GetPresetDescriptor, DescriptorName) == 0x000000, "Member 'BRPresetSubsystem_GetPresetDescriptor::DescriptorName' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_GetPresetDescriptor, ReturnValue) == 0x000008, "Member 'BRPresetSubsystem_GetPresetDescriptor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPresetSubsystem.GetPresetDescriptors
// 0x0010 (0x0010 - 0x0000)
struct BRPresetSubsystem_GetPresetDescriptors final
{
public:
	TArray<class UBRPresetDescriptor*>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPresetSubsystem_GetPresetDescriptors) == 0x000008, "Wrong alignment on BRPresetSubsystem_GetPresetDescriptors");
static_assert(sizeof(BRPresetSubsystem_GetPresetDescriptors) == 0x000010, "Wrong size on BRPresetSubsystem_GetPresetDescriptors");
static_assert(offsetof(BRPresetSubsystem_GetPresetDescriptors, ReturnValue) == 0x000000, "Member 'BRPresetSubsystem_GetPresetDescriptors::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPresetSubsystem.GetPresetsByType
// 0x0018 (0x0018 - 0x0000)
struct BRPresetSubsystem_GetPresetsByType final
{
public:
	class UBRPresetDescriptor*                    Descriptor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBRPreset*>                      OutPresets;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPresetSubsystem_GetPresetsByType) == 0x000008, "Wrong alignment on BRPresetSubsystem_GetPresetsByType");
static_assert(sizeof(BRPresetSubsystem_GetPresetsByType) == 0x000018, "Wrong size on BRPresetSubsystem_GetPresetsByType");
static_assert(offsetof(BRPresetSubsystem_GetPresetsByType, Descriptor) == 0x000000, "Member 'BRPresetSubsystem_GetPresetsByType::Descriptor' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_GetPresetsByType, OutPresets) == 0x000008, "Member 'BRPresetSubsystem_GetPresetsByType::OutPresets' has a wrong offset!");

// Function Brickadia.BRPresetSubsystem.HasPreset
// 0x0020 (0x0020 - 0x0000)
struct BRPresetSubsystem_HasPreset final
{
public:
	const class UBRPresetDescriptor*              Descriptor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPresetSubsystem_HasPreset) == 0x000008, "Wrong alignment on BRPresetSubsystem_HasPreset");
static_assert(sizeof(BRPresetSubsystem_HasPreset) == 0x000020, "Wrong size on BRPresetSubsystem_HasPreset");
static_assert(offsetof(BRPresetSubsystem_HasPreset, Descriptor) == 0x000000, "Member 'BRPresetSubsystem_HasPreset::Descriptor' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_HasPreset, Name_0) == 0x000008, "Member 'BRPresetSubsystem_HasPreset::Name_0' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_HasPreset, ReturnValue) == 0x000018, "Member 'BRPresetSubsystem_HasPreset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPresetSubsystem.RenamePreset
// 0x0020 (0x0020 - 0x0000)
struct BRPresetSubsystem_RenamePreset final
{
public:
	class UBRPreset*                              Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPresetSubsystem_RenamePreset) == 0x000008, "Wrong alignment on BRPresetSubsystem_RenamePreset");
static_assert(sizeof(BRPresetSubsystem_RenamePreset) == 0x000020, "Wrong size on BRPresetSubsystem_RenamePreset");
static_assert(offsetof(BRPresetSubsystem_RenamePreset, Preset) == 0x000000, "Member 'BRPresetSubsystem_RenamePreset::Preset' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_RenamePreset, NewName) == 0x000008, "Member 'BRPresetSubsystem_RenamePreset::NewName' has a wrong offset!");
static_assert(offsetof(BRPresetSubsystem_RenamePreset, ReturnValue) == 0x000018, "Member 'BRPresetSubsystem_RenamePreset::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickTransactionLibrary.AppendApplicatorPaste
// 0x0040 (0x0040 - 0x0000)
struct BrickTransactionLibrary_AppendApplicatorPaste final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickTransaction*                      Transaction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewVisibility;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickCollisionChannels                       NewCollisionChannels;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBrickComponentTypeBase*>        NewComponentTypes;                                 // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FInspectorPropertyChangelist>   NewComponentChangelists;                           // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionLibrary_AppendApplicatorPaste) == 0x000008, "Wrong alignment on BrickTransactionLibrary_AppendApplicatorPaste");
static_assert(sizeof(BrickTransactionLibrary_AppendApplicatorPaste) == 0x000040, "Wrong size on BrickTransactionLibrary_AppendApplicatorPaste");
static_assert(offsetof(BrickTransactionLibrary_AppendApplicatorPaste, WorldContext) == 0x000000, "Member 'BrickTransactionLibrary_AppendApplicatorPaste::WorldContext' has a wrong offset!");
static_assert(offsetof(BrickTransactionLibrary_AppendApplicatorPaste, Transaction) == 0x000008, "Member 'BrickTransactionLibrary_AppendApplicatorPaste::Transaction' has a wrong offset!");
static_assert(offsetof(BrickTransactionLibrary_AppendApplicatorPaste, BrickHandle) == 0x000010, "Member 'BrickTransactionLibrary_AppendApplicatorPaste::BrickHandle' has a wrong offset!");
static_assert(offsetof(BrickTransactionLibrary_AppendApplicatorPaste, bNewVisibility) == 0x000018, "Member 'BrickTransactionLibrary_AppendApplicatorPaste::bNewVisibility' has a wrong offset!");
static_assert(offsetof(BrickTransactionLibrary_AppendApplicatorPaste, NewCollisionChannels) == 0x000019, "Member 'BrickTransactionLibrary_AppendApplicatorPaste::NewCollisionChannels' has a wrong offset!");
static_assert(offsetof(BrickTransactionLibrary_AppendApplicatorPaste, NewComponentTypes) == 0x000020, "Member 'BrickTransactionLibrary_AppendApplicatorPaste::NewComponentTypes' has a wrong offset!");
static_assert(offsetof(BrickTransactionLibrary_AppendApplicatorPaste, NewComponentChangelists) == 0x000030, "Member 'BrickTransactionLibrary_AppendApplicatorPaste::NewComponentChangelists' has a wrong offset!");

// Function Brickadia.BrickTransactionLibrary.AppendDeletes
// 0x0018 (0x0018 - 0x0000)
struct BrickTransactionLibrary_AppendDeletes final
{
public:
	class UBrickTransaction*                      Transaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBrickPersistentHandle>         PersistentHandles;                                 // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTransactionLibrary_AppendDeletes) == 0x000008, "Wrong alignment on BrickTransactionLibrary_AppendDeletes");
static_assert(sizeof(BrickTransactionLibrary_AppendDeletes) == 0x000018, "Wrong size on BrickTransactionLibrary_AppendDeletes");
static_assert(offsetof(BrickTransactionLibrary_AppendDeletes, Transaction) == 0x000000, "Member 'BrickTransactionLibrary_AppendDeletes::Transaction' has a wrong offset!");
static_assert(offsetof(BrickTransactionLibrary_AppendDeletes, PersistentHandles) == 0x000008, "Member 'BrickTransactionLibrary_AppendDeletes::PersistentHandles' has a wrong offset!");

// Function Brickadia.BrickType.FindBestStudGroupIndex
// 0x0008 (0x0008 - 0x0000)
struct BrickType_FindBestStudGroupIndex final
{
public:
	EBrickAnchorType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickType_FindBestStudGroupIndex) == 0x000004, "Wrong alignment on BrickType_FindBestStudGroupIndex");
static_assert(sizeof(BrickType_FindBestStudGroupIndex) == 0x000008, "Wrong size on BrickType_FindBestStudGroupIndex");
static_assert(offsetof(BrickType_FindBestStudGroupIndex, Type) == 0x000000, "Member 'BrickType_FindBestStudGroupIndex::Type' has a wrong offset!");
static_assert(offsetof(BrickType_FindBestStudGroupIndex, ReturnValue) == 0x000004, "Member 'BrickType_FindBestStudGroupIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickType.GetBrickAsset
// 0x0008 (0x0008 - 0x0000)
struct BrickType_GetBrickAsset final
{
public:
	class UBrickAsset*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickType_GetBrickAsset) == 0x000008, "Wrong alignment on BrickType_GetBrickAsset");
static_assert(sizeof(BrickType_GetBrickAsset) == 0x000008, "Wrong size on BrickType_GetBrickAsset");
static_assert(offsetof(BrickType_GetBrickAsset, ReturnValue) == 0x000000, "Member 'BrickType_GetBrickAsset::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickType.GetBrickSize
// 0x000C (0x000C - 0x0000)
struct BrickType_GetBrickSize final
{
public:
	struct FIntVector                             ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickType_GetBrickSize) == 0x000004, "Wrong alignment on BrickType_GetBrickSize");
static_assert(sizeof(BrickType_GetBrickSize) == 0x00000C, "Wrong size on BrickType_GetBrickSize");
static_assert(offsetof(BrickType_GetBrickSize, ReturnValue) == 0x000000, "Member 'BrickType_GetBrickSize::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickType.GetHalfSize
// 0x000C (0x000C - 0x0000)
struct BrickType_GetHalfSize final
{
public:
	struct FIntVector                             ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickType_GetHalfSize) == 0x000004, "Wrong alignment on BrickType_GetHalfSize");
static_assert(sizeof(BrickType_GetHalfSize) == 0x00000C, "Wrong size on BrickType_GetHalfSize");
static_assert(offsetof(BrickType_GetHalfSize, ReturnValue) == 0x000000, "Member 'BrickType_GetHalfSize::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWeaponAnimInstance.GetFigureIsValid
// 0x0001 (0x0001 - 0x0000)
struct BRWeaponAnimInstance_GetFigureIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponAnimInstance_GetFigureIsValid) == 0x000001, "Wrong alignment on BRWeaponAnimInstance_GetFigureIsValid");
static_assert(sizeof(BRWeaponAnimInstance_GetFigureIsValid) == 0x000001, "Wrong size on BRWeaponAnimInstance_GetFigureIsValid");
static_assert(offsetof(BRWeaponAnimInstance_GetFigureIsValid, ReturnValue) == 0x000000, "Member 'BRWeaponAnimInstance_GetFigureIsValid::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWeaponAnimInstance.GetLeftHandSocketTransform
// 0x0060 (0x0060 - 0x0000)
struct BRWeaponAnimInstance_GetLeftHandSocketTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponAnimInstance_GetLeftHandSocketTransform) == 0x000010, "Wrong alignment on BRWeaponAnimInstance_GetLeftHandSocketTransform");
static_assert(sizeof(BRWeaponAnimInstance_GetLeftHandSocketTransform) == 0x000060, "Wrong size on BRWeaponAnimInstance_GetLeftHandSocketTransform");
static_assert(offsetof(BRWeaponAnimInstance_GetLeftHandSocketTransform, ReturnValue) == 0x000000, "Member 'BRWeaponAnimInstance_GetLeftHandSocketTransform::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTabWidget.SetTabEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRTabWidget_SetTabEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTabWidget_SetTabEnabled) == 0x000001, "Wrong alignment on BRTabWidget_SetTabEnabled");
static_assert(sizeof(BRTabWidget_SetTabEnabled) == 0x000001, "Wrong size on BRTabWidget_SetTabEnabled");
static_assert(offsetof(BRTabWidget_SetTabEnabled, bEnabled) == 0x000000, "Member 'BRTabWidget_SetTabEnabled::bEnabled' has a wrong offset!");

// Function Brickadia.BRTabWidget.SetTabIcon
// 0x0008 (0x0008 - 0x0000)
struct BRTabWidget_SetTabIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTabWidget_SetTabIcon) == 0x000008, "Wrong alignment on BRTabWidget_SetTabIcon");
static_assert(sizeof(BRTabWidget_SetTabIcon) == 0x000008, "Wrong size on BRTabWidget_SetTabIcon");
static_assert(offsetof(BRTabWidget_SetTabIcon, Icon) == 0x000000, "Member 'BRTabWidget_SetTabIcon::Icon' has a wrong offset!");

// Function Brickadia.BRTabWidget.SetTabText
// 0x0010 (0x0010 - 0x0000)
struct BRTabWidget_SetTabText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTabWidget_SetTabText) == 0x000008, "Wrong alignment on BRTabWidget_SetTabText");
static_assert(sizeof(BRTabWidget_SetTabText) == 0x000010, "Wrong size on BRTabWidget_SetTabText");
static_assert(offsetof(BRTabWidget_SetTabText, Text) == 0x000000, "Member 'BRTabWidget_SetTabText::Text' has a wrong offset!");

// Function Brickadia.BRTabWidget.SetTabVisiblySelected
// 0x0001 (0x0001 - 0x0000)
struct BRTabWidget_SetTabVisiblySelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTabWidget_SetTabVisiblySelected) == 0x000001, "Wrong alignment on BRTabWidget_SetTabVisiblySelected");
static_assert(sizeof(BRTabWidget_SetTabVisiblySelected) == 0x000001, "Wrong size on BRTabWidget_SetTabVisiblySelected");
static_assert(offsetof(BRTabWidget_SetTabVisiblySelected, bSelected) == 0x000000, "Member 'BRTabWidget_SetTabVisiblySelected::bSelected' has a wrong offset!");

// Function Brickadia.BRTabWidget.GetTabEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRTabWidget_GetTabEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTabWidget_GetTabEnabled) == 0x000001, "Wrong alignment on BRTabWidget_GetTabEnabled");
static_assert(sizeof(BRTabWidget_GetTabEnabled) == 0x000001, "Wrong size on BRTabWidget_GetTabEnabled");
static_assert(offsetof(BRTabWidget_GetTabEnabled, ReturnValue) == 0x000000, "Member 'BRTabWidget_GetTabEnabled::ReturnValue' has a wrong offset!");

// Function Brickadia.BRApplicatorHoverWidget.Setup
// 0x0008 (0x0008 - 0x0000)
struct BRApplicatorHoverWidget_Setup final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRApplicatorHoverWidget_Setup) == 0x000004, "Wrong alignment on BRApplicatorHoverWidget_Setup");
static_assert(sizeof(BRApplicatorHoverWidget_Setup) == 0x000008, "Wrong size on BRApplicatorHoverWidget_Setup");
static_assert(offsetof(BRApplicatorHoverWidget_Setup, BrickHandle) == 0x000000, "Member 'BRApplicatorHoverWidget_Setup::BrickHandle' has a wrong offset!");

// Function Brickadia.BRPlayerController.CheckBrickPermission
// 0x0038 (0x0038 - 0x0000)
struct BRPlayerController_CheckBrickPermission final
{
public:
	struct FBrickHandle                           Brick;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Permission;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NoPermissionMessage;                               // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   NoTrustMessage;                                    // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bMessageUnreliable;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_CheckBrickPermission) == 0x000008, "Wrong alignment on BRPlayerController_CheckBrickPermission");
static_assert(sizeof(BRPlayerController_CheckBrickPermission) == 0x000038, "Wrong size on BRPlayerController_CheckBrickPermission");
static_assert(offsetof(BRPlayerController_CheckBrickPermission, Brick) == 0x000000, "Member 'BRPlayerController_CheckBrickPermission::Brick' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckBrickPermission, Permission) == 0x000008, "Member 'BRPlayerController_CheckBrickPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckBrickPermission, NoPermissionMessage) == 0x000010, "Member 'BRPlayerController_CheckBrickPermission::NoPermissionMessage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckBrickPermission, NoTrustMessage) == 0x000020, "Member 'BRPlayerController_CheckBrickPermission::NoTrustMessage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckBrickPermission, bMessageUnreliable) == 0x000030, "Member 'BRPlayerController_CheckBrickPermission::bMessageUnreliable' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckBrickPermission, ReturnValue) == 0x000031, "Member 'BRPlayerController_CheckBrickPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.CheckEntityPermission
// 0x0038 (0x0038 - 0x0000)
struct BRPlayerController_CheckEntityPermission final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Permission;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NoPermissionMessage;                               // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   NoTrustMessage;                                    // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bMessageUnreliable;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_CheckEntityPermission) == 0x000008, "Wrong alignment on BRPlayerController_CheckEntityPermission");
static_assert(sizeof(BRPlayerController_CheckEntityPermission) == 0x000038, "Wrong size on BRPlayerController_CheckEntityPermission");
static_assert(offsetof(BRPlayerController_CheckEntityPermission, ENTITY) == 0x000000, "Member 'BRPlayerController_CheckEntityPermission::ENTITY' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckEntityPermission, Permission) == 0x000008, "Member 'BRPlayerController_CheckEntityPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckEntityPermission, NoPermissionMessage) == 0x000010, "Member 'BRPlayerController_CheckEntityPermission::NoPermissionMessage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckEntityPermission, NoTrustMessage) == 0x000020, "Member 'BRPlayerController_CheckEntityPermission::NoTrustMessage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckEntityPermission, bMessageUnreliable) == 0x000030, "Member 'BRPlayerController_CheckEntityPermission::bMessageUnreliable' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckEntityPermission, ReturnValue) == 0x000031, "Member 'BRPlayerController_CheckEntityPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.CheckPermission
// 0x0020 (0x0020 - 0x0000)
struct BRPlayerController_CheckPermission final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NoPermissionMessage;                               // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bMessageUnreliable;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_CheckPermission) == 0x000008, "Wrong alignment on BRPlayerController_CheckPermission");
static_assert(sizeof(BRPlayerController_CheckPermission) == 0x000020, "Wrong size on BRPlayerController_CheckPermission");
static_assert(offsetof(BRPlayerController_CheckPermission, Permission) == 0x000000, "Member 'BRPlayerController_CheckPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckPermission, NoPermissionMessage) == 0x000008, "Member 'BRPlayerController_CheckPermission::NoPermissionMessage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckPermission, bMessageUnreliable) == 0x000018, "Member 'BRPlayerController_CheckPermission::bMessageUnreliable' has a wrong offset!");
static_assert(offsetof(BRPlayerController_CheckPermission, ReturnValue) == 0x000019, "Member 'BRPlayerController_CheckPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientAckSaveFileUpload
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_ClientAckSaveFileUpload final
{
public:
	bool                                          bBeginUpload;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientAckSaveFileUpload) == 0x000001, "Wrong alignment on BRPlayerController_ClientAckSaveFileUpload");
static_assert(sizeof(BRPlayerController_ClientAckSaveFileUpload) == 0x000001, "Wrong size on BRPlayerController_ClientAckSaveFileUpload");
static_assert(offsetof(BRPlayerController_ClientAckSaveFileUpload, bBeginUpload) == 0x000000, "Member 'BRPlayerController_ClientAckSaveFileUpload::bBeginUpload' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientInstigatedAccumulatedDamage
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_ClientInstigatedAccumulatedDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainsHeadshot;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainsKill;                                     // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainsBlocked;                                  // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_ClientInstigatedAccumulatedDamage) == 0x000004, "Wrong alignment on BRPlayerController_ClientInstigatedAccumulatedDamage");
static_assert(sizeof(BRPlayerController_ClientInstigatedAccumulatedDamage) == 0x000008, "Wrong size on BRPlayerController_ClientInstigatedAccumulatedDamage");
static_assert(offsetof(BRPlayerController_ClientInstigatedAccumulatedDamage, Damage) == 0x000000, "Member 'BRPlayerController_ClientInstigatedAccumulatedDamage::Damage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientInstigatedAccumulatedDamage, bContainsHeadshot) == 0x000004, "Member 'BRPlayerController_ClientInstigatedAccumulatedDamage::bContainsHeadshot' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientInstigatedAccumulatedDamage, bContainsKill) == 0x000005, "Member 'BRPlayerController_ClientInstigatedAccumulatedDamage::bContainsKill' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientInstigatedAccumulatedDamage, bContainsBlocked) == 0x000006, "Member 'BRPlayerController_ClientInstigatedAccumulatedDamage::bContainsBlocked' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientModifyTrustCacheEntry
// 0x0014 (0x0014 - 0x0000)
struct BRPlayerController_ClientModifyTrustCacheEntry final
{
public:
	struct FBRGuid                                OtherUserId;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrusted;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_ClientModifyTrustCacheEntry) == 0x000004, "Wrong alignment on BRPlayerController_ClientModifyTrustCacheEntry");
static_assert(sizeof(BRPlayerController_ClientModifyTrustCacheEntry) == 0x000014, "Wrong size on BRPlayerController_ClientModifyTrustCacheEntry");
static_assert(offsetof(BRPlayerController_ClientModifyTrustCacheEntry, OtherUserId) == 0x000000, "Member 'BRPlayerController_ClientModifyTrustCacheEntry::OtherUserId' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientModifyTrustCacheEntry, bTrusted) == 0x000010, "Member 'BRPlayerController_ClientModifyTrustCacheEntry::bTrusted' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientModifyTrustedByCacheEntry
// 0x0014 (0x0014 - 0x0000)
struct BRPlayerController_ClientModifyTrustedByCacheEntry final
{
public:
	struct FBRGuid                                OtherUserId;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrustedBy;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_ClientModifyTrustedByCacheEntry) == 0x000004, "Wrong alignment on BRPlayerController_ClientModifyTrustedByCacheEntry");
static_assert(sizeof(BRPlayerController_ClientModifyTrustedByCacheEntry) == 0x000014, "Wrong size on BRPlayerController_ClientModifyTrustedByCacheEntry");
static_assert(offsetof(BRPlayerController_ClientModifyTrustedByCacheEntry, OtherUserId) == 0x000000, "Member 'BRPlayerController_ClientModifyTrustedByCacheEntry::OtherUserId' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientModifyTrustedByCacheEntry, bTrustedBy) == 0x000010, "Member 'BRPlayerController_ClientModifyTrustedByCacheEntry::bTrustedBy' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientPlaySound2D
// 0x0020 (0x0020 - 0x0000)
struct BRPlayerController_ClientPlaySound2D final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientPlaySound2D) == 0x000008, "Wrong alignment on BRPlayerController_ClientPlaySound2D");
static_assert(sizeof(BRPlayerController_ClientPlaySound2D) == 0x000020, "Wrong size on BRPlayerController_ClientPlaySound2D");
static_assert(offsetof(BRPlayerController_ClientPlaySound2D, Sound) == 0x000000, "Member 'BRPlayerController_ClientPlaySound2D::Sound' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientPlaySound2D, VolumeMultiplier) == 0x000008, "Member 'BRPlayerController_ClientPlaySound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientPlaySound2D, PitchMultiplier) == 0x00000C, "Member 'BRPlayerController_ClientPlaySound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientPlaySound2D, StartTime) == 0x000010, "Member 'BRPlayerController_ClientPlaySound2D::StartTime' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientPlaySound2D, ConcurrencySettings) == 0x000018, "Member 'BRPlayerController_ClientPlaySound2D::ConcurrencySettings' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientPushChatMessage
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_ClientPushChatMessage final
{
public:
	class FString                                 ChatMessage;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientPushChatMessage) == 0x000008, "Wrong alignment on BRPlayerController_ClientPushChatMessage");
static_assert(sizeof(BRPlayerController_ClientPushChatMessage) == 0x000010, "Wrong size on BRPlayerController_ClientPushChatMessage");
static_assert(offsetof(BRPlayerController_ClientPushChatMessage, ChatMessage) == 0x000000, "Member 'BRPlayerController_ClientPushChatMessage::ChatMessage' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientPushPlayerChatMessage
// 0x0028 (0x0028 - 0x0000)
struct BRPlayerController_ClientPushPlayerChatMessage final
{
public:
	class FString                                 FormattedChatMessage;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RawChatMessage;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         SenderState;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientPushPlayerChatMessage) == 0x000008, "Wrong alignment on BRPlayerController_ClientPushPlayerChatMessage");
static_assert(sizeof(BRPlayerController_ClientPushPlayerChatMessage) == 0x000028, "Wrong size on BRPlayerController_ClientPushPlayerChatMessage");
static_assert(offsetof(BRPlayerController_ClientPushPlayerChatMessage, FormattedChatMessage) == 0x000000, "Member 'BRPlayerController_ClientPushPlayerChatMessage::FormattedChatMessage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientPushPlayerChatMessage, RawChatMessage) == 0x000010, "Member 'BRPlayerController_ClientPushPlayerChatMessage::RawChatMessage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientPushPlayerChatMessage, SenderState) == 0x000020, "Member 'BRPlayerController_ClientPushPlayerChatMessage::SenderState' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientPushStatusMessage
// 0x0018 (0x0018 - 0x0000)
struct BRPlayerController_ClientPushStatusMessage final
{
public:
	class FString                                 StatusMessage;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlashIfUnchanged;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoClear;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_ClientPushStatusMessage) == 0x000008, "Wrong alignment on BRPlayerController_ClientPushStatusMessage");
static_assert(sizeof(BRPlayerController_ClientPushStatusMessage) == 0x000018, "Wrong size on BRPlayerController_ClientPushStatusMessage");
static_assert(offsetof(BRPlayerController_ClientPushStatusMessage, StatusMessage) == 0x000000, "Member 'BRPlayerController_ClientPushStatusMessage::StatusMessage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientPushStatusMessage, bFlashIfUnchanged) == 0x000010, "Member 'BRPlayerController_ClientPushStatusMessage::bFlashIfUnchanged' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientPushStatusMessage, bAutoClear) == 0x000011, "Member 'BRPlayerController_ClientPushStatusMessage::bAutoClear' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientPushUnreliableStatusMessage
// 0x0018 (0x0018 - 0x0000)
struct BRPlayerController_ClientPushUnreliableStatusMessage final
{
public:
	class FString                                 StatusMessage;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlashIfUnchanged;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoClear;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_ClientPushUnreliableStatusMessage) == 0x000008, "Wrong alignment on BRPlayerController_ClientPushUnreliableStatusMessage");
static_assert(sizeof(BRPlayerController_ClientPushUnreliableStatusMessage) == 0x000018, "Wrong size on BRPlayerController_ClientPushUnreliableStatusMessage");
static_assert(offsetof(BRPlayerController_ClientPushUnreliableStatusMessage, StatusMessage) == 0x000000, "Member 'BRPlayerController_ClientPushUnreliableStatusMessage::StatusMessage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientPushUnreliableStatusMessage, bFlashIfUnchanged) == 0x000010, "Member 'BRPlayerController_ClientPushUnreliableStatusMessage::bFlashIfUnchanged' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientPushUnreliableStatusMessage, bAutoClear) == 0x000011, "Member 'BRPlayerController_ClientPushUnreliableStatusMessage::bAutoClear' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientReceivedAccumulatedDamage
// 0x0020 (0x0020 - 0x0000)
struct BRPlayerController_ClientReceivedAccumulatedDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainsHeadshot;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientReceivedAccumulatedDamage) == 0x000008, "Wrong alignment on BRPlayerController_ClientReceivedAccumulatedDamage");
static_assert(sizeof(BRPlayerController_ClientReceivedAccumulatedDamage) == 0x000020, "Wrong size on BRPlayerController_ClientReceivedAccumulatedDamage");
static_assert(offsetof(BRPlayerController_ClientReceivedAccumulatedDamage, Damage) == 0x000000, "Member 'BRPlayerController_ClientReceivedAccumulatedDamage::Damage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientReceivedAccumulatedDamage, bContainsHeadshot) == 0x000004, "Member 'BRPlayerController_ClientReceivedAccumulatedDamage::bContainsHeadshot' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientReceivedAccumulatedDamage, Direction) == 0x000008, "Member 'BRPlayerController_ClientReceivedAccumulatedDamage::Direction' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientReceiveDeathNotification
// 0x0018 (0x0018 - 0x0000)
struct BRPlayerController_ClientReceiveDeathNotification final
{
public:
	class ABRPlayerState*                         DeadPlayerState;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DeathType;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         KillerPlayerState;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientReceiveDeathNotification) == 0x000008, "Wrong alignment on BRPlayerController_ClientReceiveDeathNotification");
static_assert(sizeof(BRPlayerController_ClientReceiveDeathNotification) == 0x000018, "Wrong size on BRPlayerController_ClientReceiveDeathNotification");
static_assert(offsetof(BRPlayerController_ClientReceiveDeathNotification, DeadPlayerState) == 0x000000, "Member 'BRPlayerController_ClientReceiveDeathNotification::DeadPlayerState' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientReceiveDeathNotification, DeathType) == 0x000008, "Member 'BRPlayerController_ClientReceiveDeathNotification::DeathType' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ClientReceiveDeathNotification, KillerPlayerState) == 0x000010, "Member 'BRPlayerController_ClientReceiveDeathNotification::KillerPlayerState' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientReceiveRespawnNotification
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_ClientReceiveRespawnNotification final
{
public:
	class ABRPlayerState*                         RespawnedPlayerState;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientReceiveRespawnNotification) == 0x000008, "Wrong alignment on BRPlayerController_ClientReceiveRespawnNotification");
static_assert(sizeof(BRPlayerController_ClientReceiveRespawnNotification) == 0x000008, "Wrong size on BRPlayerController_ClientReceiveRespawnNotification");
static_assert(offsetof(BRPlayerController_ClientReceiveRespawnNotification, RespawnedPlayerState) == 0x000000, "Member 'BRPlayerController_ClientReceiveRespawnNotification::RespawnedPlayerState' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientReplaceTrustCache
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_ClientReplaceTrustCache final
{
public:
	TArray<struct FBRGuid>                        inArray;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientReplaceTrustCache) == 0x000008, "Wrong alignment on BRPlayerController_ClientReplaceTrustCache");
static_assert(sizeof(BRPlayerController_ClientReplaceTrustCache) == 0x000010, "Wrong size on BRPlayerController_ClientReplaceTrustCache");
static_assert(offsetof(BRPlayerController_ClientReplaceTrustCache, inArray) == 0x000000, "Member 'BRPlayerController_ClientReplaceTrustCache::inArray' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientReplaceTrustedByCache
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_ClientReplaceTrustedByCache final
{
public:
	TArray<struct FBRGuid>                        inArray;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientReplaceTrustedByCache) == 0x000008, "Wrong alignment on BRPlayerController_ClientReplaceTrustedByCache");
static_assert(sizeof(BRPlayerController_ClientReplaceTrustedByCache) == 0x000010, "Wrong size on BRPlayerController_ClientReplaceTrustedByCache");
static_assert(offsetof(BRPlayerController_ClientReplaceTrustedByCache, inArray) == 0x000000, "Member 'BRPlayerController_ClientReplaceTrustedByCache::inArray' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientRotateControlRotation
// 0x0020 (0x0020 - 0x0000)
struct BRPlayerController_ClientRotateControlRotation final
{
public:
	struct FQuat                                  DeltaQuat;                                         // 0x0000(0x0020)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientRotateControlRotation) == 0x000010, "Wrong alignment on BRPlayerController_ClientRotateControlRotation");
static_assert(sizeof(BRPlayerController_ClientRotateControlRotation) == 0x000020, "Wrong size on BRPlayerController_ClientRotateControlRotation");
static_assert(offsetof(BRPlayerController_ClientRotateControlRotation, DeltaQuat) == 0x000000, "Member 'BRPlayerController_ClientRotateControlRotation::DeltaQuat' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientSetControlRotation
// 0x0018 (0x0018 - 0x0000)
struct BRPlayerController_ClientSetControlRotation final
{
public:
	struct FRotator                               NewControlRotation;                                // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientSetControlRotation) == 0x000008, "Wrong alignment on BRPlayerController_ClientSetControlRotation");
static_assert(sizeof(BRPlayerController_ClientSetControlRotation) == 0x000018, "Wrong size on BRPlayerController_ClientSetControlRotation");
static_assert(offsetof(BRPlayerController_ClientSetControlRotation, NewControlRotation) == 0x000000, "Member 'BRPlayerController_ClientSetControlRotation::NewControlRotation' has a wrong offset!");

// Function Brickadia.BRPlayerController.ClientSetIsSpectator
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_ClientSetIsSpectator final
{
public:
	bool                                          bIsSpectator;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ClientSetIsSpectator) == 0x000001, "Wrong alignment on BRPlayerController_ClientSetIsSpectator");
static_assert(sizeof(BRPlayerController_ClientSetIsSpectator) == 0x000001, "Wrong size on BRPlayerController_ClientSetIsSpectator");
static_assert(offsetof(BRPlayerController_ClientSetIsSpectator, bIsSpectator) == 0x000000, "Member 'BRPlayerController_ClientSetIsSpectator::bIsSpectator' has a wrong offset!");

// Function Brickadia.BRPlayerController.GetGameTypeAddedComponent
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_GetGameTypeAddedComponent final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_GetGameTypeAddedComponent) == 0x000008, "Wrong alignment on BRPlayerController_GetGameTypeAddedComponent");
static_assert(sizeof(BRPlayerController_GetGameTypeAddedComponent) == 0x000010, "Wrong size on BRPlayerController_GetGameTypeAddedComponent");
static_assert(offsetof(BRPlayerController_GetGameTypeAddedComponent, Index_0) == 0x000000, "Member 'BRPlayerController_GetGameTypeAddedComponent::Index_0' has a wrong offset!");
static_assert(offsetof(BRPlayerController_GetGameTypeAddedComponent, ReturnValue) == 0x000008, "Member 'BRPlayerController_GetGameTypeAddedComponent::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.HandlePossessedPawnTakePointDamage
// 0x0068 (0x0068 - 0x0000)
struct BRPlayerController_HandlePossessedPawnTakePointDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShotFromDirection;                                 // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DamageType;                                        // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_HandlePossessedPawnTakePointDamage) == 0x000008, "Wrong alignment on BRPlayerController_HandlePossessedPawnTakePointDamage");
static_assert(sizeof(BRPlayerController_HandlePossessedPawnTakePointDamage) == 0x000068, "Wrong size on BRPlayerController_HandlePossessedPawnTakePointDamage");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakePointDamage, DamagedActor) == 0x000000, "Member 'BRPlayerController_HandlePossessedPawnTakePointDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakePointDamage, Damage) == 0x000008, "Member 'BRPlayerController_HandlePossessedPawnTakePointDamage::Damage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakePointDamage, InstigatedBy) == 0x000010, "Member 'BRPlayerController_HandlePossessedPawnTakePointDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakePointDamage, HitLocation) == 0x000018, "Member 'BRPlayerController_HandlePossessedPawnTakePointDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakePointDamage, HitComponent) == 0x000030, "Member 'BRPlayerController_HandlePossessedPawnTakePointDamage::HitComponent' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakePointDamage, BoneName) == 0x000038, "Member 'BRPlayerController_HandlePossessedPawnTakePointDamage::BoneName' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakePointDamage, ShotFromDirection) == 0x000040, "Member 'BRPlayerController_HandlePossessedPawnTakePointDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakePointDamage, DamageType) == 0x000058, "Member 'BRPlayerController_HandlePossessedPawnTakePointDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakePointDamage, DamageCauser) == 0x000060, "Member 'BRPlayerController_HandlePossessedPawnTakePointDamage::DamageCauser' has a wrong offset!");

// Function Brickadia.BRPlayerController.HandlePossessedPawnTakeRadialDamage
// 0x0130 (0x0130 - 0x0000)
struct BRPlayerController_HandlePossessedPawnTakeRadialDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0030(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0120(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0128(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_HandlePossessedPawnTakeRadialDamage) == 0x000008, "Wrong alignment on BRPlayerController_HandlePossessedPawnTakeRadialDamage");
static_assert(sizeof(BRPlayerController_HandlePossessedPawnTakeRadialDamage) == 0x000130, "Wrong size on BRPlayerController_HandlePossessedPawnTakeRadialDamage");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakeRadialDamage, DamagedActor) == 0x000000, "Member 'BRPlayerController_HandlePossessedPawnTakeRadialDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakeRadialDamage, Damage) == 0x000008, "Member 'BRPlayerController_HandlePossessedPawnTakeRadialDamage::Damage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakeRadialDamage, DamageType) == 0x000010, "Member 'BRPlayerController_HandlePossessedPawnTakeRadialDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakeRadialDamage, Origin) == 0x000018, "Member 'BRPlayerController_HandlePossessedPawnTakeRadialDamage::Origin' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakeRadialDamage, HitInfo) == 0x000030, "Member 'BRPlayerController_HandlePossessedPawnTakeRadialDamage::HitInfo' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakeRadialDamage, InstigatedBy) == 0x000120, "Member 'BRPlayerController_HandlePossessedPawnTakeRadialDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BRPlayerController_HandlePossessedPawnTakeRadialDamage, DamageCauser) == 0x000128, "Member 'BRPlayerController_HandlePossessedPawnTakeRadialDamage::DamageCauser' has a wrong offset!");

// Function Brickadia.BRPlayerController.JoinMinigame
// 0x0004 (0x0004 - 0x0000)
struct BRPlayerController_JoinMinigame final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_JoinMinigame) == 0x000004, "Wrong alignment on BRPlayerController_JoinMinigame");
static_assert(sizeof(BRPlayerController_JoinMinigame) == 0x000004, "Wrong size on BRPlayerController_JoinMinigame");
static_assert(offsetof(BRPlayerController_JoinMinigame, MinigameId) == 0x000000, "Member 'BRPlayerController_JoinMinigame::MinigameId' has a wrong offset!");

// Function Brickadia.BRPlayerController.JoinRuleset
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_JoinRuleset final
{
public:
	class ABRRuleset*                             Ruleset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespawn;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutomatic;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_JoinRuleset) == 0x000008, "Wrong alignment on BRPlayerController_JoinRuleset");
static_assert(sizeof(BRPlayerController_JoinRuleset) == 0x000010, "Wrong size on BRPlayerController_JoinRuleset");
static_assert(offsetof(BRPlayerController_JoinRuleset, Ruleset) == 0x000000, "Member 'BRPlayerController_JoinRuleset::Ruleset' has a wrong offset!");
static_assert(offsetof(BRPlayerController_JoinRuleset, bRespawn) == 0x000008, "Member 'BRPlayerController_JoinRuleset::bRespawn' has a wrong offset!");
static_assert(offsetof(BRPlayerController_JoinRuleset, bAutomatic) == 0x000009, "Member 'BRPlayerController_JoinRuleset::bAutomatic' has a wrong offset!");

// Function Brickadia.BRPlayerController.JoinRulesetTeam
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_JoinRulesetTeam final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespawn;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMessage;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_JoinRulesetTeam) == 0x000004, "Wrong alignment on BRPlayerController_JoinRulesetTeam");
static_assert(sizeof(BRPlayerController_JoinRulesetTeam) == 0x000008, "Wrong size on BRPlayerController_JoinRulesetTeam");
static_assert(offsetof(BRPlayerController_JoinRulesetTeam, TeamId) == 0x000000, "Member 'BRPlayerController_JoinRulesetTeam::TeamId' has a wrong offset!");
static_assert(offsetof(BRPlayerController_JoinRulesetTeam, bRespawn) == 0x000004, "Member 'BRPlayerController_JoinRulesetTeam::bRespawn' has a wrong offset!");
static_assert(offsetof(BRPlayerController_JoinRulesetTeam, bMessage) == 0x000005, "Member 'BRPlayerController_JoinRulesetTeam::bMessage' has a wrong offset!");

// Function Brickadia.BRPlayerController.LocalInstigatedAccumulatedDamage
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_LocalInstigatedAccumulatedDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainsHeadshot;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainsKill;                                     // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainsBlocked;                                  // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_LocalInstigatedAccumulatedDamage) == 0x000004, "Wrong alignment on BRPlayerController_LocalInstigatedAccumulatedDamage");
static_assert(sizeof(BRPlayerController_LocalInstigatedAccumulatedDamage) == 0x000008, "Wrong size on BRPlayerController_LocalInstigatedAccumulatedDamage");
static_assert(offsetof(BRPlayerController_LocalInstigatedAccumulatedDamage, Damage) == 0x000000, "Member 'BRPlayerController_LocalInstigatedAccumulatedDamage::Damage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_LocalInstigatedAccumulatedDamage, bContainsHeadshot) == 0x000004, "Member 'BRPlayerController_LocalInstigatedAccumulatedDamage::bContainsHeadshot' has a wrong offset!");
static_assert(offsetof(BRPlayerController_LocalInstigatedAccumulatedDamage, bContainsKill) == 0x000005, "Member 'BRPlayerController_LocalInstigatedAccumulatedDamage::bContainsKill' has a wrong offset!");
static_assert(offsetof(BRPlayerController_LocalInstigatedAccumulatedDamage, bContainsBlocked) == 0x000006, "Member 'BRPlayerController_LocalInstigatedAccumulatedDamage::bContainsBlocked' has a wrong offset!");

// Function Brickadia.BRPlayerController.LocalReceivedAccumulatedDamage
// 0x0020 (0x0020 - 0x0000)
struct BRPlayerController_LocalReceivedAccumulatedDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainsHeadshot;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_LocalReceivedAccumulatedDamage) == 0x000008, "Wrong alignment on BRPlayerController_LocalReceivedAccumulatedDamage");
static_assert(sizeof(BRPlayerController_LocalReceivedAccumulatedDamage) == 0x000020, "Wrong size on BRPlayerController_LocalReceivedAccumulatedDamage");
static_assert(offsetof(BRPlayerController_LocalReceivedAccumulatedDamage, Damage) == 0x000000, "Member 'BRPlayerController_LocalReceivedAccumulatedDamage::Damage' has a wrong offset!");
static_assert(offsetof(BRPlayerController_LocalReceivedAccumulatedDamage, bContainsHeadshot) == 0x000004, "Member 'BRPlayerController_LocalReceivedAccumulatedDamage::bContainsHeadshot' has a wrong offset!");
static_assert(offsetof(BRPlayerController_LocalReceivedAccumulatedDamage, Direction) == 0x000008, "Member 'BRPlayerController_LocalReceivedAccumulatedDamage::Direction' has a wrong offset!");

// Function Brickadia.BRPlayerController.OnBrickTemplateLoadReady
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_OnBrickTemplateLoadReady final
{
public:
	class UBrickBuildingTemplate*                 Template;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_OnBrickTemplateLoadReady) == 0x000008, "Wrong alignment on BRPlayerController_OnBrickTemplateLoadReady");
static_assert(sizeof(BRPlayerController_OnBrickTemplateLoadReady) == 0x000008, "Wrong size on BRPlayerController_OnBrickTemplateLoadReady");
static_assert(offsetof(BRPlayerController_OnBrickTemplateLoadReady, Template) == 0x000000, "Member 'BRPlayerController_OnBrickTemplateLoadReady::Template' has a wrong offset!");

// Function Brickadia.BRPlayerController.OnSpectatorStateChange
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_OnSpectatorStateChange final
{
public:
	bool                                          bIsSpectator;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_OnSpectatorStateChange) == 0x000001, "Wrong alignment on BRPlayerController_OnSpectatorStateChange");
static_assert(sizeof(BRPlayerController_OnSpectatorStateChange) == 0x000001, "Wrong size on BRPlayerController_OnSpectatorStateChange");
static_assert(offsetof(BRPlayerController_OnSpectatorStateChange, bIsSpectator) == 0x000000, "Member 'BRPlayerController_OnSpectatorStateChange::bIsSpectator' has a wrong offset!");

// Function Brickadia.BRPlayerController.ReachGoalPoint
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_ReachGoalPoint final
{
public:
	struct FBrickHandle                           GoalPoint;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ReachGoalPoint) == 0x000004, "Wrong alignment on BRPlayerController_ReachGoalPoint");
static_assert(sizeof(BRPlayerController_ReachGoalPoint) == 0x000008, "Wrong size on BRPlayerController_ReachGoalPoint");
static_assert(offsetof(BRPlayerController_ReachGoalPoint, GoalPoint) == 0x000000, "Member 'BRPlayerController_ReachGoalPoint::GoalPoint' has a wrong offset!");

// Function Brickadia.BRPlayerController.RestartPlayer
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_RestartPlayer final
{
public:
	bool                                          bRemoveOldCharacter;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_RestartPlayer) == 0x000001, "Wrong alignment on BRPlayerController_RestartPlayer");
static_assert(sizeof(BRPlayerController_RestartPlayer) == 0x000001, "Wrong size on BRPlayerController_RestartPlayer");
static_assert(offsetof(BRPlayerController_RestartPlayer, bRemoveOldCharacter) == 0x000000, "Member 'BRPlayerController_RestartPlayer::bRemoveOldCharacter' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerAddBrickTypeToInventory
// 0x0020 (0x0020 - 0x0000)
struct BRPlayerController_ServerAddBrickTypeToInventory final
{
public:
	struct FBrickTypeNetWrapper                   BrickType;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuickbarRange;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_ServerAddBrickTypeToInventory) == 0x000008, "Wrong alignment on BRPlayerController_ServerAddBrickTypeToInventory");
static_assert(sizeof(BRPlayerController_ServerAddBrickTypeToInventory) == 0x000020, "Wrong size on BRPlayerController_ServerAddBrickTypeToInventory");
static_assert(offsetof(BRPlayerController_ServerAddBrickTypeToInventory, BrickType) == 0x000000, "Member 'BRPlayerController_ServerAddBrickTypeToInventory::BrickType' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerAddBrickTypeToInventory, QuickbarRange) == 0x000018, "Member 'BRPlayerController_ServerAddBrickTypeToInventory::QuickbarRange' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerAddEntityTypeToInventory
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_ServerAddEntityTypeToInventory final
{
public:
	TSubclassOf<class UBREntityTypeBase>          EntityType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuickbarRange;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_ServerAddEntityTypeToInventory) == 0x000008, "Wrong alignment on BRPlayerController_ServerAddEntityTypeToInventory");
static_assert(sizeof(BRPlayerController_ServerAddEntityTypeToInventory) == 0x000010, "Wrong size on BRPlayerController_ServerAddEntityTypeToInventory");
static_assert(offsetof(BRPlayerController_ServerAddEntityTypeToInventory, EntityType) == 0x000000, "Member 'BRPlayerController_ServerAddEntityTypeToInventory::EntityType' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerAddEntityTypeToInventory, QuickbarRange) == 0x000008, "Member 'BRPlayerController_ServerAddEntityTypeToInventory::QuickbarRange' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerAddItemToInventory
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_ServerAddItemToInventory final
{
public:
	TSubclassOf<class ABRItemBase>                ItemType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuickbarRange;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_ServerAddItemToInventory) == 0x000008, "Wrong alignment on BRPlayerController_ServerAddItemToInventory");
static_assert(sizeof(BRPlayerController_ServerAddItemToInventory) == 0x000010, "Wrong size on BRPlayerController_ServerAddItemToInventory");
static_assert(offsetof(BRPlayerController_ServerAddItemToInventory, ItemType) == 0x000000, "Member 'BRPlayerController_ServerAddItemToInventory::ItemType' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerAddItemToInventory, QuickbarRange) == 0x000008, "Member 'BRPlayerController_ServerAddItemToInventory::QuickbarRange' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerAdminAction_BanPlayer
// 0x0028 (0x0028 - 0x0000)
struct BRPlayerController_ServerAdminAction_BanPlayer final
{
public:
	struct FBRGuid                                VictimId;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expiry;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerAdminAction_BanPlayer) == 0x000008, "Wrong alignment on BRPlayerController_ServerAdminAction_BanPlayer");
static_assert(sizeof(BRPlayerController_ServerAdminAction_BanPlayer) == 0x000028, "Wrong size on BRPlayerController_ServerAdminAction_BanPlayer");
static_assert(offsetof(BRPlayerController_ServerAdminAction_BanPlayer, VictimId) == 0x000000, "Member 'BRPlayerController_ServerAdminAction_BanPlayer::VictimId' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerAdminAction_BanPlayer, Expiry) == 0x000010, "Member 'BRPlayerController_ServerAdminAction_BanPlayer::Expiry' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerAdminAction_BanPlayer, Reason) == 0x000018, "Member 'BRPlayerController_ServerAdminAction_BanPlayer::Reason' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerAdminAction_ClearObjects
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_ServerAdminAction_ClearObjects final
{
public:
	struct FBRGuid                                VictimId;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerAdminAction_ClearObjects) == 0x000004, "Wrong alignment on BRPlayerController_ServerAdminAction_ClearObjects");
static_assert(sizeof(BRPlayerController_ServerAdminAction_ClearObjects) == 0x000010, "Wrong size on BRPlayerController_ServerAdminAction_ClearObjects");
static_assert(offsetof(BRPlayerController_ServerAdminAction_ClearObjects, VictimId) == 0x000000, "Member 'BRPlayerController_ServerAdminAction_ClearObjects::VictimId' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerAdminAction_KickPlayer
// 0x0020 (0x0020 - 0x0000)
struct BRPlayerController_ServerAdminAction_KickPlayer final
{
public:
	struct FBRGuid                                VictimId;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerAdminAction_KickPlayer) == 0x000008, "Wrong alignment on BRPlayerController_ServerAdminAction_KickPlayer");
static_assert(sizeof(BRPlayerController_ServerAdminAction_KickPlayer) == 0x000020, "Wrong size on BRPlayerController_ServerAdminAction_KickPlayer");
static_assert(offsetof(BRPlayerController_ServerAdminAction_KickPlayer, VictimId) == 0x000000, "Member 'BRPlayerController_ServerAdminAction_KickPlayer::VictimId' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerAdminAction_KickPlayer, Reason) == 0x000010, "Member 'BRPlayerController_ServerAdminAction_KickPlayer::Reason' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerAdminAction_Teleport
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_ServerAdminAction_Teleport final
{
public:
	class ABRPlayerState*                         From;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerAdminAction_Teleport) == 0x000008, "Wrong alignment on BRPlayerController_ServerAdminAction_Teleport");
static_assert(sizeof(BRPlayerController_ServerAdminAction_Teleport) == 0x000010, "Wrong size on BRPlayerController_ServerAdminAction_Teleport");
static_assert(offsetof(BRPlayerController_ServerAdminAction_Teleport, From) == 0x000000, "Member 'BRPlayerController_ServerAdminAction_Teleport::From' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerAdminAction_Teleport, To) == 0x000008, "Member 'BRPlayerController_ServerAdminAction_Teleport::To' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerBeginSaveFileUpload
// 0x0040 (0x0040 - 0x0000)
struct BRPlayerController_ServerBeginSaveFileUpload final
{
public:
	class FString                                 SaveFile;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickLoadParams                       Params_0;                                          // 0x0010(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForTemplate;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ExpectedTotalSize;                                 // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerBeginSaveFileUpload) == 0x000008, "Wrong alignment on BRPlayerController_ServerBeginSaveFileUpload");
static_assert(sizeof(BRPlayerController_ServerBeginSaveFileUpload) == 0x000040, "Wrong size on BRPlayerController_ServerBeginSaveFileUpload");
static_assert(offsetof(BRPlayerController_ServerBeginSaveFileUpload, SaveFile) == 0x000000, "Member 'BRPlayerController_ServerBeginSaveFileUpload::SaveFile' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerBeginSaveFileUpload, Params_0) == 0x000010, "Member 'BRPlayerController_ServerBeginSaveFileUpload::Params_0' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerBeginSaveFileUpload, bForTemplate) == 0x000030, "Member 'BRPlayerController_ServerBeginSaveFileUpload::bForTemplate' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerBeginSaveFileUpload, ExpectedTotalSize) == 0x000038, "Member 'BRPlayerController_ServerBeginSaveFileUpload::ExpectedTotalSize' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerClearInventorySlot
// 0x0004 (0x0004 - 0x0000)
struct BRPlayerController_ServerClearInventorySlot final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerClearInventorySlot) == 0x000004, "Wrong alignment on BRPlayerController_ServerClearInventorySlot");
static_assert(sizeof(BRPlayerController_ServerClearInventorySlot) == 0x000004, "Wrong size on BRPlayerController_ServerClearInventorySlot");
static_assert(offsetof(BRPlayerController_ServerClearInventorySlot, Slot) == 0x000000, "Member 'BRPlayerController_ServerClearInventorySlot::Slot' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerJoinMinigame
// 0x0004 (0x0004 - 0x0000)
struct BRPlayerController_ServerJoinMinigame final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerJoinMinigame) == 0x000004, "Wrong alignment on BRPlayerController_ServerJoinMinigame");
static_assert(sizeof(BRPlayerController_ServerJoinMinigame) == 0x000004, "Wrong size on BRPlayerController_ServerJoinMinigame");
static_assert(offsetof(BRPlayerController_ServerJoinMinigame, MinigameId) == 0x000000, "Member 'BRPlayerController_ServerJoinMinigame::MinigameId' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerJoinRuleset
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_ServerJoinRuleset final
{
public:
	class ABRRuleset*                             Ruleset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerJoinRuleset) == 0x000008, "Wrong alignment on BRPlayerController_ServerJoinRuleset");
static_assert(sizeof(BRPlayerController_ServerJoinRuleset) == 0x000008, "Wrong size on BRPlayerController_ServerJoinRuleset");
static_assert(offsetof(BRPlayerController_ServerJoinRuleset, Ruleset) == 0x000000, "Member 'BRPlayerController_ServerJoinRuleset::Ruleset' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerJoinRulesetTeam
// 0x0004 (0x0004 - 0x0000)
struct BRPlayerController_ServerJoinRulesetTeam final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerJoinRulesetTeam) == 0x000004, "Wrong alignment on BRPlayerController_ServerJoinRulesetTeam");
static_assert(sizeof(BRPlayerController_ServerJoinRulesetTeam) == 0x000004, "Wrong size on BRPlayerController_ServerJoinRulesetTeam");
static_assert(offsetof(BRPlayerController_ServerJoinRulesetTeam, TeamId) == 0x000000, "Member 'BRPlayerController_ServerJoinRulesetTeam::TeamId' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerNotifyTrustLevelChange
// 0x0014 (0x0014 - 0x0000)
struct BRPlayerController_ServerNotifyTrustLevelChange final
{
public:
	struct FBRGuid                                OtherUserId;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrusted;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_ServerNotifyTrustLevelChange) == 0x000004, "Wrong alignment on BRPlayerController_ServerNotifyTrustLevelChange");
static_assert(sizeof(BRPlayerController_ServerNotifyTrustLevelChange) == 0x000014, "Wrong size on BRPlayerController_ServerNotifyTrustLevelChange");
static_assert(offsetof(BRPlayerController_ServerNotifyTrustLevelChange, OtherUserId) == 0x000000, "Member 'BRPlayerController_ServerNotifyTrustLevelChange::OtherUserId' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerNotifyTrustLevelChange, bTrusted) == 0x000010, "Member 'BRPlayerController_ServerNotifyTrustLevelChange::bTrusted' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerPushChatMessage
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_ServerPushChatMessage final
{
public:
	class FString                                 ChatMessage;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerPushChatMessage) == 0x000008, "Wrong alignment on BRPlayerController_ServerPushChatMessage");
static_assert(sizeof(BRPlayerController_ServerPushChatMessage) == 0x000010, "Wrong size on BRPlayerController_ServerPushChatMessage");
static_assert(offsetof(BRPlayerController_ServerPushChatMessage, ChatMessage) == 0x000000, "Member 'BRPlayerController_ServerPushChatMessage::ChatMessage' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerSetInventorySlotBrickType
// 0x0020 (0x0020 - 0x0000)
struct BRPlayerController_ServerSetInventorySlotBrickType final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickTypeNetWrapper                   BrickType;                                         // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerSetInventorySlotBrickType) == 0x000008, "Wrong alignment on BRPlayerController_ServerSetInventorySlotBrickType");
static_assert(sizeof(BRPlayerController_ServerSetInventorySlotBrickType) == 0x000020, "Wrong size on BRPlayerController_ServerSetInventorySlotBrickType");
static_assert(offsetof(BRPlayerController_ServerSetInventorySlotBrickType, Slot) == 0x000000, "Member 'BRPlayerController_ServerSetInventorySlotBrickType::Slot' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerSetInventorySlotBrickType, BrickType) == 0x000008, "Member 'BRPlayerController_ServerSetInventorySlotBrickType::BrickType' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerSetInventorySlotEntityType
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_ServerSetInventorySlotEntityType final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UBREntityTypeBase>          EntityType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerSetInventorySlotEntityType) == 0x000008, "Wrong alignment on BRPlayerController_ServerSetInventorySlotEntityType");
static_assert(sizeof(BRPlayerController_ServerSetInventorySlotEntityType) == 0x000010, "Wrong size on BRPlayerController_ServerSetInventorySlotEntityType");
static_assert(offsetof(BRPlayerController_ServerSetInventorySlotEntityType, Slot) == 0x000000, "Member 'BRPlayerController_ServerSetInventorySlotEntityType::Slot' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerSetInventorySlotEntityType, EntityType) == 0x000008, "Member 'BRPlayerController_ServerSetInventorySlotEntityType::EntityType' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerSetInventorySlotItem
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_ServerSetInventorySlotItem final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ABRItemBase>                ItemType;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerSetInventorySlotItem) == 0x000008, "Wrong alignment on BRPlayerController_ServerSetInventorySlotItem");
static_assert(sizeof(BRPlayerController_ServerSetInventorySlotItem) == 0x000010, "Wrong size on BRPlayerController_ServerSetInventorySlotItem");
static_assert(offsetof(BRPlayerController_ServerSetInventorySlotItem, Slot) == 0x000000, "Member 'BRPlayerController_ServerSetInventorySlotItem::Slot' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerSetInventorySlotItem, ItemType) == 0x000008, "Member 'BRPlayerController_ServerSetInventorySlotItem::ItemType' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerSetInventoryTempSlotBrickType
// 0x0018 (0x0018 - 0x0000)
struct BRPlayerController_ServerSetInventoryTempSlotBrickType final
{
public:
	struct FBrickTypeNetWrapper                   BrickType;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerSetInventoryTempSlotBrickType) == 0x000008, "Wrong alignment on BRPlayerController_ServerSetInventoryTempSlotBrickType");
static_assert(sizeof(BRPlayerController_ServerSetInventoryTempSlotBrickType) == 0x000018, "Wrong size on BRPlayerController_ServerSetInventoryTempSlotBrickType");
static_assert(offsetof(BRPlayerController_ServerSetInventoryTempSlotBrickType, BrickType) == 0x000000, "Member 'BRPlayerController_ServerSetInventoryTempSlotBrickType::BrickType' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerSetInventoryTempSlotEntityType
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_ServerSetInventoryTempSlotEntityType final
{
public:
	TSubclassOf<class UBREntityTypeBase>          EntityType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerSetInventoryTempSlotEntityType) == 0x000008, "Wrong alignment on BRPlayerController_ServerSetInventoryTempSlotEntityType");
static_assert(sizeof(BRPlayerController_ServerSetInventoryTempSlotEntityType) == 0x000008, "Wrong size on BRPlayerController_ServerSetInventoryTempSlotEntityType");
static_assert(offsetof(BRPlayerController_ServerSetInventoryTempSlotEntityType, EntityType) == 0x000000, "Member 'BRPlayerController_ServerSetInventoryTempSlotEntityType::EntityType' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerSetInventoryTempSlotItem
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_ServerSetInventoryTempSlotItem final
{
public:
	TSubclassOf<class ABRItemBase>                ItemType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerSetInventoryTempSlotItem) == 0x000008, "Wrong alignment on BRPlayerController_ServerSetInventoryTempSlotItem");
static_assert(sizeof(BRPlayerController_ServerSetInventoryTempSlotItem) == 0x000008, "Wrong size on BRPlayerController_ServerSetInventoryTempSlotItem");
static_assert(offsetof(BRPlayerController_ServerSetInventoryTempSlotItem, ItemType) == 0x000000, "Member 'BRPlayerController_ServerSetInventoryTempSlotItem::ItemType' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerSetTyping
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_ServerSetTyping final
{
public:
	bool                                          bTyping;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerSetTyping) == 0x000001, "Wrong alignment on BRPlayerController_ServerSetTyping");
static_assert(sizeof(BRPlayerController_ServerSetTyping) == 0x000001, "Wrong size on BRPlayerController_ServerSetTyping");
static_assert(offsetof(BRPlayerController_ServerSetTyping, bTyping) == 0x000000, "Member 'BRPlayerController_ServerSetTyping::bTyping' has a wrong offset!");

// Function Brickadia.BRPlayerController.ServerSwapInventorySlots
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_ServerSwapInventorySlots final
{
public:
	int32                                         SlotA;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotB;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_ServerSwapInventorySlots) == 0x000004, "Wrong alignment on BRPlayerController_ServerSwapInventorySlots");
static_assert(sizeof(BRPlayerController_ServerSwapInventorySlots) == 0x000008, "Wrong size on BRPlayerController_ServerSwapInventorySlots");
static_assert(offsetof(BRPlayerController_ServerSwapInventorySlots, SlotA) == 0x000000, "Member 'BRPlayerController_ServerSwapInventorySlots::SlotA' has a wrong offset!");
static_assert(offsetof(BRPlayerController_ServerSwapInventorySlots, SlotB) == 0x000004, "Member 'BRPlayerController_ServerSwapInventorySlots::SlotB' has a wrong offset!");

// Function Brickadia.BRPlayerController.SetCheckPoint
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_SetCheckPoint final
{
public:
	struct FBrickHandle                           CheckPoint;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_SetCheckPoint) == 0x000004, "Wrong alignment on BRPlayerController_SetCheckPoint");
static_assert(sizeof(BRPlayerController_SetCheckPoint) == 0x000008, "Wrong size on BRPlayerController_SetCheckPoint");
static_assert(offsetof(BRPlayerController_SetCheckPoint, CheckPoint) == 0x000000, "Member 'BRPlayerController_SetCheckPoint::CheckPoint' has a wrong offset!");

// Function Brickadia.BRPlayerController.SetFreezeCamera
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_SetFreezeCamera final
{
public:
	bool                                          bFreeze;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_SetFreezeCamera) == 0x000001, "Wrong alignment on BRPlayerController_SetFreezeCamera");
static_assert(sizeof(BRPlayerController_SetFreezeCamera) == 0x000001, "Wrong size on BRPlayerController_SetFreezeCamera");
static_assert(offsetof(BRPlayerController_SetFreezeCamera, bFreeze) == 0x000000, "Member 'BRPlayerController_SetFreezeCamera::bFreeze' has a wrong offset!");

// Function Brickadia.BRPlayerController.SetGlobalTrust
// 0x0014 (0x0014 - 0x0000)
struct BRPlayerController_SetGlobalTrust final
{
public:
	struct FBRGuid                                OtherUserId;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrusted;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_SetGlobalTrust) == 0x000004, "Wrong alignment on BRPlayerController_SetGlobalTrust");
static_assert(sizeof(BRPlayerController_SetGlobalTrust) == 0x000014, "Wrong size on BRPlayerController_SetGlobalTrust");
static_assert(offsetof(BRPlayerController_SetGlobalTrust, OtherUserId) == 0x000000, "Member 'BRPlayerController_SetGlobalTrust::OtherUserId' has a wrong offset!");
static_assert(offsetof(BRPlayerController_SetGlobalTrust, bTrusted) == 0x000010, "Member 'BRPlayerController_SetGlobalTrust::bTrusted' has a wrong offset!");

// Function Brickadia.BRPlayerController.SetIsSpectator
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_SetIsSpectator final
{
public:
	bool                                          bIsSpectator;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_SetIsSpectator) == 0x000001, "Wrong alignment on BRPlayerController_SetIsSpectator");
static_assert(sizeof(BRPlayerController_SetIsSpectator) == 0x000001, "Wrong size on BRPlayerController_SetIsSpectator");
static_assert(offsetof(BRPlayerController_SetIsSpectator, bIsSpectator) == 0x000000, "Member 'BRPlayerController_SetIsSpectator::bIsSpectator' has a wrong offset!");

// Function Brickadia.BRPlayerController.SetLoadingIconEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_SetLoadingIconEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_SetLoadingIconEnabled) == 0x000001, "Wrong alignment on BRPlayerController_SetLoadingIconEnabled");
static_assert(sizeof(BRPlayerController_SetLoadingIconEnabled) == 0x000001, "Wrong size on BRPlayerController_SetLoadingIconEnabled");
static_assert(offsetof(BRPlayerController_SetLoadingIconEnabled, bEnabled) == 0x000000, "Member 'BRPlayerController_SetLoadingIconEnabled::bEnabled' has a wrong offset!");

// Function Brickadia.BRPlayerController.SetLoadingIconStatus
// 0x0018 (0x0018 - 0x0000)
struct BRPlayerController_SetLoadingIconStatus final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ProgressBar;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Progress;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_SetLoadingIconStatus) == 0x000008, "Wrong alignment on BRPlayerController_SetLoadingIconStatus");
static_assert(sizeof(BRPlayerController_SetLoadingIconStatus) == 0x000018, "Wrong size on BRPlayerController_SetLoadingIconStatus");
static_assert(offsetof(BRPlayerController_SetLoadingIconStatus, Text) == 0x000000, "Member 'BRPlayerController_SetLoadingIconStatus::Text' has a wrong offset!");
static_assert(offsetof(BRPlayerController_SetLoadingIconStatus, ProgressBar) == 0x000010, "Member 'BRPlayerController_SetLoadingIconStatus::ProgressBar' has a wrong offset!");
static_assert(offsetof(BRPlayerController_SetLoadingIconStatus, Progress) == 0x000014, "Member 'BRPlayerController_SetLoadingIconStatus::Progress' has a wrong offset!");

// Function Brickadia.BRPlayerController.UploadSaveFile
// 0x0050 (0x0050 - 0x0000)
struct BRPlayerController_UploadSaveFile final
{
public:
	class FString                                 SaveFile;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickLoadParams                       Params_0;                                          // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForTemplate;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutError;                                          // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_UploadSaveFile) == 0x000008, "Wrong alignment on BRPlayerController_UploadSaveFile");
static_assert(sizeof(BRPlayerController_UploadSaveFile) == 0x000050, "Wrong size on BRPlayerController_UploadSaveFile");
static_assert(offsetof(BRPlayerController_UploadSaveFile, SaveFile) == 0x000000, "Member 'BRPlayerController_UploadSaveFile::SaveFile' has a wrong offset!");
static_assert(offsetof(BRPlayerController_UploadSaveFile, Params_0) == 0x000010, "Member 'BRPlayerController_UploadSaveFile::Params_0' has a wrong offset!");
static_assert(offsetof(BRPlayerController_UploadSaveFile, bForTemplate) == 0x000030, "Member 'BRPlayerController_UploadSaveFile::bForTemplate' has a wrong offset!");
static_assert(offsetof(BRPlayerController_UploadSaveFile, OutError) == 0x000038, "Member 'BRPlayerController_UploadSaveFile::OutError' has a wrong offset!");
static_assert(offsetof(BRPlayerController_UploadSaveFile, ReturnValue) == 0x000048, "Member 'BRPlayerController_UploadSaveFile::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.GetActorsThisControllerCanSpectate
// 0x0010 (0x0010 - 0x0000)
struct BRPlayerController_GetActorsThisControllerCanSpectate final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_GetActorsThisControllerCanSpectate) == 0x000008, "Wrong alignment on BRPlayerController_GetActorsThisControllerCanSpectate");
static_assert(sizeof(BRPlayerController_GetActorsThisControllerCanSpectate) == 0x000010, "Wrong size on BRPlayerController_GetActorsThisControllerCanSpectate");
static_assert(offsetof(BRPlayerController_GetActorsThisControllerCanSpectate, ReturnValue) == 0x000000, "Member 'BRPlayerController_GetActorsThisControllerCanSpectate::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.GetBRPlayerInput
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_GetBRPlayerInput final
{
public:
	class UBRPlayerInput*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_GetBRPlayerInput) == 0x000008, "Wrong alignment on BRPlayerController_GetBRPlayerInput");
static_assert(sizeof(BRPlayerController_GetBRPlayerInput) == 0x000008, "Wrong size on BRPlayerController_GetBRPlayerInput");
static_assert(offsetof(BRPlayerController_GetBRPlayerInput, ReturnValue) == 0x000000, "Member 'BRPlayerController_GetBRPlayerInput::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.GetBRPlayerState
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_GetBRPlayerState final
{
public:
	class ABRPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_GetBRPlayerState) == 0x000008, "Wrong alignment on BRPlayerController_GetBRPlayerState");
static_assert(sizeof(BRPlayerController_GetBRPlayerState) == 0x000008, "Wrong size on BRPlayerController_GetBRPlayerState");
static_assert(offsetof(BRPlayerController_GetBRPlayerState, ReturnValue) == 0x000000, "Member 'BRPlayerController_GetBRPlayerState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.GetCheckPoint
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerController_GetCheckPoint final
{
public:
	struct FBrickHandle                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_GetCheckPoint) == 0x000004, "Wrong alignment on BRPlayerController_GetCheckPoint");
static_assert(sizeof(BRPlayerController_GetCheckPoint) == 0x000008, "Wrong size on BRPlayerController_GetCheckPoint");
static_assert(offsetof(BRPlayerController_GetCheckPoint, ReturnValue) == 0x000000, "Member 'BRPlayerController_GetCheckPoint::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.GetFreezeCamera
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_GetFreezeCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_GetFreezeCamera) == 0x000001, "Wrong alignment on BRPlayerController_GetFreezeCamera");
static_assert(sizeof(BRPlayerController_GetFreezeCamera) == 0x000001, "Wrong size on BRPlayerController_GetFreezeCamera");
static_assert(offsetof(BRPlayerController_GetFreezeCamera, ReturnValue) == 0x000000, "Member 'BRPlayerController_GetFreezeCamera::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.GetIsSpectator
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_GetIsSpectator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_GetIsSpectator) == 0x000001, "Wrong alignment on BRPlayerController_GetIsSpectator");
static_assert(sizeof(BRPlayerController_GetIsSpectator) == 0x000001, "Wrong size on BRPlayerController_GetIsSpectator");
static_assert(offsetof(BRPlayerController_GetIsSpectator, ReturnValue) == 0x000000, "Member 'BRPlayerController_GetIsSpectator::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.GetSaveFileUploadProgress
// 0x0004 (0x0004 - 0x0000)
struct BRPlayerController_GetSaveFileUploadProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_GetSaveFileUploadProgress) == 0x000004, "Wrong alignment on BRPlayerController_GetSaveFileUploadProgress");
static_assert(sizeof(BRPlayerController_GetSaveFileUploadProgress) == 0x000004, "Wrong size on BRPlayerController_GetSaveFileUploadProgress");
static_assert(offsetof(BRPlayerController_GetSaveFileUploadProgress, ReturnValue) == 0x000000, "Member 'BRPlayerController_GetSaveFileUploadProgress::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.HasLivingCharacter
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_HasLivingCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_HasLivingCharacter) == 0x000001, "Wrong alignment on BRPlayerController_HasLivingCharacter");
static_assert(sizeof(BRPlayerController_HasLivingCharacter) == 0x000001, "Wrong size on BRPlayerController_HasLivingCharacter");
static_assert(offsetof(BRPlayerController_HasLivingCharacter, ReturnValue) == 0x000000, "Member 'BRPlayerController_HasLivingCharacter::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.IsActuallyTrustedBy
// 0x0014 (0x0014 - 0x0000)
struct BRPlayerController_IsActuallyTrustedBy final
{
public:
	struct FBRGuid                                OtherUserId;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_IsActuallyTrustedBy) == 0x000004, "Wrong alignment on BRPlayerController_IsActuallyTrustedBy");
static_assert(sizeof(BRPlayerController_IsActuallyTrustedBy) == 0x000014, "Wrong size on BRPlayerController_IsActuallyTrustedBy");
static_assert(offsetof(BRPlayerController_IsActuallyTrustedBy, OtherUserId) == 0x000000, "Member 'BRPlayerController_IsActuallyTrustedBy::OtherUserId' has a wrong offset!");
static_assert(offsetof(BRPlayerController_IsActuallyTrustedBy, ReturnValue) == 0x000010, "Member 'BRPlayerController_IsActuallyTrustedBy::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.IsTrustedBy
// 0x0014 (0x0014 - 0x0000)
struct BRPlayerController_IsTrustedBy final
{
public:
	struct FBRGuid                                OtherUserId;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_IsTrustedBy) == 0x000004, "Wrong alignment on BRPlayerController_IsTrustedBy");
static_assert(sizeof(BRPlayerController_IsTrustedBy) == 0x000014, "Wrong size on BRPlayerController_IsTrustedBy");
static_assert(offsetof(BRPlayerController_IsTrustedBy, OtherUserId) == 0x000000, "Member 'BRPlayerController_IsTrustedBy::OtherUserId' has a wrong offset!");
static_assert(offsetof(BRPlayerController_IsTrustedBy, ReturnValue) == 0x000010, "Member 'BRPlayerController_IsTrustedBy::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.IsTrustedByEveryone
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_IsTrustedByEveryone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_IsTrustedByEveryone) == 0x000001, "Wrong alignment on BRPlayerController_IsTrustedByEveryone");
static_assert(sizeof(BRPlayerController_IsTrustedByEveryone) == 0x000001, "Wrong size on BRPlayerController_IsTrustedByEveryone");
static_assert(offsetof(BRPlayerController_IsTrustedByEveryone, ReturnValue) == 0x000000, "Member 'BRPlayerController_IsTrustedByEveryone::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.IsUploadingSaveFile
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerController_IsUploadingSaveFile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerController_IsUploadingSaveFile) == 0x000001, "Wrong alignment on BRPlayerController_IsUploadingSaveFile");
static_assert(sizeof(BRPlayerController_IsUploadingSaveFile) == 0x000001, "Wrong size on BRPlayerController_IsUploadingSaveFile");
static_assert(offsetof(BRPlayerController_IsUploadingSaveFile, ReturnValue) == 0x000000, "Member 'BRPlayerController_IsUploadingSaveFile::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerController.TrustsUserOnServer
// 0x0014 (0x0014 - 0x0000)
struct BRPlayerController_TrustsUserOnServer final
{
public:
	struct FBRGuid                                OtherUserId;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerController_TrustsUserOnServer) == 0x000004, "Wrong alignment on BRPlayerController_TrustsUserOnServer");
static_assert(sizeof(BRPlayerController_TrustsUserOnServer) == 0x000014, "Wrong size on BRPlayerController_TrustsUserOnServer");
static_assert(offsetof(BRPlayerController_TrustsUserOnServer, OtherUserId) == 0x000000, "Member 'BRPlayerController_TrustsUserOnServer::OtherUserId' has a wrong offset!");
static_assert(offsetof(BRPlayerController_TrustsUserOnServer, ReturnValue) == 0x000010, "Member 'BRPlayerController_TrustsUserOnServer::ReturnValue' has a wrong offset!");

// Function Brickadia.BRManipulatorInputCapturer.LookUp
// 0x0004 (0x0004 - 0x0000)
struct BRManipulatorInputCapturer_LookUp final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRManipulatorInputCapturer_LookUp) == 0x000004, "Wrong alignment on BRManipulatorInputCapturer_LookUp");
static_assert(sizeof(BRManipulatorInputCapturer_LookUp) == 0x000004, "Wrong size on BRManipulatorInputCapturer_LookUp");
static_assert(offsetof(BRManipulatorInputCapturer_LookUp, Axis) == 0x000000, "Member 'BRManipulatorInputCapturer_LookUp::Axis' has a wrong offset!");

// Function Brickadia.BRManipulatorInputCapturer.LookUpRate
// 0x0004 (0x0004 - 0x0000)
struct BRManipulatorInputCapturer_LookUpRate final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRManipulatorInputCapturer_LookUpRate) == 0x000004, "Wrong alignment on BRManipulatorInputCapturer_LookUpRate");
static_assert(sizeof(BRManipulatorInputCapturer_LookUpRate) == 0x000004, "Wrong size on BRManipulatorInputCapturer_LookUpRate");
static_assert(offsetof(BRManipulatorInputCapturer_LookUpRate, Axis) == 0x000000, "Member 'BRManipulatorInputCapturer_LookUpRate::Axis' has a wrong offset!");

// Function Brickadia.BRManipulatorInputCapturer.Turn
// 0x0004 (0x0004 - 0x0000)
struct BRManipulatorInputCapturer_Turn final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRManipulatorInputCapturer_Turn) == 0x000004, "Wrong alignment on BRManipulatorInputCapturer_Turn");
static_assert(sizeof(BRManipulatorInputCapturer_Turn) == 0x000004, "Wrong size on BRManipulatorInputCapturer_Turn");
static_assert(offsetof(BRManipulatorInputCapturer_Turn, Axis) == 0x000000, "Member 'BRManipulatorInputCapturer_Turn::Axis' has a wrong offset!");

// Function Brickadia.BRManipulatorInputCapturer.TurnRate
// 0x0004 (0x0004 - 0x0000)
struct BRManipulatorInputCapturer_TurnRate final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRManipulatorInputCapturer_TurnRate) == 0x000004, "Wrong alignment on BRManipulatorInputCapturer_TurnRate");
static_assert(sizeof(BRManipulatorInputCapturer_TurnRate) == 0x000004, "Wrong size on BRManipulatorInputCapturer_TurnRate");
static_assert(offsetof(BRManipulatorInputCapturer_TurnRate, Axis) == 0x000000, "Member 'BRManipulatorInputCapturer_TurnRate::Axis' has a wrong offset!");

// Function Brickadia.BRPresetDescriptor.GetPresetPath
// 0x0010 (0x0010 - 0x0000)
struct BRPresetDescriptor_GetPresetPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPresetDescriptor_GetPresetPath) == 0x000008, "Wrong alignment on BRPresetDescriptor_GetPresetPath");
static_assert(sizeof(BRPresetDescriptor_GetPresetPath) == 0x000010, "Wrong size on BRPresetDescriptor_GetPresetPath");
static_assert(offsetof(BRPresetDescriptor_GetPresetPath, ReturnValue) == 0x000000, "Member 'BRPresetDescriptor_GetPresetPath::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWeaponAmmoWidget.Setup
// 0x0010 (0x0010 - 0x0000)
struct BRWeaponAmmoWidget_Setup final
{
public:
	class UBRWeaponResource*                      InResource;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUsePlayerSupply;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRWeaponAmmoWidget_Setup) == 0x000008, "Wrong alignment on BRWeaponAmmoWidget_Setup");
static_assert(sizeof(BRWeaponAmmoWidget_Setup) == 0x000010, "Wrong size on BRWeaponAmmoWidget_Setup");
static_assert(offsetof(BRWeaponAmmoWidget_Setup, InResource) == 0x000000, "Member 'BRWeaponAmmoWidget_Setup::InResource' has a wrong offset!");
static_assert(offsetof(BRWeaponAmmoWidget_Setup, bInUsePlayerSupply) == 0x000008, "Member 'BRWeaponAmmoWidget_Setup::bInUsePlayerSupply' has a wrong offset!");

// Function Brickadia.BRWeaponAmmoWidget.UpdateAmmo
// 0x0014 (0x0014 - 0x0000)
struct BRWeaponAmmoWidget_UpdateAmmo final
{
public:
	int32                                         Loaded;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Loadable;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Supply;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Supplyable;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRWeaponResourceUsageOverride                ResourceUsageOverride;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideSupply;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRWeaponAmmoWidget_UpdateAmmo) == 0x000004, "Wrong alignment on BRWeaponAmmoWidget_UpdateAmmo");
static_assert(sizeof(BRWeaponAmmoWidget_UpdateAmmo) == 0x000014, "Wrong size on BRWeaponAmmoWidget_UpdateAmmo");
static_assert(offsetof(BRWeaponAmmoWidget_UpdateAmmo, Loaded) == 0x000000, "Member 'BRWeaponAmmoWidget_UpdateAmmo::Loaded' has a wrong offset!");
static_assert(offsetof(BRWeaponAmmoWidget_UpdateAmmo, Loadable) == 0x000004, "Member 'BRWeaponAmmoWidget_UpdateAmmo::Loadable' has a wrong offset!");
static_assert(offsetof(BRWeaponAmmoWidget_UpdateAmmo, Supply) == 0x000008, "Member 'BRWeaponAmmoWidget_UpdateAmmo::Supply' has a wrong offset!");
static_assert(offsetof(BRWeaponAmmoWidget_UpdateAmmo, Supplyable) == 0x00000C, "Member 'BRWeaponAmmoWidget_UpdateAmmo::Supplyable' has a wrong offset!");
static_assert(offsetof(BRWeaponAmmoWidget_UpdateAmmo, ResourceUsageOverride) == 0x000010, "Member 'BRWeaponAmmoWidget_UpdateAmmo::ResourceUsageOverride' has a wrong offset!");
static_assert(offsetof(BRWeaponAmmoWidget_UpdateAmmo, bHideSupply) == 0x000011, "Member 'BRWeaponAmmoWidget_UpdateAmmo::bHideSupply' has a wrong offset!");

// Function Brickadia.BRWeaponAmmoWidget.UpdateWeaponIcon
// 0x0008 (0x0008 - 0x0000)
struct BRWeaponAmmoWidget_UpdateWeaponIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponAmmoWidget_UpdateWeaponIcon) == 0x000008, "Wrong alignment on BRWeaponAmmoWidget_UpdateWeaponIcon");
static_assert(sizeof(BRWeaponAmmoWidget_UpdateWeaponIcon) == 0x000008, "Wrong size on BRWeaponAmmoWidget_UpdateWeaponIcon");
static_assert(offsetof(BRWeaponAmmoWidget_UpdateWeaponIcon, Icon) == 0x000000, "Member 'BRWeaponAmmoWidget_UpdateWeaponIcon::Icon' has a wrong offset!");

// Function Brickadia.BRWeaponAmmoWidget.UpdateWeaponResourceIcon
// 0x0008 (0x0008 - 0x0000)
struct BRWeaponAmmoWidget_UpdateWeaponResourceIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponAmmoWidget_UpdateWeaponResourceIcon) == 0x000008, "Wrong alignment on BRWeaponAmmoWidget_UpdateWeaponResourceIcon");
static_assert(sizeof(BRWeaponAmmoWidget_UpdateWeaponResourceIcon) == 0x000008, "Wrong size on BRWeaponAmmoWidget_UpdateWeaponResourceIcon");
static_assert(offsetof(BRWeaponAmmoWidget_UpdateWeaponResourceIcon, Icon) == 0x000000, "Member 'BRWeaponAmmoWidget_UpdateWeaponResourceIcon::Icon' has a wrong offset!");

// Function Brickadia.BRTool_Connector.Audio_OnCreateConnection
// 0x0038 (0x0038 - 0x0000)
struct BRTool_Connector_Audio_OnCreateConnection final
{
public:
	struct FVector                                EndPortPos;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPortNormal;                                     // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRConnectorDisplayedPortType                 EndPortType;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Connector_Audio_OnCreateConnection) == 0x000008, "Wrong alignment on BRTool_Connector_Audio_OnCreateConnection");
static_assert(sizeof(BRTool_Connector_Audio_OnCreateConnection) == 0x000038, "Wrong size on BRTool_Connector_Audio_OnCreateConnection");
static_assert(offsetof(BRTool_Connector_Audio_OnCreateConnection, EndPortPos) == 0x000000, "Member 'BRTool_Connector_Audio_OnCreateConnection::EndPortPos' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_Audio_OnCreateConnection, EndPortNormal) == 0x000018, "Member 'BRTool_Connector_Audio_OnCreateConnection::EndPortNormal' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_Audio_OnCreateConnection, EndPortType) == 0x000030, "Member 'BRTool_Connector_Audio_OnCreateConnection::EndPortType' has a wrong offset!");

// Function Brickadia.BRTool_Connector.Audio_OnMouseOverPort
// 0x0038 (0x0038 - 0x0000)
struct BRTool_Connector_Audio_OnMouseOverPort final
{
public:
	struct FVector                                PortPos;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PortNormal;                                        // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRConnectorDisplayedPortType                 PortType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Connector_Audio_OnMouseOverPort) == 0x000008, "Wrong alignment on BRTool_Connector_Audio_OnMouseOverPort");
static_assert(sizeof(BRTool_Connector_Audio_OnMouseOverPort) == 0x000038, "Wrong size on BRTool_Connector_Audio_OnMouseOverPort");
static_assert(offsetof(BRTool_Connector_Audio_OnMouseOverPort, PortPos) == 0x000000, "Member 'BRTool_Connector_Audio_OnMouseOverPort::PortPos' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_Audio_OnMouseOverPort, PortNormal) == 0x000018, "Member 'BRTool_Connector_Audio_OnMouseOverPort::PortNormal' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_Audio_OnMouseOverPort, PortType) == 0x000030, "Member 'BRTool_Connector_Audio_OnMouseOverPort::PortType' has a wrong offset!");

// Function Brickadia.BRTool_Connector.Audio_OnRemoveConnection
// 0x0038 (0x0038 - 0x0000)
struct BRTool_Connector_Audio_OnRemoveConnection final
{
public:
	struct FVector                                EndPortPos;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPortNormal;                                     // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRConnectorDisplayedPortType                 EndPortType;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Connector_Audio_OnRemoveConnection) == 0x000008, "Wrong alignment on BRTool_Connector_Audio_OnRemoveConnection");
static_assert(sizeof(BRTool_Connector_Audio_OnRemoveConnection) == 0x000038, "Wrong size on BRTool_Connector_Audio_OnRemoveConnection");
static_assert(offsetof(BRTool_Connector_Audio_OnRemoveConnection, EndPortPos) == 0x000000, "Member 'BRTool_Connector_Audio_OnRemoveConnection::EndPortPos' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_Audio_OnRemoveConnection, EndPortNormal) == 0x000018, "Member 'BRTool_Connector_Audio_OnRemoveConnection::EndPortNormal' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_Audio_OnRemoveConnection, EndPortType) == 0x000030, "Member 'BRTool_Connector_Audio_OnRemoveConnection::EndPortType' has a wrong offset!");

// Function Brickadia.BRTool_Connector.Audio_OnStartConnecting
// 0x0048 (0x0048 - 0x0000)
struct BRTool_Connector_Audio_OnStartConnecting final
{
public:
	struct FVector                                PortPos;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PortNormal;                                        // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRConnectorDisplayedPortType                 PortType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           PortColor;                                         // 0x0034(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Connector_Audio_OnStartConnecting) == 0x000008, "Wrong alignment on BRTool_Connector_Audio_OnStartConnecting");
static_assert(sizeof(BRTool_Connector_Audio_OnStartConnecting) == 0x000048, "Wrong size on BRTool_Connector_Audio_OnStartConnecting");
static_assert(offsetof(BRTool_Connector_Audio_OnStartConnecting, PortPos) == 0x000000, "Member 'BRTool_Connector_Audio_OnStartConnecting::PortPos' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_Audio_OnStartConnecting, PortNormal) == 0x000018, "Member 'BRTool_Connector_Audio_OnStartConnecting::PortNormal' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_Audio_OnStartConnecting, PortType) == 0x000030, "Member 'BRTool_Connector_Audio_OnStartConnecting::PortType' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_Audio_OnStartConnecting, PortColor) == 0x000034, "Member 'BRTool_Connector_Audio_OnStartConnecting::PortColor' has a wrong offset!");

// Function Brickadia.BRTool_Connector.ServerConnectOrDisconnectComponentWire
// 0x0030 (0x0030 - 0x0000)
struct BRTool_Connector_ServerConnectOrDisconnectComponentWire final
{
public:
	struct FBrickComponentWirePortRef             SourcePortRef;                                     // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentWirePortRef             TargetPortRef;                                     // 0x0018(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Connector_ServerConnectOrDisconnectComponentWire) == 0x000008, "Wrong alignment on BRTool_Connector_ServerConnectOrDisconnectComponentWire");
static_assert(sizeof(BRTool_Connector_ServerConnectOrDisconnectComponentWire) == 0x000030, "Wrong size on BRTool_Connector_ServerConnectOrDisconnectComponentWire");
static_assert(offsetof(BRTool_Connector_ServerConnectOrDisconnectComponentWire, SourcePortRef) == 0x000000, "Member 'BRTool_Connector_ServerConnectOrDisconnectComponentWire::SourcePortRef' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_ServerConnectOrDisconnectComponentWire, TargetPortRef) == 0x000018, "Member 'BRTool_Connector_ServerConnectOrDisconnectComponentWire::TargetPortRef' has a wrong offset!");

// Function Brickadia.BRTool_Connector.ServerDisconnectComponentWirePort
// 0x0020 (0x0020 - 0x0000)
struct BRTool_Connector_ServerDisconnectComponentWirePort final
{
public:
	struct FBrickComponentWirePortRef             PortRef;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOutputPort;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Connector_ServerDisconnectComponentWirePort) == 0x000008, "Wrong alignment on BRTool_Connector_ServerDisconnectComponentWirePort");
static_assert(sizeof(BRTool_Connector_ServerDisconnectComponentWirePort) == 0x000020, "Wrong size on BRTool_Connector_ServerDisconnectComponentWirePort");
static_assert(offsetof(BRTool_Connector_ServerDisconnectComponentWirePort, PortRef) == 0x000000, "Member 'BRTool_Connector_ServerDisconnectComponentWirePort::PortRef' has a wrong offset!");
static_assert(offsetof(BRTool_Connector_ServerDisconnectComponentWirePort, bIsOutputPort) == 0x000018, "Member 'BRTool_Connector_ServerDisconnectComponentWirePort::bIsOutputPort' has a wrong offset!");

// Function Brickadia.BrickTypeNetWrapperStatics.BreakBrickTypeNetWrapper
// 0x0020 (0x0020 - 0x0000)
struct BrickTypeNetWrapperStatics_BreakBrickTypeNetWrapper final
{
public:
	struct FBrickTypeNetWrapper                   Wrapper;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickType*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTypeNetWrapperStatics_BreakBrickTypeNetWrapper) == 0x000008, "Wrong alignment on BrickTypeNetWrapperStatics_BreakBrickTypeNetWrapper");
static_assert(sizeof(BrickTypeNetWrapperStatics_BreakBrickTypeNetWrapper) == 0x000020, "Wrong size on BrickTypeNetWrapperStatics_BreakBrickTypeNetWrapper");
static_assert(offsetof(BrickTypeNetWrapperStatics_BreakBrickTypeNetWrapper, Wrapper) == 0x000000, "Member 'BrickTypeNetWrapperStatics_BreakBrickTypeNetWrapper::Wrapper' has a wrong offset!");
static_assert(offsetof(BrickTypeNetWrapperStatics_BreakBrickTypeNetWrapper, ReturnValue) == 0x000018, "Member 'BrickTypeNetWrapperStatics_BreakBrickTypeNetWrapper::ReturnValue' has a wrong offset!");

// Function Brickadia.BrickTypeNetWrapperStatics.MakeBrickTypeNetWrapper
// 0x0020 (0x0020 - 0x0000)
struct BrickTypeNetWrapperStatics_MakeBrickTypeNetWrapper final
{
public:
	class UBrickType*                             BrickType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickTypeNetWrapper                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTypeNetWrapperStatics_MakeBrickTypeNetWrapper) == 0x000008, "Wrong alignment on BrickTypeNetWrapperStatics_MakeBrickTypeNetWrapper");
static_assert(sizeof(BrickTypeNetWrapperStatics_MakeBrickTypeNetWrapper) == 0x000020, "Wrong size on BrickTypeNetWrapperStatics_MakeBrickTypeNetWrapper");
static_assert(offsetof(BrickTypeNetWrapperStatics_MakeBrickTypeNetWrapper, BrickType) == 0x000000, "Member 'BrickTypeNetWrapperStatics_MakeBrickTypeNetWrapper::BrickType' has a wrong offset!");
static_assert(offsetof(BrickTypeNetWrapperStatics_MakeBrickTypeNetWrapper, ReturnValue) == 0x000008, "Member 'BrickTypeNetWrapperStatics_MakeBrickTypeNetWrapper::ReturnValue' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.CheckArgumentTypes
// 0x0020 (0x0020 - 0x0000)
struct BRChatCommandWorldSubsystem_CheckArgumentTypes final
{
public:
	TArray<class FString>                         Arguments;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EBRChatCommandArgType>                 ArgTypesOut;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandWorldSubsystem_CheckArgumentTypes) == 0x000008, "Wrong alignment on BRChatCommandWorldSubsystem_CheckArgumentTypes");
static_assert(sizeof(BRChatCommandWorldSubsystem_CheckArgumentTypes) == 0x000020, "Wrong size on BRChatCommandWorldSubsystem_CheckArgumentTypes");
static_assert(offsetof(BRChatCommandWorldSubsystem_CheckArgumentTypes, Arguments) == 0x000000, "Member 'BRChatCommandWorldSubsystem_CheckArgumentTypes::Arguments' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_CheckArgumentTypes, ArgTypesOut) == 0x000010, "Member 'BRChatCommandWorldSubsystem_CheckArgumentTypes::ArgTypesOut' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.SplitArguments
// 0x0020 (0x0020 - 0x0000)
struct BRChatCommandWorldSubsystem_SplitArguments final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ArgumentsOut;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandWorldSubsystem_SplitArguments) == 0x000008, "Wrong alignment on BRChatCommandWorldSubsystem_SplitArguments");
static_assert(sizeof(BRChatCommandWorldSubsystem_SplitArguments) == 0x000020, "Wrong size on BRChatCommandWorldSubsystem_SplitArguments");
static_assert(offsetof(BRChatCommandWorldSubsystem_SplitArguments, Source) == 0x000000, "Member 'BRChatCommandWorldSubsystem_SplitArguments::Source' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_SplitArguments, ArgumentsOut) == 0x000010, "Member 'BRChatCommandWorldSubsystem_SplitArguments::ArgumentsOut' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.CallChatCommand
// 0x0020 (0x0020 - 0x0000)
struct BRChatCommandWorldSubsystem_CallChatCommand final
{
public:
	class ABRPlayerController*                    Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Command;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ArgsString;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandWorldSubsystem_CallChatCommand) == 0x000008, "Wrong alignment on BRChatCommandWorldSubsystem_CallChatCommand");
static_assert(sizeof(BRChatCommandWorldSubsystem_CallChatCommand) == 0x000020, "Wrong size on BRChatCommandWorldSubsystem_CallChatCommand");
static_assert(offsetof(BRChatCommandWorldSubsystem_CallChatCommand, Caller) == 0x000000, "Member 'BRChatCommandWorldSubsystem_CallChatCommand::Caller' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_CallChatCommand, Command) == 0x000008, "Member 'BRChatCommandWorldSubsystem_CallChatCommand::Command' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_CallChatCommand, ArgsString) == 0x000010, "Member 'BRChatCommandWorldSubsystem_CallChatCommand::ArgsString' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.CallChatCommandWithArgs
// 0x0028 (0x0028 - 0x0000)
struct BRChatCommandWorldSubsystem_CallChatCommandWithArgs final
{
public:
	struct FBRChatCommandContext                  Context;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Command;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Args;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandWorldSubsystem_CallChatCommandWithArgs) == 0x000008, "Wrong alignment on BRChatCommandWorldSubsystem_CallChatCommandWithArgs");
static_assert(sizeof(BRChatCommandWorldSubsystem_CallChatCommandWithArgs) == 0x000028, "Wrong size on BRChatCommandWorldSubsystem_CallChatCommandWithArgs");
static_assert(offsetof(BRChatCommandWorldSubsystem_CallChatCommandWithArgs, Context) == 0x000000, "Member 'BRChatCommandWorldSubsystem_CallChatCommandWithArgs::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_CallChatCommandWithArgs, Command) == 0x000010, "Member 'BRChatCommandWorldSubsystem_CallChatCommandWithArgs::Command' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_CallChatCommandWithArgs, Args) == 0x000018, "Member 'BRChatCommandWorldSubsystem_CallChatCommandWithArgs::Args' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.ShowHelpStringsForCommand
// 0x0020 (0x0020 - 0x0000)
struct BRChatCommandWorldSubsystem_ShowHelpStringsForCommand final
{
public:
	class FName                                   Command;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRChatCommandContext                  Context;                                           // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAdvanced;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRChatCommandWorldSubsystem_ShowHelpStringsForCommand) == 0x000008, "Wrong alignment on BRChatCommandWorldSubsystem_ShowHelpStringsForCommand");
static_assert(sizeof(BRChatCommandWorldSubsystem_ShowHelpStringsForCommand) == 0x000020, "Wrong size on BRChatCommandWorldSubsystem_ShowHelpStringsForCommand");
static_assert(offsetof(BRChatCommandWorldSubsystem_ShowHelpStringsForCommand, Command) == 0x000000, "Member 'BRChatCommandWorldSubsystem_ShowHelpStringsForCommand::Command' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_ShowHelpStringsForCommand, Context) == 0x000008, "Member 'BRChatCommandWorldSubsystem_ShowHelpStringsForCommand::Context' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_ShowHelpStringsForCommand, bAdvanced) == 0x000018, "Member 'BRChatCommandWorldSubsystem_ShowHelpStringsForCommand::bAdvanced' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.ChatCommandExists
// 0x000C (0x000C - 0x0000)
struct BRChatCommandWorldSubsystem_ChatCommandExists final
{
public:
	class FName                                   Command;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRChatCommandWorldSubsystem_ChatCommandExists) == 0x000004, "Wrong alignment on BRChatCommandWorldSubsystem_ChatCommandExists");
static_assert(sizeof(BRChatCommandWorldSubsystem_ChatCommandExists) == 0x00000C, "Wrong size on BRChatCommandWorldSubsystem_ChatCommandExists");
static_assert(offsetof(BRChatCommandWorldSubsystem_ChatCommandExists, Command) == 0x000000, "Member 'BRChatCommandWorldSubsystem_ChatCommandExists::Command' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_ChatCommandExists, ReturnValue) == 0x000008, "Member 'BRChatCommandWorldSubsystem_ChatCommandExists::ReturnValue' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.GetChatCommandList
// 0x0010 (0x0010 - 0x0000)
struct BRChatCommandWorldSubsystem_GetChatCommandList final
{
public:
	TArray<class FName>                           Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandWorldSubsystem_GetChatCommandList) == 0x000008, "Wrong alignment on BRChatCommandWorldSubsystem_GetChatCommandList");
static_assert(sizeof(BRChatCommandWorldSubsystem_GetChatCommandList) == 0x000010, "Wrong size on BRChatCommandWorldSubsystem_GetChatCommandList");
static_assert(offsetof(BRChatCommandWorldSubsystem_GetChatCommandList, Array) == 0x000000, "Member 'BRChatCommandWorldSubsystem_GetChatCommandList::Array' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.GetChatCommandMetaDataForAllOverloads
// 0x0018 (0x0018 - 0x0000)
struct BRChatCommandWorldSubsystem_GetChatCommandMetaDataForAllOverloads final
{
public:
	class FName                                   Command;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBRChatCommandMetaData>         Array;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandWorldSubsystem_GetChatCommandMetaDataForAllOverloads) == 0x000008, "Wrong alignment on BRChatCommandWorldSubsystem_GetChatCommandMetaDataForAllOverloads");
static_assert(sizeof(BRChatCommandWorldSubsystem_GetChatCommandMetaDataForAllOverloads) == 0x000018, "Wrong size on BRChatCommandWorldSubsystem_GetChatCommandMetaDataForAllOverloads");
static_assert(offsetof(BRChatCommandWorldSubsystem_GetChatCommandMetaDataForAllOverloads, Command) == 0x000000, "Member 'BRChatCommandWorldSubsystem_GetChatCommandMetaDataForAllOverloads::Command' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_GetChatCommandMetaDataForAllOverloads, Array) == 0x000008, "Member 'BRChatCommandWorldSubsystem_GetChatCommandMetaDataForAllOverloads::Array' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.GetCommandFormatHelpStrings
// 0x0018 (0x0018 - 0x0000)
struct BRChatCommandWorldSubsystem_GetCommandFormatHelpStrings final
{
public:
	class FName                                   Command;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         HelpStrings;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandWorldSubsystem_GetCommandFormatHelpStrings) == 0x000008, "Wrong alignment on BRChatCommandWorldSubsystem_GetCommandFormatHelpStrings");
static_assert(sizeof(BRChatCommandWorldSubsystem_GetCommandFormatHelpStrings) == 0x000018, "Wrong size on BRChatCommandWorldSubsystem_GetCommandFormatHelpStrings");
static_assert(offsetof(BRChatCommandWorldSubsystem_GetCommandFormatHelpStrings, Command) == 0x000000, "Member 'BRChatCommandWorldSubsystem_GetCommandFormatHelpStrings::Command' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_GetCommandFormatHelpStrings, HelpStrings) == 0x000008, "Member 'BRChatCommandWorldSubsystem_GetCommandFormatHelpStrings::HelpStrings' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.GetNumOverloadsForCommand
// 0x000C (0x000C - 0x0000)
struct BRChatCommandWorldSubsystem_GetNumOverloadsForCommand final
{
public:
	class FName                                   Command;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandWorldSubsystem_GetNumOverloadsForCommand) == 0x000004, "Wrong alignment on BRChatCommandWorldSubsystem_GetNumOverloadsForCommand");
static_assert(sizeof(BRChatCommandWorldSubsystem_GetNumOverloadsForCommand) == 0x00000C, "Wrong size on BRChatCommandWorldSubsystem_GetNumOverloadsForCommand");
static_assert(offsetof(BRChatCommandWorldSubsystem_GetNumOverloadsForCommand, Command) == 0x000000, "Member 'BRChatCommandWorldSubsystem_GetNumOverloadsForCommand::Command' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_GetNumOverloadsForCommand, ReturnValue) == 0x000008, "Member 'BRChatCommandWorldSubsystem_GetNumOverloadsForCommand::ReturnValue' has a wrong offset!");

// Function Brickadia.BRChatCommandWorldSubsystem.IsChatCommandCallableForAllOverloads
// 0x0020 (0x0020 - 0x0000)
struct BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads final
{
public:
	class FName                                   Command;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ABRPlayerController*              Controller;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  Array;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads) == 0x000008, "Wrong alignment on BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads");
static_assert(sizeof(BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads) == 0x000020, "Wrong size on BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads");
static_assert(offsetof(BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads, Command) == 0x000000, "Member 'BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads::Command' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads, Controller) == 0x000008, "Member 'BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads::Controller' has a wrong offset!");
static_assert(offsetof(BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads, Array) == 0x000010, "Member 'BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads::Array' has a wrong offset!");

// Function Brickadia.BRImageCacheSubsystem.InvalidateImage
// 0x0018 (0x0018 - 0x0000)
struct BRImageCacheSubsystem_InvalidateImage final
{
public:
	struct FBRImageCacheKey                       Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRImageCacheSubsystem_InvalidateImage) == 0x000008, "Wrong alignment on BRImageCacheSubsystem_InvalidateImage");
static_assert(sizeof(BRImageCacheSubsystem_InvalidateImage) == 0x000018, "Wrong size on BRImageCacheSubsystem_InvalidateImage");
static_assert(offsetof(BRImageCacheSubsystem_InvalidateImage, Key) == 0x000000, "Member 'BRImageCacheSubsystem_InvalidateImage::Key' has a wrong offset!");

// Function Brickadia.BRImageCacheSubsystem.InvalidateTag
// 0x0010 (0x0010 - 0x0000)
struct BRImageCacheSubsystem_InvalidateTag final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRImageCacheSubsystem_InvalidateTag) == 0x000008, "Wrong alignment on BRImageCacheSubsystem_InvalidateTag");
static_assert(sizeof(BRImageCacheSubsystem_InvalidateTag) == 0x000010, "Wrong size on BRImageCacheSubsystem_InvalidateTag");
static_assert(offsetof(BRImageCacheSubsystem_InvalidateTag, Tag) == 0x000000, "Member 'BRImageCacheSubsystem_InvalidateTag::Tag' has a wrong offset!");

// Function Brickadia.BRImageCacheSubsystem.RetrieveImage
// 0x0020 (0x0020 - 0x0000)
struct BRImageCacheSubsystem_RetrieveImage final
{
public:
	struct FBRImageCacheKey                       Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRImageCacheSubsystem_RetrieveImage) == 0x000008, "Wrong alignment on BRImageCacheSubsystem_RetrieveImage");
static_assert(sizeof(BRImageCacheSubsystem_RetrieveImage) == 0x000020, "Wrong size on BRImageCacheSubsystem_RetrieveImage");
static_assert(offsetof(BRImageCacheSubsystem_RetrieveImage, Key) == 0x000000, "Member 'BRImageCacheSubsystem_RetrieveImage::Key' has a wrong offset!");
static_assert(offsetof(BRImageCacheSubsystem_RetrieveImage, ReturnValue) == 0x000018, "Member 'BRImageCacheSubsystem_RetrieveImage::ReturnValue' has a wrong offset!");

// Function Brickadia.BRImageCacheSubsystem.StoreImage
// 0x0020 (0x0020 - 0x0000)
struct BRImageCacheSubsystem_StoreImage final
{
public:
	struct FBRImageCacheKey                       Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Image;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRImageCacheSubsystem_StoreImage) == 0x000008, "Wrong alignment on BRImageCacheSubsystem_StoreImage");
static_assert(sizeof(BRImageCacheSubsystem_StoreImage) == 0x000020, "Wrong size on BRImageCacheSubsystem_StoreImage");
static_assert(offsetof(BRImageCacheSubsystem_StoreImage, Key) == 0x000000, "Member 'BRImageCacheSubsystem_StoreImage::Key' has a wrong offset!");
static_assert(offsetof(BRImageCacheSubsystem_StoreImage, Image) == 0x000018, "Member 'BRImageCacheSubsystem_StoreImage::Image' has a wrong offset!");

// Function Brickadia.BRRulesetMember.GetAffiliatedTeam
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetMember_GetAffiliatedTeam final
{
public:
	class UBRRulesetTeam*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetMember_GetAffiliatedTeam) == 0x000008, "Wrong alignment on BRRulesetMember_GetAffiliatedTeam");
static_assert(sizeof(BRRulesetMember_GetAffiliatedTeam) == 0x000008, "Wrong size on BRRulesetMember_GetAffiliatedTeam");
static_assert(offsetof(BRRulesetMember_GetAffiliatedTeam, ReturnValue) == 0x000000, "Member 'BRRulesetMember_GetAffiliatedTeam::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetMember.GetOwningMemberState
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetMember_GetOwningMemberState final
{
public:
	class ABRPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetMember_GetOwningMemberState) == 0x000008, "Wrong alignment on BRRulesetMember_GetOwningMemberState");
static_assert(sizeof(BRRulesetMember_GetOwningMemberState) == 0x000008, "Wrong size on BRRulesetMember_GetOwningMemberState");
static_assert(offsetof(BRRulesetMember_GetOwningMemberState, ReturnValue) == 0x000000, "Member 'BRRulesetMember_GetOwningMemberState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetMember.GetRuleset
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetMember_GetRuleset final
{
public:
	class ABRRuleset*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetMember_GetRuleset) == 0x000008, "Wrong alignment on BRRulesetMember_GetRuleset");
static_assert(sizeof(BRRulesetMember_GetRuleset) == 0x000008, "Wrong size on BRRulesetMember_GetRuleset");
static_assert(offsetof(BRRulesetMember_GetRuleset, ReturnValue) == 0x000000, "Member 'BRRulesetMember_GetRuleset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInputIconPartWidget.SetIcon
// 0x0008 (0x0008 - 0x0000)
struct BRInputIconPartWidget_SetIcon final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInputIconPartWidget_SetIcon) == 0x000008, "Wrong alignment on BRInputIconPartWidget_SetIcon");
static_assert(sizeof(BRInputIconPartWidget_SetIcon) == 0x000008, "Wrong size on BRInputIconPartWidget_SetIcon");
static_assert(offsetof(BRInputIconPartWidget_SetIcon, InIcon) == 0x000000, "Member 'BRInputIconPartWidget_SetIcon::InIcon' has a wrong offset!");

// Function Brickadia.BRInputIconWidget.HandleInputBindingsChanged
// 0x0008 (0x0008 - 0x0000)
struct BRInputIconWidget_HandleInputBindingsChanged final
{
public:
	class UBRGameSettingsBase*                    SettingsObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInputIconWidget_HandleInputBindingsChanged) == 0x000008, "Wrong alignment on BRInputIconWidget_HandleInputBindingsChanged");
static_assert(sizeof(BRInputIconWidget_HandleInputBindingsChanged) == 0x000008, "Wrong size on BRInputIconWidget_HandleInputBindingsChanged");
static_assert(offsetof(BRInputIconWidget_HandleInputBindingsChanged, SettingsObject) == 0x000000, "Member 'BRInputIconWidget_HandleInputBindingsChanged::SettingsObject' has a wrong offset!");

// Function Brickadia.BRInputIconWidget.SetInput
// 0x000C (0x000C - 0x0000)
struct BRInputIconWidget_SetInput final
{
public:
	class FName                                   InInputName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsAxis;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRInputIconWidget_SetInput) == 0x000004, "Wrong alignment on BRInputIconWidget_SetInput");
static_assert(sizeof(BRInputIconWidget_SetInput) == 0x00000C, "Wrong size on BRInputIconWidget_SetInput");
static_assert(offsetof(BRInputIconWidget_SetInput, InInputName) == 0x000000, "Member 'BRInputIconWidget_SetInput::InInputName' has a wrong offset!");
static_assert(offsetof(BRInputIconWidget_SetInput, bInIsAxis) == 0x000008, "Member 'BRInputIconWidget_SetInput::bInIsAxis' has a wrong offset!");

// Function Brickadia.BRInventoryEntryBase.GetItemInstance
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntryBase_GetItemInstance final
{
public:
	class ABRItemBase*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntryBase_GetItemInstance) == 0x000008, "Wrong alignment on BRInventoryEntryBase_GetItemInstance");
static_assert(sizeof(BRInventoryEntryBase_GetItemInstance) == 0x000008, "Wrong size on BRInventoryEntryBase_GetItemInstance");
static_assert(offsetof(BRInventoryEntryBase_GetItemInstance, ReturnValue) == 0x000000, "Member 'BRInventoryEntryBase_GetItemInstance::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryEntryBase.GetOwningBRCharacter
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntryBase_GetOwningBRCharacter final
{
public:
	class ABRCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntryBase_GetOwningBRCharacter) == 0x000008, "Wrong alignment on BRInventoryEntryBase_GetOwningBRCharacter");
static_assert(sizeof(BRInventoryEntryBase_GetOwningBRCharacter) == 0x000008, "Wrong size on BRInventoryEntryBase_GetOwningBRCharacter");
static_assert(offsetof(BRInventoryEntryBase_GetOwningBRCharacter, ReturnValue) == 0x000000, "Member 'BRInventoryEntryBase_GetOwningBRCharacter::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryEntryBase.GetOwningBRPlayerController
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntryBase_GetOwningBRPlayerController final
{
public:
	class ABRPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntryBase_GetOwningBRPlayerController) == 0x000008, "Wrong alignment on BRInventoryEntryBase_GetOwningBRPlayerController");
static_assert(sizeof(BRInventoryEntryBase_GetOwningBRPlayerController) == 0x000008, "Wrong size on BRInventoryEntryBase_GetOwningBRPlayerController");
static_assert(offsetof(BRInventoryEntryBase_GetOwningBRPlayerController, ReturnValue) == 0x000000, "Member 'BRInventoryEntryBase_GetOwningBRPlayerController::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryEntryBase.GetOwningBRPlayerState
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntryBase_GetOwningBRPlayerState final
{
public:
	class ABRPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntryBase_GetOwningBRPlayerState) == 0x000008, "Wrong alignment on BRInventoryEntryBase_GetOwningBRPlayerState");
static_assert(sizeof(BRInventoryEntryBase_GetOwningBRPlayerState) == 0x000008, "Wrong size on BRInventoryEntryBase_GetOwningBRPlayerState");
static_assert(offsetof(BRInventoryEntryBase_GetOwningBRPlayerState, ReturnValue) == 0x000000, "Member 'BRInventoryEntryBase_GetOwningBRPlayerState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryEntryBase.GetOwningInventory
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntryBase_GetOwningInventory final
{
public:
	class UBRInventoryComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntryBase_GetOwningInventory) == 0x000008, "Wrong alignment on BRInventoryEntryBase_GetOwningInventory");
static_assert(sizeof(BRInventoryEntryBase_GetOwningInventory) == 0x000008, "Wrong size on BRInventoryEntryBase_GetOwningInventory");
static_assert(offsetof(BRInventoryEntryBase_GetOwningInventory, ReturnValue) == 0x000000, "Member 'BRInventoryEntryBase_GetOwningInventory::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryEntryBase.GetSubType
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntryBase_GetSubType final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntryBase_GetSubType) == 0x000008, "Wrong alignment on BRInventoryEntryBase_GetSubType");
static_assert(sizeof(BRInventoryEntryBase_GetSubType) == 0x000008, "Wrong size on BRInventoryEntryBase_GetSubType");
static_assert(offsetof(BRInventoryEntryBase_GetSubType, ReturnValue) == 0x000000, "Member 'BRInventoryEntryBase_GetSubType::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryEntryBase.GetThumbnailObject
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntryBase_GetThumbnailObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntryBase_GetThumbnailObject) == 0x000008, "Wrong alignment on BRInventoryEntryBase_GetThumbnailObject");
static_assert(sizeof(BRInventoryEntryBase_GetThumbnailObject) == 0x000008, "Wrong size on BRInventoryEntryBase_GetThumbnailObject");
static_assert(offsetof(BRInventoryEntryBase_GetThumbnailObject, ReturnValue) == 0x000000, "Member 'BRInventoryEntryBase_GetThumbnailObject::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryEntryBase.GetThumbnailProcessor
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntryBase_GetThumbnailProcessor final
{
public:
	TSubclassOf<class UThumbnailProcessor>        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntryBase_GetThumbnailProcessor) == 0x000008, "Wrong alignment on BRInventoryEntryBase_GetThumbnailProcessor");
static_assert(sizeof(BRInventoryEntryBase_GetThumbnailProcessor) == 0x000008, "Wrong size on BRInventoryEntryBase_GetThumbnailProcessor");
static_assert(offsetof(BRInventoryEntryBase_GetThumbnailProcessor, ReturnValue) == 0x000000, "Member 'BRInventoryEntryBase_GetThumbnailProcessor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryEntry_Item.GetItemType
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntry_Item_GetItemType final
{
public:
	TSubclassOf<class ABRItemBase>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntry_Item_GetItemType) == 0x000008, "Wrong alignment on BRInventoryEntry_Item_GetItemType");
static_assert(sizeof(BRInventoryEntry_Item_GetItemType) == 0x000008, "Wrong size on BRInventoryEntry_Item_GetItemType");
static_assert(offsetof(BRInventoryEntry_Item_GetItemType, ReturnValue) == 0x000000, "Member 'BRInventoryEntry_Item_GetItemType::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryEntry_BrickType.GetBrickType
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntry_BrickType_GetBrickType final
{
public:
	class UBrickType*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntry_BrickType_GetBrickType) == 0x000008, "Wrong alignment on BRInventoryEntry_BrickType_GetBrickType");
static_assert(sizeof(BRInventoryEntry_BrickType_GetBrickType) == 0x000008, "Wrong size on BRInventoryEntry_BrickType_GetBrickType");
static_assert(offsetof(BRInventoryEntry_BrickType_GetBrickType, ReturnValue) == 0x000000, "Member 'BRInventoryEntry_BrickType_GetBrickType::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryEntry_EntityType.GetEntityType
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryEntry_EntityType_GetEntityType final
{
public:
	class UBREntityTypeBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryEntry_EntityType_GetEntityType) == 0x000008, "Wrong alignment on BRInventoryEntry_EntityType_GetEntityType");
static_assert(sizeof(BRInventoryEntry_EntityType_GetEntityType) == 0x000008, "Wrong size on BRInventoryEntry_EntityType_GetEntityType");
static_assert(offsetof(BRInventoryEntry_EntityType_GetEntityType, ReturnValue) == 0x000000, "Member 'BRInventoryEntry_EntityType_GetEntityType::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.AddEntry
// 0x0020 (0x0020 - 0x0000)
struct BRInventoryComponent_AddEntry final
{
public:
	TSubclassOf<class UBRInventoryEntryBase>      Type;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SubType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuickbarRange;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_AddEntry) == 0x000008, "Wrong alignment on BRInventoryComponent_AddEntry");
static_assert(sizeof(BRInventoryComponent_AddEntry) == 0x000020, "Wrong size on BRInventoryComponent_AddEntry");
static_assert(offsetof(BRInventoryComponent_AddEntry, Type) == 0x000000, "Member 'BRInventoryComponent_AddEntry::Type' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_AddEntry, SubType) == 0x000008, "Member 'BRInventoryComponent_AddEntry::SubType' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_AddEntry, QuickbarRange) == 0x000010, "Member 'BRInventoryComponent_AddEntry::QuickbarRange' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_AddEntry, ReturnValue) == 0x000018, "Member 'BRInventoryComponent_AddEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.AddEntry2
// 0x0020 (0x0020 - 0x0000)
struct BRInventoryComponent_AddEntry2 final
{
public:
	TSubclassOf<class UBRInventoryEntryBase>      Type;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SubType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuickbarRange;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_AddEntry2) == 0x000008, "Wrong alignment on BRInventoryComponent_AddEntry2");
static_assert(sizeof(BRInventoryComponent_AddEntry2) == 0x000020, "Wrong size on BRInventoryComponent_AddEntry2");
static_assert(offsetof(BRInventoryComponent_AddEntry2, Type) == 0x000000, "Member 'BRInventoryComponent_AddEntry2::Type' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_AddEntry2, SubType) == 0x000008, "Member 'BRInventoryComponent_AddEntry2::SubType' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_AddEntry2, QuickbarRange) == 0x000010, "Member 'BRInventoryComponent_AddEntry2::QuickbarRange' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_AddEntry2, ReturnValue) == 0x000018, "Member 'BRInventoryComponent_AddEntry2::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.OnClientEntryReady
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryComponent_OnClientEntryReady final
{
public:
	class UBRInventoryEntryBase*                  Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_OnClientEntryReady) == 0x000008, "Wrong alignment on BRInventoryComponent_OnClientEntryReady");
static_assert(sizeof(BRInventoryComponent_OnClientEntryReady) == 0x000008, "Wrong size on BRInventoryComponent_OnClientEntryReady");
static_assert(offsetof(BRInventoryComponent_OnClientEntryReady, Entry) == 0x000000, "Member 'BRInventoryComponent_OnClientEntryReady::Entry' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.OnRep_Items
// 0x0010 (0x0010 - 0x0000)
struct BRInventoryComponent_OnRep_Items final
{
public:
	TArray<class UBRInventoryEntryBase*>          OldItems;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_OnRep_Items) == 0x000008, "Wrong alignment on BRInventoryComponent_OnRep_Items");
static_assert(sizeof(BRInventoryComponent_OnRep_Items) == 0x000010, "Wrong size on BRInventoryComponent_OnRep_Items");
static_assert(offsetof(BRInventoryComponent_OnRep_Items, OldItems) == 0x000000, "Member 'BRInventoryComponent_OnRep_Items::OldItems' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.PushbackQuickbarRange
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryComponent_PushbackQuickbarRange final
{
public:
	int32                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_PushbackQuickbarRange) == 0x000004, "Wrong alignment on BRInventoryComponent_PushbackQuickbarRange");
static_assert(sizeof(BRInventoryComponent_PushbackQuickbarRange) == 0x000008, "Wrong size on BRInventoryComponent_PushbackQuickbarRange");
static_assert(offsetof(BRInventoryComponent_PushbackQuickbarRange, Range) == 0x000000, "Member 'BRInventoryComponent_PushbackQuickbarRange::Range' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_PushbackQuickbarRange, ReturnValue) == 0x000004, "Member 'BRInventoryComponent_PushbackQuickbarRange::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.SetNum
// 0x0004 (0x0004 - 0x0000)
struct BRInventoryComponent_SetNum final
{
public:
	int32                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_SetNum) == 0x000004, "Wrong alignment on BRInventoryComponent_SetNum");
static_assert(sizeof(BRInventoryComponent_SetNum) == 0x000004, "Wrong size on BRInventoryComponent_SetNum");
static_assert(offsetof(BRInventoryComponent_SetNum, NewSize) == 0x000000, "Member 'BRInventoryComponent_SetNum::NewSize' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.SetSlotEntry
// 0x0020 (0x0020 - 0x0000)
struct BRInventoryComponent_SetSlotEntry final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UBRInventoryEntryBase>      Type;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SubType;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_SetSlotEntry) == 0x000008, "Wrong alignment on BRInventoryComponent_SetSlotEntry");
static_assert(sizeof(BRInventoryComponent_SetSlotEntry) == 0x000020, "Wrong size on BRInventoryComponent_SetSlotEntry");
static_assert(offsetof(BRInventoryComponent_SetSlotEntry, Slot) == 0x000000, "Member 'BRInventoryComponent_SetSlotEntry::Slot' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SetSlotEntry, Type) == 0x000008, "Member 'BRInventoryComponent_SetSlotEntry::Type' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SetSlotEntry, SubType) == 0x000010, "Member 'BRInventoryComponent_SetSlotEntry::SubType' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SetSlotEntry, ReturnValue) == 0x000018, "Member 'BRInventoryComponent_SetSlotEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.SetSlotEntry2
// 0x0020 (0x0020 - 0x0000)
struct BRInventoryComponent_SetSlotEntry2 final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UBRInventoryEntryBase>      Type;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SubType;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_SetSlotEntry2) == 0x000008, "Wrong alignment on BRInventoryComponent_SetSlotEntry2");
static_assert(sizeof(BRInventoryComponent_SetSlotEntry2) == 0x000020, "Wrong size on BRInventoryComponent_SetSlotEntry2");
static_assert(offsetof(BRInventoryComponent_SetSlotEntry2, Slot) == 0x000000, "Member 'BRInventoryComponent_SetSlotEntry2::Slot' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SetSlotEntry2, Type) == 0x000008, "Member 'BRInventoryComponent_SetSlotEntry2::Type' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SetSlotEntry2, SubType) == 0x000010, "Member 'BRInventoryComponent_SetSlotEntry2::SubType' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SetSlotEntry2, ReturnValue) == 0x000018, "Member 'BRInventoryComponent_SetSlotEntry2::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.SetTempSlotEntry
// 0x0018 (0x0018 - 0x0000)
struct BRInventoryComponent_SetTempSlotEntry final
{
public:
	TSubclassOf<class UBRInventoryEntryBase>      Type;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SubType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_SetTempSlotEntry) == 0x000008, "Wrong alignment on BRInventoryComponent_SetTempSlotEntry");
static_assert(sizeof(BRInventoryComponent_SetTempSlotEntry) == 0x000018, "Wrong size on BRInventoryComponent_SetTempSlotEntry");
static_assert(offsetof(BRInventoryComponent_SetTempSlotEntry, Type) == 0x000000, "Member 'BRInventoryComponent_SetTempSlotEntry::Type' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SetTempSlotEntry, SubType) == 0x000008, "Member 'BRInventoryComponent_SetTempSlotEntry::SubType' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SetTempSlotEntry, ReturnValue) == 0x000010, "Member 'BRInventoryComponent_SetTempSlotEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.SetTempSlotEntry2
// 0x0018 (0x0018 - 0x0000)
struct BRInventoryComponent_SetTempSlotEntry2 final
{
public:
	TSubclassOf<class UBRInventoryEntryBase>      Type;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SubType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_SetTempSlotEntry2) == 0x000008, "Wrong alignment on BRInventoryComponent_SetTempSlotEntry2");
static_assert(sizeof(BRInventoryComponent_SetTempSlotEntry2) == 0x000018, "Wrong size on BRInventoryComponent_SetTempSlotEntry2");
static_assert(offsetof(BRInventoryComponent_SetTempSlotEntry2, Type) == 0x000000, "Member 'BRInventoryComponent_SetTempSlotEntry2::Type' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SetTempSlotEntry2, SubType) == 0x000008, "Member 'BRInventoryComponent_SetTempSlotEntry2::SubType' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SetTempSlotEntry2, ReturnValue) == 0x000010, "Member 'BRInventoryComponent_SetTempSlotEntry2::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.SwapSlots
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryComponent_SwapSlots final
{
public:
	int32                                         SlotA;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotB;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_SwapSlots) == 0x000004, "Wrong alignment on BRInventoryComponent_SwapSlots");
static_assert(sizeof(BRInventoryComponent_SwapSlots) == 0x000008, "Wrong size on BRInventoryComponent_SwapSlots");
static_assert(offsetof(BRInventoryComponent_SwapSlots, SlotA) == 0x000000, "Member 'BRInventoryComponent_SwapSlots::SlotA' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_SwapSlots, SlotB) == 0x000004, "Member 'BRInventoryComponent_SwapSlots::SlotB' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.Contains
// 0x0010 (0x0010 - 0x0000)
struct BRInventoryComponent_Contains final
{
public:
	class UBRInventoryEntryBase*                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRInventoryComponent_Contains) == 0x000008, "Wrong alignment on BRInventoryComponent_Contains");
static_assert(sizeof(BRInventoryComponent_Contains) == 0x000010, "Wrong size on BRInventoryComponent_Contains");
static_assert(offsetof(BRInventoryComponent_Contains, Item) == 0x000000, "Member 'BRInventoryComponent_Contains::Item' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_Contains, ReturnValue) == 0x000008, "Member 'BRInventoryComponent_Contains::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.GetOwningBRCharacter
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryComponent_GetOwningBRCharacter final
{
public:
	class ABRCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_GetOwningBRCharacter) == 0x000008, "Wrong alignment on BRInventoryComponent_GetOwningBRCharacter");
static_assert(sizeof(BRInventoryComponent_GetOwningBRCharacter) == 0x000008, "Wrong size on BRInventoryComponent_GetOwningBRCharacter");
static_assert(offsetof(BRInventoryComponent_GetOwningBRCharacter, ReturnValue) == 0x000000, "Member 'BRInventoryComponent_GetOwningBRCharacter::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.GetOwningBRPlayerController
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryComponent_GetOwningBRPlayerController final
{
public:
	class ABRPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_GetOwningBRPlayerController) == 0x000008, "Wrong alignment on BRInventoryComponent_GetOwningBRPlayerController");
static_assert(sizeof(BRInventoryComponent_GetOwningBRPlayerController) == 0x000008, "Wrong size on BRInventoryComponent_GetOwningBRPlayerController");
static_assert(offsetof(BRInventoryComponent_GetOwningBRPlayerController, ReturnValue) == 0x000000, "Member 'BRInventoryComponent_GetOwningBRPlayerController::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.GetOwningBRPlayerState
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryComponent_GetOwningBRPlayerState final
{
public:
	class ABRPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_GetOwningBRPlayerState) == 0x000008, "Wrong alignment on BRInventoryComponent_GetOwningBRPlayerState");
static_assert(sizeof(BRInventoryComponent_GetOwningBRPlayerState) == 0x000008, "Wrong size on BRInventoryComponent_GetOwningBRPlayerState");
static_assert(offsetof(BRInventoryComponent_GetOwningBRPlayerState, ReturnValue) == 0x000000, "Member 'BRInventoryComponent_GetOwningBRPlayerState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.GetSlotEntry
// 0x0010 (0x0010 - 0x0000)
struct BRInventoryComponent_GetSlotEntry final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_GetSlotEntry) == 0x000008, "Wrong alignment on BRInventoryComponent_GetSlotEntry");
static_assert(sizeof(BRInventoryComponent_GetSlotEntry) == 0x000010, "Wrong size on BRInventoryComponent_GetSlotEntry");
static_assert(offsetof(BRInventoryComponent_GetSlotEntry, Slot) == 0x000000, "Member 'BRInventoryComponent_GetSlotEntry::Slot' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_GetSlotEntry, ReturnValue) == 0x000008, "Member 'BRInventoryComponent_GetSlotEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.GetTempSlot
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryComponent_GetTempSlot final
{
public:
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_GetTempSlot) == 0x000008, "Wrong alignment on BRInventoryComponent_GetTempSlot");
static_assert(sizeof(BRInventoryComponent_GetTempSlot) == 0x000008, "Wrong size on BRInventoryComponent_GetTempSlot");
static_assert(offsetof(BRInventoryComponent_GetTempSlot, ReturnValue) == 0x000000, "Member 'BRInventoryComponent_GetTempSlot::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.IndexOf
// 0x0010 (0x0010 - 0x0000)
struct BRInventoryComponent_IndexOf final
{
public:
	class UBRInventoryEntryBase*                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRInventoryComponent_IndexOf) == 0x000008, "Wrong alignment on BRInventoryComponent_IndexOf");
static_assert(sizeof(BRInventoryComponent_IndexOf) == 0x000010, "Wrong size on BRInventoryComponent_IndexOf");
static_assert(offsetof(BRInventoryComponent_IndexOf, Item) == 0x000000, "Member 'BRInventoryComponent_IndexOf::Item' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_IndexOf, ReturnValue) == 0x000008, "Member 'BRInventoryComponent_IndexOf::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.IndexOfInQuickbarRange
// 0x0010 (0x0010 - 0x0000)
struct BRInventoryComponent_IndexOfInQuickbarRange final
{
public:
	const class UBRInventoryEntryBase*            Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_IndexOfInQuickbarRange) == 0x000008, "Wrong alignment on BRInventoryComponent_IndexOfInQuickbarRange");
static_assert(sizeof(BRInventoryComponent_IndexOfInQuickbarRange) == 0x000010, "Wrong size on BRInventoryComponent_IndexOfInQuickbarRange");
static_assert(offsetof(BRInventoryComponent_IndexOfInQuickbarRange, Item) == 0x000000, "Member 'BRInventoryComponent_IndexOfInQuickbarRange::Item' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_IndexOfInQuickbarRange, Range) == 0x000008, "Member 'BRInventoryComponent_IndexOfInQuickbarRange::Range' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_IndexOfInQuickbarRange, ReturnValue) == 0x00000C, "Member 'BRInventoryComponent_IndexOfInQuickbarRange::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.Num
// 0x0004 (0x0004 - 0x0000)
struct BRInventoryComponent_Num final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryComponent_Num) == 0x000004, "Wrong alignment on BRInventoryComponent_Num");
static_assert(sizeof(BRInventoryComponent_Num) == 0x000004, "Wrong size on BRInventoryComponent_Num");
static_assert(offsetof(BRInventoryComponent_Num, ReturnValue) == 0x000000, "Member 'BRInventoryComponent_Num::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryComponent.QuickbarRangeContains
// 0x0010 (0x0010 - 0x0000)
struct BRInventoryComponent_QuickbarRangeContains final
{
public:
	const class UBRInventoryEntryBase*            Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRInventoryComponent_QuickbarRangeContains) == 0x000008, "Wrong alignment on BRInventoryComponent_QuickbarRangeContains");
static_assert(sizeof(BRInventoryComponent_QuickbarRangeContains) == 0x000010, "Wrong size on BRInventoryComponent_QuickbarRangeContains");
static_assert(offsetof(BRInventoryComponent_QuickbarRangeContains, Item) == 0x000000, "Member 'BRInventoryComponent_QuickbarRangeContains::Item' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_QuickbarRangeContains, Range) == 0x000008, "Member 'BRInventoryComponent_QuickbarRangeContains::Range' has a wrong offset!");
static_assert(offsetof(BRInventoryComponent_QuickbarRangeContains, ReturnValue) == 0x00000C, "Member 'BRInventoryComponent_QuickbarRangeContains::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventorySlotWidget.SetBeingDraggedVisual
// 0x0001 (0x0001 - 0x0000)
struct BRInventorySlotWidget_SetBeingDraggedVisual final
{
public:
	bool                                          bDragged;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventorySlotWidget_SetBeingDraggedVisual) == 0x000001, "Wrong alignment on BRInventorySlotWidget_SetBeingDraggedVisual");
static_assert(sizeof(BRInventorySlotWidget_SetBeingDraggedVisual) == 0x000001, "Wrong size on BRInventorySlotWidget_SetBeingDraggedVisual");
static_assert(offsetof(BRInventorySlotWidget_SetBeingDraggedVisual, bDragged) == 0x000000, "Member 'BRInventorySlotWidget_SetBeingDraggedVisual::bDragged' has a wrong offset!");

// Function Brickadia.BRInventorySlotWidget.SetDisplayedEntry
// 0x0008 (0x0008 - 0x0000)
struct BRInventorySlotWidget_SetDisplayedEntry final
{
public:
	class UBRInventoryEntryBase*                  Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventorySlotWidget_SetDisplayedEntry) == 0x000008, "Wrong alignment on BRInventorySlotWidget_SetDisplayedEntry");
static_assert(sizeof(BRInventorySlotWidget_SetDisplayedEntry) == 0x000008, "Wrong size on BRInventorySlotWidget_SetDisplayedEntry");
static_assert(offsetof(BRInventorySlotWidget_SetDisplayedEntry, Entry) == 0x000000, "Member 'BRInventorySlotWidget_SetDisplayedEntry::Entry' has a wrong offset!");

// Function Brickadia.BRInventorySlotWidget.SetSelectedVisual
// 0x0001 (0x0001 - 0x0000)
struct BRInventorySlotWidget_SetSelectedVisual final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventorySlotWidget_SetSelectedVisual) == 0x000001, "Wrong alignment on BRInventorySlotWidget_SetSelectedVisual");
static_assert(sizeof(BRInventorySlotWidget_SetSelectedVisual) == 0x000001, "Wrong size on BRInventorySlotWidget_SetSelectedVisual");
static_assert(offsetof(BRInventorySlotWidget_SetSelectedVisual, bSelected) == 0x000000, "Member 'BRInventorySlotWidget_SetSelectedVisual::bSelected' has a wrong offset!");

// Function Brickadia.BRInventorySlotWidget.Setup
// 0x0008 (0x0008 - 0x0000)
struct BRInventorySlotWidget_Setup final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideQuickbarNumber;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRInventorySlotWidget_Setup) == 0x000004, "Wrong alignment on BRInventorySlotWidget_Setup");
static_assert(sizeof(BRInventorySlotWidget_Setup) == 0x000008, "Wrong size on BRInventorySlotWidget_Setup");
static_assert(offsetof(BRInventorySlotWidget_Setup, InSlotIndex) == 0x000000, "Member 'BRInventorySlotWidget_Setup::InSlotIndex' has a wrong offset!");
static_assert(offsetof(BRInventorySlotWidget_Setup, bHideQuickbarNumber) == 0x000004, "Member 'BRInventorySlotWidget_Setup::bHideQuickbarNumber' has a wrong offset!");

// Function Brickadia.BRInventorySlotWidget.GetDisplayedEntry
// 0x0008 (0x0008 - 0x0000)
struct BRInventorySlotWidget_GetDisplayedEntry final
{
public:
	class UBRInventoryEntryBase*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventorySlotWidget_GetDisplayedEntry) == 0x000008, "Wrong alignment on BRInventorySlotWidget_GetDisplayedEntry");
static_assert(sizeof(BRInventorySlotWidget_GetDisplayedEntry) == 0x000008, "Wrong size on BRInventorySlotWidget_GetDisplayedEntry");
static_assert(offsetof(BRInventorySlotWidget_GetDisplayedEntry, ReturnValue) == 0x000000, "Member 'BRInventorySlotWidget_GetDisplayedEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRInventoryWidget.Setup
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryWidget_Setup final
{
public:
	class UBRInventoryComponent*                  InInventory;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryWidget_Setup) == 0x000008, "Wrong alignment on BRInventoryWidget_Setup");
static_assert(sizeof(BRInventoryWidget_Setup) == 0x000008, "Wrong size on BRInventoryWidget_Setup");
static_assert(offsetof(BRInventoryWidget_Setup, InInventory) == 0x000000, "Member 'BRInventoryWidget_Setup::InInventory' has a wrong offset!");

// Function Brickadia.BRInventoryWidget.SetupInternal
// 0x0004 (0x0004 - 0x0000)
struct BRInventoryWidget_SetupInternal final
{
public:
	int32                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryWidget_SetupInternal) == 0x000004, "Wrong alignment on BRInventoryWidget_SetupInternal");
static_assert(sizeof(BRInventoryWidget_SetupInternal) == 0x000004, "Wrong size on BRInventoryWidget_SetupInternal");
static_assert(offsetof(BRInventoryWidget_SetupInternal, NewSize) == 0x000000, "Member 'BRInventoryWidget_SetupInternal::NewSize' has a wrong offset!");

// Function Brickadia.BRInventoryWidget.SlotChanged
// 0x0010 (0x0010 - 0x0000)
struct BRInventoryWidget_SlotChanged final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRInventoryEntryBase*                  ItemInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryWidget_SlotChanged) == 0x000008, "Wrong alignment on BRInventoryWidget_SlotChanged");
static_assert(sizeof(BRInventoryWidget_SlotChanged) == 0x000010, "Wrong size on BRInventoryWidget_SlotChanged");
static_assert(offsetof(BRInventoryWidget_SlotChanged, SlotIndex) == 0x000000, "Member 'BRInventoryWidget_SlotChanged::SlotIndex' has a wrong offset!");
static_assert(offsetof(BRInventoryWidget_SlotChanged, ItemInstance) == 0x000008, "Member 'BRInventoryWidget_SlotChanged::ItemInstance' has a wrong offset!");

// Function Brickadia.BRInventoryWidget.GetInventory
// 0x0008 (0x0008 - 0x0000)
struct BRInventoryWidget_GetInventory final
{
public:
	class UBRInventoryComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRInventoryWidget_GetInventory) == 0x000008, "Wrong alignment on BRInventoryWidget_GetInventory");
static_assert(sizeof(BRInventoryWidget_GetInventory) == 0x000008, "Wrong size on BRInventoryWidget_GetInventory");
static_assert(offsetof(BRInventoryWidget_GetInventory, ReturnValue) == 0x000000, "Member 'BRInventoryWidget_GetInventory::ReturnValue' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.CharacterInventoryEntryChanged
// 0x0008 (0x0008 - 0x0000)
struct BRQuickbarDisplayWidget_CharacterInventoryEntryChanged final
{
public:
	class UBRInventoryEntryBase*                  Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarDisplayWidget_CharacterInventoryEntryChanged) == 0x000008, "Wrong alignment on BRQuickbarDisplayWidget_CharacterInventoryEntryChanged");
static_assert(sizeof(BRQuickbarDisplayWidget_CharacterInventoryEntryChanged) == 0x000008, "Wrong size on BRQuickbarDisplayWidget_CharacterInventoryEntryChanged");
static_assert(offsetof(BRQuickbarDisplayWidget_CharacterInventoryEntryChanged, Entry) == 0x000000, "Member 'BRQuickbarDisplayWidget_CharacterInventoryEntryChanged::Entry' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.SetQuickbarRange
// 0x0004 (0x0004 - 0x0000)
struct BRQuickbarDisplayWidget_SetQuickbarRange final
{
public:
	int32                                         NewQuickbarRange;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarDisplayWidget_SetQuickbarRange) == 0x000004, "Wrong alignment on BRQuickbarDisplayWidget_SetQuickbarRange");
static_assert(sizeof(BRQuickbarDisplayWidget_SetQuickbarRange) == 0x000004, "Wrong size on BRQuickbarDisplayWidget_SetQuickbarRange");
static_assert(offsetof(BRQuickbarDisplayWidget_SetQuickbarRange, NewQuickbarRange) == 0x000000, "Member 'BRQuickbarDisplayWidget_SetQuickbarRange::NewQuickbarRange' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.Setup
// 0x0010 (0x0010 - 0x0000)
struct BRQuickbarDisplayWidget_Setup final
{
public:
	class ABRCharacter*                           InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialQuickbarRange;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRQuickbarDisplayWidget_Setup) == 0x000008, "Wrong alignment on BRQuickbarDisplayWidget_Setup");
static_assert(sizeof(BRQuickbarDisplayWidget_Setup) == 0x000010, "Wrong size on BRQuickbarDisplayWidget_Setup");
static_assert(offsetof(BRQuickbarDisplayWidget_Setup, InCharacter) == 0x000000, "Member 'BRQuickbarDisplayWidget_Setup::InCharacter' has a wrong offset!");
static_assert(offsetof(BRQuickbarDisplayWidget_Setup, InitialQuickbarRange) == 0x000008, "Member 'BRQuickbarDisplayWidget_Setup::InitialQuickbarRange' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.SetupInternal
// 0x0004 (0x0004 - 0x0000)
struct BRQuickbarDisplayWidget_SetupInternal final
{
public:
	int32                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarDisplayWidget_SetupInternal) == 0x000004, "Wrong alignment on BRQuickbarDisplayWidget_SetupInternal");
static_assert(sizeof(BRQuickbarDisplayWidget_SetupInternal) == 0x000004, "Wrong size on BRQuickbarDisplayWidget_SetupInternal");
static_assert(offsetof(BRQuickbarDisplayWidget_SetupInternal, NewSize) == 0x000000, "Member 'BRQuickbarDisplayWidget_SetupInternal::NewSize' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.SlotChanged
// 0x0010 (0x0010 - 0x0000)
struct BRQuickbarDisplayWidget_SlotChanged final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRInventoryEntryBase*                  ItemInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarDisplayWidget_SlotChanged) == 0x000008, "Wrong alignment on BRQuickbarDisplayWidget_SlotChanged");
static_assert(sizeof(BRQuickbarDisplayWidget_SlotChanged) == 0x000010, "Wrong size on BRQuickbarDisplayWidget_SlotChanged");
static_assert(offsetof(BRQuickbarDisplayWidget_SlotChanged, SlotIndex) == 0x000000, "Member 'BRQuickbarDisplayWidget_SlotChanged::SlotIndex' has a wrong offset!");
static_assert(offsetof(BRQuickbarDisplayWidget_SlotChanged, ItemInstance) == 0x000008, "Member 'BRQuickbarDisplayWidget_SlotChanged::ItemInstance' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.TempSlotChanged
// 0x0008 (0x0008 - 0x0000)
struct BRQuickbarDisplayWidget_TempSlotChanged final
{
public:
	class UBRInventoryEntryBase*                  ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarDisplayWidget_TempSlotChanged) == 0x000008, "Wrong alignment on BRQuickbarDisplayWidget_TempSlotChanged");
static_assert(sizeof(BRQuickbarDisplayWidget_TempSlotChanged) == 0x000008, "Wrong size on BRQuickbarDisplayWidget_TempSlotChanged");
static_assert(offsetof(BRQuickbarDisplayWidget_TempSlotChanged, ItemInstance) == 0x000000, "Member 'BRQuickbarDisplayWidget_TempSlotChanged::ItemInstance' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct BRQuickbarDisplayWidget_GetCharacter final
{
public:
	class ABRCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarDisplayWidget_GetCharacter) == 0x000008, "Wrong alignment on BRQuickbarDisplayWidget_GetCharacter");
static_assert(sizeof(BRQuickbarDisplayWidget_GetCharacter) == 0x000008, "Wrong size on BRQuickbarDisplayWidget_GetCharacter");
static_assert(offsetof(BRQuickbarDisplayWidget_GetCharacter, ReturnValue) == 0x000000, "Member 'BRQuickbarDisplayWidget_GetCharacter::ReturnValue' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.GetQuickbarRange
// 0x0004 (0x0004 - 0x0000)
struct BRQuickbarDisplayWidget_GetQuickbarRange final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarDisplayWidget_GetQuickbarRange) == 0x000004, "Wrong alignment on BRQuickbarDisplayWidget_GetQuickbarRange");
static_assert(sizeof(BRQuickbarDisplayWidget_GetQuickbarRange) == 0x000004, "Wrong size on BRQuickbarDisplayWidget_GetQuickbarRange");
static_assert(offsetof(BRQuickbarDisplayWidget_GetQuickbarRange, ReturnValue) == 0x000000, "Member 'BRQuickbarDisplayWidget_GetQuickbarRange::ReturnValue' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.InventoryHasNextQuickbarRange
// 0x0001 (0x0001 - 0x0000)
struct BRQuickbarDisplayWidget_InventoryHasNextQuickbarRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarDisplayWidget_InventoryHasNextQuickbarRange) == 0x000001, "Wrong alignment on BRQuickbarDisplayWidget_InventoryHasNextQuickbarRange");
static_assert(sizeof(BRQuickbarDisplayWidget_InventoryHasNextQuickbarRange) == 0x000001, "Wrong size on BRQuickbarDisplayWidget_InventoryHasNextQuickbarRange");
static_assert(offsetof(BRQuickbarDisplayWidget_InventoryHasNextQuickbarRange, ReturnValue) == 0x000000, "Member 'BRQuickbarDisplayWidget_InventoryHasNextQuickbarRange::ReturnValue' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.InventoryHasPreviousQuickbarRange
// 0x0001 (0x0001 - 0x0000)
struct BRQuickbarDisplayWidget_InventoryHasPreviousQuickbarRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarDisplayWidget_InventoryHasPreviousQuickbarRange) == 0x000001, "Wrong alignment on BRQuickbarDisplayWidget_InventoryHasPreviousQuickbarRange");
static_assert(sizeof(BRQuickbarDisplayWidget_InventoryHasPreviousQuickbarRange) == 0x000001, "Wrong size on BRQuickbarDisplayWidget_InventoryHasPreviousQuickbarRange");
static_assert(offsetof(BRQuickbarDisplayWidget_InventoryHasPreviousQuickbarRange, ReturnValue) == 0x000000, "Member 'BRQuickbarDisplayWidget_InventoryHasPreviousQuickbarRange::ReturnValue' has a wrong offset!");

// Function Brickadia.BRQuickbarDisplayWidget.InventoryHasQuickbarRange
// 0x0008 (0x0008 - 0x0000)
struct BRQuickbarDisplayWidget_InventoryHasQuickbarRange final
{
public:
	int32                                         NewQuickbarRange;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRQuickbarDisplayWidget_InventoryHasQuickbarRange) == 0x000004, "Wrong alignment on BRQuickbarDisplayWidget_InventoryHasQuickbarRange");
static_assert(sizeof(BRQuickbarDisplayWidget_InventoryHasQuickbarRange) == 0x000008, "Wrong size on BRQuickbarDisplayWidget_InventoryHasQuickbarRange");
static_assert(offsetof(BRQuickbarDisplayWidget_InventoryHasQuickbarRange, NewQuickbarRange) == 0x000000, "Member 'BRQuickbarDisplayWidget_InventoryHasQuickbarRange::NewQuickbarRange' has a wrong offset!");
static_assert(offsetof(BRQuickbarDisplayWidget_InventoryHasQuickbarRange, ReturnValue) == 0x000004, "Member 'BRQuickbarDisplayWidget_InventoryHasQuickbarRange::ReturnValue' has a wrong offset!");

// Function Brickadia.BRQuickbarWidget.InternalSelectViewSlot
// 0x0004 (0x0004 - 0x0000)
struct BRQuickbarWidget_InternalSelectViewSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarWidget_InternalSelectViewSlot) == 0x000004, "Wrong alignment on BRQuickbarWidget_InternalSelectViewSlot");
static_assert(sizeof(BRQuickbarWidget_InternalSelectViewSlot) == 0x000004, "Wrong size on BRQuickbarWidget_InternalSelectViewSlot");
static_assert(offsetof(BRQuickbarWidget_InternalSelectViewSlot, SlotIndex) == 0x000000, "Member 'BRQuickbarWidget_InternalSelectViewSlot::SlotIndex' has a wrong offset!");

// Function Brickadia.BRQuickbarWidget.SelectViewSlot
// 0x0008 (0x0008 - 0x0000)
struct BRQuickbarWidget_SelectViewSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToggle;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRQuickbarWidget_SelectViewSlot) == 0x000004, "Wrong alignment on BRQuickbarWidget_SelectViewSlot");
static_assert(sizeof(BRQuickbarWidget_SelectViewSlot) == 0x000008, "Wrong size on BRQuickbarWidget_SelectViewSlot");
static_assert(offsetof(BRQuickbarWidget_SelectViewSlot, SlotIndex) == 0x000000, "Member 'BRQuickbarWidget_SelectViewSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(BRQuickbarWidget_SelectViewSlot, bToggle) == 0x000004, "Member 'BRQuickbarWidget_SelectViewSlot::bToggle' has a wrong offset!");

// Function Brickadia.BRQuickbarWidget.SetShownInstant
// 0x0001 (0x0001 - 0x0000)
struct BRQuickbarWidget_SetShownInstant final
{
public:
	bool                                          bNewShown;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarWidget_SetShownInstant) == 0x000001, "Wrong alignment on BRQuickbarWidget_SetShownInstant");
static_assert(sizeof(BRQuickbarWidget_SetShownInstant) == 0x000001, "Wrong size on BRQuickbarWidget_SetShownInstant");
static_assert(offsetof(BRQuickbarWidget_SetShownInstant, bNewShown) == 0x000000, "Member 'BRQuickbarWidget_SetShownInstant::bNewShown' has a wrong offset!");

// Function Brickadia.BRQuickbarWidget.GetSelectedInventorySlot
// 0x0004 (0x0004 - 0x0000)
struct BRQuickbarWidget_GetSelectedInventorySlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarWidget_GetSelectedInventorySlot) == 0x000004, "Wrong alignment on BRQuickbarWidget_GetSelectedInventorySlot");
static_assert(sizeof(BRQuickbarWidget_GetSelectedInventorySlot) == 0x000004, "Wrong size on BRQuickbarWidget_GetSelectedInventorySlot");
static_assert(offsetof(BRQuickbarWidget_GetSelectedInventorySlot, ReturnValue) == 0x000000, "Member 'BRQuickbarWidget_GetSelectedInventorySlot::ReturnValue' has a wrong offset!");

// Function Brickadia.BRQuickbarWidget.GetSelectedViewSlot
// 0x0004 (0x0004 - 0x0000)
struct BRQuickbarWidget_GetSelectedViewSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRQuickbarWidget_GetSelectedViewSlot) == 0x000004, "Wrong alignment on BRQuickbarWidget_GetSelectedViewSlot");
static_assert(sizeof(BRQuickbarWidget_GetSelectedViewSlot) == 0x000004, "Wrong size on BRQuickbarWidget_GetSelectedViewSlot");
static_assert(offsetof(BRQuickbarWidget_GetSelectedViewSlot, ReturnValue) == 0x000000, "Member 'BRQuickbarWidget_GetSelectedViewSlot::ReturnValue' has a wrong offset!");

// Function Brickadia.BRMasterCatalogDialog.HandleBrickCatalogLeftClickEntry
// 0x0008 (0x0008 - 0x0000)
struct BRMasterCatalogDialog_HandleBrickCatalogLeftClickEntry final
{
public:
	class UObject*                                EntryPayload;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMasterCatalogDialog_HandleBrickCatalogLeftClickEntry) == 0x000008, "Wrong alignment on BRMasterCatalogDialog_HandleBrickCatalogLeftClickEntry");
static_assert(sizeof(BRMasterCatalogDialog_HandleBrickCatalogLeftClickEntry) == 0x000008, "Wrong size on BRMasterCatalogDialog_HandleBrickCatalogLeftClickEntry");
static_assert(offsetof(BRMasterCatalogDialog_HandleBrickCatalogLeftClickEntry, EntryPayload) == 0x000000, "Member 'BRMasterCatalogDialog_HandleBrickCatalogLeftClickEntry::EntryPayload' has a wrong offset!");

// Function Brickadia.BRMasterCatalogDialog.HandleBrickCatalogMiddleClickEntry
// 0x0008 (0x0008 - 0x0000)
struct BRMasterCatalogDialog_HandleBrickCatalogMiddleClickEntry final
{
public:
	class UObject*                                EntryPayload;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMasterCatalogDialog_HandleBrickCatalogMiddleClickEntry) == 0x000008, "Wrong alignment on BRMasterCatalogDialog_HandleBrickCatalogMiddleClickEntry");
static_assert(sizeof(BRMasterCatalogDialog_HandleBrickCatalogMiddleClickEntry) == 0x000008, "Wrong size on BRMasterCatalogDialog_HandleBrickCatalogMiddleClickEntry");
static_assert(offsetof(BRMasterCatalogDialog_HandleBrickCatalogMiddleClickEntry, EntryPayload) == 0x000000, "Member 'BRMasterCatalogDialog_HandleBrickCatalogMiddleClickEntry::EntryPayload' has a wrong offset!");

// Function Brickadia.BRMasterCatalogDialog.HandleItemCatalogLeftClickEntry
// 0x0008 (0x0008 - 0x0000)
struct BRMasterCatalogDialog_HandleItemCatalogLeftClickEntry final
{
public:
	class UObject*                                EntryPayload;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMasterCatalogDialog_HandleItemCatalogLeftClickEntry) == 0x000008, "Wrong alignment on BRMasterCatalogDialog_HandleItemCatalogLeftClickEntry");
static_assert(sizeof(BRMasterCatalogDialog_HandleItemCatalogLeftClickEntry) == 0x000008, "Wrong size on BRMasterCatalogDialog_HandleItemCatalogLeftClickEntry");
static_assert(offsetof(BRMasterCatalogDialog_HandleItemCatalogLeftClickEntry, EntryPayload) == 0x000000, "Member 'BRMasterCatalogDialog_HandleItemCatalogLeftClickEntry::EntryPayload' has a wrong offset!");

// Function Brickadia.BRMasterCatalogDialog.HandleItemCatalogMiddleClickEntry
// 0x0008 (0x0008 - 0x0000)
struct BRMasterCatalogDialog_HandleItemCatalogMiddleClickEntry final
{
public:
	class UObject*                                EntryPayload;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMasterCatalogDialog_HandleItemCatalogMiddleClickEntry) == 0x000008, "Wrong alignment on BRMasterCatalogDialog_HandleItemCatalogMiddleClickEntry");
static_assert(sizeof(BRMasterCatalogDialog_HandleItemCatalogMiddleClickEntry) == 0x000008, "Wrong size on BRMasterCatalogDialog_HandleItemCatalogMiddleClickEntry");
static_assert(offsetof(BRMasterCatalogDialog_HandleItemCatalogMiddleClickEntry, EntryPayload) == 0x000000, "Member 'BRMasterCatalogDialog_HandleItemCatalogMiddleClickEntry::EntryPayload' has a wrong offset!");

// Function Brickadia.BRMasterCatalogDialog.OnItemCatalogLoaded
// 0x0008 (0x0008 - 0x0000)
struct BRMasterCatalogDialog_OnItemCatalogLoaded final
{
public:
	class UBRCatalog*                             CreatedCatalog;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMasterCatalogDialog_OnItemCatalogLoaded) == 0x000008, "Wrong alignment on BRMasterCatalogDialog_OnItemCatalogLoaded");
static_assert(sizeof(BRMasterCatalogDialog_OnItemCatalogLoaded) == 0x000008, "Wrong size on BRMasterCatalogDialog_OnItemCatalogLoaded");
static_assert(offsetof(BRMasterCatalogDialog_OnItemCatalogLoaded, CreatedCatalog) == 0x000000, "Member 'BRMasterCatalogDialog_OnItemCatalogLoaded::CreatedCatalog' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerClearMinigameTeams
// 0x0004 (0x0004 - 0x0000)
struct BRMinigameManagerComponent_ServerClearMinigameTeams final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerClearMinigameTeams) == 0x000004, "Wrong alignment on BRMinigameManagerComponent_ServerClearMinigameTeams");
static_assert(sizeof(BRMinigameManagerComponent_ServerClearMinigameTeams) == 0x000004, "Wrong size on BRMinigameManagerComponent_ServerClearMinigameTeams");
static_assert(offsetof(BRMinigameManagerComponent_ServerClearMinigameTeams, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerClearMinigameTeams::MinigameId' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerCreateMinigame
// 0x0048 (0x0048 - 0x0000)
struct BRMinigameManagerComponent_ServerCreateMinigame final
{
public:
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class UBRGameTypeDescriptor*                  GameTypeDescriptor;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           GameTypeSettings;                                  // 0x0018(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           UnassignedTeamSettings;                            // 0x0028(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FInspectorPropertyChangelist>   TeamSettings;                                      // 0x0038(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerCreateMinigame) == 0x000008, "Wrong alignment on BRMinigameManagerComponent_ServerCreateMinigame");
static_assert(sizeof(BRMinigameManagerComponent_ServerCreateMinigame) == 0x000048, "Wrong size on BRMinigameManagerComponent_ServerCreateMinigame");
static_assert(offsetof(BRMinigameManagerComponent_ServerCreateMinigame, Settings) == 0x000000, "Member 'BRMinigameManagerComponent_ServerCreateMinigame::Settings' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerCreateMinigame, GameTypeDescriptor) == 0x000010, "Member 'BRMinigameManagerComponent_ServerCreateMinigame::GameTypeDescriptor' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerCreateMinigame, GameTypeSettings) == 0x000018, "Member 'BRMinigameManagerComponent_ServerCreateMinigame::GameTypeSettings' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerCreateMinigame, UnassignedTeamSettings) == 0x000028, "Member 'BRMinigameManagerComponent_ServerCreateMinigame::UnassignedTeamSettings' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerCreateMinigame, TeamSettings) == 0x000038, "Member 'BRMinigameManagerComponent_ServerCreateMinigame::TeamSettings' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerCreateMinigameTeam
// 0x0028 (0x0028 - 0x0000)
struct BRMinigameManagerComponent_ServerCreateMinigameTeam final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 AfterName;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerCreateMinigameTeam) == 0x000008, "Wrong alignment on BRMinigameManagerComponent_ServerCreateMinigameTeam");
static_assert(sizeof(BRMinigameManagerComponent_ServerCreateMinigameTeam) == 0x000028, "Wrong size on BRMinigameManagerComponent_ServerCreateMinigameTeam");
static_assert(offsetof(BRMinigameManagerComponent_ServerCreateMinigameTeam, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerCreateMinigameTeam::MinigameId' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerCreateMinigameTeam, Settings) == 0x000008, "Member 'BRMinigameManagerComponent_ServerCreateMinigameTeam::Settings' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerCreateMinigameTeam, AfterName) == 0x000018, "Member 'BRMinigameManagerComponent_ServerCreateMinigameTeam::AfterName' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerDestroyMinigame
// 0x0004 (0x0004 - 0x0000)
struct BRMinigameManagerComponent_ServerDestroyMinigame final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerDestroyMinigame) == 0x000004, "Wrong alignment on BRMinigameManagerComponent_ServerDestroyMinigame");
static_assert(sizeof(BRMinigameManagerComponent_ServerDestroyMinigame) == 0x000004, "Wrong size on BRMinigameManagerComponent_ServerDestroyMinigame");
static_assert(offsetof(BRMinigameManagerComponent_ServerDestroyMinigame, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerDestroyMinigame::MinigameId' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerRemoveMinigameTeam
// 0x0018 (0x0018 - 0x0000)
struct BRMinigameManagerComponent_ServerRemoveMinigameTeam final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RemoveName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerRemoveMinigameTeam) == 0x000008, "Wrong alignment on BRMinigameManagerComponent_ServerRemoveMinigameTeam");
static_assert(sizeof(BRMinigameManagerComponent_ServerRemoveMinigameTeam) == 0x000018, "Wrong size on BRMinigameManagerComponent_ServerRemoveMinigameTeam");
static_assert(offsetof(BRMinigameManagerComponent_ServerRemoveMinigameTeam, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerRemoveMinigameTeam::MinigameId' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerRemoveMinigameTeam, RemoveName) == 0x000008, "Member 'BRMinigameManagerComponent_ServerRemoveMinigameTeam::RemoveName' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerReorderMinigameTeam
// 0x0028 (0x0028 - 0x0000)
struct BRMinigameManagerComponent_ServerReorderMinigameTeam final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MoveName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AfterName;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerReorderMinigameTeam) == 0x000008, "Wrong alignment on BRMinigameManagerComponent_ServerReorderMinigameTeam");
static_assert(sizeof(BRMinigameManagerComponent_ServerReorderMinigameTeam) == 0x000028, "Wrong size on BRMinigameManagerComponent_ServerReorderMinigameTeam");
static_assert(offsetof(BRMinigameManagerComponent_ServerReorderMinigameTeam, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerReorderMinigameTeam::MinigameId' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerReorderMinigameTeam, MoveName) == 0x000008, "Member 'BRMinigameManagerComponent_ServerReorderMinigameTeam::MoveName' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerReorderMinigameTeam, AfterName) == 0x000018, "Member 'BRMinigameManagerComponent_ServerReorderMinigameTeam::AfterName' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerResetMinigame
// 0x0004 (0x0004 - 0x0000)
struct BRMinigameManagerComponent_ServerResetMinigame final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerResetMinigame) == 0x000004, "Wrong alignment on BRMinigameManagerComponent_ServerResetMinigame");
static_assert(sizeof(BRMinigameManagerComponent_ServerResetMinigame) == 0x000004, "Wrong size on BRMinigameManagerComponent_ServerResetMinigame");
static_assert(offsetof(BRMinigameManagerComponent_ServerResetMinigame, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerResetMinigame::MinigameId' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerStartNextMinigameRound
// 0x0004 (0x0004 - 0x0000)
struct BRMinigameManagerComponent_ServerStartNextMinigameRound final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerStartNextMinigameRound) == 0x000004, "Wrong alignment on BRMinigameManagerComponent_ServerStartNextMinigameRound");
static_assert(sizeof(BRMinigameManagerComponent_ServerStartNextMinigameRound) == 0x000004, "Wrong size on BRMinigameManagerComponent_ServerStartNextMinigameRound");
static_assert(offsetof(BRMinigameManagerComponent_ServerStartNextMinigameRound, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerStartNextMinigameRound::MinigameId' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerUpdateMinigameGametype
// 0x0020 (0x0020 - 0x0000)
struct BRMinigameManagerComponent_ServerUpdateMinigameGametype final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRGameTypeDescriptor*                  GameTypeDescriptor;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0010(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerUpdateMinigameGametype) == 0x000008, "Wrong alignment on BRMinigameManagerComponent_ServerUpdateMinigameGametype");
static_assert(sizeof(BRMinigameManagerComponent_ServerUpdateMinigameGametype) == 0x000020, "Wrong size on BRMinigameManagerComponent_ServerUpdateMinigameGametype");
static_assert(offsetof(BRMinigameManagerComponent_ServerUpdateMinigameGametype, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerUpdateMinigameGametype::MinigameId' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerUpdateMinigameGametype, GameTypeDescriptor) == 0x000008, "Member 'BRMinigameManagerComponent_ServerUpdateMinigameGametype::GameTypeDescriptor' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerUpdateMinigameGametype, Settings) == 0x000010, "Member 'BRMinigameManagerComponent_ServerUpdateMinigameGametype::Settings' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerUpdateMinigameGametypeSettings
// 0x0018 (0x0018 - 0x0000)
struct BRMinigameManagerComponent_ServerUpdateMinigameGametypeSettings final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerUpdateMinigameGametypeSettings) == 0x000008, "Wrong alignment on BRMinigameManagerComponent_ServerUpdateMinigameGametypeSettings");
static_assert(sizeof(BRMinigameManagerComponent_ServerUpdateMinigameGametypeSettings) == 0x000018, "Wrong size on BRMinigameManagerComponent_ServerUpdateMinigameGametypeSettings");
static_assert(offsetof(BRMinigameManagerComponent_ServerUpdateMinigameGametypeSettings, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerUpdateMinigameGametypeSettings::MinigameId' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerUpdateMinigameGametypeSettings, Settings) == 0x000008, "Member 'BRMinigameManagerComponent_ServerUpdateMinigameGametypeSettings::Settings' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerUpdateMinigameSettings
// 0x0018 (0x0018 - 0x0000)
struct BRMinigameManagerComponent_ServerUpdateMinigameSettings final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerUpdateMinigameSettings) == 0x000008, "Wrong alignment on BRMinigameManagerComponent_ServerUpdateMinigameSettings");
static_assert(sizeof(BRMinigameManagerComponent_ServerUpdateMinigameSettings) == 0x000018, "Wrong size on BRMinigameManagerComponent_ServerUpdateMinigameSettings");
static_assert(offsetof(BRMinigameManagerComponent_ServerUpdateMinigameSettings, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerUpdateMinigameSettings::MinigameId' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerUpdateMinigameSettings, Settings) == 0x000008, "Member 'BRMinigameManagerComponent_ServerUpdateMinigameSettings::Settings' has a wrong offset!");

// Function Brickadia.BRMinigameManagerComponent.ServerUpdateMinigameTeamSettings
// 0x0028 (0x0028 - 0x0000)
struct BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings final
{
public:
	int32                                         MinigameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UpdateName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0018(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings) == 0x000008, "Wrong alignment on BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings");
static_assert(sizeof(BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings) == 0x000028, "Wrong size on BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings");
static_assert(offsetof(BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings, MinigameId) == 0x000000, "Member 'BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings::MinigameId' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings, UpdateName) == 0x000008, "Member 'BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings::UpdateName' has a wrong offset!");
static_assert(offsetof(BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings, Settings) == 0x000018, "Member 'BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings::Settings' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.GenerateDescriptorList
// 0x0008 (0x0008 - 0x0000)
struct BRPermissionsRole_GenerateDescriptorList final
{
public:
	class UInspectorPropertyDescriptorList*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_GenerateDescriptorList) == 0x000008, "Wrong alignment on BRPermissionsRole_GenerateDescriptorList");
static_assert(sizeof(BRPermissionsRole_GenerateDescriptorList) == 0x000008, "Wrong size on BRPermissionsRole_GenerateDescriptorList");
static_assert(offsetof(BRPermissionsRole_GenerateDescriptorList, ReturnValue) == 0x000000, "Member 'BRPermissionsRole_GenerateDescriptorList::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.GetColor
// 0x0004 (0x0004 - 0x0000)
struct BRPermissionsRole_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_GetColor) == 0x000004, "Wrong alignment on BRPermissionsRole_GetColor");
static_assert(sizeof(BRPermissionsRole_GetColor) == 0x000004, "Wrong size on BRPermissionsRole_GetColor");
static_assert(offsetof(BRPermissionsRole_GetColor, ReturnValue) == 0x000000, "Member 'BRPermissionsRole_GetColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.GetName
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsRole_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_GetName) == 0x000008, "Wrong alignment on BRPermissionsRole_GetName");
static_assert(sizeof(BRPermissionsRole_GetName) == 0x000010, "Wrong size on BRPermissionsRole_GetName");
static_assert(offsetof(BRPermissionsRole_GetName, ReturnValue) == 0x000000, "Member 'BRPermissionsRole_GetName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.GetShownColor
// 0x0004 (0x0004 - 0x0000)
struct BRPermissionsRole_GetShownColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_GetShownColor) == 0x000004, "Wrong alignment on BRPermissionsRole_GetShownColor");
static_assert(sizeof(BRPermissionsRole_GetShownColor) == 0x000004, "Wrong size on BRPermissionsRole_GetShownColor");
static_assert(offsetof(BRPermissionsRole_GetShownColor, ReturnValue) == 0x000000, "Member 'BRPermissionsRole_GetShownColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.HasColor
// 0x0001 (0x0001 - 0x0000)
struct BRPermissionsRole_HasColor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_HasColor) == 0x000001, "Wrong alignment on BRPermissionsRole_HasColor");
static_assert(sizeof(BRPermissionsRole_HasColor) == 0x000001, "Wrong size on BRPermissionsRole_HasColor");
static_assert(offsetof(BRPermissionsRole_HasColor, ReturnValue) == 0x000000, "Member 'BRPermissionsRole_HasColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.Inspector_SetPermissionState
// 0x000C (0x000C - 0x0000)
struct BRPermissionsRole_Inspector_SetPermissionState final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRSetPermission                              InState;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsRole_Inspector_SetPermissionState) == 0x000004, "Wrong alignment on BRPermissionsRole_Inspector_SetPermissionState");
static_assert(sizeof(BRPermissionsRole_Inspector_SetPermissionState) == 0x00000C, "Wrong size on BRPermissionsRole_Inspector_SetPermissionState");
static_assert(offsetof(BRPermissionsRole_Inspector_SetPermissionState, Permission) == 0x000000, "Member 'BRPermissionsRole_Inspector_SetPermissionState::Permission' has a wrong offset!");
static_assert(offsetof(BRPermissionsRole_Inspector_SetPermissionState, InState) == 0x000008, "Member 'BRPermissionsRole_Inspector_SetPermissionState::InState' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.SetColor
// 0x0004 (0x0004 - 0x0000)
struct BRPermissionsRole_SetColor final
{
public:
	struct FColor                                 ColorIn;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_SetColor) == 0x000004, "Wrong alignment on BRPermissionsRole_SetColor");
static_assert(sizeof(BRPermissionsRole_SetColor) == 0x000004, "Wrong size on BRPermissionsRole_SetColor");
static_assert(offsetof(BRPermissionsRole_SetColor, ColorIn) == 0x000000, "Member 'BRPermissionsRole_SetColor::ColorIn' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.SetHasColor
// 0x0001 (0x0001 - 0x0000)
struct BRPermissionsRole_SetHasColor final
{
public:
	bool                                          bHasColorIn;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_SetHasColor) == 0x000001, "Wrong alignment on BRPermissionsRole_SetHasColor");
static_assert(sizeof(BRPermissionsRole_SetHasColor) == 0x000001, "Wrong size on BRPermissionsRole_SetHasColor");
static_assert(offsetof(BRPermissionsRole_SetHasColor, bHasColorIn) == 0x000000, "Member 'BRPermissionsRole_SetHasColor::bHasColorIn' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.SetName
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsRole_SetName final
{
public:
	class FString                                 NewName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_SetName) == 0x000008, "Wrong alignment on BRPermissionsRole_SetName");
static_assert(sizeof(BRPermissionsRole_SetName) == 0x000010, "Wrong size on BRPermissionsRole_SetName");
static_assert(offsetof(BRPermissionsRole_SetName, NewName) == 0x000000, "Member 'BRPermissionsRole_SetName::NewName' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.SetPermissionState
// 0x000C (0x000C - 0x0000)
struct BRPermissionsRole_SetPermissionState final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRSetPermission                              InState;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsRole_SetPermissionState) == 0x000004, "Wrong alignment on BRPermissionsRole_SetPermissionState");
static_assert(sizeof(BRPermissionsRole_SetPermissionState) == 0x00000C, "Wrong size on BRPermissionsRole_SetPermissionState");
static_assert(offsetof(BRPermissionsRole_SetPermissionState, Permission) == 0x000000, "Member 'BRPermissionsRole_SetPermissionState::Permission' has a wrong offset!");
static_assert(offsetof(BRPermissionsRole_SetPermissionState, InState) == 0x000008, "Member 'BRPermissionsRole_SetPermissionState::InState' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.GetHeight
// 0x0004 (0x0004 - 0x0000)
struct BRPermissionsRole_GetHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_GetHeight) == 0x000004, "Wrong alignment on BRPermissionsRole_GetHeight");
static_assert(sizeof(BRPermissionsRole_GetHeight) == 0x000004, "Wrong size on BRPermissionsRole_GetHeight");
static_assert(offsetof(BRPermissionsRole_GetHeight, ReturnValue) == 0x000000, "Member 'BRPermissionsRole_GetHeight::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.GetPermissionState
// 0x000C (0x000C - 0x0000)
struct BRPermissionsRole_GetPermissionState final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRSetPermission                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsRole_GetPermissionState) == 0x000004, "Wrong alignment on BRPermissionsRole_GetPermissionState");
static_assert(sizeof(BRPermissionsRole_GetPermissionState) == 0x00000C, "Wrong size on BRPermissionsRole_GetPermissionState");
static_assert(offsetof(BRPermissionsRole_GetPermissionState, Permission) == 0x000000, "Member 'BRPermissionsRole_GetPermissionState::Permission' has a wrong offset!");
static_assert(offsetof(BRPermissionsRole_GetPermissionState, ReturnValue) == 0x000008, "Member 'BRPermissionsRole_GetPermissionState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.HasPermissionEntry
// 0x000C (0x000C - 0x0000)
struct BRPermissionsRole_HasPermissionEntry final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsRole_HasPermissionEntry) == 0x000004, "Wrong alignment on BRPermissionsRole_HasPermissionEntry");
static_assert(sizeof(BRPermissionsRole_HasPermissionEntry) == 0x00000C, "Wrong size on BRPermissionsRole_HasPermissionEntry");
static_assert(offsetof(BRPermissionsRole_HasPermissionEntry, Permission) == 0x000000, "Member 'BRPermissionsRole_HasPermissionEntry::Permission' has a wrong offset!");
static_assert(offsetof(BRPermissionsRole_HasPermissionEntry, ReturnValue) == 0x000008, "Member 'BRPermissionsRole_HasPermissionEntry::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.Inspector_CanEditOtherThanColor
// 0x0001 (0x0001 - 0x0000)
struct BRPermissionsRole_Inspector_CanEditOtherThanColor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_Inspector_CanEditOtherThanColor) == 0x000001, "Wrong alignment on BRPermissionsRole_Inspector_CanEditOtherThanColor");
static_assert(sizeof(BRPermissionsRole_Inspector_CanEditOtherThanColor) == 0x000001, "Wrong size on BRPermissionsRole_Inspector_CanEditOtherThanColor");
static_assert(offsetof(BRPermissionsRole_Inspector_CanEditOtherThanColor, ReturnValue) == 0x000000, "Member 'BRPermissionsRole_Inspector_CanEditOtherThanColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.Inspector_CanEditPermission
// 0x0018 (0x0018 - 0x0000)
struct BRPermissionsRole_Inspector_CanEditPermission final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContext;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsRole_Inspector_CanEditPermission) == 0x000008, "Wrong alignment on BRPermissionsRole_Inspector_CanEditPermission");
static_assert(sizeof(BRPermissionsRole_Inspector_CanEditPermission) == 0x000018, "Wrong size on BRPermissionsRole_Inspector_CanEditPermission");
static_assert(offsetof(BRPermissionsRole_Inspector_CanEditPermission, Permission) == 0x000000, "Member 'BRPermissionsRole_Inspector_CanEditPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRPermissionsRole_Inspector_CanEditPermission, WorldContext) == 0x000008, "Member 'BRPermissionsRole_Inspector_CanEditPermission::WorldContext' has a wrong offset!");
static_assert(offsetof(BRPermissionsRole_Inspector_CanEditPermission, ReturnValue) == 0x000010, "Member 'BRPermissionsRole_Inspector_CanEditPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.Inspector_GetPermissionState
// 0x000C (0x000C - 0x0000)
struct BRPermissionsRole_Inspector_GetPermissionState final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRSetPermission                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsRole_Inspector_GetPermissionState) == 0x000004, "Wrong alignment on BRPermissionsRole_Inspector_GetPermissionState");
static_assert(sizeof(BRPermissionsRole_Inspector_GetPermissionState) == 0x00000C, "Wrong size on BRPermissionsRole_Inspector_GetPermissionState");
static_assert(offsetof(BRPermissionsRole_Inspector_GetPermissionState, Permission) == 0x000000, "Member 'BRPermissionsRole_Inspector_GetPermissionState::Permission' has a wrong offset!");
static_assert(offsetof(BRPermissionsRole_Inspector_GetPermissionState, ReturnValue) == 0x000008, "Member 'BRPermissionsRole_Inspector_GetPermissionState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.Inspector_ShouldShowPermissionStateOption
// 0x000C (0x000C - 0x0000)
struct BRPermissionsRole_Inspector_ShouldShowPermissionStateOption final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRSetPermission                              Option;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsRole_Inspector_ShouldShowPermissionStateOption) == 0x000004, "Wrong alignment on BRPermissionsRole_Inspector_ShouldShowPermissionStateOption");
static_assert(sizeof(BRPermissionsRole_Inspector_ShouldShowPermissionStateOption) == 0x00000C, "Wrong size on BRPermissionsRole_Inspector_ShouldShowPermissionStateOption");
static_assert(offsetof(BRPermissionsRole_Inspector_ShouldShowPermissionStateOption, Permission) == 0x000000, "Member 'BRPermissionsRole_Inspector_ShouldShowPermissionStateOption::Permission' has a wrong offset!");
static_assert(offsetof(BRPermissionsRole_Inspector_ShouldShowPermissionStateOption, Option) == 0x000008, "Member 'BRPermissionsRole_Inspector_ShouldShowPermissionStateOption::Option' has a wrong offset!");
static_assert(offsetof(BRPermissionsRole_Inspector_ShouldShowPermissionStateOption, ReturnValue) == 0x000009, "Member 'BRPermissionsRole_Inspector_ShouldShowPermissionStateOption::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.IsDefaultRole
// 0x0001 (0x0001 - 0x0000)
struct BRPermissionsRole_IsDefaultRole final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_IsDefaultRole) == 0x000001, "Wrong alignment on BRPermissionsRole_IsDefaultRole");
static_assert(sizeof(BRPermissionsRole_IsDefaultRole) == 0x000001, "Wrong size on BRPermissionsRole_IsDefaultRole");
static_assert(offsetof(BRPermissionsRole_IsDefaultRole, ReturnValue) == 0x000000, "Member 'BRPermissionsRole_IsDefaultRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.IsEditableTo
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsRole_IsEditableTo final
{
public:
	const class ABRPlayerController*              Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsRole_IsEditableTo) == 0x000008, "Wrong alignment on BRPermissionsRole_IsEditableTo");
static_assert(sizeof(BRPermissionsRole_IsEditableTo) == 0x000010, "Wrong size on BRPermissionsRole_IsEditableTo");
static_assert(offsetof(BRPermissionsRole_IsEditableTo, Controller) == 0x000000, "Member 'BRPermissionsRole_IsEditableTo::Controller' has a wrong offset!");
static_assert(offsetof(BRPermissionsRole_IsEditableTo, ReturnValue) == 0x000008, "Member 'BRPermissionsRole_IsEditableTo::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsRole.IsOwnerRole
// 0x0001 (0x0001 - 0x0000)
struct BRPermissionsRole_IsOwnerRole final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsRole_IsOwnerRole) == 0x000001, "Wrong alignment on BRPermissionsRole_IsOwnerRole");
static_assert(sizeof(BRPermissionsRole_IsOwnerRole) == 0x000001, "Wrong size on BRPermissionsRole_IsOwnerRole");
static_assert(offsetof(BRPermissionsRole_IsOwnerRole, ReturnValue) == 0x000000, "Member 'BRPermissionsRole_IsOwnerRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWorldSaveAsDialog.AssignProvider
// 0x0010 (0x0010 - 0x0000)
struct BRWorldSaveAsDialog_AssignProvider final
{
public:
	TScriptInterface<class IBRBundleListingProvider> InListingProvider;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWorldSaveAsDialog_AssignProvider) == 0x000008, "Wrong alignment on BRWorldSaveAsDialog_AssignProvider");
static_assert(sizeof(BRWorldSaveAsDialog_AssignProvider) == 0x000010, "Wrong size on BRWorldSaveAsDialog_AssignProvider");
static_assert(offsetof(BRWorldSaveAsDialog_AssignProvider, InListingProvider) == 0x000000, "Member 'BRWorldSaveAsDialog_AssignProvider::InListingProvider' has a wrong offset!");

// Function Brickadia.BRWorldSaveAsDialog.HandleSaveFailure
// 0x0010 (0x0010 - 0x0000)
struct BRWorldSaveAsDialog_HandleSaveFailure final
{
public:
	class FText                                   Error;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWorldSaveAsDialog_HandleSaveFailure) == 0x000008, "Wrong alignment on BRWorldSaveAsDialog_HandleSaveFailure");
static_assert(sizeof(BRWorldSaveAsDialog_HandleSaveFailure) == 0x000010, "Wrong size on BRWorldSaveAsDialog_HandleSaveFailure");
static_assert(offsetof(BRWorldSaveAsDialog_HandleSaveFailure, Error) == 0x000000, "Member 'BRWorldSaveAsDialog_HandleSaveFailure::Error' has a wrong offset!");

// Function Brickadia.BRWorldSaveAsDialog.HandleSaveSuccess
// 0x0010 (0x0010 - 0x0000)
struct BRWorldSaveAsDialog_HandleSaveSuccess final
{
public:
	struct FBRWorldSaveResult                     Result;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWorldSaveAsDialog_HandleSaveSuccess) == 0x000004, "Wrong alignment on BRWorldSaveAsDialog_HandleSaveSuccess");
static_assert(sizeof(BRWorldSaveAsDialog_HandleSaveSuccess) == 0x000010, "Wrong size on BRWorldSaveAsDialog_HandleSaveSuccess");
static_assert(offsetof(BRWorldSaveAsDialog_HandleSaveSuccess, Result) == 0x000000, "Member 'BRWorldSaveAsDialog_HandleSaveSuccess::Result' has a wrong offset!");

// Function Brickadia.BRWorldSaveAsDialog.OnNameEntryChanged
// 0x0010 (0x0010 - 0x0000)
struct BRWorldSaveAsDialog_OnNameEntryChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWorldSaveAsDialog_OnNameEntryChanged) == 0x000008, "Wrong alignment on BRWorldSaveAsDialog_OnNameEntryChanged");
static_assert(sizeof(BRWorldSaveAsDialog_OnNameEntryChanged) == 0x000010, "Wrong size on BRWorldSaveAsDialog_OnNameEntryChanged");
static_assert(offsetof(BRWorldSaveAsDialog_OnNameEntryChanged, Text) == 0x000000, "Member 'BRWorldSaveAsDialog_OnNameEntryChanged::Text' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.Get
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsManager_Get final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRPermissionsManager*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsManager_Get) == 0x000008, "Wrong alignment on BRPermissionsManager_Get");
static_assert(sizeof(BRPermissionsManager_Get) == 0x000010, "Wrong size on BRPermissionsManager_Get");
static_assert(offsetof(BRPermissionsManager_Get, WorldContext) == 0x000000, "Member 'BRPermissionsManager_Get::WorldContext' has a wrong offset!");
static_assert(offsetof(BRPermissionsManager_Get, ReturnValue) == 0x000008, "Member 'BRPermissionsManager_Get::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.CreateOrGetPermissionsRole
// 0x0028 (0x0028 - 0x0000)
struct BRPermissionsManager_CreateOrGetPermissionsRole final
{
public:
	class FString                                 RoleName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleNameToCreateAfter;                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRPermissionsRole*                     ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsManager_CreateOrGetPermissionsRole) == 0x000008, "Wrong alignment on BRPermissionsManager_CreateOrGetPermissionsRole");
static_assert(sizeof(BRPermissionsManager_CreateOrGetPermissionsRole) == 0x000028, "Wrong size on BRPermissionsManager_CreateOrGetPermissionsRole");
static_assert(offsetof(BRPermissionsManager_CreateOrGetPermissionsRole, RoleName) == 0x000000, "Member 'BRPermissionsManager_CreateOrGetPermissionsRole::RoleName' has a wrong offset!");
static_assert(offsetof(BRPermissionsManager_CreateOrGetPermissionsRole, RoleNameToCreateAfter) == 0x000010, "Member 'BRPermissionsManager_CreateOrGetPermissionsRole::RoleNameToCreateAfter' has a wrong offset!");
static_assert(offsetof(BRPermissionsManager_CreateOrGetPermissionsRole, ReturnValue) == 0x000020, "Member 'BRPermissionsManager_CreateOrGetPermissionsRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.DestroyPermissionsRole
// 0x0018 (0x0018 - 0x0000)
struct BRPermissionsManager_DestroyPermissionsRole final
{
public:
	class FString                                 RoleName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsManager_DestroyPermissionsRole) == 0x000008, "Wrong alignment on BRPermissionsManager_DestroyPermissionsRole");
static_assert(sizeof(BRPermissionsManager_DestroyPermissionsRole) == 0x000018, "Wrong size on BRPermissionsManager_DestroyPermissionsRole");
static_assert(offsetof(BRPermissionsManager_DestroyPermissionsRole, RoleName) == 0x000000, "Member 'BRPermissionsManager_DestroyPermissionsRole::RoleName' has a wrong offset!");
static_assert(offsetof(BRPermissionsManager_DestroyPermissionsRole, ReturnValue) == 0x000010, "Member 'BRPermissionsManager_DestroyPermissionsRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.LoadJSON
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsManager_LoadJSON final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsManager_LoadJSON) == 0x000008, "Wrong alignment on BRPermissionsManager_LoadJSON");
static_assert(sizeof(BRPermissionsManager_LoadJSON) == 0x000010, "Wrong size on BRPermissionsManager_LoadJSON");
static_assert(offsetof(BRPermissionsManager_LoadJSON, Path) == 0x000000, "Member 'BRPermissionsManager_LoadJSON::Path' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.ReorderPermissionsRoles
// 0x0028 (0x0028 - 0x0000)
struct BRPermissionsManager_ReorderPermissionsRoles final
{
public:
	class FString                                 RoleId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleIdToPutAfter;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsManager_ReorderPermissionsRoles) == 0x000008, "Wrong alignment on BRPermissionsManager_ReorderPermissionsRoles");
static_assert(sizeof(BRPermissionsManager_ReorderPermissionsRoles) == 0x000028, "Wrong size on BRPermissionsManager_ReorderPermissionsRoles");
static_assert(offsetof(BRPermissionsManager_ReorderPermissionsRoles, RoleId) == 0x000000, "Member 'BRPermissionsManager_ReorderPermissionsRoles::RoleId' has a wrong offset!");
static_assert(offsetof(BRPermissionsManager_ReorderPermissionsRoles, RoleIdToPutAfter) == 0x000010, "Member 'BRPermissionsManager_ReorderPermissionsRoles::RoleIdToPutAfter' has a wrong offset!");
static_assert(offsetof(BRPermissionsManager_ReorderPermissionsRoles, ReturnValue) == 0x000020, "Member 'BRPermissionsManager_ReorderPermissionsRoles::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.SaveJSON
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsManager_SaveJSON final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsManager_SaveJSON) == 0x000008, "Wrong alignment on BRPermissionsManager_SaveJSON");
static_assert(sizeof(BRPermissionsManager_SaveJSON) == 0x000010, "Wrong size on BRPermissionsManager_SaveJSON");
static_assert(offsetof(BRPermissionsManager_SaveJSON, Path) == 0x000000, "Member 'BRPermissionsManager_SaveJSON::Path' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.GetAllPermissionsRoles
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsManager_GetAllPermissionsRoles final
{
public:
	TArray<class UBRPermissionsRole*>             ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsManager_GetAllPermissionsRoles) == 0x000008, "Wrong alignment on BRPermissionsManager_GetAllPermissionsRoles");
static_assert(sizeof(BRPermissionsManager_GetAllPermissionsRoles) == 0x000010, "Wrong size on BRPermissionsManager_GetAllPermissionsRoles");
static_assert(offsetof(BRPermissionsManager_GetAllPermissionsRoles, ReturnValue) == 0x000000, "Member 'BRPermissionsManager_GetAllPermissionsRoles::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.GetCustomPermissionsRoles
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsManager_GetCustomPermissionsRoles final
{
public:
	TArray<class UBRPermissionsRole*>             ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsManager_GetCustomPermissionsRoles) == 0x000008, "Wrong alignment on BRPermissionsManager_GetCustomPermissionsRoles");
static_assert(sizeof(BRPermissionsManager_GetCustomPermissionsRoles) == 0x000010, "Wrong size on BRPermissionsManager_GetCustomPermissionsRoles");
static_assert(offsetof(BRPermissionsManager_GetCustomPermissionsRoles, ReturnValue) == 0x000000, "Member 'BRPermissionsManager_GetCustomPermissionsRoles::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.GetDefaultPermissionsRole
// 0x0008 (0x0008 - 0x0000)
struct BRPermissionsManager_GetDefaultPermissionsRole final
{
public:
	class UBRPermissionsRole*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsManager_GetDefaultPermissionsRole) == 0x000008, "Wrong alignment on BRPermissionsManager_GetDefaultPermissionsRole");
static_assert(sizeof(BRPermissionsManager_GetDefaultPermissionsRole) == 0x000008, "Wrong size on BRPermissionsManager_GetDefaultPermissionsRole");
static_assert(offsetof(BRPermissionsManager_GetDefaultPermissionsRole, ReturnValue) == 0x000000, "Member 'BRPermissionsManager_GetDefaultPermissionsRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.GetOwnerPermissionsRole
// 0x0008 (0x0008 - 0x0000)
struct BRPermissionsManager_GetOwnerPermissionsRole final
{
public:
	class UBRPermissionsRole*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsManager_GetOwnerPermissionsRole) == 0x000008, "Wrong alignment on BRPermissionsManager_GetOwnerPermissionsRole");
static_assert(sizeof(BRPermissionsManager_GetOwnerPermissionsRole) == 0x000008, "Wrong size on BRPermissionsManager_GetOwnerPermissionsRole");
static_assert(offsetof(BRPermissionsManager_GetOwnerPermissionsRole, ReturnValue) == 0x000000, "Member 'BRPermissionsManager_GetOwnerPermissionsRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsManager.GetPermissionsRole
// 0x0018 (0x0018 - 0x0000)
struct BRPermissionsManager_GetPermissionsRole final
{
public:
	class FString                                 RoleName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRPermissionsRole*                     ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsManager_GetPermissionsRole) == 0x000008, "Wrong alignment on BRPermissionsManager_GetPermissionsRole");
static_assert(sizeof(BRPermissionsManager_GetPermissionsRole) == 0x000018, "Wrong size on BRPermissionsManager_GetPermissionsRole");
static_assert(offsetof(BRPermissionsManager_GetPermissionsRole, RoleName) == 0x000000, "Member 'BRPermissionsManager_GetPermissionsRole::RoleName' has a wrong offset!");
static_assert(offsetof(BRPermissionsManager_GetPermissionsRole, ReturnValue) == 0x000010, "Member 'BRPermissionsManager_GetPermissionsRole::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionDescriptor
// 0x0040 (0x0040 - 0x0000)
struct BRPermissionsWorldSubsystem_GetPermissionDescriptor final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRPermissionDescriptor                DescriptorFoundIfAny;                              // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsWorldSubsystem_GetPermissionDescriptor) == 0x000008, "Wrong alignment on BRPermissionsWorldSubsystem_GetPermissionDescriptor");
static_assert(sizeof(BRPermissionsWorldSubsystem_GetPermissionDescriptor) == 0x000040, "Wrong size on BRPermissionsWorldSubsystem_GetPermissionDescriptor");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionDescriptor, Permission) == 0x000000, "Member 'BRPermissionsWorldSubsystem_GetPermissionDescriptor::Permission' has a wrong offset!");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionDescriptor, DescriptorFoundIfAny) == 0x000008, "Member 'BRPermissionsWorldSubsystem_GetPermissionDescriptor::DescriptorFoundIfAny' has a wrong offset!");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionDescriptor, ReturnValue) == 0x000038, "Member 'BRPermissionsWorldSubsystem_GetPermissionDescriptor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionIdList
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsWorldSubsystem_GetPermissionIdList final
{
public:
	TArray<class FName>                           Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsWorldSubsystem_GetPermissionIdList) == 0x000008, "Wrong alignment on BRPermissionsWorldSubsystem_GetPermissionIdList");
static_assert(sizeof(BRPermissionsWorldSubsystem_GetPermissionIdList) == 0x000010, "Wrong size on BRPermissionsWorldSubsystem_GetPermissionIdList");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionIdList, Array) == 0x000000, "Member 'BRPermissionsWorldSubsystem_GetPermissionIdList::Array' has a wrong offset!");

// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionIdListForDefaultRole
// 0x0018 (0x0018 - 0x0000)
struct BRPermissionsWorldSubsystem_GetPermissionIdListForDefaultRole final
{
public:
	TArray<class FName>                           Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBRPermissionDefaultForRole                   DefaultForRole;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsWorldSubsystem_GetPermissionIdListForDefaultRole) == 0x000008, "Wrong alignment on BRPermissionsWorldSubsystem_GetPermissionIdListForDefaultRole");
static_assert(sizeof(BRPermissionsWorldSubsystem_GetPermissionIdListForDefaultRole) == 0x000018, "Wrong size on BRPermissionsWorldSubsystem_GetPermissionIdListForDefaultRole");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionIdListForDefaultRole, Array) == 0x000000, "Member 'BRPermissionsWorldSubsystem_GetPermissionIdListForDefaultRole::Array' has a wrong offset!");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionIdListForDefaultRole, DefaultForRole) == 0x000010, "Member 'BRPermissionsWorldSubsystem_GetPermissionIdListForDefaultRole::DefaultForRole' has a wrong offset!");

// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionIdListForGameplayPermissions
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsWorldSubsystem_GetPermissionIdListForGameplayPermissions final
{
public:
	TArray<class FName>                           Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsWorldSubsystem_GetPermissionIdListForGameplayPermissions) == 0x000008, "Wrong alignment on BRPermissionsWorldSubsystem_GetPermissionIdListForGameplayPermissions");
static_assert(sizeof(BRPermissionsWorldSubsystem_GetPermissionIdListForGameplayPermissions) == 0x000010, "Wrong size on BRPermissionsWorldSubsystem_GetPermissionIdListForGameplayPermissions");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionIdListForGameplayPermissions, Array) == 0x000000, "Member 'BRPermissionsWorldSubsystem_GetPermissionIdListForGameplayPermissions::Array' has a wrong offset!");

// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionList
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsWorldSubsystem_GetPermissionList final
{
public:
	TArray<struct FBRPermissionDescriptor>        Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsWorldSubsystem_GetPermissionList) == 0x000008, "Wrong alignment on BRPermissionsWorldSubsystem_GetPermissionList");
static_assert(sizeof(BRPermissionsWorldSubsystem_GetPermissionList) == 0x000010, "Wrong size on BRPermissionsWorldSubsystem_GetPermissionList");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionList, Array) == 0x000000, "Member 'BRPermissionsWorldSubsystem_GetPermissionList::Array' has a wrong offset!");

// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionListForDefaultRole
// 0x0018 (0x0018 - 0x0000)
struct BRPermissionsWorldSubsystem_GetPermissionListForDefaultRole final
{
public:
	TArray<struct FBRPermissionDescriptor>        Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBRPermissionDefaultForRole                   DefaultForRole;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsWorldSubsystem_GetPermissionListForDefaultRole) == 0x000008, "Wrong alignment on BRPermissionsWorldSubsystem_GetPermissionListForDefaultRole");
static_assert(sizeof(BRPermissionsWorldSubsystem_GetPermissionListForDefaultRole) == 0x000018, "Wrong size on BRPermissionsWorldSubsystem_GetPermissionListForDefaultRole");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionListForDefaultRole, Array) == 0x000000, "Member 'BRPermissionsWorldSubsystem_GetPermissionListForDefaultRole::Array' has a wrong offset!");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionListForDefaultRole, DefaultForRole) == 0x000010, "Member 'BRPermissionsWorldSubsystem_GetPermissionListForDefaultRole::DefaultForRole' has a wrong offset!");

// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionListForGameplayPermissions
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsWorldSubsystem_GetPermissionListForGameplayPermissions final
{
public:
	TArray<struct FBRPermissionDescriptor>        Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsWorldSubsystem_GetPermissionListForGameplayPermissions) == 0x000008, "Wrong alignment on BRPermissionsWorldSubsystem_GetPermissionListForGameplayPermissions");
static_assert(sizeof(BRPermissionsWorldSubsystem_GetPermissionListForGameplayPermissions) == 0x000010, "Wrong size on BRPermissionsWorldSubsystem_GetPermissionListForGameplayPermissions");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetPermissionListForGameplayPermissions, Array) == 0x000000, "Member 'BRPermissionsWorldSubsystem_GetPermissionListForGameplayPermissions::Array' has a wrong offset!");

// Function Brickadia.BRPermissionsWorldSubsystem.GetRulesetEditPermissionsPDL
// 0x0010 (0x0010 - 0x0000)
struct BRPermissionsWorldSubsystem_GetRulesetEditPermissionsPDL final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionsWorldSubsystem_GetRulesetEditPermissionsPDL) == 0x000008, "Wrong alignment on BRPermissionsWorldSubsystem_GetRulesetEditPermissionsPDL");
static_assert(sizeof(BRPermissionsWorldSubsystem_GetRulesetEditPermissionsPDL) == 0x000010, "Wrong size on BRPermissionsWorldSubsystem_GetRulesetEditPermissionsPDL");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetRulesetEditPermissionsPDL, Context) == 0x000000, "Member 'BRPermissionsWorldSubsystem_GetRulesetEditPermissionsPDL::Context' has a wrong offset!");
static_assert(offsetof(BRPermissionsWorldSubsystem_GetRulesetEditPermissionsPDL, ReturnValue) == 0x000008, "Member 'BRPermissionsWorldSubsystem_GetRulesetEditPermissionsPDL::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionsWorldSubsystem.PermissionExists
// 0x000C (0x000C - 0x0000)
struct BRPermissionsWorldSubsystem_PermissionExists final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionsWorldSubsystem_PermissionExists) == 0x000004, "Wrong alignment on BRPermissionsWorldSubsystem_PermissionExists");
static_assert(sizeof(BRPermissionsWorldSubsystem_PermissionExists) == 0x00000C, "Wrong size on BRPermissionsWorldSubsystem_PermissionExists");
static_assert(offsetof(BRPermissionsWorldSubsystem_PermissionExists, Name_0) == 0x000000, "Member 'BRPermissionsWorldSubsystem_PermissionExists::Name_0' has a wrong offset!");
static_assert(offsetof(BRPermissionsWorldSubsystem_PermissionExists, ReturnValue) == 0x000008, "Member 'BRPermissionsWorldSubsystem_PermissionExists::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionStatics.HighestOfRoleColors
// 0x0018 (0x0018 - 0x0000)
struct BRPermissionStatics_HighestOfRoleColors final
{
public:
	TArray<class UBRPermissionsRole*>             PermissionsRoles;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionStatics_HighestOfRoleColors) == 0x000008, "Wrong alignment on BRPermissionStatics_HighestOfRoleColors");
static_assert(sizeof(BRPermissionStatics_HighestOfRoleColors) == 0x000018, "Wrong size on BRPermissionStatics_HighestOfRoleColors");
static_assert(offsetof(BRPermissionStatics_HighestOfRoleColors, PermissionsRoles) == 0x000000, "Member 'BRPermissionStatics_HighestOfRoleColors::PermissionsRoles' has a wrong offset!");
static_assert(offsetof(BRPermissionStatics_HighestOfRoleColors, ReturnValue) == 0x000010, "Member 'BRPermissionStatics_HighestOfRoleColors::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionStatics.HighestOfRoles
// 0x0018 (0x0018 - 0x0000)
struct BRPermissionStatics_HighestOfRoles final
{
public:
	TArray<class UBRPermissionsRole*>             PermissionsRoles;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UBRPermissionsRole*                     ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPermissionStatics_HighestOfRoles) == 0x000008, "Wrong alignment on BRPermissionStatics_HighestOfRoles");
static_assert(sizeof(BRPermissionStatics_HighestOfRoles) == 0x000018, "Wrong size on BRPermissionStatics_HighestOfRoles");
static_assert(offsetof(BRPermissionStatics_HighestOfRoles, PermissionsRoles) == 0x000000, "Member 'BRPermissionStatics_HighestOfRoles::PermissionsRoles' has a wrong offset!");
static_assert(offsetof(BRPermissionStatics_HighestOfRoles, ReturnValue) == 0x000010, "Member 'BRPermissionStatics_HighestOfRoles::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPermissionStatics.RolesHavePermission
// 0x0020 (0x0020 - 0x0000)
struct BRPermissionStatics_RolesHavePermission final
{
public:
	TArray<class UBRPermissionsRole*>             PermissionsRoles;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   Permission;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPermissionStatics_RolesHavePermission) == 0x000008, "Wrong alignment on BRPermissionStatics_RolesHavePermission");
static_assert(sizeof(BRPermissionStatics_RolesHavePermission) == 0x000020, "Wrong size on BRPermissionStatics_RolesHavePermission");
static_assert(offsetof(BRPermissionStatics_RolesHavePermission, PermissionsRoles) == 0x000000, "Member 'BRPermissionStatics_RolesHavePermission::PermissionsRoles' has a wrong offset!");
static_assert(offsetof(BRPermissionStatics_RolesHavePermission, Permission) == 0x000010, "Member 'BRPermissionStatics_RolesHavePermission::Permission' has a wrong offset!");
static_assert(offsetof(BRPermissionStatics_RolesHavePermission, ReturnValue) == 0x000018, "Member 'BRPermissionStatics_RolesHavePermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPickupBase.DisablePickupWithTimeout
// 0x0004 (0x0004 - 0x0000)
struct BRPickupBase_DisablePickupWithTimeout final
{
public:
	float                                         Timeout;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPickupBase_DisablePickupWithTimeout) == 0x000004, "Wrong alignment on BRPickupBase_DisablePickupWithTimeout");
static_assert(sizeof(BRPickupBase_DisablePickupWithTimeout) == 0x000004, "Wrong size on BRPickupBase_DisablePickupWithTimeout");
static_assert(offsetof(BRPickupBase_DisablePickupWithTimeout, Timeout) == 0x000000, "Member 'BRPickupBase_DisablePickupWithTimeout::Timeout' has a wrong offset!");

// Function Brickadia.BRPickupBase.GetPickupMesh
// 0x0008 (0x0008 - 0x0000)
struct BRPickupBase_GetPickupMesh final
{
public:
	class UStaticMesh*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPickupBase_GetPickupMesh) == 0x000008, "Wrong alignment on BRPickupBase_GetPickupMesh");
static_assert(sizeof(BRPickupBase_GetPickupMesh) == 0x000008, "Wrong size on BRPickupBase_GetPickupMesh");
static_assert(offsetof(BRPickupBase_GetPickupMesh, ReturnValue) == 0x000000, "Member 'BRPickupBase_GetPickupMesh::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPickupBase.GetPickupMeshColorArray
// 0x0010 (0x0010 - 0x0000)
struct BRPickupBase_GetPickupMeshColorArray final
{
public:
	TArray<struct FColor>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPickupBase_GetPickupMeshColorArray) == 0x000008, "Wrong alignment on BRPickupBase_GetPickupMeshColorArray");
static_assert(sizeof(BRPickupBase_GetPickupMeshColorArray) == 0x000010, "Wrong size on BRPickupBase_GetPickupMeshColorArray");
static_assert(offsetof(BRPickupBase_GetPickupMeshColorArray, ReturnValue) == 0x000000, "Member 'BRPickupBase_GetPickupMeshColorArray::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPickupBase.HandleComponentOverlap
// 0x0110 (0x0110 - 0x0000)
struct BRPickupBase_HandleComponentOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPickupBase_HandleComponentOverlap) == 0x000008, "Wrong alignment on BRPickupBase_HandleComponentOverlap");
static_assert(sizeof(BRPickupBase_HandleComponentOverlap) == 0x000110, "Wrong size on BRPickupBase_HandleComponentOverlap");
static_assert(offsetof(BRPickupBase_HandleComponentOverlap, OverlappedComponent) == 0x000000, "Member 'BRPickupBase_HandleComponentOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BRPickupBase_HandleComponentOverlap, OtherActor) == 0x000008, "Member 'BRPickupBase_HandleComponentOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BRPickupBase_HandleComponentOverlap, OtherComp) == 0x000010, "Member 'BRPickupBase_HandleComponentOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BRPickupBase_HandleComponentOverlap, OtherBodyIndex) == 0x000018, "Member 'BRPickupBase_HandleComponentOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BRPickupBase_HandleComponentOverlap, bFromSweep) == 0x00001C, "Member 'BRPickupBase_HandleComponentOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BRPickupBase_HandleComponentOverlap, SweepResult) == 0x000020, "Member 'BRPickupBase_HandleComponentOverlap::SweepResult' has a wrong offset!");

// Function Brickadia.BRPickupBase.HandlePickupAttempt
// 0x0008 (0x0008 - 0x0000)
struct BRPickupBase_HandlePickupAttempt final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPickupBase_HandlePickupAttempt) == 0x000008, "Wrong alignment on BRPickupBase_HandlePickupAttempt");
static_assert(sizeof(BRPickupBase_HandlePickupAttempt) == 0x000008, "Wrong size on BRPickupBase_HandlePickupAttempt");
static_assert(offsetof(BRPickupBase_HandlePickupAttempt, Pawn) == 0x000000, "Member 'BRPickupBase_HandlePickupAttempt::Pawn' has a wrong offset!");

// Function Brickadia.BRPickupBase.HandleSetPickupEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRPickupBase_HandleSetPickupEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPickupBase_HandleSetPickupEnabled) == 0x000001, "Wrong alignment on BRPickupBase_HandleSetPickupEnabled");
static_assert(sizeof(BRPickupBase_HandleSetPickupEnabled) == 0x000001, "Wrong size on BRPickupBase_HandleSetPickupEnabled");
static_assert(offsetof(BRPickupBase_HandleSetPickupEnabled, bEnabled) == 0x000000, "Member 'BRPickupBase_HandleSetPickupEnabled::bEnabled' has a wrong offset!");

// Function Brickadia.BRPickupBase.SetAutoRespawnTime
// 0x0004 (0x0004 - 0x0000)
struct BRPickupBase_SetAutoRespawnTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPickupBase_SetAutoRespawnTime) == 0x000004, "Wrong alignment on BRPickupBase_SetAutoRespawnTime");
static_assert(sizeof(BRPickupBase_SetAutoRespawnTime) == 0x000004, "Wrong size on BRPickupBase_SetAutoRespawnTime");
static_assert(offsetof(BRPickupBase_SetAutoRespawnTime, Time) == 0x000000, "Member 'BRPickupBase_SetAutoRespawnTime::Time' has a wrong offset!");

// Function Brickadia.BRPickupBase.SetPickupEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRPickupBase_SetPickupEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPickupBase_SetPickupEnabled) == 0x000001, "Wrong alignment on BRPickupBase_SetPickupEnabled");
static_assert(sizeof(BRPickupBase_SetPickupEnabled) == 0x000001, "Wrong size on BRPickupBase_SetPickupEnabled");
static_assert(offsetof(BRPickupBase_SetPickupEnabled, bEnabled) == 0x000000, "Member 'BRPickupBase_SetPickupEnabled::bEnabled' has a wrong offset!");

// Function Brickadia.BRPickupBase.GetRemainingDisableTimeoutValue
// 0x0004 (0x0004 - 0x0000)
struct BRPickupBase_GetRemainingDisableTimeoutValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPickupBase_GetRemainingDisableTimeoutValue) == 0x000004, "Wrong alignment on BRPickupBase_GetRemainingDisableTimeoutValue");
static_assert(sizeof(BRPickupBase_GetRemainingDisableTimeoutValue) == 0x000004, "Wrong size on BRPickupBase_GetRemainingDisableTimeoutValue");
static_assert(offsetof(BRPickupBase_GetRemainingDisableTimeoutValue, ReturnValue) == 0x000000, "Member 'BRPickupBase_GetRemainingDisableTimeoutValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPickupBase.IsPickupEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRPickupBase_IsPickupEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPickupBase_IsPickupEnabled) == 0x000001, "Wrong alignment on BRPickupBase_IsPickupEnabled");
static_assert(sizeof(BRPickupBase_IsPickupEnabled) == 0x000001, "Wrong size on BRPickupBase_IsPickupEnabled");
static_assert(offsetof(BRPickupBase_IsPickupEnabled, ReturnValue) == 0x000000, "Member 'BRPickupBase_IsPickupEnabled::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolBindHintsWidget.SetTarget
// 0x0008 (0x0008 - 0x0000)
struct BRToolBindHintsWidget_SetTarget final
{
public:
	class ABRToolBase*                            InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBindHintsWidget_SetTarget) == 0x000008, "Wrong alignment on BRToolBindHintsWidget_SetTarget");
static_assert(sizeof(BRToolBindHintsWidget_SetTarget) == 0x000008, "Wrong size on BRToolBindHintsWidget_SetTarget");
static_assert(offsetof(BRToolBindHintsWidget_SetTarget, InTarget) == 0x000000, "Member 'BRToolBindHintsWidget_SetTarget::InTarget' has a wrong offset!");

// Function Brickadia.BRAnimatedPickupBase.SetAnimationData
// 0x0014 (0x0014 - 0x0000)
struct BRAnimatedPickupBase_SetAnimationData final
{
public:
	EBrickAxis                                    InAnimationAxis;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAnimationAxisLocal;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAnimationSpinSpeed;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAnimationBobSpeed;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAnimationBobHeight;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAnimationPhase;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimatedPickupBase_SetAnimationData) == 0x000004, "Wrong alignment on BRAnimatedPickupBase_SetAnimationData");
static_assert(sizeof(BRAnimatedPickupBase_SetAnimationData) == 0x000014, "Wrong size on BRAnimatedPickupBase_SetAnimationData");
static_assert(offsetof(BRAnimatedPickupBase_SetAnimationData, InAnimationAxis) == 0x000000, "Member 'BRAnimatedPickupBase_SetAnimationData::InAnimationAxis' has a wrong offset!");
static_assert(offsetof(BRAnimatedPickupBase_SetAnimationData, bInAnimationAxisLocal) == 0x000001, "Member 'BRAnimatedPickupBase_SetAnimationData::bInAnimationAxisLocal' has a wrong offset!");
static_assert(offsetof(BRAnimatedPickupBase_SetAnimationData, InAnimationSpinSpeed) == 0x000004, "Member 'BRAnimatedPickupBase_SetAnimationData::InAnimationSpinSpeed' has a wrong offset!");
static_assert(offsetof(BRAnimatedPickupBase_SetAnimationData, InAnimationBobSpeed) == 0x000008, "Member 'BRAnimatedPickupBase_SetAnimationData::InAnimationBobSpeed' has a wrong offset!");
static_assert(offsetof(BRAnimatedPickupBase_SetAnimationData, InAnimationBobHeight) == 0x00000C, "Member 'BRAnimatedPickupBase_SetAnimationData::InAnimationBobHeight' has a wrong offset!");
static_assert(offsetof(BRAnimatedPickupBase_SetAnimationData, InAnimationPhase) == 0x000010, "Member 'BRAnimatedPickupBase_SetAnimationData::InAnimationPhase' has a wrong offset!");

// Function Brickadia.BRAnimatedPickupBase.SetEnableAnimation
// 0x0001 (0x0001 - 0x0000)
struct BRAnimatedPickupBase_SetEnableAnimation final
{
public:
	bool                                          bInEnableAnimation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRAnimatedPickupBase_SetEnableAnimation) == 0x000001, "Wrong alignment on BRAnimatedPickupBase_SetEnableAnimation");
static_assert(sizeof(BRAnimatedPickupBase_SetEnableAnimation) == 0x000001, "Wrong size on BRAnimatedPickupBase_SetEnableAnimation");
static_assert(offsetof(BRAnimatedPickupBase_SetEnableAnimation, bInEnableAnimation) == 0x000000, "Member 'BRAnimatedPickupBase_SetEnableAnimation::bInEnableAnimation' has a wrong offset!");

// Function Brickadia.BRRulesetBlueprintFunctionLibrary.GetDefaultRuleset
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetBlueprintFunctionLibrary_GetDefaultRuleset final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRRuleset*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetBlueprintFunctionLibrary_GetDefaultRuleset) == 0x000008, "Wrong alignment on BRRulesetBlueprintFunctionLibrary_GetDefaultRuleset");
static_assert(sizeof(BRRulesetBlueprintFunctionLibrary_GetDefaultRuleset) == 0x000010, "Wrong size on BRRulesetBlueprintFunctionLibrary_GetDefaultRuleset");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_GetDefaultRuleset, WorldContextObject) == 0x000000, "Member 'BRRulesetBlueprintFunctionLibrary_GetDefaultRuleset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_GetDefaultRuleset, ReturnValue) == 0x000008, "Member 'BRRulesetBlueprintFunctionLibrary_GetDefaultRuleset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetBlueprintFunctionLibrary.GetGlobalRuleset
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetBlueprintFunctionLibrary_GetGlobalRuleset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRRuleset*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetBlueprintFunctionLibrary_GetGlobalRuleset) == 0x000008, "Wrong alignment on BRRulesetBlueprintFunctionLibrary_GetGlobalRuleset");
static_assert(sizeof(BRRulesetBlueprintFunctionLibrary_GetGlobalRuleset) == 0x000010, "Wrong size on BRRulesetBlueprintFunctionLibrary_GetGlobalRuleset");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_GetGlobalRuleset, WorldContextObject) == 0x000000, "Member 'BRRulesetBlueprintFunctionLibrary_GetGlobalRuleset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_GetGlobalRuleset, ReturnValue) == 0x000008, "Member 'BRRulesetBlueprintFunctionLibrary_GetGlobalRuleset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetBlueprintFunctionLibrary.GetLocalRuleset
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetBlueprintFunctionLibrary_GetLocalRuleset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRRuleset*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetBlueprintFunctionLibrary_GetLocalRuleset) == 0x000008, "Wrong alignment on BRRulesetBlueprintFunctionLibrary_GetLocalRuleset");
static_assert(sizeof(BRRulesetBlueprintFunctionLibrary_GetLocalRuleset) == 0x000010, "Wrong size on BRRulesetBlueprintFunctionLibrary_GetLocalRuleset");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_GetLocalRuleset, WorldContextObject) == 0x000000, "Member 'BRRulesetBlueprintFunctionLibrary_GetLocalRuleset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_GetLocalRuleset, ReturnValue) == 0x000008, "Member 'BRRulesetBlueprintFunctionLibrary_GetLocalRuleset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetBlueprintFunctionLibrary.GetTeamSettingsFromQuickTeamSettings
// 0x0038 (0x0038 - 0x0000)
struct BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickTeamSettings final
{
public:
	struct FBRQuickTeamSettings                   Settings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickTeamSettings) == 0x000008, "Wrong alignment on BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickTeamSettings");
static_assert(sizeof(BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickTeamSettings) == 0x000038, "Wrong size on BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickTeamSettings");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickTeamSettings, Settings) == 0x000000, "Member 'BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickTeamSettings::Settings' has a wrong offset!");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickTeamSettings, ReturnValue) == 0x000028, "Member 'BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickTeamSettings::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetBlueprintFunctionLibrary.GetTeamSettingsFromQuickUnassignedTeamSettings
// 0x0020 (0x0020 - 0x0000)
struct BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickUnassignedTeamSettings final
{
public:
	struct FBRQuickUnassignedTeamSettings         Settings;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickUnassignedTeamSettings) == 0x000008, "Wrong alignment on BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickUnassignedTeamSettings");
static_assert(sizeof(BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickUnassignedTeamSettings) == 0x000020, "Wrong size on BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickUnassignedTeamSettings");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickUnassignedTeamSettings, Settings) == 0x000000, "Member 'BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickUnassignedTeamSettings::Settings' has a wrong offset!");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickUnassignedTeamSettings, ReturnValue) == 0x000010, "Member 'BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickUnassignedTeamSettings::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetBlueprintFunctionLibrary.PlayerCanEndCurrentRulesetByLeaving
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetBlueprintFunctionLibrary_PlayerCanEndCurrentRulesetByLeaving final
{
public:
	const class ABRPlayerController*              Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetBlueprintFunctionLibrary_PlayerCanEndCurrentRulesetByLeaving) == 0x000008, "Wrong alignment on BRRulesetBlueprintFunctionLibrary_PlayerCanEndCurrentRulesetByLeaving");
static_assert(sizeof(BRRulesetBlueprintFunctionLibrary_PlayerCanEndCurrentRulesetByLeaving) == 0x000010, "Wrong size on BRRulesetBlueprintFunctionLibrary_PlayerCanEndCurrentRulesetByLeaving");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_PlayerCanEndCurrentRulesetByLeaving, Player) == 0x000000, "Member 'BRRulesetBlueprintFunctionLibrary_PlayerCanEndCurrentRulesetByLeaving::Player' has a wrong offset!");
static_assert(offsetof(BRRulesetBlueprintFunctionLibrary_PlayerCanEndCurrentRulesetByLeaving, ReturnValue) == 0x000008, "Member 'BRRulesetBlueprintFunctionLibrary_PlayerCanEndCurrentRulesetByLeaving::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPieMenuEntry.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct BRPieMenuEntry_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPieMenuEntry_GetDescription) == 0x000008, "Wrong alignment on BRPieMenuEntry_GetDescription");
static_assert(sizeof(BRPieMenuEntry_GetDescription) == 0x000010, "Wrong size on BRPieMenuEntry_GetDescription");
static_assert(offsetof(BRPieMenuEntry_GetDescription, ReturnValue) == 0x000000, "Member 'BRPieMenuEntry_GetDescription::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPieMenuEntry.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BRPieMenuEntry_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPieMenuEntry_GetDisplayName) == 0x000008, "Wrong alignment on BRPieMenuEntry_GetDisplayName");
static_assert(sizeof(BRPieMenuEntry_GetDisplayName) == 0x000010, "Wrong size on BRPieMenuEntry_GetDisplayName");
static_assert(offsetof(BRPieMenuEntry_GetDisplayName, ReturnValue) == 0x000000, "Member 'BRPieMenuEntry_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPieMenuWidget.AddSlot
// 0x0008 (0x0008 - 0x0000)
struct BRPieMenuWidget_AddSlot final
{
public:
	class UBRPieMenuEntry*                        Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPieMenuWidget_AddSlot) == 0x000008, "Wrong alignment on BRPieMenuWidget_AddSlot");
static_assert(sizeof(BRPieMenuWidget_AddSlot) == 0x000008, "Wrong size on BRPieMenuWidget_AddSlot");
static_assert(offsetof(BRPieMenuWidget_AddSlot, Widget) == 0x000000, "Member 'BRPieMenuWidget_AddSlot::Widget' has a wrong offset!");

// Function Brickadia.BRPieMenuWidget.RemoveSlotByIndex
// 0x0004 (0x0004 - 0x0000)
struct BRPieMenuWidget_RemoveSlotByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPieMenuWidget_RemoveSlotByIndex) == 0x000004, "Wrong alignment on BRPieMenuWidget_RemoveSlotByIndex");
static_assert(sizeof(BRPieMenuWidget_RemoveSlotByIndex) == 0x000004, "Wrong size on BRPieMenuWidget_RemoveSlotByIndex");
static_assert(offsetof(BRPieMenuWidget_RemoveSlotByIndex, Index_0) == 0x000000, "Member 'BRPieMenuWidget_RemoveSlotByIndex::Index_0' has a wrong offset!");

// Function Brickadia.BRPieMenuWidget.SelectConfirm
// 0x0001 (0x0001 - 0x0000)
struct BRPieMenuWidget_SelectConfirm final
{
public:
	bool                                          bRememberLast;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPieMenuWidget_SelectConfirm) == 0x000001, "Wrong alignment on BRPieMenuWidget_SelectConfirm");
static_assert(sizeof(BRPieMenuWidget_SelectConfirm) == 0x000001, "Wrong size on BRPieMenuWidget_SelectConfirm");
static_assert(offsetof(BRPieMenuWidget_SelectConfirm, bRememberLast) == 0x000000, "Member 'BRPieMenuWidget_SelectConfirm::bRememberLast' has a wrong offset!");

// Function Brickadia.BRPieMenuWidget.SelectSlot
// 0x0004 (0x0004 - 0x0000)
struct BRPieMenuWidget_SelectSlot final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPieMenuWidget_SelectSlot) == 0x000004, "Wrong alignment on BRPieMenuWidget_SelectSlot");
static_assert(sizeof(BRPieMenuWidget_SelectSlot) == 0x000004, "Wrong size on BRPieMenuWidget_SelectSlot");
static_assert(offsetof(BRPieMenuWidget_SelectSlot, Index_0) == 0x000000, "Member 'BRPieMenuWidget_SelectSlot::Index_0' has a wrong offset!");

// Function Brickadia.BRPieMenuWidget.SetLastSelected
// 0x0004 (0x0004 - 0x0000)
struct BRPieMenuWidget_SetLastSelected final
{
public:
	int32                                         NewLastSelected;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPieMenuWidget_SetLastSelected) == 0x000004, "Wrong alignment on BRPieMenuWidget_SetLastSelected");
static_assert(sizeof(BRPieMenuWidget_SetLastSelected) == 0x000004, "Wrong size on BRPieMenuWidget_SetLastSelected");
static_assert(offsetof(BRPieMenuWidget_SetLastSelected, NewLastSelected) == 0x000000, "Member 'BRPieMenuWidget_SetLastSelected::NewLastSelected' has a wrong offset!");

// Function Brickadia.BRPieMenuWidget.GetAllSlots
// 0x0010 (0x0010 - 0x0000)
struct BRPieMenuWidget_GetAllSlots final
{
public:
	TArray<class UBRPieMenuEntry*>                OutSlots;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPieMenuWidget_GetAllSlots) == 0x000008, "Wrong alignment on BRPieMenuWidget_GetAllSlots");
static_assert(sizeof(BRPieMenuWidget_GetAllSlots) == 0x000010, "Wrong size on BRPieMenuWidget_GetAllSlots");
static_assert(offsetof(BRPieMenuWidget_GetAllSlots, OutSlots) == 0x000000, "Member 'BRPieMenuWidget_GetAllSlots::OutSlots' has a wrong offset!");

// Function Brickadia.BRPieMenuWidget.GetSlotByIndex
// 0x0010 (0x0010 - 0x0000)
struct BRPieMenuWidget_GetSlotByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRPieMenuEntry*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPieMenuWidget_GetSlotByIndex) == 0x000008, "Wrong alignment on BRPieMenuWidget_GetSlotByIndex");
static_assert(sizeof(BRPieMenuWidget_GetSlotByIndex) == 0x000010, "Wrong size on BRPieMenuWidget_GetSlotByIndex");
static_assert(offsetof(BRPieMenuWidget_GetSlotByIndex, Index_0) == 0x000000, "Member 'BRPieMenuWidget_GetSlotByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BRPieMenuWidget_GetSlotByIndex, ReturnValue) == 0x000008, "Member 'BRPieMenuWidget_GetSlotByIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTextFilterSubsystem.RefreshActiveRegex
// 0x0008 (0x0008 - 0x0000)
struct BRTextFilterSubsystem_RefreshActiveRegex final
{
public:
	const class UDataTable*                       TextFilterTable;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTextFilterSubsystem_RefreshActiveRegex) == 0x000008, "Wrong alignment on BRTextFilterSubsystem_RefreshActiveRegex");
static_assert(sizeof(BRTextFilterSubsystem_RefreshActiveRegex) == 0x000008, "Wrong size on BRTextFilterSubsystem_RefreshActiveRegex");
static_assert(offsetof(BRTextFilterSubsystem_RefreshActiveRegex, TextFilterTable) == 0x000000, "Member 'BRTextFilterSubsystem_RefreshActiveRegex::TextFilterTable' has a wrong offset!");

// Function Brickadia.BRTextFilterSubsystem.FilterText
// 0x0020 (0x0020 - 0x0000)
struct BRTextFilterSubsystem_FilterText final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTextFilterSubsystem_FilterText) == 0x000008, "Wrong alignment on BRTextFilterSubsystem_FilterText");
static_assert(sizeof(BRTextFilterSubsystem_FilterText) == 0x000020, "Wrong size on BRTextFilterSubsystem_FilterText");
static_assert(offsetof(BRTextFilterSubsystem_FilterText, Input) == 0x000000, "Member 'BRTextFilterSubsystem_FilterText::Input' has a wrong offset!");
static_assert(offsetof(BRTextFilterSubsystem_FilterText, ReturnValue) == 0x000010, "Member 'BRTextFilterSubsystem_FilterText::ReturnValue' has a wrong offset!");

// Function Brickadia.AsyncActionOneButtonDialog.CreateOneButtonDialog
// 0x0060 (0x0060 - 0x0000)
struct AsyncActionOneButtonDialog_CreateOneButtonDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage;                                     // 0x0028(0x0010)(Parm, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ButtonIcon_0;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBROneButtonDialogBase>     DialogClass_0;                                     // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEscapeDialog;                                // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncActionOneButtonDialog*            ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncActionOneButtonDialog_CreateOneButtonDialog) == 0x000008, "Wrong alignment on AsyncActionOneButtonDialog_CreateOneButtonDialog");
static_assert(sizeof(AsyncActionOneButtonDialog_CreateOneButtonDialog) == 0x000060, "Wrong size on AsyncActionOneButtonDialog_CreateOneButtonDialog");
static_assert(offsetof(AsyncActionOneButtonDialog_CreateOneButtonDialog, WorldContextObject) == 0x000000, "Member 'AsyncActionOneButtonDialog_CreateOneButtonDialog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_CreateOneButtonDialog, Title) == 0x000008, "Member 'AsyncActionOneButtonDialog_CreateOneButtonDialog::Title' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_CreateOneButtonDialog, Message) == 0x000018, "Member 'AsyncActionOneButtonDialog_CreateOneButtonDialog::Message' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_CreateOneButtonDialog, ButtonMessage) == 0x000028, "Member 'AsyncActionOneButtonDialog_CreateOneButtonDialog::ButtonMessage' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_CreateOneButtonDialog, ButtonStyle) == 0x000038, "Member 'AsyncActionOneButtonDialog_CreateOneButtonDialog::ButtonStyle' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_CreateOneButtonDialog, ButtonIcon_0) == 0x000040, "Member 'AsyncActionOneButtonDialog_CreateOneButtonDialog::ButtonIcon_0' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_CreateOneButtonDialog, DialogClass_0) == 0x000048, "Member 'AsyncActionOneButtonDialog_CreateOneButtonDialog::DialogClass_0' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_CreateOneButtonDialog, bAllowEscapeDialog) == 0x000050, "Member 'AsyncActionOneButtonDialog_CreateOneButtonDialog::bAllowEscapeDialog' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_CreateOneButtonDialog, ReturnValue) == 0x000058, "Member 'AsyncActionOneButtonDialog_CreateOneButtonDialog::ReturnValue' has a wrong offset!");

// Function Brickadia.AsyncActionOneButtonDialog.QuickCreateOneButtonDialog
// 0x0058 (0x0058 - 0x0000)
struct AsyncActionOneButtonDialog_QuickCreateOneButtonDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage;                                     // 0x0028(0x0010)(Parm, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ButtonIcon_0;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEscapeDialog;                                // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncActionOneButtonDialog*            ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncActionOneButtonDialog_QuickCreateOneButtonDialog) == 0x000008, "Wrong alignment on AsyncActionOneButtonDialog_QuickCreateOneButtonDialog");
static_assert(sizeof(AsyncActionOneButtonDialog_QuickCreateOneButtonDialog) == 0x000058, "Wrong size on AsyncActionOneButtonDialog_QuickCreateOneButtonDialog");
static_assert(offsetof(AsyncActionOneButtonDialog_QuickCreateOneButtonDialog, WorldContextObject) == 0x000000, "Member 'AsyncActionOneButtonDialog_QuickCreateOneButtonDialog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_QuickCreateOneButtonDialog, Title) == 0x000008, "Member 'AsyncActionOneButtonDialog_QuickCreateOneButtonDialog::Title' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_QuickCreateOneButtonDialog, Message) == 0x000018, "Member 'AsyncActionOneButtonDialog_QuickCreateOneButtonDialog::Message' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_QuickCreateOneButtonDialog, ButtonMessage) == 0x000028, "Member 'AsyncActionOneButtonDialog_QuickCreateOneButtonDialog::ButtonMessage' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_QuickCreateOneButtonDialog, ButtonStyle) == 0x000038, "Member 'AsyncActionOneButtonDialog_QuickCreateOneButtonDialog::ButtonStyle' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_QuickCreateOneButtonDialog, ButtonIcon_0) == 0x000040, "Member 'AsyncActionOneButtonDialog_QuickCreateOneButtonDialog::ButtonIcon_0' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_QuickCreateOneButtonDialog, bAllowEscapeDialog) == 0x000048, "Member 'AsyncActionOneButtonDialog_QuickCreateOneButtonDialog::bAllowEscapeDialog' has a wrong offset!");
static_assert(offsetof(AsyncActionOneButtonDialog_QuickCreateOneButtonDialog, ReturnValue) == 0x000050, "Member 'AsyncActionOneButtonDialog_QuickCreateOneButtonDialog::ReturnValue' has a wrong offset!");

// Function Brickadia.GenericThumbnailWidget.SetThumbnailObject
// 0x0008 (0x0008 - 0x0000)
struct GenericThumbnailWidget_SetThumbnailObject final
{
public:
	class UObject*                                NewThumbnailObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericThumbnailWidget_SetThumbnailObject) == 0x000008, "Wrong alignment on GenericThumbnailWidget_SetThumbnailObject");
static_assert(sizeof(GenericThumbnailWidget_SetThumbnailObject) == 0x000008, "Wrong size on GenericThumbnailWidget_SetThumbnailObject");
static_assert(offsetof(GenericThumbnailWidget_SetThumbnailObject, NewThumbnailObject) == 0x000000, "Member 'GenericThumbnailWidget_SetThumbnailObject::NewThumbnailObject' has a wrong offset!");

// Function Brickadia.GenericThumbnailWidget.SetThumbnailObject2
// 0x0008 (0x0008 - 0x0000)
struct GenericThumbnailWidget_SetThumbnailObject2 final
{
public:
	class UClass*                                 NewThumbnailObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericThumbnailWidget_SetThumbnailObject2) == 0x000008, "Wrong alignment on GenericThumbnailWidget_SetThumbnailObject2");
static_assert(sizeof(GenericThumbnailWidget_SetThumbnailObject2) == 0x000008, "Wrong size on GenericThumbnailWidget_SetThumbnailObject2");
static_assert(offsetof(GenericThumbnailWidget_SetThumbnailObject2, NewThumbnailObject) == 0x000000, "Member 'GenericThumbnailWidget_SetThumbnailObject2::NewThumbnailObject' has a wrong offset!");

// Function Brickadia.GenericThumbnailWidget.SetThumbnailProcessor
// 0x0008 (0x0008 - 0x0000)
struct GenericThumbnailWidget_SetThumbnailProcessor final
{
public:
	TSubclassOf<class UThumbnailProcessor>        Processor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericThumbnailWidget_SetThumbnailProcessor) == 0x000008, "Wrong alignment on GenericThumbnailWidget_SetThumbnailProcessor");
static_assert(sizeof(GenericThumbnailWidget_SetThumbnailProcessor) == 0x000008, "Wrong size on GenericThumbnailWidget_SetThumbnailProcessor");
static_assert(offsetof(GenericThumbnailWidget_SetThumbnailProcessor, Processor) == 0x000000, "Member 'GenericThumbnailWidget_SetThumbnailProcessor::Processor' has a wrong offset!");

// Function Brickadia.GenericThumbnailWidget.StartRealtimeRotation
// 0x0018 (0x0018 - 0x0000)
struct GenericThumbnailWidget_StartRealtimeRotation final
{
public:
	struct FRotator                               RotationPerSecond;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericThumbnailWidget_StartRealtimeRotation) == 0x000008, "Wrong alignment on GenericThumbnailWidget_StartRealtimeRotation");
static_assert(sizeof(GenericThumbnailWidget_StartRealtimeRotation) == 0x000018, "Wrong size on GenericThumbnailWidget_StartRealtimeRotation");
static_assert(offsetof(GenericThumbnailWidget_StartRealtimeRotation, RotationPerSecond) == 0x000000, "Member 'GenericThumbnailWidget_StartRealtimeRotation::RotationPerSecond' has a wrong offset!");

// Function Brickadia.GenericThumbnailWidget.StopRealtimeRotation
// 0x0004 (0x0004 - 0x0000)
struct GenericThumbnailWidget_StopRealtimeRotation final
{
public:
	float                                         UnrotateTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericThumbnailWidget_StopRealtimeRotation) == 0x000004, "Wrong alignment on GenericThumbnailWidget_StopRealtimeRotation");
static_assert(sizeof(GenericThumbnailWidget_StopRealtimeRotation) == 0x000004, "Wrong size on GenericThumbnailWidget_StopRealtimeRotation");
static_assert(offsetof(GenericThumbnailWidget_StopRealtimeRotation, UnrotateTime) == 0x000000, "Member 'GenericThumbnailWidget_StopRealtimeRotation::UnrotateTime' has a wrong offset!");

// Function Brickadia.GenericThumbnailWidget.GetThumbnailObject
// 0x0008 (0x0008 - 0x0000)
struct GenericThumbnailWidget_GetThumbnailObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericThumbnailWidget_GetThumbnailObject) == 0x000008, "Wrong alignment on GenericThumbnailWidget_GetThumbnailObject");
static_assert(sizeof(GenericThumbnailWidget_GetThumbnailObject) == 0x000008, "Wrong size on GenericThumbnailWidget_GetThumbnailObject");
static_assert(offsetof(GenericThumbnailWidget_GetThumbnailObject, ReturnValue) == 0x000000, "Member 'GenericThumbnailWidget_GetThumbnailObject::ReturnValue' has a wrong offset!");

// Function Brickadia.GenericThumbnailWidget.IsRealtime
// 0x0001 (0x0001 - 0x0000)
struct GenericThumbnailWidget_IsRealtime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericThumbnailWidget_IsRealtime) == 0x000001, "Wrong alignment on GenericThumbnailWidget_IsRealtime");
static_assert(sizeof(GenericThumbnailWidget_IsRealtime) == 0x000001, "Wrong size on GenericThumbnailWidget_IsRealtime");
static_assert(offsetof(GenericThumbnailWidget_IsRealtime, ReturnValue) == 0x000000, "Member 'GenericThumbnailWidget_IsRealtime::ReturnValue' has a wrong offset!");

// Function Brickadia.BRToolPreviewActor.OnRep_PreviewParts
// 0x0010 (0x0010 - 0x0000)
struct BRToolPreviewActor_OnRep_PreviewParts final
{
public:
	TArray<class UBRToolPreviewPartBase*>         OldPreviewParts;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewActor_OnRep_PreviewParts) == 0x000008, "Wrong alignment on BRToolPreviewActor_OnRep_PreviewParts");
static_assert(sizeof(BRToolPreviewActor_OnRep_PreviewParts) == 0x000010, "Wrong size on BRToolPreviewActor_OnRep_PreviewParts");
static_assert(offsetof(BRToolPreviewActor_OnRep_PreviewParts, OldPreviewParts) == 0x000000, "Member 'BRToolPreviewActor_OnRep_PreviewParts::OldPreviewParts' has a wrong offset!");

// Function Brickadia.BRPlacerControlMode_Mouse.SwitchPivotMode
// 0x0008 (0x0008 - 0x0000)
struct BRPlacerControlMode_Mouse_SwitchPivotMode final
{
public:
	class FName                                   NewTargetingMode;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerControlMode_Mouse_SwitchPivotMode) == 0x000004, "Wrong alignment on BRPlacerControlMode_Mouse_SwitchPivotMode");
static_assert(sizeof(BRPlacerControlMode_Mouse_SwitchPivotMode) == 0x000008, "Wrong size on BRPlacerControlMode_Mouse_SwitchPivotMode");
static_assert(offsetof(BRPlacerControlMode_Mouse_SwitchPivotMode, NewTargetingMode) == 0x000000, "Member 'BRPlacerControlMode_Mouse_SwitchPivotMode::NewTargetingMode' has a wrong offset!");

// Function Brickadia.BRPlacerControlMode_Mouse.GetCurrentLockMode
// 0x0008 (0x0008 - 0x0000)
struct BRPlacerControlMode_Mouse_GetCurrentLockMode final
{
public:
	class UBRPlacerMouseLockModeBase*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerControlMode_Mouse_GetCurrentLockMode) == 0x000008, "Wrong alignment on BRPlacerControlMode_Mouse_GetCurrentLockMode");
static_assert(sizeof(BRPlacerControlMode_Mouse_GetCurrentLockMode) == 0x000008, "Wrong size on BRPlacerControlMode_Mouse_GetCurrentLockMode");
static_assert(offsetof(BRPlacerControlMode_Mouse_GetCurrentLockMode, ReturnValue) == 0x000000, "Member 'BRPlacerControlMode_Mouse_GetCurrentLockMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlacerControlMode_Mouse.GetDefaultTargetingMode
// 0x0008 (0x0008 - 0x0000)
struct BRPlacerControlMode_Mouse_GetDefaultTargetingMode final
{
public:
	class UBRPlacerMouseTargetingModeBase*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerControlMode_Mouse_GetDefaultTargetingMode) == 0x000008, "Wrong alignment on BRPlacerControlMode_Mouse_GetDefaultTargetingMode");
static_assert(sizeof(BRPlacerControlMode_Mouse_GetDefaultTargetingMode) == 0x000008, "Wrong size on BRPlacerControlMode_Mouse_GetDefaultTargetingMode");
static_assert(offsetof(BRPlacerControlMode_Mouse_GetDefaultTargetingMode, ReturnValue) == 0x000000, "Member 'BRPlacerControlMode_Mouse_GetDefaultTargetingMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlacerControlMode_Mouse.GetTargetingModes_BP
// 0x0050 (0x0050 - 0x0000)
struct BRPlacerControlMode_Mouse_GetTargetingModes_BP final
{
public:
	TMap<class FName, class UBRPlacerMouseTargetingModeBase*> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, ExportObject, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlacerControlMode_Mouse_GetTargetingModes_BP) == 0x000008, "Wrong alignment on BRPlacerControlMode_Mouse_GetTargetingModes_BP");
static_assert(sizeof(BRPlacerControlMode_Mouse_GetTargetingModes_BP) == 0x000050, "Wrong size on BRPlacerControlMode_Mouse_GetTargetingModes_BP");
static_assert(offsetof(BRPlacerControlMode_Mouse_GetTargetingModes_BP, ReturnValue) == 0x000000, "Member 'BRPlacerControlMode_Mouse_GetTargetingModes_BP::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerCameraManager.SetCameraBlockedCheckEnabled
// 0x0001 (0x0001 - 0x0000)
struct BRPlayerCameraManager_SetCameraBlockedCheckEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerCameraManager_SetCameraBlockedCheckEnabled) == 0x000001, "Wrong alignment on BRPlayerCameraManager_SetCameraBlockedCheckEnabled");
static_assert(sizeof(BRPlayerCameraManager_SetCameraBlockedCheckEnabled) == 0x000001, "Wrong size on BRPlayerCameraManager_SetCameraBlockedCheckEnabled");
static_assert(offsetof(BRPlayerCameraManager_SetCameraBlockedCheckEnabled, bEnabled) == 0x000000, "Member 'BRPlayerCameraManager_SetCameraBlockedCheckEnabled::bEnabled' has a wrong offset!");

// Function Brickadia.BRPlayerPartSocketTree.FindSocketNode
// 0x000C (0x000C - 0x0000)
struct BRPlayerPartSocketTree_FindSocketNode final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerPartSocketTree_FindSocketNode) == 0x000004, "Wrong alignment on BRPlayerPartSocketTree_FindSocketNode");
static_assert(sizeof(BRPlayerPartSocketTree_FindSocketNode) == 0x00000C, "Wrong size on BRPlayerPartSocketTree_FindSocketNode");
static_assert(offsetof(BRPlayerPartSocketTree_FindSocketNode, SocketName) == 0x000000, "Member 'BRPlayerPartSocketTree_FindSocketNode::SocketName' has a wrong offset!");
static_assert(offsetof(BRPlayerPartSocketTree_FindSocketNode, ReturnValue) == 0x000008, "Member 'BRPlayerPartSocketTree_FindSocketNode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerPartSocketTree.FindSymmetricalNode
// 0x0008 (0x0008 - 0x0000)
struct BRPlayerPartSocketTree_FindSymmetricalNode final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerPartSocketTree_FindSymmetricalNode) == 0x000004, "Wrong alignment on BRPlayerPartSocketTree_FindSymmetricalNode");
static_assert(sizeof(BRPlayerPartSocketTree_FindSymmetricalNode) == 0x000008, "Wrong size on BRPlayerPartSocketTree_FindSymmetricalNode");
static_assert(offsetof(BRPlayerPartSocketTree_FindSymmetricalNode, Index_0) == 0x000000, "Member 'BRPlayerPartSocketTree_FindSymmetricalNode::Index_0' has a wrong offset!");
static_assert(offsetof(BRPlayerPartSocketTree_FindSymmetricalNode, ReturnValue) == 0x000004, "Member 'BRPlayerPartSocketTree_FindSymmetricalNode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerPartSocketTree.GetChildSocketNodes
// 0x0018 (0x0018 - 0x0000)
struct BRPlayerPartSocketTree_GetChildSocketNodes final
{
public:
	int32                                         ParentIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerPartSocketTree_GetChildSocketNodes) == 0x000008, "Wrong alignment on BRPlayerPartSocketTree_GetChildSocketNodes");
static_assert(sizeof(BRPlayerPartSocketTree_GetChildSocketNodes) == 0x000018, "Wrong size on BRPlayerPartSocketTree_GetChildSocketNodes");
static_assert(offsetof(BRPlayerPartSocketTree_GetChildSocketNodes, ParentIndex) == 0x000000, "Member 'BRPlayerPartSocketTree_GetChildSocketNodes::ParentIndex' has a wrong offset!");
static_assert(offsetof(BRPlayerPartSocketTree_GetChildSocketNodes, ReturnValue) == 0x000008, "Member 'BRPlayerPartSocketTree_GetChildSocketNodes::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerPartSocketTree.GetSocketNameAtTreeIndex
// 0x000C (0x000C - 0x0000)
struct BRPlayerPartSocketTree_GetSocketNameAtTreeIndex final
{
public:
	int32                                         TreeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPlayerPartSocketTree_GetSocketNameAtTreeIndex) == 0x000004, "Wrong alignment on BRPlayerPartSocketTree_GetSocketNameAtTreeIndex");
static_assert(sizeof(BRPlayerPartSocketTree_GetSocketNameAtTreeIndex) == 0x00000C, "Wrong size on BRPlayerPartSocketTree_GetSocketNameAtTreeIndex");
static_assert(offsetof(BRPlayerPartSocketTree_GetSocketNameAtTreeIndex, TreeIndex) == 0x000000, "Member 'BRPlayerPartSocketTree_GetSocketNameAtTreeIndex::TreeIndex' has a wrong offset!");
static_assert(offsetof(BRPlayerPartSocketTree_GetSocketNameAtTreeIndex, ReturnValue) == 0x000004, "Member 'BRPlayerPartSocketTree_GetSocketNameAtTreeIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPlayerPartSocketTree.IsNodeChildOf
// 0x000C (0x000C - 0x0000)
struct BRPlayerPartSocketTree_IsNodeChildOf final
{
public:
	int32                                         ChildIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPlayerPartSocketTree_IsNodeChildOf) == 0x000004, "Wrong alignment on BRPlayerPartSocketTree_IsNodeChildOf");
static_assert(sizeof(BRPlayerPartSocketTree_IsNodeChildOf) == 0x00000C, "Wrong size on BRPlayerPartSocketTree_IsNodeChildOf");
static_assert(offsetof(BRPlayerPartSocketTree_IsNodeChildOf, ChildIndex) == 0x000000, "Member 'BRPlayerPartSocketTree_IsNodeChildOf::ChildIndex' has a wrong offset!");
static_assert(offsetof(BRPlayerPartSocketTree_IsNodeChildOf, ParentIndex) == 0x000004, "Member 'BRPlayerPartSocketTree_IsNodeChildOf::ParentIndex' has a wrong offset!");
static_assert(offsetof(BRPlayerPartSocketTree_IsNodeChildOf, ReturnValue) == 0x000008, "Member 'BRPlayerPartSocketTree_IsNodeChildOf::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPocketWorldHelpers.DeprojectMousePositionToPocketWorld
// 0x0040 (0x0040 - 0x0000)
struct BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld final
{
public:
	class UViewport*                              Viewport;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PocketWorldLocation;                               // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PocketWorldDirection;                              // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld) == 0x000008, "Wrong alignment on BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld");
static_assert(sizeof(BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld) == 0x000040, "Wrong size on BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld");
static_assert(offsetof(BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld, Viewport) == 0x000000, "Member 'BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld::Viewport' has a wrong offset!");
static_assert(offsetof(BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld, PocketWorldLocation) == 0x000008, "Member 'BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld::PocketWorldLocation' has a wrong offset!");
static_assert(offsetof(BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld, PocketWorldDirection) == 0x000020, "Member 'BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld::PocketWorldDirection' has a wrong offset!");
static_assert(offsetof(BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld, ReturnValue) == 0x000038, "Member 'BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPocketWorldHelpers.DeprojectScreenPositionToPocketWorld
// 0x0050 (0x0050 - 0x0000)
struct BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld final
{
public:
	class UViewport*                              Viewport;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PocketWorldLocation;                               // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PocketWorldDirection;                              // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld) == 0x000008, "Wrong alignment on BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld");
static_assert(sizeof(BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld) == 0x000050, "Wrong size on BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld");
static_assert(offsetof(BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld, Viewport) == 0x000000, "Member 'BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld::Viewport' has a wrong offset!");
static_assert(offsetof(BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld, ScreenPosition) == 0x000008, "Member 'BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld::ScreenPosition' has a wrong offset!");
static_assert(offsetof(BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld, PocketWorldLocation) == 0x000018, "Member 'BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld::PocketWorldLocation' has a wrong offset!");
static_assert(offsetof(BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld, PocketWorldDirection) == 0x000030, "Member 'BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld::PocketWorldDirection' has a wrong offset!");
static_assert(offsetof(BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld, ReturnValue) == 0x000048, "Member 'BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPreset.GetPresetVersion
// 0x0008 (0x0008 - 0x0000)
struct BRPreset_GetPresetVersion final
{
public:
	int32                                         PresetVersion;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPreset_GetPresetVersion) == 0x000004, "Wrong alignment on BRPreset_GetPresetVersion");
static_assert(sizeof(BRPreset_GetPresetVersion) == 0x000008, "Wrong size on BRPreset_GetPresetVersion");
static_assert(offsetof(BRPreset_GetPresetVersion, PresetVersion) == 0x000000, "Member 'BRPreset_GetPresetVersion::PresetVersion' has a wrong offset!");
static_assert(offsetof(BRPreset_GetPresetVersion, ReturnValue) == 0x000004, "Member 'BRPreset_GetPresetVersion::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPreset.LoadInspectorChangelist
// 0x0028 (0x0028 - 0x0000)
struct BRPreset_LoadInspectorChangelist final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           OutChangelist;                                     // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPreset_LoadInspectorChangelist) == 0x000008, "Wrong alignment on BRPreset_LoadInspectorChangelist");
static_assert(sizeof(BRPreset_LoadInspectorChangelist) == 0x000028, "Wrong size on BRPreset_LoadInspectorChangelist");
static_assert(offsetof(BRPreset_LoadInspectorChangelist, WorldContext) == 0x000000, "Member 'BRPreset_LoadInspectorChangelist::WorldContext' has a wrong offset!");
static_assert(offsetof(BRPreset_LoadInspectorChangelist, OutChangelist) == 0x000008, "Member 'BRPreset_LoadInspectorChangelist::OutChangelist' has a wrong offset!");
static_assert(offsetof(BRPreset_LoadInspectorChangelist, ViewClass) == 0x000018, "Member 'BRPreset_LoadInspectorChangelist::ViewClass' has a wrong offset!");
static_assert(offsetof(BRPreset_LoadInspectorChangelist, ReturnValue) == 0x000020, "Member 'BRPreset_LoadInspectorChangelist::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPreset.LoadInspectorChangelist2
// 0x0028 (0x0028 - 0x0000)
struct BRPreset_LoadInspectorChangelist2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           OutChangelist;                                     // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPreset_LoadInspectorChangelist2) == 0x000008, "Wrong alignment on BRPreset_LoadInspectorChangelist2");
static_assert(sizeof(BRPreset_LoadInspectorChangelist2) == 0x000028, "Wrong size on BRPreset_LoadInspectorChangelist2");
static_assert(offsetof(BRPreset_LoadInspectorChangelist2, WorldContext) == 0x000000, "Member 'BRPreset_LoadInspectorChangelist2::WorldContext' has a wrong offset!");
static_assert(offsetof(BRPreset_LoadInspectorChangelist2, OutChangelist) == 0x000008, "Member 'BRPreset_LoadInspectorChangelist2::OutChangelist' has a wrong offset!");
static_assert(offsetof(BRPreset_LoadInspectorChangelist2, View) == 0x000018, "Member 'BRPreset_LoadInspectorChangelist2::View' has a wrong offset!");
static_assert(offsetof(BRPreset_LoadInspectorChangelist2, ReturnValue) == 0x000020, "Member 'BRPreset_LoadInspectorChangelist2::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPreset.LoadStruct
// 0x0010 (0x0010 - 0x0000)
struct BRPreset_LoadStruct final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         struct_0;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPreset_LoadStruct) == 0x000008, "Wrong alignment on BRPreset_LoadStruct");
static_assert(sizeof(BRPreset_LoadStruct) == 0x000010, "Wrong size on BRPreset_LoadStruct");
static_assert(offsetof(BRPreset_LoadStruct, WorldContext) == 0x000000, "Member 'BRPreset_LoadStruct::WorldContext' has a wrong offset!");
static_assert(offsetof(BRPreset_LoadStruct, struct_0) == 0x000008, "Member 'BRPreset_LoadStruct::struct_0' has a wrong offset!");
static_assert(offsetof(BRPreset_LoadStruct, ReturnValue) == 0x00000C, "Member 'BRPreset_LoadStruct::ReturnValue' has a wrong offset!");

// Function Brickadia.BRPreset.SaveInspectorChangelist
// 0x0020 (0x0020 - 0x0000)
struct BRPreset_SaveInspectorChangelist final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPreset_SaveInspectorChangelist) == 0x000008, "Wrong alignment on BRPreset_SaveInspectorChangelist");
static_assert(sizeof(BRPreset_SaveInspectorChangelist) == 0x000020, "Wrong size on BRPreset_SaveInspectorChangelist");
static_assert(offsetof(BRPreset_SaveInspectorChangelist, WorldContext) == 0x000000, "Member 'BRPreset_SaveInspectorChangelist::WorldContext' has a wrong offset!");
static_assert(offsetof(BRPreset_SaveInspectorChangelist, Changelist) == 0x000008, "Member 'BRPreset_SaveInspectorChangelist::Changelist' has a wrong offset!");
static_assert(offsetof(BRPreset_SaveInspectorChangelist, ViewClass) == 0x000018, "Member 'BRPreset_SaveInspectorChangelist::ViewClass' has a wrong offset!");

// Function Brickadia.BRPreset.SaveInspectorChangelist2
// 0x0020 (0x0020 - 0x0000)
struct BRPreset_SaveInspectorChangelist2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPreset_SaveInspectorChangelist2) == 0x000008, "Wrong alignment on BRPreset_SaveInspectorChangelist2");
static_assert(sizeof(BRPreset_SaveInspectorChangelist2) == 0x000020, "Wrong size on BRPreset_SaveInspectorChangelist2");
static_assert(offsetof(BRPreset_SaveInspectorChangelist2, WorldContext) == 0x000000, "Member 'BRPreset_SaveInspectorChangelist2::WorldContext' has a wrong offset!");
static_assert(offsetof(BRPreset_SaveInspectorChangelist2, Changelist) == 0x000008, "Member 'BRPreset_SaveInspectorChangelist2::Changelist' has a wrong offset!");
static_assert(offsetof(BRPreset_SaveInspectorChangelist2, View) == 0x000018, "Member 'BRPreset_SaveInspectorChangelist2::View' has a wrong offset!");

// Function Brickadia.BRPreset.SaveStruct
// 0x0010 (0x0010 - 0x0000)
struct BRPreset_SaveStruct final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         struct_0;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRPreset_SaveStruct) == 0x000008, "Wrong alignment on BRPreset_SaveStruct");
static_assert(sizeof(BRPreset_SaveStruct) == 0x000010, "Wrong size on BRPreset_SaveStruct");
static_assert(offsetof(BRPreset_SaveStruct, WorldContext) == 0x000000, "Member 'BRPreset_SaveStruct::WorldContext' has a wrong offset!");
static_assert(offsetof(BRPreset_SaveStruct, struct_0) == 0x000008, "Member 'BRPreset_SaveStruct::struct_0' has a wrong offset!");

// Function Brickadia.BRPreset.GetPresetName
// 0x0010 (0x0010 - 0x0000)
struct BRPreset_GetPresetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRPreset_GetPresetName) == 0x000008, "Wrong alignment on BRPreset_GetPresetName");
static_assert(sizeof(BRPreset_GetPresetName) == 0x000010, "Wrong size on BRPreset_GetPresetName");
static_assert(offsetof(BRPreset_GetPresetName, ReturnValue) == 0x000000, "Member 'BRPreset_GetPresetName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.ChangeGameType
// 0x0028 (0x0028 - 0x0000)
struct BRRuleset_ChangeGameType final
{
public:
	class UBRGameTypeDescriptor*                  GameTypeDescriptor;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           NewGameTypeSettings;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTellPlayers;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_ChangeGameType) == 0x000008, "Wrong alignment on BRRuleset_ChangeGameType");
static_assert(sizeof(BRRuleset_ChangeGameType) == 0x000028, "Wrong size on BRRuleset_ChangeGameType");
static_assert(offsetof(BRRuleset_ChangeGameType, GameTypeDescriptor) == 0x000000, "Member 'BRRuleset_ChangeGameType::GameTypeDescriptor' has a wrong offset!");
static_assert(offsetof(BRRuleset_ChangeGameType, NewGameTypeSettings) == 0x000008, "Member 'BRRuleset_ChangeGameType::NewGameTypeSettings' has a wrong offset!");
static_assert(offsetof(BRRuleset_ChangeGameType, TriggerPlayer) == 0x000018, "Member 'BRRuleset_ChangeGameType::TriggerPlayer' has a wrong offset!");
static_assert(offsetof(BRRuleset_ChangeGameType, bTellPlayers) == 0x000020, "Member 'BRRuleset_ChangeGameType::bTellPlayers' has a wrong offset!");

// Function Brickadia.BRRuleset.ClearTeams
// 0x0008 (0x0008 - 0x0000)
struct BRRuleset_ClearTeams final
{
public:
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_ClearTeams) == 0x000008, "Wrong alignment on BRRuleset_ClearTeams");
static_assert(sizeof(BRRuleset_ClearTeams) == 0x000008, "Wrong size on BRRuleset_ClearTeams");
static_assert(offsetof(BRRuleset_ClearTeams, TriggerPlayer) == 0x000000, "Member 'BRRuleset_ClearTeams::TriggerPlayer' has a wrong offset!");

// Function Brickadia.BRRuleset.EditGameTypeSettings
// 0x0020 (0x0020 - 0x0000)
struct BRRuleset_EditGameTypeSettings final
{
public:
	struct FInspectorPropertyChangelist           NewGameTypeSettings;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTellPlayers;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_EditGameTypeSettings) == 0x000008, "Wrong alignment on BRRuleset_EditGameTypeSettings");
static_assert(sizeof(BRRuleset_EditGameTypeSettings) == 0x000020, "Wrong size on BRRuleset_EditGameTypeSettings");
static_assert(offsetof(BRRuleset_EditGameTypeSettings, NewGameTypeSettings) == 0x000000, "Member 'BRRuleset_EditGameTypeSettings::NewGameTypeSettings' has a wrong offset!");
static_assert(offsetof(BRRuleset_EditGameTypeSettings, TriggerPlayer) == 0x000010, "Member 'BRRuleset_EditGameTypeSettings::TriggerPlayer' has a wrong offset!");
static_assert(offsetof(BRRuleset_EditGameTypeSettings, bTellPlayers) == 0x000018, "Member 'BRRuleset_EditGameTypeSettings::bTellPlayers' has a wrong offset!");

// Function Brickadia.BRRuleset.EditSettings
// 0x0020 (0x0020 - 0x0000)
struct BRRuleset_EditSettings final
{
public:
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         MinigameEditor;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTellPlayers;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_EditSettings) == 0x000008, "Wrong alignment on BRRuleset_EditSettings");
static_assert(sizeof(BRRuleset_EditSettings) == 0x000020, "Wrong size on BRRuleset_EditSettings");
static_assert(offsetof(BRRuleset_EditSettings, Settings) == 0x000000, "Member 'BRRuleset_EditSettings::Settings' has a wrong offset!");
static_assert(offsetof(BRRuleset_EditSettings, MinigameEditor) == 0x000010, "Member 'BRRuleset_EditSettings::MinigameEditor' has a wrong offset!");
static_assert(offsetof(BRRuleset_EditSettings, bTellPlayers) == 0x000018, "Member 'BRRuleset_EditSettings::bTellPlayers' has a wrong offset!");

// Function Brickadia.BRRuleset.EditTeamSettings
// 0x0030 (0x0030 - 0x0000)
struct BRRuleset_EditTeamSettings final
{
public:
	class FString                                 TeamName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           NewTeamSettings;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTellPlayers;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_EditTeamSettings) == 0x000008, "Wrong alignment on BRRuleset_EditTeamSettings");
static_assert(sizeof(BRRuleset_EditTeamSettings) == 0x000030, "Wrong size on BRRuleset_EditTeamSettings");
static_assert(offsetof(BRRuleset_EditTeamSettings, TeamName) == 0x000000, "Member 'BRRuleset_EditTeamSettings::TeamName' has a wrong offset!");
static_assert(offsetof(BRRuleset_EditTeamSettings, NewTeamSettings) == 0x000010, "Member 'BRRuleset_EditTeamSettings::NewTeamSettings' has a wrong offset!");
static_assert(offsetof(BRRuleset_EditTeamSettings, TriggerPlayer) == 0x000020, "Member 'BRRuleset_EditTeamSettings::TriggerPlayer' has a wrong offset!");
static_assert(offsetof(BRRuleset_EditTeamSettings, bTellPlayers) == 0x000028, "Member 'BRRuleset_EditTeamSettings::bTellPlayers' has a wrong offset!");

// Function Brickadia.BRRuleset.GlobalRuleset_HandleServerSettingsUpdate
// 0x0008 (0x0008 - 0x0000)
struct BRRuleset_GlobalRuleset_HandleServerSettingsUpdate final
{
public:
	class UBRGameSettingsBase*                    Settings;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GlobalRuleset_HandleServerSettingsUpdate) == 0x000008, "Wrong alignment on BRRuleset_GlobalRuleset_HandleServerSettingsUpdate");
static_assert(sizeof(BRRuleset_GlobalRuleset_HandleServerSettingsUpdate) == 0x000008, "Wrong size on BRRuleset_GlobalRuleset_HandleServerSettingsUpdate");
static_assert(offsetof(BRRuleset_GlobalRuleset_HandleServerSettingsUpdate, Settings) == 0x000000, "Member 'BRRuleset_GlobalRuleset_HandleServerSettingsUpdate::Settings' has a wrong offset!");

// Function Brickadia.BRRuleset.HandlePlayerReachCheckPoint
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_HandlePlayerReachCheckPoint final
{
public:
	class ABRPlayerState*                         TriggeredBy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_HandlePlayerReachCheckPoint) == 0x000008, "Wrong alignment on BRRuleset_HandlePlayerReachCheckPoint");
static_assert(sizeof(BRRuleset_HandlePlayerReachCheckPoint) == 0x000010, "Wrong size on BRRuleset_HandlePlayerReachCheckPoint");
static_assert(offsetof(BRRuleset_HandlePlayerReachCheckPoint, TriggeredBy) == 0x000000, "Member 'BRRuleset_HandlePlayerReachCheckPoint::TriggeredBy' has a wrong offset!");
static_assert(offsetof(BRRuleset_HandlePlayerReachCheckPoint, BrickHandle) == 0x000008, "Member 'BRRuleset_HandlePlayerReachCheckPoint::BrickHandle' has a wrong offset!");

// Function Brickadia.BRRuleset.HandlePlayerReachGoalPoint
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_HandlePlayerReachGoalPoint final
{
public:
	class ABRPlayerState*                         TriggeredBy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_HandlePlayerReachGoalPoint) == 0x000008, "Wrong alignment on BRRuleset_HandlePlayerReachGoalPoint");
static_assert(sizeof(BRRuleset_HandlePlayerReachGoalPoint) == 0x000010, "Wrong size on BRRuleset_HandlePlayerReachGoalPoint");
static_assert(offsetof(BRRuleset_HandlePlayerReachGoalPoint, TriggeredBy) == 0x000000, "Member 'BRRuleset_HandlePlayerReachGoalPoint::TriggeredBy' has a wrong offset!");
static_assert(offsetof(BRRuleset_HandlePlayerReachGoalPoint, BrickHandle) == 0x000008, "Member 'BRRuleset_HandlePlayerReachGoalPoint::BrickHandle' has a wrong offset!");

// Function Brickadia.BRRuleset.MoveTeam
// 0x0028 (0x0028 - 0x0000)
struct BRRuleset_MoveTeam final
{
public:
	class FString                                 TeamName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamNameMoveAfter;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_MoveTeam) == 0x000008, "Wrong alignment on BRRuleset_MoveTeam");
static_assert(sizeof(BRRuleset_MoveTeam) == 0x000028, "Wrong size on BRRuleset_MoveTeam");
static_assert(offsetof(BRRuleset_MoveTeam, TeamName) == 0x000000, "Member 'BRRuleset_MoveTeam::TeamName' has a wrong offset!");
static_assert(offsetof(BRRuleset_MoveTeam, TeamNameMoveAfter) == 0x000010, "Member 'BRRuleset_MoveTeam::TeamNameMoveAfter' has a wrong offset!");
static_assert(offsetof(BRRuleset_MoveTeam, TriggerPlayer) == 0x000020, "Member 'BRRuleset_MoveTeam::TriggerPlayer' has a wrong offset!");

// Function Brickadia.BRRuleset.NewRound
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_NewRound final
{
public:
	int32                                         round;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABRPlayerState*                         TriggeredBy;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_NewRound) == 0x000008, "Wrong alignment on BRRuleset_NewRound");
static_assert(sizeof(BRRuleset_NewRound) == 0x000010, "Wrong size on BRRuleset_NewRound");
static_assert(offsetof(BRRuleset_NewRound, round) == 0x000000, "Member 'BRRuleset_NewRound::round' has a wrong offset!");
static_assert(offsetof(BRRuleset_NewRound, bImmediate) == 0x000004, "Member 'BRRuleset_NewRound::bImmediate' has a wrong offset!");
static_assert(offsetof(BRRuleset_NewRound, TriggeredBy) == 0x000008, "Member 'BRRuleset_NewRound::TriggeredBy' has a wrong offset!");

// Function Brickadia.BRRuleset.NextRound
// 0x0001 (0x0001 - 0x0000)
struct BRRuleset_NextRound final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_NextRound) == 0x000001, "Wrong alignment on BRRuleset_NextRound");
static_assert(sizeof(BRRuleset_NextRound) == 0x000001, "Wrong size on BRRuleset_NextRound");
static_assert(offsetof(BRRuleset_NextRound, bImmediate) == 0x000000, "Member 'BRRuleset_NextRound::bImmediate' has a wrong offset!");

// Function Brickadia.BRRuleset.OnRep_GameType
// 0x0008 (0x0008 - 0x0000)
struct BRRuleset_OnRep_GameType final
{
public:
	const class UBRRulesetGameType*               Old;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_OnRep_GameType) == 0x000008, "Wrong alignment on BRRuleset_OnRep_GameType");
static_assert(sizeof(BRRuleset_OnRep_GameType) == 0x000008, "Wrong size on BRRuleset_OnRep_GameType");
static_assert(offsetof(BRRuleset_OnRep_GameType, Old) == 0x000000, "Member 'BRRuleset_OnRep_GameType::Old' has a wrong offset!");

// Function Brickadia.BRRuleset.PlaySound2D
// 0x0020 (0x0020 - 0x0000)
struct BRRuleset_PlaySound2D final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_PlaySound2D) == 0x000008, "Wrong alignment on BRRuleset_PlaySound2D");
static_assert(sizeof(BRRuleset_PlaySound2D) == 0x000020, "Wrong size on BRRuleset_PlaySound2D");
static_assert(offsetof(BRRuleset_PlaySound2D, Sound) == 0x000000, "Member 'BRRuleset_PlaySound2D::Sound' has a wrong offset!");
static_assert(offsetof(BRRuleset_PlaySound2D, VolumeMultiplier) == 0x000008, "Member 'BRRuleset_PlaySound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(BRRuleset_PlaySound2D, PitchMultiplier) == 0x00000C, "Member 'BRRuleset_PlaySound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(BRRuleset_PlaySound2D, StartTime) == 0x000010, "Member 'BRRuleset_PlaySound2D::StartTime' has a wrong offset!");
static_assert(offsetof(BRRuleset_PlaySound2D, ConcurrencySettings) == 0x000018, "Member 'BRRuleset_PlaySound2D::ConcurrencySettings' has a wrong offset!");

// Function Brickadia.BRRuleset.PushChatMessage
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_PushChatMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_PushChatMessage) == 0x000008, "Wrong alignment on BRRuleset_PushChatMessage");
static_assert(sizeof(BRRuleset_PushChatMessage) == 0x000010, "Wrong size on BRRuleset_PushChatMessage");
static_assert(offsetof(BRRuleset_PushChatMessage, Message) == 0x000000, "Member 'BRRuleset_PushChatMessage::Message' has a wrong offset!");

// Function Brickadia.BRRuleset.PushStatusMessage
// 0x0018 (0x0018 - 0x0000)
struct BRRuleset_PushStatusMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlashIfUnchanged;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_PushStatusMessage) == 0x000008, "Wrong alignment on BRRuleset_PushStatusMessage");
static_assert(sizeof(BRRuleset_PushStatusMessage) == 0x000018, "Wrong size on BRRuleset_PushStatusMessage");
static_assert(offsetof(BRRuleset_PushStatusMessage, Message) == 0x000000, "Member 'BRRuleset_PushStatusMessage::Message' has a wrong offset!");
static_assert(offsetof(BRRuleset_PushStatusMessage, bFlashIfUnchanged) == 0x000010, "Member 'BRRuleset_PushStatusMessage::bFlashIfUnchanged' has a wrong offset!");

// Function Brickadia.BRRuleset.QuickCreateTeam
// 0x0040 (0x0040 - 0x0000)
struct BRRuleset_QuickCreateTeam final
{
public:
	struct FBRQuickTeamSettings                   TeamSettings;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTellPlayers;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRRulesetTeam*                         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_QuickCreateTeam) == 0x000008, "Wrong alignment on BRRuleset_QuickCreateTeam");
static_assert(sizeof(BRRuleset_QuickCreateTeam) == 0x000040, "Wrong size on BRRuleset_QuickCreateTeam");
static_assert(offsetof(BRRuleset_QuickCreateTeam, TeamSettings) == 0x000000, "Member 'BRRuleset_QuickCreateTeam::TeamSettings' has a wrong offset!");
static_assert(offsetof(BRRuleset_QuickCreateTeam, TriggerPlayer) == 0x000028, "Member 'BRRuleset_QuickCreateTeam::TriggerPlayer' has a wrong offset!");
static_assert(offsetof(BRRuleset_QuickCreateTeam, bTellPlayers) == 0x000030, "Member 'BRRuleset_QuickCreateTeam::bTellPlayers' has a wrong offset!");
static_assert(offsetof(BRRuleset_QuickCreateTeam, ReturnValue) == 0x000038, "Member 'BRRuleset_QuickCreateTeam::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.RemoveTeam
// 0x0020 (0x0020 - 0x0000)
struct BRRuleset_RemoveTeam final
{
public:
	class FString                                 TeamName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTellPlayers;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_RemoveTeam) == 0x000008, "Wrong alignment on BRRuleset_RemoveTeam");
static_assert(sizeof(BRRuleset_RemoveTeam) == 0x000020, "Wrong size on BRRuleset_RemoveTeam");
static_assert(offsetof(BRRuleset_RemoveTeam, TeamName) == 0x000000, "Member 'BRRuleset_RemoveTeam::TeamName' has a wrong offset!");
static_assert(offsetof(BRRuleset_RemoveTeam, TriggerPlayer) == 0x000010, "Member 'BRRuleset_RemoveTeam::TriggerPlayer' has a wrong offset!");
static_assert(offsetof(BRRuleset_RemoveTeam, bTellPlayers) == 0x000018, "Member 'BRRuleset_RemoveTeam::bTellPlayers' has a wrong offset!");

// Function Brickadia.BRRuleset.ResetRuleset
// 0x0008 (0x0008 - 0x0000)
struct BRRuleset_ResetRuleset final
{
public:
	class ABRPlayerState*                         TriggeredBy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_ResetRuleset) == 0x000008, "Wrong alignment on BRRuleset_ResetRuleset");
static_assert(sizeof(BRRuleset_ResetRuleset) == 0x000008, "Wrong size on BRRuleset_ResetRuleset");
static_assert(offsetof(BRRuleset_ResetRuleset, TriggeredBy) == 0x000000, "Member 'BRRuleset_ResetRuleset::TriggeredBy' has a wrong offset!");

// Function Brickadia.BRRuleset.SetBrickRespawnMode
// 0x0001 (0x0001 - 0x0000)
struct BRRuleset_SetBrickRespawnMode final
{
public:
	ERulesetBrickRespawnMode                      BrickRespawnModeIn;                                // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_SetBrickRespawnMode) == 0x000001, "Wrong alignment on BRRuleset_SetBrickRespawnMode");
static_assert(sizeof(BRRuleset_SetBrickRespawnMode) == 0x000001, "Wrong size on BRRuleset_SetBrickRespawnMode");
static_assert(offsetof(BRRuleset_SetBrickRespawnMode, BrickRespawnModeIn) == 0x000000, "Member 'BRRuleset_SetBrickRespawnMode::BrickRespawnModeIn' has a wrong offset!");

// Function Brickadia.BRRuleset.SetRelevantBricks
// 0x0001 (0x0001 - 0x0000)
struct BRRuleset_SetRelevantBricks final
{
public:
	ERulesetRelevantBricks                        BricksIncludedIn;                                  // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_SetRelevantBricks) == 0x000001, "Wrong alignment on BRRuleset_SetRelevantBricks");
static_assert(sizeof(BRRuleset_SetRelevantBricks) == 0x000001, "Wrong size on BRRuleset_SetRelevantBricks");
static_assert(offsetof(BRRuleset_SetRelevantBricks, BricksIncludedIn) == 0x000000, "Member 'BRRuleset_SetRelevantBricks::BricksIncludedIn' has a wrong offset!");

// Function Brickadia.BRRuleset.SetRulesetColor
// 0x0004 (0x0004 - 0x0000)
struct BRRuleset_SetRulesetColor final
{
public:
	struct FColor                                 ColorIn;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_SetRulesetColor) == 0x000004, "Wrong alignment on BRRuleset_SetRulesetColor");
static_assert(sizeof(BRRuleset_SetRulesetColor) == 0x000004, "Wrong size on BRRuleset_SetRulesetColor");
static_assert(offsetof(BRRuleset_SetRulesetColor, ColorIn) == 0x000000, "Member 'BRRuleset_SetRulesetColor::ColorIn' has a wrong offset!");

// Function Brickadia.BRRuleset.SetRulesetDescription
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_SetRulesetDescription final
{
public:
	class FString                                 RulesetDescriptionIn;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_SetRulesetDescription) == 0x000008, "Wrong alignment on BRRuleset_SetRulesetDescription");
static_assert(sizeof(BRRuleset_SetRulesetDescription) == 0x000010, "Wrong size on BRRuleset_SetRulesetDescription");
static_assert(offsetof(BRRuleset_SetRulesetDescription, RulesetDescriptionIn) == 0x000000, "Member 'BRRuleset_SetRulesetDescription::RulesetDescriptionIn' has a wrong offset!");

// Function Brickadia.BRRuleset.SetRulesetEntryPolicy
// 0x0001 (0x0001 - 0x0000)
struct BRRuleset_SetRulesetEntryPolicy final
{
public:
	ERulesetEntryPolicy                           EntryPolicyIn;                                     // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_SetRulesetEntryPolicy) == 0x000001, "Wrong alignment on BRRuleset_SetRulesetEntryPolicy");
static_assert(sizeof(BRRuleset_SetRulesetEntryPolicy) == 0x000001, "Wrong size on BRRuleset_SetRulesetEntryPolicy");
static_assert(offsetof(BRRuleset_SetRulesetEntryPolicy, EntryPolicyIn) == 0x000000, "Member 'BRRuleset_SetRulesetEntryPolicy::EntryPolicyIn' has a wrong offset!");

// Function Brickadia.BRRuleset.SetRulesetJoinPolicy
// 0x0001 (0x0001 - 0x0000)
struct BRRuleset_SetRulesetJoinPolicy final
{
public:
	ERulesetJoinPolicy                            JoinPolicyIn;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_SetRulesetJoinPolicy) == 0x000001, "Wrong alignment on BRRuleset_SetRulesetJoinPolicy");
static_assert(sizeof(BRRuleset_SetRulesetJoinPolicy) == 0x000001, "Wrong size on BRRuleset_SetRulesetJoinPolicy");
static_assert(offsetof(BRRuleset_SetRulesetJoinPolicy, JoinPolicyIn) == 0x000000, "Member 'BRRuleset_SetRulesetJoinPolicy::JoinPolicyIn' has a wrong offset!");

// Function Brickadia.BRRuleset.SetRulesetName
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_SetRulesetName final
{
public:
	class FString                                 RulesetNameIn;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_SetRulesetName) == 0x000008, "Wrong alignment on BRRuleset_SetRulesetName");
static_assert(sizeof(BRRuleset_SetRulesetName) == 0x000010, "Wrong size on BRRuleset_SetRulesetName");
static_assert(offsetof(BRRuleset_SetRulesetName, RulesetNameIn) == 0x000000, "Member 'BRRuleset_SetRulesetName::RulesetNameIn' has a wrong offset!");

// Function Brickadia.BRRuleset.SetRulesetType
// 0x0001 (0x0001 - 0x0000)
struct BRRuleset_SetRulesetType final
{
public:
	ERulesetType                                  RulesetTypeIn;                                     // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_SetRulesetType) == 0x000001, "Wrong alignment on BRRuleset_SetRulesetType");
static_assert(sizeof(BRRuleset_SetRulesetType) == 0x000001, "Wrong size on BRRuleset_SetRulesetType");
static_assert(offsetof(BRRuleset_SetRulesetType, RulesetTypeIn) == 0x000000, "Member 'BRRuleset_SetRulesetType::RulesetTypeIn' has a wrong offset!");

// Function Brickadia.BRRuleset.CanMemberBeDamagedBy
// 0x0030 (0x0030 - 0x0000)
struct BRRuleset_CanMemberBeDamagedBy final
{
public:
	TScriptInterface<class IBRRulesetMember>      Member;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_CanMemberBeDamagedBy) == 0x000008, "Wrong alignment on BRRuleset_CanMemberBeDamagedBy");
static_assert(sizeof(BRRuleset_CanMemberBeDamagedBy) == 0x000030, "Wrong size on BRRuleset_CanMemberBeDamagedBy");
static_assert(offsetof(BRRuleset_CanMemberBeDamagedBy, Member) == 0x000000, "Member 'BRRuleset_CanMemberBeDamagedBy::Member' has a wrong offset!");
static_assert(offsetof(BRRuleset_CanMemberBeDamagedBy, EventInstigator) == 0x000010, "Member 'BRRuleset_CanMemberBeDamagedBy::EventInstigator' has a wrong offset!");
static_assert(offsetof(BRRuleset_CanMemberBeDamagedBy, DamageCauser) == 0x000018, "Member 'BRRuleset_CanMemberBeDamagedBy::DamageCauser' has a wrong offset!");
static_assert(offsetof(BRRuleset_CanMemberBeDamagedBy, DamageTypeClass) == 0x000020, "Member 'BRRuleset_CanMemberBeDamagedBy::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(BRRuleset_CanMemberBeDamagedBy, ReturnValue) == 0x000028, "Member 'BRRuleset_CanMemberBeDamagedBy::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.FindTeamByName
// 0x0020 (0x0020 - 0x0000)
struct BRRuleset_FindTeamByName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRRulesetTeam*                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_FindTeamByName) == 0x000008, "Wrong alignment on BRRuleset_FindTeamByName");
static_assert(sizeof(BRRuleset_FindTeamByName) == 0x000020, "Wrong size on BRRuleset_FindTeamByName");
static_assert(offsetof(BRRuleset_FindTeamByName, Name_0) == 0x000000, "Member 'BRRuleset_FindTeamByName::Name_0' has a wrong offset!");
static_assert(offsetof(BRRuleset_FindTeamByName, TeamIndex) == 0x000010, "Member 'BRRuleset_FindTeamByName::TeamIndex' has a wrong offset!");
static_assert(offsetof(BRRuleset_FindTeamByName, ReturnValue) == 0x000018, "Member 'BRRuleset_FindTeamByName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetCanEnableGameplayPermission
// 0x000C (0x000C - 0x0000)
struct BRRuleset_GetCanEnableGameplayPermission final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_GetCanEnableGameplayPermission) == 0x000004, "Wrong alignment on BRRuleset_GetCanEnableGameplayPermission");
static_assert(sizeof(BRRuleset_GetCanEnableGameplayPermission) == 0x00000C, "Wrong size on BRRuleset_GetCanEnableGameplayPermission");
static_assert(offsetof(BRRuleset_GetCanEnableGameplayPermission, Permission) == 0x000000, "Member 'BRRuleset_GetCanEnableGameplayPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetCanEnableGameplayPermission, ReturnValue) == 0x000008, "Member 'BRRuleset_GetCanEnableGameplayPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetCurrentRound
// 0x0004 (0x0004 - 0x0000)
struct BRRuleset_GetCurrentRound final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetCurrentRound) == 0x000004, "Wrong alignment on BRRuleset_GetCurrentRound");
static_assert(sizeof(BRRuleset_GetCurrentRound) == 0x000004, "Wrong size on BRRuleset_GetCurrentRound");
static_assert(offsetof(BRRuleset_GetCurrentRound, ReturnValue) == 0x000000, "Member 'BRRuleset_GetCurrentRound::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetGameType
// 0x0008 (0x0008 - 0x0000)
struct BRRuleset_GetGameType final
{
public:
	class UBRRulesetGameType*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetGameType) == 0x000008, "Wrong alignment on BRRuleset_GetGameType");
static_assert(sizeof(BRRuleset_GetGameType) == 0x000008, "Wrong size on BRRuleset_GetGameType");
static_assert(offsetof(BRRuleset_GetGameType, ReturnValue) == 0x000000, "Member 'BRRuleset_GetGameType::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetGameTypeClass
// 0x0008 (0x0008 - 0x0000)
struct BRRuleset_GetGameTypeClass final
{
public:
	TSubclassOf<class UBRRulesetGameType>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetGameTypeClass) == 0x000008, "Wrong alignment on BRRuleset_GetGameTypeClass");
static_assert(sizeof(BRRuleset_GetGameTypeClass) == 0x000008, "Wrong size on BRRuleset_GetGameTypeClass");
static_assert(offsetof(BRRuleset_GetGameTypeClass, ReturnValue) == 0x000000, "Member 'BRRuleset_GetGameTypeClass::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetIsEmpty
// 0x0001 (0x0001 - 0x0000)
struct BRRuleset_GetIsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetIsEmpty) == 0x000001, "Wrong alignment on BRRuleset_GetIsEmpty");
static_assert(sizeof(BRRuleset_GetIsEmpty) == 0x000001, "Wrong size on BRRuleset_GetIsEmpty");
static_assert(offsetof(BRRuleset_GetIsEmpty, ReturnValue) == 0x000000, "Member 'BRRuleset_GetIsEmpty::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetMember
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_GetMember final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABRPlayerState*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetMember) == 0x000008, "Wrong alignment on BRRuleset_GetMember");
static_assert(sizeof(BRRuleset_GetMember) == 0x000010, "Wrong size on BRRuleset_GetMember");
static_assert(offsetof(BRRuleset_GetMember, Index_0) == 0x000000, "Member 'BRRuleset_GetMember::Index_0' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetMember, ReturnValue) == 0x000008, "Member 'BRRuleset_GetMember::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetMemberController
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_GetMemberController final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABRPlayerController*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetMemberController) == 0x000008, "Wrong alignment on BRRuleset_GetMemberController");
static_assert(sizeof(BRRuleset_GetMemberController) == 0x000010, "Wrong size on BRRuleset_GetMemberController");
static_assert(offsetof(BRRuleset_GetMemberController, Index_0) == 0x000000, "Member 'BRRuleset_GetMemberController::Index_0' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetMemberController, ReturnValue) == 0x000008, "Member 'BRRuleset_GetMemberController::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetMembersOrderedByLeaderboardValue
// 0x0018 (0x0018 - 0x0000)
struct BRRuleset_GetMembersOrderedByLeaderboardValue final
{
public:
	class FName                                   ValueName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABRPlayerState*>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetMembersOrderedByLeaderboardValue) == 0x000008, "Wrong alignment on BRRuleset_GetMembersOrderedByLeaderboardValue");
static_assert(sizeof(BRRuleset_GetMembersOrderedByLeaderboardValue) == 0x000018, "Wrong size on BRRuleset_GetMembersOrderedByLeaderboardValue");
static_assert(offsetof(BRRuleset_GetMembersOrderedByLeaderboardValue, ValueName) == 0x000000, "Member 'BRRuleset_GetMembersOrderedByLeaderboardValue::ValueName' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetMembersOrderedByLeaderboardValue, ReturnValue) == 0x000008, "Member 'BRRuleset_GetMembersOrderedByLeaderboardValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetNextRoundNumber
// 0x0004 (0x0004 - 0x0000)
struct BRRuleset_GetNextRoundNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetNextRoundNumber) == 0x000004, "Wrong alignment on BRRuleset_GetNextRoundNumber");
static_assert(sizeof(BRRuleset_GetNextRoundNumber) == 0x000004, "Wrong size on BRRuleset_GetNextRoundNumber");
static_assert(offsetof(BRRuleset_GetNextRoundNumber, ReturnValue) == 0x000000, "Member 'BRRuleset_GetNextRoundNumber::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetNumMembers
// 0x0004 (0x0004 - 0x0000)
struct BRRuleset_GetNumMembers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetNumMembers) == 0x000004, "Wrong alignment on BRRuleset_GetNumMembers");
static_assert(sizeof(BRRuleset_GetNumMembers) == 0x000004, "Wrong size on BRRuleset_GetNumMembers");
static_assert(offsetof(BRRuleset_GetNumMembers, ReturnValue) == 0x000000, "Member 'BRRuleset_GetNumMembers::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetNumTeams
// 0x0004 (0x0004 - 0x0000)
struct BRRuleset_GetNumTeams final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetNumTeams) == 0x000004, "Wrong alignment on BRRuleset_GetNumTeams");
static_assert(sizeof(BRRuleset_GetNumTeams) == 0x000004, "Wrong size on BRRuleset_GetNumTeams");
static_assert(offsetof(BRRuleset_GetNumTeams, ReturnValue) == 0x000000, "Member 'BRRuleset_GetNumTeams::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetPlayerCanJoinRuleset
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_GetPlayerCanJoinRuleset final
{
public:
	const class ABRPlayerState*                   State;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_GetPlayerCanJoinRuleset) == 0x000008, "Wrong alignment on BRRuleset_GetPlayerCanJoinRuleset");
static_assert(sizeof(BRRuleset_GetPlayerCanJoinRuleset) == 0x000010, "Wrong size on BRRuleset_GetPlayerCanJoinRuleset");
static_assert(offsetof(BRRuleset_GetPlayerCanJoinRuleset, State) == 0x000000, "Member 'BRRuleset_GetPlayerCanJoinRuleset::State' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetPlayerCanJoinRuleset, ReturnValue) == 0x000008, "Member 'BRRuleset_GetPlayerCanJoinRuleset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetPlayerCanLeaveRuleset
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_GetPlayerCanLeaveRuleset final
{
public:
	const class ABRPlayerState*                   State;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_GetPlayerCanLeaveRuleset) == 0x000008, "Wrong alignment on BRRuleset_GetPlayerCanLeaveRuleset");
static_assert(sizeof(BRRuleset_GetPlayerCanLeaveRuleset) == 0x000010, "Wrong size on BRRuleset_GetPlayerCanLeaveRuleset");
static_assert(offsetof(BRRuleset_GetPlayerCanLeaveRuleset, State) == 0x000000, "Member 'BRRuleset_GetPlayerCanLeaveRuleset::State' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetPlayerCanLeaveRuleset, ReturnValue) == 0x000008, "Member 'BRRuleset_GetPlayerCanLeaveRuleset::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetPlayerCanRestart
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_GetPlayerCanRestart final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_GetPlayerCanRestart) == 0x000008, "Wrong alignment on BRRuleset_GetPlayerCanRestart");
static_assert(sizeof(BRRuleset_GetPlayerCanRestart) == 0x000010, "Wrong size on BRRuleset_GetPlayerCanRestart");
static_assert(offsetof(BRRuleset_GetPlayerCanRestart, State) == 0x000000, "Member 'BRRuleset_GetPlayerCanRestart::State' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetPlayerCanRestart, ReturnValue) == 0x000008, "Member 'BRRuleset_GetPlayerCanRestart::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetPlayerCanSwitchTeam
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_GetPlayerCanSwitchTeam final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_GetPlayerCanSwitchTeam) == 0x000008, "Wrong alignment on BRRuleset_GetPlayerCanSwitchTeam");
static_assert(sizeof(BRRuleset_GetPlayerCanSwitchTeam) == 0x000010, "Wrong size on BRRuleset_GetPlayerCanSwitchTeam");
static_assert(offsetof(BRRuleset_GetPlayerCanSwitchTeam, State) == 0x000000, "Member 'BRRuleset_GetPlayerCanSwitchTeam::State' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetPlayerCanSwitchTeam, TeamId) == 0x000008, "Member 'BRRuleset_GetPlayerCanSwitchTeam::TeamId' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetPlayerCanSwitchTeam, ReturnValue) == 0x00000C, "Member 'BRRuleset_GetPlayerCanSwitchTeam::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetPlayerHasGameplayPermission
// 0x0018 (0x0018 - 0x0000)
struct BRRuleset_GetPlayerHasGameplayPermission final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Permission;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_GetPlayerHasGameplayPermission) == 0x000008, "Wrong alignment on BRRuleset_GetPlayerHasGameplayPermission");
static_assert(sizeof(BRRuleset_GetPlayerHasGameplayPermission) == 0x000018, "Wrong size on BRRuleset_GetPlayerHasGameplayPermission");
static_assert(offsetof(BRRuleset_GetPlayerHasGameplayPermission, State) == 0x000000, "Member 'BRRuleset_GetPlayerHasGameplayPermission::State' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetPlayerHasGameplayPermission, Permission) == 0x000008, "Member 'BRRuleset_GetPlayerHasGameplayPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetPlayerHasGameplayPermission, ReturnValue) == 0x000010, "Member 'BRRuleset_GetPlayerHasGameplayPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetPlayerNameColor
// 0x0018 (0x0018 - 0x0000)
struct BRRuleset_GetPlayerNameColor final
{
public:
	class ABRPlayerState*                         Member;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetPlayerNameColor) == 0x000008, "Wrong alignment on BRRuleset_GetPlayerNameColor");
static_assert(sizeof(BRRuleset_GetPlayerNameColor) == 0x000018, "Wrong size on BRRuleset_GetPlayerNameColor");
static_assert(offsetof(BRRuleset_GetPlayerNameColor, Member) == 0x000000, "Member 'BRRuleset_GetPlayerNameColor::Member' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetPlayerNameColor, ReturnValue) == 0x000008, "Member 'BRRuleset_GetPlayerNameColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetPlayerStartTransform
// 0x0070 (0x0070 - 0x0000)
struct BRRuleset_GetPlayerStartTransform final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetPlayerStartTransform) == 0x000010, "Wrong alignment on BRRuleset_GetPlayerStartTransform");
static_assert(sizeof(BRRuleset_GetPlayerStartTransform) == 0x000070, "Wrong size on BRRuleset_GetPlayerStartTransform");
static_assert(offsetof(BRRuleset_GetPlayerStartTransform, State) == 0x000000, "Member 'BRRuleset_GetPlayerStartTransform::State' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetPlayerStartTransform, ReturnValue) == 0x000010, "Member 'BRRuleset_GetPlayerStartTransform::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetRandomMember
// 0x0008 (0x0008 - 0x0000)
struct BRRuleset_GetRandomMember final
{
public:
	class ABRPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetRandomMember) == 0x000008, "Wrong alignment on BRRuleset_GetRandomMember");
static_assert(sizeof(BRRuleset_GetRandomMember) == 0x000008, "Wrong size on BRRuleset_GetRandomMember");
static_assert(offsetof(BRRuleset_GetRandomMember, ReturnValue) == 0x000000, "Member 'BRRuleset_GetRandomMember::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetSessionIsRunning
// 0x0001 (0x0001 - 0x0000)
struct BRRuleset_GetSessionIsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetSessionIsRunning) == 0x000001, "Wrong alignment on BRRuleset_GetSessionIsRunning");
static_assert(sizeof(BRRuleset_GetSessionIsRunning) == 0x000001, "Wrong size on BRRuleset_GetSessionIsRunning");
static_assert(offsetof(BRRuleset_GetSessionIsRunning, ReturnValue) == 0x000000, "Member 'BRRuleset_GetSessionIsRunning::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetSessionJustStarted
// 0x0001 (0x0001 - 0x0000)
struct BRRuleset_GetSessionJustStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetSessionJustStarted) == 0x000001, "Wrong alignment on BRRuleset_GetSessionJustStarted");
static_assert(sizeof(BRRuleset_GetSessionJustStarted) == 0x000001, "Wrong size on BRRuleset_GetSessionJustStarted");
static_assert(offsetof(BRRuleset_GetSessionJustStarted, ReturnValue) == 0x000000, "Member 'BRRuleset_GetSessionJustStarted::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetShouldEnableType
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_GetShouldEnableType final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_GetShouldEnableType) == 0x000008, "Wrong alignment on BRRuleset_GetShouldEnableType");
static_assert(sizeof(BRRuleset_GetShouldEnableType) == 0x000010, "Wrong size on BRRuleset_GetShouldEnableType");
static_assert(offsetof(BRRuleset_GetShouldEnableType, WorldContext) == 0x000000, "Member 'BRRuleset_GetShouldEnableType::WorldContext' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetShouldEnableType, ReturnValue) == 0x000008, "Member 'BRRuleset_GetShouldEnableType::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetShouldShowBricksIncludedOption
// 0x0018 (0x0018 - 0x0000)
struct BRRuleset_GetShouldShowBricksIncludedOption final
{
public:
	ERulesetRelevantBricks                        Op;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContext;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_GetShouldShowBricksIncludedOption) == 0x000008, "Wrong alignment on BRRuleset_GetShouldShowBricksIncludedOption");
static_assert(sizeof(BRRuleset_GetShouldShowBricksIncludedOption) == 0x000018, "Wrong size on BRRuleset_GetShouldShowBricksIncludedOption");
static_assert(offsetof(BRRuleset_GetShouldShowBricksIncludedOption, Op) == 0x000000, "Member 'BRRuleset_GetShouldShowBricksIncludedOption::Op' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetShouldShowBricksIncludedOption, WorldContext) == 0x000008, "Member 'BRRuleset_GetShouldShowBricksIncludedOption::WorldContext' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetShouldShowBricksIncludedOption, ReturnValue) == 0x000010, "Member 'BRRuleset_GetShouldShowBricksIncludedOption::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetShouldShowTypeOption
// 0x0018 (0x0018 - 0x0000)
struct BRRuleset_GetShouldShowTypeOption final
{
public:
	ERulesetType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContext;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_GetShouldShowTypeOption) == 0x000008, "Wrong alignment on BRRuleset_GetShouldShowTypeOption");
static_assert(sizeof(BRRuleset_GetShouldShowTypeOption) == 0x000018, "Wrong size on BRRuleset_GetShouldShowTypeOption");
static_assert(offsetof(BRRuleset_GetShouldShowTypeOption, Type) == 0x000000, "Member 'BRRuleset_GetShouldShowTypeOption::Type' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetShouldShowTypeOption, WorldContext) == 0x000008, "Member 'BRRuleset_GetShouldShowTypeOption::WorldContext' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetShouldShowTypeOption, ReturnValue) == 0x000010, "Member 'BRRuleset_GetShouldShowTypeOption::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetSpectatorTargets
// 0x0018 (0x0018 - 0x0000)
struct BRRuleset_GetSpectatorTargets final
{
public:
	class ABRPlayerState*                         Spectator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetSpectatorTargets) == 0x000008, "Wrong alignment on BRRuleset_GetSpectatorTargets");
static_assert(sizeof(BRRuleset_GetSpectatorTargets) == 0x000018, "Wrong size on BRRuleset_GetSpectatorTargets");
static_assert(offsetof(BRRuleset_GetSpectatorTargets, Spectator) == 0x000000, "Member 'BRRuleset_GetSpectatorTargets::Spectator' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetSpectatorTargets, ReturnValue) == 0x000008, "Member 'BRRuleset_GetSpectatorTargets::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetTeam
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_GetTeam final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRRulesetTeam*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetTeam) == 0x000008, "Wrong alignment on BRRuleset_GetTeam");
static_assert(sizeof(BRRuleset_GetTeam) == 0x000010, "Wrong size on BRRuleset_GetTeam");
static_assert(offsetof(BRRuleset_GetTeam, TeamId) == 0x000000, "Member 'BRRuleset_GetTeam::TeamId' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetTeam, ReturnValue) == 0x000008, "Member 'BRRuleset_GetTeam::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetTeamId
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_GetTeamId final
{
public:
	const class UBRRulesetTeam*                   Team;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_GetTeamId) == 0x000008, "Wrong alignment on BRRuleset_GetTeamId");
static_assert(sizeof(BRRuleset_GetTeamId) == 0x000010, "Wrong size on BRRuleset_GetTeamId");
static_assert(offsetof(BRRuleset_GetTeamId, Team) == 0x000000, "Member 'BRRuleset_GetTeamId::Team' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetTeamId, ReturnValue) == 0x000008, "Member 'BRRuleset_GetTeamId::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetTeamsOrderedByLeaderboardValue
// 0x0020 (0x0020 - 0x0000)
struct BRRuleset_GetTeamsOrderedByLeaderboardValue final
{
public:
	class FName                                   ValueName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeUnaffiliated;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBRRulesetTeam*>                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetTeamsOrderedByLeaderboardValue) == 0x000008, "Wrong alignment on BRRuleset_GetTeamsOrderedByLeaderboardValue");
static_assert(sizeof(BRRuleset_GetTeamsOrderedByLeaderboardValue) == 0x000020, "Wrong size on BRRuleset_GetTeamsOrderedByLeaderboardValue");
static_assert(offsetof(BRRuleset_GetTeamsOrderedByLeaderboardValue, ValueName) == 0x000000, "Member 'BRRuleset_GetTeamsOrderedByLeaderboardValue::ValueName' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetTeamsOrderedByLeaderboardValue, bIncludeUnaffiliated) == 0x000008, "Member 'BRRuleset_GetTeamsOrderedByLeaderboardValue::bIncludeUnaffiliated' has a wrong offset!");
static_assert(offsetof(BRRuleset_GetTeamsOrderedByLeaderboardValue, ReturnValue) == 0x000010, "Member 'BRRuleset_GetTeamsOrderedByLeaderboardValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.GetUnaffiliatedTeam
// 0x0008 (0x0008 - 0x0000)
struct BRRuleset_GetUnaffiliatedTeam final
{
public:
	class UBRRulesetTeam*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRuleset_GetUnaffiliatedTeam) == 0x000008, "Wrong alignment on BRRuleset_GetUnaffiliatedTeam");
static_assert(sizeof(BRRuleset_GetUnaffiliatedTeam) == 0x000008, "Wrong size on BRRuleset_GetUnaffiliatedTeam");
static_assert(offsetof(BRRuleset_GetUnaffiliatedTeam, ReturnValue) == 0x000000, "Member 'BRRuleset_GetUnaffiliatedTeam::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.IsBrickRelevant
// 0x000C (0x000C - 0x0000)
struct BRRuleset_IsBrickRelevant final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_IsBrickRelevant) == 0x000004, "Wrong alignment on BRRuleset_IsBrickRelevant");
static_assert(sizeof(BRRuleset_IsBrickRelevant) == 0x00000C, "Wrong size on BRRuleset_IsBrickRelevant");
static_assert(offsetof(BRRuleset_IsBrickRelevant, BrickHandle) == 0x000000, "Member 'BRRuleset_IsBrickRelevant::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRRuleset_IsBrickRelevant, ReturnValue) == 0x000008, "Member 'BRRuleset_IsBrickRelevant::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.IsBrickRelevantToMember
// 0x0018 (0x0018 - 0x0000)
struct BRRuleset_IsBrickRelevantToMember final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ABRPlayerState*                   Member;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_IsBrickRelevantToMember) == 0x000008, "Wrong alignment on BRRuleset_IsBrickRelevantToMember");
static_assert(sizeof(BRRuleset_IsBrickRelevantToMember) == 0x000018, "Wrong size on BRRuleset_IsBrickRelevantToMember");
static_assert(offsetof(BRRuleset_IsBrickRelevantToMember, BrickHandle) == 0x000000, "Member 'BRRuleset_IsBrickRelevantToMember::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRRuleset_IsBrickRelevantToMember, Member) == 0x000008, "Member 'BRRuleset_IsBrickRelevantToMember::Member' has a wrong offset!");
static_assert(offsetof(BRRuleset_IsBrickRelevantToMember, ReturnValue) == 0x000010, "Member 'BRRuleset_IsBrickRelevantToMember::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.IsEntityRelevant
// 0x0010 (0x0010 - 0x0000)
struct BRRuleset_IsEntityRelevant final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_IsEntityRelevant) == 0x000008, "Wrong alignment on BRRuleset_IsEntityRelevant");
static_assert(sizeof(BRRuleset_IsEntityRelevant) == 0x000010, "Wrong size on BRRuleset_IsEntityRelevant");
static_assert(offsetof(BRRuleset_IsEntityRelevant, ENTITY) == 0x000000, "Member 'BRRuleset_IsEntityRelevant::ENTITY' has a wrong offset!");
static_assert(offsetof(BRRuleset_IsEntityRelevant, ReturnValue) == 0x000008, "Member 'BRRuleset_IsEntityRelevant::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.IsEntityRelevantToMember
// 0x0018 (0x0018 - 0x0000)
struct BRRuleset_IsEntityRelevantToMember final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ABRPlayerState*                   Member;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_IsEntityRelevantToMember) == 0x000008, "Wrong alignment on BRRuleset_IsEntityRelevantToMember");
static_assert(sizeof(BRRuleset_IsEntityRelevantToMember) == 0x000018, "Wrong size on BRRuleset_IsEntityRelevantToMember");
static_assert(offsetof(BRRuleset_IsEntityRelevantToMember, ENTITY) == 0x000000, "Member 'BRRuleset_IsEntityRelevantToMember::ENTITY' has a wrong offset!");
static_assert(offsetof(BRRuleset_IsEntityRelevantToMember, Member) == 0x000008, "Member 'BRRuleset_IsEntityRelevantToMember::Member' has a wrong offset!");
static_assert(offsetof(BRRuleset_IsEntityRelevantToMember, ReturnValue) == 0x000010, "Member 'BRRuleset_IsEntityRelevantToMember::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRuleset.ShouldShowDeathNotification
// 0x0020 (0x0020 - 0x0000)
struct BRRuleset_ShouldShowDeathNotification final
{
public:
	class ABRPlayerController*                    ShowingController;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ABRPlayerState*                   VictimState;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         InstigatedByState;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRuleset_ShouldShowDeathNotification) == 0x000008, "Wrong alignment on BRRuleset_ShouldShowDeathNotification");
static_assert(sizeof(BRRuleset_ShouldShowDeathNotification) == 0x000020, "Wrong size on BRRuleset_ShouldShowDeathNotification");
static_assert(offsetof(BRRuleset_ShouldShowDeathNotification, ShowingController) == 0x000000, "Member 'BRRuleset_ShouldShowDeathNotification::ShowingController' has a wrong offset!");
static_assert(offsetof(BRRuleset_ShouldShowDeathNotification, VictimState) == 0x000008, "Member 'BRRuleset_ShouldShowDeathNotification::VictimState' has a wrong offset!");
static_assert(offsetof(BRRuleset_ShouldShowDeathNotification, InstigatedByState) == 0x000010, "Member 'BRRuleset_ShouldShowDeathNotification::InstigatedByState' has a wrong offset!");
static_assert(offsetof(BRRuleset_ShouldShowDeathNotification, ReturnValue) == 0x000018, "Member 'BRRuleset_ShouldShowDeathNotification::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetCombinedPropertyDescriptor
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_GetCombinedPropertyDescriptor final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetCombinedPropertyDescriptor) == 0x000008, "Wrong alignment on BRRulesetTeam_GetCombinedPropertyDescriptor");
static_assert(sizeof(BRRulesetTeam_GetCombinedPropertyDescriptor) == 0x000010, "Wrong size on BRRulesetTeam_GetCombinedPropertyDescriptor");
static_assert(offsetof(BRRulesetTeam_GetCombinedPropertyDescriptor, WorldContext) == 0x000000, "Member 'BRRulesetTeam_GetCombinedPropertyDescriptor::WorldContext' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetCombinedPropertyDescriptor, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_GetCombinedPropertyDescriptor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetFakeTeamWhenHidden
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_GetFakeTeamWhenHidden final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetFakeTeamWhenHidden) == 0x000008, "Wrong alignment on BRRulesetTeam_GetFakeTeamWhenHidden");
static_assert(sizeof(BRRulesetTeam_GetFakeTeamWhenHidden) == 0x000010, "Wrong size on BRRulesetTeam_GetFakeTeamWhenHidden");
static_assert(offsetof(BRRulesetTeam_GetFakeTeamWhenHidden, ReturnValue) == 0x000000, "Member 'BRRulesetTeam_GetFakeTeamWhenHidden::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.HandleDie
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_HandleDie final
{
public:
	TScriptInterface<class IBRRulesetMemberDestructable> DeadMember;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalDamage;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DeathType;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DeathCauser;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_HandleDie) == 0x000008, "Wrong alignment on BRRulesetTeam_HandleDie");
static_assert(sizeof(BRRulesetTeam_HandleDie) == 0x000030, "Wrong size on BRRulesetTeam_HandleDie");
static_assert(offsetof(BRRulesetTeam_HandleDie, DeadMember) == 0x000000, "Member 'BRRulesetTeam_HandleDie::DeadMember' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HandleDie, FinalDamage) == 0x000010, "Member 'BRRulesetTeam_HandleDie::FinalDamage' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HandleDie, DeathType) == 0x000018, "Member 'BRRulesetTeam_HandleDie::DeathType' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HandleDie, InstigatedBy) == 0x000020, "Member 'BRRulesetTeam_HandleDie::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HandleDie, DeathCauser) == 0x000028, "Member 'BRRulesetTeam_HandleDie::DeathCauser' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.HandleEditSettings
// 0x0020 (0x0020 - 0x0000)
struct BRRulesetTeam_HandleEditSettings final
{
public:
	class ABRPlayerState*                         MinigameEditor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTellPlayers;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_HandleEditSettings) == 0x000008, "Wrong alignment on BRRulesetTeam_HandleEditSettings");
static_assert(sizeof(BRRulesetTeam_HandleEditSettings) == 0x000020, "Wrong size on BRRulesetTeam_HandleEditSettings");
static_assert(offsetof(BRRulesetTeam_HandleEditSettings, MinigameEditor) == 0x000000, "Member 'BRRulesetTeam_HandleEditSettings::MinigameEditor' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HandleEditSettings, Settings) == 0x000008, "Member 'BRRulesetTeam_HandleEditSettings::Settings' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HandleEditSettings, bTellPlayers) == 0x000018, "Member 'BRRulesetTeam_HandleEditSettings::bTellPlayers' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.HandleJoinTeam
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_HandleJoinTeam final
{
public:
	class ABRPlayerState*                         Member;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMessage;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_HandleJoinTeam) == 0x000008, "Wrong alignment on BRRulesetTeam_HandleJoinTeam");
static_assert(sizeof(BRRulesetTeam_HandleJoinTeam) == 0x000010, "Wrong size on BRRulesetTeam_HandleJoinTeam");
static_assert(offsetof(BRRulesetTeam_HandleJoinTeam, Member) == 0x000000, "Member 'BRRulesetTeam_HandleJoinTeam::Member' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HandleJoinTeam, bMessage) == 0x000008, "Member 'BRRulesetTeam_HandleJoinTeam::bMessage' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.HandleLeaveTeam
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetTeam_HandleLeaveTeam final
{
public:
	class ABRPlayerState*                         Member;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_HandleLeaveTeam) == 0x000008, "Wrong alignment on BRRulesetTeam_HandleLeaveTeam");
static_assert(sizeof(BRRulesetTeam_HandleLeaveTeam) == 0x000008, "Wrong size on BRRulesetTeam_HandleLeaveTeam");
static_assert(offsetof(BRRulesetTeam_HandleLeaveTeam, Member) == 0x000000, "Member 'BRRulesetTeam_HandleLeaveTeam::Member' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.HandlePlayerChatMessage
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetTeam_HandlePlayerChatMessage final
{
public:
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatMessage;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_HandlePlayerChatMessage) == 0x000008, "Wrong alignment on BRRulesetTeam_HandlePlayerChatMessage");
static_assert(sizeof(BRRulesetTeam_HandlePlayerChatMessage) == 0x000018, "Wrong size on BRRulesetTeam_HandlePlayerChatMessage");
static_assert(offsetof(BRRulesetTeam_HandlePlayerChatMessage, TriggerPlayer) == 0x000000, "Member 'BRRulesetTeam_HandlePlayerChatMessage::TriggerPlayer' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HandlePlayerChatMessage, ChatMessage) == 0x000008, "Member 'BRRulesetTeam_HandlePlayerChatMessage::ChatMessage' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.HandlePlayerRestart
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetTeam_HandlePlayerRestart final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_HandlePlayerRestart) == 0x000008, "Wrong alignment on BRRulesetTeam_HandlePlayerRestart");
static_assert(sizeof(BRRulesetTeam_HandlePlayerRestart) == 0x000008, "Wrong size on BRRulesetTeam_HandlePlayerRestart");
static_assert(offsetof(BRRulesetTeam_HandlePlayerRestart, State) == 0x000000, "Member 'BRRulesetTeam_HandlePlayerRestart::State' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.HandlePlayerTeamChatMessage
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetTeam_HandlePlayerTeamChatMessage final
{
public:
	class ABRPlayerState*                         TriggerPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatMessage;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_HandlePlayerTeamChatMessage) == 0x000008, "Wrong alignment on BRRulesetTeam_HandlePlayerTeamChatMessage");
static_assert(sizeof(BRRulesetTeam_HandlePlayerTeamChatMessage) == 0x000018, "Wrong size on BRRulesetTeam_HandlePlayerTeamChatMessage");
static_assert(offsetof(BRRulesetTeam_HandlePlayerTeamChatMessage, TriggerPlayer) == 0x000000, "Member 'BRRulesetTeam_HandlePlayerTeamChatMessage::TriggerPlayer' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HandlePlayerTeamChatMessage, ChatMessage) == 0x000008, "Member 'BRRulesetTeam_HandlePlayerTeamChatMessage::ChatMessage' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.Inspector_SetPermissionState
// 0x000C (0x000C - 0x0000)
struct BRRulesetTeam_Inspector_SetPermissionState final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InState;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_Inspector_SetPermissionState) == 0x000004, "Wrong alignment on BRRulesetTeam_Inspector_SetPermissionState");
static_assert(sizeof(BRRulesetTeam_Inspector_SetPermissionState) == 0x00000C, "Wrong size on BRRulesetTeam_Inspector_SetPermissionState");
static_assert(offsetof(BRRulesetTeam_Inspector_SetPermissionState, Permission) == 0x000000, "Member 'BRRulesetTeam_Inspector_SetPermissionState::Permission' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_Inspector_SetPermissionState, InState) == 0x000008, "Member 'BRRulesetTeam_Inspector_SetPermissionState::InState' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.PushChatMessage
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_PushChatMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_PushChatMessage) == 0x000008, "Wrong alignment on BRRulesetTeam_PushChatMessage");
static_assert(sizeof(BRRulesetTeam_PushChatMessage) == 0x000010, "Wrong size on BRRulesetTeam_PushChatMessage");
static_assert(offsetof(BRRulesetTeam_PushChatMessage, Message) == 0x000000, "Member 'BRRulesetTeam_PushChatMessage::Message' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.PushStatusMessage
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetTeam_PushStatusMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlashIfUnchanged;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_PushStatusMessage) == 0x000008, "Wrong alignment on BRRulesetTeam_PushStatusMessage");
static_assert(sizeof(BRRulesetTeam_PushStatusMessage) == 0x000018, "Wrong size on BRRulesetTeam_PushStatusMessage");
static_assert(offsetof(BRRulesetTeam_PushStatusMessage, Message) == 0x000000, "Member 'BRRulesetTeam_PushStatusMessage::Message' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_PushStatusMessage, bFlashIfUnchanged) == 0x000010, "Member 'BRRulesetTeam_PushStatusMessage::bFlashIfUnchanged' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetAllowSpectatorFreeCamera
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetAllowSpectatorFreeCamera final
{
public:
	bool                                          bYes;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetAllowSpectatorFreeCamera) == 0x000001, "Wrong alignment on BRRulesetTeam_SetAllowSpectatorFreeCamera");
static_assert(sizeof(BRRulesetTeam_SetAllowSpectatorFreeCamera) == 0x000001, "Wrong size on BRRulesetTeam_SetAllowSpectatorFreeCamera");
static_assert(offsetof(BRRulesetTeam_SetAllowSpectatorFreeCamera, bYes) == 0x000000, "Member 'BRRulesetTeam_SetAllowSpectatorFreeCamera::bYes' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetBrickDamageMode
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetBrickDamageMode final
{
public:
	bool                                          bEnvironmentDamageModeIn;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetBrickDamageMode) == 0x000001, "Wrong alignment on BRRulesetTeam_SetBrickDamageMode");
static_assert(sizeof(BRRulesetTeam_SetBrickDamageMode) == 0x000001, "Wrong size on BRRulesetTeam_SetBrickDamageMode");
static_assert(offsetof(BRRulesetTeam_SetBrickDamageMode, bEnvironmentDamageModeIn) == 0x000000, "Member 'BRRulesetTeam_SetBrickDamageMode::bEnvironmentDamageModeIn' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetCanReachGoalPoints
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetCanReachGoalPoints final
{
public:
	bool                                          bYes;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetCanReachGoalPoints) == 0x000001, "Wrong alignment on BRRulesetTeam_SetCanReachGoalPoints");
static_assert(sizeof(BRRulesetTeam_SetCanReachGoalPoints) == 0x000001, "Wrong size on BRRulesetTeam_SetCanReachGoalPoints");
static_assert(offsetof(BRRulesetTeam_SetCanReachGoalPoints, bYes) == 0x000000, "Member 'BRRulesetTeam_SetCanReachGoalPoints::bYes' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetCanUseCheckPoints
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetCanUseCheckPoints final
{
public:
	bool                                          bYes;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetCanUseCheckPoints) == 0x000001, "Wrong alignment on BRRulesetTeam_SetCanUseCheckPoints");
static_assert(sizeof(BRRulesetTeam_SetCanUseCheckPoints) == 0x000001, "Wrong size on BRRulesetTeam_SetCanUseCheckPoints");
static_assert(offsetof(BRRulesetTeam_SetCanUseCheckPoints, bYes) == 0x000000, "Member 'BRRulesetTeam_SetCanUseCheckPoints::bYes' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetCharacterBaseRotationOverride
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetCharacterBaseRotationOverride final
{
public:
	ECharacterBaseRotationOverride                Override;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetCharacterBaseRotationOverride) == 0x000001, "Wrong alignment on BRRulesetTeam_SetCharacterBaseRotationOverride");
static_assert(sizeof(BRRulesetTeam_SetCharacterBaseRotationOverride) == 0x000001, "Wrong size on BRRulesetTeam_SetCharacterBaseRotationOverride");
static_assert(offsetof(BRRulesetTeam_SetCharacterBaseRotationOverride, Override) == 0x000000, "Member 'BRRulesetTeam_SetCharacterBaseRotationOverride::Override' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetChatRange
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetChatRange final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetChatRange) == 0x000004, "Wrong alignment on BRRulesetTeam_SetChatRange");
static_assert(sizeof(BRRulesetTeam_SetChatRange) == 0x000004, "Wrong size on BRRulesetTeam_SetChatRange");
static_assert(offsetof(BRRulesetTeam_SetChatRange, Range) == 0x000000, "Member 'BRRulesetTeam_SetChatRange::Range' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetControlModeOverride
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetControlModeOverride final
{
public:
	EControlModePolicy                            ControlModeOverrideIn;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetControlModeOverride) == 0x000001, "Wrong alignment on BRRulesetTeam_SetControlModeOverride");
static_assert(sizeof(BRRulesetTeam_SetControlModeOverride) == 0x000001, "Wrong size on BRRulesetTeam_SetControlModeOverride");
static_assert(offsetof(BRRulesetTeam_SetControlModeOverride, ControlModeOverrideIn) == 0x000000, "Member 'BRRulesetTeam_SetControlModeOverride::ControlModeOverrideIn' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetDeathNotifications
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetDeathNotifications final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetDeathNotifications) == 0x000001, "Wrong alignment on BRRulesetTeam_SetDeathNotifications");
static_assert(sizeof(BRRulesetTeam_SetDeathNotifications) == 0x000001, "Wrong size on BRRulesetTeam_SetDeathNotifications");
static_assert(offsetof(BRRulesetTeam_SetDeathNotifications, bEnabled) == 0x000000, "Member 'BRRulesetTeam_SetDeathNotifications::bEnabled' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetEnableCameraBlockedEffects
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetEnableCameraBlockedEffects final
{
public:
	bool                                          bYes;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetEnableCameraBlockedEffects) == 0x000001, "Wrong alignment on BRRulesetTeam_SetEnableCameraBlockedEffects");
static_assert(sizeof(BRRulesetTeam_SetEnableCameraBlockedEffects) == 0x000001, "Wrong size on BRRulesetTeam_SetEnableCameraBlockedEffects");
static_assert(offsetof(BRRulesetTeam_SetEnableCameraBlockedEffects, bYes) == 0x000000, "Member 'BRRulesetTeam_SetEnableCameraBlockedEffects::bYes' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetEnableTeamHealthRegeneration
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetEnableTeamHealthRegeneration final
{
public:
	bool                                          Regen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetEnableTeamHealthRegeneration) == 0x000001, "Wrong alignment on BRRulesetTeam_SetEnableTeamHealthRegeneration");
static_assert(sizeof(BRRulesetTeam_SetEnableTeamHealthRegeneration) == 0x000001, "Wrong size on BRRulesetTeam_SetEnableTeamHealthRegeneration");
static_assert(offsetof(BRRulesetTeam_SetEnableTeamHealthRegeneration, Regen) == 0x000000, "Member 'BRRulesetTeam_SetEnableTeamHealthRegeneration::Regen' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetEnemyNameDistanceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetEnemyNameDistanceMultiplier final
{
public:
	float                                         DistanceMultiplier;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetEnemyNameDistanceMultiplier) == 0x000004, "Wrong alignment on BRRulesetTeam_SetEnemyNameDistanceMultiplier");
static_assert(sizeof(BRRulesetTeam_SetEnemyNameDistanceMultiplier) == 0x000004, "Wrong size on BRRulesetTeam_SetEnemyNameDistanceMultiplier");
static_assert(offsetof(BRRulesetTeam_SetEnemyNameDistanceMultiplier, DistanceMultiplier) == 0x000000, "Member 'BRRulesetTeam_SetEnemyNameDistanceMultiplier::DistanceMultiplier' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetEnvironmentDamageMode
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetEnvironmentDamageMode final
{
public:
	bool                                          bEnvironmentDamageModeIn;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetEnvironmentDamageMode) == 0x000001, "Wrong alignment on BRRulesetTeam_SetEnvironmentDamageMode");
static_assert(sizeof(BRRulesetTeam_SetEnvironmentDamageMode) == 0x000001, "Wrong size on BRRulesetTeam_SetEnvironmentDamageMode");
static_assert(offsetof(BRRulesetTeam_SetEnvironmentDamageMode, bEnvironmentDamageModeIn) == 0x000000, "Member 'BRRulesetTeam_SetEnvironmentDamageMode::bEnvironmentDamageModeIn' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetFakeTeamWhenHidden
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_SetFakeTeamWhenHidden final
{
public:
	class FString                                 TeamName_0;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetFakeTeamWhenHidden) == 0x000008, "Wrong alignment on BRRulesetTeam_SetFakeTeamWhenHidden");
static_assert(sizeof(BRRulesetTeam_SetFakeTeamWhenHidden) == 0x000010, "Wrong size on BRRulesetTeam_SetFakeTeamWhenHidden");
static_assert(offsetof(BRRulesetTeam_SetFakeTeamWhenHidden, TeamName_0) == 0x000000, "Member 'BRRulesetTeam_SetFakeTeamWhenHidden::TeamName_0' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetForceSpectatorMode
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetForceSpectatorMode final
{
public:
	bool                                          bYes;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetForceSpectatorMode) == 0x000001, "Wrong alignment on BRRulesetTeam_SetForceSpectatorMode");
static_assert(sizeof(BRRulesetTeam_SetForceSpectatorMode) == 0x000001, "Wrong size on BRRulesetTeam_SetForceSpectatorMode");
static_assert(offsetof(BRRulesetTeam_SetForceSpectatorMode, bYes) == 0x000000, "Member 'BRRulesetTeam_SetForceSpectatorMode::bYes' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetFriendlyDamage
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetFriendlyDamage final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetFriendlyDamage) == 0x000001, "Wrong alignment on BRRulesetTeam_SetFriendlyDamage");
static_assert(sizeof(BRRulesetTeam_SetFriendlyDamage) == 0x000001, "Wrong size on BRRulesetTeam_SetFriendlyDamage");
static_assert(offsetof(BRRulesetTeam_SetFriendlyDamage, Enabled) == 0x000000, "Member 'BRRulesetTeam_SetFriendlyDamage::Enabled' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetGameplayPermission
// 0x000C (0x000C - 0x0000)
struct BRRulesetTeam_SetGameplayPermission final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRSetPermission                              State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_SetGameplayPermission) == 0x000004, "Wrong alignment on BRRulesetTeam_SetGameplayPermission");
static_assert(sizeof(BRRulesetTeam_SetGameplayPermission) == 0x00000C, "Wrong size on BRRulesetTeam_SetGameplayPermission");
static_assert(offsetof(BRRulesetTeam_SetGameplayPermission, Permission) == 0x000000, "Member 'BRRulesetTeam_SetGameplayPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_SetGameplayPermission, State) == 0x000008, "Member 'BRRulesetTeam_SetGameplayPermission::State' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetGameplayPermissions
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_SetGameplayPermissions final
{
public:
	TArray<struct FBRTeamGameplayPermissionData>  Permissions;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetGameplayPermissions) == 0x000008, "Wrong alignment on BRRulesetTeam_SetGameplayPermissions");
static_assert(sizeof(BRRulesetTeam_SetGameplayPermissions) == 0x000010, "Wrong size on BRRulesetTeam_SetGameplayPermissions");
static_assert(offsetof(BRRulesetTeam_SetGameplayPermissions, Permissions) == 0x000000, "Member 'BRRulesetTeam_SetGameplayPermissions::Permissions' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetKeepInventoryOnRespawn
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetKeepInventoryOnRespawn final
{
public:
	bool                                          bKeep;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetKeepInventoryOnRespawn) == 0x000001, "Wrong alignment on BRRulesetTeam_SetKeepInventoryOnRespawn");
static_assert(sizeof(BRRulesetTeam_SetKeepInventoryOnRespawn) == 0x000001, "Wrong size on BRRulesetTeam_SetKeepInventoryOnRespawn");
static_assert(offsetof(BRRulesetTeam_SetKeepInventoryOnRespawn, bKeep) == 0x000000, "Member 'BRRulesetTeam_SetKeepInventoryOnRespawn::bKeep' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetLimitChatRange
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetLimitChatRange final
{
public:
	bool                                          bLimited;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetLimitChatRange) == 0x000001, "Wrong alignment on BRRulesetTeam_SetLimitChatRange");
static_assert(sizeof(BRRulesetTeam_SetLimitChatRange) == 0x000001, "Wrong size on BRRulesetTeam_SetLimitChatRange");
static_assert(offsetof(BRRulesetTeam_SetLimitChatRange, bLimited) == 0x000000, "Member 'BRRulesetTeam_SetLimitChatRange::bLimited' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetMaxItemSlots
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetMaxItemSlots final
{
public:
	int32                                         MaxSlots;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetMaxItemSlots) == 0x000004, "Wrong alignment on BRRulesetTeam_SetMaxItemSlots");
static_assert(sizeof(BRRulesetTeam_SetMaxItemSlots) == 0x000004, "Wrong size on BRRulesetTeam_SetMaxItemSlots");
static_assert(offsetof(BRRulesetTeam_SetMaxItemSlots, MaxSlots) == 0x000000, "Member 'BRRulesetTeam_SetMaxItemSlots::MaxSlots' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetPhysicsDamageMode
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetPhysicsDamageMode final
{
public:
	bool                                          bPhysicsDamageModeIn;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetPhysicsDamageMode) == 0x000001, "Wrong alignment on BRRulesetTeam_SetPhysicsDamageMode");
static_assert(sizeof(BRRulesetTeam_SetPhysicsDamageMode) == 0x000001, "Wrong size on BRRulesetTeam_SetPhysicsDamageMode");
static_assert(offsetof(BRRulesetTeam_SetPhysicsDamageMode, bPhysicsDamageModeIn) == 0x000000, "Member 'BRRulesetTeam_SetPhysicsDamageMode::bPhysicsDamageModeIn' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetPlayerRespawnTime
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetPlayerRespawnTime final
{
public:
	float                                         NewPlayerRespawnTime;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetPlayerRespawnTime) == 0x000004, "Wrong alignment on BRRulesetTeam_SetPlayerRespawnTime");
static_assert(sizeof(BRRulesetTeam_SetPlayerRespawnTime) == 0x000004, "Wrong size on BRRulesetTeam_SetPlayerRespawnTime");
static_assert(offsetof(BRRulesetTeam_SetPlayerRespawnTime, NewPlayerRespawnTime) == 0x000000, "Member 'BRRulesetTeam_SetPlayerRespawnTime::NewPlayerRespawnTime' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetPlayersSpectatorsCanView
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetPlayersSpectatorsCanView final
{
public:
	ERulesetSpectatePolicy                        SpectatePolicy;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetPlayersSpectatorsCanView) == 0x000001, "Wrong alignment on BRRulesetTeam_SetPlayersSpectatorsCanView");
static_assert(sizeof(BRRulesetTeam_SetPlayersSpectatorsCanView) == 0x000001, "Wrong size on BRRulesetTeam_SetPlayersSpectatorsCanView");
static_assert(offsetof(BRRulesetTeam_SetPlayersSpectatorsCanView, SpectatePolicy) == 0x000000, "Member 'BRRulesetTeam_SetPlayersSpectatorsCanView::SpectatePolicy' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetRememberCheckPointBetweenJoins
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetRememberCheckPointBetweenJoins final
{
public:
	bool                                          bRemember;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetRememberCheckPointBetweenJoins) == 0x000001, "Wrong alignment on BRRulesetTeam_SetRememberCheckPointBetweenJoins");
static_assert(sizeof(BRRulesetTeam_SetRememberCheckPointBetweenJoins) == 0x000001, "Wrong size on BRRulesetTeam_SetRememberCheckPointBetweenJoins");
static_assert(offsetof(BRRulesetTeam_SetRememberCheckPointBetweenJoins, bRemember) == 0x000000, "Member 'BRRulesetTeam_SetRememberCheckPointBetweenJoins::bRemember' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetRespawnInvincibilityTime
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetRespawnInvincibilityTime final
{
public:
	float                                         TimeSeconds;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetRespawnInvincibilityTime) == 0x000004, "Wrong alignment on BRRulesetTeam_SetRespawnInvincibilityTime");
static_assert(sizeof(BRRulesetTeam_SetRespawnInvincibilityTime) == 0x000004, "Wrong size on BRRulesetTeam_SetRespawnInvincibilityTime");
static_assert(offsetof(BRRulesetTeam_SetRespawnInvincibilityTime, TimeSeconds) == 0x000000, "Member 'BRRulesetTeam_SetRespawnInvincibilityTime::TimeSeconds' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetRespawnSelfDestructPreventionTime
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetRespawnSelfDestructPreventionTime final
{
public:
	float                                         TimeSeconds;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetRespawnSelfDestructPreventionTime) == 0x000004, "Wrong alignment on BRRulesetTeam_SetRespawnSelfDestructPreventionTime");
static_assert(sizeof(BRRulesetTeam_SetRespawnSelfDestructPreventionTime) == 0x000004, "Wrong size on BRRulesetTeam_SetRespawnSelfDestructPreventionTime");
static_assert(offsetof(BRRulesetTeam_SetRespawnSelfDestructPreventionTime, TimeSeconds) == 0x000000, "Member 'BRRulesetTeam_SetRespawnSelfDestructPreventionTime::TimeSeconds' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetSelfDamageMode
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetSelfDamageMode final
{
public:
	bool                                          bSelfDamageModeIn;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetSelfDamageMode) == 0x000001, "Wrong alignment on BRRulesetTeam_SetSelfDamageMode");
static_assert(sizeof(BRRulesetTeam_SetSelfDamageMode) == 0x000001, "Wrong size on BRRulesetTeam_SetSelfDamageMode");
static_assert(offsetof(BRRulesetTeam_SetSelfDamageMode, bSelfDamageModeIn) == 0x000000, "Member 'BRRulesetTeam_SetSelfDamageMode::bSelfDamageModeIn' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetSpecialBrickUsePolicy
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetSpecialBrickUsePolicy final
{
public:
	ESpecialBrickUsePolicy                        SpecialBrickUsePolicyIn;                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetSpecialBrickUsePolicy) == 0x000001, "Wrong alignment on BRRulesetTeam_SetSpecialBrickUsePolicy");
static_assert(sizeof(BRRulesetTeam_SetSpecialBrickUsePolicy) == 0x000001, "Wrong size on BRRulesetTeam_SetSpecialBrickUsePolicy");
static_assert(offsetof(BRRulesetTeam_SetSpecialBrickUsePolicy, SpecialBrickUsePolicyIn) == 0x000000, "Member 'BRRulesetTeam_SetSpecialBrickUsePolicy::SpecialBrickUsePolicyIn' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetSpectatorChat
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetSpectatorChat final
{
public:
	ERulesetTeamSpectatorChat                     Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetSpectatorChat) == 0x000001, "Wrong alignment on BRRulesetTeam_SetSpectatorChat");
static_assert(sizeof(BRRulesetTeam_SetSpectatorChat) == 0x000001, "Wrong size on BRRulesetTeam_SetSpectatorChat");
static_assert(offsetof(BRRulesetTeam_SetSpectatorChat, Mode) == 0x000000, "Member 'BRRulesetTeam_SetSpectatorChat::Mode' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetStartingItem0
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_SetStartingItem0 final
{
public:
	struct FBRInventoryEntryPlan                  Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetStartingItem0) == 0x000008, "Wrong alignment on BRRulesetTeam_SetStartingItem0");
static_assert(sizeof(BRRulesetTeam_SetStartingItem0) == 0x000030, "Wrong size on BRRulesetTeam_SetStartingItem0");
static_assert(offsetof(BRRulesetTeam_SetStartingItem0, Item) == 0x000000, "Member 'BRRulesetTeam_SetStartingItem0::Item' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetStartingItem1
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_SetStartingItem1 final
{
public:
	struct FBRInventoryEntryPlan                  Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetStartingItem1) == 0x000008, "Wrong alignment on BRRulesetTeam_SetStartingItem1");
static_assert(sizeof(BRRulesetTeam_SetStartingItem1) == 0x000030, "Wrong size on BRRulesetTeam_SetStartingItem1");
static_assert(offsetof(BRRulesetTeam_SetStartingItem1, Item) == 0x000000, "Member 'BRRulesetTeam_SetStartingItem1::Item' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetStartingItem2
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_SetStartingItem2 final
{
public:
	struct FBRInventoryEntryPlan                  Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetStartingItem2) == 0x000008, "Wrong alignment on BRRulesetTeam_SetStartingItem2");
static_assert(sizeof(BRRulesetTeam_SetStartingItem2) == 0x000030, "Wrong size on BRRulesetTeam_SetStartingItem2");
static_assert(offsetof(BRRulesetTeam_SetStartingItem2, Item) == 0x000000, "Member 'BRRulesetTeam_SetStartingItem2::Item' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetStartingItem3
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_SetStartingItem3 final
{
public:
	struct FBRInventoryEntryPlan                  Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetStartingItem3) == 0x000008, "Wrong alignment on BRRulesetTeam_SetStartingItem3");
static_assert(sizeof(BRRulesetTeam_SetStartingItem3) == 0x000030, "Wrong size on BRRulesetTeam_SetStartingItem3");
static_assert(offsetof(BRRulesetTeam_SetStartingItem3, Item) == 0x000000, "Member 'BRRulesetTeam_SetStartingItem3::Item' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetStartingItem4
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_SetStartingItem4 final
{
public:
	struct FBRInventoryEntryPlan                  Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetStartingItem4) == 0x000008, "Wrong alignment on BRRulesetTeam_SetStartingItem4");
static_assert(sizeof(BRRulesetTeam_SetStartingItem4) == 0x000030, "Wrong size on BRRulesetTeam_SetStartingItem4");
static_assert(offsetof(BRRulesetTeam_SetStartingItem4, Item) == 0x000000, "Member 'BRRulesetTeam_SetStartingItem4::Item' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetStartingItem5
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_SetStartingItem5 final
{
public:
	struct FBRInventoryEntryPlan                  Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetStartingItem5) == 0x000008, "Wrong alignment on BRRulesetTeam_SetStartingItem5");
static_assert(sizeof(BRRulesetTeam_SetStartingItem5) == 0x000030, "Wrong size on BRRulesetTeam_SetStartingItem5");
static_assert(offsetof(BRRulesetTeam_SetStartingItem5, Item) == 0x000000, "Member 'BRRulesetTeam_SetStartingItem5::Item' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetStartingItem6
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_SetStartingItem6 final
{
public:
	struct FBRInventoryEntryPlan                  Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetStartingItem6) == 0x000008, "Wrong alignment on BRRulesetTeam_SetStartingItem6");
static_assert(sizeof(BRRulesetTeam_SetStartingItem6) == 0x000030, "Wrong size on BRRulesetTeam_SetStartingItem6");
static_assert(offsetof(BRRulesetTeam_SetStartingItem6, Item) == 0x000000, "Member 'BRRulesetTeam_SetStartingItem6::Item' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetStartingItem7
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_SetStartingItem7 final
{
public:
	struct FBRInventoryEntryPlan                  Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetStartingItem7) == 0x000008, "Wrong alignment on BRRulesetTeam_SetStartingItem7");
static_assert(sizeof(BRRulesetTeam_SetStartingItem7) == 0x000030, "Wrong size on BRRulesetTeam_SetStartingItem7");
static_assert(offsetof(BRRulesetTeam_SetStartingItem7, Item) == 0x000000, "Member 'BRRulesetTeam_SetStartingItem7::Item' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetStartingItem8
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_SetStartingItem8 final
{
public:
	struct FBRInventoryEntryPlan                  Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetStartingItem8) == 0x000008, "Wrong alignment on BRRulesetTeam_SetStartingItem8");
static_assert(sizeof(BRRulesetTeam_SetStartingItem8) == 0x000030, "Wrong size on BRRulesetTeam_SetStartingItem8");
static_assert(offsetof(BRRulesetTeam_SetStartingItem8, Item) == 0x000000, "Member 'BRRulesetTeam_SetStartingItem8::Item' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetStartingItem9
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_SetStartingItem9 final
{
public:
	struct FBRInventoryEntryPlan                  Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetStartingItem9) == 0x000008, "Wrong alignment on BRRulesetTeam_SetStartingItem9");
static_assert(sizeof(BRRulesetTeam_SetStartingItem9) == 0x000030, "Wrong size on BRRulesetTeam_SetStartingItem9");
static_assert(offsetof(BRRulesetTeam_SetStartingItem9, Item) == 0x000000, "Member 'BRRulesetTeam_SetStartingItem9::Item' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamCanStack
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetTeamCanStack final
{
public:
	bool                                          Stack;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamCanStack) == 0x000001, "Wrong alignment on BRRulesetTeam_SetTeamCanStack");
static_assert(sizeof(BRRulesetTeam_SetTeamCanStack) == 0x000001, "Wrong size on BRRulesetTeam_SetTeamCanStack");
static_assert(offsetof(BRRulesetTeam_SetTeamCanStack, Stack) == 0x000000, "Member 'BRRulesetTeam_SetTeamCanStack::Stack' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamCollision
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetTeamCollision final
{
public:
	bool                                          Collide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamCollision) == 0x000001, "Wrong alignment on BRRulesetTeam_SetTeamCollision");
static_assert(sizeof(BRRulesetTeam_SetTeamCollision) == 0x000001, "Wrong size on BRRulesetTeam_SetTeamCollision");
static_assert(offsetof(BRRulesetTeam_SetTeamCollision, Collide) == 0x000000, "Member 'BRRulesetTeam_SetTeamCollision::Collide' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamColor
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetTeamColor final
{
public:
	struct FColor                                 NewTeamColor;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamColor) == 0x000004, "Wrong alignment on BRRulesetTeam_SetTeamColor");
static_assert(sizeof(BRRulesetTeam_SetTeamColor) == 0x000004, "Wrong size on BRRulesetTeam_SetTeamColor");
static_assert(offsetof(BRRulesetTeam_SetTeamColor, NewTeamColor) == 0x000000, "Member 'BRRulesetTeam_SetTeamColor::NewTeamColor' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamHealthMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetTeamHealthMultiplier final
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamHealthMultiplier) == 0x000004, "Wrong alignment on BRRulesetTeam_SetTeamHealthMultiplier");
static_assert(sizeof(BRRulesetTeam_SetTeamHealthMultiplier) == 0x000004, "Wrong size on BRRulesetTeam_SetTeamHealthMultiplier");
static_assert(offsetof(BRRulesetTeam_SetTeamHealthMultiplier, Health) == 0x000000, "Member 'BRRulesetTeam_SetTeamHealthMultiplier::Health' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamHealthRegenPerSecond
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetTeamHealthRegenPerSecond final
{
public:
	float                                         PerSecondRegen;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamHealthRegenPerSecond) == 0x000004, "Wrong alignment on BRRulesetTeam_SetTeamHealthRegenPerSecond");
static_assert(sizeof(BRRulesetTeam_SetTeamHealthRegenPerSecond) == 0x000004, "Wrong size on BRRulesetTeam_SetTeamHealthRegenPerSecond");
static_assert(offsetof(BRRulesetTeam_SetTeamHealthRegenPerSecond, PerSecondRegen) == 0x000000, "Member 'BRRulesetTeam_SetTeamHealthRegenPerSecond::PerSecondRegen' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamHealthRegenStartTime
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetTeamHealthRegenStartTime final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamHealthRegenStartTime) == 0x000004, "Wrong alignment on BRRulesetTeam_SetTeamHealthRegenStartTime");
static_assert(sizeof(BRRulesetTeam_SetTeamHealthRegenStartTime) == 0x000004, "Wrong size on BRRulesetTeam_SetTeamHealthRegenStartTime");
static_assert(offsetof(BRRulesetTeam_SetTeamHealthRegenStartTime, StartTime) == 0x000000, "Member 'BRRulesetTeam_SetTeamHealthRegenStartTime::StartTime' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamJumpHeightMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetTeamJumpHeightMultiplier final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamJumpHeightMultiplier) == 0x000004, "Wrong alignment on BRRulesetTeam_SetTeamJumpHeightMultiplier");
static_assert(sizeof(BRRulesetTeam_SetTeamJumpHeightMultiplier) == 0x000004, "Wrong size on BRRulesetTeam_SetTeamJumpHeightMultiplier");
static_assert(offsetof(BRRulesetTeam_SetTeamJumpHeightMultiplier, Height) == 0x000000, "Member 'BRRulesetTeam_SetTeamJumpHeightMultiplier::Height' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamName
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_SetTeamName final
{
public:
	class FString                                 NewTeamName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamName) == 0x000008, "Wrong alignment on BRRulesetTeam_SetTeamName");
static_assert(sizeof(BRRulesetTeam_SetTeamName) == 0x000010, "Wrong size on BRRulesetTeam_SetTeamName");
static_assert(offsetof(BRRulesetTeam_SetTeamName, NewTeamName) == 0x000000, "Member 'BRRulesetTeam_SetTeamName::NewTeamName' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamNameDistance
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetTeamNameDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamNameDistance) == 0x000004, "Wrong alignment on BRRulesetTeam_SetTeamNameDistance");
static_assert(sizeof(BRRulesetTeam_SetTeamNameDistance) == 0x000004, "Wrong size on BRRulesetTeam_SetTeamNameDistance");
static_assert(offsetof(BRRulesetTeam_SetTeamNameDistance, Distance) == 0x000000, "Member 'BRRulesetTeam_SetTeamNameDistance::Distance' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamSpawnMode
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetTeamSpawnMode final
{
public:
	ETeamSpawnMode                                NewTeamSpawnMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamSpawnMode) == 0x000001, "Wrong alignment on BRRulesetTeam_SetTeamSpawnMode");
static_assert(sizeof(BRRulesetTeam_SetTeamSpawnMode) == 0x000001, "Wrong size on BRRulesetTeam_SetTeamSpawnMode");
static_assert(offsetof(BRRulesetTeam_SetTeamSpawnMode, NewTeamSpawnMode) == 0x000000, "Member 'BRRulesetTeam_SetTeamSpawnMode::NewTeamSpawnMode' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetTeamSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetTeamSpeedMultiplier final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetTeamSpeedMultiplier) == 0x000004, "Wrong alignment on BRRulesetTeam_SetTeamSpeedMultiplier");
static_assert(sizeof(BRRulesetTeam_SetTeamSpeedMultiplier) == 0x000004, "Wrong size on BRRulesetTeam_SetTeamSpeedMultiplier");
static_assert(offsetof(BRRulesetTeam_SetTeamSpeedMultiplier, Speed) == 0x000000, "Member 'BRRulesetTeam_SetTeamSpeedMultiplier::Speed' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetVisibility final
{
public:
	ERulesetTeamVisibility                        Visibility_0;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetVisibility) == 0x000001, "Wrong alignment on BRRulesetTeam_SetVisibility");
static_assert(sizeof(BRRulesetTeam_SetVisibility) == 0x000001, "Wrong size on BRRulesetTeam_SetVisibility");
static_assert(offsetof(BRRulesetTeam_SetVisibility, Visibility_0) == 0x000000, "Member 'BRRulesetTeam_SetVisibility::Visibility_0' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetWaterDamagePerSecond
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_SetWaterDamagePerSecond final
{
public:
	float                                         WaterDamagePerSecondIn;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetWaterDamagePerSecond) == 0x000004, "Wrong alignment on BRRulesetTeam_SetWaterDamagePerSecond");
static_assert(sizeof(BRRulesetTeam_SetWaterDamagePerSecond) == 0x000004, "Wrong size on BRRulesetTeam_SetWaterDamagePerSecond");
static_assert(offsetof(BRRulesetTeam_SetWaterDamagePerSecond, WaterDamagePerSecondIn) == 0x000000, "Member 'BRRulesetTeam_SetWaterDamagePerSecond::WaterDamagePerSecondIn' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.SetWeaponDamageMode
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_SetWeaponDamageMode final
{
public:
	bool                                          bWeaponDamageModeIn;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_SetWeaponDamageMode) == 0x000001, "Wrong alignment on BRRulesetTeam_SetWeaponDamageMode");
static_assert(sizeof(BRRulesetTeam_SetWeaponDamageMode) == 0x000001, "Wrong size on BRRulesetTeam_SetWeaponDamageMode");
static_assert(offsetof(BRRulesetTeam_SetWeaponDamageMode, bWeaponDamageModeIn) == 0x000000, "Member 'BRRulesetTeam_SetWeaponDamageMode::bWeaponDamageModeIn' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.CanBeDamagedBy
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_CanBeDamagedBy final
{
public:
	class UBRRulesetTeam*                         TeamB;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_CanBeDamagedBy) == 0x000008, "Wrong alignment on BRRulesetTeam_CanBeDamagedBy");
static_assert(sizeof(BRRulesetTeam_CanBeDamagedBy) == 0x000010, "Wrong size on BRRulesetTeam_CanBeDamagedBy");
static_assert(offsetof(BRRulesetTeam_CanBeDamagedBy, TeamB) == 0x000000, "Member 'BRRulesetTeam_CanBeDamagedBy::TeamB' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_CanBeDamagedBy, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_CanBeDamagedBy::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.CanMemberBeDamagedBy
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetTeam_CanMemberBeDamagedBy final
{
public:
	TScriptInterface<class IBRRulesetMember>      Member;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_CanMemberBeDamagedBy) == 0x000008, "Wrong alignment on BRRulesetTeam_CanMemberBeDamagedBy");
static_assert(sizeof(BRRulesetTeam_CanMemberBeDamagedBy) == 0x000030, "Wrong size on BRRulesetTeam_CanMemberBeDamagedBy");
static_assert(offsetof(BRRulesetTeam_CanMemberBeDamagedBy, Member) == 0x000000, "Member 'BRRulesetTeam_CanMemberBeDamagedBy::Member' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_CanMemberBeDamagedBy, EventInstigator) == 0x000010, "Member 'BRRulesetTeam_CanMemberBeDamagedBy::EventInstigator' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_CanMemberBeDamagedBy, DamageCauser) == 0x000018, "Member 'BRRulesetTeam_CanMemberBeDamagedBy::DamageCauser' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_CanMemberBeDamagedBy, DamageTypeClass) == 0x000020, "Member 'BRRulesetTeam_CanMemberBeDamagedBy::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_CanMemberBeDamagedBy, ReturnValue) == 0x000028, "Member 'BRRulesetTeam_CanMemberBeDamagedBy::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.CanRenameTeam
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_CanRenameTeam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_CanRenameTeam) == 0x000001, "Wrong alignment on BRRulesetTeam_CanRenameTeam");
static_assert(sizeof(BRRulesetTeam_CanRenameTeam) == 0x000001, "Wrong size on BRRulesetTeam_CanRenameTeam");
static_assert(offsetof(BRRulesetTeam_CanRenameTeam, ReturnValue) == 0x000000, "Member 'BRRulesetTeam_CanRenameTeam::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetActualTeamColor
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_GetActualTeamColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetActualTeamColor) == 0x000004, "Wrong alignment on BRRulesetTeam_GetActualTeamColor");
static_assert(sizeof(BRRulesetTeam_GetActualTeamColor) == 0x000004, "Wrong size on BRRulesetTeam_GetActualTeamColor");
static_assert(offsetof(BRRulesetTeam_GetActualTeamColor, ReturnValue) == 0x000000, "Member 'BRRulesetTeam_GetActualTeamColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetCombinedLeaderboardValue
// 0x000C (0x000C - 0x0000)
struct BRRulesetTeam_GetCombinedLeaderboardValue final
{
public:
	class FName                                   ValueName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetCombinedLeaderboardValue) == 0x000004, "Wrong alignment on BRRulesetTeam_GetCombinedLeaderboardValue");
static_assert(sizeof(BRRulesetTeam_GetCombinedLeaderboardValue) == 0x00000C, "Wrong size on BRRulesetTeam_GetCombinedLeaderboardValue");
static_assert(offsetof(BRRulesetTeam_GetCombinedLeaderboardValue, ValueName) == 0x000000, "Member 'BRRulesetTeam_GetCombinedLeaderboardValue::ValueName' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetCombinedLeaderboardValue, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_GetCombinedLeaderboardValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetCombinedLeaderboardValueByIndex
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetTeam_GetCombinedLeaderboardValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetCombinedLeaderboardValueByIndex) == 0x000004, "Wrong alignment on BRRulesetTeam_GetCombinedLeaderboardValueByIndex");
static_assert(sizeof(BRRulesetTeam_GetCombinedLeaderboardValueByIndex) == 0x000008, "Wrong size on BRRulesetTeam_GetCombinedLeaderboardValueByIndex");
static_assert(offsetof(BRRulesetTeam_GetCombinedLeaderboardValueByIndex, Index_0) == 0x000000, "Member 'BRRulesetTeam_GetCombinedLeaderboardValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetCombinedLeaderboardValueByIndex, ReturnValue) == 0x000004, "Member 'BRRulesetTeam_GetCombinedLeaderboardValueByIndex::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetLimitChatRange
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_GetLimitChatRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetLimitChatRange) == 0x000001, "Wrong alignment on BRRulesetTeam_GetLimitChatRange");
static_assert(sizeof(BRRulesetTeam_GetLimitChatRange) == 0x000001, "Wrong size on BRRulesetTeam_GetLimitChatRange");
static_assert(offsetof(BRRulesetTeam_GetLimitChatRange, ReturnValue) == 0x000000, "Member 'BRRulesetTeam_GetLimitChatRange::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetMember
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_GetMember final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABRPlayerState*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetMember) == 0x000008, "Wrong alignment on BRRulesetTeam_GetMember");
static_assert(sizeof(BRRulesetTeam_GetMember) == 0x000010, "Wrong size on BRRulesetTeam_GetMember");
static_assert(offsetof(BRRulesetTeam_GetMember, Index_0) == 0x000000, "Member 'BRRulesetTeam_GetMember::Index_0' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetMember, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_GetMember::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetMemberController
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_GetMemberController final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABRPlayerController*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetMemberController) == 0x000008, "Wrong alignment on BRRulesetTeam_GetMemberController");
static_assert(sizeof(BRRulesetTeam_GetMemberController) == 0x000010, "Wrong size on BRRulesetTeam_GetMemberController");
static_assert(offsetof(BRRulesetTeam_GetMemberController, Index_0) == 0x000000, "Member 'BRRulesetTeam_GetMemberController::Index_0' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetMemberController, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_GetMemberController::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetMembers
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_GetMembers final
{
public:
	TArray<class ABRPlayerState*>                 MembersOut;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetMembers) == 0x000008, "Wrong alignment on BRRulesetTeam_GetMembers");
static_assert(sizeof(BRRulesetTeam_GetMembers) == 0x000010, "Wrong size on BRRulesetTeam_GetMembers");
static_assert(offsetof(BRRulesetTeam_GetMembers, MembersOut) == 0x000000, "Member 'BRRulesetTeam_GetMembers::MembersOut' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetMembersFor
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetTeam_GetMembersFor final
{
public:
	const class ABRPlayerState*                   Viewer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABRPlayerState*>                 MembersOut;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetMembersFor) == 0x000008, "Wrong alignment on BRRulesetTeam_GetMembersFor");
static_assert(sizeof(BRRulesetTeam_GetMembersFor) == 0x000018, "Wrong size on BRRulesetTeam_GetMembersFor");
static_assert(offsetof(BRRulesetTeam_GetMembersFor, Viewer) == 0x000000, "Member 'BRRulesetTeam_GetMembersFor::Viewer' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetMembersFor, MembersOut) == 0x000008, "Member 'BRRulesetTeam_GetMembersFor::MembersOut' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetMembersOrderedByLeaderboardValue
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetTeam_GetMembersOrderedByLeaderboardValue final
{
public:
	class FName                                   ValueName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABRPlayerState*>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetMembersOrderedByLeaderboardValue) == 0x000008, "Wrong alignment on BRRulesetTeam_GetMembersOrderedByLeaderboardValue");
static_assert(sizeof(BRRulesetTeam_GetMembersOrderedByLeaderboardValue) == 0x000018, "Wrong size on BRRulesetTeam_GetMembersOrderedByLeaderboardValue");
static_assert(offsetof(BRRulesetTeam_GetMembersOrderedByLeaderboardValue, ValueName) == 0x000000, "Member 'BRRulesetTeam_GetMembersOrderedByLeaderboardValue::ValueName' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetMembersOrderedByLeaderboardValue, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_GetMembersOrderedByLeaderboardValue::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetNumMembers
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_GetNumMembers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetNumMembers) == 0x000004, "Wrong alignment on BRRulesetTeam_GetNumMembers");
static_assert(sizeof(BRRulesetTeam_GetNumMembers) == 0x000004, "Wrong size on BRRulesetTeam_GetNumMembers");
static_assert(offsetof(BRRulesetTeam_GetNumMembers, ReturnValue) == 0x000000, "Member 'BRRulesetTeam_GetNumMembers::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetPlayerCanJoin
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_GetPlayerCanJoin final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_GetPlayerCanJoin) == 0x000008, "Wrong alignment on BRRulesetTeam_GetPlayerCanJoin");
static_assert(sizeof(BRRulesetTeam_GetPlayerCanJoin) == 0x000010, "Wrong size on BRRulesetTeam_GetPlayerCanJoin");
static_assert(offsetof(BRRulesetTeam_GetPlayerCanJoin, State) == 0x000000, "Member 'BRRulesetTeam_GetPlayerCanJoin::State' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetPlayerCanJoin, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_GetPlayerCanJoin::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetPlayerCanLeave
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_GetPlayerCanLeave final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_GetPlayerCanLeave) == 0x000008, "Wrong alignment on BRRulesetTeam_GetPlayerCanLeave");
static_assert(sizeof(BRRulesetTeam_GetPlayerCanLeave) == 0x000010, "Wrong size on BRRulesetTeam_GetPlayerCanLeave");
static_assert(offsetof(BRRulesetTeam_GetPlayerCanLeave, State) == 0x000000, "Member 'BRRulesetTeam_GetPlayerCanLeave::State' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetPlayerCanLeave, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_GetPlayerCanLeave::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetPlayerCanRestart
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_GetPlayerCanRestart final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_GetPlayerCanRestart) == 0x000008, "Wrong alignment on BRRulesetTeam_GetPlayerCanRestart");
static_assert(sizeof(BRRulesetTeam_GetPlayerCanRestart) == 0x000010, "Wrong size on BRRulesetTeam_GetPlayerCanRestart");
static_assert(offsetof(BRRulesetTeam_GetPlayerCanRestart, State) == 0x000000, "Member 'BRRulesetTeam_GetPlayerCanRestart::State' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetPlayerCanRestart, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_GetPlayerCanRestart::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetPlayerHasGameplayPermission
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetTeam_GetPlayerHasGameplayPermission final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Permission;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_GetPlayerHasGameplayPermission) == 0x000008, "Wrong alignment on BRRulesetTeam_GetPlayerHasGameplayPermission");
static_assert(sizeof(BRRulesetTeam_GetPlayerHasGameplayPermission) == 0x000018, "Wrong size on BRRulesetTeam_GetPlayerHasGameplayPermission");
static_assert(offsetof(BRRulesetTeam_GetPlayerHasGameplayPermission, State) == 0x000000, "Member 'BRRulesetTeam_GetPlayerHasGameplayPermission::State' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetPlayerHasGameplayPermission, Permission) == 0x000008, "Member 'BRRulesetTeam_GetPlayerHasGameplayPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetPlayerHasGameplayPermission, ReturnValue) == 0x000010, "Member 'BRRulesetTeam_GetPlayerHasGameplayPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetPlayerNameColor
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetTeam_GetPlayerNameColor final
{
public:
	class ABRPlayerState*                         Member;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetPlayerNameColor) == 0x000008, "Wrong alignment on BRRulesetTeam_GetPlayerNameColor");
static_assert(sizeof(BRRulesetTeam_GetPlayerNameColor) == 0x000018, "Wrong size on BRRulesetTeam_GetPlayerNameColor");
static_assert(offsetof(BRRulesetTeam_GetPlayerNameColor, Member) == 0x000000, "Member 'BRRulesetTeam_GetPlayerNameColor::Member' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetPlayerNameColor, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_GetPlayerNameColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetPlayerStartTransform
// 0x0070 (0x0070 - 0x0000)
struct BRRulesetTeam_GetPlayerStartTransform final
{
public:
	class ABRPlayerState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetPlayerStartTransform) == 0x000010, "Wrong alignment on BRRulesetTeam_GetPlayerStartTransform");
static_assert(sizeof(BRRulesetTeam_GetPlayerStartTransform) == 0x000070, "Wrong size on BRRulesetTeam_GetPlayerStartTransform");
static_assert(offsetof(BRRulesetTeam_GetPlayerStartTransform, State) == 0x000000, "Member 'BRRulesetTeam_GetPlayerStartTransform::State' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetPlayerStartTransform, ReturnValue) == 0x000010, "Member 'BRRulesetTeam_GetPlayerStartTransform::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetRandomMember
// 0x0008 (0x0008 - 0x0000)
struct BRRulesetTeam_GetRandomMember final
{
public:
	class ABRPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetRandomMember) == 0x000008, "Wrong alignment on BRRulesetTeam_GetRandomMember");
static_assert(sizeof(BRRulesetTeam_GetRandomMember) == 0x000008, "Wrong size on BRRulesetTeam_GetRandomMember");
static_assert(offsetof(BRRulesetTeam_GetRandomMember, ReturnValue) == 0x000000, "Member 'BRRulesetTeam_GetRandomMember::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetTeamAllowedToUseSpecialBrick
// 0x000C (0x000C - 0x0000)
struct BRRulesetTeam_GetTeamAllowedToUseSpecialBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_GetTeamAllowedToUseSpecialBrick) == 0x000004, "Wrong alignment on BRRulesetTeam_GetTeamAllowedToUseSpecialBrick");
static_assert(sizeof(BRRulesetTeam_GetTeamAllowedToUseSpecialBrick) == 0x00000C, "Wrong size on BRRulesetTeam_GetTeamAllowedToUseSpecialBrick");
static_assert(offsetof(BRRulesetTeam_GetTeamAllowedToUseSpecialBrick, BrickHandle) == 0x000000, "Member 'BRRulesetTeam_GetTeamAllowedToUseSpecialBrick::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_GetTeamAllowedToUseSpecialBrick, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_GetTeamAllowedToUseSpecialBrick::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetTeamDisplayColor
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_GetTeamDisplayColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetTeamDisplayColor) == 0x000004, "Wrong alignment on BRRulesetTeam_GetTeamDisplayColor");
static_assert(sizeof(BRRulesetTeam_GetTeamDisplayColor) == 0x000004, "Wrong size on BRRulesetTeam_GetTeamDisplayColor");
static_assert(offsetof(BRRulesetTeam_GetTeamDisplayColor, ReturnValue) == 0x000000, "Member 'BRRulesetTeam_GetTeamDisplayColor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.GetTeamId
// 0x0004 (0x0004 - 0x0000)
struct BRRulesetTeam_GetTeamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_GetTeamId) == 0x000004, "Wrong alignment on BRRulesetTeam_GetTeamId");
static_assert(sizeof(BRRulesetTeam_GetTeamId) == 0x000004, "Wrong size on BRRulesetTeam_GetTeamId");
static_assert(offsetof(BRRulesetTeam_GetTeamId, ReturnValue) == 0x000000, "Member 'BRRulesetTeam_GetTeamId::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.HasGameplayPermission
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetTeam_HasGameplayPermission final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Permission;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_HasGameplayPermission) == 0x000008, "Wrong alignment on BRRulesetTeam_HasGameplayPermission");
static_assert(sizeof(BRRulesetTeam_HasGameplayPermission) == 0x000018, "Wrong size on BRRulesetTeam_HasGameplayPermission");
static_assert(offsetof(BRRulesetTeam_HasGameplayPermission, WorldContext) == 0x000000, "Member 'BRRulesetTeam_HasGameplayPermission::WorldContext' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HasGameplayPermission, Permission) == 0x000008, "Member 'BRRulesetTeam_HasGameplayPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_HasGameplayPermission, ReturnValue) == 0x000010, "Member 'BRRulesetTeam_HasGameplayPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.Inspector_CanEditPermission
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetTeam_Inspector_CanEditPermission final
{
public:
	class FName                                   Permission;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContext;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_Inspector_CanEditPermission) == 0x000008, "Wrong alignment on BRRulesetTeam_Inspector_CanEditPermission");
static_assert(sizeof(BRRulesetTeam_Inspector_CanEditPermission) == 0x000018, "Wrong size on BRRulesetTeam_Inspector_CanEditPermission");
static_assert(offsetof(BRRulesetTeam_Inspector_CanEditPermission, Permission) == 0x000000, "Member 'BRRulesetTeam_Inspector_CanEditPermission::Permission' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_Inspector_CanEditPermission, WorldContext) == 0x000008, "Member 'BRRulesetTeam_Inspector_CanEditPermission::WorldContext' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_Inspector_CanEditPermission, ReturnValue) == 0x000010, "Member 'BRRulesetTeam_Inspector_CanEditPermission::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.Inspector_GetPermissionState
// 0x0018 (0x0018 - 0x0000)
struct BRRulesetTeam_Inspector_GetPermissionState final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Permission;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_Inspector_GetPermissionState) == 0x000008, "Wrong alignment on BRRulesetTeam_Inspector_GetPermissionState");
static_assert(sizeof(BRRulesetTeam_Inspector_GetPermissionState) == 0x000018, "Wrong size on BRRulesetTeam_Inspector_GetPermissionState");
static_assert(offsetof(BRRulesetTeam_Inspector_GetPermissionState, WorldContext) == 0x000000, "Member 'BRRulesetTeam_Inspector_GetPermissionState::WorldContext' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_Inspector_GetPermissionState, Permission) == 0x000008, "Member 'BRRulesetTeam_Inspector_GetPermissionState::Permission' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_Inspector_GetPermissionState, ReturnValue) == 0x000010, "Member 'BRRulesetTeam_Inspector_GetPermissionState::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.IsHostileTo
// 0x0010 (0x0010 - 0x0000)
struct BRRulesetTeam_IsHostileTo final
{
public:
	class UBRRulesetTeam*                         TeamB;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetTeam_IsHostileTo) == 0x000008, "Wrong alignment on BRRulesetTeam_IsHostileTo");
static_assert(sizeof(BRRulesetTeam_IsHostileTo) == 0x000010, "Wrong size on BRRulesetTeam_IsHostileTo");
static_assert(offsetof(BRRulesetTeam_IsHostileTo, TeamB) == 0x000000, "Member 'BRRulesetTeam_IsHostileTo::TeamB' has a wrong offset!");
static_assert(offsetof(BRRulesetTeam_IsHostileTo, ReturnValue) == 0x000008, "Member 'BRRulesetTeam_IsHostileTo::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetTeam.ShouldAllowFriendlyDamage
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetTeam_ShouldAllowFriendlyDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetTeam_ShouldAllowFriendlyDamage) == 0x000001, "Wrong alignment on BRRulesetTeam_ShouldAllowFriendlyDamage");
static_assert(sizeof(BRRulesetTeam_ShouldAllowFriendlyDamage) == 0x000001, "Wrong size on BRRulesetTeam_ShouldAllowFriendlyDamage");
static_assert(offsetof(BRRulesetTeam_ShouldAllowFriendlyDamage, ReturnValue) == 0x000000, "Member 'BRRulesetTeam_ShouldAllowFriendlyDamage::ReturnValue' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetGlobalRulesetEnableCameraBlockedEffects
// 0x0001 (0x0001 - 0x0000)
struct BRServerSettingsBase_General_SetGlobalRulesetEnableCameraBlockedEffects final
{
public:
	bool                                          bBlockedEffects;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetGlobalRulesetEnableCameraBlockedEffects) == 0x000001, "Wrong alignment on BRServerSettingsBase_General_SetGlobalRulesetEnableCameraBlockedEffects");
static_assert(sizeof(BRServerSettingsBase_General_SetGlobalRulesetEnableCameraBlockedEffects) == 0x000001, "Wrong size on BRServerSettingsBase_General_SetGlobalRulesetEnableCameraBlockedEffects");
static_assert(offsetof(BRServerSettingsBase_General_SetGlobalRulesetEnableCameraBlockedEffects, bBlockedEffects) == 0x000000, "Member 'BRServerSettingsBase_General_SetGlobalRulesetEnableCameraBlockedEffects::bBlockedEffects' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetGlobalRulesetPhysicsDamage
// 0x0001 (0x0001 - 0x0000)
struct BRServerSettingsBase_General_SetGlobalRulesetPhysicsDamage final
{
public:
	bool                                          bPhysicsDamage;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetGlobalRulesetPhysicsDamage) == 0x000001, "Wrong alignment on BRServerSettingsBase_General_SetGlobalRulesetPhysicsDamage");
static_assert(sizeof(BRServerSettingsBase_General_SetGlobalRulesetPhysicsDamage) == 0x000001, "Wrong size on BRServerSettingsBase_General_SetGlobalRulesetPhysicsDamage");
static_assert(offsetof(BRServerSettingsBase_General_SetGlobalRulesetPhysicsDamage, bPhysicsDamage) == 0x000000, "Member 'BRServerSettingsBase_General_SetGlobalRulesetPhysicsDamage::bPhysicsDamage' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetGlobalRulesetSelfDamage
// 0x0001 (0x0001 - 0x0000)
struct BRServerSettingsBase_General_SetGlobalRulesetSelfDamage final
{
public:
	bool                                          bSelfDamage;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetGlobalRulesetSelfDamage) == 0x000001, "Wrong alignment on BRServerSettingsBase_General_SetGlobalRulesetSelfDamage");
static_assert(sizeof(BRServerSettingsBase_General_SetGlobalRulesetSelfDamage) == 0x000001, "Wrong size on BRServerSettingsBase_General_SetGlobalRulesetSelfDamage");
static_assert(offsetof(BRServerSettingsBase_General_SetGlobalRulesetSelfDamage, bSelfDamage) == 0x000000, "Member 'BRServerSettingsBase_General_SetGlobalRulesetSelfDamage::bSelfDamage' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetIsPubliclyListed
// 0x0001 (0x0001 - 0x0000)
struct BRServerSettingsBase_General_SetIsPubliclyListed final
{
public:
	bool                                          bInPubliclyListed;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetIsPubliclyListed) == 0x000001, "Wrong alignment on BRServerSettingsBase_General_SetIsPubliclyListed");
static_assert(sizeof(BRServerSettingsBase_General_SetIsPubliclyListed) == 0x000001, "Wrong size on BRServerSettingsBase_General_SetIsPubliclyListed");
static_assert(offsetof(BRServerSettingsBase_General_SetIsPubliclyListed, bInPubliclyListed) == 0x000000, "Member 'BRServerSettingsBase_General_SetIsPubliclyListed::bInPubliclyListed' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetMaxPlayers
// 0x0004 (0x0004 - 0x0000)
struct BRServerSettingsBase_General_SetMaxPlayers final
{
public:
	int32                                         InMaxPlayers;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetMaxPlayers) == 0x000004, "Wrong alignment on BRServerSettingsBase_General_SetMaxPlayers");
static_assert(sizeof(BRServerSettingsBase_General_SetMaxPlayers) == 0x000004, "Wrong size on BRServerSettingsBase_General_SetMaxPlayers");
static_assert(offsetof(BRServerSettingsBase_General_SetMaxPlayers, InMaxPlayers) == 0x000000, "Member 'BRServerSettingsBase_General_SetMaxPlayers::InMaxPlayers' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetMaxPrefabBricks
// 0x0004 (0x0004 - 0x0000)
struct BRServerSettingsBase_General_SetMaxPrefabBricks final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetMaxPrefabBricks) == 0x000004, "Wrong alignment on BRServerSettingsBase_General_SetMaxPrefabBricks");
static_assert(sizeof(BRServerSettingsBase_General_SetMaxPrefabBricks) == 0x000004, "Wrong size on BRServerSettingsBase_General_SetMaxPrefabBricks");
static_assert(offsetof(BRServerSettingsBase_General_SetMaxPrefabBricks, Value) == 0x000000, "Member 'BRServerSettingsBase_General_SetMaxPrefabBricks::Value' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetMaxPrefabComponents
// 0x0004 (0x0004 - 0x0000)
struct BRServerSettingsBase_General_SetMaxPrefabComponents final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetMaxPrefabComponents) == 0x000004, "Wrong alignment on BRServerSettingsBase_General_SetMaxPrefabComponents");
static_assert(sizeof(BRServerSettingsBase_General_SetMaxPrefabComponents) == 0x000004, "Wrong size on BRServerSettingsBase_General_SetMaxPrefabComponents");
static_assert(offsetof(BRServerSettingsBase_General_SetMaxPrefabComponents, Value) == 0x000000, "Member 'BRServerSettingsBase_General_SetMaxPrefabComponents::Value' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetMaxPrefabSize
// 0x000C (0x000C - 0x0000)
struct BRServerSettingsBase_General_SetMaxPrefabSize final
{
public:
	struct FIntVector                             Value;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetMaxPrefabSize) == 0x000004, "Wrong alignment on BRServerSettingsBase_General_SetMaxPrefabSize");
static_assert(sizeof(BRServerSettingsBase_General_SetMaxPrefabSize) == 0x00000C, "Wrong size on BRServerSettingsBase_General_SetMaxPrefabSize");
static_assert(offsetof(BRServerSettingsBase_General_SetMaxPrefabSize, Value) == 0x000000, "Member 'BRServerSettingsBase_General_SetMaxPrefabSize::Value' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetServerDescription
// 0x0010 (0x0010 - 0x0000)
struct BRServerSettingsBase_General_SetServerDescription final
{
public:
	class FString                                 InServerDescription;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetServerDescription) == 0x000008, "Wrong alignment on BRServerSettingsBase_General_SetServerDescription");
static_assert(sizeof(BRServerSettingsBase_General_SetServerDescription) == 0x000010, "Wrong size on BRServerSettingsBase_General_SetServerDescription");
static_assert(offsetof(BRServerSettingsBase_General_SetServerDescription, InServerDescription) == 0x000000, "Member 'BRServerSettingsBase_General_SetServerDescription::InServerDescription' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetServerName
// 0x0010 (0x0010 - 0x0000)
struct BRServerSettingsBase_General_SetServerName final
{
public:
	class FString                                 InServerName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetServerName) == 0x000008, "Wrong alignment on BRServerSettingsBase_General_SetServerName");
static_assert(sizeof(BRServerSettingsBase_General_SetServerName) == 0x000010, "Wrong size on BRServerSettingsBase_General_SetServerName");
static_assert(offsetof(BRServerSettingsBase_General_SetServerName, InServerName) == 0x000000, "Member 'BRServerSettingsBase_General_SetServerName::InServerName' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetServerPassword
// 0x0010 (0x0010 - 0x0000)
struct BRServerSettingsBase_General_SetServerPassword final
{
public:
	class FString                                 InServerPassword;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetServerPassword) == 0x000008, "Wrong alignment on BRServerSettingsBase_General_SetServerPassword");
static_assert(sizeof(BRServerSettingsBase_General_SetServerPassword) == 0x000010, "Wrong size on BRServerSettingsBase_General_SetServerPassword");
static_assert(offsetof(BRServerSettingsBase_General_SetServerPassword, InServerPassword) == 0x000000, "Member 'BRServerSettingsBase_General_SetServerPassword::InServerPassword' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetUploadTimeout
// 0x0004 (0x0004 - 0x0000)
struct BRServerSettingsBase_General_SetUploadTimeout final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetUploadTimeout) == 0x000004, "Wrong alignment on BRServerSettingsBase_General_SetUploadTimeout");
static_assert(sizeof(BRServerSettingsBase_General_SetUploadTimeout) == 0x000004, "Wrong size on BRServerSettingsBase_General_SetUploadTimeout");
static_assert(offsetof(BRServerSettingsBase_General_SetUploadTimeout, Value) == 0x000000, "Member 'BRServerSettingsBase_General_SetUploadTimeout::Value' has a wrong offset!");

// Function Brickadia.BRServerSettingsBase_General.SetWelcomeMessage
// 0x0010 (0x0010 - 0x0000)
struct BRServerSettingsBase_General_SetWelcomeMessage final
{
public:
	class FString                                 InWelcomeMessage;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRServerSettingsBase_General_SetWelcomeMessage) == 0x000008, "Wrong alignment on BRServerSettingsBase_General_SetWelcomeMessage");
static_assert(sizeof(BRServerSettingsBase_General_SetWelcomeMessage) == 0x000010, "Wrong size on BRServerSettingsBase_General_SetWelcomeMessage");
static_assert(offsetof(BRServerSettingsBase_General_SetWelcomeMessage, InWelcomeMessage) == 0x000000, "Member 'BRServerSettingsBase_General_SetWelcomeMessage::InWelcomeMessage' has a wrong offset!");

// Function Brickadia.BRTabSetWidget.SetSelectedTab
// 0x0004 (0x0004 - 0x0000)
struct BRTabSetWidget_SetSelectedTab final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTabSetWidget_SetSelectedTab) == 0x000004, "Wrong alignment on BRTabSetWidget_SetSelectedTab");
static_assert(sizeof(BRTabSetWidget_SetSelectedTab) == 0x000004, "Wrong size on BRTabSetWidget_SetSelectedTab");
static_assert(offsetof(BRTabSetWidget_SetSelectedTab, Index_0) == 0x000000, "Member 'BRTabSetWidget_SetSelectedTab::Index_0' has a wrong offset!");

// Function Brickadia.BRTabSetWidget.SetTabEnabled
// 0x0008 (0x0008 - 0x0000)
struct BRTabSetWidget_SetTabEnabled final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTabSetWidget_SetTabEnabled) == 0x000004, "Wrong alignment on BRTabSetWidget_SetTabEnabled");
static_assert(sizeof(BRTabSetWidget_SetTabEnabled) == 0x000008, "Wrong size on BRTabSetWidget_SetTabEnabled");
static_assert(offsetof(BRTabSetWidget_SetTabEnabled, Index_0) == 0x000000, "Member 'BRTabSetWidget_SetTabEnabled::Index_0' has a wrong offset!");
static_assert(offsetof(BRTabSetWidget_SetTabEnabled, bEnabled) == 0x000004, "Member 'BRTabSetWidget_SetTabEnabled::bEnabled' has a wrong offset!");

// Function Brickadia.BRToolBindHintWidget.Setup
// 0x0020 (0x0020 - 0x0000)
struct BRToolBindHintWidget_Setup final
{
public:
	struct FBRToolBindHint                        BindInfo;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolBindHintWidget_Setup) == 0x000008, "Wrong alignment on BRToolBindHintWidget_Setup");
static_assert(sizeof(BRToolBindHintWidget_Setup) == 0x000020, "Wrong size on BRToolBindHintWidget_Setup");
static_assert(offsetof(BRToolBindHintWidget_Setup, BindInfo) == 0x000000, "Member 'BRToolBindHintWidget_Setup::BindInfo' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.InitializePreview_ServerOnly
// 0x0010 (0x0010 - 0x0000)
struct BRToolPreviewManagerComponent_InitializePreview_ServerOnly final
{
public:
	TArray<TSubclassOf<class UBRToolPreviewPartBase>> Parts;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_InitializePreview_ServerOnly) == 0x000008, "Wrong alignment on BRToolPreviewManagerComponent_InitializePreview_ServerOnly");
static_assert(sizeof(BRToolPreviewManagerComponent_InitializePreview_ServerOnly) == 0x000010, "Wrong size on BRToolPreviewManagerComponent_InitializePreview_ServerOnly");
static_assert(offsetof(BRToolPreviewManagerComponent_InitializePreview_ServerOnly, Parts) == 0x000000, "Member 'BRToolPreviewManagerComponent_InitializePreview_ServerOnly::Parts' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.ServerSetHypotheticalGridTransform
// 0x0070 (0x0070 - 0x0000)
struct BRToolPreviewManagerComponent_ServerSetHypotheticalGridTransform final
{
public:
	class USceneComponent*                        RelativeTo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewTransform;                                      // 0x0010(0x0060)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_ServerSetHypotheticalGridTransform) == 0x000010, "Wrong alignment on BRToolPreviewManagerComponent_ServerSetHypotheticalGridTransform");
static_assert(sizeof(BRToolPreviewManagerComponent_ServerSetHypotheticalGridTransform) == 0x000070, "Wrong size on BRToolPreviewManagerComponent_ServerSetHypotheticalGridTransform");
static_assert(offsetof(BRToolPreviewManagerComponent_ServerSetHypotheticalGridTransform, RelativeTo) == 0x000000, "Member 'BRToolPreviewManagerComponent_ServerSetHypotheticalGridTransform::RelativeTo' has a wrong offset!");
static_assert(offsetof(BRToolPreviewManagerComponent_ServerSetHypotheticalGridTransform, NewTransform) == 0x000010, "Member 'BRToolPreviewManagerComponent_ServerSetHypotheticalGridTransform::NewTransform' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.ServerSetPreviewInstancingParameters
// 0x0030 (0x0030 - 0x0000)
struct BRToolPreviewManagerComponent_ServerSetPreviewInstancingParameters final
{
public:
	struct FBRToolPreviewInstancingParameters     NewInstancingParameters;                           // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_ServerSetPreviewInstancingParameters) == 0x000004, "Wrong alignment on BRToolPreviewManagerComponent_ServerSetPreviewInstancingParameters");
static_assert(sizeof(BRToolPreviewManagerComponent_ServerSetPreviewInstancingParameters) == 0x000030, "Wrong size on BRToolPreviewManagerComponent_ServerSetPreviewInstancingParameters");
static_assert(offsetof(BRToolPreviewManagerComponent_ServerSetPreviewInstancingParameters, NewInstancingParameters) == 0x000000, "Member 'BRToolPreviewManagerComponent_ServerSetPreviewInstancingParameters::NewInstancingParameters' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.ServerSetPreviewPartDisplayParameters
// 0x0050 (0x0050 - 0x0000)
struct BRToolPreviewManagerComponent_ServerSetPreviewPartDisplayParameters final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBRToolPreviewPartDisplayParameters    NewDisplayParameters;                              // 0x0008(0x0048)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_ServerSetPreviewPartDisplayParameters) == 0x000008, "Wrong alignment on BRToolPreviewManagerComponent_ServerSetPreviewPartDisplayParameters");
static_assert(sizeof(BRToolPreviewManagerComponent_ServerSetPreviewPartDisplayParameters) == 0x000050, "Wrong size on BRToolPreviewManagerComponent_ServerSetPreviewPartDisplayParameters");
static_assert(offsetof(BRToolPreviewManagerComponent_ServerSetPreviewPartDisplayParameters, PartIndex) == 0x000000, "Member 'BRToolPreviewManagerComponent_ServerSetPreviewPartDisplayParameters::PartIndex' has a wrong offset!");
static_assert(offsetof(BRToolPreviewManagerComponent_ServerSetPreviewPartDisplayParameters, NewDisplayParameters) == 0x000008, "Member 'BRToolPreviewManagerComponent_ServerSetPreviewPartDisplayParameters::NewDisplayParameters' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.ServerSetPreviewPartTransformParameters
// 0x0070 (0x0070 - 0x0000)
struct BRToolPreviewManagerComponent_ServerSetPreviewPartTransformParameters final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBRToolPreviewPartTransformParameters  NewTransformParameters;                            // 0x0010(0x0060)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_ServerSetPreviewPartTransformParameters) == 0x000010, "Wrong alignment on BRToolPreviewManagerComponent_ServerSetPreviewPartTransformParameters");
static_assert(sizeof(BRToolPreviewManagerComponent_ServerSetPreviewPartTransformParameters) == 0x000070, "Wrong size on BRToolPreviewManagerComponent_ServerSetPreviewPartTransformParameters");
static_assert(offsetof(BRToolPreviewManagerComponent_ServerSetPreviewPartTransformParameters, PartIndex) == 0x000000, "Member 'BRToolPreviewManagerComponent_ServerSetPreviewPartTransformParameters::PartIndex' has a wrong offset!");
static_assert(offsetof(BRToolPreviewManagerComponent_ServerSetPreviewPartTransformParameters, NewTransformParameters) == 0x000010, "Member 'BRToolPreviewManagerComponent_ServerSetPreviewPartTransformParameters::NewTransformParameters' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.ServerSetPreviewTransformParameters
// 0x0020 (0x0020 - 0x0000)
struct BRToolPreviewManagerComponent_ServerSetPreviewTransformParameters final
{
public:
	struct FBRToolPreviewTransformParameters      NewTransformParameters;                            // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bSnapTransform;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolPreviewManagerComponent_ServerSetPreviewTransformParameters) == 0x000008, "Wrong alignment on BRToolPreviewManagerComponent_ServerSetPreviewTransformParameters");
static_assert(sizeof(BRToolPreviewManagerComponent_ServerSetPreviewTransformParameters) == 0x000020, "Wrong size on BRToolPreviewManagerComponent_ServerSetPreviewTransformParameters");
static_assert(offsetof(BRToolPreviewManagerComponent_ServerSetPreviewTransformParameters, NewTransformParameters) == 0x000000, "Member 'BRToolPreviewManagerComponent_ServerSetPreviewTransformParameters::NewTransformParameters' has a wrong offset!");
static_assert(offsetof(BRToolPreviewManagerComponent_ServerSetPreviewTransformParameters, bSnapTransform) == 0x000018, "Member 'BRToolPreviewManagerComponent_ServerSetPreviewTransformParameters::bSnapTransform' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.ServerSetPreviewVisibility
// 0x0001 (0x0001 - 0x0000)
struct BRToolPreviewManagerComponent_ServerSetPreviewVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_ServerSetPreviewVisibility) == 0x000001, "Wrong alignment on BRToolPreviewManagerComponent_ServerSetPreviewVisibility");
static_assert(sizeof(BRToolPreviewManagerComponent_ServerSetPreviewVisibility) == 0x000001, "Wrong size on BRToolPreviewManagerComponent_ServerSetPreviewVisibility");
static_assert(offsetof(BRToolPreviewManagerComponent_ServerSetPreviewVisibility, bNewVisibility) == 0x000000, "Member 'BRToolPreviewManagerComponent_ServerSetPreviewVisibility::bNewVisibility' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.SetHypotheticalGridTransform
// 0x0070 (0x0070 - 0x0000)
struct BRToolPreviewManagerComponent_SetHypotheticalGridTransform final
{
public:
	class USceneComponent*                        RelativeTo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewRelativeTransform;                              // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_SetHypotheticalGridTransform) == 0x000010, "Wrong alignment on BRToolPreviewManagerComponent_SetHypotheticalGridTransform");
static_assert(sizeof(BRToolPreviewManagerComponent_SetHypotheticalGridTransform) == 0x000070, "Wrong size on BRToolPreviewManagerComponent_SetHypotheticalGridTransform");
static_assert(offsetof(BRToolPreviewManagerComponent_SetHypotheticalGridTransform, RelativeTo) == 0x000000, "Member 'BRToolPreviewManagerComponent_SetHypotheticalGridTransform::RelativeTo' has a wrong offset!");
static_assert(offsetof(BRToolPreviewManagerComponent_SetHypotheticalGridTransform, NewRelativeTransform) == 0x000010, "Member 'BRToolPreviewManagerComponent_SetHypotheticalGridTransform::NewRelativeTransform' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.SetPreviewInstancingParameters
// 0x0030 (0x0030 - 0x0000)
struct BRToolPreviewManagerComponent_SetPreviewInstancingParameters final
{
public:
	struct FBRToolPreviewInstancingParameters     NewInstancingParameters;                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_SetPreviewInstancingParameters) == 0x000004, "Wrong alignment on BRToolPreviewManagerComponent_SetPreviewInstancingParameters");
static_assert(sizeof(BRToolPreviewManagerComponent_SetPreviewInstancingParameters) == 0x000030, "Wrong size on BRToolPreviewManagerComponent_SetPreviewInstancingParameters");
static_assert(offsetof(BRToolPreviewManagerComponent_SetPreviewInstancingParameters, NewInstancingParameters) == 0x000000, "Member 'BRToolPreviewManagerComponent_SetPreviewInstancingParameters::NewInstancingParameters' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.SetPreviewPartDisplayParameters
// 0x0050 (0x0050 - 0x0000)
struct BRToolPreviewManagerComponent_SetPreviewPartDisplayParameters final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBRToolPreviewPartDisplayParameters    NewDisplayParameters;                              // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_SetPreviewPartDisplayParameters) == 0x000008, "Wrong alignment on BRToolPreviewManagerComponent_SetPreviewPartDisplayParameters");
static_assert(sizeof(BRToolPreviewManagerComponent_SetPreviewPartDisplayParameters) == 0x000050, "Wrong size on BRToolPreviewManagerComponent_SetPreviewPartDisplayParameters");
static_assert(offsetof(BRToolPreviewManagerComponent_SetPreviewPartDisplayParameters, PartIndex) == 0x000000, "Member 'BRToolPreviewManagerComponent_SetPreviewPartDisplayParameters::PartIndex' has a wrong offset!");
static_assert(offsetof(BRToolPreviewManagerComponent_SetPreviewPartDisplayParameters, NewDisplayParameters) == 0x000008, "Member 'BRToolPreviewManagerComponent_SetPreviewPartDisplayParameters::NewDisplayParameters' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.SetPreviewPartTransformParameters
// 0x0070 (0x0070 - 0x0000)
struct BRToolPreviewManagerComponent_SetPreviewPartTransformParameters final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBRToolPreviewPartTransformParameters  NewTransformParameters;                            // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_SetPreviewPartTransformParameters) == 0x000010, "Wrong alignment on BRToolPreviewManagerComponent_SetPreviewPartTransformParameters");
static_assert(sizeof(BRToolPreviewManagerComponent_SetPreviewPartTransformParameters) == 0x000070, "Wrong size on BRToolPreviewManagerComponent_SetPreviewPartTransformParameters");
static_assert(offsetof(BRToolPreviewManagerComponent_SetPreviewPartTransformParameters, PartIndex) == 0x000000, "Member 'BRToolPreviewManagerComponent_SetPreviewPartTransformParameters::PartIndex' has a wrong offset!");
static_assert(offsetof(BRToolPreviewManagerComponent_SetPreviewPartTransformParameters, NewTransformParameters) == 0x000010, "Member 'BRToolPreviewManagerComponent_SetPreviewPartTransformParameters::NewTransformParameters' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.SetPreviewTransformParameters
// 0x0020 (0x0020 - 0x0000)
struct BRToolPreviewManagerComponent_SetPreviewTransformParameters final
{
public:
	struct FBRToolPreviewTransformParameters      NewTransformParameters;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bSnapTransform;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRToolPreviewManagerComponent_SetPreviewTransformParameters) == 0x000008, "Wrong alignment on BRToolPreviewManagerComponent_SetPreviewTransformParameters");
static_assert(sizeof(BRToolPreviewManagerComponent_SetPreviewTransformParameters) == 0x000020, "Wrong size on BRToolPreviewManagerComponent_SetPreviewTransformParameters");
static_assert(offsetof(BRToolPreviewManagerComponent_SetPreviewTransformParameters, NewTransformParameters) == 0x000000, "Member 'BRToolPreviewManagerComponent_SetPreviewTransformParameters::NewTransformParameters' has a wrong offset!");
static_assert(offsetof(BRToolPreviewManagerComponent_SetPreviewTransformParameters, bSnapTransform) == 0x000018, "Member 'BRToolPreviewManagerComponent_SetPreviewTransformParameters::bSnapTransform' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.SetPreviewVisibility
// 0x0001 (0x0001 - 0x0000)
struct BRToolPreviewManagerComponent_SetPreviewVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_SetPreviewVisibility) == 0x000001, "Wrong alignment on BRToolPreviewManagerComponent_SetPreviewVisibility");
static_assert(sizeof(BRToolPreviewManagerComponent_SetPreviewVisibility) == 0x000001, "Wrong size on BRToolPreviewManagerComponent_SetPreviewVisibility");
static_assert(offsetof(BRToolPreviewManagerComponent_SetPreviewVisibility, bNewVisibility) == 0x000000, "Member 'BRToolPreviewManagerComponent_SetPreviewVisibility::bNewVisibility' has a wrong offset!");

// Function Brickadia.BRToolPreviewManagerComponent.GetPreviewPart
// 0x0010 (0x0010 - 0x0000)
struct BRToolPreviewManagerComponent_GetPreviewPart final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRToolPreviewPartBase*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRToolPreviewManagerComponent_GetPreviewPart) == 0x000008, "Wrong alignment on BRToolPreviewManagerComponent_GetPreviewPart");
static_assert(sizeof(BRToolPreviewManagerComponent_GetPreviewPart) == 0x000010, "Wrong size on BRToolPreviewManagerComponent_GetPreviewPart");
static_assert(offsetof(BRToolPreviewManagerComponent_GetPreviewPart, PartIndex) == 0x000000, "Member 'BRToolPreviewManagerComponent_GetPreviewPart::PartIndex' has a wrong offset!");
static_assert(offsetof(BRToolPreviewManagerComponent_GetPreviewPart, ReturnValue) == 0x000008, "Member 'BRToolPreviewManagerComponent_GetPreviewPart::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.Audio_OnAddBrickComponent
// 0x0010 (0x0010 - 0x0000)
struct BRTool_Applicator_Audio_OnAddBrickComponent final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_Audio_OnAddBrickComponent) == 0x000008, "Wrong alignment on BRTool_Applicator_Audio_OnAddBrickComponent");
static_assert(sizeof(BRTool_Applicator_Audio_OnAddBrickComponent) == 0x000010, "Wrong size on BRTool_Applicator_Audio_OnAddBrickComponent");
static_assert(offsetof(BRTool_Applicator_Audio_OnAddBrickComponent, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_Audio_OnAddBrickComponent::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_Audio_OnAddBrickComponent, Component) == 0x000008, "Member 'BRTool_Applicator_Audio_OnAddBrickComponent::Component' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.Audio_OnCopyBrick
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_Audio_OnCopyBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_Audio_OnCopyBrick) == 0x000004, "Wrong alignment on BRTool_Applicator_Audio_OnCopyBrick");
static_assert(sizeof(BRTool_Applicator_Audio_OnCopyBrick) == 0x000008, "Wrong size on BRTool_Applicator_Audio_OnCopyBrick");
static_assert(offsetof(BRTool_Applicator_Audio_OnCopyBrick, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_Audio_OnCopyBrick::BrickHandle' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.Audio_OnCopyEntity
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_Audio_OnCopyEntity final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_Audio_OnCopyEntity) == 0x000008, "Wrong alignment on BRTool_Applicator_Audio_OnCopyEntity");
static_assert(sizeof(BRTool_Applicator_Audio_OnCopyEntity) == 0x000008, "Wrong size on BRTool_Applicator_Audio_OnCopyEntity");
static_assert(offsetof(BRTool_Applicator_Audio_OnCopyEntity, ENTITY) == 0x000000, "Member 'BRTool_Applicator_Audio_OnCopyEntity::ENTITY' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.Audio_OnPasteBrick
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_Audio_OnPasteBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_Audio_OnPasteBrick) == 0x000004, "Wrong alignment on BRTool_Applicator_Audio_OnPasteBrick");
static_assert(sizeof(BRTool_Applicator_Audio_OnPasteBrick) == 0x000008, "Wrong size on BRTool_Applicator_Audio_OnPasteBrick");
static_assert(offsetof(BRTool_Applicator_Audio_OnPasteBrick, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_Audio_OnPasteBrick::BrickHandle' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.Audio_OnPasteEntity
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_Audio_OnPasteEntity final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_Audio_OnPasteEntity) == 0x000008, "Wrong alignment on BRTool_Applicator_Audio_OnPasteEntity");
static_assert(sizeof(BRTool_Applicator_Audio_OnPasteEntity) == 0x000008, "Wrong size on BRTool_Applicator_Audio_OnPasteEntity");
static_assert(offsetof(BRTool_Applicator_Audio_OnPasteEntity, ENTITY) == 0x000000, "Member 'BRTool_Applicator_Audio_OnPasteEntity::ENTITY' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.Audio_OnRemoveBrickComponent
// 0x0010 (0x0010 - 0x0000)
struct BRTool_Applicator_Audio_OnRemoveBrickComponent final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_Audio_OnRemoveBrickComponent) == 0x000008, "Wrong alignment on BRTool_Applicator_Audio_OnRemoveBrickComponent");
static_assert(sizeof(BRTool_Applicator_Audio_OnRemoveBrickComponent) == 0x000010, "Wrong size on BRTool_Applicator_Audio_OnRemoveBrickComponent");
static_assert(offsetof(BRTool_Applicator_Audio_OnRemoveBrickComponent, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_Audio_OnRemoveBrickComponent::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_Audio_OnRemoveBrickComponent, Component) == 0x000008, "Member 'BRTool_Applicator_Audio_OnRemoveBrickComponent::Component' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.Audio_OnSelectBrick
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_Audio_OnSelectBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_Audio_OnSelectBrick) == 0x000004, "Wrong alignment on BRTool_Applicator_Audio_OnSelectBrick");
static_assert(sizeof(BRTool_Applicator_Audio_OnSelectBrick) == 0x000008, "Wrong size on BRTool_Applicator_Audio_OnSelectBrick");
static_assert(offsetof(BRTool_Applicator_Audio_OnSelectBrick, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_Audio_OnSelectBrick::BrickHandle' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.Audio_OnSelectEntity
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_Audio_OnSelectEntity final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_Audio_OnSelectEntity) == 0x000008, "Wrong alignment on BRTool_Applicator_Audio_OnSelectEntity");
static_assert(sizeof(BRTool_Applicator_Audio_OnSelectEntity) == 0x000008, "Wrong size on BRTool_Applicator_Audio_OnSelectEntity");
static_assert(offsetof(BRTool_Applicator_Audio_OnSelectEntity, ENTITY) == 0x000000, "Member 'BRTool_Applicator_Audio_OnSelectEntity::ENTITY' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ManualFire
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_ManualFire final
{
public:
	class UBRApplicatorDialogBase*                OpenApplicatorDialog;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ManualFire) == 0x000008, "Wrong alignment on BRTool_Applicator_ManualFire");
static_assert(sizeof(BRTool_Applicator_ManualFire) == 0x000008, "Wrong size on BRTool_Applicator_ManualFire");
static_assert(offsetof(BRTool_Applicator_ManualFire, OpenApplicatorDialog) == 0x000000, "Member 'BRTool_Applicator_ManualFire::OpenApplicatorDialog' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerAddComponent
// 0x0010 (0x0010 - 0x0000)
struct BRTool_Applicator_ServerAddComponent final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ServerAddComponent) == 0x000008, "Wrong alignment on BRTool_Applicator_ServerAddComponent");
static_assert(sizeof(BRTool_Applicator_ServerAddComponent) == 0x000010, "Wrong size on BRTool_Applicator_ServerAddComponent");
static_assert(offsetof(BRTool_Applicator_ServerAddComponent, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_ServerAddComponent::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerAddComponent, Component) == 0x000008, "Member 'BRTool_Applicator_ServerAddComponent::Component' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerApplyBrickState
// 0x0030 (0x0030 - 0x0000)
struct BRTool_Applicator_ServerApplyBrickState final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickCollisionChannels                       CollisionChannels;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBrickComponentTypeBase*>        ComponentTypes;                                    // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FInspectorPropertyChangelist>   ComponentDatas;                                    // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ServerApplyBrickState) == 0x000008, "Wrong alignment on BRTool_Applicator_ServerApplyBrickState");
static_assert(sizeof(BRTool_Applicator_ServerApplyBrickState) == 0x000030, "Wrong size on BRTool_Applicator_ServerApplyBrickState");
static_assert(offsetof(BRTool_Applicator_ServerApplyBrickState, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_ServerApplyBrickState::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerApplyBrickState, bVisible) == 0x000008, "Member 'BRTool_Applicator_ServerApplyBrickState::bVisible' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerApplyBrickState, CollisionChannels) == 0x000009, "Member 'BRTool_Applicator_ServerApplyBrickState::CollisionChannels' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerApplyBrickState, ComponentTypes) == 0x000010, "Member 'BRTool_Applicator_ServerApplyBrickState::ComponentTypes' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerApplyBrickState, ComponentDatas) == 0x000020, "Member 'BRTool_Applicator_ServerApplyBrickState::ComponentDatas' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerCopyBrick
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_ServerCopyBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ServerCopyBrick) == 0x000004, "Wrong alignment on BRTool_Applicator_ServerCopyBrick");
static_assert(sizeof(BRTool_Applicator_ServerCopyBrick) == 0x000008, "Wrong size on BRTool_Applicator_ServerCopyBrick");
static_assert(offsetof(BRTool_Applicator_ServerCopyBrick, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_ServerCopyBrick::BrickHandle' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerCopyEntity
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_ServerCopyEntity final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ServerCopyEntity) == 0x000008, "Wrong alignment on BRTool_Applicator_ServerCopyEntity");
static_assert(sizeof(BRTool_Applicator_ServerCopyEntity) == 0x000008, "Wrong size on BRTool_Applicator_ServerCopyEntity");
static_assert(offsetof(BRTool_Applicator_ServerCopyEntity, ENTITY) == 0x000000, "Member 'BRTool_Applicator_ServerCopyEntity::ENTITY' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerModifyComponent
// 0x0020 (0x0020 - 0x0000)
struct BRTool_Applicator_ServerModifyComponent final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0010(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ServerModifyComponent) == 0x000008, "Wrong alignment on BRTool_Applicator_ServerModifyComponent");
static_assert(sizeof(BRTool_Applicator_ServerModifyComponent) == 0x000020, "Wrong size on BRTool_Applicator_ServerModifyComponent");
static_assert(offsetof(BRTool_Applicator_ServerModifyComponent, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_ServerModifyComponent::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerModifyComponent, Component) == 0x000008, "Member 'BRTool_Applicator_ServerModifyComponent::Component' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerModifyComponent, Changelist) == 0x000010, "Member 'BRTool_Applicator_ServerModifyComponent::Changelist' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerModifyEntity
// 0x0018 (0x0018 - 0x0000)
struct BRTool_Applicator_ServerModifyEntity final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ServerModifyEntity) == 0x000008, "Wrong alignment on BRTool_Applicator_ServerModifyEntity");
static_assert(sizeof(BRTool_Applicator_ServerModifyEntity) == 0x000018, "Wrong size on BRTool_Applicator_ServerModifyEntity");
static_assert(offsetof(BRTool_Applicator_ServerModifyEntity, ENTITY) == 0x000000, "Member 'BRTool_Applicator_ServerModifyEntity::ENTITY' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerModifyEntity, Changelist) == 0x000008, "Member 'BRTool_Applicator_ServerModifyEntity::Changelist' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerPasteBrick
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_ServerPasteBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ServerPasteBrick) == 0x000004, "Wrong alignment on BRTool_Applicator_ServerPasteBrick");
static_assert(sizeof(BRTool_Applicator_ServerPasteBrick) == 0x000008, "Wrong size on BRTool_Applicator_ServerPasteBrick");
static_assert(offsetof(BRTool_Applicator_ServerPasteBrick, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_ServerPasteBrick::BrickHandle' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerPasteEntity
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_ServerPasteEntity final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ServerPasteEntity) == 0x000008, "Wrong alignment on BRTool_Applicator_ServerPasteEntity");
static_assert(sizeof(BRTool_Applicator_ServerPasteEntity) == 0x000008, "Wrong size on BRTool_Applicator_ServerPasteEntity");
static_assert(offsetof(BRTool_Applicator_ServerPasteEntity, ENTITY) == 0x000000, "Member 'BRTool_Applicator_ServerPasteEntity::ENTITY' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerRemoveComponent
// 0x0010 (0x0010 - 0x0000)
struct BRTool_Applicator_ServerRemoveComponent final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ServerRemoveComponent) == 0x000008, "Wrong alignment on BRTool_Applicator_ServerRemoveComponent");
static_assert(sizeof(BRTool_Applicator_ServerRemoveComponent) == 0x000010, "Wrong size on BRTool_Applicator_ServerRemoveComponent");
static_assert(offsetof(BRTool_Applicator_ServerRemoveComponent, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_ServerRemoveComponent::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerRemoveComponent, Component) == 0x000008, "Member 'BRTool_Applicator_ServerRemoveComponent::Component' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerResetBrickState
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Applicator_ServerResetBrickState final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Applicator_ServerResetBrickState) == 0x000004, "Wrong alignment on BRTool_Applicator_ServerResetBrickState");
static_assert(sizeof(BRTool_Applicator_ServerResetBrickState) == 0x000008, "Wrong size on BRTool_Applicator_ServerResetBrickState");
static_assert(offsetof(BRTool_Applicator_ServerResetBrickState, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_ServerResetBrickState::BrickHandle' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerSetCollisionChannels
// 0x000C (0x000C - 0x0000)
struct BRTool_Applicator_ServerSetCollisionChannels final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickCollisionChannels                       CollisionChannels;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Applicator_ServerSetCollisionChannels) == 0x000004, "Wrong alignment on BRTool_Applicator_ServerSetCollisionChannels");
static_assert(sizeof(BRTool_Applicator_ServerSetCollisionChannels) == 0x00000C, "Wrong size on BRTool_Applicator_ServerSetCollisionChannels");
static_assert(offsetof(BRTool_Applicator_ServerSetCollisionChannels, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_ServerSetCollisionChannels::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerSetCollisionChannels, CollisionChannels) == 0x000008, "Member 'BRTool_Applicator_ServerSetCollisionChannels::CollisionChannels' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerSetComponentEnabledProp
// 0x0018 (0x0018 - 0x0000)
struct BRTool_Applicator_ServerSetComponentEnabledProp final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Applicator_ServerSetComponentEnabledProp) == 0x000008, "Wrong alignment on BRTool_Applicator_ServerSetComponentEnabledProp");
static_assert(sizeof(BRTool_Applicator_ServerSetComponentEnabledProp) == 0x000018, "Wrong size on BRTool_Applicator_ServerSetComponentEnabledProp");
static_assert(offsetof(BRTool_Applicator_ServerSetComponentEnabledProp, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_ServerSetComponentEnabledProp::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerSetComponentEnabledProp, Component) == 0x000008, "Member 'BRTool_Applicator_ServerSetComponentEnabledProp::Component' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerSetComponentEnabledProp, bEnabled) == 0x000010, "Member 'BRTool_Applicator_ServerSetComponentEnabledProp::bEnabled' has a wrong offset!");

// Function Brickadia.BRTool_Applicator.ServerSetVisible
// 0x000C (0x000C - 0x0000)
struct BRTool_Applicator_ServerSetVisible final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Applicator_ServerSetVisible) == 0x000004, "Wrong alignment on BRTool_Applicator_ServerSetVisible");
static_assert(sizeof(BRTool_Applicator_ServerSetVisible) == 0x00000C, "Wrong size on BRTool_Applicator_ServerSetVisible");
static_assert(offsetof(BRTool_Applicator_ServerSetVisible, BrickHandle) == 0x000000, "Member 'BRTool_Applicator_ServerSetVisible::BrickHandle' has a wrong offset!");
static_assert(offsetof(BRTool_Applicator_ServerSetVisible, bVisible) == 0x000008, "Member 'BRTool_Applicator_ServerSetVisible::bVisible' has a wrong offset!");

// Function Brickadia.BRTool_Hammer.HammerBrick
// 0x0018 (0x0018 - 0x0000)
struct BRTool_Hammer_HammerBrick final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Hammer_HammerBrick) == 0x000008, "Wrong alignment on BRTool_Hammer_HammerBrick");
static_assert(sizeof(BRTool_Hammer_HammerBrick) == 0x000018, "Wrong size on BRTool_Hammer_HammerBrick");
static_assert(offsetof(BRTool_Hammer_HammerBrick, Location) == 0x000000, "Member 'BRTool_Hammer_HammerBrick::Location' has a wrong offset!");

// Function Brickadia.BRTool_Hammer.HammerEntity
// 0x0018 (0x0018 - 0x0000)
struct BRTool_Hammer_HammerEntity final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Hammer_HammerEntity) == 0x000008, "Wrong alignment on BRTool_Hammer_HammerEntity");
static_assert(sizeof(BRTool_Hammer_HammerEntity) == 0x000018, "Wrong size on BRTool_Hammer_HammerEntity");
static_assert(offsetof(BRTool_Hammer_HammerEntity, Location) == 0x000000, "Member 'BRTool_Hammer_HammerEntity::Location' has a wrong offset!");

// Function Brickadia.BRTool_Hammer.HammerHit
// 0x0038 (0x0038 - 0x0000)
struct BRTool_Hammer_HammerHit final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Hammer_HammerHit) == 0x000008, "Wrong alignment on BRTool_Hammer_HammerHit");
static_assert(sizeof(BRTool_Hammer_HammerHit) == 0x000038, "Wrong size on BRTool_Hammer_HammerHit");
static_assert(offsetof(BRTool_Hammer_HammerHit, bHit) == 0x000000, "Member 'BRTool_Hammer_HammerHit::bHit' has a wrong offset!");
static_assert(offsetof(BRTool_Hammer_HammerHit, HitLocation) == 0x000008, "Member 'BRTool_Hammer_HammerHit::HitLocation' has a wrong offset!");
static_assert(offsetof(BRTool_Hammer_HammerHit, HitNormal) == 0x000020, "Member 'BRTool_Hammer_HammerHit::HitNormal' has a wrong offset!");

// Function Brickadia.BRTool_Hammer.MulticastHammerBrick
// 0x0018 (0x0018 - 0x0000)
struct BRTool_Hammer_MulticastHammerBrick final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Hammer_MulticastHammerBrick) == 0x000008, "Wrong alignment on BRTool_Hammer_MulticastHammerBrick");
static_assert(sizeof(BRTool_Hammer_MulticastHammerBrick) == 0x000018, "Wrong size on BRTool_Hammer_MulticastHammerBrick");
static_assert(offsetof(BRTool_Hammer_MulticastHammerBrick, Location) == 0x000000, "Member 'BRTool_Hammer_MulticastHammerBrick::Location' has a wrong offset!");

// Function Brickadia.BRTool_Hammer.MulticastHammerEntity
// 0x0018 (0x0018 - 0x0000)
struct BRTool_Hammer_MulticastHammerEntity final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Hammer_MulticastHammerEntity) == 0x000008, "Wrong alignment on BRTool_Hammer_MulticastHammerEntity");
static_assert(sizeof(BRTool_Hammer_MulticastHammerEntity) == 0x000018, "Wrong size on BRTool_Hammer_MulticastHammerEntity");
static_assert(offsetof(BRTool_Hammer_MulticastHammerEntity, Location) == 0x000000, "Member 'BRTool_Hammer_MulticastHammerEntity::Location' has a wrong offset!");

// Function Brickadia.BRTool_Hammer.MulticastHammerHit
// 0x0038 (0x0038 - 0x0000)
struct BRTool_Hammer_MulticastHammerHit final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Hammer_MulticastHammerHit) == 0x000008, "Wrong alignment on BRTool_Hammer_MulticastHammerHit");
static_assert(sizeof(BRTool_Hammer_MulticastHammerHit) == 0x000038, "Wrong size on BRTool_Hammer_MulticastHammerHit");
static_assert(offsetof(BRTool_Hammer_MulticastHammerHit, bHit) == 0x000000, "Member 'BRTool_Hammer_MulticastHammerHit::bHit' has a wrong offset!");
static_assert(offsetof(BRTool_Hammer_MulticastHammerHit, HitLocation) == 0x000008, "Member 'BRTool_Hammer_MulticastHammerHit::HitLocation' has a wrong offset!");
static_assert(offsetof(BRTool_Hammer_MulticastHammerHit, HitNormal) == 0x000020, "Member 'BRTool_Hammer_MulticastHammerHit::HitNormal' has a wrong offset!");

// Function Brickadia.BRTool_Hammer.ServerHammerBrick
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Hammer_ServerHammerBrick final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Hammer_ServerHammerBrick) == 0x000004, "Wrong alignment on BRTool_Hammer_ServerHammerBrick");
static_assert(sizeof(BRTool_Hammer_ServerHammerBrick) == 0x000008, "Wrong size on BRTool_Hammer_ServerHammerBrick");
static_assert(offsetof(BRTool_Hammer_ServerHammerBrick, BrickHandle) == 0x000000, "Member 'BRTool_Hammer_ServerHammerBrick::BrickHandle' has a wrong offset!");

// Function Brickadia.BRTool_Hammer.ServerHammerEntity
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Hammer_ServerHammerEntity final
{
public:
	class AActor*                                 ENTITY;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Hammer_ServerHammerEntity) == 0x000008, "Wrong alignment on BRTool_Hammer_ServerHammerEntity");
static_assert(sizeof(BRTool_Hammer_ServerHammerEntity) == 0x000008, "Wrong size on BRTool_Hammer_ServerHammerEntity");
static_assert(offsetof(BRTool_Hammer_ServerHammerEntity, ENTITY) == 0x000000, "Member 'BRTool_Hammer_ServerHammerEntity::ENTITY' has a wrong offset!");

// Function Brickadia.BRTool_Hammer.ServerHammerHit
// 0x0038 (0x0038 - 0x0000)
struct BRTool_Hammer_ServerHammerHit final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Hammer_ServerHammerHit) == 0x000008, "Wrong alignment on BRTool_Hammer_ServerHammerHit");
static_assert(sizeof(BRTool_Hammer_ServerHammerHit) == 0x000038, "Wrong size on BRTool_Hammer_ServerHammerHit");
static_assert(offsetof(BRTool_Hammer_ServerHammerHit, bHit) == 0x000000, "Member 'BRTool_Hammer_ServerHammerHit::bHit' has a wrong offset!");
static_assert(offsetof(BRTool_Hammer_ServerHammerHit, HitLocation) == 0x000008, "Member 'BRTool_Hammer_ServerHammerHit::HitLocation' has a wrong offset!");
static_assert(offsetof(BRTool_Hammer_ServerHammerHit, HitNormal) == 0x000020, "Member 'BRTool_Hammer_ServerHammerHit::HitNormal' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.ClientPlaySound
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Manipulator_ClientPlaySound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_ClientPlaySound) == 0x000008, "Wrong alignment on BRTool_Manipulator_ClientPlaySound");
static_assert(sizeof(BRTool_Manipulator_ClientPlaySound) == 0x000008, "Wrong size on BRTool_Manipulator_ClientPlaySound");
static_assert(offsetof(BRTool_Manipulator_ClientPlaySound, Sound) == 0x000000, "Member 'BRTool_Manipulator_ClientPlaySound::Sound' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.HasPhysicsGrabbedObject
// 0x0001 (0x0001 - 0x0000)
struct BRTool_Manipulator_HasPhysicsGrabbedObject final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_HasPhysicsGrabbedObject) == 0x000001, "Wrong alignment on BRTool_Manipulator_HasPhysicsGrabbedObject");
static_assert(sizeof(BRTool_Manipulator_HasPhysicsGrabbedObject) == 0x000001, "Wrong size on BRTool_Manipulator_HasPhysicsGrabbedObject");
static_assert(offsetof(BRTool_Manipulator_HasPhysicsGrabbedObject, ReturnValue) == 0x000000, "Member 'BRTool_Manipulator_HasPhysicsGrabbedObject::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.LineTraceForComponent
// 0x0100 (0x0100 - 0x0000)
struct BRTool_Manipulator_LineTraceForComponent final
{
public:
	bool                                          bValidHit;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0008(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x00F8(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_LineTraceForComponent) == 0x000008, "Wrong alignment on BRTool_Manipulator_LineTraceForComponent");
static_assert(sizeof(BRTool_Manipulator_LineTraceForComponent) == 0x000100, "Wrong size on BRTool_Manipulator_LineTraceForComponent");
static_assert(offsetof(BRTool_Manipulator_LineTraceForComponent, bValidHit) == 0x000000, "Member 'BRTool_Manipulator_LineTraceForComponent::bValidHit' has a wrong offset!");
static_assert(offsetof(BRTool_Manipulator_LineTraceForComponent, HitResult) == 0x000008, "Member 'BRTool_Manipulator_LineTraceForComponent::HitResult' has a wrong offset!");
static_assert(offsetof(BRTool_Manipulator_LineTraceForComponent, ReturnValue) == 0x0000F8, "Member 'BRTool_Manipulator_LineTraceForComponent::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.MulticastSetGrabObject
// 0x0028 (0x0028 - 0x0000)
struct BRTool_Manipulator_MulticastSetGrabObject final
{
public:
	class UPrimitiveComponent*                    Grabbed;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableGravity;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Manipulator_MulticastSetGrabObject) == 0x000008, "Wrong alignment on BRTool_Manipulator_MulticastSetGrabObject");
static_assert(sizeof(BRTool_Manipulator_MulticastSetGrabObject) == 0x000028, "Wrong size on BRTool_Manipulator_MulticastSetGrabObject");
static_assert(offsetof(BRTool_Manipulator_MulticastSetGrabObject, Grabbed) == 0x000000, "Member 'BRTool_Manipulator_MulticastSetGrabObject::Grabbed' has a wrong offset!");
static_assert(offsetof(BRTool_Manipulator_MulticastSetGrabObject, Offset) == 0x000008, "Member 'BRTool_Manipulator_MulticastSetGrabObject::Offset' has a wrong offset!");
static_assert(offsetof(BRTool_Manipulator_MulticastSetGrabObject, bDisableGravity) == 0x000020, "Member 'BRTool_Manipulator_MulticastSetGrabObject::bDisableGravity' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.OnTogglePin
// 0x0001 (0x0001 - 0x0000)
struct BRTool_Manipulator_OnTogglePin final
{
public:
	bool                                          newPin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_OnTogglePin) == 0x000001, "Wrong alignment on BRTool_Manipulator_OnTogglePin");
static_assert(sizeof(BRTool_Manipulator_OnTogglePin) == 0x000001, "Wrong size on BRTool_Manipulator_OnTogglePin");
static_assert(offsetof(BRTool_Manipulator_OnTogglePin, newPin) == 0x000000, "Member 'BRTool_Manipulator_OnTogglePin::newPin' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.ServerAttachGrabbedObject
// 0x0090 (0x0090 - 0x0000)
struct BRTool_Manipulator_ServerAttachGrabbedObject final
{
public:
	struct FBRManipulatorAttachJointData          AttachData;                                        // 0x0000(0x0090)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_ServerAttachGrabbedObject) == 0x000010, "Wrong alignment on BRTool_Manipulator_ServerAttachGrabbedObject");
static_assert(sizeof(BRTool_Manipulator_ServerAttachGrabbedObject) == 0x000090, "Wrong size on BRTool_Manipulator_ServerAttachGrabbedObject");
static_assert(offsetof(BRTool_Manipulator_ServerAttachGrabbedObject, AttachData) == 0x000000, "Member 'BRTool_Manipulator_ServerAttachGrabbedObject::AttachData' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.ServerFreezeObject
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Manipulator_ServerFreezeObject final
{
public:
	class UPrimitiveComponent*                    TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_ServerFreezeObject) == 0x000008, "Wrong alignment on BRTool_Manipulator_ServerFreezeObject");
static_assert(sizeof(BRTool_Manipulator_ServerFreezeObject) == 0x000008, "Wrong size on BRTool_Manipulator_ServerFreezeObject");
static_assert(offsetof(BRTool_Manipulator_ServerFreezeObject, TARGET) == 0x000000, "Member 'BRTool_Manipulator_ServerFreezeObject::TARGET' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.ServerGrabObject
// 0x0030 (0x0030 - 0x0000)
struct BRTool_Manipulator_ServerGrabObject final
{
public:
	bool                                          bRequestLockRot;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    RayObjct;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistance;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Manipulator_ServerGrabObject) == 0x000008, "Wrong alignment on BRTool_Manipulator_ServerGrabObject");
static_assert(sizeof(BRTool_Manipulator_ServerGrabObject) == 0x000030, "Wrong size on BRTool_Manipulator_ServerGrabObject");
static_assert(offsetof(BRTool_Manipulator_ServerGrabObject, bRequestLockRot) == 0x000000, "Member 'BRTool_Manipulator_ServerGrabObject::bRequestLockRot' has a wrong offset!");
static_assert(offsetof(BRTool_Manipulator_ServerGrabObject, RayObjct) == 0x000008, "Member 'BRTool_Manipulator_ServerGrabObject::RayObjct' has a wrong offset!");
static_assert(offsetof(BRTool_Manipulator_ServerGrabObject, HitLocation) == 0x000010, "Member 'BRTool_Manipulator_ServerGrabObject::HitLocation' has a wrong offset!");
static_assert(offsetof(BRTool_Manipulator_ServerGrabObject, HitDistance) == 0x000028, "Member 'BRTool_Manipulator_ServerGrabObject::HitDistance' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.ServerProcessMousePitch
// 0x0004 (0x0004 - 0x0000)
struct BRTool_Manipulator_ServerProcessMousePitch final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_ServerProcessMousePitch) == 0x000004, "Wrong alignment on BRTool_Manipulator_ServerProcessMousePitch");
static_assert(sizeof(BRTool_Manipulator_ServerProcessMousePitch) == 0x000004, "Wrong size on BRTool_Manipulator_ServerProcessMousePitch");
static_assert(offsetof(BRTool_Manipulator_ServerProcessMousePitch, Pitch) == 0x000000, "Member 'BRTool_Manipulator_ServerProcessMousePitch::Pitch' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.ServerProcessMouseScroll
// 0x0004 (0x0004 - 0x0000)
struct BRTool_Manipulator_ServerProcessMouseScroll final
{
public:
	float                                         Scroll;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_ServerProcessMouseScroll) == 0x000004, "Wrong alignment on BRTool_Manipulator_ServerProcessMouseScroll");
static_assert(sizeof(BRTool_Manipulator_ServerProcessMouseScroll) == 0x000004, "Wrong size on BRTool_Manipulator_ServerProcessMouseScroll");
static_assert(offsetof(BRTool_Manipulator_ServerProcessMouseScroll, Scroll) == 0x000000, "Member 'BRTool_Manipulator_ServerProcessMouseScroll::Scroll' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.ServerProcessMouseYaw
// 0x0004 (0x0004 - 0x0000)
struct BRTool_Manipulator_ServerProcessMouseYaw final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_ServerProcessMouseYaw) == 0x000004, "Wrong alignment on BRTool_Manipulator_ServerProcessMouseYaw");
static_assert(sizeof(BRTool_Manipulator_ServerProcessMouseYaw) == 0x000004, "Wrong size on BRTool_Manipulator_ServerProcessMouseYaw");
static_assert(offsetof(BRTool_Manipulator_ServerProcessMouseYaw, Yaw) == 0x000000, "Member 'BRTool_Manipulator_ServerProcessMouseYaw::Yaw' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.ServerRelease
// 0x00A0 (0x00A0 - 0x0000)
struct BRTool_Manipulator_ServerRelease final
{
public:
	bool                                          bLaunch;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBRManipulatorAttachJointData          ClientAttachJointData;                             // 0x0010(0x0090)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_ServerRelease) == 0x000010, "Wrong alignment on BRTool_Manipulator_ServerRelease");
static_assert(sizeof(BRTool_Manipulator_ServerRelease) == 0x0000A0, "Wrong size on BRTool_Manipulator_ServerRelease");
static_assert(offsetof(BRTool_Manipulator_ServerRelease, bLaunch) == 0x000000, "Member 'BRTool_Manipulator_ServerRelease::bLaunch' has a wrong offset!");
static_assert(offsetof(BRTool_Manipulator_ServerRelease, ClientAttachJointData) == 0x000010, "Member 'BRTool_Manipulator_ServerRelease::ClientAttachJointData' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.UpdateSpring
// 0x0008 (0x0008 - 0x0000)
struct BRTool_Manipulator_UpdateSpring final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_UpdateSpring) == 0x000008, "Wrong alignment on BRTool_Manipulator_UpdateSpring");
static_assert(sizeof(BRTool_Manipulator_UpdateSpring) == 0x000008, "Wrong size on BRTool_Manipulator_UpdateSpring");
static_assert(offsetof(BRTool_Manipulator_UpdateSpring, Component) == 0x000000, "Member 'BRTool_Manipulator_UpdateSpring::Component' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.UseToggleMode
// 0x0001 (0x0001 - 0x0000)
struct BRTool_Manipulator_UseToggleMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_UseToggleMode) == 0x000001, "Wrong alignment on BRTool_Manipulator_UseToggleMode");
static_assert(sizeof(BRTool_Manipulator_UseToggleMode) == 0x000001, "Wrong size on BRTool_Manipulator_UseToggleMode");
static_assert(offsetof(BRTool_Manipulator_UseToggleMode, ReturnValue) == 0x000000, "Member 'BRTool_Manipulator_UseToggleMode::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Manipulator.UseToggleModeBridge
// 0x0001 (0x0001 - 0x0000)
struct BRTool_Manipulator_UseToggleModeBridge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Manipulator_UseToggleModeBridge) == 0x000001, "Wrong alignment on BRTool_Manipulator_UseToggleModeBridge");
static_assert(sizeof(BRTool_Manipulator_UseToggleModeBridge) == 0x000001, "Wrong size on BRTool_Manipulator_UseToggleModeBridge");
static_assert(offsetof(BRTool_Manipulator_UseToggleModeBridge, ReturnValue) == 0x000000, "Member 'BRTool_Manipulator_UseToggleModeBridge::ReturnValue' has a wrong offset!");

// Function Brickadia.BRTool_Selector.ServerCaptureTemplate
// 0x0028 (0x0028 - 0x0000)
struct BRTool_Selector_ServerCaptureTemplate final
{
public:
	class UBrickGridComponent*                    TargetGrid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             SelectionCenter;                                   // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             SelectionSize;                                     // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCut;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRTool_Selector_ServerCaptureTemplate) == 0x000008, "Wrong alignment on BRTool_Selector_ServerCaptureTemplate");
static_assert(sizeof(BRTool_Selector_ServerCaptureTemplate) == 0x000028, "Wrong size on BRTool_Selector_ServerCaptureTemplate");
static_assert(offsetof(BRTool_Selector_ServerCaptureTemplate, TargetGrid) == 0x000000, "Member 'BRTool_Selector_ServerCaptureTemplate::TargetGrid' has a wrong offset!");
static_assert(offsetof(BRTool_Selector_ServerCaptureTemplate, SelectionCenter) == 0x000008, "Member 'BRTool_Selector_ServerCaptureTemplate::SelectionCenter' has a wrong offset!");
static_assert(offsetof(BRTool_Selector_ServerCaptureTemplate, SelectionSize) == 0x000014, "Member 'BRTool_Selector_ServerCaptureTemplate::SelectionSize' has a wrong offset!");
static_assert(offsetof(BRTool_Selector_ServerCaptureTemplate, bCut) == 0x000020, "Member 'BRTool_Selector_ServerCaptureTemplate::bCut' has a wrong offset!");

// Function Brickadia.BRTool_Selector.ServerDeleteSelection
// 0x0020 (0x0020 - 0x0000)
struct BRTool_Selector_ServerDeleteSelection final
{
public:
	class UBrickGridComponent*                    TargetGrid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             SelectionCenter;                                   // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             SelectionSize;                                     // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Selector_ServerDeleteSelection) == 0x000008, "Wrong alignment on BRTool_Selector_ServerDeleteSelection");
static_assert(sizeof(BRTool_Selector_ServerDeleteSelection) == 0x000020, "Wrong size on BRTool_Selector_ServerDeleteSelection");
static_assert(offsetof(BRTool_Selector_ServerDeleteSelection, TargetGrid) == 0x000000, "Member 'BRTool_Selector_ServerDeleteSelection::TargetGrid' has a wrong offset!");
static_assert(offsetof(BRTool_Selector_ServerDeleteSelection, SelectionCenter) == 0x000008, "Member 'BRTool_Selector_ServerDeleteSelection::SelectionCenter' has a wrong offset!");
static_assert(offsetof(BRTool_Selector_ServerDeleteSelection, SelectionSize) == 0x000014, "Member 'BRTool_Selector_ServerDeleteSelection::SelectionSize' has a wrong offset!");

// Function Brickadia.BRTool_Selector.ServerPasteTemplate
// 0x0001 (0x0001 - 0x0000)
struct BRTool_Selector_ServerPasteTemplate final
{
public:
	bool                                          bIntoInventory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Selector_ServerPasteTemplate) == 0x000001, "Wrong alignment on BRTool_Selector_ServerPasteTemplate");
static_assert(sizeof(BRTool_Selector_ServerPasteTemplate) == 0x000001, "Wrong size on BRTool_Selector_ServerPasteTemplate");
static_assert(offsetof(BRTool_Selector_ServerPasteTemplate, bIntoInventory) == 0x000000, "Member 'BRTool_Selector_ServerPasteTemplate::bIntoInventory' has a wrong offset!");

// Function Brickadia.BRTool_Selector.ServerSplitSelection
// 0x0020 (0x0020 - 0x0000)
struct BRTool_Selector_ServerSplitSelection final
{
public:
	class UBrickGridComponent*                    TargetGrid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             SelectionCenter;                                   // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             SelectionSize;                                     // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRTool_Selector_ServerSplitSelection) == 0x000008, "Wrong alignment on BRTool_Selector_ServerSplitSelection");
static_assert(sizeof(BRTool_Selector_ServerSplitSelection) == 0x000020, "Wrong size on BRTool_Selector_ServerSplitSelection");
static_assert(offsetof(BRTool_Selector_ServerSplitSelection, TargetGrid) == 0x000000, "Member 'BRTool_Selector_ServerSplitSelection::TargetGrid' has a wrong offset!");
static_assert(offsetof(BRTool_Selector_ServerSplitSelection, SelectionCenter) == 0x000008, "Member 'BRTool_Selector_ServerSplitSelection::SelectionCenter' has a wrong offset!");
static_assert(offsetof(BRTool_Selector_ServerSplitSelection, SelectionSize) == 0x000014, "Member 'BRTool_Selector_ServerSplitSelection::SelectionSize' has a wrong offset!");

// Function Brickadia.BRWeaponBase.ClientDebugFiringVector
// 0x0030 (0x0030 - 0x0000)
struct BRWeaponBase_ClientDebugFiringVector final
{
public:
	struct FVector                                position;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_ClientDebugFiringVector) == 0x000008, "Wrong alignment on BRWeaponBase_ClientDebugFiringVector");
static_assert(sizeof(BRWeaponBase_ClientDebugFiringVector) == 0x000030, "Wrong size on BRWeaponBase_ClientDebugFiringVector");
static_assert(offsetof(BRWeaponBase_ClientDebugFiringVector, position) == 0x000000, "Member 'BRWeaponBase_ClientDebugFiringVector::position' has a wrong offset!");
static_assert(offsetof(BRWeaponBase_ClientDebugFiringVector, Direction) == 0x000018, "Member 'BRWeaponBase_ClientDebugFiringVector::Direction' has a wrong offset!");

// Function Brickadia.BRWeaponBase.GetHomingTarget
// 0x0020 (0x0020 - 0x0000)
struct BRWeaponBase_GetHomingTarget final
{
public:
	struct FBRWeaponHomingTarget                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_GetHomingTarget) == 0x000008, "Wrong alignment on BRWeaponBase_GetHomingTarget");
static_assert(sizeof(BRWeaponBase_GetHomingTarget) == 0x000020, "Wrong size on BRWeaponBase_GetHomingTarget");
static_assert(offsetof(BRWeaponBase_GetHomingTarget, ReturnValue) == 0x000000, "Member 'BRWeaponBase_GetHomingTarget::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWeaponBase.MulticastReplicateAcceleratedExplosion
// 0x0040 (0x0040 - 0x0000)
struct BRWeaponBase_MulticastReplicateAcceleratedExplosion final
{
public:
	struct FBRWeaponProjectileExplosionRep        Info;                                              // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_MulticastReplicateAcceleratedExplosion) == 0x000008, "Wrong alignment on BRWeaponBase_MulticastReplicateAcceleratedExplosion");
static_assert(sizeof(BRWeaponBase_MulticastReplicateAcceleratedExplosion) == 0x000040, "Wrong size on BRWeaponBase_MulticastReplicateAcceleratedExplosion");
static_assert(offsetof(BRWeaponBase_MulticastReplicateAcceleratedExplosion, Info) == 0x000000, "Member 'BRWeaponBase_MulticastReplicateAcceleratedExplosion::Info' has a wrong offset!");

// Function Brickadia.BRWeaponBase.MulticastReplicateAcceleratedExplosionWithSeed
// 0x0048 (0x0048 - 0x0000)
struct BRWeaponBase_MulticastReplicateAcceleratedExplosionWithSeed final
{
public:
	struct FBRWeaponProjectileExplosionRepWithSeed Info;                                              // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_MulticastReplicateAcceleratedExplosionWithSeed) == 0x000008, "Wrong alignment on BRWeaponBase_MulticastReplicateAcceleratedExplosionWithSeed");
static_assert(sizeof(BRWeaponBase_MulticastReplicateAcceleratedExplosionWithSeed) == 0x000048, "Wrong size on BRWeaponBase_MulticastReplicateAcceleratedExplosionWithSeed");
static_assert(offsetof(BRWeaponBase_MulticastReplicateAcceleratedExplosionWithSeed, Info) == 0x000000, "Member 'BRWeaponBase_MulticastReplicateAcceleratedExplosionWithSeed::Info' has a wrong offset!");

// Function Brickadia.BRWeaponBase.MulticastReplicateAcceleratedMeleeExplosion
// 0x0038 (0x0038 - 0x0000)
struct BRWeaponBase_MulticastReplicateAcceleratedMeleeExplosion final
{
public:
	struct FBRWeaponMeleeExplosionRep             Info;                                              // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_MulticastReplicateAcceleratedMeleeExplosion) == 0x000008, "Wrong alignment on BRWeaponBase_MulticastReplicateAcceleratedMeleeExplosion");
static_assert(sizeof(BRWeaponBase_MulticastReplicateAcceleratedMeleeExplosion) == 0x000038, "Wrong size on BRWeaponBase_MulticastReplicateAcceleratedMeleeExplosion");
static_assert(offsetof(BRWeaponBase_MulticastReplicateAcceleratedMeleeExplosion, Info) == 0x000000, "Member 'BRWeaponBase_MulticastReplicateAcceleratedMeleeExplosion::Info' has a wrong offset!");

// Function Brickadia.BRWeaponBase.MulticastReplicateAcceleratedProjectiles
// 0x0038 (0x0038 - 0x0000)
struct BRWeaponBase_MulticastReplicateAcceleratedProjectiles final
{
public:
	struct FBRWeaponProjectileSpawnRep            Info;                                              // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_MulticastReplicateAcceleratedProjectiles) == 0x000008, "Wrong alignment on BRWeaponBase_MulticastReplicateAcceleratedProjectiles");
static_assert(sizeof(BRWeaponBase_MulticastReplicateAcceleratedProjectiles) == 0x000038, "Wrong size on BRWeaponBase_MulticastReplicateAcceleratedProjectiles");
static_assert(offsetof(BRWeaponBase_MulticastReplicateAcceleratedProjectiles, Info) == 0x000000, "Member 'BRWeaponBase_MulticastReplicateAcceleratedProjectiles::Info' has a wrong offset!");

// Function Brickadia.BRWeaponBase.MulticastReplicateAcceleratedProjectilesWithSeed
// 0x0040 (0x0040 - 0x0000)
struct BRWeaponBase_MulticastReplicateAcceleratedProjectilesWithSeed final
{
public:
	struct FBRWeaponProjectileSpawnRepWithSeed    Info;                                              // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_MulticastReplicateAcceleratedProjectilesWithSeed) == 0x000008, "Wrong alignment on BRWeaponBase_MulticastReplicateAcceleratedProjectilesWithSeed");
static_assert(sizeof(BRWeaponBase_MulticastReplicateAcceleratedProjectilesWithSeed) == 0x000040, "Wrong size on BRWeaponBase_MulticastReplicateAcceleratedProjectilesWithSeed");
static_assert(offsetof(BRWeaponBase_MulticastReplicateAcceleratedProjectilesWithSeed, Info) == 0x000000, "Member 'BRWeaponBase_MulticastReplicateAcceleratedProjectilesWithSeed::Info' has a wrong offset!");

// Function Brickadia.BRWeaponBase.ServerSetPendingHomingTarget
// 0x0020 (0x0020 - 0x0000)
struct BRWeaponBase_ServerSetPendingHomingTarget final
{
public:
	struct FBRWeaponHomingTarget                  HomingTarget;                                      // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_ServerSetPendingHomingTarget) == 0x000008, "Wrong alignment on BRWeaponBase_ServerSetPendingHomingTarget");
static_assert(sizeof(BRWeaponBase_ServerSetPendingHomingTarget) == 0x000020, "Wrong size on BRWeaponBase_ServerSetPendingHomingTarget");
static_assert(offsetof(BRWeaponBase_ServerSetPendingHomingTarget, HomingTarget) == 0x000000, "Member 'BRWeaponBase_ServerSetPendingHomingTarget::HomingTarget' has a wrong offset!");

// Function Brickadia.BRWeaponBase.SetFreezeFrame
// 0x0004 (0x0004 - 0x0000)
struct BRWeaponBase_SetFreezeFrame final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_SetFreezeFrame) == 0x000004, "Wrong alignment on BRWeaponBase_SetFreezeFrame");
static_assert(sizeof(BRWeaponBase_SetFreezeFrame) == 0x000004, "Wrong size on BRWeaponBase_SetFreezeFrame");
static_assert(offsetof(BRWeaponBase_SetFreezeFrame, Duration) == 0x000000, "Member 'BRWeaponBase_SetFreezeFrame::Duration' has a wrong offset!");

// Function Brickadia.BRWeaponBase.SetPendingHomingTarget
// 0x0020 (0x0020 - 0x0000)
struct BRWeaponBase_SetPendingHomingTarget final
{
public:
	struct FBRWeaponHomingTarget                  HomingTarget;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_SetPendingHomingTarget) == 0x000008, "Wrong alignment on BRWeaponBase_SetPendingHomingTarget");
static_assert(sizeof(BRWeaponBase_SetPendingHomingTarget) == 0x000020, "Wrong size on BRWeaponBase_SetPendingHomingTarget");
static_assert(offsetof(BRWeaponBase_SetPendingHomingTarget, HomingTarget) == 0x000000, "Member 'BRWeaponBase_SetPendingHomingTarget::HomingTarget' has a wrong offset!");

// Function Brickadia.BRWeaponBase.SetPredictedWeaponInput
// 0x0002 (0x0002 - 0x0000)
struct BRWeaponBase_SetPredictedWeaponInput final
{
public:
	EBRWeaponInputKeys                            Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPressed;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWeaponBase_SetPredictedWeaponInput) == 0x000001, "Wrong alignment on BRWeaponBase_SetPredictedWeaponInput");
static_assert(sizeof(BRWeaponBase_SetPredictedWeaponInput) == 0x000002, "Wrong size on BRWeaponBase_SetPredictedWeaponInput");
static_assert(offsetof(BRWeaponBase_SetPredictedWeaponInput, Input) == 0x000000, "Member 'BRWeaponBase_SetPredictedWeaponInput::Input' has a wrong offset!");
static_assert(offsetof(BRWeaponBase_SetPredictedWeaponInput, bPressed) == 0x000001, "Member 'BRWeaponBase_SetPredictedWeaponInput::bPressed' has a wrong offset!");

// Function Brickadia.BRWeaponBase.CheckForFiringBlock
// 0x0020 (0x0020 - 0x0000)
struct BRWeaponBase_CheckForFiringBlock final
{
public:
	struct FVector                                OutErrorLocation;                                  // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRWeaponBase_CheckForFiringBlock) == 0x000008, "Wrong alignment on BRWeaponBase_CheckForFiringBlock");
static_assert(sizeof(BRWeaponBase_CheckForFiringBlock) == 0x000020, "Wrong size on BRWeaponBase_CheckForFiringBlock");
static_assert(offsetof(BRWeaponBase_CheckForFiringBlock, OutErrorLocation) == 0x000000, "Member 'BRWeaponBase_CheckForFiringBlock::OutErrorLocation' has a wrong offset!");
static_assert(offsetof(BRWeaponBase_CheckForFiringBlock, ReturnValue) == 0x000018, "Member 'BRWeaponBase_CheckForFiringBlock::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWeaponResourceSubsystem.GetPlayerSlotFor
// 0x0010 (0x0010 - 0x0000)
struct BRWeaponResourceSubsystem_GetPlayerSlotFor final
{
public:
	class UBRWeaponResource*                      Resource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRWeaponResourceSubsystem_GetPlayerSlotFor) == 0x000008, "Wrong alignment on BRWeaponResourceSubsystem_GetPlayerSlotFor");
static_assert(sizeof(BRWeaponResourceSubsystem_GetPlayerSlotFor) == 0x000010, "Wrong size on BRWeaponResourceSubsystem_GetPlayerSlotFor");
static_assert(offsetof(BRWeaponResourceSubsystem_GetPlayerSlotFor, Resource) == 0x000000, "Member 'BRWeaponResourceSubsystem_GetPlayerSlotFor::Resource' has a wrong offset!");
static_assert(offsetof(BRWeaponResourceSubsystem_GetPlayerSlotFor, ReturnValue) == 0x000008, "Member 'BRWeaponResourceSubsystem_GetPlayerSlotFor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWorldBrowserDialog.OnEnvironmentLoadRequested
// 0x0010 (0x0010 - 0x0000)
struct BRWorldBrowserDialog_OnEnvironmentLoadRequested final
{
public:
	class FString                                 Environment;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWorldBrowserDialog_OnEnvironmentLoadRequested) == 0x000008, "Wrong alignment on BRWorldBrowserDialog_OnEnvironmentLoadRequested");
static_assert(sizeof(BRWorldBrowserDialog_OnEnvironmentLoadRequested) == 0x000010, "Wrong size on BRWorldBrowserDialog_OnEnvironmentLoadRequested");
static_assert(offsetof(BRWorldBrowserDialog_OnEnvironmentLoadRequested, Environment) == 0x000000, "Member 'BRWorldBrowserDialog_OnEnvironmentLoadRequested::Environment' has a wrong offset!");

// Function Brickadia.BRWorldBrowserDialog.OnWorldLoadRequested
// 0x0018 (0x0018 - 0x0000)
struct BRWorldBrowserDialog_OnWorldLoadRequested final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteable;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRWorldBrowserDialog_OnWorldLoadRequested) == 0x000008, "Wrong alignment on BRWorldBrowserDialog_OnWorldLoadRequested");
static_assert(sizeof(BRWorldBrowserDialog_OnWorldLoadRequested) == 0x000018, "Wrong size on BRWorldBrowserDialog_OnWorldLoadRequested");
static_assert(offsetof(BRWorldBrowserDialog_OnWorldLoadRequested, FilePath) == 0x000000, "Member 'BRWorldBrowserDialog_OnWorldLoadRequested::FilePath' has a wrong offset!");
static_assert(offsetof(BRWorldBrowserDialog_OnWorldLoadRequested, bWriteable) == 0x000010, "Member 'BRWorldBrowserDialog_OnWorldLoadRequested::bWriteable' has a wrong offset!");

// Function Brickadia.ColorWheel.SetValue
// 0x0010 (0x0010 - 0x0000)
struct ColorWheel_SetValue final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColorWheel_SetValue) == 0x000004, "Wrong alignment on ColorWheel_SetValue");
static_assert(sizeof(ColorWheel_SetValue) == 0x000010, "Wrong size on ColorWheel_SetValue");
static_assert(offsetof(ColorWheel_SetValue, InValue) == 0x000000, "Member 'ColorWheel_SetValue::InValue' has a wrong offset!");

// Function Brickadia.ColorWheel.GetValue
// 0x0010 (0x0010 - 0x0000)
struct ColorWheel_GetValue final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColorWheel_GetValue) == 0x000004, "Wrong alignment on ColorWheel_GetValue");
static_assert(sizeof(ColorWheel_GetValue) == 0x000010, "Wrong size on ColorWheel_GetValue");
static_assert(offsetof(ColorWheel_GetValue, ReturnValue) == 0x000000, "Member 'ColorWheel_GetValue::ReturnValue' has a wrong offset!");

// Function Brickadia.AsyncActionTwoButtonsDialog.CreateTwoButtonsDialog
// 0x0078 (0x0078 - 0x0000)
struct AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage1;                                    // 0x0028(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage2;                                    // 0x0038(0x0010)(Parm, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle1;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle2;                                      // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ButtonIcon1_0;                                     // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ButtonIcon2_0;                                     // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRTwoButtonsDialogBase>    DialogClass_0;                                     // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEscapeDialog;                                // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncActionTwoButtonsDialog*           ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog) == 0x000008, "Wrong alignment on AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog");
static_assert(sizeof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog) == 0x000078, "Wrong size on AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, WorldContextObject) == 0x000000, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, Title) == 0x000008, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::Title' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, Message) == 0x000018, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::Message' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, ButtonMessage1) == 0x000028, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::ButtonMessage1' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, ButtonMessage2) == 0x000038, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::ButtonMessage2' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, ButtonStyle1) == 0x000048, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::ButtonStyle1' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, ButtonStyle2) == 0x000049, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::ButtonStyle2' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, ButtonIcon1_0) == 0x000050, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::ButtonIcon1_0' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, ButtonIcon2_0) == 0x000058, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::ButtonIcon2_0' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, DialogClass_0) == 0x000060, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::DialogClass_0' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, bAllowEscapeDialog) == 0x000068, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::bAllowEscapeDialog' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog, ReturnValue) == 0x000070, "Member 'AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog::ReturnValue' has a wrong offset!");

// Function Brickadia.AsyncActionTwoButtonsDialog.QuickCreateTwoButtonsDialog
// 0x0070 (0x0070 - 0x0000)
struct AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage1;                                    // 0x0028(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage2;                                    // 0x0038(0x0010)(Parm, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle1;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle2;                                      // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ButtonIcon1_0;                                     // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ButtonIcon2_0;                                     // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEscapeDialog;                                // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncActionTwoButtonsDialog*           ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog) == 0x000008, "Wrong alignment on AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog");
static_assert(sizeof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog) == 0x000070, "Wrong size on AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, WorldContextObject) == 0x000000, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, Title) == 0x000008, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::Title' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, Message) == 0x000018, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::Message' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, ButtonMessage1) == 0x000028, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::ButtonMessage1' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, ButtonMessage2) == 0x000038, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::ButtonMessage2' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, ButtonStyle1) == 0x000048, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::ButtonStyle1' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, ButtonStyle2) == 0x000049, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::ButtonStyle2' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, ButtonIcon1_0) == 0x000050, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::ButtonIcon1_0' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, ButtonIcon2_0) == 0x000058, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::ButtonIcon2_0' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, bAllowEscapeDialog) == 0x000060, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::bAllowEscapeDialog' has a wrong offset!");
static_assert(offsetof(AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog, ReturnValue) == 0x000068, "Member 'AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog::ReturnValue' has a wrong offset!");

// Function Brickadia.AsyncActionThreeButtonsDialog.CreateThreeButtonsDialog
// 0x0090 (0x0090 - 0x0000)
struct AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage1;                                    // 0x0028(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage2;                                    // 0x0038(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage3;                                    // 0x0048(0x0010)(Parm, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle1;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle2;                                      // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle3;                                      // 0x005A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ButtonIcon1_0;                                     // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ButtonIcon2_0;                                     // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ButtonIcon3_0;                                     // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRThreeButtonsDialogBase>  DialogClass_0;                                     // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEscapeDialog;                                // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncActionThreeButtonsDialog*         ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog) == 0x000008, "Wrong alignment on AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog");
static_assert(sizeof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog) == 0x000090, "Wrong size on AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, WorldContextObject) == 0x000000, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, Title) == 0x000008, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::Title' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, Message) == 0x000018, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::Message' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, ButtonMessage1) == 0x000028, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::ButtonMessage1' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, ButtonMessage2) == 0x000038, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::ButtonMessage2' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, ButtonMessage3) == 0x000048, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::ButtonMessage3' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, ButtonStyle1) == 0x000058, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::ButtonStyle1' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, ButtonStyle2) == 0x000059, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::ButtonStyle2' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, ButtonStyle3) == 0x00005A, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::ButtonStyle3' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, ButtonIcon1_0) == 0x000060, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::ButtonIcon1_0' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, ButtonIcon2_0) == 0x000068, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::ButtonIcon2_0' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, ButtonIcon3_0) == 0x000070, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::ButtonIcon3_0' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, DialogClass_0) == 0x000078, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::DialogClass_0' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, bAllowEscapeDialog) == 0x000080, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::bAllowEscapeDialog' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog, ReturnValue) == 0x000088, "Member 'AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog::ReturnValue' has a wrong offset!");

// Function Brickadia.AsyncActionThreeButtonsDialog.QuickCreateThreeButtonsDialog
// 0x0088 (0x0088 - 0x0000)
struct AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage1;                                    // 0x0028(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage2;                                    // 0x0038(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ButtonMessage3;                                    // 0x0048(0x0010)(Parm, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle1;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle2;                                      // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRDialogButtonStyle                          ButtonStyle3;                                      // 0x005A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ButtonIcon1_0;                                     // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ButtonIcon2_0;                                     // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ButtonIcon3_0;                                     // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEscapeDialog;                                // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncActionThreeButtonsDialog*         ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog) == 0x000008, "Wrong alignment on AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog");
static_assert(sizeof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog) == 0x000088, "Wrong size on AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, WorldContextObject) == 0x000000, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, Title) == 0x000008, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::Title' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, Message) == 0x000018, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::Message' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, ButtonMessage1) == 0x000028, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::ButtonMessage1' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, ButtonMessage2) == 0x000038, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::ButtonMessage2' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, ButtonMessage3) == 0x000048, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::ButtonMessage3' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, ButtonStyle1) == 0x000058, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::ButtonStyle1' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, ButtonStyle2) == 0x000059, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::ButtonStyle2' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, ButtonStyle3) == 0x00005A, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::ButtonStyle3' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, ButtonIcon1_0) == 0x000060, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::ButtonIcon1_0' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, ButtonIcon2_0) == 0x000068, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::ButtonIcon2_0' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, ButtonIcon3_0) == 0x000070, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::ButtonIcon3_0' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, bAllowEscapeDialog) == 0x000078, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::bAllowEscapeDialog' has a wrong offset!");
static_assert(offsetof(AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog, ReturnValue) == 0x000080, "Member 'AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog::ReturnValue' has a wrong offset!");

// Function Brickadia.DualTileView.SetNumSmallItems
// 0x0004 (0x0004 - 0x0000)
struct DualTileView_SetNumSmallItems final
{
public:
	int32                                         NewNumSmallItems;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DualTileView_SetNumSmallItems) == 0x000004, "Wrong alignment on DualTileView_SetNumSmallItems");
static_assert(sizeof(DualTileView_SetNumSmallItems) == 0x000004, "Wrong size on DualTileView_SetNumSmallItems");
static_assert(offsetof(DualTileView_SetNumSmallItems, NewNumSmallItems) == 0x000000, "Member 'DualTileView_SetNumSmallItems::NewNumSmallItems' has a wrong offset!");

// Function Brickadia.DualTileView.SetSmallEntryHeight
// 0x0004 (0x0004 - 0x0000)
struct DualTileView_SetSmallEntryHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DualTileView_SetSmallEntryHeight) == 0x000004, "Wrong alignment on DualTileView_SetSmallEntryHeight");
static_assert(sizeof(DualTileView_SetSmallEntryHeight) == 0x000004, "Wrong size on DualTileView_SetSmallEntryHeight");
static_assert(offsetof(DualTileView_SetSmallEntryHeight, NewHeight) == 0x000000, "Member 'DualTileView_SetSmallEntryHeight::NewHeight' has a wrong offset!");

// Function Brickadia.DualTileView.SetSmallEntryWidth
// 0x0004 (0x0004 - 0x0000)
struct DualTileView_SetSmallEntryWidth final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DualTileView_SetSmallEntryWidth) == 0x000004, "Wrong alignment on DualTileView_SetSmallEntryWidth");
static_assert(sizeof(DualTileView_SetSmallEntryWidth) == 0x000004, "Wrong size on DualTileView_SetSmallEntryWidth");
static_assert(offsetof(DualTileView_SetSmallEntryWidth, NewWidth) == 0x000000, "Member 'DualTileView_SetSmallEntryWidth::NewWidth' has a wrong offset!");

// Function Brickadia.HatBase.GetColor
// 0x0014 (0x0014 - 0x0000)
struct HatBase_GetColor final
{
public:
	int32                                         ElementIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HatBase_GetColor) == 0x000004, "Wrong alignment on HatBase_GetColor");
static_assert(sizeof(HatBase_GetColor) == 0x000014, "Wrong size on HatBase_GetColor");
static_assert(offsetof(HatBase_GetColor, ElementIndex) == 0x000000, "Member 'HatBase_GetColor::ElementIndex' has a wrong offset!");
static_assert(offsetof(HatBase_GetColor, ReturnValue) == 0x000004, "Member 'HatBase_GetColor::ReturnValue' has a wrong offset!");

// Function Brickadia.HatBase.GetColors
// 0x0010 (0x0010 - 0x0000)
struct HatBase_GetColors final
{
public:
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HatBase_GetColors) == 0x000008, "Wrong alignment on HatBase_GetColors");
static_assert(sizeof(HatBase_GetColors) == 0x000010, "Wrong size on HatBase_GetColors");
static_assert(offsetof(HatBase_GetColors, ReturnValue) == 0x000000, "Member 'HatBase_GetColors::ReturnValue' has a wrong offset!");

// Function Brickadia.HatBase.SetColor
// 0x0014 (0x0014 - 0x0000)
struct HatBase_SetColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementIndex;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HatBase_SetColor) == 0x000004, "Wrong alignment on HatBase_SetColor");
static_assert(sizeof(HatBase_SetColor) == 0x000014, "Wrong size on HatBase_SetColor");
static_assert(offsetof(HatBase_SetColor, Color) == 0x000000, "Member 'HatBase_SetColor::Color' has a wrong offset!");
static_assert(offsetof(HatBase_SetColor, ElementIndex) == 0x000010, "Member 'HatBase_SetColor::ElementIndex' has a wrong offset!");

// Function Brickadia.HatBase.SetColors
// 0x0010 (0x0010 - 0x0000)
struct HatBase_SetColors final
{
public:
	TArray<struct FLinearColor>                   Colors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HatBase_SetColors) == 0x000008, "Wrong alignment on HatBase_SetColors");
static_assert(sizeof(HatBase_SetColors) == 0x000010, "Wrong size on HatBase_SetColors");
static_assert(offsetof(HatBase_SetColors, Colors) == 0x000000, "Member 'HatBase_SetColors::Colors' has a wrong offset!");

// Function Brickadia.HatBase.SetHatRotation
// 0x0001 (0x0001 - 0x0000)
struct HatBase_SetHatRotation final
{
public:
	EHatRotation                                  NewRotation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HatBase_SetHatRotation) == 0x000001, "Wrong alignment on HatBase_SetHatRotation");
static_assert(sizeof(HatBase_SetHatRotation) == 0x000001, "Wrong size on HatBase_SetHatRotation");
static_assert(offsetof(HatBase_SetHatRotation, NewRotation) == 0x000000, "Member 'HatBase_SetHatRotation::NewRotation' has a wrong offset!");

// Function Brickadia.HatBase.GetNumColorableSlots
// 0x0004 (0x0004 - 0x0000)
struct HatBase_GetNumColorableSlots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HatBase_GetNumColorableSlots) == 0x000004, "Wrong alignment on HatBase_GetNumColorableSlots");
static_assert(sizeof(HatBase_GetNumColorableSlots) == 0x000004, "Wrong size on HatBase_GetNumColorableSlots");
static_assert(offsetof(HatBase_GetNumColorableSlots, ReturnValue) == 0x000000, "Member 'HatBase_GetNumColorableSlots::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetMemberDestructable.Die
// 0x0020 (0x0020 - 0x0000)
struct BRRulesetMemberDestructable_Die final
{
public:
	float                                         FinalDamage;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DeathType;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DeathCauser;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetMemberDestructable_Die) == 0x000008, "Wrong alignment on BRRulesetMemberDestructable_Die");
static_assert(sizeof(BRRulesetMemberDestructable_Die) == 0x000020, "Wrong size on BRRulesetMemberDestructable_Die");
static_assert(offsetof(BRRulesetMemberDestructable_Die, FinalDamage) == 0x000000, "Member 'BRRulesetMemberDestructable_Die::FinalDamage' has a wrong offset!");
static_assert(offsetof(BRRulesetMemberDestructable_Die, DeathType) == 0x000008, "Member 'BRRulesetMemberDestructable_Die::DeathType' has a wrong offset!");
static_assert(offsetof(BRRulesetMemberDestructable_Die, InstigatedBy) == 0x000010, "Member 'BRRulesetMemberDestructable_Die::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BRRulesetMemberDestructable_Die, DeathCauser) == 0x000018, "Member 'BRRulesetMemberDestructable_Die::DeathCauser' has a wrong offset!");

// Function Brickadia.BRRulesetMemberDestructable.DieInternal
// 0x0020 (0x0020 - 0x0000)
struct BRRulesetMemberDestructable_DieInternal final
{
public:
	float                                         FinalDamage;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DeathType;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DeathCauser;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetMemberDestructable_DieInternal) == 0x000008, "Wrong alignment on BRRulesetMemberDestructable_DieInternal");
static_assert(sizeof(BRRulesetMemberDestructable_DieInternal) == 0x000020, "Wrong size on BRRulesetMemberDestructable_DieInternal");
static_assert(offsetof(BRRulesetMemberDestructable_DieInternal, FinalDamage) == 0x000000, "Member 'BRRulesetMemberDestructable_DieInternal::FinalDamage' has a wrong offset!");
static_assert(offsetof(BRRulesetMemberDestructable_DieInternal, DeathType) == 0x000008, "Member 'BRRulesetMemberDestructable_DieInternal::DeathType' has a wrong offset!");
static_assert(offsetof(BRRulesetMemberDestructable_DieInternal, InstigatedBy) == 0x000010, "Member 'BRRulesetMemberDestructable_DieInternal::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BRRulesetMemberDestructable_DieInternal, DeathCauser) == 0x000018, "Member 'BRRulesetMemberDestructable_DieInternal::DeathCauser' has a wrong offset!");

// Function Brickadia.BRRulesetMemberDestructable.TakeDamageInternal
// 0x0030 (0x0030 - 0x0000)
struct BRRulesetMemberDestructable_TakeDamageInternal final
{
public:
	float                                         DamageIn;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRulesetMemberDestructable_TakeDamageInternal) == 0x000008, "Wrong alignment on BRRulesetMemberDestructable_TakeDamageInternal");
static_assert(sizeof(BRRulesetMemberDestructable_TakeDamageInternal) == 0x000030, "Wrong size on BRRulesetMemberDestructable_TakeDamageInternal");
static_assert(offsetof(BRRulesetMemberDestructable_TakeDamageInternal, DamageIn) == 0x000000, "Member 'BRRulesetMemberDestructable_TakeDamageInternal::DamageIn' has a wrong offset!");
static_assert(offsetof(BRRulesetMemberDestructable_TakeDamageInternal, DamageEvent) == 0x000008, "Member 'BRRulesetMemberDestructable_TakeDamageInternal::DamageEvent' has a wrong offset!");
static_assert(offsetof(BRRulesetMemberDestructable_TakeDamageInternal, EventInstigator) == 0x000018, "Member 'BRRulesetMemberDestructable_TakeDamageInternal::EventInstigator' has a wrong offset!");
static_assert(offsetof(BRRulesetMemberDestructable_TakeDamageInternal, DamageCauser) == 0x000020, "Member 'BRRulesetMemberDestructable_TakeDamageInternal::DamageCauser' has a wrong offset!");
static_assert(offsetof(BRRulesetMemberDestructable_TakeDamageInternal, ReturnValue) == 0x000028, "Member 'BRRulesetMemberDestructable_TakeDamageInternal::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRulesetMemberDestructable.IsDead
// 0x0001 (0x0001 - 0x0000)
struct BRRulesetMemberDestructable_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRulesetMemberDestructable_IsDead) == 0x000001, "Wrong alignment on BRRulesetMemberDestructable_IsDead");
static_assert(sizeof(BRRulesetMemberDestructable_IsDead) == 0x000001, "Wrong size on BRRulesetMemberDestructable_IsDead");
static_assert(offsetof(BRRulesetMemberDestructable_IsDead, ReturnValue) == 0x000000, "Member 'BRRulesetMemberDestructable_IsDead::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorCategoryRowBase.AddValueWidget
// 0x0008 (0x0008 - 0x0000)
struct InspectorCategoryRowBase_AddValueWidget final
{
public:
	class UInspectorPropertyWidgetBase*           NewWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorCategoryRowBase_AddValueWidget) == 0x000008, "Wrong alignment on InspectorCategoryRowBase_AddValueWidget");
static_assert(sizeof(InspectorCategoryRowBase_AddValueWidget) == 0x000008, "Wrong size on InspectorCategoryRowBase_AddValueWidget");
static_assert(offsetof(InspectorCategoryRowBase_AddValueWidget, NewWidget) == 0x000000, "Member 'InspectorCategoryRowBase_AddValueWidget::NewWidget' has a wrong offset!");

// Function Brickadia.InspectorCategoryRowBase.OnCollapseButtonStateChanged
// 0x0001 (0x0001 - 0x0000)
struct InspectorCategoryRowBase_OnCollapseButtonStateChanged final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorCategoryRowBase_OnCollapseButtonStateChanged) == 0x000001, "Wrong alignment on InspectorCategoryRowBase_OnCollapseButtonStateChanged");
static_assert(sizeof(InspectorCategoryRowBase_OnCollapseButtonStateChanged) == 0x000001, "Wrong size on InspectorCategoryRowBase_OnCollapseButtonStateChanged");
static_assert(offsetof(InspectorCategoryRowBase_OnCollapseButtonStateChanged, bIsOpen) == 0x000000, "Member 'InspectorCategoryRowBase_OnCollapseButtonStateChanged::bIsOpen' has a wrong offset!");

// Function Brickadia.InspectorCategoryRowBase.SetCategoryRowNameText
// 0x0010 (0x0010 - 0x0000)
struct InspectorCategoryRowBase_SetCategoryRowNameText final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorCategoryRowBase_SetCategoryRowNameText) == 0x000008, "Wrong alignment on InspectorCategoryRowBase_SetCategoryRowNameText");
static_assert(sizeof(InspectorCategoryRowBase_SetCategoryRowNameText) == 0x000010, "Wrong size on InspectorCategoryRowBase_SetCategoryRowNameText");
static_assert(offsetof(InspectorCategoryRowBase_SetCategoryRowNameText, Name_0) == 0x000000, "Member 'InspectorCategoryRowBase_SetCategoryRowNameText::Name_0' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.AddCategory
// 0x0068 (0x0068 - 0x0000)
struct InspectorPanelBase_AddCategory final
{
public:
	class FName                                   CategoryFName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyDescriptorListCategory Category;                                          // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTargetForAll;                                  // 0x0038(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_AddCategory) == 0x000008, "Wrong alignment on InspectorPanelBase_AddCategory");
static_assert(sizeof(InspectorPanelBase_AddCategory) == 0x000068, "Wrong size on InspectorPanelBase_AddCategory");
static_assert(offsetof(InspectorPanelBase_AddCategory, CategoryFName) == 0x000000, "Member 'InspectorPanelBase_AddCategory::CategoryFName' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddCategory, Category) == 0x000008, "Member 'InspectorPanelBase_AddCategory::Category' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddCategory, ViewTargetForAll) == 0x000038, "Member 'InspectorPanelBase_AddCategory::ViewTargetForAll' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.AddDescriptorList
// 0x0040 (0x0040 - 0x0000)
struct InspectorPanelBase_AddDescriptorList final
{
public:
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTargetForAll;                                  // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClearFirst;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPanelBase_AddDescriptorList) == 0x000008, "Wrong alignment on InspectorPanelBase_AddDescriptorList");
static_assert(sizeof(InspectorPanelBase_AddDescriptorList) == 0x000040, "Wrong size on InspectorPanelBase_AddDescriptorList");
static_assert(offsetof(InspectorPanelBase_AddDescriptorList, ViewClass) == 0x000000, "Member 'InspectorPanelBase_AddDescriptorList::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddDescriptorList, ViewTargetForAll) == 0x000008, "Member 'InspectorPanelBase_AddDescriptorList::ViewTargetForAll' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddDescriptorList, bClearFirst) == 0x000038, "Member 'InspectorPanelBase_AddDescriptorList::bClearFirst' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.AddDescriptorList2
// 0x0040 (0x0040 - 0x0000)
struct InspectorPanelBase_AddDescriptorList2 final
{
public:
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTargetForAll;                                  // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClearFirst;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPanelBase_AddDescriptorList2) == 0x000008, "Wrong alignment on InspectorPanelBase_AddDescriptorList2");
static_assert(sizeof(InspectorPanelBase_AddDescriptorList2) == 0x000040, "Wrong size on InspectorPanelBase_AddDescriptorList2");
static_assert(offsetof(InspectorPanelBase_AddDescriptorList2, View) == 0x000000, "Member 'InspectorPanelBase_AddDescriptorList2::View' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddDescriptorList2, ViewTargetForAll) == 0x000008, "Member 'InspectorPanelBase_AddDescriptorList2::ViewTargetForAll' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddDescriptorList2, bClearFirst) == 0x000038, "Member 'InspectorPanelBase_AddDescriptorList2::bClearFirst' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.AddEmptyCategory
// 0x0028 (0x0028 - 0x0000)
struct InspectorPanelBase_AddEmptyCategory final
{
public:
	class FName                                   CategoryFName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CategoryDisplayName;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorCategoryRowBase>  WidgetClassOverride;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInspectorCategoryCollapseMode                CollapseMode;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPanelBase_AddEmptyCategory) == 0x000008, "Wrong alignment on InspectorPanelBase_AddEmptyCategory");
static_assert(sizeof(InspectorPanelBase_AddEmptyCategory) == 0x000028, "Wrong size on InspectorPanelBase_AddEmptyCategory");
static_assert(offsetof(InspectorPanelBase_AddEmptyCategory, CategoryFName) == 0x000000, "Member 'InspectorPanelBase_AddEmptyCategory::CategoryFName' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddEmptyCategory, CategoryDisplayName) == 0x000008, "Member 'InspectorPanelBase_AddEmptyCategory::CategoryDisplayName' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddEmptyCategory, WidgetClassOverride) == 0x000018, "Member 'InspectorPanelBase_AddEmptyCategory::WidgetClassOverride' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddEmptyCategory, CollapseMode) == 0x000020, "Member 'InspectorPanelBase_AddEmptyCategory::CollapseMode' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.AddInlineProperty
// 0x0040 (0x0040 - 0x0000)
struct InspectorPanelBase_AddInlineProperty final
{
public:
	class FName                                   CategoryFName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptor*           PropertyDescriptor;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_AddInlineProperty) == 0x000008, "Wrong alignment on InspectorPanelBase_AddInlineProperty");
static_assert(sizeof(InspectorPanelBase_AddInlineProperty) == 0x000040, "Wrong size on InspectorPanelBase_AddInlineProperty");
static_assert(offsetof(InspectorPanelBase_AddInlineProperty, CategoryFName) == 0x000000, "Member 'InspectorPanelBase_AddInlineProperty::CategoryFName' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddInlineProperty, PropertyDescriptor) == 0x000008, "Member 'InspectorPanelBase_AddInlineProperty::PropertyDescriptor' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddInlineProperty, ViewTarget) == 0x000010, "Member 'InspectorPanelBase_AddInlineProperty::ViewTarget' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.AddProperty
// 0x0048 (0x0048 - 0x0000)
struct InspectorPanelBase_AddProperty final
{
public:
	class FName                                   CategoryFName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptor*           PropertyDescriptor;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyRowBase>  WidgetClassOverride;                               // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_AddProperty) == 0x000008, "Wrong alignment on InspectorPanelBase_AddProperty");
static_assert(sizeof(InspectorPanelBase_AddProperty) == 0x000048, "Wrong size on InspectorPanelBase_AddProperty");
static_assert(offsetof(InspectorPanelBase_AddProperty, CategoryFName) == 0x000000, "Member 'InspectorPanelBase_AddProperty::CategoryFName' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddProperty, PropertyDescriptor) == 0x000008, "Member 'InspectorPanelBase_AddProperty::PropertyDescriptor' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddProperty, ViewTarget) == 0x000010, "Member 'InspectorPanelBase_AddProperty::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_AddProperty, WidgetClassOverride) == 0x000040, "Member 'InspectorPanelBase_AddProperty::WidgetClassOverride' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.DoLiveUpdate
// 0x0001 (0x0001 - 0x0000)
struct InspectorPanelBase_DoLiveUpdate final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_DoLiveUpdate) == 0x000001, "Wrong alignment on InspectorPanelBase_DoLiveUpdate");
static_assert(sizeof(InspectorPanelBase_DoLiveUpdate) == 0x000001, "Wrong size on InspectorPanelBase_DoLiveUpdate");
static_assert(offsetof(InspectorPanelBase_DoLiveUpdate, bForce) == 0x000000, "Member 'InspectorPanelBase_DoLiveUpdate::bForce' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.HandlePropertyCommit
// 0x0008 (0x0008 - 0x0000)
struct InspectorPanelBase_HandlePropertyCommit final
{
public:
	class UInspectorPropertyWidgetBase*           DirtyWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_HandlePropertyCommit) == 0x000008, "Wrong alignment on InspectorPanelBase_HandlePropertyCommit");
static_assert(sizeof(InspectorPanelBase_HandlePropertyCommit) == 0x000008, "Wrong size on InspectorPanelBase_HandlePropertyCommit");
static_assert(offsetof(InspectorPanelBase_HandlePropertyCommit, DirtyWidget) == 0x000000, "Member 'InspectorPanelBase_HandlePropertyCommit::DirtyWidget' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.HandlePropertyEdit
// 0x0008 (0x0008 - 0x0000)
struct InspectorPanelBase_HandlePropertyEdit final
{
public:
	class UInspectorPropertyWidgetBase*           DirtyWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_HandlePropertyEdit) == 0x000008, "Wrong alignment on InspectorPanelBase_HandlePropertyEdit");
static_assert(sizeof(InspectorPanelBase_HandlePropertyEdit) == 0x000008, "Wrong size on InspectorPanelBase_HandlePropertyEdit");
static_assert(offsetof(InspectorPanelBase_HandlePropertyEdit, DirtyWidget) == 0x000000, "Member 'InspectorPanelBase_HandlePropertyEdit::DirtyWidget' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.SetValue
// 0x0020 (0x0020 - 0x0000)
struct InspectorPanelBase_SetValue final
{
public:
	class FName                                   ValueName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                Value;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_SetValue) == 0x000008, "Wrong alignment on InspectorPanelBase_SetValue");
static_assert(sizeof(InspectorPanelBase_SetValue) == 0x000020, "Wrong size on InspectorPanelBase_SetValue");
static_assert(offsetof(InspectorPanelBase_SetValue, ValueName) == 0x000000, "Member 'InspectorPanelBase_SetValue::ValueName' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_SetValue, Value) == 0x000008, "Member 'InspectorPanelBase_SetValue::Value' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.SetValuesFromChangelist
// 0x0010 (0x0010 - 0x0000)
struct InspectorPanelBase_SetValuesFromChangelist final
{
public:
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_SetValuesFromChangelist) == 0x000008, "Wrong alignment on InspectorPanelBase_SetValuesFromChangelist");
static_assert(sizeof(InspectorPanelBase_SetValuesFromChangelist) == 0x000010, "Wrong size on InspectorPanelBase_SetValuesFromChangelist");
static_assert(offsetof(InspectorPanelBase_SetValuesFromChangelist, Changelist) == 0x000000, "Member 'InspectorPanelBase_SetValuesFromChangelist::Changelist' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.GetChangelist
// 0x0010 (0x0010 - 0x0000)
struct InspectorPanelBase_GetChangelist final
{
public:
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_GetChangelist) == 0x000008, "Wrong alignment on InspectorPanelBase_GetChangelist");
static_assert(sizeof(InspectorPanelBase_GetChangelist) == 0x000010, "Wrong size on InspectorPanelBase_GetChangelist");
static_assert(offsetof(InspectorPanelBase_GetChangelist, ReturnValue) == 0x000000, "Member 'InspectorPanelBase_GetChangelist::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.GetChangelistForLastEditedProperty
// 0x0010 (0x0010 - 0x0000)
struct InspectorPanelBase_GetChangelistForLastEditedProperty final
{
public:
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_GetChangelistForLastEditedProperty) == 0x000008, "Wrong alignment on InspectorPanelBase_GetChangelistForLastEditedProperty");
static_assert(sizeof(InspectorPanelBase_GetChangelistForLastEditedProperty) == 0x000010, "Wrong size on InspectorPanelBase_GetChangelistForLastEditedProperty");
static_assert(offsetof(InspectorPanelBase_GetChangelistForLastEditedProperty, ReturnValue) == 0x000000, "Member 'InspectorPanelBase_GetChangelistForLastEditedProperty::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.GetReverseChangelist
// 0x0010 (0x0010 - 0x0000)
struct InspectorPanelBase_GetReverseChangelist final
{
public:
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_GetReverseChangelist) == 0x000008, "Wrong alignment on InspectorPanelBase_GetReverseChangelist");
static_assert(sizeof(InspectorPanelBase_GetReverseChangelist) == 0x000010, "Wrong size on InspectorPanelBase_GetReverseChangelist");
static_assert(offsetof(InspectorPanelBase_GetReverseChangelist, ReturnValue) == 0x000000, "Member 'InspectorPanelBase_GetReverseChangelist::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.GetValue
// 0x0020 (0x0020 - 0x0000)
struct InspectorPanelBase_GetValue final
{
public:
	class FName                                   ValueName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                ValueOut;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_GetValue) == 0x000008, "Wrong alignment on InspectorPanelBase_GetValue");
static_assert(sizeof(InspectorPanelBase_GetValue) == 0x000020, "Wrong size on InspectorPanelBase_GetValue");
static_assert(offsetof(InspectorPanelBase_GetValue, ValueName) == 0x000000, "Member 'InspectorPanelBase_GetValue::ValueName' has a wrong offset!");
static_assert(offsetof(InspectorPanelBase_GetValue, ValueOut) == 0x000008, "Member 'InspectorPanelBase_GetValue::ValueOut' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.GetVerboseChangelist
// 0x0010 (0x0010 - 0x0000)
struct InspectorPanelBase_GetVerboseChangelist final
{
public:
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_GetVerboseChangelist) == 0x000008, "Wrong alignment on InspectorPanelBase_GetVerboseChangelist");
static_assert(sizeof(InspectorPanelBase_GetVerboseChangelist) == 0x000010, "Wrong size on InspectorPanelBase_GetVerboseChangelist");
static_assert(offsetof(InspectorPanelBase_GetVerboseChangelist, ReturnValue) == 0x000000, "Member 'InspectorPanelBase_GetVerboseChangelist::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.GetVerboseModifiedChangelist
// 0x0010 (0x0010 - 0x0000)
struct InspectorPanelBase_GetVerboseModifiedChangelist final
{
public:
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_GetVerboseModifiedChangelist) == 0x000008, "Wrong alignment on InspectorPanelBase_GetVerboseModifiedChangelist");
static_assert(sizeof(InspectorPanelBase_GetVerboseModifiedChangelist) == 0x000010, "Wrong size on InspectorPanelBase_GetVerboseModifiedChangelist");
static_assert(offsetof(InspectorPanelBase_GetVerboseModifiedChangelist, ReturnValue) == 0x000000, "Member 'InspectorPanelBase_GetVerboseModifiedChangelist::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPanelBase.HasChanges
// 0x0001 (0x0001 - 0x0000)
struct InspectorPanelBase_HasChanges final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPanelBase_HasChanges) == 0x000001, "Wrong alignment on InspectorPanelBase_HasChanges");
static_assert(sizeof(InspectorPanelBase_HasChanges) == 0x000001, "Wrong size on InspectorPanelBase_HasChanges");
static_assert(offsetof(InspectorPanelBase_HasChanges, ReturnValue) == 0x000000, "Member 'InspectorPanelBase_HasChanges::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyDescriptor_Enum.GetEnumOptionList
// 0x0088 (0x0088 - 0x0000)
struct InspectorPropertyDescriptor_Enum_GetEnumOptionList final
{
public:
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                WorldContext;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, uint8>                    ReturnValue;                                       // 0x0038(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyDescriptor_Enum_GetEnumOptionList) == 0x000008, "Wrong alignment on InspectorPropertyDescriptor_Enum_GetEnumOptionList");
static_assert(sizeof(InspectorPropertyDescriptor_Enum_GetEnumOptionList) == 0x000088, "Wrong size on InspectorPropertyDescriptor_Enum_GetEnumOptionList");
static_assert(offsetof(InspectorPropertyDescriptor_Enum_GetEnumOptionList, ViewTarget) == 0x000000, "Member 'InspectorPropertyDescriptor_Enum_GetEnumOptionList::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_Enum_GetEnumOptionList, WorldContext) == 0x000030, "Member 'InspectorPropertyDescriptor_Enum_GetEnumOptionList::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_Enum_GetEnumOptionList, ReturnValue) == 0x000038, "Member 'InspectorPropertyDescriptor_Enum_GetEnumOptionList::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyDescriptor_Enum.GetShouldShowEnumOption
// 0x0040 (0x0040 - 0x0000)
struct InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption final
{
public:
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                WorldContext;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Option;                                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption) == 0x000008, "Wrong alignment on InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption");
static_assert(sizeof(InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption) == 0x000040, "Wrong size on InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption");
static_assert(offsetof(InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption, ViewTarget) == 0x000000, "Member 'InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption, WorldContext) == 0x000030, "Member 'InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption, Option) == 0x000038, "Member 'InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption::Option' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption, ReturnValue) == 0x000039, "Member 'InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyDescriptor_StringListToInt.GetStringList
// 0x0048 (0x0048 - 0x0000)
struct InspectorPropertyDescriptor_StringListToInt_GetStringList final
{
public:
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                WorldContext;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyDescriptor_StringListToInt_GetStringList) == 0x000008, "Wrong alignment on InspectorPropertyDescriptor_StringListToInt_GetStringList");
static_assert(sizeof(InspectorPropertyDescriptor_StringListToInt_GetStringList) == 0x000048, "Wrong size on InspectorPropertyDescriptor_StringListToInt_GetStringList");
static_assert(offsetof(InspectorPropertyDescriptor_StringListToInt_GetStringList, ViewTarget) == 0x000000, "Member 'InspectorPropertyDescriptor_StringListToInt_GetStringList::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_StringListToInt_GetStringList, WorldContext) == 0x000030, "Member 'InspectorPropertyDescriptor_StringListToInt_GetStringList::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorPropertyDescriptor_StringListToInt_GetStringList, ReturnValue) == 0x000038, "Member 'InspectorPropertyDescriptor_StringListToInt_GetStringList::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyRowBase.AddValueWidget
// 0x0008 (0x0008 - 0x0000)
struct InspectorPropertyRowBase_AddValueWidget final
{
public:
	class UInspectorPropertyWidgetBase*           NewWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyRowBase_AddValueWidget) == 0x000008, "Wrong alignment on InspectorPropertyRowBase_AddValueWidget");
static_assert(sizeof(InspectorPropertyRowBase_AddValueWidget) == 0x000008, "Wrong size on InspectorPropertyRowBase_AddValueWidget");
static_assert(offsetof(InspectorPropertyRowBase_AddValueWidget, NewWidget) == 0x000000, "Member 'InspectorPropertyRowBase_AddValueWidget::NewWidget' has a wrong offset!");

// Function Brickadia.InspectorPropertyRowBase.OnAvailabilityChange
// 0x0001 (0x0001 - 0x0000)
struct InspectorPropertyRowBase_OnAvailabilityChange final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyRowBase_OnAvailabilityChange) == 0x000001, "Wrong alignment on InspectorPropertyRowBase_OnAvailabilityChange");
static_assert(sizeof(InspectorPropertyRowBase_OnAvailabilityChange) == 0x000001, "Wrong size on InspectorPropertyRowBase_OnAvailabilityChange");
static_assert(offsetof(InspectorPropertyRowBase_OnAvailabilityChange, bEnabled) == 0x000000, "Member 'InspectorPropertyRowBase_OnAvailabilityChange::bEnabled' has a wrong offset!");

// Function Brickadia.InspectorPropertyRowBase.SetPropertyRowNameText
// 0x0010 (0x0010 - 0x0000)
struct InspectorPropertyRowBase_SetPropertyRowNameText final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyRowBase_SetPropertyRowNameText) == 0x000008, "Wrong alignment on InspectorPropertyRowBase_SetPropertyRowNameText");
static_assert(sizeof(InspectorPropertyRowBase_SetPropertyRowNameText) == 0x000010, "Wrong size on InspectorPropertyRowBase_SetPropertyRowNameText");
static_assert(offsetof(InspectorPropertyRowBase_SetPropertyRowNameText, Name_0) == 0x000000, "Member 'InspectorPropertyRowBase_SetPropertyRowNameText::Name_0' has a wrong offset!");

// Function Brickadia.InspectorPropertyWidgetBase.BindSetToDefaultButton
// 0x0008 (0x0008 - 0x0000)
struct InspectorPropertyWidgetBase_BindSetToDefaultButton final
{
public:
	class UButton*                                ResetButtonIn;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyWidgetBase_BindSetToDefaultButton) == 0x000008, "Wrong alignment on InspectorPropertyWidgetBase_BindSetToDefaultButton");
static_assert(sizeof(InspectorPropertyWidgetBase_BindSetToDefaultButton) == 0x000008, "Wrong size on InspectorPropertyWidgetBase_BindSetToDefaultButton");
static_assert(offsetof(InspectorPropertyWidgetBase_BindSetToDefaultButton, ResetButtonIn) == 0x000000, "Member 'InspectorPropertyWidgetBase_BindSetToDefaultButton::ResetButtonIn' has a wrong offset!");

// Function Brickadia.InspectorPropertyWidgetBase.Init
// 0x0040 (0x0040 - 0x0000)
struct InspectorPropertyWidgetBase_Init final
{
public:
	class UInspectorPropertyDescriptor*           NewDescriptor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   NewViewTarget;                                     // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UInspectorPropertyRowBase*              NewContainingRow;                                  // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyWidgetBase_Init) == 0x000008, "Wrong alignment on InspectorPropertyWidgetBase_Init");
static_assert(sizeof(InspectorPropertyWidgetBase_Init) == 0x000040, "Wrong size on InspectorPropertyWidgetBase_Init");
static_assert(offsetof(InspectorPropertyWidgetBase_Init, NewDescriptor) == 0x000000, "Member 'InspectorPropertyWidgetBase_Init::NewDescriptor' has a wrong offset!");
static_assert(offsetof(InspectorPropertyWidgetBase_Init, NewViewTarget) == 0x000008, "Member 'InspectorPropertyWidgetBase_Init::NewViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorPropertyWidgetBase_Init, NewContainingRow) == 0x000038, "Member 'InspectorPropertyWidgetBase_Init::NewContainingRow' has a wrong offset!");

// Function Brickadia.InspectorPropertyWidgetBase.LiveUpdate
// 0x0002 (0x0002 - 0x0000)
struct InspectorPropertyWidgetBase_LiveUpdate final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyWidgetBase_LiveUpdate) == 0x000001, "Wrong alignment on InspectorPropertyWidgetBase_LiveUpdate");
static_assert(sizeof(InspectorPropertyWidgetBase_LiveUpdate) == 0x000002, "Wrong size on InspectorPropertyWidgetBase_LiveUpdate");
static_assert(offsetof(InspectorPropertyWidgetBase_LiveUpdate, bForce) == 0x000000, "Member 'InspectorPropertyWidgetBase_LiveUpdate::bForce' has a wrong offset!");
static_assert(offsetof(InspectorPropertyWidgetBase_LiveUpdate, ReturnValue) == 0x000001, "Member 'InspectorPropertyWidgetBase_LiveUpdate::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyWidgetBase.OnAvailabilityChange
// 0x0001 (0x0001 - 0x0000)
struct InspectorPropertyWidgetBase_OnAvailabilityChange final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyWidgetBase_OnAvailabilityChange) == 0x000001, "Wrong alignment on InspectorPropertyWidgetBase_OnAvailabilityChange");
static_assert(sizeof(InspectorPropertyWidgetBase_OnAvailabilityChange) == 0x000001, "Wrong size on InspectorPropertyWidgetBase_OnAvailabilityChange");
static_assert(offsetof(InspectorPropertyWidgetBase_OnAvailabilityChange, Enabled) == 0x000000, "Member 'InspectorPropertyWidgetBase_OnAvailabilityChange::Enabled' has a wrong offset!");

// Function Brickadia.InspectorPropertyWidgetBase.OnInit
// 0x0038 (0x0038 - 0x0000)
struct InspectorPropertyWidgetBase_OnInit final
{
public:
	class UInspectorPropertyDescriptor*           NewDescriptor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   NewViewTarget;                                     // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyWidgetBase_OnInit) == 0x000008, "Wrong alignment on InspectorPropertyWidgetBase_OnInit");
static_assert(sizeof(InspectorPropertyWidgetBase_OnInit) == 0x000038, "Wrong size on InspectorPropertyWidgetBase_OnInit");
static_assert(offsetof(InspectorPropertyWidgetBase_OnInit, NewDescriptor) == 0x000000, "Member 'InspectorPropertyWidgetBase_OnInit::NewDescriptor' has a wrong offset!");
static_assert(offsetof(InspectorPropertyWidgetBase_OnInit, NewViewTarget) == 0x000008, "Member 'InspectorPropertyWidgetBase_OnInit::NewViewTarget' has a wrong offset!");

// Function Brickadia.InspectorPropertyWidgetBase.OnValueChangedExternally
// 0x0018 (0x0018 - 0x0000)
struct InspectorPropertyWidgetBase_OnValueChangedExternally final
{
public:
	struct FInspectorPropertyValue                ValueIn;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyWidgetBase_OnValueChangedExternally) == 0x000008, "Wrong alignment on InspectorPropertyWidgetBase_OnValueChangedExternally");
static_assert(sizeof(InspectorPropertyWidgetBase_OnValueChangedExternally) == 0x000018, "Wrong size on InspectorPropertyWidgetBase_OnValueChangedExternally");
static_assert(offsetof(InspectorPropertyWidgetBase_OnValueChangedExternally, ValueIn) == 0x000000, "Member 'InspectorPropertyWidgetBase_OnValueChangedExternally::ValueIn' has a wrong offset!");

// Function Brickadia.InspectorPropertyWidgetBase.SetValue
// 0x0020 (0x0020 - 0x0000)
struct InspectorPropertyWidgetBase_SetValue final
{
public:
	struct FInspectorPropertyValue                ValueIn;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUpdatedExternally;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommitValue;                                      // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorPropertyWidgetBase_SetValue) == 0x000008, "Wrong alignment on InspectorPropertyWidgetBase_SetValue");
static_assert(sizeof(InspectorPropertyWidgetBase_SetValue) == 0x000020, "Wrong size on InspectorPropertyWidgetBase_SetValue");
static_assert(offsetof(InspectorPropertyWidgetBase_SetValue, ValueIn) == 0x000000, "Member 'InspectorPropertyWidgetBase_SetValue::ValueIn' has a wrong offset!");
static_assert(offsetof(InspectorPropertyWidgetBase_SetValue, bUpdatedExternally) == 0x000018, "Member 'InspectorPropertyWidgetBase_SetValue::bUpdatedExternally' has a wrong offset!");
static_assert(offsetof(InspectorPropertyWidgetBase_SetValue, bCommitValue) == 0x000019, "Member 'InspectorPropertyWidgetBase_SetValue::bCommitValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyWidgetBase.GetDescriptor
// 0x0008 (0x0008 - 0x0000)
struct InspectorPropertyWidgetBase_GetDescriptor final
{
public:
	class UInspectorPropertyDescriptor*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyWidgetBase_GetDescriptor) == 0x000008, "Wrong alignment on InspectorPropertyWidgetBase_GetDescriptor");
static_assert(sizeof(InspectorPropertyWidgetBase_GetDescriptor) == 0x000008, "Wrong size on InspectorPropertyWidgetBase_GetDescriptor");
static_assert(offsetof(InspectorPropertyWidgetBase_GetDescriptor, ReturnValue) == 0x000000, "Member 'InspectorPropertyWidgetBase_GetDescriptor::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyWidgetBase.GetIsDirty
// 0x0001 (0x0001 - 0x0000)
struct InspectorPropertyWidgetBase_GetIsDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyWidgetBase_GetIsDirty) == 0x000001, "Wrong alignment on InspectorPropertyWidgetBase_GetIsDirty");
static_assert(sizeof(InspectorPropertyWidgetBase_GetIsDirty) == 0x000001, "Wrong size on InspectorPropertyWidgetBase_GetIsDirty");
static_assert(offsetof(InspectorPropertyWidgetBase_GetIsDirty, ReturnValue) == 0x000000, "Member 'InspectorPropertyWidgetBase_GetIsDirty::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorPropertyWidgetBase.GetValue
// 0x0018 (0x0018 - 0x0000)
struct InspectorPropertyWidgetBase_GetValue final
{
public:
	struct FInspectorPropertyValue                ValueOut;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorPropertyWidgetBase_GetValue) == 0x000008, "Wrong alignment on InspectorPropertyWidgetBase_GetValue");
static_assert(sizeof(InspectorPropertyWidgetBase_GetValue) == 0x000018, "Wrong size on InspectorPropertyWidgetBase_GetValue");
static_assert(offsetof(InspectorPropertyWidgetBase_GetValue, ValueOut) == 0x000000, "Member 'InspectorPropertyWidgetBase_GetValue::ValueOut' has a wrong offset!");

// Function Brickadia.InspectorStatics.ApplyPropertyChangelistEntryToObject
// 0x0068 (0x0068 - 0x0000)
struct InspectorStatics_ApplyPropertyChangelistEntryToObject final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelistEntry      Entry;                                             // 0x0040(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRunNotify;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorStatics_ApplyPropertyChangelistEntryToObject) == 0x000008, "Wrong alignment on InspectorStatics_ApplyPropertyChangelistEntryToObject");
static_assert(sizeof(InspectorStatics_ApplyPropertyChangelistEntryToObject) == 0x000068, "Wrong size on InspectorStatics_ApplyPropertyChangelistEntryToObject");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistEntryToObject, WorldContext) == 0x000000, "Member 'InspectorStatics_ApplyPropertyChangelistEntryToObject::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistEntryToObject, ViewTarget) == 0x000008, "Member 'InspectorStatics_ApplyPropertyChangelistEntryToObject::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistEntryToObject, ViewClass) == 0x000038, "Member 'InspectorStatics_ApplyPropertyChangelistEntryToObject::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistEntryToObject, Entry) == 0x000040, "Member 'InspectorStatics_ApplyPropertyChangelistEntryToObject::Entry' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistEntryToObject, bRunNotify) == 0x000060, "Member 'InspectorStatics_ApplyPropertyChangelistEntryToObject::bRunNotify' has a wrong offset!");

// Function Brickadia.InspectorStatics.ApplyPropertyChangelistEntryToObject2
// 0x0068 (0x0068 - 0x0000)
struct InspectorStatics_ApplyPropertyChangelistEntryToObject2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelistEntry      Entry;                                             // 0x0040(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRunNotify;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorStatics_ApplyPropertyChangelistEntryToObject2) == 0x000008, "Wrong alignment on InspectorStatics_ApplyPropertyChangelistEntryToObject2");
static_assert(sizeof(InspectorStatics_ApplyPropertyChangelistEntryToObject2) == 0x000068, "Wrong size on InspectorStatics_ApplyPropertyChangelistEntryToObject2");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistEntryToObject2, WorldContext) == 0x000000, "Member 'InspectorStatics_ApplyPropertyChangelistEntryToObject2::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistEntryToObject2, ViewTarget) == 0x000008, "Member 'InspectorStatics_ApplyPropertyChangelistEntryToObject2::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistEntryToObject2, View) == 0x000038, "Member 'InspectorStatics_ApplyPropertyChangelistEntryToObject2::View' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistEntryToObject2, Entry) == 0x000040, "Member 'InspectorStatics_ApplyPropertyChangelistEntryToObject2::Entry' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistEntryToObject2, bRunNotify) == 0x000060, "Member 'InspectorStatics_ApplyPropertyChangelistEntryToObject2::bRunNotify' has a wrong offset!");

// Function Brickadia.InspectorStatics.ApplyPropertyChangelistToObject
// 0x0058 (0x0058 - 0x0000)
struct InspectorStatics_ApplyPropertyChangelistToObject final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0040(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRunNotify;                                        // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorStatics_ApplyPropertyChangelistToObject) == 0x000008, "Wrong alignment on InspectorStatics_ApplyPropertyChangelistToObject");
static_assert(sizeof(InspectorStatics_ApplyPropertyChangelistToObject) == 0x000058, "Wrong size on InspectorStatics_ApplyPropertyChangelistToObject");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistToObject, WorldContext) == 0x000000, "Member 'InspectorStatics_ApplyPropertyChangelistToObject::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistToObject, ViewTarget) == 0x000008, "Member 'InspectorStatics_ApplyPropertyChangelistToObject::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistToObject, ViewClass) == 0x000038, "Member 'InspectorStatics_ApplyPropertyChangelistToObject::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistToObject, Changelist) == 0x000040, "Member 'InspectorStatics_ApplyPropertyChangelistToObject::Changelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistToObject, bRunNotify) == 0x000050, "Member 'InspectorStatics_ApplyPropertyChangelistToObject::bRunNotify' has a wrong offset!");

// Function Brickadia.InspectorStatics.ApplyPropertyChangelistToObject2
// 0x0058 (0x0058 - 0x0000)
struct InspectorStatics_ApplyPropertyChangelistToObject2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0040(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRunNotify;                                        // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorStatics_ApplyPropertyChangelistToObject2) == 0x000008, "Wrong alignment on InspectorStatics_ApplyPropertyChangelistToObject2");
static_assert(sizeof(InspectorStatics_ApplyPropertyChangelistToObject2) == 0x000058, "Wrong size on InspectorStatics_ApplyPropertyChangelistToObject2");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistToObject2, WorldContext) == 0x000000, "Member 'InspectorStatics_ApplyPropertyChangelistToObject2::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistToObject2, ViewTarget) == 0x000008, "Member 'InspectorStatics_ApplyPropertyChangelistToObject2::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistToObject2, View) == 0x000038, "Member 'InspectorStatics_ApplyPropertyChangelistToObject2::View' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistToObject2, Changelist) == 0x000040, "Member 'InspectorStatics_ApplyPropertyChangelistToObject2::Changelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ApplyPropertyChangelistToObject2, bRunNotify) == 0x000050, "Member 'InspectorStatics_ApplyPropertyChangelistToObject2::bRunNotify' has a wrong offset!");

// Function Brickadia.InspectorStatics.ExportPropertyChangelistToDebugString
// 0x0020 (0x0020 - 0x0000)
struct InspectorStatics_ExportPropertyChangelistToDebugString final
{
public:
	struct FInspectorPropertyChangelist           InChangelist;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_ExportPropertyChangelistToDebugString) == 0x000008, "Wrong alignment on InspectorStatics_ExportPropertyChangelistToDebugString");
static_assert(sizeof(InspectorStatics_ExportPropertyChangelistToDebugString) == 0x000020, "Wrong size on InspectorStatics_ExportPropertyChangelistToDebugString");
static_assert(offsetof(InspectorStatics_ExportPropertyChangelistToDebugString, InChangelist) == 0x000000, "Member 'InspectorStatics_ExportPropertyChangelistToDebugString::InChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ExportPropertyChangelistToDebugString, ReturnValue) == 0x000010, "Member 'InspectorStatics_ExportPropertyChangelistToDebugString::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.ExportPropertyChangelistToJson
// 0x0040 (0x0040 - 0x0000)
struct InspectorStatics_ExportPropertyChangelistToJson final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           InChangelist;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     ReturnValue;                                       // 0x0020(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_ExportPropertyChangelistToJson) == 0x000008, "Wrong alignment on InspectorStatics_ExportPropertyChangelistToJson");
static_assert(sizeof(InspectorStatics_ExportPropertyChangelistToJson) == 0x000040, "Wrong size on InspectorStatics_ExportPropertyChangelistToJson");
static_assert(offsetof(InspectorStatics_ExportPropertyChangelistToJson, WorldContext) == 0x000000, "Member 'InspectorStatics_ExportPropertyChangelistToJson::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ExportPropertyChangelistToJson, InChangelist) == 0x000008, "Member 'InspectorStatics_ExportPropertyChangelistToJson::InChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ExportPropertyChangelistToJson, ViewClass) == 0x000018, "Member 'InspectorStatics_ExportPropertyChangelistToJson::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ExportPropertyChangelistToJson, ReturnValue) == 0x000020, "Member 'InspectorStatics_ExportPropertyChangelistToJson::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.ExportPropertyChangelistToJson2
// 0x0040 (0x0040 - 0x0000)
struct InspectorStatics_ExportPropertyChangelistToJson2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           InChangelist;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     ReturnValue;                                       // 0x0020(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_ExportPropertyChangelistToJson2) == 0x000008, "Wrong alignment on InspectorStatics_ExportPropertyChangelistToJson2");
static_assert(sizeof(InspectorStatics_ExportPropertyChangelistToJson2) == 0x000040, "Wrong size on InspectorStatics_ExportPropertyChangelistToJson2");
static_assert(offsetof(InspectorStatics_ExportPropertyChangelistToJson2, WorldContext) == 0x000000, "Member 'InspectorStatics_ExportPropertyChangelistToJson2::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ExportPropertyChangelistToJson2, InChangelist) == 0x000008, "Member 'InspectorStatics_ExportPropertyChangelistToJson2::InChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ExportPropertyChangelistToJson2, View) == 0x000018, "Member 'InspectorStatics_ExportPropertyChangelistToJson2::View' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ExportPropertyChangelistToJson2, ReturnValue) == 0x000020, "Member 'InspectorStatics_ExportPropertyChangelistToJson2::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetChangelistValue
// 0x0038 (0x0038 - 0x0000)
struct InspectorStatics_GetChangelistValue final
{
public:
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ValueName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                OutValue;                                          // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorStatics_GetChangelistValue) == 0x000008, "Wrong alignment on InspectorStatics_GetChangelistValue");
static_assert(sizeof(InspectorStatics_GetChangelistValue) == 0x000038, "Wrong size on InspectorStatics_GetChangelistValue");
static_assert(offsetof(InspectorStatics_GetChangelistValue, Changelist) == 0x000000, "Member 'InspectorStatics_GetChangelistValue::Changelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetChangelistValue, ValueName) == 0x000010, "Member 'InspectorStatics_GetChangelistValue::ValueName' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetChangelistValue, OutValue) == 0x000018, "Member 'InspectorStatics_GetChangelistValue::OutValue' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetChangelistValue, ReturnValue) == 0x000030, "Member 'InspectorStatics_GetChangelistValue::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetDefaultPropertyChangelistFromObject
// 0x0050 (0x0050 - 0x0000)
struct InspectorStatics_GetDefaultPropertyChangelistFromObject final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetDefaultPropertyChangelistFromObject) == 0x000008, "Wrong alignment on InspectorStatics_GetDefaultPropertyChangelistFromObject");
static_assert(sizeof(InspectorStatics_GetDefaultPropertyChangelistFromObject) == 0x000050, "Wrong size on InspectorStatics_GetDefaultPropertyChangelistFromObject");
static_assert(offsetof(InspectorStatics_GetDefaultPropertyChangelistFromObject, WorldContext) == 0x000000, "Member 'InspectorStatics_GetDefaultPropertyChangelistFromObject::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetDefaultPropertyChangelistFromObject, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetDefaultPropertyChangelistFromObject::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetDefaultPropertyChangelistFromObject, ViewClass) == 0x000038, "Member 'InspectorStatics_GetDefaultPropertyChangelistFromObject::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetDefaultPropertyChangelistFromObject, ReturnValue) == 0x000040, "Member 'InspectorStatics_GetDefaultPropertyChangelistFromObject::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetDefaultPropertyChangelistFromObject2
// 0x0050 (0x0050 - 0x0000)
struct InspectorStatics_GetDefaultPropertyChangelistFromObject2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetDefaultPropertyChangelistFromObject2) == 0x000008, "Wrong alignment on InspectorStatics_GetDefaultPropertyChangelistFromObject2");
static_assert(sizeof(InspectorStatics_GetDefaultPropertyChangelistFromObject2) == 0x000050, "Wrong size on InspectorStatics_GetDefaultPropertyChangelistFromObject2");
static_assert(offsetof(InspectorStatics_GetDefaultPropertyChangelistFromObject2, WorldContext) == 0x000000, "Member 'InspectorStatics_GetDefaultPropertyChangelistFromObject2::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetDefaultPropertyChangelistFromObject2, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetDefaultPropertyChangelistFromObject2::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetDefaultPropertyChangelistFromObject2, View) == 0x000038, "Member 'InspectorStatics_GetDefaultPropertyChangelistFromObject2::View' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetDefaultPropertyChangelistFromObject2, ReturnValue) == 0x000040, "Member 'InspectorStatics_GetDefaultPropertyChangelistFromObject2::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetPropertyChangelistEntryFromObject
// 0x0068 (0x0068 - 0x0000)
struct InspectorStatics_GetPropertyChangelistEntryFromObject final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InProperty;                                        // 0x0040(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelistEntry      ReturnValue;                                       // 0x0048(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetPropertyChangelistEntryFromObject) == 0x000008, "Wrong alignment on InspectorStatics_GetPropertyChangelistEntryFromObject");
static_assert(sizeof(InspectorStatics_GetPropertyChangelistEntryFromObject) == 0x000068, "Wrong size on InspectorStatics_GetPropertyChangelistEntryFromObject");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistEntryFromObject, WorldContext) == 0x000000, "Member 'InspectorStatics_GetPropertyChangelistEntryFromObject::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistEntryFromObject, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetPropertyChangelistEntryFromObject::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistEntryFromObject, ViewClass) == 0x000038, "Member 'InspectorStatics_GetPropertyChangelistEntryFromObject::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistEntryFromObject, InProperty) == 0x000040, "Member 'InspectorStatics_GetPropertyChangelistEntryFromObject::InProperty' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistEntryFromObject, ReturnValue) == 0x000048, "Member 'InspectorStatics_GetPropertyChangelistEntryFromObject::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetPropertyChangelistEntryFromObject2
// 0x0068 (0x0068 - 0x0000)
struct InspectorStatics_GetPropertyChangelistEntryFromObject2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InProperty;                                        // 0x0040(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelistEntry      ReturnValue;                                       // 0x0048(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetPropertyChangelistEntryFromObject2) == 0x000008, "Wrong alignment on InspectorStatics_GetPropertyChangelistEntryFromObject2");
static_assert(sizeof(InspectorStatics_GetPropertyChangelistEntryFromObject2) == 0x000068, "Wrong size on InspectorStatics_GetPropertyChangelistEntryFromObject2");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistEntryFromObject2, WorldContext) == 0x000000, "Member 'InspectorStatics_GetPropertyChangelistEntryFromObject2::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistEntryFromObject2, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetPropertyChangelistEntryFromObject2::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistEntryFromObject2, View) == 0x000038, "Member 'InspectorStatics_GetPropertyChangelistEntryFromObject2::View' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistEntryFromObject2, InProperty) == 0x000040, "Member 'InspectorStatics_GetPropertyChangelistEntryFromObject2::InProperty' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistEntryFromObject2, ReturnValue) == 0x000048, "Member 'InspectorStatics_GetPropertyChangelistEntryFromObject2::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetPropertyChangelistFromObject
// 0x0050 (0x0050 - 0x0000)
struct InspectorStatics_GetPropertyChangelistFromObject final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetPropertyChangelistFromObject) == 0x000008, "Wrong alignment on InspectorStatics_GetPropertyChangelistFromObject");
static_assert(sizeof(InspectorStatics_GetPropertyChangelistFromObject) == 0x000050, "Wrong size on InspectorStatics_GetPropertyChangelistFromObject");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistFromObject, WorldContext) == 0x000000, "Member 'InspectorStatics_GetPropertyChangelistFromObject::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistFromObject, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetPropertyChangelistFromObject::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistFromObject, ViewClass) == 0x000038, "Member 'InspectorStatics_GetPropertyChangelistFromObject::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistFromObject, ReturnValue) == 0x000040, "Member 'InspectorStatics_GetPropertyChangelistFromObject::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetPropertyChangelistFromObject2
// 0x0050 (0x0050 - 0x0000)
struct InspectorStatics_GetPropertyChangelistFromObject2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetPropertyChangelistFromObject2) == 0x000008, "Wrong alignment on InspectorStatics_GetPropertyChangelistFromObject2");
static_assert(sizeof(InspectorStatics_GetPropertyChangelistFromObject2) == 0x000050, "Wrong size on InspectorStatics_GetPropertyChangelistFromObject2");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistFromObject2, WorldContext) == 0x000000, "Member 'InspectorStatics_GetPropertyChangelistFromObject2::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistFromObject2, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetPropertyChangelistFromObject2::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistFromObject2, View) == 0x000038, "Member 'InspectorStatics_GetPropertyChangelistFromObject2::View' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetPropertyChangelistFromObject2, ReturnValue) == 0x000040, "Member 'InspectorStatics_GetPropertyChangelistFromObject2::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetReversePropertyChangelistEntryFromObject
// 0x0080 (0x0080 - 0x0000)
struct InspectorStatics_GetReversePropertyChangelistEntryFromObject final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelistEntry      InChangelistEntry;                                 // 0x0040(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelistEntry      ReturnValue;                                       // 0x0060(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetReversePropertyChangelistEntryFromObject) == 0x000008, "Wrong alignment on InspectorStatics_GetReversePropertyChangelistEntryFromObject");
static_assert(sizeof(InspectorStatics_GetReversePropertyChangelistEntryFromObject) == 0x000080, "Wrong size on InspectorStatics_GetReversePropertyChangelistEntryFromObject");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistEntryFromObject, WorldContext) == 0x000000, "Member 'InspectorStatics_GetReversePropertyChangelistEntryFromObject::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistEntryFromObject, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetReversePropertyChangelistEntryFromObject::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistEntryFromObject, ViewClass) == 0x000038, "Member 'InspectorStatics_GetReversePropertyChangelistEntryFromObject::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistEntryFromObject, InChangelistEntry) == 0x000040, "Member 'InspectorStatics_GetReversePropertyChangelistEntryFromObject::InChangelistEntry' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistEntryFromObject, ReturnValue) == 0x000060, "Member 'InspectorStatics_GetReversePropertyChangelistEntryFromObject::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetReversePropertyChangelistEntryFromObject2
// 0x0080 (0x0080 - 0x0000)
struct InspectorStatics_GetReversePropertyChangelistEntryFromObject2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelistEntry      InChangelistEntry;                                 // 0x0040(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelistEntry      ReturnValue;                                       // 0x0060(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetReversePropertyChangelistEntryFromObject2) == 0x000008, "Wrong alignment on InspectorStatics_GetReversePropertyChangelistEntryFromObject2");
static_assert(sizeof(InspectorStatics_GetReversePropertyChangelistEntryFromObject2) == 0x000080, "Wrong size on InspectorStatics_GetReversePropertyChangelistEntryFromObject2");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistEntryFromObject2, WorldContext) == 0x000000, "Member 'InspectorStatics_GetReversePropertyChangelistEntryFromObject2::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistEntryFromObject2, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetReversePropertyChangelistEntryFromObject2::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistEntryFromObject2, View) == 0x000038, "Member 'InspectorStatics_GetReversePropertyChangelistEntryFromObject2::View' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistEntryFromObject2, InChangelistEntry) == 0x000040, "Member 'InspectorStatics_GetReversePropertyChangelistEntryFromObject2::InChangelistEntry' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistEntryFromObject2, ReturnValue) == 0x000060, "Member 'InspectorStatics_GetReversePropertyChangelistEntryFromObject2::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetReversePropertyChangelistFromObject
// 0x0060 (0x0060 - 0x0000)
struct InspectorStatics_GetReversePropertyChangelistFromObject final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           InChangelist;                                      // 0x0040(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetReversePropertyChangelistFromObject) == 0x000008, "Wrong alignment on InspectorStatics_GetReversePropertyChangelistFromObject");
static_assert(sizeof(InspectorStatics_GetReversePropertyChangelistFromObject) == 0x000060, "Wrong size on InspectorStatics_GetReversePropertyChangelistFromObject");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistFromObject, WorldContext) == 0x000000, "Member 'InspectorStatics_GetReversePropertyChangelistFromObject::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistFromObject, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetReversePropertyChangelistFromObject::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistFromObject, ViewClass) == 0x000038, "Member 'InspectorStatics_GetReversePropertyChangelistFromObject::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistFromObject, InChangelist) == 0x000040, "Member 'InspectorStatics_GetReversePropertyChangelistFromObject::InChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistFromObject, ReturnValue) == 0x000050, "Member 'InspectorStatics_GetReversePropertyChangelistFromObject::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetReversePropertyChangelistFromObject2
// 0x0060 (0x0060 - 0x0000)
struct InspectorStatics_GetReversePropertyChangelistFromObject2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           InChangelist;                                      // 0x0040(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetReversePropertyChangelistFromObject2) == 0x000008, "Wrong alignment on InspectorStatics_GetReversePropertyChangelistFromObject2");
static_assert(sizeof(InspectorStatics_GetReversePropertyChangelistFromObject2) == 0x000060, "Wrong size on InspectorStatics_GetReversePropertyChangelistFromObject2");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistFromObject2, WorldContext) == 0x000000, "Member 'InspectorStatics_GetReversePropertyChangelistFromObject2::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistFromObject2, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetReversePropertyChangelistFromObject2::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistFromObject2, View) == 0x000038, "Member 'InspectorStatics_GetReversePropertyChangelistFromObject2::View' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistFromObject2, InChangelist) == 0x000040, "Member 'InspectorStatics_GetReversePropertyChangelistFromObject2::InChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetReversePropertyChangelistFromObject2, ReturnValue) == 0x000050, "Member 'InspectorStatics_GetReversePropertyChangelistFromObject2::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetVerbosePropertyChangelistFromObject
// 0x0050 (0x0050 - 0x0000)
struct InspectorStatics_GetVerbosePropertyChangelistFromObject final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetVerbosePropertyChangelistFromObject) == 0x000008, "Wrong alignment on InspectorStatics_GetVerbosePropertyChangelistFromObject");
static_assert(sizeof(InspectorStatics_GetVerbosePropertyChangelistFromObject) == 0x000050, "Wrong size on InspectorStatics_GetVerbosePropertyChangelistFromObject");
static_assert(offsetof(InspectorStatics_GetVerbosePropertyChangelistFromObject, WorldContext) == 0x000000, "Member 'InspectorStatics_GetVerbosePropertyChangelistFromObject::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetVerbosePropertyChangelistFromObject, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetVerbosePropertyChangelistFromObject::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetVerbosePropertyChangelistFromObject, ViewClass) == 0x000038, "Member 'InspectorStatics_GetVerbosePropertyChangelistFromObject::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetVerbosePropertyChangelistFromObject, ReturnValue) == 0x000040, "Member 'InspectorStatics_GetVerbosePropertyChangelistFromObject::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.GetVerbosePropertyChangelistFromObject2
// 0x0050 (0x0050 - 0x0000)
struct InspectorStatics_GetVerbosePropertyChangelistFromObject2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_GetVerbosePropertyChangelistFromObject2) == 0x000008, "Wrong alignment on InspectorStatics_GetVerbosePropertyChangelistFromObject2");
static_assert(sizeof(InspectorStatics_GetVerbosePropertyChangelistFromObject2) == 0x000050, "Wrong size on InspectorStatics_GetVerbosePropertyChangelistFromObject2");
static_assert(offsetof(InspectorStatics_GetVerbosePropertyChangelistFromObject2, WorldContext) == 0x000000, "Member 'InspectorStatics_GetVerbosePropertyChangelistFromObject2::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetVerbosePropertyChangelistFromObject2, ViewTarget) == 0x000008, "Member 'InspectorStatics_GetVerbosePropertyChangelistFromObject2::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetVerbosePropertyChangelistFromObject2, View) == 0x000038, "Member 'InspectorStatics_GetVerbosePropertyChangelistFromObject2::View' has a wrong offset!");
static_assert(offsetof(InspectorStatics_GetVerbosePropertyChangelistFromObject2, ReturnValue) == 0x000040, "Member 'InspectorStatics_GetVerbosePropertyChangelistFromObject2::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.ImportPropertyChangelistFromJson
// 0x0040 (0x0040 - 0x0000)
struct InspectorStatics_ImportPropertyChangelistFromJson final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     InJson;                                            // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_ImportPropertyChangelistFromJson) == 0x000008, "Wrong alignment on InspectorStatics_ImportPropertyChangelistFromJson");
static_assert(sizeof(InspectorStatics_ImportPropertyChangelistFromJson) == 0x000040, "Wrong size on InspectorStatics_ImportPropertyChangelistFromJson");
static_assert(offsetof(InspectorStatics_ImportPropertyChangelistFromJson, WorldContext) == 0x000000, "Member 'InspectorStatics_ImportPropertyChangelistFromJson::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ImportPropertyChangelistFromJson, InJson) == 0x000008, "Member 'InspectorStatics_ImportPropertyChangelistFromJson::InJson' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ImportPropertyChangelistFromJson, ViewClass) == 0x000028, "Member 'InspectorStatics_ImportPropertyChangelistFromJson::ViewClass' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ImportPropertyChangelistFromJson, ReturnValue) == 0x000030, "Member 'InspectorStatics_ImportPropertyChangelistFromJson::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.ImportPropertyChangelistFromJson2
// 0x0040 (0x0040 - 0x0000)
struct InspectorStatics_ImportPropertyChangelistFromJson2 final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     InJson;                                            // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_ImportPropertyChangelistFromJson2) == 0x000008, "Wrong alignment on InspectorStatics_ImportPropertyChangelistFromJson2");
static_assert(sizeof(InspectorStatics_ImportPropertyChangelistFromJson2) == 0x000040, "Wrong size on InspectorStatics_ImportPropertyChangelistFromJson2");
static_assert(offsetof(InspectorStatics_ImportPropertyChangelistFromJson2, WorldContext) == 0x000000, "Member 'InspectorStatics_ImportPropertyChangelistFromJson2::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ImportPropertyChangelistFromJson2, InJson) == 0x000008, "Member 'InspectorStatics_ImportPropertyChangelistFromJson2::InJson' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ImportPropertyChangelistFromJson2, View) == 0x000028, "Member 'InspectorStatics_ImportPropertyChangelistFromJson2::View' has a wrong offset!");
static_assert(offsetof(InspectorStatics_ImportPropertyChangelistFromJson2, ReturnValue) == 0x000030, "Member 'InspectorStatics_ImportPropertyChangelistFromJson2::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.IsViewTargetValid
// 0x0038 (0x0038 - 0x0000)
struct InspectorStatics_IsViewTargetValid final
{
public:
	struct FInspectorViewTarget                   ViewTarget;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorStatics_IsViewTargetValid) == 0x000008, "Wrong alignment on InspectorStatics_IsViewTargetValid");
static_assert(sizeof(InspectorStatics_IsViewTargetValid) == 0x000038, "Wrong size on InspectorStatics_IsViewTargetValid");
static_assert(offsetof(InspectorStatics_IsViewTargetValid, ViewTarget) == 0x000000, "Member 'InspectorStatics_IsViewTargetValid::ViewTarget' has a wrong offset!");
static_assert(offsetof(InspectorStatics_IsViewTargetValid, ReturnValue) == 0x000030, "Member 'InspectorStatics_IsViewTargetValid::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.MakeViewTargetFromBrickComponent
// 0x0048 (0x0048 - 0x0000)
struct InspectorStatics_MakeViewTargetFromBrickComponent final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                ComponentType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ReturnValue;                                       // 0x0018(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_MakeViewTargetFromBrickComponent) == 0x000008, "Wrong alignment on InspectorStatics_MakeViewTargetFromBrickComponent");
static_assert(sizeof(InspectorStatics_MakeViewTargetFromBrickComponent) == 0x000048, "Wrong size on InspectorStatics_MakeViewTargetFromBrickComponent");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromBrickComponent, WorldContext) == 0x000000, "Member 'InspectorStatics_MakeViewTargetFromBrickComponent::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromBrickComponent, BrickHandle) == 0x000008, "Member 'InspectorStatics_MakeViewTargetFromBrickComponent::BrickHandle' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromBrickComponent, ComponentType) == 0x000010, "Member 'InspectorStatics_MakeViewTargetFromBrickComponent::ComponentType' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromBrickComponent, ReturnValue) == 0x000018, "Member 'InspectorStatics_MakeViewTargetFromBrickComponent::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.MakeViewTargetFromBrickComponentProperty
// 0x0058 (0x0058 - 0x0000)
struct InspectorStatics_MakeViewTargetFromBrickComponentProperty final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           BrickHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                ComponentType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyPath;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ReturnValue;                                       // 0x0028(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_MakeViewTargetFromBrickComponentProperty) == 0x000008, "Wrong alignment on InspectorStatics_MakeViewTargetFromBrickComponentProperty");
static_assert(sizeof(InspectorStatics_MakeViewTargetFromBrickComponentProperty) == 0x000058, "Wrong size on InspectorStatics_MakeViewTargetFromBrickComponentProperty");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromBrickComponentProperty, WorldContext) == 0x000000, "Member 'InspectorStatics_MakeViewTargetFromBrickComponentProperty::WorldContext' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromBrickComponentProperty, BrickHandle) == 0x000008, "Member 'InspectorStatics_MakeViewTargetFromBrickComponentProperty::BrickHandle' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromBrickComponentProperty, ComponentType) == 0x000010, "Member 'InspectorStatics_MakeViewTargetFromBrickComponentProperty::ComponentType' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromBrickComponentProperty, PropertyPath) == 0x000018, "Member 'InspectorStatics_MakeViewTargetFromBrickComponentProperty::PropertyPath' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromBrickComponentProperty, ReturnValue) == 0x000028, "Member 'InspectorStatics_MakeViewTargetFromBrickComponentProperty::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.MakeViewTargetFromObject
// 0x0038 (0x0038 - 0x0000)
struct InspectorStatics_MakeViewTargetFromObject final
{
public:
	class UObject*                                Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_MakeViewTargetFromObject) == 0x000008, "Wrong alignment on InspectorStatics_MakeViewTargetFromObject");
static_assert(sizeof(InspectorStatics_MakeViewTargetFromObject) == 0x000038, "Wrong size on InspectorStatics_MakeViewTargetFromObject");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromObject, Instance) == 0x000000, "Member 'InspectorStatics_MakeViewTargetFromObject::Instance' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromObject, ReturnValue) == 0x000008, "Member 'InspectorStatics_MakeViewTargetFromObject::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.MakeViewTargetFromObjectProperty
// 0x0048 (0x0048 - 0x0000)
struct InspectorStatics_MakeViewTargetFromObjectProperty final
{
public:
	class UObject*                                Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyPath;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorViewTarget                   ReturnValue;                                       // 0x0018(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_MakeViewTargetFromObjectProperty) == 0x000008, "Wrong alignment on InspectorStatics_MakeViewTargetFromObjectProperty");
static_assert(sizeof(InspectorStatics_MakeViewTargetFromObjectProperty) == 0x000048, "Wrong size on InspectorStatics_MakeViewTargetFromObjectProperty");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromObjectProperty, Instance) == 0x000000, "Member 'InspectorStatics_MakeViewTargetFromObjectProperty::Instance' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromObjectProperty, PropertyPath) == 0x000008, "Member 'InspectorStatics_MakeViewTargetFromObjectProperty::PropertyPath' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MakeViewTargetFromObjectProperty, ReturnValue) == 0x000018, "Member 'InspectorStatics_MakeViewTargetFromObjectProperty::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.MergePropertyChangelists
// 0x0038 (0x0038 - 0x0000)
struct InspectorStatics_MergePropertyChangelists final
{
public:
	struct FInspectorPropertyChangelist           ChangelistA;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ChangelistB;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Merged;                                            // 0x0020(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InspectorStatics_MergePropertyChangelists) == 0x000008, "Wrong alignment on InspectorStatics_MergePropertyChangelists");
static_assert(sizeof(InspectorStatics_MergePropertyChangelists) == 0x000038, "Wrong size on InspectorStatics_MergePropertyChangelists");
static_assert(offsetof(InspectorStatics_MergePropertyChangelists, ChangelistA) == 0x000000, "Member 'InspectorStatics_MergePropertyChangelists::ChangelistA' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MergePropertyChangelists, ChangelistB) == 0x000010, "Member 'InspectorStatics_MergePropertyChangelists::ChangelistB' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MergePropertyChangelists, Merged) == 0x000020, "Member 'InspectorStatics_MergePropertyChangelists::Merged' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MergePropertyChangelists, ReturnValue) == 0x000030, "Member 'InspectorStatics_MergePropertyChangelists::ReturnValue' has a wrong offset!");

// Function Brickadia.InspectorStatics.MergePropertyDescriptorList
// 0x0010 (0x0010 - 0x0000)
struct InspectorStatics_MergePropertyDescriptorList final
{
public:
	class UInspectorPropertyDescriptorList*       DescriptorList;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_MergePropertyDescriptorList) == 0x000008, "Wrong alignment on InspectorStatics_MergePropertyDescriptorList");
static_assert(sizeof(InspectorStatics_MergePropertyDescriptorList) == 0x000010, "Wrong size on InspectorStatics_MergePropertyDescriptorList");
static_assert(offsetof(InspectorStatics_MergePropertyDescriptorList, DescriptorList) == 0x000000, "Member 'InspectorStatics_MergePropertyDescriptorList::DescriptorList' has a wrong offset!");
static_assert(offsetof(InspectorStatics_MergePropertyDescriptorList, Other) == 0x000008, "Member 'InspectorStatics_MergePropertyDescriptorList::Other' has a wrong offset!");

// Function Brickadia.InspectorStatics.OverridePropertyChangelist
// 0x0030 (0x0030 - 0x0000)
struct InspectorStatics_OverridePropertyChangelist final
{
public:
	struct FInspectorPropertyChangelist           ChangelistA;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ChangelistB;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Overidden;                                         // 0x0020(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_OverridePropertyChangelist) == 0x000008, "Wrong alignment on InspectorStatics_OverridePropertyChangelist");
static_assert(sizeof(InspectorStatics_OverridePropertyChangelist) == 0x000030, "Wrong size on InspectorStatics_OverridePropertyChangelist");
static_assert(offsetof(InspectorStatics_OverridePropertyChangelist, ChangelistA) == 0x000000, "Member 'InspectorStatics_OverridePropertyChangelist::ChangelistA' has a wrong offset!");
static_assert(offsetof(InspectorStatics_OverridePropertyChangelist, ChangelistB) == 0x000010, "Member 'InspectorStatics_OverridePropertyChangelist::ChangelistB' has a wrong offset!");
static_assert(offsetof(InspectorStatics_OverridePropertyChangelist, Overidden) == 0x000020, "Member 'InspectorStatics_OverridePropertyChangelist::Overidden' has a wrong offset!");

// Function Brickadia.InspectorStatics.PreProcessChangelist
// 0x0028 (0x0028 - 0x0000)
struct InspectorStatics_PreProcessChangelist final
{
public:
	struct FInspectorPropertyChangelist           InChangelist;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           OutChangelist;                                     // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_PreProcessChangelist) == 0x000008, "Wrong alignment on InspectorStatics_PreProcessChangelist");
static_assert(sizeof(InspectorStatics_PreProcessChangelist) == 0x000028, "Wrong size on InspectorStatics_PreProcessChangelist");
static_assert(offsetof(InspectorStatics_PreProcessChangelist, InChangelist) == 0x000000, "Member 'InspectorStatics_PreProcessChangelist::InChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_PreProcessChangelist, OutChangelist) == 0x000010, "Member 'InspectorStatics_PreProcessChangelist::OutChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_PreProcessChangelist, ViewClass) == 0x000020, "Member 'InspectorStatics_PreProcessChangelist::ViewClass' has a wrong offset!");

// Function Brickadia.InspectorStatics.PreProcessChangelist2
// 0x0028 (0x0028 - 0x0000)
struct InspectorStatics_PreProcessChangelist2 final
{
public:
	struct FInspectorPropertyChangelist           InChangelist;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           OutChangelist;                                     // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_PreProcessChangelist2) == 0x000008, "Wrong alignment on InspectorStatics_PreProcessChangelist2");
static_assert(sizeof(InspectorStatics_PreProcessChangelist2) == 0x000028, "Wrong size on InspectorStatics_PreProcessChangelist2");
static_assert(offsetof(InspectorStatics_PreProcessChangelist2, InChangelist) == 0x000000, "Member 'InspectorStatics_PreProcessChangelist2::InChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_PreProcessChangelist2, OutChangelist) == 0x000010, "Member 'InspectorStatics_PreProcessChangelist2::OutChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_PreProcessChangelist2, View) == 0x000020, "Member 'InspectorStatics_PreProcessChangelist2::View' has a wrong offset!");

// Function Brickadia.InspectorStatics.PreProcessChangelistEntryInline
// 0x0028 (0x0028 - 0x0000)
struct InspectorStatics_PreProcessChangelistEntryInline final
{
public:
	struct FInspectorPropertyChangelistEntry      InOutEntry;                                        // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_PreProcessChangelistEntryInline) == 0x000008, "Wrong alignment on InspectorStatics_PreProcessChangelistEntryInline");
static_assert(sizeof(InspectorStatics_PreProcessChangelistEntryInline) == 0x000028, "Wrong size on InspectorStatics_PreProcessChangelistEntryInline");
static_assert(offsetof(InspectorStatics_PreProcessChangelistEntryInline, InOutEntry) == 0x000000, "Member 'InspectorStatics_PreProcessChangelistEntryInline::InOutEntry' has a wrong offset!");
static_assert(offsetof(InspectorStatics_PreProcessChangelistEntryInline, ViewClass) == 0x000020, "Member 'InspectorStatics_PreProcessChangelistEntryInline::ViewClass' has a wrong offset!");

// Function Brickadia.InspectorStatics.PreProcessChangelistEntryInline2
// 0x0028 (0x0028 - 0x0000)
struct InspectorStatics_PreProcessChangelistEntryInline2 final
{
public:
	struct FInspectorPropertyChangelistEntry      InOutEntry;                                        // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_PreProcessChangelistEntryInline2) == 0x000008, "Wrong alignment on InspectorStatics_PreProcessChangelistEntryInline2");
static_assert(sizeof(InspectorStatics_PreProcessChangelistEntryInline2) == 0x000028, "Wrong size on InspectorStatics_PreProcessChangelistEntryInline2");
static_assert(offsetof(InspectorStatics_PreProcessChangelistEntryInline2, InOutEntry) == 0x000000, "Member 'InspectorStatics_PreProcessChangelistEntryInline2::InOutEntry' has a wrong offset!");
static_assert(offsetof(InspectorStatics_PreProcessChangelistEntryInline2, View) == 0x000020, "Member 'InspectorStatics_PreProcessChangelistEntryInline2::View' has a wrong offset!");

// Function Brickadia.InspectorStatics.PreProcessChangelistInline
// 0x0018 (0x0018 - 0x0000)
struct InspectorStatics_PreProcessChangelistInline final
{
public:
	struct FInspectorPropertyChangelist           InOutChangelist;                                   // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_PreProcessChangelistInline) == 0x000008, "Wrong alignment on InspectorStatics_PreProcessChangelistInline");
static_assert(sizeof(InspectorStatics_PreProcessChangelistInline) == 0x000018, "Wrong size on InspectorStatics_PreProcessChangelistInline");
static_assert(offsetof(InspectorStatics_PreProcessChangelistInline, InOutChangelist) == 0x000000, "Member 'InspectorStatics_PreProcessChangelistInline::InOutChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_PreProcessChangelistInline, ViewClass) == 0x000010, "Member 'InspectorStatics_PreProcessChangelistInline::ViewClass' has a wrong offset!");

// Function Brickadia.InspectorStatics.PreProcessChangelistInline2
// 0x0018 (0x0018 - 0x0000)
struct InspectorStatics_PreProcessChangelistInline2 final
{
public:
	struct FInspectorPropertyChangelist           InOutChangelist;                                   // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UInspectorPropertyDescriptorList*       View;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_PreProcessChangelistInline2) == 0x000008, "Wrong alignment on InspectorStatics_PreProcessChangelistInline2");
static_assert(sizeof(InspectorStatics_PreProcessChangelistInline2) == 0x000018, "Wrong size on InspectorStatics_PreProcessChangelistInline2");
static_assert(offsetof(InspectorStatics_PreProcessChangelistInline2, InOutChangelist) == 0x000000, "Member 'InspectorStatics_PreProcessChangelistInline2::InOutChangelist' has a wrong offset!");
static_assert(offsetof(InspectorStatics_PreProcessChangelistInline2, View) == 0x000010, "Member 'InspectorStatics_PreProcessChangelistInline2::View' has a wrong offset!");

// Function Brickadia.InspectorStatics.SetChangelistValue
// 0x0040 (0x0040 - 0x0000)
struct InspectorStatics_SetChangelistValue final
{
public:
	struct FInspectorPropertyChangelist           ChangelistIn;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ValueName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                NewValue;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectorStatics_SetChangelistValue) == 0x000008, "Wrong alignment on InspectorStatics_SetChangelistValue");
static_assert(sizeof(InspectorStatics_SetChangelistValue) == 0x000040, "Wrong size on InspectorStatics_SetChangelistValue");
static_assert(offsetof(InspectorStatics_SetChangelistValue, ChangelistIn) == 0x000000, "Member 'InspectorStatics_SetChangelistValue::ChangelistIn' has a wrong offset!");
static_assert(offsetof(InspectorStatics_SetChangelistValue, ValueName) == 0x000010, "Member 'InspectorStatics_SetChangelistValue::ValueName' has a wrong offset!");
static_assert(offsetof(InspectorStatics_SetChangelistValue, NewValue) == 0x000018, "Member 'InspectorStatics_SetChangelistValue::NewValue' has a wrong offset!");
static_assert(offsetof(InspectorStatics_SetChangelistValue, ReturnValue) == 0x000030, "Member 'InspectorStatics_SetChangelistValue::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.Add_IntVectorInt
// 0x001C (0x001C - 0x0000)
struct IntVectorExtras_Add_IntVectorInt final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_Add_IntVectorInt) == 0x000004, "Wrong alignment on IntVectorExtras_Add_IntVectorInt");
static_assert(sizeof(IntVectorExtras_Add_IntVectorInt) == 0x00001C, "Wrong size on IntVectorExtras_Add_IntVectorInt");
static_assert(offsetof(IntVectorExtras_Add_IntVectorInt, A) == 0x000000, "Member 'IntVectorExtras_Add_IntVectorInt::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Add_IntVectorInt, B) == 0x00000C, "Member 'IntVectorExtras_Add_IntVectorInt::B' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Add_IntVectorInt, ReturnValue) == 0x000010, "Member 'IntVectorExtras_Add_IntVectorInt::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.Add_IntVectorIntVector
// 0x0024 (0x0024 - 0x0000)
struct IntVectorExtras_Add_IntVectorIntVector final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             B;                                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_Add_IntVectorIntVector) == 0x000004, "Wrong alignment on IntVectorExtras_Add_IntVectorIntVector");
static_assert(sizeof(IntVectorExtras_Add_IntVectorIntVector) == 0x000024, "Wrong size on IntVectorExtras_Add_IntVectorIntVector");
static_assert(offsetof(IntVectorExtras_Add_IntVectorIntVector, A) == 0x000000, "Member 'IntVectorExtras_Add_IntVectorIntVector::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Add_IntVectorIntVector, B) == 0x00000C, "Member 'IntVectorExtras_Add_IntVectorIntVector::B' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Add_IntVectorIntVector, ReturnValue) == 0x000018, "Member 'IntVectorExtras_Add_IntVectorIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.Divide_IntVectorInt
// 0x001C (0x001C - 0x0000)
struct IntVectorExtras_Divide_IntVectorInt final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_Divide_IntVectorInt) == 0x000004, "Wrong alignment on IntVectorExtras_Divide_IntVectorInt");
static_assert(sizeof(IntVectorExtras_Divide_IntVectorInt) == 0x00001C, "Wrong size on IntVectorExtras_Divide_IntVectorInt");
static_assert(offsetof(IntVectorExtras_Divide_IntVectorInt, A) == 0x000000, "Member 'IntVectorExtras_Divide_IntVectorInt::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Divide_IntVectorInt, B) == 0x00000C, "Member 'IntVectorExtras_Divide_IntVectorInt::B' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Divide_IntVectorInt, ReturnValue) == 0x000010, "Member 'IntVectorExtras_Divide_IntVectorInt::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.Divide_IntVectorIntVector
// 0x0024 (0x0024 - 0x0000)
struct IntVectorExtras_Divide_IntVectorIntVector final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             B;                                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_Divide_IntVectorIntVector) == 0x000004, "Wrong alignment on IntVectorExtras_Divide_IntVectorIntVector");
static_assert(sizeof(IntVectorExtras_Divide_IntVectorIntVector) == 0x000024, "Wrong size on IntVectorExtras_Divide_IntVectorIntVector");
static_assert(offsetof(IntVectorExtras_Divide_IntVectorIntVector, A) == 0x000000, "Member 'IntVectorExtras_Divide_IntVectorIntVector::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Divide_IntVectorIntVector, B) == 0x00000C, "Member 'IntVectorExtras_Divide_IntVectorIntVector::B' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Divide_IntVectorIntVector, ReturnValue) == 0x000018, "Member 'IntVectorExtras_Divide_IntVectorIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.IntVector_GetAbs
// 0x0018 (0x0018 - 0x0000)
struct IntVectorExtras_IntVector_GetAbs final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_IntVector_GetAbs) == 0x000004, "Wrong alignment on IntVectorExtras_IntVector_GetAbs");
static_assert(sizeof(IntVectorExtras_IntVector_GetAbs) == 0x000018, "Wrong size on IntVectorExtras_IntVector_GetAbs");
static_assert(offsetof(IntVectorExtras_IntVector_GetAbs, A) == 0x000000, "Member 'IntVectorExtras_IntVector_GetAbs::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_IntVector_GetAbs, ReturnValue) == 0x00000C, "Member 'IntVectorExtras_IntVector_GetAbs::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.Multiply_IntVectorInt
// 0x001C (0x001C - 0x0000)
struct IntVectorExtras_Multiply_IntVectorInt final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_Multiply_IntVectorInt) == 0x000004, "Wrong alignment on IntVectorExtras_Multiply_IntVectorInt");
static_assert(sizeof(IntVectorExtras_Multiply_IntVectorInt) == 0x00001C, "Wrong size on IntVectorExtras_Multiply_IntVectorInt");
static_assert(offsetof(IntVectorExtras_Multiply_IntVectorInt, A) == 0x000000, "Member 'IntVectorExtras_Multiply_IntVectorInt::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Multiply_IntVectorInt, B) == 0x00000C, "Member 'IntVectorExtras_Multiply_IntVectorInt::B' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Multiply_IntVectorInt, ReturnValue) == 0x000010, "Member 'IntVectorExtras_Multiply_IntVectorInt::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.Multiply_IntVectorIntVector
// 0x0024 (0x0024 - 0x0000)
struct IntVectorExtras_Multiply_IntVectorIntVector final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             B;                                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_Multiply_IntVectorIntVector) == 0x000004, "Wrong alignment on IntVectorExtras_Multiply_IntVectorIntVector");
static_assert(sizeof(IntVectorExtras_Multiply_IntVectorIntVector) == 0x000024, "Wrong size on IntVectorExtras_Multiply_IntVectorIntVector");
static_assert(offsetof(IntVectorExtras_Multiply_IntVectorIntVector, A) == 0x000000, "Member 'IntVectorExtras_Multiply_IntVectorIntVector::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Multiply_IntVectorIntVector, B) == 0x00000C, "Member 'IntVectorExtras_Multiply_IntVectorIntVector::B' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Multiply_IntVectorIntVector, ReturnValue) == 0x000018, "Member 'IntVectorExtras_Multiply_IntVectorIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.Percent_IntVectorInt
// 0x001C (0x001C - 0x0000)
struct IntVectorExtras_Percent_IntVectorInt final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_Percent_IntVectorInt) == 0x000004, "Wrong alignment on IntVectorExtras_Percent_IntVectorInt");
static_assert(sizeof(IntVectorExtras_Percent_IntVectorInt) == 0x00001C, "Wrong size on IntVectorExtras_Percent_IntVectorInt");
static_assert(offsetof(IntVectorExtras_Percent_IntVectorInt, A) == 0x000000, "Member 'IntVectorExtras_Percent_IntVectorInt::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Percent_IntVectorInt, B) == 0x00000C, "Member 'IntVectorExtras_Percent_IntVectorInt::B' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Percent_IntVectorInt, ReturnValue) == 0x000010, "Member 'IntVectorExtras_Percent_IntVectorInt::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.Percent_IntVectorIntVector
// 0x0024 (0x0024 - 0x0000)
struct IntVectorExtras_Percent_IntVectorIntVector final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             B;                                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_Percent_IntVectorIntVector) == 0x000004, "Wrong alignment on IntVectorExtras_Percent_IntVectorIntVector");
static_assert(sizeof(IntVectorExtras_Percent_IntVectorIntVector) == 0x000024, "Wrong size on IntVectorExtras_Percent_IntVectorIntVector");
static_assert(offsetof(IntVectorExtras_Percent_IntVectorIntVector, A) == 0x000000, "Member 'IntVectorExtras_Percent_IntVectorIntVector::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Percent_IntVectorIntVector, B) == 0x00000C, "Member 'IntVectorExtras_Percent_IntVectorIntVector::B' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Percent_IntVectorIntVector, ReturnValue) == 0x000018, "Member 'IntVectorExtras_Percent_IntVectorIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.Subtract_IntVectorInt
// 0x001C (0x001C - 0x0000)
struct IntVectorExtras_Subtract_IntVectorInt final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_Subtract_IntVectorInt) == 0x000004, "Wrong alignment on IntVectorExtras_Subtract_IntVectorInt");
static_assert(sizeof(IntVectorExtras_Subtract_IntVectorInt) == 0x00001C, "Wrong size on IntVectorExtras_Subtract_IntVectorInt");
static_assert(offsetof(IntVectorExtras_Subtract_IntVectorInt, A) == 0x000000, "Member 'IntVectorExtras_Subtract_IntVectorInt::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Subtract_IntVectorInt, B) == 0x00000C, "Member 'IntVectorExtras_Subtract_IntVectorInt::B' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Subtract_IntVectorInt, ReturnValue) == 0x000010, "Member 'IntVectorExtras_Subtract_IntVectorInt::ReturnValue' has a wrong offset!");

// Function Brickadia.IntVectorExtras.Subtract_IntVectorIntVector
// 0x0024 (0x0024 - 0x0000)
struct IntVectorExtras_Subtract_IntVectorIntVector final
{
public:
	struct FIntVector                             A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             B;                                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IntVectorExtras_Subtract_IntVectorIntVector) == 0x000004, "Wrong alignment on IntVectorExtras_Subtract_IntVectorIntVector");
static_assert(sizeof(IntVectorExtras_Subtract_IntVectorIntVector) == 0x000024, "Wrong size on IntVectorExtras_Subtract_IntVectorIntVector");
static_assert(offsetof(IntVectorExtras_Subtract_IntVectorIntVector, A) == 0x000000, "Member 'IntVectorExtras_Subtract_IntVectorIntVector::A' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Subtract_IntVectorIntVector, B) == 0x00000C, "Member 'IntVectorExtras_Subtract_IntVectorIntVector::B' has a wrong offset!");
static_assert(offsetof(IntVectorExtras_Subtract_IntVectorIntVector, ReturnValue) == 0x000018, "Member 'IntVectorExtras_Subtract_IntVectorIntVector::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.AddMarkup
// 0x0050 (0x0050 - 0x0000)
struct BRRichTextUtils_AddMarkup final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Style;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Font;                                              // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_AddMarkup) == 0x000008, "Wrong alignment on BRRichTextUtils_AddMarkup");
static_assert(sizeof(BRRichTextUtils_AddMarkup) == 0x000050, "Wrong size on BRRichTextUtils_AddMarkup");
static_assert(offsetof(BRRichTextUtils_AddMarkup, InText) == 0x000000, "Member 'BRRichTextUtils_AddMarkup::InText' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_AddMarkup, Color) == 0x000010, "Member 'BRRichTextUtils_AddMarkup::Color' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_AddMarkup, Style) == 0x000018, "Member 'BRRichTextUtils_AddMarkup::Style' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_AddMarkup, Font) == 0x000028, "Member 'BRRichTextUtils_AddMarkup::Font' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_AddMarkup, Size) == 0x000038, "Member 'BRRichTextUtils_AddMarkup::Size' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_AddMarkup, ReturnValue) == 0x000040, "Member 'BRRichTextUtils_AddMarkup::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.EscapeDecorators
// 0x0020 (0x0020 - 0x0000)
struct BRRichTextUtils_EscapeDecorators final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_EscapeDecorators) == 0x000008, "Wrong alignment on BRRichTextUtils_EscapeDecorators");
static_assert(sizeof(BRRichTextUtils_EscapeDecorators) == 0x000020, "Wrong size on BRRichTextUtils_EscapeDecorators");
static_assert(offsetof(BRRichTextUtils_EscapeDecorators, Input) == 0x000000, "Member 'BRRichTextUtils_EscapeDecorators::Input' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_EscapeDecorators, ReturnValue) == 0x000010, "Member 'BRRichTextUtils_EscapeDecorators::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.EscapeMarkdown
// 0x0020 (0x0020 - 0x0000)
struct BRRichTextUtils_EscapeMarkdown final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_EscapeMarkdown) == 0x000008, "Wrong alignment on BRRichTextUtils_EscapeMarkdown");
static_assert(sizeof(BRRichTextUtils_EscapeMarkdown) == 0x000020, "Wrong size on BRRichTextUtils_EscapeMarkdown");
static_assert(offsetof(BRRichTextUtils_EscapeMarkdown, Input) == 0x000000, "Member 'BRRichTextUtils_EscapeMarkdown::Input' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_EscapeMarkdown, ReturnValue) == 0x000010, "Member 'BRRichTextUtils_EscapeMarkdown::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.EscapeMarkup
// 0x0020 (0x0020 - 0x0000)
struct BRRichTextUtils_EscapeMarkup final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_EscapeMarkup) == 0x000008, "Wrong alignment on BRRichTextUtils_EscapeMarkup");
static_assert(sizeof(BRRichTextUtils_EscapeMarkup) == 0x000020, "Wrong size on BRRichTextUtils_EscapeMarkup");
static_assert(offsetof(BRRichTextUtils_EscapeMarkup, Input) == 0x000000, "Member 'BRRichTextUtils_EscapeMarkup::Input' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_EscapeMarkup, ReturnValue) == 0x000010, "Member 'BRRichTextUtils_EscapeMarkup::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.ExpandMarkdown
// 0x0030 (0x0030 - 0x0000)
struct BRRichTextUtils_ExpandMarkdown final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Input;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDidMarkdownChanges;                               // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_ExpandMarkdown) == 0x000008, "Wrong alignment on BRRichTextUtils_ExpandMarkdown");
static_assert(sizeof(BRRichTextUtils_ExpandMarkdown) == 0x000030, "Wrong size on BRRichTextUtils_ExpandMarkdown");
static_assert(offsetof(BRRichTextUtils_ExpandMarkdown, WorldContextObject) == 0x000000, "Member 'BRRichTextUtils_ExpandMarkdown::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_ExpandMarkdown, Input) == 0x000008, "Member 'BRRichTextUtils_ExpandMarkdown::Input' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_ExpandMarkdown, bDidMarkdownChanges) == 0x000018, "Member 'BRRichTextUtils_ExpandMarkdown::bDidMarkdownChanges' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_ExpandMarkdown, ReturnValue) == 0x000020, "Member 'BRRichTextUtils_ExpandMarkdown::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.ExpandURLs
// 0x0020 (0x0020 - 0x0000)
struct BRRichTextUtils_ExpandURLs final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_ExpandURLs) == 0x000008, "Wrong alignment on BRRichTextUtils_ExpandURLs");
static_assert(sizeof(BRRichTextUtils_ExpandURLs) == 0x000020, "Wrong size on BRRichTextUtils_ExpandURLs");
static_assert(offsetof(BRRichTextUtils_ExpandURLs, Input) == 0x000000, "Member 'BRRichTextUtils_ExpandURLs::Input' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_ExpandURLs, ReturnValue) == 0x000010, "Member 'BRRichTextUtils_ExpandURLs::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.FormatPlayerName
// 0x0018 (0x0018 - 0x0000)
struct BRRichTextUtils_FormatPlayerName final
{
public:
	const class ABRPlayerController*              Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_FormatPlayerName) == 0x000008, "Wrong alignment on BRRichTextUtils_FormatPlayerName");
static_assert(sizeof(BRRichTextUtils_FormatPlayerName) == 0x000018, "Wrong size on BRRichTextUtils_FormatPlayerName");
static_assert(offsetof(BRRichTextUtils_FormatPlayerName, Player) == 0x000000, "Member 'BRRichTextUtils_FormatPlayerName::Player' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_FormatPlayerName, ReturnValue) == 0x000008, "Member 'BRRichTextUtils_FormatPlayerName::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.FormatPlayerNameFor
// 0x0020 (0x0020 - 0x0000)
struct BRRichTextUtils_FormatPlayerNameFor final
{
public:
	const class ABRPlayerState*                   Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRPlayerState*                         OtherPlayer;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_FormatPlayerNameFor) == 0x000008, "Wrong alignment on BRRichTextUtils_FormatPlayerNameFor");
static_assert(sizeof(BRRichTextUtils_FormatPlayerNameFor) == 0x000020, "Wrong size on BRRichTextUtils_FormatPlayerNameFor");
static_assert(offsetof(BRRichTextUtils_FormatPlayerNameFor, Player) == 0x000000, "Member 'BRRichTextUtils_FormatPlayerNameFor::Player' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_FormatPlayerNameFor, OtherPlayer) == 0x000008, "Member 'BRRichTextUtils_FormatPlayerNameFor::OtherPlayer' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_FormatPlayerNameFor, ReturnValue) == 0x000010, "Member 'BRRichTextUtils_FormatPlayerNameFor::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.GetEffectiveLength
// 0x0018 (0x0018 - 0x0000)
struct BRRichTextUtils_GetEffectiveLength final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BRRichTextUtils_GetEffectiveLength) == 0x000008, "Wrong alignment on BRRichTextUtils_GetEffectiveLength");
static_assert(sizeof(BRRichTextUtils_GetEffectiveLength) == 0x000018, "Wrong size on BRRichTextUtils_GetEffectiveLength");
static_assert(offsetof(BRRichTextUtils_GetEffectiveLength, Input) == 0x000000, "Member 'BRRichTextUtils_GetEffectiveLength::Input' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_GetEffectiveLength, ReturnValue) == 0x000010, "Member 'BRRichTextUtils_GetEffectiveLength::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.ProcessChatMessage
// 0x0030 (0x0030 - 0x0000)
struct BRRichTextUtils_ProcessChatMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatMessage;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDidMarkdownChanges;                               // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_ProcessChatMessage) == 0x000008, "Wrong alignment on BRRichTextUtils_ProcessChatMessage");
static_assert(sizeof(BRRichTextUtils_ProcessChatMessage) == 0x000030, "Wrong size on BRRichTextUtils_ProcessChatMessage");
static_assert(offsetof(BRRichTextUtils_ProcessChatMessage, WorldContextObject) == 0x000000, "Member 'BRRichTextUtils_ProcessChatMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_ProcessChatMessage, ChatMessage) == 0x000008, "Member 'BRRichTextUtils_ProcessChatMessage::ChatMessage' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_ProcessChatMessage, bDidMarkdownChanges) == 0x000018, "Member 'BRRichTextUtils_ProcessChatMessage::bDidMarkdownChanges' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_ProcessChatMessage, ReturnValue) == 0x000020, "Member 'BRRichTextUtils_ProcessChatMessage::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.RemoveMarkup
// 0x0020 (0x0020 - 0x0000)
struct BRRichTextUtils_RemoveMarkup final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_RemoveMarkup) == 0x000008, "Wrong alignment on BRRichTextUtils_RemoveMarkup");
static_assert(sizeof(BRRichTextUtils_RemoveMarkup) == 0x000020, "Wrong size on BRRichTextUtils_RemoveMarkup");
static_assert(offsetof(BRRichTextUtils_RemoveMarkup, Input) == 0x000000, "Member 'BRRichTextUtils_RemoveMarkup::Input' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_RemoveMarkup, ReturnValue) == 0x000010, "Member 'BRRichTextUtils_RemoveMarkup::ReturnValue' has a wrong offset!");

// Function Brickadia.BRRichTextUtils.RemoveNewLines
// 0x0020 (0x0020 - 0x0000)
struct BRRichTextUtils_RemoveNewLines final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRRichTextUtils_RemoveNewLines) == 0x000008, "Wrong alignment on BRRichTextUtils_RemoveNewLines");
static_assert(sizeof(BRRichTextUtils_RemoveNewLines) == 0x000020, "Wrong size on BRRichTextUtils_RemoveNewLines");
static_assert(offsetof(BRRichTextUtils_RemoveNewLines, Input) == 0x000000, "Member 'BRRichTextUtils_RemoveNewLines::Input' has a wrong offset!");
static_assert(offsetof(BRRichTextUtils_RemoveNewLines, ReturnValue) == 0x000010, "Member 'BRRichTextUtils_RemoveNewLines::ReturnValue' has a wrong offset!");

// Function Brickadia.BRWorldManager.RequestSaveWorldBP
// 0x0038 (0x0038 - 0x0000)
struct BRWorldManager_RequestSaveWorldBP final
{
public:
	struct FBRWorldSaveParams                     Params_0;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, const struct FBRWorldSaveResult& Result, const class FText& Error)> Callback;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWorldManager_RequestSaveWorldBP) == 0x000008, "Wrong alignment on BRWorldManager_RequestSaveWorldBP");
static_assert(sizeof(BRWorldManager_RequestSaveWorldBP) == 0x000038, "Wrong size on BRWorldManager_RequestSaveWorldBP");
static_assert(offsetof(BRWorldManager_RequestSaveWorldBP, Params_0) == 0x000000, "Member 'BRWorldManager_RequestSaveWorldBP::Params_0' has a wrong offset!");
static_assert(offsetof(BRWorldManager_RequestSaveWorldBP, Callback) == 0x000028, "Member 'BRWorldManager_RequestSaveWorldBP::Callback' has a wrong offset!");

// Function Brickadia.BRWorldManager.CanSaveWorldBP
// 0x0001 (0x0001 - 0x0000)
struct BRWorldManager_CanSaveWorldBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BRWorldManager_CanSaveWorldBP) == 0x000001, "Wrong alignment on BRWorldManager_CanSaveWorldBP");
static_assert(sizeof(BRWorldManager_CanSaveWorldBP) == 0x000001, "Wrong size on BRWorldManager_CanSaveWorldBP");
static_assert(offsetof(BRWorldManager_CanSaveWorldBP, ReturnValue) == 0x000000, "Member 'BRWorldManager_CanSaveWorldBP::ReturnValue' has a wrong offset!");

}

