#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UDW_and_Weather_Override_Volume_Interface

#include "Basic.hpp"

#include "UDW_and_Weather_Override_Volume_Interface_classes.hpp"
#include "UDW_and_Weather_Override_Volume_Interface_parameters.hpp"


namespace SDK
{

// Function UDW_and_Weather_Override_Volume_Interface.UDW_and_Weather_Override_Volume_Interface_C.Check for Material Refresh
// (Public, BlueprintCallable, BlueprintEvent)

void IUDW_and_Weather_Override_Volume_Interface_C::Check_for_Material_Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDW_and_Weather_Override_Volume_Interface_C", "Check for Material Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDW_and_Weather_Override_Volume_Interface.UDW_and_Weather_Override_Volume_Interface_C.Force WOV Tick
// (Public, BlueprintCallable, BlueprintEvent)

void IUDW_and_Weather_Override_Volume_Interface_C::Force_WOV_Tick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDW_and_Weather_Override_Volume_Interface_C", "Force WOV Tick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UDW_and_Weather_Override_Volume_Interface.UDW_and_Weather_Override_Volume_Interface_C.Get Random Weather Mode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_RandomWeatherTiming*               Mode                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IUDW_and_Weather_Override_Volume_Interface_C::Get_Random_Weather_Mode(EUDS_RandomWeatherTiming* Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDW_and_Weather_Override_Volume_Interface_C", "Get Random Weather Mode");

	Params::UDW_and_Weather_Override_Volume_Interface_C_Get_Random_Weather_Mode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mode != nullptr)
		*Mode = Parms.Mode;
}


// Function UDW_and_Weather_Override_Volume_Interface.UDW_and_Weather_Override_Volume_Interface_C.Get Random Weather Probability Maps
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class UUDS_Weather_Settings_C*, double>*Spring                                                 (Parm, OutParm)
// TMap<class UUDS_Weather_Settings_C*, double>*Summer                                                 (Parm, OutParm)
// TMap<class UUDS_Weather_Settings_C*, double>*Autumn                                                 (Parm, OutParm)
// TMap<class UUDS_Weather_Settings_C*, double>*Winter                                                 (Parm, OutParm)

void IUDW_and_Weather_Override_Volume_Interface_C::Get_Random_Weather_Probability_Maps(TMap<class UUDS_Weather_Settings_C*, double>* Spring, TMap<class UUDS_Weather_Settings_C*, double>* Summer, TMap<class UUDS_Weather_Settings_C*, double>* Autumn, TMap<class UUDS_Weather_Settings_C*, double>* Winter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDW_and_Weather_Override_Volume_Interface_C", "Get Random Weather Probability Maps");

	Params::UDW_and_Weather_Override_Volume_Interface_C_Get_Random_Weather_Probability_Maps Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Spring != nullptr)
		*Spring = std::move(Parms.Spring);

	if (Summer != nullptr)
		*Summer = std::move(Parms.Summer);

	if (Autumn != nullptr)
		*Autumn = std::move(Parms.Autumn);

	if (Winter != nullptr)
		*Winter = std::move(Parms.Winter);
}


// Function UDW_and_Weather_Override_Volume_Interface.UDW_and_Weather_Override_Volume_Interface_C.Get Season Temperature Ranges
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D*                       Spring                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Summer                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Autumn                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Winter                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IUDW_and_Weather_Override_Volume_Interface_C::Get_Season_Temperature_Ranges(struct FVector2D* Spring, struct FVector2D* Summer, struct FVector2D* Autumn, struct FVector2D* Winter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDW_and_Weather_Override_Volume_Interface_C", "Get Season Temperature Ranges");

	Params::UDW_and_Weather_Override_Volume_Interface_C_Get_Season_Temperature_Ranges Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Spring != nullptr)
		*Spring = std::move(Parms.Spring);

	if (Summer != nullptr)
		*Summer = std::move(Parms.Summer);

	if (Autumn != nullptr)
		*Autumn = std::move(Parms.Autumn);

	if (Winter != nullptr)
		*Winter = std::move(Parms.Winter);
}

}

