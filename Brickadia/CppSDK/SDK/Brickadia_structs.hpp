#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Brickadia

#include "Basic.hpp"

#include "JsonUtilities_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimationCore_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "IrisCore_structs.hpp"


namespace SDK
{

// Enum Brickadia.EBRCharacterFlyMode
// NumValues: 0x0004
enum class EBRCharacterFlyMode : uint8
{
	NotFlying                                = 0,
	Flying                                   = 1,
	GhostFlying                              = 2,
	EBRCharacterFlyMode_MAX                  = 3,
};

// Enum Brickadia.EBRCharacterInteractAnimType
// NumValues: 0x0004
enum class EBRCharacterInteractAnimType : uint8
{
	GestureAndFlail                          = 0,
	Press                                    = 1,
	PressAndHold                             = 2,
	EBRCharacterInteractAnimType_MAX         = 3,
};

// Enum Brickadia.EBRWeaponInputKeys
// NumValues: 0x000A
enum class EBRWeaponInputKeys : uint8
{
	None                                     = 0,
	PrimaryFire                              = 1,
	SecondaryFire                            = 2,
	Reload                                   = 4,
	Inspect                                  = 8,
	Custom1                                  = 16,
	Custom2                                  = 32,
	Custom3                                  = 64,
	Custom4                                  = 128,
	EBRWeaponInputKeys_MAX                   = 129,
};

// Enum Brickadia.EBRWeaponOuterState
// NumValues: 0x0005
enum class EBRWeaponOuterState : uint8
{
	Inactive                                 = 0,
	Equipping                                = 1,
	Unequipping                              = 2,
	Active                                   = 3,
	EBRWeaponOuterState_MAX                  = 4,
};

// Enum Brickadia.EControllerInputMode
// NumValues: 0x0005
enum class EControllerInputMode : uint8
{
	Default                                  = 0,
	SubMenu                                  = 1,
	PaintTool                                = 2,
	SelectorTool                             = 3,
	EControllerInputMode_MAX                 = 4,
};

// Enum Brickadia.EBrickSelectionLayers
// NumValues: 0x0009
enum class EBrickSelectionLayers : uint8
{
	None                                     = 0,
	Generic                                  = 1,
	PlacePreview                             = 2,
	PlaceError                               = 4,
	ToolHighlight                            = 8,
	DeletePreview                            = 16,
	AllChannels                              = 31,
	MaxValue                                 = 32,
	EBrickSelectionLayers_MAX                = 33,
};

// Enum Brickadia.EBRCharacterControlMode
// NumValues: 0x0004
enum class EBRCharacterControlMode : uint8
{
	FirstPerson                              = 0,
	ThirdPersonOrbiting                      = 1,
	ThirdPersonStrafing                      = 2,
	EBRCharacterControlMode_MAX              = 3,
};

// Enum Brickadia.EBRAuthState
// NumValues: 0x0011
enum class EBRAuthState : uint8
{
	Invalid                                  = 0,
	InvalidFatal                             = 1,
	PendingLogin                             = 2,
	PendingAutoCheckLogin                    = 3,
	PendingManualCheckLogin                  = 4,
	ValidOffline                             = 5,
	ValidOnline                              = 6,
	ValidEditor                              = 7,
	InvalidNeedSteamTicket                   = 8,
	InvalidNeedSteamLogin                    = 9,
	InvalidNeedSteamAccount                  = 10,
	PendingSteamTicketInitial                = 11,
	PendingSteamTicketRetry                  = 12,
	PendingSteamLogin                        = 13,
	PendingSteamConnect                      = 14,
	PendingSteamRegister                     = 15,
	EBRAuthState_MAX                         = 16,
};

// Enum Brickadia.EHintShowPlace
// NumValues: 0x0004
enum class EHintShowPlace : uint8
{
	Ingame                                   = 0,
	PauseMenu                                = 1,
	Both                                     = 2,
	EHintShowPlace_MAX                       = 3,
};

// Enum Brickadia.EHintCategory
// NumValues: 0x000A
enum class EHintCategory : uint8
{
	Default                                  = 0,
	Placer                                   = 1,
	Color                                    = 2,
	Selector                                 = 3,
	Resizer                                  = 4,
	Connector                                = 5,
	Applicator                               = 6,
	Manipulator                              = 7,
	Nothing                                  = 8,
	EHintCategory_MAX                        = 9,
};

// Enum Brickadia.EBRResolutionScalePreset
// NumValues: 0x0008
enum class EBRResolutionScalePreset : uint8
{
	Auto                                     = 0,
	Performance2                             = 1,
	Performance                              = 2,
	Balanced                                 = 3,
	Quality                                  = 4,
	Native                                   = 5,
	Custom                                   = 6,
	EBRResolutionScalePreset_MAX             = 7,
};

// Enum Brickadia.EBRAntiAliasingMode
// NumValues: 0x0008
enum class EBRAntiAliasingMode : uint8
{
	None                                     = 0,
	FXAA                                     = 1,
	TAA                                      = 2,
	TSR                                      = 3,
	FSR1                                     = 4,
	FSR3                                     = 5,
	DLSS                                     = 6,
	EBRAntiAliasingMode_MAX                  = 7,
};

// Enum Brickadia.EBRGlobalIlluminationMode
// NumValues: 0x0005
enum class EBRGlobalIlluminationMode : uint8
{
	None                                     = 0,
	SSGIHalfRes                              = 1,
	SSGIFullRes                              = 2,
	ProtoLumen                               = 3,
	EBRGlobalIlluminationMode_MAX            = 4,
};

// Enum Brickadia.EBRMotionBlurMode
// NumValues: 0x0004
enum class EBRMotionBlurMode : uint8
{
	Disabled                                 = 0,
	Object                                   = 1,
	Camera                                   = 2,
	EBRMotionBlurMode_MAX                    = 3,
};

// Enum Brickadia.EBRRenderingMode
// NumValues: 0x0004
enum class EBRRenderingMode : uint8
{
	DirectX11                                = 0,
	DirectX12                                = 1,
	SimpleShading                            = 2,
	EBRRenderingMode_MAX                     = 3,
};

// Enum Brickadia.EBrickPreviewMode
// NumValues: 0x0004
enum class EBrickPreviewMode : uint8
{
	Disabled                                 = 0,
	Simple                                   = 1,
	Free                                     = 2,
	EBrickPreviewMode_MAX                    = 3,
};

// Enum Brickadia.EBrickOrientation
// NumValues: 0x0019
enum class EBrickOrientation : uint8
{
	X_Positive_0                             = 0,
	X_Positive_90                            = 1,
	X_Positive_180                           = 2,
	X_Positive_270                           = 3,
	X_Negative_0                             = 4,
	X_Negative_90                            = 5,
	X_Negative_180                           = 6,
	X_Negative_270                           = 7,
	Y_Positive_0                             = 8,
	Y_Positive_90                            = 9,
	Y_Positive_180                           = 10,
	Y_Positive_270                           = 11,
	Y_Negative_0                             = 12,
	Y_Negative_90                            = 13,
	Y_Negative_180                           = 14,
	Y_Negative_270                           = 15,
	Z_Positive_0                             = 16,
	Z_Positive_90                            = 17,
	Z_Positive_180                           = 18,
	Z_Positive_270                           = 19,
	Z_Negative_0                             = 20,
	Z_Negative_90                            = 21,
	Z_Negative_180                           = 22,
	Z_Negative_270                           = 23,
	MAX                                      = 24,
};

// Enum Brickadia.EBrickTransactionManagerState
// NumValues: 0x0006
enum class EBrickTransactionManagerState : uint8
{
	Idle                                     = 0,
	ProcessingNew                            = 1,
	ProcessingNewMerged                      = 2,
	ProcessingUndo                           = 3,
	ProcessingRedo                           = 4,
	EBrickTransactionManagerState_MAX        = 5,
};

// Enum Brickadia.EBrickTransactionTickResult
// NumValues: 0x0004
enum class EBrickTransactionTickResult : uint8
{
	Failed                                   = 0,
	Finished                                 = 1,
	Unfinished                               = 2,
	EBrickTransactionTickResult_MAX          = 3,
};

// Enum Brickadia.EBrickReverseTransactionMergeMode
// NumValues: 0x0003
enum class EBrickReverseTransactionMergeMode : uint8
{
	Append                                   = 0,
	Discard                                  = 1,
	EBrickReverseTransactionMergeMode_MAX    = 2,
};

// Enum Brickadia.EBrickTransactionCompletionReason
// NumValues: 0x0004
enum class EBrickTransactionCompletionReason : uint8
{
	Failed                                   = 0,
	Finished                                 = 1,
	Aborted                                  = 2,
	EBrickTransactionCompletionReason_MAX    = 3,
};

// Enum Brickadia.EInspectorCategoryCollapseMode
// NumValues: 0x0004
enum class EInspectorCategoryCollapseMode : uint8
{
	ExpandedByDefault                        = 0,
	HiddenByDefault                          = 1,
	AlwaysExpanded                           = 2,
	EInspectorCategoryCollapseMode_MAX       = 3,
};

// Enum Brickadia.EBHJsonVersion
// NumValues: 0x0004
enum class EBHJsonVersion : uint16
{
	Invalid                                  = 0,
	Initial                                  = 1,
	Max                                      = 2,
	Current                                  = 1,
};

// Enum Brickadia.EBHConfigTypeInfoColorMode
// NumValues: 0x0004
enum class EBHConfigTypeInfoColorMode : uint8
{
	Fixed                                    = 0,
	Curve                                    = 1,
	InvertedCurve                            = 2,
	EBHConfigTypeInfoColorMode_MAX           = 3,
};

// Enum Brickadia.EBHTreeUnaryOperator
// NumValues: 0x0004
enum class EBHTreeUnaryOperator : uint8
{
	Negate                                   = 0,
	BitwiseNot                               = 1,
	Not                                      = 2,
	EBHTreeUnaryOperator_MAX                 = 3,
};

// Enum Brickadia.EBHTreeBinaryOperator
// NumValues: 0x0011
enum class EBHTreeBinaryOperator : uint8
{
	Add                                      = 0,
	Sub                                      = 1,
	Div                                      = 2,
	Mul                                      = 3,
	Mod                                      = 4,
	BitwiseAnd                               = 5,
	BitwiseOr                                = 6,
	BitwiseXOr                               = 7,
	BitwiseLeftShift                         = 8,
	BitwiseRightShift                        = 9,
	Equal                                    = 10,
	NotEqual                                 = 11,
	Greater                                  = 12,
	Less                                     = 13,
	GreaterEqual                             = 14,
	LessEqual                                = 15,
	EBHTreeBinaryOperator_MAX                = 16,
};

// Enum Brickadia.EBRAssetType
// NumValues: 0x0005
enum class EBRAssetType : uint8
{
	Invalid                                  = 0,
	Preset                                   = 1,
	Behavior                                 = 2,
	Prefab                                   = 3,
	EBRAssetType_MAX                         = 4,
};

// Enum Brickadia.EBRBundleDependencyType
// NumValues: 0x0004
enum class EBRBundleDependencyType : uint8
{
	Required                                 = 0,
	Optional                                 = 1,
	Blocked                                  = 2,
	EBRBundleDependencyType_MAX              = 3,
};

// Enum Brickadia.EBRBundleType
// NumValues: 0x0005
enum class EBRBundleType : uint8
{
	Invalid                                  = 0,
	AssetPack                                = 1,
	GameMode                                 = 2,
	World                                    = 3,
	EBRBundleType_MAX                        = 4,
};

// Enum Brickadia.EBRDialogButtonStyle
// NumValues: 0x0006
enum class EBRDialogButtonStyle : uint8
{
	Normal                                   = 0,
	Main                                     = 1,
	Info                                     = 2,
	Warning                                  = 3,
	Critical                                 = 4,
	EBRDialogButtonStyle_MAX                 = 5,
};

// Enum Brickadia.EBRDialogState
// NumValues: 0x0005
enum class EBRDialogState : uint8
{
	Hidden                                   = 0,
	Opening                                  = 1,
	Open                                     = 2,
	Hiding                                   = 3,
	EBRDialogState_MAX                       = 4,
};

// Enum Brickadia.EBRInputDeviceType
// NumValues: 0x0008
enum class EBRInputDeviceType : uint8
{
	Keyboard                                 = 0,
	XboxSeries                               = 1,
	PlayStation4                             = 2,
	PlayStation5                             = 3,
	Switch                                   = 4,
	SteamDeck                                = 5,
	Other                                    = 6,
	EBRInputDeviceType_MAX                   = 7,
};

// Enum Brickadia.EBrickLoadColorCorrectionMode
// NumValues: 0x0004
enum class EBrickLoadColorCorrectionMode : uint8
{
	DoNotCorrect                             = 0,
	CorrectPaletteColors                     = 1,
	CorrectAllColors                         = 2,
	EBrickLoadColorCorrectionMode_MAX        = 3,
};

// Enum Brickadia.EBrickLoadOwnershipMode
// NumValues: 0x0004
enum class EBrickLoadOwnershipMode : uint8
{
	LoadSavedOwnership                       = 0,
	LoadAsPublic                             = 1,
	LoadAsMine                               = 2,
	EBrickLoadOwnershipMode_MAX              = 3,
};

// Enum Brickadia.EBRWindowMode
// NumValues: 0x0004
enum class EBRWindowMode : uint8
{
	Exclusive                                = 0,
	Fullscreen                               = 1,
	Windowed                                 = 2,
	EBRWindowMode_MAX                        = 3,
};

// Enum Brickadia.ECrosshairMode
// NumValues: 0x0004
enum class ECrosshairMode : uint8
{
	Default                                  = 0,
	Hand                                     = 1,
	Button                                   = 2,
	ECrosshairMode_MAX                       = 3,
};

// Enum Brickadia.EBrickComponentAttachReason
// NumValues: 0x0004
enum class EBrickComponentAttachReason : uint8
{
	RequestedManually                        = 0,
	BrickLoaded                              = 1,
	Replication                              = 2,
	EBrickComponentAttachReason_MAX          = 3,
};

// Enum Brickadia.EBrickComponentDetachReason
// NumValues: 0x0004
enum class EBrickComponentDetachReason : uint8
{
	RequestedManually                        = 0,
	BrickRemoved                             = 1,
	Replication                              = 2,
	EBrickComponentDetachReason_MAX          = 3,
};

// Enum Brickadia.EBrickNativeEvent
// NumValues: 0x0019
enum class EBrickNativeEvent : uint8
{
	OnAttached                               = 0,
	OnDetached                               = 1,
	OnBrickTypeChanged                       = 2,
	OnPositionChanged                        = 3,
	OnOrientationChanged                     = 4,
	OnMaterialIndexChanged                   = 5,
	OnMaterialAlphaChanged                   = 6,
	OnColorChanged                           = 7,
	OnOwnerChanged                           = 8,
	OnCollisionChanged                       = 9,
	OnSelectionLayersChanged                 = 10,
	OnVisibilityChanged                      = 11,
	OnWireDestinationsChanged                = 12,
	OnInteractPress                          = 13,
	OnInteractRelease                        = 14,
	OnTick                                   = 15,
	OnClientTick                             = 16,
	OnTakeDamage                             = 17,
	OnCharacterBeginTouch                    = 18,
	OnCharacterEndTouch                      = 19,
	OnMinigameRoundEnded                     = 20,
	OnMinigameRoundStarted                   = 21,
	COUNT                                    = 22,
	ZERO                                     = 0,
	EBrickNativeEvent_MAX                    = 23,
};

// Enum Brickadia.EBrickComponentAttachResult
// NumValues: 0x0005
enum class EBrickComponentAttachResult : uint8
{
	Success                                  = 0,
	AlreadyAttached                          = 1,
	QuotaExceeded                            = 2,
	Unattachable                             = 3,
	EBrickComponentAttachResult_MAX          = 4,
};

// Enum Brickadia.EBrickComponentWireConnectResult
// NumValues: 0x0005
enum class EBrickComponentWireConnectResult : uint8
{
	Success                                  = 0,
	AlreadyConnected                         = 1,
	Unconnectable                            = 2,
	Invalid                                  = 3,
	EBrickComponentWireConnectResult_MAX     = 4,
};

// Enum Brickadia.EBrickComponentDetachResult
// NumValues: 0x0004
enum class EBrickComponentDetachResult : uint8
{
	Success                                  = 0,
	NotAttached                              = 1,
	Undetachable                             = 2,
	EBrickComponentDetachResult_MAX          = 3,
};

// Enum Brickadia.EBrickComponentWireDisconnectResult
// NumValues: 0x0005
enum class EBrickComponentWireDisconnectResult : uint8
{
	Success                                  = 0,
	NotConnected                             = 1,
	Undisconnectable                         = 2,
	Invalid                                  = 3,
	EBrickComponentWireDisconnectResult_MAX  = 4,
};

// Enum Brickadia.EBrickComponentPropertyChangeReason
// NumValues: 0x0005
enum class EBrickComponentPropertyChangeReason : uint8
{
	Manual                                   = 0,
	Inspector                                = 1,
	Wire                                     = 2,
	Replication                              = 3,
	EBrickComponentPropertyChangeReason_MAX  = 4,
};

// Enum Brickadia.EBrickComponentJointConnectResult
// NumValues: 0x0004
enum class EBrickComponentJointConnectResult : uint8
{
	Success                                  = 0,
	JointAlreadyConnected                    = 1,
	Invalid                                  = 2,
	EBrickComponentJointConnectResult_MAX    = 3,
};

// Enum Brickadia.EBrickInsertFlags
// NumValues: 0x0008
enum class EBrickInsertFlags : uint8
{
	None                                     = 0,
	IgnoreOverlap                            = 1,
	IgnoreFloating                           = 2,
	IgnoreMapRules                           = 4,
	IgnoreComponents                         = 8,
	IgnoreAllRules                           = 7,
	ALL                                      = 15,
	EBrickInsertFlags_MAX                    = 16,
};

// Enum Brickadia.EBrickDirection
// NumValues: 0x0007
enum class EBrickDirection : uint8
{
	X_Positive                               = 0,
	X_Negative                               = 1,
	Y_Positive                               = 2,
	Y_Negative                               = 3,
	Z_Positive                               = 4,
	Z_Negative                               = 5,
	MAX                                      = 6,
};

// Enum Brickadia.EBrickAxis
// NumValues: 0x0004
enum class EBrickAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	MAX                                      = 3,
};

// Enum Brickadia.EBrickRotation
// NumValues: 0x0005
enum class EBrickRotation : uint8
{
	Deg_0                                    = 0,
	Deg_90                                   = 1,
	Deg_180                                  = 2,
	Deg_270                                  = 3,
	MAX                                      = 4,
};

// Enum Brickadia.EBrickCollisionChannels
// NumValues: 0x0008
enum class EBrickCollisionChannels : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Weapon                                   = 2,
	Interaction                              = 4,
	Tool                                     = 8,
	AllChannels                              = 15,
	MaxValue                                 = 16,
	EBrickCollisionChannels_MAX              = 17,
};

// Enum Brickadia.EBrickCoverageGroup
// NumValues: 0x000A
enum class EBrickCoverageGroup : uint8
{
	Unknown                                  = 0,
	X_Positive                               = 1,
	X_Negative                               = 2,
	Y_Positive                               = 4,
	Y_Negative                               = 8,
	Z_Positive                               = 16,
	Z_Negative                               = 32,
	AnySide                                  = 63,
	Always                                   = 64,
	EBrickCoverageGroup_MAX                  = 65,
};

// Enum Brickadia.EBrickTextureGroup
// NumValues: 0x0006
enum class EBrickTextureGroup : uint8
{
	Bevel                                    = 0,
	Stud                                     = 1,
	Bumpy                                    = 2,
	InletBorder                              = 3,
	InletCenter                              = 4,
	EBrickTextureGroup_MAX                   = 5,
};

// Enum Brickadia.EBrickVertexColorMode
// NumValues: 0x0005
enum class EBrickVertexColorMode : uint8
{
	Ignore                                   = 0,
	Replace                                  = 1,
	Add                                      = 2,
	Subtract                                 = 3,
	EBrickVertexColorMode_MAX                = 4,
};

// Enum Brickadia.EBrickAnchorType
// NumValues: 0x0003
enum class EBrickAnchorType : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	EBrickAnchorType_MAX                     = 2,
};

// Enum Brickadia.EBrickCoverageGroupEditorHelper
// NumValues: 0x0007
enum class EBrickCoverageGroupEditorHelper : uint8
{
	X_Positive                               = 0,
	X_Negative                               = 1,
	Y_Positive                               = 2,
	Y_Negative                               = 3,
	Z_Positive                               = 4,
	Z_Negative                               = 5,
	EBrickCoverageGroupEditorHelper_MAX      = 6,
};

// Enum Brickadia.EBrickGeneratorAxisLockMode
// NumValues: 0x0006
enum class EBrickGeneratorAxisLockMode : uint8
{
	None                                     = 0,
	XY                                       = 1,
	XZ                                       = 2,
	YZ                                       = 3,
	XYZ                                      = 4,
	EBrickGeneratorAxisLockMode_MAX          = 5,
};

// Enum Brickadia.EBrickComposedSpanMode
// NumValues: 0x0004
enum class EBrickComposedSpanMode : uint8
{
	Stretch                                  = 0,
	Repeat                                   = 1,
	Center                                   = 2,
	EBrickComposedSpanMode_MAX               = 3,
};

// Enum Brickadia.EBrickComposedNameStyle
// NumValues: 0x0003
enum class EBrickComposedNameStyle : uint8
{
	MicroBrick                               = 0,
	Brick                                    = 1,
	EBrickComposedNameStyle_MAX              = 2,
};

// Enum Brickadia.EBRSavedRolesVersion
// NumValues: 0x0005
enum class EBRSavedRolesVersion : uint8
{
	Invalid                                  = 0,
	Initial                                  = 1,
	ThreePermissionStates                    = 2,
	Max                                      = 3,
	Current                                  = 2,
};

// Enum Brickadia.EBRPermissionRulesetBehavior
// NumValues: 0x0004
enum class EBRPermissionRulesetBehavior : uint8
{
	Unaffected                               = 0,
	DefaultDenied                            = 1,
	DefaultGranted                           = 2,
	EBRPermissionRulesetBehavior_MAX         = 3,
};

// Enum Brickadia.EBRPermissionDefaultForRole
// NumValues: 0x0005
enum class EBRPermissionDefaultForRole : uint8
{
	Nobody                                   = 0,
	Admin                                    = 1,
	Moderator                                = 2,
	Everyone                                 = 3,
	EBRPermissionDefaultForRole_MAX          = 4,
};

// Enum Brickadia.EBRSetPermission
// NumValues: 0x0004
enum class EBRSetPermission : uint8
{
	Allowed                                  = 0,
	Forbidden                                = 1,
	Unchanged                                = 2,
	EBRSetPermission_MAX                     = 3,
};

// Enum Brickadia.ERulesetEntryPolicy
// NumValues: 0x0004
enum class ERulesetEntryPolicy : uint8
{
	Public                                   = 0,
	TrustedOnly                              = 1,
	Private                                  = 2,
	ERulesetEntryPolicy_MAX                  = 3,
};

// Enum Brickadia.ERulesetJoinPolicy
// NumValues: 0x0003
enum class ERulesetJoinPolicy : uint8
{
	Immediate                                = 0,
	Wait                                     = 1,
	ERulesetJoinPolicy_MAX                   = 2,
};

// Enum Brickadia.ERulesetType
// NumValues: 0x0005
enum class ERulesetType : uint8
{
	Minigame                                 = 0,
	PersistentMinigame                       = 1,
	DefaultMinigame                          = 2,
	Global                                   = 3,
	ERulesetType_MAX                         = 4,
};

// Enum Brickadia.ERulesetSpawnMode
// NumValues: 0x0004
enum class ERulesetSpawnMode : uint8
{
	UseNothing                               = 0,
	UseBricks                                = 1,
	UseSpawnSphere                           = 2,
	ERulesetSpawnMode_MAX                    = 3,
};

// Enum Brickadia.ERulesetRelevantBricks
// NumValues: 0x0007
enum class ERulesetRelevantBricks : uint8
{
	OwnerOnly                                = 0,
	Members                                  = 1,
	TheirOwn                                 = 2,
	TheirOwnOrPublic                         = 3,
	TheirOwnOrTrusted                        = 4,
	All                                      = 5,
	ERulesetRelevantBricks_MAX               = 6,
};

// Enum Brickadia.ERulesetBrickRespawnMode
// NumValues: 0x0004
enum class ERulesetBrickRespawnMode : uint8
{
	Timer                                    = 0,
	EndOfRound                               = 1,
	ActuallyDestroy                          = 2,
	ERulesetBrickRespawnMode_MAX             = 3,
};

// Enum Brickadia.EGameTypeTeamPolicy
// NumValues: 0x0003
enum class EGameTypeTeamPolicy : uint8
{
	Unlocked                                 = 0,
	Locked                                   = 1,
	EGameTypeTeamPolicy_MAX                  = 2,
};

// Enum Brickadia.ELeaderboardValueResetTime
// NumValues: 0x0004
enum class ELeaderboardValueResetTime : uint8
{
	Never                                    = 0,
	ChangeTeam                               = 1,
	NewRoundOrChangeTeam                     = 2,
	ELeaderboardValueResetTime_MAX           = 3,
};

// Enum Brickadia.ETeamSpawnMode
// NumValues: 0x0007
enum class ETeamSpawnMode : uint8
{
	UseSpawnSphereOnly                       = 0,
	UseAllSpawnBricks                        = 1,
	UseMinigameColoredBricks                 = 2,
	UseUnaffiliatedSpawnBricks               = 3,
	UseTeamColoredSpawnBricks                = 4,
	UseTeamColoredOrUnaffiliatedSpawnBricks  = 5,
	ETeamSpawnMode_MAX                       = 6,
};

// Enum Brickadia.ESpecialBrickUsePolicy
// NumValues: 0x0006
enum class ESpecialBrickUsePolicy : uint8
{
	All                                      = 0,
	TeamColored                              = 1,
	Unaffiliated                             = 2,
	TeamColoredOrUnaffiliated                = 3,
	None                                     = 4,
	ESpecialBrickUsePolicy_MAX               = 5,
};

// Enum Brickadia.EControlModePolicy
// NumValues: 0x0004
enum class EControlModePolicy : uint8
{
	UserChoice                               = 0,
	ForceFirstPerson                         = 1,
	ForceThirdPerson                         = 2,
	EControlModePolicy_MAX                   = 3,
};

// Enum Brickadia.ERulesetSpectatePolicy
// NumValues: 0x0004
enum class ERulesetSpectatePolicy : uint8
{
	All                                      = 0,
	OwnTeam                                  = 1,
	OtherTeams                               = 2,
	ERulesetSpectatePolicy_MAX               = 3,
};

// Enum Brickadia.ERulesetTeamSpectatorChat
// NumValues: 0x0004
enum class ERulesetTeamSpectatorChat : uint8
{
	ToAll                                    = 0,
	ToDead                                   = 1,
	Disabled                                 = 2,
	ERulesetTeamSpectatorChat_MAX            = 3,
};

// Enum Brickadia.ERulesetTeamVisibility
// NumValues: 0x0004
enum class ERulesetTeamVisibility : uint8
{
	VisibleToAll                             = 0,
	VisibleToSameTeam                        = 1,
	VisibleToSelf                            = 2,
	ERulesetTeamVisibility_MAX               = 3,
};

// Enum Brickadia.ECharacterBaseRotationOverride
// NumValues: 0x0004
enum class ECharacterBaseRotationOverride : uint8
{
	NotOverridden                            = 0,
	ForcedOn                                 = 1,
	ForcedOff                                = 2,
	ECharacterBaseRotationOverride_MAX       = 3,
};

// Enum Brickadia.EBRInventoryEntryPlanType
// NumValues: 0x0005
enum class EBRInventoryEntryPlanType : uint8
{
	Nothing                                  = 0,
	Brick                                    = 1,
	Entity                                   = 2,
	Item                                     = 3,
	EBRInventoryEntryPlanType_MAX            = 4,
};

// Enum Brickadia.EBRColorMigrationMode
// NumValues: 0x0003
enum class EBRColorMigrationMode : uint8
{
	Nearest                                  = 0,
	Index                                    = 1,
	EBRColorMigrationMode_MAX                = 2,
};

// Enum Brickadia.ETextSeverity
// NumValues: 0x0003
enum class ETextSeverity : uint8
{
	Minor                                    = 0,
	Major                                    = 1,
	ETextSeverity_MAX                        = 2,
};

// Enum Brickadia.EBRPortIndicatorDisplayMode
// NumValues: 0x0003
enum class EBRPortIndicatorDisplayMode : uint8
{
	OmniportAndDefaultComponentPorts         = 0,
	OmniportOnly                             = 1,
	EBRPortIndicatorDisplayMode_MAX          = 2,
};

// Enum Brickadia.EBRApplicatorClipboardState
// NumValues: 0x0004
enum class EBRApplicatorClipboardState : uint8
{
	Empty                                    = 0,
	HasBrickState                            = 1,
	HasEntityState                           = 2,
	EBRApplicatorClipboardState_MAX          = 3,
};

// Enum Brickadia.EBRConnectorDisplayedPortType
// NumValues: 0x0005
enum class EBRConnectorDisplayedPortType : uint8
{
	Input                                    = 0,
	Output                                   = 1,
	Omniport                                 = 2,
	Rerouter                                 = 3,
	EBRConnectorDisplayedPortType_MAX        = 4,
};

// Enum Brickadia.EBRPlacerMouseModeState
// NumValues: 0x0009
enum class EBRPlacerMouseModeState : uint8
{
	None                                     = 0,
	PreviewingRegular                        = 1,
	PreviewingFloating                       = 2,
	PreviewingLocked                         = 3,
	PrePlacing                               = 4,
	Placing                                  = 5,
	PreReorienting                           = 6,
	Reorienting                              = 7,
	EBRPlacerMouseModeState_MAX              = 8,
};

// Enum Brickadia.EBRPlacerKeyboardModeState
// NumValues: 0x0006
enum class EBRPlacerKeyboardModeState : uint8
{
	Moving                                   = 0,
	PreOrienting                             = 1,
	Orienting                                = 2,
	Rotating                                 = 3,
	Placing                                  = 4,
	EBRPlacerKeyboardModeState_MAX           = 5,
};

// Enum Brickadia.EBRPlacerPlacingState
// NumValues: 0x0004
enum class EBRPlacerPlacingState : uint8
{
	NotPlacing                               = 0,
	QuickPlacing                             = 1,
	DragPlacing                              = 2,
	EBRPlacerPlacingState_MAX                = 3,
};

// Enum Brickadia.EBRPlacementContextType
// NumValues: 0x0004
enum class EBRPlacementContextType : uint8
{
	ExistingBrickGrid                        = 0,
	NewBrickGrid                             = 1,
	JointConnectedBrickGrid                  = 2,
	EBRPlacementContextType_MAX              = 3,
};

// Enum Brickadia.EBRWeaponAmmoUsageOverride
// NumValues: 0x0004
enum class EBRWeaponAmmoUsageOverride : uint8
{
	Default                                  = 0,
	InfiniteAmmo                             = 1,
	InfiniteMagazine                         = 2,
	EBRWeaponAmmoUsageOverride_MAX           = 3,
};

// Enum Brickadia.EBRWeaponProjectileReplicationMode
// NumValues: 0x0004
enum class EBRWeaponProjectileReplicationMode : uint8
{
	AcceleratedPredictedRPC                  = 0,
	AcceleratedRPC                           = 1,
	ReplicatedActor                          = 2,
	EBRWeaponProjectileReplicationMode_MAX   = 3,
};

// Enum Brickadia.EBRWeaponResourceUsageOverride
// NumValues: 0x0004
enum class EBRWeaponResourceUsageOverride : uint8
{
	Default                                  = 0,
	InfinitePlayerSupply                     = 1,
	InfiniteWeaponSupply                     = 2,
	EBRWeaponResourceUsageOverride_MAX       = 3,
};

// Enum Brickadia.EBRWeaponSimulationType
// NumValues: 0x0005
enum class EBRWeaponSimulationType : uint8
{
	Authority                                = 0,
	ClientPrediction                         = 1,
	ClientReconciliation                     = 2,
	ClientRemote                             = 3,
	EBRWeaponSimulationType_MAX              = 4,
};

// Enum Brickadia.EBRWeaponResourceChangeType
// NumValues: 0x0006
enum class EBRWeaponResourceChangeType : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	PlayerSet                                = 2,
	PlayerAdd                                = 3,
	Transfer                                 = 4,
	EBRWeaponResourceChangeType_MAX          = 5,
};

// Enum Brickadia.EBRWeaponStateTransitionOp_Float
// NumValues: 0x0003
enum class EBRWeaponStateTransitionOp_Float : uint8
{
	LessThan                                 = 0,
	GreaterEquals                            = 1,
	EBRWeaponStateTransitionOp_MAX           = 2,
};

// Enum Brickadia.EBRWeaponStateTransitionOp_Integer
// NumValues: 0x0007
enum class EBRWeaponStateTransitionOp_Integer : uint8
{
	Equals                                   = 0,
	NotEquals                                = 1,
	GreaterThan                              = 2,
	LessThan                                 = 3,
	GreaterEquals                            = 4,
	LessEquals                               = 5,
	EBRWeaponStateTransitionOp_MAX           = 6,
};

// Enum Brickadia.EBRWorldType
// NumValues: 0x0005
enum class EBRWorldType : uint8
{
	None                                     = 0,
	MainMenu                                 = 1,
	Game                                     = 2,
	Preview                                  = 3,
	EBRWorldType_MAX                         = 4,
};

// Enum Brickadia.EBRChatCommandArgType
// NumValues: 0x0005
enum class EBRChatCommandArgType : uint8
{
	Bool                                     = 0,
	Int                                      = 1,
	Float                                    = 2,
	String                                   = 3,
	EBRChatCommandArgType_MAX                = 4,
};

// Enum Brickadia.EHatRotation
// NumValues: 0x0005
enum class EHatRotation : uint8
{
	Forward                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	Backward                                 = 3,
	EHatRotation_MAX                         = 4,
};

// Enum Brickadia.EIsEnabledMode
// NumValues: 0x0005
enum class EIsEnabledMode : uint32
{
	Function                                 = 0,
	BoolProperty                             = 1,
	NotBoolProperty                          = 2,
	AlwaysDisabled                           = 3,
	EIsEnabledMode_MAX                       = 4,
};

// Enum Brickadia.EStringDescriptorType
// NumValues: 0x0004
enum class EStringDescriptorType : uint8
{
	SingleLine                               = 0,
	MultiLine                                = 1,
	Password                                 = 2,
	EStringDescriptorType_MAX                = 3,
};

// Enum Brickadia.EInspectorPropertyValueType
// NumValues: 0x000B
enum class EInspectorPropertyValueType : uint8
{
	Invalid                                  = 0,
	Boolean                                  = 1,
	Byte                                     = 2,
	Int                                      = 3,
	Int64                                    = 4,
	Float                                    = 5,
	Double                                   = 6,
	String                                   = 7,
	Name                                     = 8,
	InstancedStruct                          = 9,
	EInspectorPropertyValueType_MAX          = 10,
};

// Enum Brickadia.EInspectorViewTargetType
// NumValues: 0x0003
enum class EInspectorViewTargetType : uint8
{
	Invalid                                  = 0,
	UnrealStruct                             = 1,
	EInspectorViewTargetType_MAX             = 2,
};

// ScriptStruct Brickadia.BrickPlaceEntityInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FBrickPlaceEntityInfo final
{
public:
	class UBREntityTypeBase*                      EntityType;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Colors[0x8];                                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnerTableId;                                      // 0x0090(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0xC];                                       // 0x0094(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickPlaceEntityInfo) == 0x000010, "Wrong alignment on FBrickPlaceEntityInfo");
static_assert(sizeof(FBrickPlaceEntityInfo) == 0x0000A0, "Wrong size on FBrickPlaceEntityInfo");
static_assert(offsetof(FBrickPlaceEntityInfo, EntityType) == 0x000000, "Member 'FBrickPlaceEntityInfo::EntityType' has a wrong offset!");
static_assert(offsetof(FBrickPlaceEntityInfo, Transform) == 0x000010, "Member 'FBrickPlaceEntityInfo::Transform' has a wrong offset!");
static_assert(offsetof(FBrickPlaceEntityInfo, Colors) == 0x000070, "Member 'FBrickPlaceEntityInfo::Colors' has a wrong offset!");
static_assert(offsetof(FBrickPlaceEntityInfo, OwnerTableId) == 0x000090, "Member 'FBrickPlaceEntityInfo::OwnerTableId' has a wrong offset!");

// ScriptStruct Brickadia.BrickActionBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBrickActionBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTransient;                                        // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickActionBase) == 0x000008, "Wrong alignment on FBrickActionBase");
static_assert(sizeof(FBrickActionBase) == 0x000010, "Wrong size on FBrickActionBase");
static_assert(offsetof(FBrickActionBase, bTransient) == 0x000008, "Member 'FBrickActionBase::bTransient' has a wrong offset!");

// ScriptStruct Brickadia.BREntityPersistentHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FBREntityPersistentHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBREntityPersistentHandle) == 0x000004, "Wrong alignment on FBREntityPersistentHandle");
static_assert(sizeof(FBREntityPersistentHandle) == 0x000004, "Wrong size on FBREntityPersistentHandle");

// ScriptStruct Brickadia.BrickActionBase_SingleEntity
// 0x0008 (0x0018 - 0x0010)
struct FBrickActionBase_SingleEntity : public FBrickActionBase
{
public:
	struct FBREntityPersistentHandle              EntityPersistentHandle;                            // 0x0010(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickActionBase_SingleEntity) == 0x000008, "Wrong alignment on FBrickActionBase_SingleEntity");
static_assert(sizeof(FBrickActionBase_SingleEntity) == 0x000018, "Wrong size on FBrickActionBase_SingleEntity");
static_assert(offsetof(FBrickActionBase_SingleEntity, EntityPersistentHandle) == 0x000010, "Member 'FBrickActionBase_SingleEntity::EntityPersistentHandle' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_PlaceEntity
// 0x00A8 (0x00C0 - 0x0018)
struct FBrickAction_PlaceEntity final : public FBrickActionBase_SingleEntity
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickPlaceEntityInfo                  PlaceInfo;                                         // 0x0020(0x00A0)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_PlaceEntity) == 0x000010, "Wrong alignment on FBrickAction_PlaceEntity");
static_assert(sizeof(FBrickAction_PlaceEntity) == 0x0000C0, "Wrong size on FBrickAction_PlaceEntity");
static_assert(offsetof(FBrickAction_PlaceEntity, PlaceInfo) == 0x000020, "Member 'FBrickAction_PlaceEntity::PlaceInfo' has a wrong offset!");

// ScriptStruct Brickadia.BRInputBindingDescriptor
// 0x0030 (0x0030 - 0x0000)
struct FBRInputBindingDescriptor final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Tooltip;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bHide;                                             // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRInputBindingDescriptor) == 0x000008, "Wrong alignment on FBRInputBindingDescriptor");
static_assert(sizeof(FBRInputBindingDescriptor) == 0x000030, "Wrong size on FBRInputBindingDescriptor");
static_assert(offsetof(FBRInputBindingDescriptor, Name) == 0x000000, "Member 'FBRInputBindingDescriptor::Name' has a wrong offset!");
static_assert(offsetof(FBRInputBindingDescriptor, DisplayName) == 0x000008, "Member 'FBRInputBindingDescriptor::DisplayName' has a wrong offset!");
static_assert(offsetof(FBRInputBindingDescriptor, Tooltip) == 0x000018, "Member 'FBRInputBindingDescriptor::Tooltip' has a wrong offset!");
static_assert(offsetof(FBRInputBindingDescriptor, bHide) == 0x000028, "Member 'FBRInputBindingDescriptor::bHide' has a wrong offset!");

// ScriptStruct Brickadia.BRInputCategoryDescriptor
// 0x0030 (0x0030 - 0x0000)
struct FBRInputCategoryDescriptor final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bHide;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBRInputBindingDescriptor>      Bindings;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRInputCategoryDescriptor) == 0x000008, "Wrong alignment on FBRInputCategoryDescriptor");
static_assert(sizeof(FBRInputCategoryDescriptor) == 0x000030, "Wrong size on FBRInputCategoryDescriptor");
static_assert(offsetof(FBRInputCategoryDescriptor, Name) == 0x000000, "Member 'FBRInputCategoryDescriptor::Name' has a wrong offset!");
static_assert(offsetof(FBRInputCategoryDescriptor, DisplayName) == 0x000008, "Member 'FBRInputCategoryDescriptor::DisplayName' has a wrong offset!");
static_assert(offsetof(FBRInputCategoryDescriptor, bHide) == 0x000018, "Member 'FBRInputCategoryDescriptor::bHide' has a wrong offset!");
static_assert(offsetof(FBRInputCategoryDescriptor, Bindings) == 0x000020, "Member 'FBRInputCategoryDescriptor::Bindings' has a wrong offset!");

// ScriptStruct Brickadia.BRPlayerPartCustomizationV3
// 0x0038 (0x0038 - 0x0000)
struct FBRPlayerPartCustomizationV3 final
{
public:
	class UBRPlayerPartDescriptor*                PartDescriptor;                                    // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRPlayerDecalDescriptor*               DecalDescriptor;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Colors[0x8];                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRPlayerPartCustomizationV3) == 0x000008, "Wrong alignment on FBRPlayerPartCustomizationV3");
static_assert(sizeof(FBRPlayerPartCustomizationV3) == 0x000038, "Wrong size on FBRPlayerPartCustomizationV3");
static_assert(offsetof(FBRPlayerPartCustomizationV3, PartDescriptor) == 0x000000, "Member 'FBRPlayerPartCustomizationV3::PartDescriptor' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartCustomizationV3, DecalDescriptor) == 0x000008, "Member 'FBRPlayerPartCustomizationV3::DecalDescriptor' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartCustomizationV3, SocketName) == 0x000010, "Member 'FBRPlayerPartCustomizationV3::SocketName' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartCustomizationV3, Colors) == 0x000018, "Member 'FBRPlayerPartCustomizationV3::Colors' has a wrong offset!");

// ScriptStruct Brickadia.BRPlayerAvatarCustomizationV3
// 0x0010 (0x0010 - 0x0000)
struct FBRPlayerAvatarCustomizationV3 final
{
public:
	TArray<struct FBRPlayerPartCustomizationV3>   Parts;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRPlayerAvatarCustomizationV3) == 0x000008, "Wrong alignment on FBRPlayerAvatarCustomizationV3");
static_assert(sizeof(FBRPlayerAvatarCustomizationV3) == 0x000010, "Wrong size on FBRPlayerAvatarCustomizationV3");
static_assert(offsetof(FBRPlayerAvatarCustomizationV3, Parts) == 0x000000, "Member 'FBRPlayerAvatarCustomizationV3::Parts' has a wrong offset!");

// ScriptStruct Brickadia.BrickPreviewVolumeParameters
// 0x0030 (0x0030 - 0x0000)
struct FBrickPreviewVolumeParameters final
{
public:
	struct FIntVector                             InstanceExtent;                                    // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             InstanceSpacing;                                   // 0x000C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VolumeExtent;                                      // 0x0018(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VolumeExtentSigns;                                 // 0x0024(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickPreviewVolumeParameters) == 0x000004, "Wrong alignment on FBrickPreviewVolumeParameters");
static_assert(sizeof(FBrickPreviewVolumeParameters) == 0x000030, "Wrong size on FBrickPreviewVolumeParameters");
static_assert(offsetof(FBrickPreviewVolumeParameters, InstanceExtent) == 0x000000, "Member 'FBrickPreviewVolumeParameters::InstanceExtent' has a wrong offset!");
static_assert(offsetof(FBrickPreviewVolumeParameters, InstanceSpacing) == 0x00000C, "Member 'FBrickPreviewVolumeParameters::InstanceSpacing' has a wrong offset!");
static_assert(offsetof(FBrickPreviewVolumeParameters, VolumeExtent) == 0x000018, "Member 'FBrickPreviewVolumeParameters::VolumeExtent' has a wrong offset!");
static_assert(offsetof(FBrickPreviewVolumeParameters, VolumeExtentSigns) == 0x000024, "Member 'FBrickPreviewVolumeParameters::VolumeExtentSigns' has a wrong offset!");

// ScriptStruct Brickadia.BrickLatentHandle
// 0x000C (0x000C - 0x0000)
struct FBrickLatentHandle final
{
public:
	uint32                                        GridNetworkId;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ChunkNetworkId;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        BrickNetworkId;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickLatentHandle) == 0x000004, "Wrong alignment on FBrickLatentHandle");
static_assert(sizeof(FBrickLatentHandle) == 0x00000C, "Wrong size on FBrickLatentHandle");
static_assert(offsetof(FBrickLatentHandle, GridNetworkId) == 0x000000, "Member 'FBrickLatentHandle::GridNetworkId' has a wrong offset!");
static_assert(offsetof(FBrickLatentHandle, ChunkNetworkId) == 0x000004, "Member 'FBrickLatentHandle::ChunkNetworkId' has a wrong offset!");
static_assert(offsetof(FBrickLatentHandle, BrickNetworkId) == 0x000008, "Member 'FBrickLatentHandle::BrickNetworkId' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentWirePortDescriptor
// 0x0030 (0x0030 - 0x0000)
struct FBrickComponentWirePortDescriptor
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Tooltip;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentWirePortDescriptor) == 0x000008, "Wrong alignment on FBrickComponentWirePortDescriptor");
static_assert(sizeof(FBrickComponentWirePortDescriptor) == 0x000030, "Wrong size on FBrickComponentWirePortDescriptor");
static_assert(offsetof(FBrickComponentWirePortDescriptor, DisplayName) == 0x000000, "Member 'FBrickComponentWirePortDescriptor::DisplayName' has a wrong offset!");
static_assert(offsetof(FBrickComponentWirePortDescriptor, Tooltip) == 0x000010, "Member 'FBrickComponentWirePortDescriptor::Tooltip' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentWireInputDescriptor
// 0x0008 (0x0038 - 0x0030)
struct FBrickComponentWireInputDescriptor final : public FBrickComponentWirePortDescriptor
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentWireInputDescriptor) == 0x000008, "Wrong alignment on FBrickComponentWireInputDescriptor");
static_assert(sizeof(FBrickComponentWireInputDescriptor) == 0x000038, "Wrong size on FBrickComponentWireInputDescriptor");

// ScriptStruct Brickadia.IntBox
// 0x0018 (0x0018 - 0x0000)
struct FIntBox final
{
public:
	struct FIntVector                             Center;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             HalfExtent;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntBox) == 0x000004, "Wrong alignment on FIntBox");
static_assert(sizeof(FIntBox) == 0x000018, "Wrong size on FIntBox");
static_assert(offsetof(FIntBox, Center) == 0x000000, "Member 'FIntBox::Center' has a wrong offset!");
static_assert(offsetof(FIntBox, HalfExtent) == 0x00000C, "Member 'FIntBox::HalfExtent' has a wrong offset!");

// ScriptStruct Brickadia.BrickPlacementPivots
// 0x0064 (0x0064 - 0x0000)
struct FBrickPlacementPivots final
{
public:
	struct FIntBox                                BottomStudsPivot;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntBox                                StudsExpandedPivot;                                // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntBox                                TopStudsPivot;                                     // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntBox                                BoundsPivot;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBrickDirection                               BottomStudsDirection;                              // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               TopStudsDirection;                                 // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBottomStudsValid;                                 // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTopStudsValid;                                    // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickPlacementPivots) == 0x000004, "Wrong alignment on FBrickPlacementPivots");
static_assert(sizeof(FBrickPlacementPivots) == 0x000064, "Wrong size on FBrickPlacementPivots");
static_assert(offsetof(FBrickPlacementPivots, BottomStudsPivot) == 0x000000, "Member 'FBrickPlacementPivots::BottomStudsPivot' has a wrong offset!");
static_assert(offsetof(FBrickPlacementPivots, StudsExpandedPivot) == 0x000018, "Member 'FBrickPlacementPivots::StudsExpandedPivot' has a wrong offset!");
static_assert(offsetof(FBrickPlacementPivots, TopStudsPivot) == 0x000030, "Member 'FBrickPlacementPivots::TopStudsPivot' has a wrong offset!");
static_assert(offsetof(FBrickPlacementPivots, BoundsPivot) == 0x000048, "Member 'FBrickPlacementPivots::BoundsPivot' has a wrong offset!");
static_assert(offsetof(FBrickPlacementPivots, BottomStudsDirection) == 0x000060, "Member 'FBrickPlacementPivots::BottomStudsDirection' has a wrong offset!");
static_assert(offsetof(FBrickPlacementPivots, TopStudsDirection) == 0x000061, "Member 'FBrickPlacementPivots::TopStudsDirection' has a wrong offset!");
static_assert(offsetof(FBrickPlacementPivots, bBottomStudsValid) == 0x000062, "Member 'FBrickPlacementPivots::bBottomStudsValid' has a wrong offset!");
static_assert(offsetof(FBrickPlacementPivots, bTopStudsValid) == 0x000063, "Member 'FBrickPlacementPivots::bTopStudsValid' has a wrong offset!");

// ScriptStruct Brickadia.BrickTemplatePlacementInfo
// 0x0088 (0x0088 - 0x0000)
struct FBrickTemplatePlacementInfo final
{
public:
	struct FBrickPlacementPivots                  Pivots;                                            // 0x0000(0x0064)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BrickCount;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentCount;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickGridComponent*                    OriginalGrid;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OriginalOffset;                                    // 0x0078(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickTemplatePlacementInfo) == 0x000008, "Wrong alignment on FBrickTemplatePlacementInfo");
static_assert(sizeof(FBrickTemplatePlacementInfo) == 0x000088, "Wrong size on FBrickTemplatePlacementInfo");
static_assert(offsetof(FBrickTemplatePlacementInfo, Pivots) == 0x000000, "Member 'FBrickTemplatePlacementInfo::Pivots' has a wrong offset!");
static_assert(offsetof(FBrickTemplatePlacementInfo, BrickCount) == 0x000064, "Member 'FBrickTemplatePlacementInfo::BrickCount' has a wrong offset!");
static_assert(offsetof(FBrickTemplatePlacementInfo, ComponentCount) == 0x000068, "Member 'FBrickTemplatePlacementInfo::ComponentCount' has a wrong offset!");
static_assert(offsetof(FBrickTemplatePlacementInfo, OriginalGrid) == 0x000070, "Member 'FBrickTemplatePlacementInfo::OriginalGrid' has a wrong offset!");
static_assert(offsetof(FBrickTemplatePlacementInfo, OriginalOffset) == 0x000078, "Member 'FBrickTemplatePlacementInfo::OriginalOffset' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_BlogListing_Post
// 0x0040 (0x0040 - 0x0000)
struct FJsonResponse_BlogListing_Post final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Custom_Excerpt;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Feature_Image;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_BlogListing_Post) == 0x000008, "Wrong alignment on FJsonResponse_BlogListing_Post");
static_assert(sizeof(FJsonResponse_BlogListing_Post) == 0x000040, "Wrong size on FJsonResponse_BlogListing_Post");
static_assert(offsetof(FJsonResponse_BlogListing_Post, Title) == 0x000000, "Member 'FJsonResponse_BlogListing_Post::Title' has a wrong offset!");
static_assert(offsetof(FJsonResponse_BlogListing_Post, Custom_Excerpt) == 0x000010, "Member 'FJsonResponse_BlogListing_Post::Custom_Excerpt' has a wrong offset!");
static_assert(offsetof(FJsonResponse_BlogListing_Post, Feature_Image) == 0x000020, "Member 'FJsonResponse_BlogListing_Post::Feature_Image' has a wrong offset!");
static_assert(offsetof(FJsonResponse_BlogListing_Post, URL) == 0x000030, "Member 'FJsonResponse_BlogListing_Post::URL' has a wrong offset!");

// ScriptStruct Brickadia.JsonServiceError
// 0x0020 (0x0020 - 0x0000)
struct FJsonServiceError final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonServiceError) == 0x000008, "Wrong alignment on FJsonServiceError");
static_assert(sizeof(FJsonServiceError) == 0x000020, "Wrong size on FJsonServiceError");
static_assert(offsetof(FJsonServiceError, Code) == 0x000000, "Member 'FJsonServiceError::Code' has a wrong offset!");
static_assert(offsetof(FJsonServiceError, Message) == 0x000010, "Member 'FJsonServiceError::Message' has a wrong offset!");

// ScriptStruct Brickadia.BRGuid
// 0x0010 (0x0010 - 0x0000)
struct FBRGuid final
{
public:
	uint32                                        A;                                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        B;                                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        C;                                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        D;                                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FBRGuid) == 0x000004, "Wrong alignment on FBRGuid");
static_assert(sizeof(FBRGuid) == 0x000010, "Wrong size on FBRGuid");
static_assert(offsetof(FBRGuid, A) == 0x000000, "Member 'FBRGuid::A' has a wrong offset!");
static_assert(offsetof(FBRGuid, B) == 0x000004, "Member 'FBRGuid::B' has a wrong offset!");
static_assert(offsetof(FBRGuid, C) == 0x000008, "Member 'FBRGuid::C' has a wrong offset!");
static_assert(offsetof(FBRGuid, D) == 0x00000C, "Member 'FBRGuid::D' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_GetTrustedBy_Entry
// 0x0020 (0x0020 - 0x0000)
struct FJsonResponse_GetTrustedBy_Entry final
{
public:
	struct FBRGuid                                GivingUserId;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TrustState;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_GetTrustedBy_Entry) == 0x000008, "Wrong alignment on FJsonResponse_GetTrustedBy_Entry");
static_assert(sizeof(FJsonResponse_GetTrustedBy_Entry) == 0x000020, "Wrong size on FJsonResponse_GetTrustedBy_Entry");
static_assert(offsetof(FJsonResponse_GetTrustedBy_Entry, GivingUserId) == 0x000000, "Member 'FJsonResponse_GetTrustedBy_Entry::GivingUserId' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetTrustedBy_Entry, TrustState) == 0x000010, "Member 'FJsonResponse_GetTrustedBy_Entry::TrustState' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_GetTrustedBy
// 0x0030 (0x0030 - 0x0000)
struct FJsonResponse_GetTrustedBy final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FJsonResponse_GetTrustedBy_Entry> TrustGivers;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_GetTrustedBy) == 0x000008, "Wrong alignment on FJsonResponse_GetTrustedBy");
static_assert(sizeof(FJsonResponse_GetTrustedBy) == 0x000030, "Wrong size on FJsonResponse_GetTrustedBy");
static_assert(offsetof(FJsonResponse_GetTrustedBy, Error) == 0x000000, "Member 'FJsonResponse_GetTrustedBy::Error' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetTrustedBy, TrustGivers) == 0x000020, "Member 'FJsonResponse_GetTrustedBy::TrustGivers' has a wrong offset!");

// ScriptStruct Brickadia.BrickHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FBrickHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickHandle) == 0x000004, "Wrong alignment on FBrickHandle");
static_assert(sizeof(FBrickHandle) == 0x000008, "Wrong size on FBrickHandle");

// ScriptStruct Brickadia.BRWeaponMeleeResponse
// 0x0001 (0x0001 - 0x0000)
struct FBRWeaponMeleeResponse
{
public:
	bool                                          bTriggerTransitions;                               // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponMeleeResponse) == 0x000001, "Wrong alignment on FBRWeaponMeleeResponse");
static_assert(sizeof(FBRWeaponMeleeResponse) == 0x000001, "Wrong size on FBRWeaponMeleeResponse");
static_assert(offsetof(FBRWeaponMeleeResponse, bTriggerTransitions) == 0x000000, "Member 'FBRWeaponMeleeResponse::bTriggerTransitions' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponSimulationState_Character
// 0x0030 (0x0030 - 0x0000)
struct FBRWeaponSimulationState_Character final
{
public:
	class ABRItemBase*                            CurrentItemInstance;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABRItemBase*                            DesiredItemInstance;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRInventoryEntryBase*                  CurrentInventoryEntry;                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRInventoryEntryBase*                  DesiredInventoryEntry;                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Resources;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponSimulationState_Character) == 0x000008, "Wrong alignment on FBRWeaponSimulationState_Character");
static_assert(sizeof(FBRWeaponSimulationState_Character) == 0x000030, "Wrong size on FBRWeaponSimulationState_Character");
static_assert(offsetof(FBRWeaponSimulationState_Character, CurrentItemInstance) == 0x000000, "Member 'FBRWeaponSimulationState_Character::CurrentItemInstance' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState_Character, DesiredItemInstance) == 0x000008, "Member 'FBRWeaponSimulationState_Character::DesiredItemInstance' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState_Character, CurrentInventoryEntry) == 0x000010, "Member 'FBRWeaponSimulationState_Character::CurrentInventoryEntry' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState_Character, DesiredInventoryEntry) == 0x000018, "Member 'FBRWeaponSimulationState_Character::DesiredInventoryEntry' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState_Character, Resources) == 0x000020, "Member 'FBRWeaponSimulationState_Character::Resources' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponHomingTarget
// 0x0020 (0x0020 - 0x0000)
struct FBRWeaponHomingTarget final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponHomingTarget) == 0x000008, "Wrong alignment on FBRWeaponHomingTarget");
static_assert(sizeof(FBRWeaponHomingTarget) == 0x000020, "Wrong size on FBRWeaponHomingTarget");
static_assert(offsetof(FBRWeaponHomingTarget, Component) == 0x000000, "Member 'FBRWeaponHomingTarget::Component' has a wrong offset!");
static_assert(offsetof(FBRWeaponHomingTarget, Offset) == 0x000008, "Member 'FBRWeaponHomingTarget::Offset' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponSimulationState
// 0x0068 (0x0068 - 0x0000)
struct FBRWeaponSimulationState final
{
public:
	EBRWeaponOuterState                           OuterStateIndex;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OuterStateDuration;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InnerStateIndex;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerStateDuration;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreezeFrameDuration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoLoaded;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeleeActive;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeleeAttackEnded;                                 // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          RandomStream;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bStateTriggerRequested;                            // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Resources[0x8];                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRWeaponHomingTarget                  HomingTarget;                                      // 0x0048(0x0020)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponSimulationState) == 0x000008, "Wrong alignment on FBRWeaponSimulationState");
static_assert(sizeof(FBRWeaponSimulationState) == 0x000068, "Wrong size on FBRWeaponSimulationState");
static_assert(offsetof(FBRWeaponSimulationState, OuterStateIndex) == 0x000000, "Member 'FBRWeaponSimulationState::OuterStateIndex' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, OuterStateDuration) == 0x000004, "Member 'FBRWeaponSimulationState::OuterStateDuration' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, InnerStateIndex) == 0x000008, "Member 'FBRWeaponSimulationState::InnerStateIndex' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, InnerStateDuration) == 0x00000C, "Member 'FBRWeaponSimulationState::InnerStateDuration' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, FreezeFrameDuration) == 0x000010, "Member 'FBRWeaponSimulationState::FreezeFrameDuration' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, AmmoLoaded) == 0x000014, "Member 'FBRWeaponSimulationState::AmmoLoaded' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, bMeleeActive) == 0x000018, "Member 'FBRWeaponSimulationState::bMeleeActive' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, bMeleeAttackEnded) == 0x000019, "Member 'FBRWeaponSimulationState::bMeleeAttackEnded' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, RandomStream) == 0x00001C, "Member 'FBRWeaponSimulationState::RandomStream' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, bStateTriggerRequested) == 0x000024, "Member 'FBRWeaponSimulationState::bStateTriggerRequested' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, Resources) == 0x000028, "Member 'FBRWeaponSimulationState::Resources' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState, HomingTarget) == 0x000048, "Member 'FBRWeaponSimulationState::HomingTarget' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponSimulationInputs_Character
// 0x0002 (0x0002 - 0x0000)
struct FBRWeaponSimulationInputs_Character final
{
public:
	int8                                          DesiredWeaponIndex;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRWeaponInputKeys                            Keys;                                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponSimulationInputs_Character) == 0x000001, "Wrong alignment on FBRWeaponSimulationInputs_Character");
static_assert(sizeof(FBRWeaponSimulationInputs_Character) == 0x000002, "Wrong size on FBRWeaponSimulationInputs_Character");
static_assert(offsetof(FBRWeaponSimulationInputs_Character, DesiredWeaponIndex) == 0x000000, "Member 'FBRWeaponSimulationInputs_Character::DesiredWeaponIndex' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationInputs_Character, Keys) == 0x000001, "Member 'FBRWeaponSimulationInputs_Character::Keys' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponPredictionHistoryFrame_Character
// 0x00A0 (0x00A0 - 0x0000)
struct FBRWeaponPredictionHistoryFrame_Character final
{
public:
	struct FBRWeaponSimulationState_Character     CharacterState;                                    // 0x0000(0x0030)(NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationState               WeaponState;                                       // 0x0030(0x0068)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationInputs_Character    ResimulateInputs;                                  // 0x009C(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponPredictionHistoryFrame_Character) == 0x000008, "Wrong alignment on FBRWeaponPredictionHistoryFrame_Character");
static_assert(sizeof(FBRWeaponPredictionHistoryFrame_Character) == 0x0000A0, "Wrong size on FBRWeaponPredictionHistoryFrame_Character");
static_assert(offsetof(FBRWeaponPredictionHistoryFrame_Character, CharacterState) == 0x000000, "Member 'FBRWeaponPredictionHistoryFrame_Character::CharacterState' has a wrong offset!");
static_assert(offsetof(FBRWeaponPredictionHistoryFrame_Character, WeaponState) == 0x000030, "Member 'FBRWeaponPredictionHistoryFrame_Character::WeaponState' has a wrong offset!");
static_assert(offsetof(FBRWeaponPredictionHistoryFrame_Character, Timestamp) == 0x000098, "Member 'FBRWeaponPredictionHistoryFrame_Character::Timestamp' has a wrong offset!");
static_assert(offsetof(FBRWeaponPredictionHistoryFrame_Character, ResimulateInputs) == 0x00009C, "Member 'FBRWeaponPredictionHistoryFrame_Character::ResimulateInputs' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponPredictionHistory_Character
// 0x0010 (0x0010 - 0x0000)
struct FBRWeaponPredictionHistory_Character final
{
public:
	TArray<struct FBRWeaponPredictionHistoryFrame_Character> History;                                           // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponPredictionHistory_Character) == 0x000008, "Wrong alignment on FBRWeaponPredictionHistory_Character");
static_assert(sizeof(FBRWeaponPredictionHistory_Character) == 0x000010, "Wrong size on FBRWeaponPredictionHistory_Character");
static_assert(offsetof(FBRWeaponPredictionHistory_Character, History) == 0x000000, "Member 'FBRWeaponPredictionHistory_Character::History' has a wrong offset!");

// ScriptStruct Brickadia.BRAnimInstanceProxy
// 0x0000 (0x07A0 - 0x07A0)
struct FBRAnimInstanceProxy final : public FAnimInstanceProxy
{
};
static_assert(alignof(FBRAnimInstanceProxy) == 0x000010, "Wrong alignment on FBRAnimInstanceProxy");
static_assert(sizeof(FBRAnimInstanceProxy) == 0x0007A0, "Wrong size on FBRAnimInstanceProxy");

// ScriptStruct Brickadia.BrickTransactionReport
// 0x0098 (0x0098 - 0x0000)
struct FBrickTransactionReport final
{
public:
	int32                                         NumBricksPlaced;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricksDeleted;                                  // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricksChanged;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricksBlocked;                                  // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricksSkipped;                                  // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricksUntrusted;                                // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricksNotFound;                                 // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricksInvalid;                                  // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsAttached;                             // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsDetached;                             // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsChanged;                              // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsQuotaExceeded;                        // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsUnattachable;                         // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsUndetachable;                         // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsSkipped;                              // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsNotFound;                             // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsInvalid;                              // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWiresConnected;                                 // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWiresDisconnected;                              // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWiresUnconnectable;                             // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWiresUndisconnectable;                          // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWiresSkipped;                                   // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWiresNotFound;                                  // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWiresInvalid;                                   // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEntitiesPlaced;                                 // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEntitiesDeleted;                                // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEntitiesChanged;                                // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEntitiesBlocked;                                // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEntitiesSkipped;                                // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEntitiesUntrusted;                              // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEntitiesNotFound;                               // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEntitiesInvalid;                                // 0x007C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEntitiesOverQuota;                              // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           CustomReportLines;                                 // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickTransactionReport) == 0x000008, "Wrong alignment on FBrickTransactionReport");
static_assert(sizeof(FBrickTransactionReport) == 0x000098, "Wrong size on FBrickTransactionReport");
static_assert(offsetof(FBrickTransactionReport, NumBricksPlaced) == 0x000000, "Member 'FBrickTransactionReport::NumBricksPlaced' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumBricksDeleted) == 0x000004, "Member 'FBrickTransactionReport::NumBricksDeleted' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumBricksChanged) == 0x000008, "Member 'FBrickTransactionReport::NumBricksChanged' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumBricksBlocked) == 0x00000C, "Member 'FBrickTransactionReport::NumBricksBlocked' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumBricksSkipped) == 0x000010, "Member 'FBrickTransactionReport::NumBricksSkipped' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumBricksUntrusted) == 0x000014, "Member 'FBrickTransactionReport::NumBricksUntrusted' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumBricksNotFound) == 0x000018, "Member 'FBrickTransactionReport::NumBricksNotFound' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumBricksInvalid) == 0x00001C, "Member 'FBrickTransactionReport::NumBricksInvalid' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumComponentsAttached) == 0x000020, "Member 'FBrickTransactionReport::NumComponentsAttached' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumComponentsDetached) == 0x000024, "Member 'FBrickTransactionReport::NumComponentsDetached' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumComponentsChanged) == 0x000028, "Member 'FBrickTransactionReport::NumComponentsChanged' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumComponentsQuotaExceeded) == 0x00002C, "Member 'FBrickTransactionReport::NumComponentsQuotaExceeded' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumComponentsUnattachable) == 0x000030, "Member 'FBrickTransactionReport::NumComponentsUnattachable' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumComponentsUndetachable) == 0x000034, "Member 'FBrickTransactionReport::NumComponentsUndetachable' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumComponentsSkipped) == 0x000038, "Member 'FBrickTransactionReport::NumComponentsSkipped' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumComponentsNotFound) == 0x00003C, "Member 'FBrickTransactionReport::NumComponentsNotFound' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumComponentsInvalid) == 0x000040, "Member 'FBrickTransactionReport::NumComponentsInvalid' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumWiresConnected) == 0x000044, "Member 'FBrickTransactionReport::NumWiresConnected' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumWiresDisconnected) == 0x000048, "Member 'FBrickTransactionReport::NumWiresDisconnected' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumWiresUnconnectable) == 0x00004C, "Member 'FBrickTransactionReport::NumWiresUnconnectable' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumWiresUndisconnectable) == 0x000050, "Member 'FBrickTransactionReport::NumWiresUndisconnectable' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumWiresSkipped) == 0x000054, "Member 'FBrickTransactionReport::NumWiresSkipped' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumWiresNotFound) == 0x000058, "Member 'FBrickTransactionReport::NumWiresNotFound' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumWiresInvalid) == 0x00005C, "Member 'FBrickTransactionReport::NumWiresInvalid' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumEntitiesPlaced) == 0x000060, "Member 'FBrickTransactionReport::NumEntitiesPlaced' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumEntitiesDeleted) == 0x000064, "Member 'FBrickTransactionReport::NumEntitiesDeleted' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumEntitiesChanged) == 0x000068, "Member 'FBrickTransactionReport::NumEntitiesChanged' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumEntitiesBlocked) == 0x00006C, "Member 'FBrickTransactionReport::NumEntitiesBlocked' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumEntitiesSkipped) == 0x000070, "Member 'FBrickTransactionReport::NumEntitiesSkipped' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumEntitiesUntrusted) == 0x000074, "Member 'FBrickTransactionReport::NumEntitiesUntrusted' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumEntitiesNotFound) == 0x000078, "Member 'FBrickTransactionReport::NumEntitiesNotFound' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumEntitiesInvalid) == 0x00007C, "Member 'FBrickTransactionReport::NumEntitiesInvalid' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, NumEntitiesOverQuota) == 0x000080, "Member 'FBrickTransactionReport::NumEntitiesOverQuota' has a wrong offset!");
static_assert(offsetof(FBrickTransactionReport, CustomReportLines) == 0x000088, "Member 'FBrickTransactionReport::CustomReportLines' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedChunk3DIndex
// 0x0006 (0x0006 - 0x0000)
struct FBRSavedChunk3DIndex final
{
public:
	int16                                         X;                                                 // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Y;                                                 // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Z;                                                 // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedChunk3DIndex) == 0x000002, "Wrong alignment on FBRSavedChunk3DIndex");
static_assert(sizeof(FBRSavedChunk3DIndex) == 0x000006, "Wrong size on FBRSavedChunk3DIndex");
static_assert(offsetof(FBRSavedChunk3DIndex, X) == 0x000000, "Member 'FBRSavedChunk3DIndex::X' has a wrong offset!");
static_assert(offsetof(FBRSavedChunk3DIndex, Y) == 0x000002, "Member 'FBRSavedChunk3DIndex::Y' has a wrong offset!");
static_assert(offsetof(FBRSavedChunk3DIndex, Z) == 0x000004, "Member 'FBRSavedChunk3DIndex::Z' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedEntityChunkIndexSoA
// 0x0028 (0x0028 - 0x0000)
struct FBRSavedEntityChunkIndexSoA final
{
public:
	uint32                                        NextPersistentIndex;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBRSavedChunk3DIndex>           Chunk3DIndices;                                    // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                NumEntities;                                       // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedEntityChunkIndexSoA) == 0x000008, "Wrong alignment on FBRSavedEntityChunkIndexSoA");
static_assert(sizeof(FBRSavedEntityChunkIndexSoA) == 0x000028, "Wrong size on FBRSavedEntityChunkIndexSoA");
static_assert(offsetof(FBRSavedEntityChunkIndexSoA, NextPersistentIndex) == 0x000000, "Member 'FBRSavedEntityChunkIndexSoA::NextPersistentIndex' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkIndexSoA, Chunk3DIndices) == 0x000008, "Member 'FBRSavedEntityChunkIndexSoA::Chunk3DIndices' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkIndexSoA, NumEntities) == 0x000018, "Member 'FBRSavedEntityChunkIndexSoA::NumEntities' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_GetServes_PlayerEntry
// 0x0030 (0x0030 - 0x0000)
struct FJsonResponse_GetServes_PlayerEntry final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHost;                                            // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_GetServes_PlayerEntry) == 0x000008, "Wrong alignment on FJsonResponse_GetServes_PlayerEntry");
static_assert(sizeof(FJsonResponse_GetServes_PlayerEntry) == 0x000030, "Wrong size on FJsonResponse_GetServes_PlayerEntry");
static_assert(offsetof(FJsonResponse_GetServes_PlayerEntry, ID) == 0x000000, "Member 'FJsonResponse_GetServes_PlayerEntry::ID' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServes_PlayerEntry, Name) == 0x000010, "Member 'FJsonResponse_GetServes_PlayerEntry::Name' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServes_PlayerEntry, IsHost) == 0x000020, "Member 'FJsonResponse_GetServes_PlayerEntry::IsHost' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServes_PlayerEntry, StartTime) == 0x000028, "Member 'FJsonResponse_GetServes_PlayerEntry::StartTime' has a wrong offset!");

// ScriptStruct Brickadia.BrickTypeNetWrapper
// 0x0018 (0x0018 - 0x0000)
struct FBrickTypeNetWrapper final
{
public:
	class UBrickAsset*                            BrickAsset;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ProceduralSize;                                    // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickTypeNetWrapper) == 0x000008, "Wrong alignment on FBrickTypeNetWrapper");
static_assert(sizeof(FBrickTypeNetWrapper) == 0x000018, "Wrong size on FBrickTypeNetWrapper");
static_assert(offsetof(FBrickTypeNetWrapper, BrickAsset) == 0x000000, "Member 'FBrickTypeNetWrapper::BrickAsset' has a wrong offset!");
static_assert(offsetof(FBrickTypeNetWrapper, ProceduralSize) == 0x000008, "Member 'FBrickTypeNetWrapper::ProceduralSize' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_ManyFields_Permute
// 0x00C8 (0x00C8 - 0x0000)
struct FBRMessagePackTestStruct_ManyFields_Permute final
{
public:
	int32                                         NewIntValue;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class FString>                    MapValue;                                          // 0x0008(0x0050)(NativeAccessSpecifierPublic)
	TSet<int32>                                   SetValue;                                          // 0x0058(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ArrayValue;                                        // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_ManyFields_Permute) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_ManyFields_Permute");
static_assert(sizeof(FBRMessagePackTestStruct_ManyFields_Permute) == 0x0000C8, "Wrong size on FBRMessagePackTestStruct_ManyFields_Permute");
static_assert(offsetof(FBRMessagePackTestStruct_ManyFields_Permute, NewIntValue) == 0x000000, "Member 'FBRMessagePackTestStruct_ManyFields_Permute::NewIntValue' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_ManyFields_Permute, MapValue) == 0x000008, "Member 'FBRMessagePackTestStruct_ManyFields_Permute::MapValue' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_ManyFields_Permute, SetValue) == 0x000058, "Member 'FBRMessagePackTestStruct_ManyFields_Permute::SetValue' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_ManyFields_Permute, StringValue) == 0x0000A8, "Member 'FBRMessagePackTestStruct_ManyFields_Permute::StringValue' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_ManyFields_Permute, ArrayValue) == 0x0000B8, "Member 'FBRMessagePackTestStruct_ManyFields_Permute::ArrayValue' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentDataBase
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FBrickComponentDataBase
{
};
#pragma pack(pop)
static_assert(alignof(FBrickComponentDataBase) == 0x000001, "Wrong alignment on FBrickComponentDataBase");
static_assert(sizeof(FBrickComponentDataBase) == 0x000001, "Wrong size on FBrickComponentDataBase");

// ScriptStruct Brickadia.BrickComponentData_Touch
// 0x0038 (0x0038 - 0x0000)
struct FBrickComponentData_Touch final : public FBrickComponentDataBase
{
public:
	bool                                          bTouching;                                         // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TouchCount;                                        // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ABRCharacter>            Character;                                         // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickOneShotAudioDescriptor*           BeginTouchSound;                                   // 0x0018(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickOneShotAudioDescriptor*           EndTouchSound;                                     // 0x0020(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_Touch) == 0x000008, "Wrong alignment on FBrickComponentData_Touch");
static_assert(sizeof(FBrickComponentData_Touch) == 0x000038, "Wrong size on FBrickComponentData_Touch");
static_assert(offsetof(FBrickComponentData_Touch, bTouching) == 0x000000, "Member 'FBrickComponentData_Touch::bTouching' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Touch, TouchCount) == 0x000008, "Member 'FBrickComponentData_Touch::TouchCount' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Touch, Character) == 0x000010, "Member 'FBrickComponentData_Touch::Character' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Touch, BeginTouchSound) == 0x000018, "Member 'FBrickComponentData_Touch::BeginTouchSound' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Touch, EndTouchSound) == 0x000020, "Member 'FBrickComponentData_Touch::EndTouchSound' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentInternalWireTemplate
// 0x0028 (0x0028 - 0x0000)
struct FBrickComponentInternalWireTemplate final
{
public:
	int32                                         SourceBrickIndex;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetBrickIndex;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UBrickComponentTypeBase> SourceComponentType;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UBrickComponentTypeBase> TargetComponentType;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourcePortName;                                    // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPortName;                                    // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentInternalWireTemplate) == 0x000004, "Wrong alignment on FBrickComponentInternalWireTemplate");
static_assert(sizeof(FBrickComponentInternalWireTemplate) == 0x000028, "Wrong size on FBrickComponentInternalWireTemplate");
static_assert(offsetof(FBrickComponentInternalWireTemplate, SourceBrickIndex) == 0x000000, "Member 'FBrickComponentInternalWireTemplate::SourceBrickIndex' has a wrong offset!");
static_assert(offsetof(FBrickComponentInternalWireTemplate, TargetBrickIndex) == 0x000004, "Member 'FBrickComponentInternalWireTemplate::TargetBrickIndex' has a wrong offset!");
static_assert(offsetof(FBrickComponentInternalWireTemplate, SourceComponentType) == 0x000008, "Member 'FBrickComponentInternalWireTemplate::SourceComponentType' has a wrong offset!");
static_assert(offsetof(FBrickComponentInternalWireTemplate, TargetComponentType) == 0x000010, "Member 'FBrickComponentInternalWireTemplate::TargetComponentType' has a wrong offset!");
static_assert(offsetof(FBrickComponentInternalWireTemplate, SourcePortName) == 0x000018, "Member 'FBrickComponentInternalWireTemplate::SourcePortName' has a wrong offset!");
static_assert(offsetof(FBrickComponentInternalWireTemplate, TargetPortName) == 0x000020, "Member 'FBrickComponentInternalWireTemplate::TargetPortName' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponSimulationPosition
// 0x0010 (0x0010 - 0x0000)
struct FBRWeaponSimulationPosition final
{
public:
	EBRWeaponOuterState                           OuterStateIndex;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OuterStateDuration;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InnerStateIndex;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerStateDuration;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponSimulationPosition) == 0x000004, "Wrong alignment on FBRWeaponSimulationPosition");
static_assert(sizeof(FBRWeaponSimulationPosition) == 0x000010, "Wrong size on FBRWeaponSimulationPosition");
static_assert(offsetof(FBRWeaponSimulationPosition, OuterStateIndex) == 0x000000, "Member 'FBRWeaponSimulationPosition::OuterStateIndex' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationPosition, OuterStateDuration) == 0x000004, "Member 'FBRWeaponSimulationPosition::OuterStateDuration' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationPosition, InnerStateIndex) == 0x000008, "Member 'FBRWeaponSimulationPosition::InnerStateIndex' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationPosition, InnerStateDuration) == 0x00000C, "Member 'FBRWeaponSimulationPosition::InnerStateDuration' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponSimulationState_Character_RepRemote
// 0x0018 (0x0018 - 0x0000)
struct FBRWeaponSimulationState_Character_RepRemote final
{
public:
	class ABRItemBase*                            CurrentItemInstance;                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationPosition            WeaponSimPosition;                                 // 0x0008(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponSimulationState_Character_RepRemote) == 0x000008, "Wrong alignment on FBRWeaponSimulationState_Character_RepRemote");
static_assert(sizeof(FBRWeaponSimulationState_Character_RepRemote) == 0x000018, "Wrong size on FBRWeaponSimulationState_Character_RepRemote");
static_assert(offsetof(FBRWeaponSimulationState_Character_RepRemote, CurrentItemInstance) == 0x000000, "Member 'FBRWeaponSimulationState_Character_RepRemote::CurrentItemInstance' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState_Character_RepRemote, WeaponSimPosition) == 0x000008, "Member 'FBRWeaponSimulationState_Character_RepRemote::WeaponSimPosition' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponMeleeExplosionRep
// 0x0038 (0x0038 - 0x0000)
struct FBRWeaponMeleeExplosionRep final
{
public:
	uint8                                         SourceStateIndex;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  ExplosionLocation;                                 // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ExplosionNormal;                                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponMeleeExplosionRep) == 0x000008, "Wrong alignment on FBRWeaponMeleeExplosionRep");
static_assert(sizeof(FBRWeaponMeleeExplosionRep) == 0x000038, "Wrong size on FBRWeaponMeleeExplosionRep");
static_assert(offsetof(FBRWeaponMeleeExplosionRep, SourceStateIndex) == 0x000000, "Member 'FBRWeaponMeleeExplosionRep::SourceStateIndex' has a wrong offset!");
static_assert(offsetof(FBRWeaponMeleeExplosionRep, ExplosionLocation) == 0x000008, "Member 'FBRWeaponMeleeExplosionRep::ExplosionLocation' has a wrong offset!");
static_assert(offsetof(FBRWeaponMeleeExplosionRep, ExplosionNormal) == 0x000020, "Member 'FBRWeaponMeleeExplosionRep::ExplosionNormal' has a wrong offset!");

// ScriptStruct Brickadia.BrickLoadParams
// 0x0020 (0x0020 - 0x0000)
struct FBrickLoadParams final
{
public:
	struct FIntVector                             LoadOffset;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                ReplacementOwnerId;                                // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReplaceOwner;                                // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCorrectPaletteColors;                             // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCorrectCustomColors;                              // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSilent;                                           // 0x001F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickLoadParams) == 0x000004, "Wrong alignment on FBrickLoadParams");
static_assert(sizeof(FBrickLoadParams) == 0x000020, "Wrong size on FBrickLoadParams");
static_assert(offsetof(FBrickLoadParams, LoadOffset) == 0x000000, "Member 'FBrickLoadParams::LoadOffset' has a wrong offset!");
static_assert(offsetof(FBrickLoadParams, ReplacementOwnerId) == 0x00000C, "Member 'FBrickLoadParams::ReplacementOwnerId' has a wrong offset!");
static_assert(offsetof(FBrickLoadParams, bForceReplaceOwner) == 0x00001C, "Member 'FBrickLoadParams::bForceReplaceOwner' has a wrong offset!");
static_assert(offsetof(FBrickLoadParams, bCorrectPaletteColors) == 0x00001D, "Member 'FBrickLoadParams::bCorrectPaletteColors' has a wrong offset!");
static_assert(offsetof(FBrickLoadParams, bCorrectCustomColors) == 0x00001E, "Member 'FBrickLoadParams::bCorrectCustomColors' has a wrong offset!");
static_assert(offsetof(FBrickLoadParams, bSilent) == 0x00001F, "Member 'FBrickLoadParams::bSilent' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_SetPhysicsEnabled
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_SetPhysicsEnabled final : public FBrickActionBase_SingleEntity
{
public:
	bool                                          bPhysicsEnabled;                                   // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_SetPhysicsEnabled) == 0x000008, "Wrong alignment on FBrickAction_SetPhysicsEnabled");
static_assert(sizeof(FBrickAction_SetPhysicsEnabled) == 0x000020, "Wrong size on FBrickAction_SetPhysicsEnabled");
static_assert(offsetof(FBrickAction_SetPhysicsEnabled, bPhysicsEnabled) == 0x000018, "Member 'FBrickAction_SetPhysicsEnabled::bPhysicsEnabled' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_GetServers_Entry
// 0x00F0 (0x00F0 - 0x0000)
struct FJsonResponse_GetServers_Entry final
{
public:
	class FString                                 Identity;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransientId;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Address;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bricks;                                            // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Passworded;                                        // 0x005C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Dedicated;                                         // 0x005D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLimit;                                       // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerCount;                                       // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                HostId;                                            // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HostName;                                          // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visitors;                                          // 0x00B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJsonResponse_GetServes_PlayerEntry> Players;                                           // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InviteCode;                                        // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EosPuid;                                           // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_GetServers_Entry) == 0x000008, "Wrong alignment on FJsonResponse_GetServers_Entry");
static_assert(sizeof(FJsonResponse_GetServers_Entry) == 0x0000F0, "Wrong size on FJsonResponse_GetServers_Entry");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Identity) == 0x000000, "Member 'FJsonResponse_GetServers_Entry::Identity' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, TransientId) == 0x000010, "Member 'FJsonResponse_GetServers_Entry::TransientId' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Address) == 0x000020, "Member 'FJsonResponse_GetServers_Entry::Address' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Port) == 0x000030, "Member 'FJsonResponse_GetServers_Entry::Port' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Name) == 0x000038, "Member 'FJsonResponse_GetServers_Entry::Name' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Map) == 0x000048, "Member 'FJsonResponse_GetServers_Entry::Map' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Bricks) == 0x000058, "Member 'FJsonResponse_GetServers_Entry::Bricks' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Passworded) == 0x00005C, "Member 'FJsonResponse_GetServers_Entry::Passworded' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Dedicated) == 0x00005D, "Member 'FJsonResponse_GetServers_Entry::Dedicated' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, PlayerLimit) == 0x000060, "Member 'FJsonResponse_GetServers_Entry::PlayerLimit' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, PlayerCount) == 0x000064, "Member 'FJsonResponse_GetServers_Entry::PlayerCount' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, CreatedAt) == 0x000068, "Member 'FJsonResponse_GetServers_Entry::CreatedAt' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, UpdatedAt) == 0x000070, "Member 'FJsonResponse_GetServers_Entry::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, HostId) == 0x000078, "Member 'FJsonResponse_GetServers_Entry::HostId' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, HostName) == 0x000088, "Member 'FJsonResponse_GetServers_Entry::HostName' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Version) == 0x000098, "Member 'FJsonResponse_GetServers_Entry::Version' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Description) == 0x0000A8, "Member 'FJsonResponse_GetServers_Entry::Description' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Visitors) == 0x0000B8, "Member 'FJsonResponse_GetServers_Entry::Visitors' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, Players) == 0x0000C0, "Member 'FJsonResponse_GetServers_Entry::Players' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, InviteCode) == 0x0000D0, "Member 'FJsonResponse_GetServers_Entry::InviteCode' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServers_Entry, EosPuid) == 0x0000E0, "Member 'FJsonResponse_GetServers_Entry::EosPuid' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_GetServerInfo
// 0x0110 (0x0110 - 0x0000)
struct FJsonResponse_GetServerInfo final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJsonResponse_GetServers_Entry         Server;                                            // 0x0020(0x00F0)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_GetServerInfo) == 0x000008, "Wrong alignment on FJsonResponse_GetServerInfo");
static_assert(sizeof(FJsonResponse_GetServerInfo) == 0x000110, "Wrong size on FJsonResponse_GetServerInfo");
static_assert(offsetof(FJsonResponse_GetServerInfo, Error) == 0x000000, "Member 'FJsonResponse_GetServerInfo::Error' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServerInfo, Server) == 0x000020, "Member 'FJsonResponse_GetServerInfo::Server' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_GetServerList
// 0x0030 (0x0030 - 0x0000)
struct FJsonResponse_GetServerList final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FJsonResponse_GetServers_Entry> Servers;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_GetServerList) == 0x000008, "Wrong alignment on FJsonResponse_GetServerList");
static_assert(sizeof(FJsonResponse_GetServerList) == 0x000030, "Wrong size on FJsonResponse_GetServerList");
static_assert(offsetof(FJsonResponse_GetServerList, Error) == 0x000000, "Member 'FJsonResponse_GetServerList::Error' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GetServerList, Servers) == 0x000020, "Member 'FJsonResponse_GetServerList::Servers' has a wrong offset!");

// ScriptStruct Brickadia.BrickPreviewTransformParameters
// 0x0018 (0x0018 - 0x0000)
struct FBrickPreviewTransformParameters final
{
public:
	class UBrickGridComponent*                    TargetGrid;                                        // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             position;                                          // 0x0008(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickPreviewTransformParameters) == 0x000008, "Wrong alignment on FBrickPreviewTransformParameters");
static_assert(sizeof(FBrickPreviewTransformParameters) == 0x000018, "Wrong size on FBrickPreviewTransformParameters");
static_assert(offsetof(FBrickPreviewTransformParameters, TargetGrid) == 0x000000, "Member 'FBrickPreviewTransformParameters::TargetGrid' has a wrong offset!");
static_assert(offsetof(FBrickPreviewTransformParameters, position) == 0x000008, "Member 'FBrickPreviewTransformParameters::position' has a wrong offset!");
static_assert(offsetof(FBrickPreviewTransformParameters, Orientation) == 0x000014, "Member 'FBrickPreviewTransformParameters::Orientation' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponSimulationState_Character_RepOwner
// 0x00A0 (0x00A0 - 0x0000)
struct FBRWeaponSimulationState_Character_RepOwner final
{
public:
	struct FBRWeaponSimulationState_Character     CharacterState;                                    // 0x0000(0x0030)(NativeAccessSpecifierPublic)
	struct FBRWeaponSimulationState               WeaponState;                                       // 0x0030(0x0068)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponSimulationState_Character_RepOwner) == 0x000008, "Wrong alignment on FBRWeaponSimulationState_Character_RepOwner");
static_assert(sizeof(FBRWeaponSimulationState_Character_RepOwner) == 0x0000A0, "Wrong size on FBRWeaponSimulationState_Character_RepOwner");
static_assert(offsetof(FBRWeaponSimulationState_Character_RepOwner, CharacterState) == 0x000000, "Member 'FBRWeaponSimulationState_Character_RepOwner::CharacterState' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState_Character_RepOwner, WeaponState) == 0x000030, "Member 'FBRWeaponSimulationState_Character_RepOwner::WeaponState' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationState_Character_RepOwner, Timestamp) == 0x000098, "Member 'FBRWeaponSimulationState_Character_RepOwner::Timestamp' has a wrong offset!");

// ScriptStruct Brickadia.BrickPersistentHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FBrickPersistentHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickPersistentHandle) == 0x000004, "Wrong alignment on FBrickPersistentHandle");
static_assert(sizeof(FBrickPersistentHandle) == 0x000004, "Wrong size on FBrickPersistentHandle");

// ScriptStruct Brickadia.BrickActionBase_SingleBrick
// 0x0008 (0x0018 - 0x0010)
struct FBrickActionBase_SingleBrick : public FBrickActionBase
{
public:
	struct FBrickPersistentHandle                 BrickPersistentHandle;                             // 0x0010(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickActionBase_SingleBrick) == 0x000008, "Wrong alignment on FBrickActionBase_SingleBrick");
static_assert(sizeof(FBrickActionBase_SingleBrick) == 0x000018, "Wrong size on FBrickActionBase_SingleBrick");
static_assert(offsetof(FBrickActionBase_SingleBrick, BrickPersistentHandle) == 0x000010, "Member 'FBrickActionBase_SingleBrick::BrickPersistentHandle' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_SetCollisionChannels
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_SetCollisionChannels final : public FBrickActionBase_SingleBrick
{
public:
	EBrickCollisionChannels                       NewCollisionChannels;                              // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_SetCollisionChannels) == 0x000008, "Wrong alignment on FBrickAction_SetCollisionChannels");
static_assert(sizeof(FBrickAction_SetCollisionChannels) == 0x000020, "Wrong size on FBrickAction_SetCollisionChannels");
static_assert(offsetof(FBrickAction_SetCollisionChannels, NewCollisionChannels) == 0x000018, "Member 'FBrickAction_SetCollisionChannels::NewCollisionChannels' has a wrong offset!");

// ScriptStruct Brickadia.BRAnimNode_AimWeapon
// 0x0088 (0x0150 - 0x00C8)
struct FBRAnimNode_AimWeapon final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LookAtLocation;                                    // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AimOffset;                                         // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxis                                  LookAt_Axis;                                       // 0x0108(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FAxis                                  LookUp_Axis;                                       // 0x0128(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseLookUpAxis;                                    // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRAnimNode_AimWeapon) == 0x000008, "Wrong alignment on FBRAnimNode_AimWeapon");
static_assert(sizeof(FBRAnimNode_AimWeapon) == 0x000150, "Wrong size on FBRAnimNode_AimWeapon");
static_assert(offsetof(FBRAnimNode_AimWeapon, BoneToModify) == 0x0000C8, "Member 'FBRAnimNode_AimWeapon::BoneToModify' has a wrong offset!");
static_assert(offsetof(FBRAnimNode_AimWeapon, LookAtLocation) == 0x0000D8, "Member 'FBRAnimNode_AimWeapon::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FBRAnimNode_AimWeapon, AimOffset) == 0x0000F0, "Member 'FBRAnimNode_AimWeapon::AimOffset' has a wrong offset!");
static_assert(offsetof(FBRAnimNode_AimWeapon, LookAt_Axis) == 0x000108, "Member 'FBRAnimNode_AimWeapon::LookAt_Axis' has a wrong offset!");
static_assert(offsetof(FBRAnimNode_AimWeapon, LookUp_Axis) == 0x000128, "Member 'FBRAnimNode_AimWeapon::LookUp_Axis' has a wrong offset!");
static_assert(offsetof(FBRAnimNode_AimWeapon, bUseLookUpAxis) == 0x000148, "Member 'FBRAnimNode_AimWeapon::bUseLookUpAxis' has a wrong offset!");

// ScriptStruct Brickadia.BRPickupMaterialCollection
// 0x0020 (0x0020 - 0x0000)
struct FBRPickupMaterialCollection final
{
public:
	class UMaterialInterface*                     DefaultMaterial;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DefaultDisabledMaterial;                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SpinBobMaterial;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SpinBobDisabledMaterial;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRPickupMaterialCollection) == 0x000008, "Wrong alignment on FBRPickupMaterialCollection");
static_assert(sizeof(FBRPickupMaterialCollection) == 0x000020, "Wrong size on FBRPickupMaterialCollection");
static_assert(offsetof(FBRPickupMaterialCollection, DefaultMaterial) == 0x000000, "Member 'FBRPickupMaterialCollection::DefaultMaterial' has a wrong offset!");
static_assert(offsetof(FBRPickupMaterialCollection, DefaultDisabledMaterial) == 0x000008, "Member 'FBRPickupMaterialCollection::DefaultDisabledMaterial' has a wrong offset!");
static_assert(offsetof(FBRPickupMaterialCollection, SpinBobMaterial) == 0x000010, "Member 'FBRPickupMaterialCollection::SpinBobMaterial' has a wrong offset!");
static_assert(offsetof(FBRPickupMaterialCollection, SpinBobDisabledMaterial) == 0x000018, "Member 'FBRPickupMaterialCollection::SpinBobDisabledMaterial' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Joint
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FBrickComponentData_Joint : public FBrickComponentDataBase
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_Joint) == 0x000004, "Wrong alignment on FBrickComponentData_Joint");
static_assert(sizeof(FBrickComponentData_Joint) == 0x000004, "Wrong size on FBrickComponentData_Joint");

// ScriptStruct Brickadia.BrickComponentData_ConstraintJoint
// 0x0014 (0x0018 - 0x0004)
struct FBrickComponentData_ConstraintJoint : public FBrickComponentData_Joint
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            ConstraintInstance;                                // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_ConstraintJoint) == 0x000008, "Wrong alignment on FBrickComponentData_ConstraintJoint");
static_assert(sizeof(FBrickComponentData_ConstraintJoint) == 0x000018, "Wrong size on FBrickComponentData_ConstraintJoint");
static_assert(offsetof(FBrickComponentData_ConstraintJoint, ConstraintInstance) == 0x000008, "Member 'FBrickComponentData_ConstraintJoint::ConstraintInstance' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ConstraintJoint, Damping) == 0x000010, "Member 'FBrickComponentData_ConstraintJoint::Damping' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Slider
// 0x0008 (0x0020 - 0x0018)
struct FBrickComponentData_Slider : public FBrickComponentData_ConstraintJoint
{
public:
	float                                         CurrentPosition;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_Slider) == 0x000008, "Wrong alignment on FBrickComponentData_Slider");
static_assert(sizeof(FBrickComponentData_Slider) == 0x000020, "Wrong size on FBrickComponentData_Slider");
static_assert(offsetof(FBrickComponentData_Slider, CurrentPosition) == 0x000018, "Member 'FBrickComponentData_Slider::CurrentPosition' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_MotorSlider
// 0x0010 (0x0030 - 0x0020)
struct FBrickComponentData_MotorSlider final : public FBrickComponentData_Slider
{
public:
	bool                                          bEnabled;                                          // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_MotorSlider) == 0x000008, "Wrong alignment on FBrickComponentData_MotorSlider");
static_assert(sizeof(FBrickComponentData_MotorSlider) == 0x000030, "Wrong size on FBrickComponentData_MotorSlider");
static_assert(offsetof(FBrickComponentData_MotorSlider, bEnabled) == 0x000020, "Member 'FBrickComponentData_MotorSlider::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_MotorSlider, Speed) == 0x000024, "Member 'FBrickComponentData_MotorSlider::Speed' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_MotorSlider, Power) == 0x000028, "Member 'FBrickComponentData_MotorSlider::Power' has a wrong offset!");

// ScriptStruct Brickadia.BRToolBindHint
// 0x0020 (0x0020 - 0x0000)
struct FBRToolBindHint
{
public:
	class FName                                   BindName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bAxis;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRToolBindHint) == 0x000008, "Wrong alignment on FBRToolBindHint");
static_assert(sizeof(FBRToolBindHint) == 0x000020, "Wrong size on FBRToolBindHint");
static_assert(offsetof(FBRToolBindHint, BindName) == 0x000000, "Member 'FBRToolBindHint::BindName' has a wrong offset!");
static_assert(offsetof(FBRToolBindHint, DisplayText) == 0x000008, "Member 'FBRToolBindHint::DisplayText' has a wrong offset!");
static_assert(offsetof(FBRToolBindHint, bAxis) == 0x000018, "Member 'FBRToolBindHint::bAxis' has a wrong offset!");

// ScriptStruct Brickadia.BRToolBindHint_WithTags
// 0x0020 (0x0040 - 0x0020)
struct FBRToolBindHint_WithTags final : public FBRToolBindHint
{
public:
	TArray<class FName>                           VisibilityTags;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           HiddenTags;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRToolBindHint_WithTags) == 0x000008, "Wrong alignment on FBRToolBindHint_WithTags");
static_assert(sizeof(FBRToolBindHint_WithTags) == 0x000040, "Wrong size on FBRToolBindHint_WithTags");
static_assert(offsetof(FBRToolBindHint_WithTags, VisibilityTags) == 0x000020, "Member 'FBRToolBindHint_WithTags::VisibilityTags' has a wrong offset!");
static_assert(offsetof(FBRToolBindHint_WithTags, HiddenTags) == 0x000030, "Member 'FBRToolBindHint_WithTags::HiddenTags' has a wrong offset!");

// ScriptStruct Brickadia.BRChatCommandContext
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBRChatCommandContext final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRChatCommandContext) == 0x000008, "Wrong alignment on FBRChatCommandContext");
static_assert(sizeof(FBRChatCommandContext) == 0x000010, "Wrong size on FBRChatCommandContext");

// ScriptStruct Brickadia.BRCatalogData
// 0x0048 (0x0048 - 0x0000)
struct FBRCatalogData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Category;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Tab;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Summary;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bShouldDisplay;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRCatalogData) == 0x000008, "Wrong alignment on FBRCatalogData");
static_assert(sizeof(FBRCatalogData) == 0x000048, "Wrong size on FBRCatalogData");
static_assert(offsetof(FBRCatalogData, DisplayName) == 0x000000, "Member 'FBRCatalogData::DisplayName' has a wrong offset!");
static_assert(offsetof(FBRCatalogData, Category) == 0x000010, "Member 'FBRCatalogData::Category' has a wrong offset!");
static_assert(offsetof(FBRCatalogData, Tab) == 0x000020, "Member 'FBRCatalogData::Tab' has a wrong offset!");
static_assert(offsetof(FBRCatalogData, Summary) == 0x000030, "Member 'FBRCatalogData::Summary' has a wrong offset!");
static_assert(offsetof(FBRCatalogData, bShouldDisplay) == 0x000040, "Member 'FBRCatalogData::bShouldDisplay' has a wrong offset!");

// ScriptStruct Brickadia.BRPlacerMouseModeAxis
// 0x0038 (0x0038 - 0x0000)
struct FBRPlacerMouseModeAxis final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRGizmo_PlacerRowDragLine*             RowDragAxisGizmo;                                  // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRPlacerMouseModeAxis) == 0x000008, "Wrong alignment on FBRPlacerMouseModeAxis");
static_assert(sizeof(FBRPlacerMouseModeAxis) == 0x000038, "Wrong size on FBRPlacerMouseModeAxis");
static_assert(offsetof(FBRPlacerMouseModeAxis, RowDragAxisGizmo) == 0x000030, "Member 'FBRPlacerMouseModeAxis::RowDragAxisGizmo' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentWireControl_DriveAndSteer
// 0x0001 (0x0001 - 0x0000)
struct FBrickComponentWireControl_DriveAndSteer final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentWireControl_DriveAndSteer) == 0x000001, "Wrong alignment on FBrickComponentWireControl_DriveAndSteer");
static_assert(sizeof(FBrickComponentWireControl_DriveAndSteer) == 0x000001, "Wrong size on FBrickComponentWireControl_DriveAndSteer");

// ScriptStruct Brickadia.BrickComponentData_Joint_Wheel
// 0x0030 (0x0048 - 0x0018)
struct FBrickComponentData_Joint_Wheel final : public FBrickComponentData_ConstraintJoint
{
public:
	struct FBrickComponentWireControl_DriveAndSteer Control_DriveAndSteer;                             // 0x0018(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0019(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DriveSpeed;                                        // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrivePower;                                        // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSteerEnabled;                                     // 0x0024(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Steer;                                             // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerLimitDegree;                                  // 0x002C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerPower;                                        // 0x0030(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuspensionEnabled;                                // 0x0034(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuspensionStiffness;                               // 0x0038(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionDamping;                                 // 0x003C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JointDistance;                                     // 0x0040(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriveWhenNotAttachedToEngine;                     // 0x0044(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBrake;                                         // 0x0045(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEngineSteerCorrect;                          // 0x0046(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_Joint_Wheel) == 0x000008, "Wrong alignment on FBrickComponentData_Joint_Wheel");
static_assert(sizeof(FBrickComponentData_Joint_Wheel) == 0x000048, "Wrong size on FBrickComponentData_Joint_Wheel");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, Control_DriveAndSteer) == 0x000018, "Member 'FBrickComponentData_Joint_Wheel::Control_DriveAndSteer' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, bEnabled) == 0x000019, "Member 'FBrickComponentData_Joint_Wheel::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, DriveSpeed) == 0x00001C, "Member 'FBrickComponentData_Joint_Wheel::DriveSpeed' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, DrivePower) == 0x000020, "Member 'FBrickComponentData_Joint_Wheel::DrivePower' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, bSteerEnabled) == 0x000024, "Member 'FBrickComponentData_Joint_Wheel::bSteerEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, Steer) == 0x000028, "Member 'FBrickComponentData_Joint_Wheel::Steer' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, SteerLimitDegree) == 0x00002C, "Member 'FBrickComponentData_Joint_Wheel::SteerLimitDegree' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, SteerPower) == 0x000030, "Member 'FBrickComponentData_Joint_Wheel::SteerPower' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, bSuspensionEnabled) == 0x000034, "Member 'FBrickComponentData_Joint_Wheel::bSuspensionEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, SuspensionStiffness) == 0x000038, "Member 'FBrickComponentData_Joint_Wheel::SuspensionStiffness' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, SuspensionDamping) == 0x00003C, "Member 'FBrickComponentData_Joint_Wheel::SuspensionDamping' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, JointDistance) == 0x000040, "Member 'FBrickComponentData_Joint_Wheel::JointDistance' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, bDriveWhenNotAttachedToEngine) == 0x000044, "Member 'FBrickComponentData_Joint_Wheel::bDriveWhenNotAttachedToEngine' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, bCanBrake) == 0x000045, "Member 'FBrickComponentData_Joint_Wheel::bCanBrake' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Joint_Wheel, bAllowEngineSteerCorrect) == 0x000046, "Member 'FBrickComponentData_Joint_Wheel::bAllowEngineSteerCorrect' has a wrong offset!");

// ScriptStruct Brickadia.InspectorPropertyValue
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FInspectorPropertyValue final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInspectorPropertyValue) == 0x000008, "Wrong alignment on FInspectorPropertyValue");
static_assert(sizeof(FInspectorPropertyValue) == 0x000018, "Wrong size on FInspectorPropertyValue");

// ScriptStruct Brickadia.InspectorPropertyChangelistEntry
// 0x0020 (0x0020 - 0x0000)
struct FInspectorPropertyChangelistEntry final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyValue                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInspectorPropertyChangelistEntry) == 0x000008, "Wrong alignment on FInspectorPropertyChangelistEntry");
static_assert(sizeof(FInspectorPropertyChangelistEntry) == 0x000020, "Wrong size on FInspectorPropertyChangelistEntry");
static_assert(offsetof(FInspectorPropertyChangelistEntry, Name) == 0x000000, "Member 'FInspectorPropertyChangelistEntry::Name' has a wrong offset!");
static_assert(offsetof(FInspectorPropertyChangelistEntry, Value) == 0x000008, "Member 'FInspectorPropertyChangelistEntry::Value' has a wrong offset!");

// ScriptStruct Brickadia.HintInfoTableRow
// 0x0058 (0x0060 - 0x0008)
struct FHintInfoTableRow final : public FTableRowBase
{
public:
	EHintCategory                                 Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HintTitle;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              HintImage;                                         // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHintShowPlace                                WhereToShow;                                       // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHintInfoTableRow) == 0x000008, "Wrong alignment on FHintInfoTableRow");
static_assert(sizeof(FHintInfoTableRow) == 0x000060, "Wrong size on FHintInfoTableRow");
static_assert(offsetof(FHintInfoTableRow, Category) == 0x000008, "Member 'FHintInfoTableRow::Category' has a wrong offset!");
static_assert(offsetof(FHintInfoTableRow, HintTitle) == 0x000010, "Member 'FHintInfoTableRow::HintTitle' has a wrong offset!");
static_assert(offsetof(FHintInfoTableRow, HintText) == 0x000020, "Member 'FHintInfoTableRow::HintText' has a wrong offset!");
static_assert(offsetof(FHintInfoTableRow, HintImage) == 0x000030, "Member 'FHintInfoTableRow::HintImage' has a wrong offset!");
static_assert(offsetof(FHintInfoTableRow, WhereToShow) == 0x000058, "Member 'FHintInfoTableRow::WhereToShow' has a wrong offset!");

// ScriptStruct Brickadia.BHJsonSavedRoutineScope
// 0x0010 (0x0010 - 0x0000)
struct FBHJsonSavedRoutineScope final
{
public:
	TArray<struct FJsonObjectWrapper>             Lines;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBHJsonSavedRoutineScope) == 0x000008, "Wrong alignment on FBHJsonSavedRoutineScope");
static_assert(sizeof(FBHJsonSavedRoutineScope) == 0x000010, "Wrong size on FBHJsonSavedRoutineScope");
static_assert(offsetof(FBHJsonSavedRoutineScope, Lines) == 0x000000, "Member 'FBHJsonSavedRoutineScope::Lines' has a wrong offset!");

// ScriptStruct Brickadia.BHJsonSavedRoutineBase
// 0x0030 (0x0030 - 0x0000)
struct FBHJsonSavedRoutineBase
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBHJsonSavedRoutineScope               Program;                                           // 0x0020(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBHJsonSavedRoutineBase) == 0x000008, "Wrong alignment on FBHJsonSavedRoutineBase");
static_assert(sizeof(FBHJsonSavedRoutineBase) == 0x000030, "Wrong size on FBHJsonSavedRoutineBase");
static_assert(offsetof(FBHJsonSavedRoutineBase, ID) == 0x000000, "Member 'FBHJsonSavedRoutineBase::ID' has a wrong offset!");
static_assert(offsetof(FBHJsonSavedRoutineBase, Description) == 0x000010, "Member 'FBHJsonSavedRoutineBase::Description' has a wrong offset!");
static_assert(offsetof(FBHJsonSavedRoutineBase, Program) == 0x000020, "Member 'FBHJsonSavedRoutineBase::Program' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Target
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FBrickComponentData_Target final : public FBrickComponentDataBase
{
public:
	float                                         OnTime;                                            // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustHit;                                          // 0x0004(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ABRCharacter>            CharacterThatJustHit;                              // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_Target) == 0x000008, "Wrong alignment on FBrickComponentData_Target");
static_assert(sizeof(FBrickComponentData_Target) == 0x000018, "Wrong size on FBrickComponentData_Target");
static_assert(offsetof(FBrickComponentData_Target, OnTime) == 0x000000, "Member 'FBrickComponentData_Target::OnTime' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Target, bJustHit) == 0x000004, "Member 'FBrickComponentData_Target::bJustHit' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Target, CharacterThatJustHit) == 0x000008, "Member 'FBrickComponentData_Target::CharacterThatJustHit' has a wrong offset!");

// ScriptStruct Brickadia.BRColorColumnAndIndexInColumn
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FBRColorColumnAndIndexInColumn final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRColorColumnAndIndexInColumn) == 0x000004, "Wrong alignment on FBRColorColumnAndIndexInColumn");
static_assert(sizeof(FBRColorColumnAndIndexInColumn) == 0x000008, "Wrong size on FBRColorColumnAndIndexInColumn");

// ScriptStruct Brickadia.BrickComponentWirePortStub
// 0x0001 (0x0001 - 0x0000)
struct FBrickComponentWirePortStub
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentWirePortStub) == 0x000001, "Wrong alignment on FBrickComponentWirePortStub");
static_assert(sizeof(FBrickComponentWirePortStub) == 0x000001, "Wrong size on FBrickComponentWirePortStub");

// ScriptStruct Brickadia.BRWorldSaveResult
// 0x0010 (0x0010 - 0x0000)
struct FBRWorldSaveResult final
{
public:
	int32                                         NumEntitiesSaved;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricksSaved;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsSaved;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWiresSaved;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWorldSaveResult) == 0x000004, "Wrong alignment on FBRWorldSaveResult");
static_assert(sizeof(FBRWorldSaveResult) == 0x000010, "Wrong size on FBRWorldSaveResult");
static_assert(offsetof(FBRWorldSaveResult, NumEntitiesSaved) == 0x000000, "Member 'FBRWorldSaveResult::NumEntitiesSaved' has a wrong offset!");
static_assert(offsetof(FBRWorldSaveResult, NumBricksSaved) == 0x000004, "Member 'FBRWorldSaveResult::NumBricksSaved' has a wrong offset!");
static_assert(offsetof(FBRWorldSaveResult, NumComponentsSaved) == 0x000008, "Member 'FBRWorldSaveResult::NumComponentsSaved' has a wrong offset!");
static_assert(offsetof(FBRWorldSaveResult, NumWiresSaved) == 0x00000C, "Member 'FBRWorldSaveResult::NumWiresSaved' has a wrong offset!");

// ScriptStruct Brickadia.BRColorSelectionState
// 0x000C (0x000C - 0x0000)
struct FBRColorSelectionState final
{
public:
	struct FColor                                 SelectedColor;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaterialAlpha;                                     // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRColorSelectionState) == 0x000004, "Wrong alignment on FBRColorSelectionState");
static_assert(sizeof(FBRColorSelectionState) == 0x00000C, "Wrong size on FBRColorSelectionState");
static_assert(offsetof(FBRColorSelectionState, SelectedColor) == 0x000000, "Member 'FBRColorSelectionState::SelectedColor' has a wrong offset!");
static_assert(offsetof(FBRColorSelectionState, MaterialIndex) == 0x000004, "Member 'FBRColorSelectionState::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FBRColorSelectionState, MaterialAlpha) == 0x000008, "Member 'FBRColorSelectionState::MaterialAlpha' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_EntityGate_ReadBrickGrid
// 0x0010 (0x0010 - 0x0000)
struct FBrickComponentData_EntityGate_ReadBrickGrid final : public FBrickComponentDataBase
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ABrickGridActor>         BrickGrid;                                         // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_EntityGate_ReadBrickGrid) == 0x000004, "Wrong alignment on FBrickComponentData_EntityGate_ReadBrickGrid");
static_assert(sizeof(FBrickComponentData_EntityGate_ReadBrickGrid) == 0x000010, "Wrong size on FBrickComponentData_EntityGate_ReadBrickGrid");
static_assert(offsetof(FBrickComponentData_EntityGate_ReadBrickGrid, bEnabled) == 0x000000, "Member 'FBrickComponentData_EntityGate_ReadBrickGrid::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_ReadBrickGrid, BrickGrid) == 0x000004, "Member 'FBrickComponentData_EntityGate_ReadBrickGrid::BrickGrid' has a wrong offset!");

// ScriptStruct Brickadia.BRCatalogEntry
// 0x0038 (0x0038 - 0x0000)
struct FBRCatalogEntry final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Summary;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UThumbnailProcessor>        OverrideThumbnailProcessor;                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRGenericCatalogEntryWidget> OverrideWidget;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRCatalogEntry) == 0x000008, "Wrong alignment on FBRCatalogEntry");
static_assert(sizeof(FBRCatalogEntry) == 0x000038, "Wrong size on FBRCatalogEntry");
static_assert(offsetof(FBRCatalogEntry, DisplayName) == 0x000000, "Member 'FBRCatalogEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FBRCatalogEntry, Summary) == 0x000010, "Member 'FBRCatalogEntry::Summary' has a wrong offset!");
static_assert(offsetof(FBRCatalogEntry, Object) == 0x000020, "Member 'FBRCatalogEntry::Object' has a wrong offset!");
static_assert(offsetof(FBRCatalogEntry, OverrideThumbnailProcessor) == 0x000028, "Member 'FBRCatalogEntry::OverrideThumbnailProcessor' has a wrong offset!");
static_assert(offsetof(FBRCatalogEntry, OverrideWidget) == 0x000030, "Member 'FBRCatalogEntry::OverrideWidget' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_BotSpawn
// 0x0018 (0x0018 - 0x0000)
struct FBrickComponentData_BotSpawn final : public FBrickComponentDataBase
{
public:
	float                                         RespawnTime;                                       // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CorpseTimeout;                                     // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           RespawnTimerHandle;                                // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ABRCharacter>            SpawnedCharacter;                                  // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_BotSpawn) == 0x000008, "Wrong alignment on FBrickComponentData_BotSpawn");
static_assert(sizeof(FBrickComponentData_BotSpawn) == 0x000018, "Wrong size on FBrickComponentData_BotSpawn");
static_assert(offsetof(FBrickComponentData_BotSpawn, RespawnTime) == 0x000000, "Member 'FBrickComponentData_BotSpawn::RespawnTime' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_BotSpawn, CorpseTimeout) == 0x000004, "Member 'FBrickComponentData_BotSpawn::CorpseTimeout' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_BotSpawn, RespawnTimerHandle) == 0x000008, "Member 'FBrickComponentData_BotSpawn::RespawnTimerHandle' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_BotSpawn, SpawnedCharacter) == 0x000010, "Member 'FBrickComponentData_BotSpawn::SpawnedCharacter' has a wrong offset!");

// ScriptStruct Brickadia.BRCatalogCustomTab
// 0x0028 (0x0028 - 0x0000)
struct FBRCatalogCustomTab final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                Widget;                                            // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRGenericCatalogTabButtonWidget> ButtonWidget;                                      // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                IconPayload;                                       // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRCatalogCustomTab) == 0x000008, "Wrong alignment on FBRCatalogCustomTab");
static_assert(sizeof(FBRCatalogCustomTab) == 0x000028, "Wrong size on FBRCatalogCustomTab");
static_assert(offsetof(FBRCatalogCustomTab, Name) == 0x000000, "Member 'FBRCatalogCustomTab::Name' has a wrong offset!");
static_assert(offsetof(FBRCatalogCustomTab, Widget) == 0x000010, "Member 'FBRCatalogCustomTab::Widget' has a wrong offset!");
static_assert(offsetof(FBRCatalogCustomTab, ButtonWidget) == 0x000018, "Member 'FBRCatalogCustomTab::ButtonWidget' has a wrong offset!");
static_assert(offsetof(FBRCatalogCustomTab, IconPayload) == 0x000020, "Member 'FBRCatalogCustomTab::IconPayload' has a wrong offset!");

// ScriptStruct Brickadia.BRCatalogWidgetsForObject
// 0x0020 (0x0020 - 0x0000)
struct FBRCatalogWidgetsForObject final
{
public:
	class UBRGenericCatalogEntryWidget*           Entry;                                             // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRGenericCatalogCategoryWidget*        Category;                                          // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRGenericCatalogTabWidget*             Tab;                                               // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabIndex;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRCatalogWidgetsForObject) == 0x000008, "Wrong alignment on FBRCatalogWidgetsForObject");
static_assert(sizeof(FBRCatalogWidgetsForObject) == 0x000020, "Wrong size on FBRCatalogWidgetsForObject");
static_assert(offsetof(FBRCatalogWidgetsForObject, Entry) == 0x000000, "Member 'FBRCatalogWidgetsForObject::Entry' has a wrong offset!");
static_assert(offsetof(FBRCatalogWidgetsForObject, Category) == 0x000008, "Member 'FBRCatalogWidgetsForObject::Category' has a wrong offset!");
static_assert(offsetof(FBRCatalogWidgetsForObject, Tab) == 0x000010, "Member 'FBRCatalogWidgetsForObject::Tab' has a wrong offset!");
static_assert(offsetof(FBRCatalogWidgetsForObject, TabIndex) == 0x000018, "Member 'FBRCatalogWidgetsForObject::TabIndex' has a wrong offset!");

// ScriptStruct Brickadia.BHJsonSavedFunction
// 0x0040 (0x0070 - 0x0030)
struct FBHJsonSavedFunction final : public FBHJsonSavedRoutineBase
{
public:
	TArray<struct FJsonObjectWrapper>             Parms;                                             // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     ReturnType;                                        // 0x0040(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 Guid;                                              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBHJsonSavedFunction) == 0x000008, "Wrong alignment on FBHJsonSavedFunction");
static_assert(sizeof(FBHJsonSavedFunction) == 0x000070, "Wrong size on FBHJsonSavedFunction");
static_assert(offsetof(FBHJsonSavedFunction, Parms) == 0x000030, "Member 'FBHJsonSavedFunction::Parms' has a wrong offset!");
static_assert(offsetof(FBHJsonSavedFunction, ReturnType) == 0x000040, "Member 'FBHJsonSavedFunction::ReturnType' has a wrong offset!");
static_assert(offsetof(FBHJsonSavedFunction, Guid) == 0x000060, "Member 'FBHJsonSavedFunction::Guid' has a wrong offset!");

// ScriptStruct Brickadia.BVMFrameCapture
// 0x0010 (0x0010 - 0x0000)
struct FBVMFrameCapture final
{
public:
	class UBHGeneratedRoutine*                    FrameLayout;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBVMFrameCapture) == 0x000008, "Wrong alignment on FBVMFrameCapture");
static_assert(sizeof(FBVMFrameCapture) == 0x000010, "Wrong size on FBVMFrameCapture");
static_assert(offsetof(FBVMFrameCapture, FrameLayout) == 0x000000, "Member 'FBVMFrameCapture::FrameLayout' has a wrong offset!");

// ScriptStruct Brickadia.BVMPanic
// 0x0028 (0x0028 - 0x0000)
struct FBVMPanic final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBVMFrameCapture>               StackCapture;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBVMPanic) == 0x000008, "Wrong alignment on FBVMPanic");
static_assert(sizeof(FBVMPanic) == 0x000028, "Wrong size on FBVMPanic");
static_assert(offsetof(FBVMPanic, StackCapture) == 0x000010, "Member 'FBVMPanic::StackCapture' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateBinary_FloatFloat
// 0x0018 (0x0018 - 0x0000)
struct FBrickComponentData_GateBinary_FloatFloat : public FBrickComponentDataBase
{
public:
	double                                        InputA;                                            // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InputB;                                            // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Output;                                            // 0x0010(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_GateBinary_FloatFloat) == 0x000008, "Wrong alignment on FBrickComponentData_GateBinary_FloatFloat");
static_assert(sizeof(FBrickComponentData_GateBinary_FloatFloat) == 0x000018, "Wrong size on FBrickComponentData_GateBinary_FloatFloat");
static_assert(offsetof(FBrickComponentData_GateBinary_FloatFloat, InputA) == 0x000000, "Member 'FBrickComponentData_GateBinary_FloatFloat::InputA' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateBinary_FloatFloat, InputB) == 0x000008, "Member 'FBrickComponentData_GateBinary_FloatFloat::InputB' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateBinary_FloatFloat, Output) == 0x000010, "Member 'FBrickComponentData_GateBinary_FloatFloat::Output' has a wrong offset!");

// ScriptStruct Brickadia.BHJsonSavedPropertyChangeHandler
// 0x0008 (0x0038 - 0x0030)
struct FBHJsonSavedPropertyChangeHandler final : public FBHJsonSavedRoutineBase
{
public:
	class FName                                   Property;                                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBHJsonSavedPropertyChangeHandler) == 0x000008, "Wrong alignment on FBHJsonSavedPropertyChangeHandler");
static_assert(sizeof(FBHJsonSavedPropertyChangeHandler) == 0x000038, "Wrong size on FBHJsonSavedPropertyChangeHandler");
static_assert(offsetof(FBHJsonSavedPropertyChangeHandler, Property) == 0x000030, "Member 'FBHJsonSavedPropertyChangeHandler::Property' has a wrong offset!");

// ScriptStruct Brickadia.BrickSaveFileOwnerDetails
// 0x0038 (0x0038 - 0x0000)
struct FBrickSaveFileOwnerDetails final
{
public:
	class FString                                 OwnerName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerDisplayName;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                OwnerId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BrickCount;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickSaveFileOwnerDetails) == 0x000008, "Wrong alignment on FBrickSaveFileOwnerDetails");
static_assert(sizeof(FBrickSaveFileOwnerDetails) == 0x000038, "Wrong size on FBrickSaveFileOwnerDetails");
static_assert(offsetof(FBrickSaveFileOwnerDetails, OwnerName) == 0x000000, "Member 'FBrickSaveFileOwnerDetails::OwnerName' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileOwnerDetails, OwnerDisplayName) == 0x000010, "Member 'FBrickSaveFileOwnerDetails::OwnerDisplayName' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileOwnerDetails, OwnerId) == 0x000020, "Member 'FBrickSaveFileOwnerDetails::OwnerId' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileOwnerDetails, BrickCount) == 0x000030, "Member 'FBrickSaveFileOwnerDetails::BrickCount' has a wrong offset!");

// ScriptStruct Brickadia.BrickSaveFileDetails
// 0x0098 (0x0098 - 0x0000)
struct FBrickSaveFileDetails final
{
public:
	bool                                          bSupportedVersion;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GameVersion;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthorName;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                AuthorId;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HostName;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                HostId;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeSavedUtc;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeSavedLocal;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BrickCount;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBrickSaveFileOwnerDetails>     OwnerDetails;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHasScreenshot;                                    // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickSaveFileDetails) == 0x000008, "Wrong alignment on FBrickSaveFileDetails");
static_assert(sizeof(FBrickSaveFileDetails) == 0x000098, "Wrong size on FBrickSaveFileDetails");
static_assert(offsetof(FBrickSaveFileDetails, bSupportedVersion) == 0x000000, "Member 'FBrickSaveFileDetails::bSupportedVersion' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, GameVersion) == 0x000004, "Member 'FBrickSaveFileDetails::GameVersion' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, Map) == 0x000008, "Member 'FBrickSaveFileDetails::Map' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, Description) == 0x000018, "Member 'FBrickSaveFileDetails::Description' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, AuthorName) == 0x000028, "Member 'FBrickSaveFileDetails::AuthorName' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, AuthorId) == 0x000038, "Member 'FBrickSaveFileDetails::AuthorId' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, HostName) == 0x000048, "Member 'FBrickSaveFileDetails::HostName' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, HostId) == 0x000058, "Member 'FBrickSaveFileDetails::HostId' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, TimeSavedUtc) == 0x000068, "Member 'FBrickSaveFileDetails::TimeSavedUtc' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, TimeSavedLocal) == 0x000070, "Member 'FBrickSaveFileDetails::TimeSavedLocal' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, BrickCount) == 0x000078, "Member 'FBrickSaveFileDetails::BrickCount' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, OwnerDetails) == 0x000080, "Member 'FBrickSaveFileDetails::OwnerDetails' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileDetails, bHasScreenshot) == 0x000090, "Member 'FBrickSaveFileDetails::bHasScreenshot' has a wrong offset!");

// ScriptStruct Brickadia.BHConfigTypeInfoInner
// 0x0040 (0x0040 - 0x0000)
struct FBHConfigTypeInfoInner final
{
public:
	class FText                                   PrettyName;                                        // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBHBlockEditorLiteralValueWidgetBase> ValueWidget;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBHConfigTypeInfoColorMode                    ColorShiftMode;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      NestCountHSVCurve;                                 // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBHConfigTypeInfoInner) == 0x000008, "Wrong alignment on FBHConfigTypeInfoInner");
static_assert(sizeof(FBHConfigTypeInfoInner) == 0x000040, "Wrong size on FBHConfigTypeInfoInner");
static_assert(offsetof(FBHConfigTypeInfoInner, PrettyName) == 0x000000, "Member 'FBHConfigTypeInfoInner::PrettyName' has a wrong offset!");
static_assert(offsetof(FBHConfigTypeInfoInner, Color) == 0x000010, "Member 'FBHConfigTypeInfoInner::Color' has a wrong offset!");
static_assert(offsetof(FBHConfigTypeInfoInner, ValueWidget) == 0x000020, "Member 'FBHConfigTypeInfoInner::ValueWidget' has a wrong offset!");
static_assert(offsetof(FBHConfigTypeInfoInner, Icon) == 0x000028, "Member 'FBHConfigTypeInfoInner::Icon' has a wrong offset!");
static_assert(offsetof(FBHConfigTypeInfoInner, ColorShiftMode) == 0x000030, "Member 'FBHConfigTypeInfoInner::ColorShiftMode' has a wrong offset!");
static_assert(offsetof(FBHConfigTypeInfoInner, NestCountHSVCurve) == 0x000038, "Member 'FBHConfigTypeInfoInner::NestCountHSVCurve' has a wrong offset!");

// ScriptStruct Brickadia.BHConfigTypeInfo
// 0x0090 (0x0090 - 0x0000)
struct FBHConfigTypeInfo final
{
public:
	struct FBHConfigTypeInfoInner                 DefaultInfo;                                       // 0x0000(0x0040)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FBHConfigTypeInfoInner> SubtypeOverrides;                                  // 0x0040(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBHConfigTypeInfo) == 0x000008, "Wrong alignment on FBHConfigTypeInfo");
static_assert(sizeof(FBHConfigTypeInfo) == 0x000090, "Wrong size on FBHConfigTypeInfo");
static_assert(offsetof(FBHConfigTypeInfo, DefaultInfo) == 0x000000, "Member 'FBHConfigTypeInfo::DefaultInfo' has a wrong offset!");
static_assert(offsetof(FBHConfigTypeInfo, SubtypeOverrides) == 0x000040, "Member 'FBHConfigTypeInfo::SubtypeOverrides' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedRemoteWirePortSource
// 0x0014 (0x0014 - 0x0000)
struct FBRSavedRemoteWirePortSource final
{
public:
	uint32                                        GridPersistentIndex;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRSavedChunk3DIndex                   ChunkIndex;                                        // 0x0004(0x0006)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        BrickIndexInChunk;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ComponentTypeIndex;                                // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PortIndex;                                         // 0x0012(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedRemoteWirePortSource) == 0x000004, "Wrong alignment on FBRSavedRemoteWirePortSource");
static_assert(sizeof(FBRSavedRemoteWirePortSource) == 0x000014, "Wrong size on FBRSavedRemoteWirePortSource");
static_assert(offsetof(FBRSavedRemoteWirePortSource, GridPersistentIndex) == 0x000000, "Member 'FBRSavedRemoteWirePortSource::GridPersistentIndex' has a wrong offset!");
static_assert(offsetof(FBRSavedRemoteWirePortSource, ChunkIndex) == 0x000004, "Member 'FBRSavedRemoteWirePortSource::ChunkIndex' has a wrong offset!");
static_assert(offsetof(FBRSavedRemoteWirePortSource, BrickIndexInChunk) == 0x00000C, "Member 'FBRSavedRemoteWirePortSource::BrickIndexInChunk' has a wrong offset!");
static_assert(offsetof(FBRSavedRemoteWirePortSource, ComponentTypeIndex) == 0x000010, "Member 'FBRSavedRemoteWirePortSource::ComponentTypeIndex' has a wrong offset!");
static_assert(offsetof(FBRSavedRemoteWirePortSource, PortIndex) == 0x000012, "Member 'FBRSavedRemoteWirePortSource::PortIndex' has a wrong offset!");

// ScriptStruct Brickadia.BrickPreviewSimpleParameters
// 0x0030 (0x0030 - 0x0000)
struct FBrickPreviewSimpleParameters final
{
public:
	struct FBrickTypeNetWrapper                   BrickType;                                         // 0x0000(0x0018)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BrickColor;                                        // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBrickHandle>                   PreviewIgnoredBricks;                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickPreviewSimpleParameters) == 0x000008, "Wrong alignment on FBrickPreviewSimpleParameters");
static_assert(sizeof(FBrickPreviewSimpleParameters) == 0x000030, "Wrong size on FBrickPreviewSimpleParameters");
static_assert(offsetof(FBrickPreviewSimpleParameters, BrickType) == 0x000000, "Member 'FBrickPreviewSimpleParameters::BrickType' has a wrong offset!");
static_assert(offsetof(FBrickPreviewSimpleParameters, BrickColor) == 0x000018, "Member 'FBrickPreviewSimpleParameters::BrickColor' has a wrong offset!");
static_assert(offsetof(FBrickPreviewSimpleParameters, PreviewIgnoredBricks) == 0x000020, "Member 'FBrickPreviewSimpleParameters::PreviewIgnoredBricks' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_ConfirmConnectChallenge_Payload
// 0x0040 (0x0040 - 0x0000)
struct FJsonResponse_ConfirmConnectChallenge_Payload final
{
public:
	struct FBRGuid                                UserId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                HandleId;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserDisplayName;                                   // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_ConfirmConnectChallenge_Payload) == 0x000008, "Wrong alignment on FJsonResponse_ConfirmConnectChallenge_Payload");
static_assert(sizeof(FJsonResponse_ConfirmConnectChallenge_Payload) == 0x000040, "Wrong size on FJsonResponse_ConfirmConnectChallenge_Payload");
static_assert(offsetof(FJsonResponse_ConfirmConnectChallenge_Payload, UserId) == 0x000000, "Member 'FJsonResponse_ConfirmConnectChallenge_Payload::UserId' has a wrong offset!");
static_assert(offsetof(FJsonResponse_ConfirmConnectChallenge_Payload, UserName) == 0x000010, "Member 'FJsonResponse_ConfirmConnectChallenge_Payload::UserName' has a wrong offset!");
static_assert(offsetof(FJsonResponse_ConfirmConnectChallenge_Payload, HandleId) == 0x000020, "Member 'FJsonResponse_ConfirmConnectChallenge_Payload::HandleId' has a wrong offset!");
static_assert(offsetof(FJsonResponse_ConfirmConnectChallenge_Payload, UserDisplayName) == 0x000030, "Member 'FJsonResponse_ConfirmConnectChallenge_Payload::UserDisplayName' has a wrong offset!");

// ScriptStruct Brickadia.BrickSaveResult
// 0x0028 (0x0028 - 0x0000)
struct FBrickSaveResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumBricksSaved;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsSaved;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOwnerGroups;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaveDuration;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SaveError;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickSaveResult) == 0x000008, "Wrong alignment on FBrickSaveResult");
static_assert(sizeof(FBrickSaveResult) == 0x000028, "Wrong size on FBrickSaveResult");
static_assert(offsetof(FBrickSaveResult, bSuccess) == 0x000000, "Member 'FBrickSaveResult::bSuccess' has a wrong offset!");
static_assert(offsetof(FBrickSaveResult, NumBricksSaved) == 0x000004, "Member 'FBrickSaveResult::NumBricksSaved' has a wrong offset!");
static_assert(offsetof(FBrickSaveResult, NumComponentsSaved) == 0x000008, "Member 'FBrickSaveResult::NumComponentsSaved' has a wrong offset!");
static_assert(offsetof(FBrickSaveResult, NumOwnerGroups) == 0x00000C, "Member 'FBrickSaveResult::NumOwnerGroups' has a wrong offset!");
static_assert(offsetof(FBrickSaveResult, SaveDuration) == 0x000010, "Member 'FBrickSaveResult::SaveDuration' has a wrong offset!");
static_assert(offsetof(FBrickSaveResult, SaveError) == 0x000018, "Member 'FBrickSaveResult::SaveError' has a wrong offset!");

// ScriptStruct Brickadia.InspectorPropertyChangelist
// 0x0010 (0x0010 - 0x0000)
struct FInspectorPropertyChangelist final
{
public:
	TArray<struct FInspectorPropertyChangelistEntry> Entries;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInspectorPropertyChangelist) == 0x000008, "Wrong alignment on FInspectorPropertyChangelist");
static_assert(sizeof(FInspectorPropertyChangelist) == 0x000010, "Wrong size on FInspectorPropertyChangelist");
static_assert(offsetof(FInspectorPropertyChangelist, Entries) == 0x000000, "Member 'FInspectorPropertyChangelist::Entries' has a wrong offset!");

// ScriptStruct Brickadia.BrickSaveParams
// 0x0058 (0x0058 - 0x0000)
struct FBrickSaveParams final
{
public:
	class UBrickGridComponent*                    BrickGrid;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntBox                                FilterBox;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBRGuid                                FilterOwnerId;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilterByBox;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilterByOwner;                                    // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureScreenshot;                                // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickSaveParams) == 0x000008, "Wrong alignment on FBrickSaveParams");
static_assert(sizeof(FBrickSaveParams) == 0x000058, "Wrong size on FBrickSaveParams");
static_assert(offsetof(FBrickSaveParams, BrickGrid) == 0x000000, "Member 'FBrickSaveParams::BrickGrid' has a wrong offset!");
static_assert(offsetof(FBrickSaveParams, Filename) == 0x000008, "Member 'FBrickSaveParams::Filename' has a wrong offset!");
static_assert(offsetof(FBrickSaveParams, Description) == 0x000018, "Member 'FBrickSaveParams::Description' has a wrong offset!");
static_assert(offsetof(FBrickSaveParams, FilterBox) == 0x000028, "Member 'FBrickSaveParams::FilterBox' has a wrong offset!");
static_assert(offsetof(FBrickSaveParams, FilterOwnerId) == 0x000040, "Member 'FBrickSaveParams::FilterOwnerId' has a wrong offset!");
static_assert(offsetof(FBrickSaveParams, bFilterByBox) == 0x000050, "Member 'FBrickSaveParams::bFilterByBox' has a wrong offset!");
static_assert(offsetof(FBrickSaveParams, bFilterByOwner) == 0x000051, "Member 'FBrickSaveParams::bFilterByOwner' has a wrong offset!");
static_assert(offsetof(FBrickSaveParams, bCaptureScreenshot) == 0x000052, "Member 'FBrickSaveParams::bCaptureScreenshot' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateBinary_IntInt
// 0x0018 (0x0018 - 0x0000)
struct FBrickComponentData_GateBinary_IntInt : public FBrickComponentDataBase
{
public:
	int64                                         InputA;                                            // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InputB;                                            // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Output;                                            // 0x0010(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_GateBinary_IntInt) == 0x000008, "Wrong alignment on FBrickComponentData_GateBinary_IntInt");
static_assert(sizeof(FBrickComponentData_GateBinary_IntInt) == 0x000018, "Wrong size on FBrickComponentData_GateBinary_IntInt");
static_assert(offsetof(FBrickComponentData_GateBinary_IntInt, InputA) == 0x000000, "Member 'FBrickComponentData_GateBinary_IntInt::InputA' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateBinary_IntInt, InputB) == 0x000008, "Member 'FBrickComponentData_GateBinary_IntInt::InputB' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateBinary_IntInt, Output) == 0x000010, "Member 'FBrickComponentData_GateBinary_IntInt::Output' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateBlendInt
// 0x0008 (0x0020 - 0x0018)
struct FBrickComponentData_GateBlendInt final : public FBrickComponentData_GateBinary_IntInt
{
public:
	double                                        Blend;                                             // 0x0018(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_GateBlendInt) == 0x000008, "Wrong alignment on FBrickComponentData_GateBlendInt");
static_assert(sizeof(FBrickComponentData_GateBlendInt) == 0x000020, "Wrong size on FBrickComponentData_GateBlendInt");
static_assert(offsetof(FBrickComponentData_GateBlendInt, Blend) == 0x000018, "Member 'FBrickComponentData_GateBlendInt::Blend' has a wrong offset!");

// ScriptStruct Brickadia.BHResolvedTypeInfo
// 0x0038 (0x0038 - 0x0000)
struct FBHResolvedTypeInfo final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBHBlockEditorLiteralValueWidgetBase> ValueWidget;                                       // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExpression;                                     // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBHResolvedTypeInfo) == 0x000008, "Wrong alignment on FBHResolvedTypeInfo");
static_assert(sizeof(FBHResolvedTypeInfo) == 0x000038, "Wrong size on FBHResolvedTypeInfo");
static_assert(offsetof(FBHResolvedTypeInfo, Name) == 0x000000, "Member 'FBHResolvedTypeInfo::Name' has a wrong offset!");
static_assert(offsetof(FBHResolvedTypeInfo, Color) == 0x000010, "Member 'FBHResolvedTypeInfo::Color' has a wrong offset!");
static_assert(offsetof(FBHResolvedTypeInfo, ValueWidget) == 0x000020, "Member 'FBHResolvedTypeInfo::ValueWidget' has a wrong offset!");
static_assert(offsetof(FBHResolvedTypeInfo, Icon) == 0x000028, "Member 'FBHResolvedTypeInfo::Icon' has a wrong offset!");
static_assert(offsetof(FBHResolvedTypeInfo, bIsExpression) == 0x000030, "Member 'FBHResolvedTypeInfo::bIsExpression' has a wrong offset!");

// ScriptStruct Brickadia.BrickTransactionContext
// 0x0028 (0x0028 - 0x0000)
struct FBrickTransactionContext final
{
public:
	TArray<class UBrickTransaction*>              UndoTransactionBuffer;                             // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UBrickTransaction*>              RedoTransactionBuffer;                             // 0x0010(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickTransactionContext) == 0x000008, "Wrong alignment on FBrickTransactionContext");
static_assert(sizeof(FBrickTransactionContext) == 0x000028, "Wrong size on FBrickTransactionContext");
static_assert(offsetof(FBrickTransactionContext, UndoTransactionBuffer) == 0x000000, "Member 'FBrickTransactionContext::UndoTransactionBuffer' has a wrong offset!");
static_assert(offsetof(FBrickTransactionContext, RedoTransactionBuffer) == 0x000010, "Member 'FBrickTransactionContext::RedoTransactionBuffer' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_BlogListing
// 0x0010 (0x0010 - 0x0000)
struct FJsonResponse_BlogListing final
{
public:
	TArray<struct FJsonResponse_BlogListing_Post> Posts;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_BlogListing) == 0x000008, "Wrong alignment on FJsonResponse_BlogListing");
static_assert(sizeof(FJsonResponse_BlogListing) == 0x000010, "Wrong size on FJsonResponse_BlogListing");
static_assert(offsetof(FJsonResponse_BlogListing, Posts) == 0x000000, "Member 'FJsonResponse_BlogListing::Posts' has a wrong offset!");

// ScriptStruct Brickadia.BRTabSetEntry
// 0x0030 (0x0030 - 0x0000)
struct FBRTabSetEntry final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Tooltip;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRTabSetEntry) == 0x000008, "Wrong alignment on FBRTabSetEntry");
static_assert(sizeof(FBRTabSetEntry) == 0x000030, "Wrong size on FBRTabSetEntry");
static_assert(offsetof(FBRTabSetEntry, Text) == 0x000000, "Member 'FBRTabSetEntry::Text' has a wrong offset!");
static_assert(offsetof(FBRTabSetEntry, Tooltip) == 0x000010, "Member 'FBRTabSetEntry::Tooltip' has a wrong offset!");
static_assert(offsetof(FBRTabSetEntry, Icon) == 0x000020, "Member 'FBRTabSetEntry::Icon' has a wrong offset!");
static_assert(offsetof(FBRTabSetEntry, bEnabled) == 0x000028, "Member 'FBRTabSetEntry::bEnabled' has a wrong offset!");

// ScriptStruct Brickadia.BRWorldSaveParams
// 0x0028 (0x0028 - 0x0000)
struct FBRWorldSaveParams final
{
public:
	class FString                                 SaveAsPath;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveScreenshot;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWorldSaveParams) == 0x000008, "Wrong alignment on FBRWorldSaveParams");
static_assert(sizeof(FBRWorldSaveParams) == 0x000028, "Wrong size on FBRWorldSaveParams");
static_assert(offsetof(FBRWorldSaveParams, SaveAsPath) == 0x000000, "Member 'FBRWorldSaveParams::SaveAsPath' has a wrong offset!");
static_assert(offsetof(FBRWorldSaveParams, Description) == 0x000010, "Member 'FBRWorldSaveParams::Description' has a wrong offset!");
static_assert(offsetof(FBRWorldSaveParams, bSaveScreenshot) == 0x000020, "Member 'FBRWorldSaveParams::bSaveScreenshot' has a wrong offset!");

// ScriptStruct Brickadia.InspectorViewTarget
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FInspectorViewTarget final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInspectorViewTarget) == 0x000008, "Wrong alignment on FInspectorViewTarget");
static_assert(sizeof(FInspectorViewTarget) == 0x000030, "Wrong size on FInspectorViewTarget");

// ScriptStruct Brickadia.BRAssetAuthor
// 0x0020 (0x0020 - 0x0000)
struct FBRAssetAuthor final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRAssetAuthor) == 0x000008, "Wrong alignment on FBRAssetAuthor");
static_assert(sizeof(FBRAssetAuthor) == 0x000020, "Wrong size on FBRAssetAuthor");
static_assert(offsetof(FBRAssetAuthor, ID) == 0x000000, "Member 'FBRAssetAuthor::ID' has a wrong offset!");
static_assert(offsetof(FBRAssetAuthor, Name) == 0x000010, "Member 'FBRAssetAuthor::Name' has a wrong offset!");

// ScriptStruct Brickadia.BRBundleDependency
// 0x0038 (0x0038 - 0x0000)
struct FBRBundleDependency final
{
public:
	struct FBRGuid                                ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRBundleDependencyType                       Type;                                              // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRBundleDependency) == 0x000008, "Wrong alignment on FBRBundleDependency");
static_assert(sizeof(FBRBundleDependency) == 0x000038, "Wrong size on FBRBundleDependency");
static_assert(offsetof(FBRBundleDependency, ID) == 0x000000, "Member 'FBRBundleDependency::ID' has a wrong offset!");
static_assert(offsetof(FBRBundleDependency, Name) == 0x000010, "Member 'FBRBundleDependency::Name' has a wrong offset!");
static_assert(offsetof(FBRBundleDependency, Version) == 0x000020, "Member 'FBRBundleDependency::Version' has a wrong offset!");
static_assert(offsetof(FBRBundleDependency, Type) == 0x000030, "Member 'FBRBundleDependency::Type' has a wrong offset!");

// ScriptStruct Brickadia.BRBundleMetadata
// 0x0088 (0x0088 - 0x0000)
struct FBRBundleMetadata final
{
public:
	EBRBundleType                                 Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBRGuid                                ID;                                                // 0x0004(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBRAssetAuthor>                 Authors;                                           // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBRBundleDependency>            Dependencies;                                      // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRBundleMetadata) == 0x000008, "Wrong alignment on FBRBundleMetadata");
static_assert(sizeof(FBRBundleMetadata) == 0x000088, "Wrong size on FBRBundleMetadata");
static_assert(offsetof(FBRBundleMetadata, Type) == 0x000000, "Member 'FBRBundleMetadata::Type' has a wrong offset!");
static_assert(offsetof(FBRBundleMetadata, ID) == 0x000004, "Member 'FBRBundleMetadata::ID' has a wrong offset!");
static_assert(offsetof(FBRBundleMetadata, Name) == 0x000018, "Member 'FBRBundleMetadata::Name' has a wrong offset!");
static_assert(offsetof(FBRBundleMetadata, Version) == 0x000028, "Member 'FBRBundleMetadata::Version' has a wrong offset!");
static_assert(offsetof(FBRBundleMetadata, Tags) == 0x000038, "Member 'FBRBundleMetadata::Tags' has a wrong offset!");
static_assert(offsetof(FBRBundleMetadata, Authors) == 0x000048, "Member 'FBRBundleMetadata::Authors' has a wrong offset!");
static_assert(offsetof(FBRBundleMetadata, CreatedAt) == 0x000058, "Member 'FBRBundleMetadata::CreatedAt' has a wrong offset!");
static_assert(offsetof(FBRBundleMetadata, UpdatedAt) == 0x000060, "Member 'FBRBundleMetadata::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FBRBundleMetadata, Description) == 0x000068, "Member 'FBRBundleMetadata::Description' has a wrong offset!");
static_assert(offsetof(FBRBundleMetadata, Dependencies) == 0x000078, "Member 'FBRBundleMetadata::Dependencies' has a wrong offset!");

// ScriptStruct Brickadia.InspectorPropertyDescriptorListCategory
// 0x0030 (0x0030 - 0x0000)
struct FInspectorPropertyDescriptorListCategory final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseInlineProperty;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomCollapseMode;                            // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInspectorCategoryCollapseMode                CustomCollapseMode;                                // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UInspectorCategoryRowBase>  WidgetClassOverride;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInspectorPropertyDescriptor*>   Entries;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInspectorPropertyDescriptorListCategory) == 0x000008, "Wrong alignment on FInspectorPropertyDescriptorListCategory");
static_assert(sizeof(FInspectorPropertyDescriptorListCategory) == 0x000030, "Wrong size on FInspectorPropertyDescriptorListCategory");
static_assert(offsetof(FInspectorPropertyDescriptorListCategory, DisplayName) == 0x000000, "Member 'FInspectorPropertyDescriptorListCategory::DisplayName' has a wrong offset!");
static_assert(offsetof(FInspectorPropertyDescriptorListCategory, bUseInlineProperty) == 0x000010, "Member 'FInspectorPropertyDescriptorListCategory::bUseInlineProperty' has a wrong offset!");
static_assert(offsetof(FInspectorPropertyDescriptorListCategory, bHidden) == 0x000011, "Member 'FInspectorPropertyDescriptorListCategory::bHidden' has a wrong offset!");
static_assert(offsetof(FInspectorPropertyDescriptorListCategory, bUseCustomCollapseMode) == 0x000012, "Member 'FInspectorPropertyDescriptorListCategory::bUseCustomCollapseMode' has a wrong offset!");
static_assert(offsetof(FInspectorPropertyDescriptorListCategory, CustomCollapseMode) == 0x000013, "Member 'FInspectorPropertyDescriptorListCategory::CustomCollapseMode' has a wrong offset!");
static_assert(offsetof(FInspectorPropertyDescriptorListCategory, WidgetClassOverride) == 0x000018, "Member 'FInspectorPropertyDescriptorListCategory::WidgetClassOverride' has a wrong offset!");
static_assert(offsetof(FInspectorPropertyDescriptorListCategory, Entries) == 0x000020, "Member 'FInspectorPropertyDescriptorListCategory::Entries' has a wrong offset!");

// ScriptStruct Brickadia.BrickTypeWeakRef
// 0x0014 (0x0014 - 0x0000)
struct FBrickTypeWeakRef final
{
public:
	TWeakObjectPtr<class UBrickAsset>             BrickAsset;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             HalfSize;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickTypeWeakRef) == 0x000004, "Wrong alignment on FBrickTypeWeakRef");
static_assert(sizeof(FBrickTypeWeakRef) == 0x000014, "Wrong size on FBrickTypeWeakRef");
static_assert(offsetof(FBrickTypeWeakRef, BrickAsset) == 0x000000, "Member 'FBrickTypeWeakRef::BrickAsset' has a wrong offset!");
static_assert(offsetof(FBrickTypeWeakRef, HalfSize) == 0x000008, "Member 'FBrickTypeWeakRef::HalfSize' has a wrong offset!");

// ScriptStruct Brickadia.BrickInstanceTemplate
// 0x0030 (0x0030 - 0x0000)
struct FBrickInstanceTemplate final
{
public:
	struct FBrickTypeWeakRef                      BrickType;                                         // 0x0000(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntVector                             position;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorAndAlpha;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickCollisionChannels                       CollisionChannels;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnerTableId;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickInstanceTemplate) == 0x000004, "Wrong alignment on FBrickInstanceTemplate");
static_assert(sizeof(FBrickInstanceTemplate) == 0x000030, "Wrong size on FBrickInstanceTemplate");
static_assert(offsetof(FBrickInstanceTemplate, BrickType) == 0x000000, "Member 'FBrickInstanceTemplate::BrickType' has a wrong offset!");
static_assert(offsetof(FBrickInstanceTemplate, position) == 0x000014, "Member 'FBrickInstanceTemplate::position' has a wrong offset!");
static_assert(offsetof(FBrickInstanceTemplate, MaterialIndex) == 0x000020, "Member 'FBrickInstanceTemplate::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FBrickInstanceTemplate, ColorAndAlpha) == 0x000024, "Member 'FBrickInstanceTemplate::ColorAndAlpha' has a wrong offset!");
static_assert(offsetof(FBrickInstanceTemplate, Orientation) == 0x000028, "Member 'FBrickInstanceTemplate::Orientation' has a wrong offset!");
static_assert(offsetof(FBrickInstanceTemplate, CollisionChannels) == 0x000029, "Member 'FBrickInstanceTemplate::CollisionChannels' has a wrong offset!");
static_assert(offsetof(FBrickInstanceTemplate, bVisibility) == 0x00002A, "Member 'FBrickInstanceTemplate::bVisibility' has a wrong offset!");
static_assert(offsetof(FBrickInstanceTemplate, OwnerTableId) == 0x00002C, "Member 'FBrickInstanceTemplate::OwnerTableId' has a wrong offset!");

// ScriptStruct Brickadia.BHBoxed
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FBHBoxed final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBHBoxed) == 0x000008, "Wrong alignment on FBHBoxed");
static_assert(sizeof(FBHBoxed) == 0x000030, "Wrong size on FBHBoxed");

// ScriptStruct Brickadia.BrickComponentData_GateUnary_IntInt
// 0x0010 (0x0010 - 0x0000)
struct FBrickComponentData_GateUnary_IntInt final : public FBrickComponentDataBase
{
public:
	int64                                         Input;                                             // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Output;                                            // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_GateUnary_IntInt) == 0x000008, "Wrong alignment on FBrickComponentData_GateUnary_IntInt");
static_assert(sizeof(FBrickComponentData_GateUnary_IntInt) == 0x000010, "Wrong size on FBrickComponentData_GateUnary_IntInt");
static_assert(offsetof(FBrickComponentData_GateUnary_IntInt, Input) == 0x000000, "Member 'FBrickComponentData_GateUnary_IntInt::Input' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateUnary_IntInt, Output) == 0x000008, "Member 'FBrickComponentData_GateUnary_IntInt::Output' has a wrong offset!");

// ScriptStruct Brickadia.BHJsonSavedStruct
// 0x0040 (0x0040 - 0x0000)
struct FBHJsonSavedStruct final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJsonObjectWrapper>             Properties;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Guid;                                              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBHJsonSavedStruct) == 0x000008, "Wrong alignment on FBHJsonSavedStruct");
static_assert(sizeof(FBHJsonSavedStruct) == 0x000040, "Wrong size on FBHJsonSavedStruct");
static_assert(offsetof(FBHJsonSavedStruct, ID) == 0x000000, "Member 'FBHJsonSavedStruct::ID' has a wrong offset!");
static_assert(offsetof(FBHJsonSavedStruct, Description) == 0x000010, "Member 'FBHJsonSavedStruct::Description' has a wrong offset!");
static_assert(offsetof(FBHJsonSavedStruct, Properties) == 0x000020, "Member 'FBHJsonSavedStruct::Properties' has a wrong offset!");
static_assert(offsetof(FBHJsonSavedStruct, Guid) == 0x000030, "Member 'FBHJsonSavedStruct::Guid' has a wrong offset!");

// ScriptStruct Brickadia.BHJsonSavedEventHandler
// 0x0008 (0x0038 - 0x0030)
struct FBHJsonSavedEventHandler final : public FBHJsonSavedRoutineBase
{
public:
	EBrickNativeEvent                             Event;                                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBHJsonSavedEventHandler) == 0x000008, "Wrong alignment on FBHJsonSavedEventHandler");
static_assert(sizeof(FBHJsonSavedEventHandler) == 0x000038, "Wrong size on FBHJsonSavedEventHandler");
static_assert(offsetof(FBHJsonSavedEventHandler, Event) == 0x000030, "Member 'FBHJsonSavedEventHandler::Event' has a wrong offset!");

// ScriptStruct Brickadia.BHJsonSaved
// 0x0078 (0x0078 - 0x0000)
struct FBHJsonSaved final
{
public:
	EBHJsonVersion                                Version;                                           // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBHJsonSavedEventHandler>       EventHandlers;                                     // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBHJsonSavedPropertyChangeHandler> PropertyChangeHandlers;                            // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBHJsonSavedFunction>           Functions;                                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBHJsonSavedStruct                     InstanceStruct;                                    // 0x0038(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBHJsonSaved) == 0x000008, "Wrong alignment on FBHJsonSaved");
static_assert(sizeof(FBHJsonSaved) == 0x000078, "Wrong size on FBHJsonSaved");
static_assert(offsetof(FBHJsonSaved, Version) == 0x000000, "Member 'FBHJsonSaved::Version' has a wrong offset!");
static_assert(offsetof(FBHJsonSaved, EventHandlers) == 0x000008, "Member 'FBHJsonSaved::EventHandlers' has a wrong offset!");
static_assert(offsetof(FBHJsonSaved, PropertyChangeHandlers) == 0x000018, "Member 'FBHJsonSaved::PropertyChangeHandlers' has a wrong offset!");
static_assert(offsetof(FBHJsonSaved, Functions) == 0x000028, "Member 'FBHJsonSaved::Functions' has a wrong offset!");
static_assert(offsetof(FBHJsonSaved, InstanceStruct) == 0x000038, "Member 'FBHJsonSaved::InstanceStruct' has a wrong offset!");

// ScriptStruct Brickadia.BrickOwnerData
// 0x0030 (0x0030 - 0x0000)
struct FBrickOwnerData final
{
public:
	struct FBRGuid                                OwnerGuid;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerName;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerDisplayName;                                  // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickOwnerData) == 0x000008, "Wrong alignment on FBrickOwnerData");
static_assert(sizeof(FBrickOwnerData) == 0x000030, "Wrong size on FBrickOwnerData");
static_assert(offsetof(FBrickOwnerData, OwnerGuid) == 0x000000, "Member 'FBrickOwnerData::OwnerGuid' has a wrong offset!");
static_assert(offsetof(FBrickOwnerData, OwnerName) == 0x000010, "Member 'FBrickOwnerData::OwnerName' has a wrong offset!");
static_assert(offsetof(FBrickOwnerData, OwnerDisplayName) == 0x000020, "Member 'FBrickOwnerData::OwnerDisplayName' has a wrong offset!");

// ScriptStruct Brickadia.BRAnimNode_RebaseBone
// 0x0098 (0x0160 - 0x00C8)
struct FBRAnimNode_RebaseBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ReferenceBone;                                     // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x00F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TransformSpace;                                    // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0xF];                                      // 0x0151(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRAnimNode_RebaseBone) == 0x000010, "Wrong alignment on FBRAnimNode_RebaseBone");
static_assert(sizeof(FBRAnimNode_RebaseBone) == 0x000160, "Wrong size on FBRAnimNode_RebaseBone");
static_assert(offsetof(FBRAnimNode_RebaseBone, BoneToModify) == 0x0000C8, "Member 'FBRAnimNode_RebaseBone::BoneToModify' has a wrong offset!");
static_assert(offsetof(FBRAnimNode_RebaseBone, ReferenceBone) == 0x0000D8, "Member 'FBRAnimNode_RebaseBone::ReferenceBone' has a wrong offset!");
static_assert(offsetof(FBRAnimNode_RebaseBone, Transform) == 0x0000F0, "Member 'FBRAnimNode_RebaseBone::Transform' has a wrong offset!");
static_assert(offsetof(FBRAnimNode_RebaseBone, TransformSpace) == 0x000150, "Member 'FBRAnimNode_RebaseBone::TransformSpace' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_ConstantString
// 0x0010 (0x0010 - 0x0000)
struct FBrickComponentData_ConstantString final : public FBrickComponentDataBase
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_ConstantString) == 0x000008, "Wrong alignment on FBrickComponentData_ConstantString");
static_assert(sizeof(FBrickComponentData_ConstantString) == 0x000010, "Wrong size on FBrickComponentData_ConstantString");
static_assert(offsetof(FBrickComponentData_ConstantString, Value) == 0x000000, "Member 'FBrickComponentData_ConstantString::Value' has a wrong offset!");

// ScriptStruct Brickadia.BRApplicatorBrickPreset
// 0x0058 (0x0058 - 0x0000)
struct FBRApplicatorBrickPreset final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollision_Player;                                 // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollision_Weapon;                                 // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollision_Interaction;                            // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FJsonObjectWrapper>  Groups;                                            // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRApplicatorBrickPreset) == 0x000008, "Wrong alignment on FBRApplicatorBrickPreset");
static_assert(sizeof(FBRApplicatorBrickPreset) == 0x000058, "Wrong size on FBRApplicatorBrickPreset");
static_assert(offsetof(FBRApplicatorBrickPreset, bVisibility) == 0x000000, "Member 'FBRApplicatorBrickPreset::bVisibility' has a wrong offset!");
static_assert(offsetof(FBRApplicatorBrickPreset, bCollision_Player) == 0x000001, "Member 'FBRApplicatorBrickPreset::bCollision_Player' has a wrong offset!");
static_assert(offsetof(FBRApplicatorBrickPreset, bCollision_Weapon) == 0x000002, "Member 'FBRApplicatorBrickPreset::bCollision_Weapon' has a wrong offset!");
static_assert(offsetof(FBRApplicatorBrickPreset, bCollision_Interaction) == 0x000003, "Member 'FBRApplicatorBrickPreset::bCollision_Interaction' has a wrong offset!");
static_assert(offsetof(FBRApplicatorBrickPreset, Groups) == 0x000008, "Member 'FBRApplicatorBrickPreset::Groups' has a wrong offset!");

// ScriptStruct Brickadia.BRAuthUserInfo
// 0x0020 (0x0020 - 0x0000)
struct FBRAuthUserInfo final
{
public:
	class FString                                 User;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRAuthUserInfo) == 0x000008, "Wrong alignment on FBRAuthUserInfo");
static_assert(sizeof(FBRAuthUserInfo) == 0x000020, "Wrong size on FBRAuthUserInfo");
static_assert(offsetof(FBRAuthUserInfo, User) == 0x000000, "Member 'FBRAuthUserInfo::User' has a wrong offset!");
static_assert(offsetof(FBRAuthUserInfo, Password) == 0x000010, "Member 'FBRAuthUserInfo::Password' has a wrong offset!");

// ScriptStruct Brickadia.BrickSaveFolderInfo
// 0x0030 (0x0030 - 0x0000)
struct FBrickSaveFolderInfo final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFolders;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFiles;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalFileSize;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickSaveFolderInfo) == 0x000008, "Wrong alignment on FBrickSaveFolderInfo");
static_assert(sizeof(FBrickSaveFolderInfo) == 0x000030, "Wrong size on FBrickSaveFolderInfo");
static_assert(offsetof(FBrickSaveFolderInfo, Path) == 0x000000, "Member 'FBrickSaveFolderInfo::Path' has a wrong offset!");
static_assert(offsetof(FBrickSaveFolderInfo, Name) == 0x000010, "Member 'FBrickSaveFolderInfo::Name' has a wrong offset!");
static_assert(offsetof(FBrickSaveFolderInfo, NumFolders) == 0x000020, "Member 'FBrickSaveFolderInfo::NumFolders' has a wrong offset!");
static_assert(offsetof(FBrickSaveFolderInfo, NumFiles) == 0x000024, "Member 'FBrickSaveFolderInfo::NumFiles' has a wrong offset!");
static_assert(offsetof(FBrickSaveFolderInfo, TotalFileSize) == 0x000028, "Member 'FBrickSaveFolderInfo::TotalFileSize' has a wrong offset!");

// ScriptStruct Brickadia.BRAuthUserData
// 0x0030 (0x0030 - 0x0000)
struct FBRAuthUserData final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserDisplayName;                                   // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                UserId;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRAuthUserData) == 0x000008, "Wrong alignment on FBRAuthUserData");
static_assert(sizeof(FBRAuthUserData) == 0x000030, "Wrong size on FBRAuthUserData");
static_assert(offsetof(FBRAuthUserData, UserName) == 0x000000, "Member 'FBRAuthUserData::UserName' has a wrong offset!");
static_assert(offsetof(FBRAuthUserData, UserDisplayName) == 0x000010, "Member 'FBRAuthUserData::UserDisplayName' has a wrong offset!");
static_assert(offsetof(FBRAuthUserData, UserId) == 0x000020, "Member 'FBRAuthUserData::UserId' has a wrong offset!");

// ScriptStruct Brickadia.BrickFillPaintConfig
// 0x0014 (0x0014 - 0x0000)
struct FBrickFillPaintConfig final
{
public:
	struct FBREntityPersistentHandle              BrickGridPersistentHandle;                         // 0x0000(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OriginalColor;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OriginalMaterialIndex;                             // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OriginalMaterialAlpha;                             // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 NewColor;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewMaterialIndex;                                  // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewMaterialAlpha;                                  // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyNewColor;                                    // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyNewMaterial;                                 // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickFillPaintConfig) == 0x000004, "Wrong alignment on FBrickFillPaintConfig");
static_assert(sizeof(FBrickFillPaintConfig) == 0x000014, "Wrong size on FBrickFillPaintConfig");
static_assert(offsetof(FBrickFillPaintConfig, BrickGridPersistentHandle) == 0x000000, "Member 'FBrickFillPaintConfig::BrickGridPersistentHandle' has a wrong offset!");
static_assert(offsetof(FBrickFillPaintConfig, OriginalColor) == 0x000004, "Member 'FBrickFillPaintConfig::OriginalColor' has a wrong offset!");
static_assert(offsetof(FBrickFillPaintConfig, OriginalMaterialIndex) == 0x000008, "Member 'FBrickFillPaintConfig::OriginalMaterialIndex' has a wrong offset!");
static_assert(offsetof(FBrickFillPaintConfig, OriginalMaterialAlpha) == 0x000009, "Member 'FBrickFillPaintConfig::OriginalMaterialAlpha' has a wrong offset!");
static_assert(offsetof(FBrickFillPaintConfig, NewColor) == 0x00000C, "Member 'FBrickFillPaintConfig::NewColor' has a wrong offset!");
static_assert(offsetof(FBrickFillPaintConfig, NewMaterialIndex) == 0x000010, "Member 'FBrickFillPaintConfig::NewMaterialIndex' has a wrong offset!");
static_assert(offsetof(FBrickFillPaintConfig, NewMaterialAlpha) == 0x000011, "Member 'FBrickFillPaintConfig::NewMaterialAlpha' has a wrong offset!");
static_assert(offsetof(FBrickFillPaintConfig, bApplyNewColor) == 0x000012, "Member 'FBrickFillPaintConfig::bApplyNewColor' has a wrong offset!");
static_assert(offsetof(FBrickFillPaintConfig, bApplyNewMaterial) == 0x000013, "Member 'FBrickFillPaintConfig::bApplyNewMaterial' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_ConnectWire
// 0x0028 (0x0038 - 0x0010)
struct FBrickAction_ConnectWire final : public FBrickActionBase
{
public:
	struct FBrickPersistentHandle                 SourceBrickPersistentHandle;                       // 0x0010(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UBrickComponentTypeBase> SourceComponentType;                               // 0x0014(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourcePortName;                                    // 0x001C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickPersistentHandle                 TargetBrickPersistentHandle;                       // 0x0024(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UBrickComponentTypeBase> TargetComponentType;                               // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPortName;                                    // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_ConnectWire) == 0x000008, "Wrong alignment on FBrickAction_ConnectWire");
static_assert(sizeof(FBrickAction_ConnectWire) == 0x000038, "Wrong size on FBrickAction_ConnectWire");
static_assert(offsetof(FBrickAction_ConnectWire, SourceBrickPersistentHandle) == 0x000010, "Member 'FBrickAction_ConnectWire::SourceBrickPersistentHandle' has a wrong offset!");
static_assert(offsetof(FBrickAction_ConnectWire, SourceComponentType) == 0x000014, "Member 'FBrickAction_ConnectWire::SourceComponentType' has a wrong offset!");
static_assert(offsetof(FBrickAction_ConnectWire, SourcePortName) == 0x00001C, "Member 'FBrickAction_ConnectWire::SourcePortName' has a wrong offset!");
static_assert(offsetof(FBrickAction_ConnectWire, TargetBrickPersistentHandle) == 0x000024, "Member 'FBrickAction_ConnectWire::TargetBrickPersistentHandle' has a wrong offset!");
static_assert(offsetof(FBrickAction_ConnectWire, TargetComponentType) == 0x000028, "Member 'FBrickAction_ConnectWire::TargetComponentType' has a wrong offset!");
static_assert(offsetof(FBrickAction_ConnectWire, TargetPortName) == 0x000030, "Member 'FBrickAction_ConnectWire::TargetPortName' has a wrong offset!");

// ScriptStruct Brickadia.BRGenericCatalogTabPriority
// 0x0020 (0x0020 - 0x0000)
struct FBRGenericCatalogTabPriority final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<class FText>                           CategoriesThatComeFirst;                           // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRGenericCatalogTabPriority) == 0x000008, "Wrong alignment on FBRGenericCatalogTabPriority");
static_assert(sizeof(FBRGenericCatalogTabPriority) == 0x000020, "Wrong size on FBRGenericCatalogTabPriority");
static_assert(offsetof(FBRGenericCatalogTabPriority, Name) == 0x000000, "Member 'FBRGenericCatalogTabPriority::Name' has a wrong offset!");
static_assert(offsetof(FBRGenericCatalogTabPriority, CategoriesThatComeFirst) == 0x000010, "Member 'FBRGenericCatalogTabPriority::CategoriesThatComeFirst' has a wrong offset!");

// ScriptStruct Brickadia.BRCatalogCategory
// 0x0028 (0x0028 - 0x0000)
struct FBRCatalogCategory final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FBRCatalogEntry>                Entries;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRGenericCatalogCategoryWidget> OverrideWidget;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRCatalogCategory) == 0x000008, "Wrong alignment on FBRCatalogCategory");
static_assert(sizeof(FBRCatalogCategory) == 0x000028, "Wrong size on FBRCatalogCategory");
static_assert(offsetof(FBRCatalogCategory, DisplayName) == 0x000000, "Member 'FBRCatalogCategory::DisplayName' has a wrong offset!");
static_assert(offsetof(FBRCatalogCategory, Entries) == 0x000010, "Member 'FBRCatalogCategory::Entries' has a wrong offset!");
static_assert(offsetof(FBRCatalogCategory, OverrideWidget) == 0x000020, "Member 'FBRCatalogCategory::OverrideWidget' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_ConnectJointBrickToEntity
// 0x0088 (0x00A0 - 0x0018)
struct alignas(0x10) FBrickAction_ConnectJointBrickToEntity final : public FBrickActionBase_SingleBrick
{
public:
	uint8                                         Pad_18[0x88];                                      // 0x0018(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_ConnectJointBrickToEntity) == 0x000010, "Wrong alignment on FBrickAction_ConnectJointBrickToEntity");
static_assert(sizeof(FBrickAction_ConnectJointBrickToEntity) == 0x0000A0, "Wrong size on FBrickAction_ConnectJointBrickToEntity");

// ScriptStruct Brickadia.BRCatalogTab
// 0x0080 (0x0080 - 0x0000)
struct FBRCatalogTab final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FBRCatalogCategory>             Categories;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRGenericCatalogTabWidget> OverrideWidget;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRGenericCatalogTabButtonWidget> OverrideButtonWidget;                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRCatalogTab) == 0x000008, "Wrong alignment on FBRCatalogTab");
static_assert(sizeof(FBRCatalogTab) == 0x000080, "Wrong size on FBRCatalogTab");
static_assert(offsetof(FBRCatalogTab, DisplayName) == 0x000000, "Member 'FBRCatalogTab::DisplayName' has a wrong offset!");
static_assert(offsetof(FBRCatalogTab, Categories) == 0x000010, "Member 'FBRCatalogTab::Categories' has a wrong offset!");
static_assert(offsetof(FBRCatalogTab, OverrideWidget) == 0x000020, "Member 'FBRCatalogTab::OverrideWidget' has a wrong offset!");
static_assert(offsetof(FBRCatalogTab, OverrideButtonWidget) == 0x000028, "Member 'FBRCatalogTab::OverrideButtonWidget' has a wrong offset!");

// ScriptStruct Brickadia.BRCatalogOverrides
// 0x0028 (0x0028 - 0x0000)
struct FBRCatalogOverrides final
{
public:
	TSubclassOf<class UThumbnailProcessor>        OverrideThumbnailProcessorClass;                   // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRGenericCatalogTabButtonWidget> OverrideCatalogTabButtonWidget;                    // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRGenericCatalogTabWidget> OverrideCatalogTabWidget;                          // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRGenericCatalogCategoryWidget> OverrideCatalogCategoryWidget;                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBRGenericCatalogEntryWidget> OverrideCatalogEntryWidget;                        // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRCatalogOverrides) == 0x000008, "Wrong alignment on FBRCatalogOverrides");
static_assert(sizeof(FBRCatalogOverrides) == 0x000028, "Wrong size on FBRCatalogOverrides");
static_assert(offsetof(FBRCatalogOverrides, OverrideThumbnailProcessorClass) == 0x000000, "Member 'FBRCatalogOverrides::OverrideThumbnailProcessorClass' has a wrong offset!");
static_assert(offsetof(FBRCatalogOverrides, OverrideCatalogTabButtonWidget) == 0x000008, "Member 'FBRCatalogOverrides::OverrideCatalogTabButtonWidget' has a wrong offset!");
static_assert(offsetof(FBRCatalogOverrides, OverrideCatalogTabWidget) == 0x000010, "Member 'FBRCatalogOverrides::OverrideCatalogTabWidget' has a wrong offset!");
static_assert(offsetof(FBRCatalogOverrides, OverrideCatalogCategoryWidget) == 0x000018, "Member 'FBRCatalogOverrides::OverrideCatalogCategoryWidget' has a wrong offset!");
static_assert(offsetof(FBRCatalogOverrides, OverrideCatalogEntryWidget) == 0x000020, "Member 'FBRCatalogOverrides::OverrideCatalogEntryWidget' has a wrong offset!");

// ScriptStruct Brickadia.BRTeamGameplayPermissionData
// 0x000C (0x000C - 0x0000)
struct FBRTeamGameplayPermissionData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRTeamGameplayPermissionData) == 0x000004, "Wrong alignment on FBRTeamGameplayPermissionData");
static_assert(sizeof(FBRTeamGameplayPermissionData) == 0x00000C, "Wrong size on FBRTeamGameplayPermissionData");
static_assert(offsetof(FBRTeamGameplayPermissionData, Name) == 0x000000, "Member 'FBRTeamGameplayPermissionData::Name' has a wrong offset!");
static_assert(offsetof(FBRTeamGameplayPermissionData, bEnabled) == 0x000008, "Member 'FBRTeamGameplayPermissionData::bEnabled' has a wrong offset!");

// ScriptStruct Brickadia.BRQuickTeamSettings
// 0x0028 (0x0028 - 0x0000)
struct FBRQuickTeamSettings final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBRTeamGameplayPermissionData>  Permissions;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRQuickTeamSettings) == 0x000008, "Wrong alignment on FBRQuickTeamSettings");
static_assert(sizeof(FBRQuickTeamSettings) == 0x000028, "Wrong size on FBRQuickTeamSettings");
static_assert(offsetof(FBRQuickTeamSettings, Name) == 0x000000, "Member 'FBRQuickTeamSettings::Name' has a wrong offset!");
static_assert(offsetof(FBRQuickTeamSettings, Color) == 0x000010, "Member 'FBRQuickTeamSettings::Color' has a wrong offset!");
static_assert(offsetof(FBRQuickTeamSettings, Permissions) == 0x000018, "Member 'FBRQuickTeamSettings::Permissions' has a wrong offset!");

// ScriptStruct Brickadia.BRCharacterSavedPose
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FBRCharacterSavedPose final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRCharacterSavedPose) == 0x000008, "Wrong alignment on FBRCharacterSavedPose");
static_assert(sizeof(FBRCharacterSavedPose) == 0x000068, "Wrong size on FBRCharacterSavedPose");

// ScriptStruct Brickadia.BRColorPaletteGroupInfo
// 0x0020 (0x0020 - 0x0000)
struct FBRColorPaletteGroupInfo final
{
public:
	TArray<struct FColor>                         Colors;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRColorPaletteGroupInfo) == 0x000008, "Wrong alignment on FBRColorPaletteGroupInfo");
static_assert(sizeof(FBRColorPaletteGroupInfo) == 0x000020, "Wrong size on FBRColorPaletteGroupInfo");
static_assert(offsetof(FBRColorPaletteGroupInfo, Colors) == 0x000000, "Member 'FBRColorPaletteGroupInfo::Colors' has a wrong offset!");
static_assert(offsetof(FBRColorPaletteGroupInfo, Name) == 0x000010, "Member 'FBRColorPaletteGroupInfo::Name' has a wrong offset!");

// ScriptStruct Brickadia.BrickComposedGeneratorPart
// 0x0010 (0x0010 - 0x0000)
struct FBrickComposedGeneratorPart final
{
public:
	class UBrickComposablePart*                   Part;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComposedGeneratorPart) == 0x000008, "Wrong alignment on FBrickComposedGeneratorPart");
static_assert(sizeof(FBrickComposedGeneratorPart) == 0x000010, "Wrong size on FBrickComposedGeneratorPart");
static_assert(offsetof(FBrickComposedGeneratorPart, Part) == 0x000000, "Member 'FBrickComposedGeneratorPart::Part' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorPart, Orientation) == 0x000008, "Member 'FBrickComposedGeneratorPart::Orientation' has a wrong offset!");

// ScriptStruct Brickadia.BrickComposedGeneratorLayerCorners
// 0x0088 (0x0088 - 0x0000)
struct FBrickComposedGeneratorLayerCorners final
{
public:
	bool                                          bUseCornerFrontBottomLeftForAllCorners;            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickComposedGeneratorPart            CornerFrontBottomLeft;                             // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            CornerFrontBottomRight;                            // 0x0018(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            CornerFrontTopLeft;                                // 0x0028(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            CornerFrontTopRight;                               // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            CornerBackBottomLeft;                              // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            CornerBackBottomRight;                             // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            CornerBackTopLeft;                                 // 0x0068(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            CornerBackTopRight;                                // 0x0078(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComposedGeneratorLayerCorners) == 0x000008, "Wrong alignment on FBrickComposedGeneratorLayerCorners");
static_assert(sizeof(FBrickComposedGeneratorLayerCorners) == 0x000088, "Wrong size on FBrickComposedGeneratorLayerCorners");
static_assert(offsetof(FBrickComposedGeneratorLayerCorners, bUseCornerFrontBottomLeftForAllCorners) == 0x000000, "Member 'FBrickComposedGeneratorLayerCorners::bUseCornerFrontBottomLeftForAllCorners' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerCorners, CornerFrontBottomLeft) == 0x000008, "Member 'FBrickComposedGeneratorLayerCorners::CornerFrontBottomLeft' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerCorners, CornerFrontBottomRight) == 0x000018, "Member 'FBrickComposedGeneratorLayerCorners::CornerFrontBottomRight' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerCorners, CornerFrontTopLeft) == 0x000028, "Member 'FBrickComposedGeneratorLayerCorners::CornerFrontTopLeft' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerCorners, CornerFrontTopRight) == 0x000038, "Member 'FBrickComposedGeneratorLayerCorners::CornerFrontTopRight' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerCorners, CornerBackBottomLeft) == 0x000048, "Member 'FBrickComposedGeneratorLayerCorners::CornerBackBottomLeft' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerCorners, CornerBackBottomRight) == 0x000058, "Member 'FBrickComposedGeneratorLayerCorners::CornerBackBottomRight' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerCorners, CornerBackTopLeft) == 0x000068, "Member 'FBrickComposedGeneratorLayerCorners::CornerBackTopLeft' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerCorners, CornerBackTopRight) == 0x000078, "Member 'FBrickComposedGeneratorLayerCorners::CornerBackTopRight' has a wrong offset!");

// ScriptStruct Brickadia.BRColorPaletteData
// 0x0020 (0x0020 - 0x0000)
struct FBRColorPaletteData final
{
public:
	TArray<struct FBRColorPaletteGroupInfo>       Groups;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRColorPaletteData) == 0x000008, "Wrong alignment on FBRColorPaletteData");
static_assert(sizeof(FBRColorPaletteData) == 0x000020, "Wrong size on FBRColorPaletteData");
static_assert(offsetof(FBRColorPaletteData, Groups) == 0x000000, "Member 'FBRColorPaletteData::Groups' has a wrong offset!");
static_assert(offsetof(FBRColorPaletteData, Description) == 0x000010, "Member 'FBRColorPaletteData::Description' has a wrong offset!");

// ScriptStruct Brickadia.BRCoreError
// 0x0018 (0x0018 - 0x0000)
struct FBRCoreError final
{
public:
	class FName                                   Code;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRCoreError) == 0x000008, "Wrong alignment on FBRCoreError");
static_assert(sizeof(FBRCoreError) == 0x000018, "Wrong size on FBRCoreError");
static_assert(offsetof(FBRCoreError, Code) == 0x000000, "Member 'FBRCoreError::Code' has a wrong offset!");
static_assert(offsetof(FBRCoreError, Message) == 0x000008, "Member 'FBRCoreError::Message' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_MoveEntity
// 0x0030 (0x0048 - 0x0018)
struct FBrickAction_MoveEntity final : public FBrickActionBase_SingleEntity
{
public:
	struct FVector                                NewLocation;                                       // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0030(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_MoveEntity) == 0x000008, "Wrong alignment on FBrickAction_MoveEntity");
static_assert(sizeof(FBrickAction_MoveEntity) == 0x000048, "Wrong size on FBrickAction_MoveEntity");
static_assert(offsetof(FBrickAction_MoveEntity, NewLocation) == 0x000018, "Member 'FBrickAction_MoveEntity::NewLocation' has a wrong offset!");
static_assert(offsetof(FBrickAction_MoveEntity, NewRotation) == 0x000030, "Member 'FBrickAction_MoveEntity::NewRotation' has a wrong offset!");

// ScriptStruct Brickadia.BRDynamicImageStyles
// 0x0210 (0x0210 - 0x0000)
struct FBRDynamicImageStyles final
{
public:
	struct FSlateBrush                            EmptyBrush;                                        // 0x0000(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LoadingBrush;                                      // 0x00B0(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BaseBrush;                                         // 0x0160(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRDynamicImageStyles) == 0x000010, "Wrong alignment on FBRDynamicImageStyles");
static_assert(sizeof(FBRDynamicImageStyles) == 0x000210, "Wrong size on FBRDynamicImageStyles");
static_assert(offsetof(FBRDynamicImageStyles, EmptyBrush) == 0x000000, "Member 'FBRDynamicImageStyles::EmptyBrush' has a wrong offset!");
static_assert(offsetof(FBRDynamicImageStyles, LoadingBrush) == 0x0000B0, "Member 'FBRDynamicImageStyles::LoadingBrush' has a wrong offset!");
static_assert(offsetof(FBRDynamicImageStyles, BaseBrush) == 0x000160, "Member 'FBRDynamicImageStyles::BaseBrush' has a wrong offset!");

// ScriptStruct Brickadia.BRImageCacheKey
// 0x0018 (0x0018 - 0x0000)
struct FBRImageCacheKey final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRImageCacheKey) == 0x000008, "Wrong alignment on FBRImageCacheKey");
static_assert(sizeof(FBRImageCacheKey) == 0x000018, "Wrong size on FBRImageCacheKey");
static_assert(offsetof(FBRImageCacheKey, Tag) == 0x000000, "Member 'FBRImageCacheKey::Tag' has a wrong offset!");
static_assert(offsetof(FBRImageCacheKey, SizeX) == 0x000010, "Member 'FBRImageCacheKey::SizeX' has a wrong offset!");
static_assert(offsetof(FBRImageCacheKey, SizeY) == 0x000014, "Member 'FBRImageCacheKey::SizeY' has a wrong offset!");

// ScriptStruct Brickadia.BRCharacterWithHistory
// 0x0040 (0x0040 - 0x0000)
struct FBRCharacterWithHistory final
{
public:
	class ABRCharacter*                           Character;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRCharacterWithHistory) == 0x000008, "Wrong alignment on FBRCharacterWithHistory");
static_assert(sizeof(FBRCharacterWithHistory) == 0x000040, "Wrong size on FBRCharacterWithHistory");
static_assert(offsetof(FBRCharacterWithHistory, Character) == 0x000000, "Member 'FBRCharacterWithHistory::Character' has a wrong offset!");

// ScriptStruct Brickadia.BRInputKey_Simple
// 0x0018 (0x0018 - 0x0000)
struct FBRInputKey_Simple final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRInputKey_Simple) == 0x000008, "Wrong alignment on FBRInputKey_Simple");
static_assert(sizeof(FBRInputKey_Simple) == 0x000018, "Wrong size on FBRInputKey_Simple");
static_assert(offsetof(FBRInputKey_Simple, Key) == 0x000000, "Member 'FBRInputKey_Simple::Key' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_AttachComponentWithValues
// 0x0018 (0x0030 - 0x0018)
struct FBrickAction_AttachComponentWithValues final : public FBrickActionBase_SingleBrick
{
public:
	TWeakObjectPtr<class UBrickComponentTypeBase> ComponentType;                                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           PropertyChangelist;                                // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_AttachComponentWithValues) == 0x000008, "Wrong alignment on FBrickAction_AttachComponentWithValues");
static_assert(sizeof(FBrickAction_AttachComponentWithValues) == 0x000030, "Wrong size on FBrickAction_AttachComponentWithValues");
static_assert(offsetof(FBrickAction_AttachComponentWithValues, ComponentType) == 0x000018, "Member 'FBrickAction_AttachComponentWithValues::ComponentType' has a wrong offset!");
static_assert(offsetof(FBrickAction_AttachComponentWithValues, PropertyChangelist) == 0x000020, "Member 'FBrickAction_AttachComponentWithValues::PropertyChangelist' has a wrong offset!");

// ScriptStruct Brickadia.BRInputKey_WithModifiers
// 0x0020 (0x0020 - 0x0000)
struct FBRInputKey_WithModifiers final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShift : 1;                                        // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCtrl : 1;                                         // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlt : 1;                                          // 0x0018(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCmd : 1;                                          // 0x0018(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRInputKey_WithModifiers) == 0x000008, "Wrong alignment on FBRInputKey_WithModifiers");
static_assert(sizeof(FBRInputKey_WithModifiers) == 0x000020, "Wrong size on FBRInputKey_WithModifiers");
static_assert(offsetof(FBRInputKey_WithModifiers, Key) == 0x000000, "Member 'FBRInputKey_WithModifiers::Key' has a wrong offset!");

// ScriptStruct Brickadia.BRInputKey_Axis
// 0x0020 (0x0020 - 0x0000)
struct FBRInputKey_Axis final
{
public:
	struct FKey                                   Axis;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInvert : 1;                                       // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRInputKey_Axis) == 0x000008, "Wrong alignment on FBRInputKey_Axis");
static_assert(sizeof(FBRInputKey_Axis) == 0x000020, "Wrong size on FBRInputKey_Axis");
static_assert(offsetof(FBRInputKey_Axis, Axis) == 0x000000, "Member 'FBRInputKey_Axis::Axis' has a wrong offset!");
static_assert(offsetof(FBRInputKey_Axis, Scale) == 0x000018, "Member 'FBRInputKey_Axis::Scale' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedBitFlags
// 0x0010 (0x0010 - 0x0000)
struct FBRSavedBitFlags final
{
public:
	TArray<uint8>                                 Flags;                                             // 0x0000(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedBitFlags) == 0x000008, "Wrong alignment on FBRSavedBitFlags");
static_assert(sizeof(FBRSavedBitFlags) == 0x000010, "Wrong size on FBRSavedBitFlags");
static_assert(offsetof(FBRSavedBitFlags, Flags) == 0x000000, "Member 'FBRSavedBitFlags::Flags' has a wrong offset!");

// ScriptStruct Brickadia.BRInputKey_FakeAxis
// 0x0030 (0x0030 - 0x0000)
struct FBRInputKey_FakeAxis final
{
public:
	struct FBRInputKey_Simple                     Positive;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBRInputKey_Simple                     Negative;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRInputKey_FakeAxis) == 0x000008, "Wrong alignment on FBRInputKey_FakeAxis");
static_assert(sizeof(FBRInputKey_FakeAxis) == 0x000030, "Wrong size on FBRInputKey_FakeAxis");
static_assert(offsetof(FBRInputKey_FakeAxis, Positive) == 0x000000, "Member 'FBRInputKey_FakeAxis::Positive' has a wrong offset!");
static_assert(offsetof(FBRInputKey_FakeAxis, Negative) == 0x000018, "Member 'FBRInputKey_FakeAxis::Negative' has a wrong offset!");

// ScriptStruct Brickadia.BRInputBindingDetails_Action
// 0x0038 (0x0038 - 0x0000)
struct FBRInputBindingDetails_Action final
{
public:
	struct FBRInputKey_WithModifiers              keyboard;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBRInputKey_Simple                     Gamepad;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRInputBindingDetails_Action) == 0x000008, "Wrong alignment on FBRInputBindingDetails_Action");
static_assert(sizeof(FBRInputBindingDetails_Action) == 0x000038, "Wrong size on FBRInputBindingDetails_Action");
static_assert(offsetof(FBRInputBindingDetails_Action, keyboard) == 0x000000, "Member 'FBRInputBindingDetails_Action::keyboard' has a wrong offset!");
static_assert(offsetof(FBRInputBindingDetails_Action, Gamepad) == 0x000020, "Member 'FBRInputBindingDetails_Action::Gamepad' has a wrong offset!");

// ScriptStruct Brickadia.BrickCoverageAABB
// 0x001C (0x001C - 0x0000)
struct FBrickCoverageAABB final
{
public:
	struct FIntBox                                Box;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Mask;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickCoverageAABB) == 0x000004, "Wrong alignment on FBrickCoverageAABB");
static_assert(sizeof(FBrickCoverageAABB) == 0x00001C, "Wrong size on FBrickCoverageAABB");
static_assert(offsetof(FBrickCoverageAABB, Box) == 0x000000, "Member 'FBrickCoverageAABB::Box' has a wrong offset!");
static_assert(offsetof(FBrickCoverageAABB, Mask) == 0x000018, "Member 'FBrickCoverageAABB::Mask' has a wrong offset!");

// ScriptStruct Brickadia.BRInputBindingDetails_Axis
// 0x00A0 (0x00A0 - 0x0000)
struct FBRInputBindingDetails_Axis final
{
public:
	struct FBRInputKey_FakeAxis                   KeyboardFake;                                      // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBRInputKey_Axis                       keyboard;                                          // 0x0030(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBRInputKey_FakeAxis                   GamepadFake;                                       // 0x0050(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBRInputKey_Axis                       Gamepad;                                           // 0x0080(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRInputBindingDetails_Axis) == 0x000008, "Wrong alignment on FBRInputBindingDetails_Axis");
static_assert(sizeof(FBRInputBindingDetails_Axis) == 0x0000A0, "Wrong size on FBRInputBindingDetails_Axis");
static_assert(offsetof(FBRInputBindingDetails_Axis, KeyboardFake) == 0x000000, "Member 'FBRInputBindingDetails_Axis::KeyboardFake' has a wrong offset!");
static_assert(offsetof(FBRInputBindingDetails_Axis, keyboard) == 0x000030, "Member 'FBRInputBindingDetails_Axis::keyboard' has a wrong offset!");
static_assert(offsetof(FBRInputBindingDetails_Axis, GamepadFake) == 0x000050, "Member 'FBRInputBindingDetails_Axis::GamepadFake' has a wrong offset!");
static_assert(offsetof(FBRInputBindingDetails_Axis, Gamepad) == 0x000080, "Member 'FBRInputBindingDetails_Axis::Gamepad' has a wrong offset!");

// ScriptStruct Brickadia.BRInputBindingExport_Action
// 0x0040 (0x0040 - 0x0000)
struct FBRInputBindingExport_Action final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRInputBindingDetails_Action          Binding;                                           // 0x0008(0x0038)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRInputBindingExport_Action) == 0x000008, "Wrong alignment on FBRInputBindingExport_Action");
static_assert(sizeof(FBRInputBindingExport_Action) == 0x000040, "Wrong size on FBRInputBindingExport_Action");
static_assert(offsetof(FBRInputBindingExport_Action, Name) == 0x000000, "Member 'FBRInputBindingExport_Action::Name' has a wrong offset!");
static_assert(offsetof(FBRInputBindingExport_Action, Binding) == 0x000008, "Member 'FBRInputBindingExport_Action::Binding' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedBrickColor
// 0x0004 (0x0004 - 0x0000)
struct FBRSavedBrickColor final
{
public:
	uint8                                         R;                                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedBrickColor) == 0x000001, "Wrong alignment on FBRSavedBrickColor");
static_assert(sizeof(FBRSavedBrickColor) == 0x000004, "Wrong size on FBRSavedBrickColor");
static_assert(offsetof(FBRSavedBrickColor, R) == 0x000000, "Member 'FBRSavedBrickColor::R' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickColor, G) == 0x000001, "Member 'FBRSavedBrickColor::G' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickColor, B) == 0x000002, "Member 'FBRSavedBrickColor::B' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickColor, A) == 0x000003, "Member 'FBRSavedBrickColor::A' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedEntityColors
// 0x0020 (0x0020 - 0x0000)
struct FBRSavedEntityColors final
{
public:
	struct FBRSavedBrickColor                     Color0;                                            // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FBRSavedBrickColor                     Color1;                                            // 0x0004(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FBRSavedBrickColor                     Color2;                                            // 0x0008(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FBRSavedBrickColor                     Color3;                                            // 0x000C(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FBRSavedBrickColor                     Color4;                                            // 0x0010(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FBRSavedBrickColor                     Color5;                                            // 0x0014(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FBRSavedBrickColor                     Color6;                                            // 0x0018(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FBRSavedBrickColor                     Color7;                                            // 0x001C(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedEntityColors) == 0x000001, "Wrong alignment on FBRSavedEntityColors");
static_assert(sizeof(FBRSavedEntityColors) == 0x000020, "Wrong size on FBRSavedEntityColors");
static_assert(offsetof(FBRSavedEntityColors, Color0) == 0x000000, "Member 'FBRSavedEntityColors::Color0' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityColors, Color1) == 0x000004, "Member 'FBRSavedEntityColors::Color1' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityColors, Color2) == 0x000008, "Member 'FBRSavedEntityColors::Color2' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityColors, Color3) == 0x00000C, "Member 'FBRSavedEntityColors::Color3' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityColors, Color4) == 0x000010, "Member 'FBRSavedEntityColors::Color4' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityColors, Color5) == 0x000014, "Member 'FBRSavedEntityColors::Color5' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityColors, Color6) == 0x000018, "Member 'FBRSavedEntityColors::Color6' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityColors, Color7) == 0x00001C, "Member 'FBRSavedEntityColors::Color7' has a wrong offset!");

// ScriptStruct Brickadia.BRInputBindingExport_Axis
// 0x00A8 (0x00A8 - 0x0000)
struct FBRInputBindingExport_Axis final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRInputBindingDetails_Axis            Binding;                                           // 0x0008(0x00A0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRInputBindingExport_Axis) == 0x000008, "Wrong alignment on FBRInputBindingExport_Axis");
static_assert(sizeof(FBRInputBindingExport_Axis) == 0x0000A8, "Wrong size on FBRInputBindingExport_Axis");
static_assert(offsetof(FBRInputBindingExport_Axis, Name) == 0x000000, "Member 'FBRInputBindingExport_Axis::Name' has a wrong offset!");
static_assert(offsetof(FBRInputBindingExport_Axis, Binding) == 0x000008, "Member 'FBRInputBindingExport_Axis::Binding' has a wrong offset!");

// ScriptStruct Brickadia.SavedPlayerRoles
// 0x0010 (0x0010 - 0x0000)
struct FSavedPlayerRoles final
{
public:
	TArray<class FString>                         Roles;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedPlayerRoles) == 0x000008, "Wrong alignment on FSavedPlayerRoles");
static_assert(sizeof(FSavedPlayerRoles) == 0x000010, "Wrong size on FSavedPlayerRoles");
static_assert(offsetof(FSavedPlayerRoles, Roles) == 0x000000, "Member 'FSavedPlayerRoles::Roles' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedEntityTypeCounter
// 0x0008 (0x0008 - 0x0000)
struct FBRSavedEntityTypeCounter final
{
public:
	uint32                                        TypeIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumEntities;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedEntityTypeCounter) == 0x000004, "Wrong alignment on FBRSavedEntityTypeCounter");
static_assert(sizeof(FBRSavedEntityTypeCounter) == 0x000008, "Wrong size on FBRSavedEntityTypeCounter");
static_assert(offsetof(FBRSavedEntityTypeCounter, TypeIndex) == 0x000000, "Member 'FBRSavedEntityTypeCounter::TypeIndex' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityTypeCounter, NumEntities) == 0x000004, "Member 'FBRSavedEntityTypeCounter::NumEntities' has a wrong offset!");

// ScriptStruct Brickadia.SavedPlayerRolesList
// 0x0050 (0x0050 - 0x0000)
struct FSavedPlayerRolesList final
{
public:
	TMap<struct FBRGuid, struct FSavedPlayerRoles> SavedPlayerRoles;                                  // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedPlayerRolesList) == 0x000008, "Wrong alignment on FSavedPlayerRolesList");
static_assert(sizeof(FSavedPlayerRolesList) == 0x000050, "Wrong size on FSavedPlayerRolesList");
static_assert(offsetof(FSavedPlayerRolesList, SavedPlayerRoles) == 0x000000, "Member 'FSavedPlayerRolesList::SavedPlayerRoles' has a wrong offset!");

// ScriptStruct Brickadia.SavedPlayerNamesList
// 0x00A0 (0x00A0 - 0x0000)
struct FSavedPlayerNamesList final
{
public:
	TMap<struct FBRGuid, class FString>           SavedPlayerNames;                                  // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FBRGuid, class FString>           SavedPlayerDisplayNames;                           // 0x0050(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedPlayerNamesList) == 0x000008, "Wrong alignment on FSavedPlayerNamesList");
static_assert(sizeof(FSavedPlayerNamesList) == 0x0000A0, "Wrong size on FSavedPlayerNamesList");
static_assert(offsetof(FSavedPlayerNamesList, SavedPlayerNames) == 0x000000, "Member 'FSavedPlayerNamesList::SavedPlayerNames' has a wrong offset!");
static_assert(offsetof(FSavedPlayerNamesList, SavedPlayerDisplayNames) == 0x000050, "Member 'FSavedPlayerNamesList::SavedPlayerDisplayNames' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_Empty
// 0x0001 (0x0001 - 0x0000)
struct FBRMessagePackTestStruct_Empty final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRMessagePackTestStruct_Empty) == 0x000001, "Wrong alignment on FBRMessagePackTestStruct_Empty");
static_assert(sizeof(FBRMessagePackTestStruct_Empty) == 0x000001, "Wrong size on FBRMessagePackTestStruct_Empty");

// ScriptStruct Brickadia.SavedPlayerDisplayNamesList
// 0x0050 (0x0050 - 0x0000)
struct FSavedPlayerDisplayNamesList final
{
public:
	TMap<struct FBRGuid, class FString>           SavedPlayerDisplayNames;                           // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedPlayerDisplayNamesList) == 0x000008, "Wrong alignment on FSavedPlayerDisplayNamesList");
static_assert(sizeof(FSavedPlayerDisplayNamesList) == 0x000050, "Wrong size on FSavedPlayerDisplayNamesList");
static_assert(offsetof(FSavedPlayerDisplayNamesList, SavedPlayerDisplayNames) == 0x000000, "Member 'FSavedPlayerDisplayNamesList::SavedPlayerDisplayNames' has a wrong offset!");

// ScriptStruct Brickadia.Ban
// 0x0030 (0x0030 - 0x0000)
struct FBan final
{
public:
	struct FBRGuid                                BannerId;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expires;                                           // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBan) == 0x000008, "Wrong alignment on FBan");
static_assert(sizeof(FBan) == 0x000030, "Wrong size on FBan");
static_assert(offsetof(FBan, BannerId) == 0x000000, "Member 'FBan::BannerId' has a wrong offset!");
static_assert(offsetof(FBan, Created) == 0x000010, "Member 'FBan::Created' has a wrong offset!");
static_assert(offsetof(FBan, Expires) == 0x000018, "Member 'FBan::Expires' has a wrong offset!");
static_assert(offsetof(FBan, Reason) == 0x000020, "Member 'FBan::Reason' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedBrickSize
// 0x0006 (0x0006 - 0x0000)
struct FBRSavedBrickSize final
{
public:
	uint16                                        X;                                                 // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Y;                                                 // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Z;                                                 // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedBrickSize) == 0x000002, "Wrong alignment on FBRSavedBrickSize");
static_assert(sizeof(FBRSavedBrickSize) == 0x000006, "Wrong size on FBRSavedBrickSize");
static_assert(offsetof(FBRSavedBrickSize, X) == 0x000000, "Member 'FBRSavedBrickSize::X' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickSize, Y) == 0x000002, "Member 'FBRSavedBrickSize::Y' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickSize, Z) == 0x000004, "Member 'FBRSavedBrickSize::Z' has a wrong offset!");

// ScriptStruct Brickadia.SavedBanList
// 0x0050 (0x0050 - 0x0000)
struct FSavedBanList final
{
public:
	TMap<struct FBRGuid, struct FBan>             BanList;                                           // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedBanList) == 0x000008, "Wrong alignment on FSavedBanList");
static_assert(sizeof(FSavedBanList) == 0x000050, "Wrong size on FSavedBanList");
static_assert(offsetof(FSavedBanList, BanList) == 0x000000, "Member 'FSavedBanList::BanList' has a wrong offset!");

// ScriptStruct Brickadia.SimpleBrickOwnerData
// 0x0010 (0x0010 - 0x0000)
struct FSimpleBrickOwnerData final
{
public:
	struct FBRGuid                                OwnerGuid;                                         // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleBrickOwnerData) == 0x000004, "Wrong alignment on FSimpleBrickOwnerData");
static_assert(sizeof(FSimpleBrickOwnerData) == 0x000010, "Wrong size on FSimpleBrickOwnerData");
static_assert(offsetof(FSimpleBrickOwnerData, OwnerGuid) == 0x000000, "Member 'FSimpleBrickOwnerData::OwnerGuid' has a wrong offset!");

// ScriptStruct Brickadia.BrickTemplateConfig
// 0x0028 (0x0028 - 0x0000)
struct FBrickTemplateConfig final
{
public:
	struct FBREntityPersistentHandle              BrickGridPersistentHandle;                         // 0x0000(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UBrickBuildingTemplate>  Template;                                          // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             PositionOffset;                                    // 0x000C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             RotationPivot;                                     // 0x0018(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreserveOwnership;                                // 0x0025(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickTemplateConfig) == 0x000004, "Wrong alignment on FBrickTemplateConfig");
static_assert(sizeof(FBrickTemplateConfig) == 0x000028, "Wrong size on FBrickTemplateConfig");
static_assert(offsetof(FBrickTemplateConfig, BrickGridPersistentHandle) == 0x000000, "Member 'FBrickTemplateConfig::BrickGridPersistentHandle' has a wrong offset!");
static_assert(offsetof(FBrickTemplateConfig, Template) == 0x000004, "Member 'FBrickTemplateConfig::Template' has a wrong offset!");
static_assert(offsetof(FBrickTemplateConfig, PositionOffset) == 0x00000C, "Member 'FBrickTemplateConfig::PositionOffset' has a wrong offset!");
static_assert(offsetof(FBrickTemplateConfig, RotationPivot) == 0x000018, "Member 'FBrickTemplateConfig::RotationPivot' has a wrong offset!");
static_assert(offsetof(FBrickTemplateConfig, Orientation) == 0x000024, "Member 'FBrickTemplateConfig::Orientation' has a wrong offset!");
static_assert(offsetof(FBrickTemplateConfig, bPreserveOwnership) == 0x000025, "Member 'FBrickTemplateConfig::bPreserveOwnership' has a wrong offset!");

// ScriptStruct Brickadia.EnvironmentObjectDescriptor
// 0x0028 (0x0028 - 0x0000)
struct FEnvironmentObjectDescriptor final
{
public:
	class FText                                   DisplaySettingsClass;                              // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> DescriptorList;                                    // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RequiredServerEditPermission;                      // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnvironmentObjectDescriptor) == 0x000008, "Wrong alignment on FEnvironmentObjectDescriptor");
static_assert(sizeof(FEnvironmentObjectDescriptor) == 0x000028, "Wrong size on FEnvironmentObjectDescriptor");
static_assert(offsetof(FEnvironmentObjectDescriptor, DisplaySettingsClass) == 0x000000, "Member 'FEnvironmentObjectDescriptor::DisplaySettingsClass' has a wrong offset!");
static_assert(offsetof(FEnvironmentObjectDescriptor, Object) == 0x000010, "Member 'FEnvironmentObjectDescriptor::Object' has a wrong offset!");
static_assert(offsetof(FEnvironmentObjectDescriptor, DescriptorList) == 0x000018, "Member 'FEnvironmentObjectDescriptor::DescriptorList' has a wrong offset!");
static_assert(offsetof(FEnvironmentObjectDescriptor, RequiredServerEditPermission) == 0x000020, "Member 'FEnvironmentObjectDescriptor::RequiredServerEditPermission' has a wrong offset!");

// ScriptStruct Brickadia.BrickAnimatedAssetPair
// 0x0010 (0x0010 - 0x0000)
struct FBrickAnimatedAssetPair final
{
public:
	class UBrickAsset*                            OffAsset;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickAsset*                            OnAsset;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAnimatedAssetPair) == 0x000008, "Wrong alignment on FBrickAnimatedAssetPair");
static_assert(sizeof(FBrickAnimatedAssetPair) == 0x000010, "Wrong size on FBrickAnimatedAssetPair");
static_assert(offsetof(FBrickAnimatedAssetPair, OffAsset) == 0x000000, "Member 'FBrickAnimatedAssetPair::OffAsset' has a wrong offset!");
static_assert(offsetof(FBrickAnimatedAssetPair, OnAsset) == 0x000008, "Member 'FBrickAnimatedAssetPair::OnAsset' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponResourcePickup
// 0x0010 (0x0010 - 0x0000)
struct FBRWeaponResourcePickup final
{
public:
	class UBRWeaponResource*                      WeaponResource;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponResourcePickup) == 0x000008, "Wrong alignment on FBRWeaponResourcePickup");
static_assert(sizeof(FBRWeaponResourcePickup) == 0x000010, "Wrong size on FBRWeaponResourcePickup");
static_assert(offsetof(FBRWeaponResourcePickup, WeaponResource) == 0x000000, "Member 'FBRWeaponResourcePickup::WeaponResource' has a wrong offset!");
static_assert(offsetof(FBRWeaponResourcePickup, Amount) == 0x000008, "Member 'FBRWeaponResourcePickup::Amount' has a wrong offset!");

// ScriptStruct Brickadia.BrickAnimatedAssetPairCollection
// 0x0030 (0x0030 - 0x0000)
struct FBrickAnimatedAssetPairCollection final
{
public:
	TArray<struct FBrickAnimatedAssetPair>        Pairs;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAnimatedAssetPairCollection) == 0x000008, "Wrong alignment on FBrickAnimatedAssetPairCollection");
static_assert(sizeof(FBrickAnimatedAssetPairCollection) == 0x000030, "Wrong size on FBrickAnimatedAssetPairCollection");
static_assert(offsetof(FBrickAnimatedAssetPairCollection, Pairs) == 0x000000, "Member 'FBrickAnimatedAssetPairCollection::Pairs' has a wrong offset!");

// ScriptStruct Brickadia.BrickAssetWirePort
// 0x0048 (0x0048 - 0x0000)
struct FBrickAssetWirePort final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AlternativeNames;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                position;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAssetWirePort) == 0x000008, "Wrong alignment on FBrickAssetWirePort");
static_assert(sizeof(FBrickAssetWirePort) == 0x000048, "Wrong size on FBrickAssetWirePort");
static_assert(offsetof(FBrickAssetWirePort, Name) == 0x000000, "Member 'FBrickAssetWirePort::Name' has a wrong offset!");
static_assert(offsetof(FBrickAssetWirePort, AlternativeNames) == 0x000008, "Member 'FBrickAssetWirePort::AlternativeNames' has a wrong offset!");
static_assert(offsetof(FBrickAssetWirePort, position) == 0x000018, "Member 'FBrickAssetWirePort::position' has a wrong offset!");
static_assert(offsetof(FBrickAssetWirePort, Normal) == 0x000030, "Member 'FBrickAssetWirePort::Normal' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_ManyFields
// 0x00C8 (0x00C8 - 0x0000)
struct FBRMessagePackTestStruct_ManyFields final
{
public:
	int32                                         IntValue;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringValue;                                       // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ArrayValue;                                        // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<int32>                                   SetValue;                                          // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, class FString>                    MapValue;                                          // 0x0078(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_ManyFields) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_ManyFields");
static_assert(sizeof(FBRMessagePackTestStruct_ManyFields) == 0x0000C8, "Wrong size on FBRMessagePackTestStruct_ManyFields");
static_assert(offsetof(FBRMessagePackTestStruct_ManyFields, IntValue) == 0x000000, "Member 'FBRMessagePackTestStruct_ManyFields::IntValue' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_ManyFields, StringValue) == 0x000008, "Member 'FBRMessagePackTestStruct_ManyFields::StringValue' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_ManyFields, ArrayValue) == 0x000018, "Member 'FBRMessagePackTestStruct_ManyFields::ArrayValue' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_ManyFields, SetValue) == 0x000028, "Member 'FBRMessagePackTestStruct_ManyFields::SetValue' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_ManyFields, MapValue) == 0x000078, "Member 'FBRMessagePackTestStruct_ManyFields::MapValue' has a wrong offset!");

// ScriptStruct Brickadia.BrickAssetDefaultComponentEntry
// 0x0018 (0x0018 - 0x0000)
struct FBrickAssetDefaultComponentEntry final
{
public:
	TSubclassOf<class UBrickComponentTypeBase>    ComponentType;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBrickAssetWirePort>            WirePorts;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAssetDefaultComponentEntry) == 0x000008, "Wrong alignment on FBrickAssetDefaultComponentEntry");
static_assert(sizeof(FBrickAssetDefaultComponentEntry) == 0x000018, "Wrong size on FBrickAssetDefaultComponentEntry");
static_assert(offsetof(FBrickAssetDefaultComponentEntry, ComponentType) == 0x000000, "Member 'FBrickAssetDefaultComponentEntry::ComponentType' has a wrong offset!");
static_assert(offsetof(FBrickAssetDefaultComponentEntry, WirePorts) == 0x000008, "Member 'FBrickAssetDefaultComponentEntry::WirePorts' has a wrong offset!");

// ScriptStruct Brickadia.BrickMenuSizePresetRow
// 0x0028 (0x0028 - 0x0000)
struct FBrickMenuSizePresetRow final
{
public:
	struct FIntVector                             StartSize;                                         // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               ExpandDirection;                                   // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpandBy;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricks;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickMenuSizePresetRow) == 0x000008, "Wrong alignment on FBrickMenuSizePresetRow");
static_assert(sizeof(FBrickMenuSizePresetRow) == 0x000028, "Wrong size on FBrickMenuSizePresetRow");
static_assert(offsetof(FBrickMenuSizePresetRow, StartSize) == 0x000000, "Member 'FBrickMenuSizePresetRow::StartSize' has a wrong offset!");
static_assert(offsetof(FBrickMenuSizePresetRow, ExpandDirection) == 0x00000C, "Member 'FBrickMenuSizePresetRow::ExpandDirection' has a wrong offset!");
static_assert(offsetof(FBrickMenuSizePresetRow, ExpandBy) == 0x000010, "Member 'FBrickMenuSizePresetRow::ExpandBy' has a wrong offset!");
static_assert(offsetof(FBrickMenuSizePresetRow, NumBricks) == 0x000014, "Member 'FBrickMenuSizePresetRow::NumBricks' has a wrong offset!");
static_assert(offsetof(FBrickMenuSizePresetRow, Comment) == 0x000018, "Member 'FBrickMenuSizePresetRow::Comment' has a wrong offset!");

// ScriptStruct Brickadia.BRPlayerPartCustomizationV2
// 0x0038 (0x0038 - 0x0000)
struct FBRPlayerPartCustomizationV2 final
{
public:
	class UBRPlayerPartDescriptor*                PartDescriptor;                                    // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRPlayerDecalDescriptor*               DecalDescriptor;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TreeIndex;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Colors[0x8];                                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRPlayerPartCustomizationV2) == 0x000008, "Wrong alignment on FBRPlayerPartCustomizationV2");
static_assert(sizeof(FBRPlayerPartCustomizationV2) == 0x000038, "Wrong size on FBRPlayerPartCustomizationV2");
static_assert(offsetof(FBRPlayerPartCustomizationV2, PartDescriptor) == 0x000000, "Member 'FBRPlayerPartCustomizationV2::PartDescriptor' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartCustomizationV2, DecalDescriptor) == 0x000008, "Member 'FBRPlayerPartCustomizationV2::DecalDescriptor' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartCustomizationV2, TreeIndex) == 0x000010, "Member 'FBRPlayerPartCustomizationV2::TreeIndex' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartCustomizationV2, Colors) == 0x000014, "Member 'FBRPlayerPartCustomizationV2::Colors' has a wrong offset!");

// ScriptStruct Brickadia.BRPlayerAvatarCustomizationV2
// 0x0010 (0x0010 - 0x0000)
struct FBRPlayerAvatarCustomizationV2 final
{
public:
	TArray<struct FBRPlayerPartCustomizationV2>   Parts;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRPlayerAvatarCustomizationV2) == 0x000008, "Wrong alignment on FBRPlayerAvatarCustomizationV2");
static_assert(sizeof(FBRPlayerAvatarCustomizationV2) == 0x000010, "Wrong size on FBRPlayerAvatarCustomizationV2");
static_assert(offsetof(FBRPlayerAvatarCustomizationV2, Parts) == 0x000000, "Member 'FBRPlayerAvatarCustomizationV2::Parts' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentInstanceRef
// 0x0010 (0x0010 - 0x0000)
struct FBrickComponentInstanceRef final
{
public:
	struct FBrickHandle                           BrickHandle;                                       // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickComponentTypeBase*                ComponentType;                                     // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentInstanceRef) == 0x000008, "Wrong alignment on FBrickComponentInstanceRef");
static_assert(sizeof(FBrickComponentInstanceRef) == 0x000010, "Wrong size on FBrickComponentInstanceRef");
static_assert(offsetof(FBrickComponentInstanceRef, BrickHandle) == 0x000000, "Member 'FBrickComponentInstanceRef::BrickHandle' has a wrong offset!");
static_assert(offsetof(FBrickComponentInstanceRef, ComponentType) == 0x000008, "Member 'FBrickComponentInstanceRef::ComponentType' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentLatentInstanceRef
// 0x0018 (0x0018 - 0x0000)
struct FBrickComponentLatentInstanceRef final
{
public:
	struct FBrickLatentHandle                     BrickHandle;                                       // 0x0000(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickComponentTypeBase*                ComponentType;                                     // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentLatentInstanceRef) == 0x000008, "Wrong alignment on FBrickComponentLatentInstanceRef");
static_assert(sizeof(FBrickComponentLatentInstanceRef) == 0x000018, "Wrong size on FBrickComponentLatentInstanceRef");
static_assert(offsetof(FBrickComponentLatentInstanceRef, BrickHandle) == 0x000000, "Member 'FBrickComponentLatentInstanceRef::BrickHandle' has a wrong offset!");
static_assert(offsetof(FBrickComponentLatentInstanceRef, ComponentType) == 0x000010, "Member 'FBrickComponentLatentInstanceRef::ComponentType' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_LightBase
// 0x0020 (0x0020 - 0x0000)
struct FBrickComponentData_LightBase : public FBrickComponentDataBase
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Brightness;                                        // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x000C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBrickColor;                                    // 0x0010(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadows;                                      // 0x0011(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalLightComponent*                   LightInstance;                                     // 0x0018(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_LightBase) == 0x000008, "Wrong alignment on FBrickComponentData_LightBase");
static_assert(sizeof(FBrickComponentData_LightBase) == 0x000020, "Wrong size on FBrickComponentData_LightBase");
static_assert(offsetof(FBrickComponentData_LightBase, bEnabled) == 0x000000, "Member 'FBrickComponentData_LightBase::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_LightBase, Brightness) == 0x000004, "Member 'FBrickComponentData_LightBase::Brightness' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_LightBase, Radius) == 0x000008, "Member 'FBrickComponentData_LightBase::Radius' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_LightBase, Color) == 0x00000C, "Member 'FBrickComponentData_LightBase::Color' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_LightBase, bUseBrickColor) == 0x000010, "Member 'FBrickComponentData_LightBase::bUseBrickColor' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_LightBase, bCastShadows) == 0x000011, "Member 'FBrickComponentData_LightBase::bCastShadows' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_LightBase, LightInstance) == 0x000018, "Member 'FBrickComponentData_LightBase::LightInstance' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentEventContext
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FBrickComponentEventContext final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentEventContext) == 0x000008, "Wrong alignment on FBrickComponentEventContext");
static_assert(sizeof(FBrickComponentEventContext) == 0x000018, "Wrong size on FBrickComponentEventContext");

// ScriptStruct Brickadia.BRRulesetPreset
// 0x0078 (0x0078 - 0x0000)
struct FBRRulesetPreset final
{
public:
	class UBRGameTypeDescriptor*                  GameTypeDescriptor;                                // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     RulesetSettings;                                   // 0x0008(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     GamemodeSettings;                                  // 0x0028(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     UnaffiliatedTeamSettings;                          // 0x0048(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FJsonObjectWrapper>             CustomTeamSettings;                                // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRRulesetPreset) == 0x000008, "Wrong alignment on FBRRulesetPreset");
static_assert(sizeof(FBRRulesetPreset) == 0x000078, "Wrong size on FBRRulesetPreset");
static_assert(offsetof(FBRRulesetPreset, GameTypeDescriptor) == 0x000000, "Member 'FBRRulesetPreset::GameTypeDescriptor' has a wrong offset!");
static_assert(offsetof(FBRRulesetPreset, RulesetSettings) == 0x000008, "Member 'FBRRulesetPreset::RulesetSettings' has a wrong offset!");
static_assert(offsetof(FBRRulesetPreset, GamemodeSettings) == 0x000028, "Member 'FBRRulesetPreset::GamemodeSettings' has a wrong offset!");
static_assert(offsetof(FBRRulesetPreset, UnaffiliatedTeamSettings) == 0x000048, "Member 'FBRRulesetPreset::UnaffiliatedTeamSettings' has a wrong offset!");
static_assert(offsetof(FBRRulesetPreset, CustomTeamSettings) == 0x000068, "Member 'FBRRulesetPreset::CustomTeamSettings' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentWirePortStub_Reroute
// 0x0000 (0x0001 - 0x0001)
struct FBrickComponentWirePortStub_Reroute final : public FBrickComponentWirePortStub
{
};
static_assert(alignof(FBrickComponentWirePortStub_Reroute) == 0x000001, "Wrong alignment on FBrickComponentWirePortStub_Reroute");
static_assert(sizeof(FBrickComponentWirePortStub_Reroute) == 0x000001, "Wrong size on FBrickComponentWirePortStub_Reroute");

// ScriptStruct Brickadia.BRRoleData_PermissionState
// 0x000C (0x000C - 0x0000)
struct FBRRoleData_PermissionState final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRSetPermission                              State;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRRoleData_PermissionState) == 0x000004, "Wrong alignment on FBRRoleData_PermissionState");
static_assert(sizeof(FBRRoleData_PermissionState) == 0x00000C, "Wrong size on FBRRoleData_PermissionState");
static_assert(offsetof(FBRRoleData_PermissionState, Name) == 0x000000, "Member 'FBRRoleData_PermissionState::Name' has a wrong offset!");
static_assert(offsetof(FBRRoleData_PermissionState, State) == 0x000008, "Member 'FBRRoleData_PermissionState::State' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedRole
// 0x0028 (0x0028 - 0x0000)
struct FBRSavedRole final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBRRoleData_PermissionState>    Permissions;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasColor;                                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRSavedRole) == 0x000008, "Wrong alignment on FBRSavedRole");
static_assert(sizeof(FBRSavedRole) == 0x000028, "Wrong size on FBRSavedRole");
static_assert(offsetof(FBRSavedRole, Name) == 0x000000, "Member 'FBRSavedRole::Name' has a wrong offset!");
static_assert(offsetof(FBRSavedRole, Permissions) == 0x000010, "Member 'FBRSavedRole::Permissions' has a wrong offset!");
static_assert(offsetof(FBRSavedRole, Color) == 0x000020, "Member 'FBRSavedRole::Color' has a wrong offset!");
static_assert(offsetof(FBRSavedRole, bHasColor) == 0x000024, "Member 'FBRSavedRole::bHasColor' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedRoles
// 0x0040 (0x0040 - 0x0000)
struct FBRSavedRoles final
{
public:
	TArray<struct FBRSavedRole>                   Roles;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBRSavedRole                           DefaultRole;                                       // 0x0010(0x0028)(NativeAccessSpecifierPublic)
	struct FColor                                 OwnerRoleColor;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwnerRoleHasColor;                                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRSavedRolesVersion                          Version;                                           // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRSavedRoles) == 0x000008, "Wrong alignment on FBRSavedRoles");
static_assert(sizeof(FBRSavedRoles) == 0x000040, "Wrong size on FBRSavedRoles");
static_assert(offsetof(FBRSavedRoles, Roles) == 0x000000, "Member 'FBRSavedRoles::Roles' has a wrong offset!");
static_assert(offsetof(FBRSavedRoles, DefaultRole) == 0x000010, "Member 'FBRSavedRoles::DefaultRole' has a wrong offset!");
static_assert(offsetof(FBRSavedRoles, OwnerRoleColor) == 0x000038, "Member 'FBRSavedRoles::OwnerRoleColor' has a wrong offset!");
static_assert(offsetof(FBRSavedRoles, bOwnerRoleHasColor) == 0x00003C, "Member 'FBRSavedRoles::bOwnerRoleHasColor' has a wrong offset!");
static_assert(offsetof(FBRSavedRoles, Version) == 0x00003D, "Member 'FBRSavedRoles::Version' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_AudioEmitter
// 0x0030 (0x0030 - 0x0000)
struct FBrickComponentData_AudioEmitter final : public FBrickComponentDataBase
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickAudioDescriptor*                  AudioDescriptor;                                   // 0x0008(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0014(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0018(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpatialization;                                   // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AudioComponentInstance;                            // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_AudioEmitter) == 0x000008, "Wrong alignment on FBrickComponentData_AudioEmitter");
static_assert(sizeof(FBrickComponentData_AudioEmitter) == 0x000030, "Wrong size on FBrickComponentData_AudioEmitter");
static_assert(offsetof(FBrickComponentData_AudioEmitter, bEnabled) == 0x000000, "Member 'FBrickComponentData_AudioEmitter::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_AudioEmitter, AudioDescriptor) == 0x000008, "Member 'FBrickComponentData_AudioEmitter::AudioDescriptor' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_AudioEmitter, VolumeMultiplier) == 0x000010, "Member 'FBrickComponentData_AudioEmitter::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_AudioEmitter, PitchMultiplier) == 0x000014, "Member 'FBrickComponentData_AudioEmitter::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_AudioEmitter, InnerRadius) == 0x000018, "Member 'FBrickComponentData_AudioEmitter::InnerRadius' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_AudioEmitter, MaxDistance) == 0x00001C, "Member 'FBrickComponentData_AudioEmitter::MaxDistance' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_AudioEmitter, bSpatialization) == 0x000020, "Member 'FBrickComponentData_AudioEmitter::bSpatialization' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_AudioEmitter, AudioComponentInstance) == 0x000028, "Member 'FBrickComponentData_AudioEmitter::AudioComponentInstance' has a wrong offset!");

// ScriptStruct Brickadia.BRInventoryEntryPlan
// 0x0030 (0x0030 - 0x0000)
struct FBRInventoryEntryPlan final
{
public:
	EBRInventoryEntryPlanType                     Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickTypeNetWrapper                   BrickTypeIfBrick;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBREntityTypeBase>          EntityTypeIfEntity;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABRItemBase>                ItemTypeIfItem;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRInventoryEntryPlan) == 0x000008, "Wrong alignment on FBRInventoryEntryPlan");
static_assert(sizeof(FBRInventoryEntryPlan) == 0x000030, "Wrong size on FBRInventoryEntryPlan");
static_assert(offsetof(FBRInventoryEntryPlan, Type) == 0x000000, "Member 'FBRInventoryEntryPlan::Type' has a wrong offset!");
static_assert(offsetof(FBRInventoryEntryPlan, BrickTypeIfBrick) == 0x000008, "Member 'FBRInventoryEntryPlan::BrickTypeIfBrick' has a wrong offset!");
static_assert(offsetof(FBRInventoryEntryPlan, EntityTypeIfEntity) == 0x000020, "Member 'FBRInventoryEntryPlan::EntityTypeIfEntity' has a wrong offset!");
static_assert(offsetof(FBRInventoryEntryPlan, ItemTypeIfItem) == 0x000028, "Member 'FBRInventoryEntryPlan::ItemTypeIfItem' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_InteractableBase
// 0x0018 (0x0018 - 0x0000)
struct FBrickComponentData_InteractableBase : public FBrickComponentDataBase
{
public:
	bool                                          bAllowNearbyInteraction;                           // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInteraction;                                // 0x0001(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PromptCustomLabel;                                 // 0x0008(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_InteractableBase) == 0x000008, "Wrong alignment on FBrickComponentData_InteractableBase");
static_assert(sizeof(FBrickComponentData_InteractableBase) == 0x000018, "Wrong size on FBrickComponentData_InteractableBase");
static_assert(offsetof(FBrickComponentData_InteractableBase, bAllowNearbyInteraction) == 0x000000, "Member 'FBrickComponentData_InteractableBase::bAllowNearbyInteraction' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_InteractableBase, bHiddenInteraction) == 0x000001, "Member 'FBrickComponentData_InteractableBase::bHiddenInteraction' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_InteractableBase, PromptCustomLabel) == 0x000008, "Member 'FBrickComponentData_InteractableBase::PromptCustomLabel' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Button
// 0x0028 (0x0040 - 0x0018)
struct FBrickComponentData_Button final : public FBrickComponentData_InteractableBase
{
public:
	bool                                          bHeld;                                             // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         PressCount;                                        // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ABRCharacter>            Character;                                         // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickOneShotAudioDescriptor*           PressSound;                                        // 0x0030(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickOneShotAudioDescriptor*           ReleaseSound;                                      // 0x0038(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_Button) == 0x000008, "Wrong alignment on FBrickComponentData_Button");
static_assert(sizeof(FBrickComponentData_Button) == 0x000040, "Wrong size on FBrickComponentData_Button");
static_assert(offsetof(FBrickComponentData_Button, bHeld) == 0x000018, "Member 'FBrickComponentData_Button::bHeld' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Button, PressCount) == 0x000020, "Member 'FBrickComponentData_Button::PressCount' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Button, Character) == 0x000028, "Member 'FBrickComponentData_Button::Character' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Button, PressSound) == 0x000030, "Member 'FBrickComponentData_Button::PressSound' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Button, ReleaseSound) == 0x000038, "Member 'FBrickComponentData_Button::ReleaseSound' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_OneStringArray
// 0x0010 (0x0010 - 0x0000)
struct FBRMessagePackTestStruct_OneStringArray final
{
public:
	TArray<class FString>                         ArrayValue;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_OneStringArray) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_OneStringArray");
static_assert(sizeof(FBRMessagePackTestStruct_OneStringArray) == 0x000010, "Wrong size on FBRMessagePackTestStruct_OneStringArray");
static_assert(offsetof(FBRMessagePackTestStruct_OneStringArray, ArrayValue) == 0x000000, "Member 'FBRMessagePackTestStruct_OneStringArray::ArrayValue' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Clock
// 0x0020 (0x0020 - 0x0000)
struct FBrickComponentData_Clock final : public FBrickComponentDataBase
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPulseOn;                                          // 0x0001(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OnTimeSeconds;                                     // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OffTimeSeconds;                                    // 0x0010(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           CurrentTimer;                                      // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_Clock) == 0x000008, "Wrong alignment on FBrickComponentData_Clock");
static_assert(sizeof(FBrickComponentData_Clock) == 0x000020, "Wrong size on FBrickComponentData_Clock");
static_assert(offsetof(FBrickComponentData_Clock, bEnabled) == 0x000000, "Member 'FBrickComponentData_Clock::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Clock, bPulseOn) == 0x000001, "Member 'FBrickComponentData_Clock::bPulseOn' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Clock, OnTimeSeconds) == 0x000008, "Member 'FBrickComponentData_Clock::OnTimeSeconds' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Clock, OffTimeSeconds) == 0x000010, "Member 'FBrickComponentData_Clock::OffTimeSeconds' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Clock, CurrentTimer) == 0x000018, "Member 'FBrickComponentData_Clock::CurrentTimer' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Damage
// 0x0020 (0x0020 - 0x0000)
struct FBrickComponentData_Damage final : public FBrickComponentDataBase
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConsoleTag;                                        // 0x0010(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_Damage) == 0x000008, "Wrong alignment on FBrickComponentData_Damage");
static_assert(sizeof(FBrickComponentData_Damage) == 0x000020, "Wrong size on FBrickComponentData_Damage");
static_assert(offsetof(FBrickComponentData_Damage, Message) == 0x000000, "Member 'FBrickComponentData_Damage::Message' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Damage, ConsoleTag) == 0x000010, "Member 'FBrickComponentData_Damage::ConsoleTag' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_Reorient
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_Reorient final : public FBrickActionBase_SingleBrick
{
public:
	EBrickOrientation                             NewOrientation;                                    // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_Reorient) == 0x000008, "Wrong alignment on FBrickAction_Reorient");
static_assert(sizeof(FBrickAction_Reorient) == 0x000020, "Wrong size on FBrickAction_Reorient");
static_assert(offsetof(FBrickAction_Reorient, NewOrientation) == 0x000018, "Member 'FBrickAction_Reorient::NewOrientation' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Interact
// 0x0028 (0x0040 - 0x0018)
struct FBrickComponentData_Interact final : public FBrickComponentData_InteractableBase
{
public:
	class UBrickOneShotAudioDescriptor*           InteractSound;                                     // 0x0018(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConsoleTag;                                        // 0x0030(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_Interact) == 0x000008, "Wrong alignment on FBrickComponentData_Interact");
static_assert(sizeof(FBrickComponentData_Interact) == 0x000040, "Wrong size on FBrickComponentData_Interact");
static_assert(offsetof(FBrickComponentData_Interact, InteractSound) == 0x000018, "Member 'FBrickComponentData_Interact::InteractSound' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Interact, Message) == 0x000020, "Member 'FBrickComponentData_Interact::Message' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Interact, ConsoleTag) == 0x000030, "Member 'FBrickComponentData_Interact::ConsoleTag' has a wrong offset!");

// ScriptStruct Brickadia.BRPresetMap
// 0x0050 (0x0050 - 0x0000)
struct FBRPresetMap final
{
public:
	TMap<class FName, struct FJsonObjectWrapper>  Groups;                                            // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRPresetMap) == 0x000008, "Wrong alignment on FBRPresetMap");
static_assert(sizeof(FBRPresetMap) == 0x000050, "Wrong size on FBRPresetMap");
static_assert(offsetof(FBRPresetMap, Groups) == 0x000000, "Member 'FBRPresetMap::Groups' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Motor
// 0x0010 (0x0028 - 0x0018)
struct FBrickComponentData_Motor final : public FBrickComponentData_ConstraintJoint
{
public:
	bool                                          bEnabled;                                          // 0x0018(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_Motor) == 0x000008, "Wrong alignment on FBrickComponentData_Motor");
static_assert(sizeof(FBrickComponentData_Motor) == 0x000028, "Wrong size on FBrickComponentData_Motor");
static_assert(offsetof(FBrickComponentData_Motor, bEnabled) == 0x000018, "Member 'FBrickComponentData_Motor::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Motor, Speed) == 0x00001C, "Member 'FBrickComponentData_Motor::Speed' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Motor, Power) == 0x000020, "Member 'FBrickComponentData_Motor::Power' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_ApplyChangelistEntryToComponent
// 0x0028 (0x0040 - 0x0018)
struct FBrickAction_ApplyChangelistEntryToComponent final : public FBrickActionBase_SingleBrick
{
public:
	TWeakObjectPtr<class UBrickComponentTypeBase> ComponentType;                                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelistEntry      PropertyChangelistEntry;                           // 0x0020(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_ApplyChangelistEntryToComponent) == 0x000008, "Wrong alignment on FBrickAction_ApplyChangelistEntryToComponent");
static_assert(sizeof(FBrickAction_ApplyChangelistEntryToComponent) == 0x000040, "Wrong size on FBrickAction_ApplyChangelistEntryToComponent");
static_assert(offsetof(FBrickAction_ApplyChangelistEntryToComponent, ComponentType) == 0x000018, "Member 'FBrickAction_ApplyChangelistEntryToComponent::ComponentType' has a wrong offset!");
static_assert(offsetof(FBrickAction_ApplyChangelistEntryToComponent, PropertyChangelistEntry) == 0x000020, "Member 'FBrickAction_ApplyChangelistEntryToComponent::PropertyChangelistEntry' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Servo
// 0x0018 (0x0030 - 0x0018)
struct FBrickComponentData_Servo final : public FBrickComponentData_ConstraintJoint
{
public:
	bool                                          bEnabled;                                          // 0x0018(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetAngle;                                       // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveDamping;                                     // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceLimit;                                        // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopped;                                          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_Servo) == 0x000008, "Wrong alignment on FBrickComponentData_Servo");
static_assert(sizeof(FBrickComponentData_Servo) == 0x000030, "Wrong size on FBrickComponentData_Servo");
static_assert(offsetof(FBrickComponentData_Servo, bEnabled) == 0x000018, "Member 'FBrickComponentData_Servo::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Servo, TargetAngle) == 0x00001C, "Member 'FBrickComponentData_Servo::TargetAngle' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Servo, Power) == 0x000020, "Member 'FBrickComponentData_Servo::Power' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Servo, ActiveDamping) == 0x000024, "Member 'FBrickComponentData_Servo::ActiveDamping' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Servo, ForceLimit) == 0x000028, "Member 'FBrickComponentData_Servo::ForceLimit' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Servo, bStopped) == 0x00002C, "Member 'FBrickComponentData_Servo::bStopped' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentWireControl_Destination
// 0x0001 (0x0001 - 0x0000)
struct FBrickComponentWireControl_Destination final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentWireControl_Destination) == 0x000001, "Wrong alignment on FBrickComponentWireControl_Destination");
static_assert(sizeof(FBrickComponentWireControl_Destination) == 0x000001, "Wrong size on FBrickComponentWireControl_Destination");

// ScriptStruct Brickadia.BRMessagePackTestStruct_OneString
// 0x0010 (0x0010 - 0x0000)
struct FBRMessagePackTestStruct_OneString final
{
public:
	class FString                                 StringValue;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_OneString) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_OneString");
static_assert(sizeof(FBRMessagePackTestStruct_OneString) == 0x000010, "Wrong size on FBRMessagePackTestStruct_OneString");
static_assert(offsetof(FBRMessagePackTestStruct_OneString, StringValue) == 0x000000, "Member 'FBRMessagePackTestStruct_OneString::StringValue' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_Nested_ManyFields_Permute
// 0x00E8 (0x00E8 - 0x0000)
struct FBRMessagePackTestStruct_Nested_ManyFields_Permute final
{
public:
	class FString                                 ExtraStringValue;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRMessagePackTestStruct_ManyFields_Permute InnerStruct2;                                      // 0x0010(0x00C8)(NativeAccessSpecifierPublic)
	struct FBRMessagePackTestStruct_OneString     InnerStruct;                                       // 0x00D8(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_Nested_ManyFields_Permute) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_Nested_ManyFields_Permute");
static_assert(sizeof(FBRMessagePackTestStruct_Nested_ManyFields_Permute) == 0x0000E8, "Wrong size on FBRMessagePackTestStruct_Nested_ManyFields_Permute");
static_assert(offsetof(FBRMessagePackTestStruct_Nested_ManyFields_Permute, ExtraStringValue) == 0x000000, "Member 'FBRMessagePackTestStruct_Nested_ManyFields_Permute::ExtraStringValue' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_Nested_ManyFields_Permute, InnerStruct2) == 0x000010, "Member 'FBRMessagePackTestStruct_Nested_ManyFields_Permute::InnerStruct2' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_Nested_ManyFields_Permute, InnerStruct) == 0x0000D8, "Member 'FBRMessagePackTestStruct_Nested_ManyFields_Permute::InnerStruct' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Destination
// 0x0001 (0x0001 - 0x0000)
struct FBrickComponentData_Destination final : public FBrickComponentDataBase
{
public:
	struct FBrickComponentWireControl_Destination ThisDestination;                                   // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_Destination) == 0x000001, "Wrong alignment on FBrickComponentData_Destination");
static_assert(sizeof(FBrickComponentData_Destination) == 0x000001, "Wrong size on FBrickComponentData_Destination");
static_assert(offsetof(FBrickComponentData_Destination, ThisDestination) == 0x000000, "Member 'FBrickComponentData_Destination::ThisDestination' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Teleporter
// 0x000C (0x000C - 0x0000)
struct FBrickComponentData_Teleporter final : public FBrickComponentDataBase
{
public:
	TWeakObjectPtr<class AActor>                  ENTITY;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentWireControl_Destination Destination;                                       // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_Teleporter) == 0x000004, "Wrong alignment on FBrickComponentData_Teleporter");
static_assert(sizeof(FBrickComponentData_Teleporter) == 0x00000C, "Wrong size on FBrickComponentData_Teleporter");
static_assert(offsetof(FBrickComponentData_Teleporter, ENTITY) == 0x000000, "Member 'FBrickComponentData_Teleporter::ENTITY' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Teleporter, Destination) == 0x000008, "Member 'FBrickComponentData_Teleporter::Destination' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_RelativeTeleporter
// 0x000C (0x000C - 0x0000)
struct FBrickComponentData_RelativeTeleporter final : public FBrickComponentDataBase
{
public:
	TWeakObjectPtr<class AActor>                  ENTITY;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentWireControl_Destination Source;                                            // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComponentWireControl_Destination Destination;                                       // 0x0009(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_RelativeTeleporter) == 0x000004, "Wrong alignment on FBrickComponentData_RelativeTeleporter");
static_assert(sizeof(FBrickComponentData_RelativeTeleporter) == 0x00000C, "Wrong size on FBrickComponentData_RelativeTeleporter");
static_assert(offsetof(FBrickComponentData_RelativeTeleporter, ENTITY) == 0x000000, "Member 'FBrickComponentData_RelativeTeleporter::ENTITY' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_RelativeTeleporter, Source) == 0x000008, "Member 'FBrickComponentData_RelativeTeleporter::Source' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_RelativeTeleporter, Destination) == 0x000009, "Member 'FBrickComponentData_RelativeTeleporter::Destination' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_EntityGate_VectorAndRotation
// 0x0020 (0x0020 - 0x0000)
struct FBrickComponentData_EntityGate_VectorAndRotation final : public FBrickComponentDataBase
{
public:
	TWeakObjectPtr<class AActor>                  ENTITY;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Vector;                                            // 0x0008(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator3f                             Rotation;                                          // 0x0014(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_EntityGate_VectorAndRotation) == 0x000004, "Wrong alignment on FBrickComponentData_EntityGate_VectorAndRotation");
static_assert(sizeof(FBrickComponentData_EntityGate_VectorAndRotation) == 0x000020, "Wrong size on FBrickComponentData_EntityGate_VectorAndRotation");
static_assert(offsetof(FBrickComponentData_EntityGate_VectorAndRotation, ENTITY) == 0x000000, "Member 'FBrickComponentData_EntityGate_VectorAndRotation::ENTITY' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_VectorAndRotation, Vector) == 0x000008, "Member 'FBrickComponentData_EntityGate_VectorAndRotation::Vector' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_VectorAndRotation, Rotation) == 0x000014, "Member 'FBrickComponentData_EntityGate_VectorAndRotation::Rotation' has a wrong offset!");

// ScriptStruct Brickadia.BRToolPreviewTransformParameters
// 0x0018 (0x0018 - 0x0000)
struct FBRToolPreviewTransformParameters final
{
public:
	class UBrickGridComponent*                    TargetGrid;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRToolPreviewTransformParameters) == 0x000008, "Wrong alignment on FBRToolPreviewTransformParameters");
static_assert(sizeof(FBRToolPreviewTransformParameters) == 0x000018, "Wrong size on FBRToolPreviewTransformParameters");
static_assert(offsetof(FBRToolPreviewTransformParameters, TargetGrid) == 0x000000, "Member 'FBRToolPreviewTransformParameters::TargetGrid' has a wrong offset!");
static_assert(offsetof(FBRToolPreviewTransformParameters, Location) == 0x000008, "Member 'FBRToolPreviewTransformParameters::Location' has a wrong offset!");
static_assert(offsetof(FBRToolPreviewTransformParameters, Orientation) == 0x000014, "Member 'FBRToolPreviewTransformParameters::Orientation' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_EntityGate_Vector
// 0x0014 (0x0014 - 0x0000)
struct FBrickComponentData_EntityGate_Vector final : public FBrickComponentDataBase
{
public:
	TWeakObjectPtr<class AActor>                  ENTITY;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Vector;                                            // 0x0008(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_EntityGate_Vector) == 0x000004, "Wrong alignment on FBrickComponentData_EntityGate_Vector");
static_assert(sizeof(FBrickComponentData_EntityGate_Vector) == 0x000014, "Wrong size on FBrickComponentData_EntityGate_Vector");
static_assert(offsetof(FBrickComponentData_EntityGate_Vector, ENTITY) == 0x000000, "Member 'FBrickComponentData_EntityGate_Vector::ENTITY' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_Vector, Vector) == 0x000008, "Member 'FBrickComponentData_EntityGate_Vector::Vector' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_EntityGate_Rotation
// 0x0014 (0x0014 - 0x0000)
struct FBrickComponentData_EntityGate_Rotation final : public FBrickComponentDataBase
{
public:
	TWeakObjectPtr<class AActor>                  ENTITY;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator3f                             Rotation;                                          // 0x0008(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_EntityGate_Rotation) == 0x000004, "Wrong alignment on FBrickComponentData_EntityGate_Rotation");
static_assert(sizeof(FBrickComponentData_EntityGate_Rotation) == 0x000014, "Wrong size on FBrickComponentData_EntityGate_Rotation");
static_assert(offsetof(FBrickComponentData_EntityGate_Rotation, ENTITY) == 0x000000, "Member 'FBrickComponentData_EntityGate_Rotation::ENTITY' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_Rotation, Rotation) == 0x000008, "Member 'FBrickComponentData_EntityGate_Rotation::Rotation' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_ApplyChangelistEntryToEntity
// 0x0028 (0x0040 - 0x0018)
struct FBrickAction_ApplyChangelistEntryToEntity final : public FBrickActionBase_SingleEntity
{
public:
	class UBREntityTypeBase*                      EntityType;                                        // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelistEntry      PropertyChangelistEntry;                           // 0x0020(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_ApplyChangelistEntryToEntity) == 0x000008, "Wrong alignment on FBrickAction_ApplyChangelistEntryToEntity");
static_assert(sizeof(FBrickAction_ApplyChangelistEntryToEntity) == 0x000040, "Wrong size on FBrickAction_ApplyChangelistEntryToEntity");
static_assert(offsetof(FBrickAction_ApplyChangelistEntryToEntity, EntityType) == 0x000018, "Member 'FBrickAction_ApplyChangelistEntryToEntity::EntityType' has a wrong offset!");
static_assert(offsetof(FBrickAction_ApplyChangelistEntryToEntity, PropertyChangelistEntry) == 0x000020, "Member 'FBrickAction_ApplyChangelistEntryToEntity::PropertyChangelistEntry' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_EntityGate_PlayAudioOn
// 0x0028 (0x0028 - 0x0000)
struct FBrickComponentData_EntityGate_PlayAudioOn final : public FBrickComponentDataBase
{
public:
	TWeakObjectPtr<class AActor>                  ENTITY;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickOneShotAudioDescriptor*           AudioDescriptor;                                   // 0x0008(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0014(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0018(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpatialization;                                   // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_EntityGate_PlayAudioOn) == 0x000008, "Wrong alignment on FBrickComponentData_EntityGate_PlayAudioOn");
static_assert(sizeof(FBrickComponentData_EntityGate_PlayAudioOn) == 0x000028, "Wrong size on FBrickComponentData_EntityGate_PlayAudioOn");
static_assert(offsetof(FBrickComponentData_EntityGate_PlayAudioOn, ENTITY) == 0x000000, "Member 'FBrickComponentData_EntityGate_PlayAudioOn::ENTITY' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_PlayAudioOn, AudioDescriptor) == 0x000008, "Member 'FBrickComponentData_EntityGate_PlayAudioOn::AudioDescriptor' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_PlayAudioOn, VolumeMultiplier) == 0x000010, "Member 'FBrickComponentData_EntityGate_PlayAudioOn::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_PlayAudioOn, PitchMultiplier) == 0x000014, "Member 'FBrickComponentData_EntityGate_PlayAudioOn::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_PlayAudioOn, InnerRadius) == 0x000018, "Member 'FBrickComponentData_EntityGate_PlayAudioOn::InnerRadius' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_PlayAudioOn, MaxDistance) == 0x00001C, "Member 'FBrickComponentData_EntityGate_PlayAudioOn::MaxDistance' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_EntityGate_PlayAudioOn, bSpatialization) == 0x000020, "Member 'FBrickComponentData_EntityGate_PlayAudioOn::bSpatialization' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateUnary_BoolBool
// 0x0002 (0x0002 - 0x0000)
struct FBrickComponentData_GateUnary_BoolBool final : public FBrickComponentDataBase
{
public:
	bool                                          bInput;                                            // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutput;                                           // 0x0001(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_GateUnary_BoolBool) == 0x000001, "Wrong alignment on FBrickComponentData_GateUnary_BoolBool");
static_assert(sizeof(FBrickComponentData_GateUnary_BoolBool) == 0x000002, "Wrong size on FBrickComponentData_GateUnary_BoolBool");
static_assert(offsetof(FBrickComponentData_GateUnary_BoolBool, bInput) == 0x000000, "Member 'FBrickComponentData_GateUnary_BoolBool::bInput' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateUnary_BoolBool, bOutput) == 0x000001, "Member 'FBrickComponentData_GateUnary_BoolBool::bOutput' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateUnary_FloatFloat
// 0x0010 (0x0010 - 0x0000)
struct FBrickComponentData_GateUnary_FloatFloat final : public FBrickComponentDataBase
{
public:
	double                                        Input;                                             // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Output;                                            // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_GateUnary_FloatFloat) == 0x000008, "Wrong alignment on FBrickComponentData_GateUnary_FloatFloat");
static_assert(sizeof(FBrickComponentData_GateUnary_FloatFloat) == 0x000010, "Wrong size on FBrickComponentData_GateUnary_FloatFloat");
static_assert(offsetof(FBrickComponentData_GateUnary_FloatFloat, Input) == 0x000000, "Member 'FBrickComponentData_GateUnary_FloatFloat::Input' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateUnary_FloatFloat, Output) == 0x000008, "Member 'FBrickComponentData_GateUnary_FloatFloat::Output' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateBinary_BoolBool
// 0x0003 (0x0003 - 0x0000)
struct FBrickComponentData_GateBinary_BoolBool final : public FBrickComponentDataBase
{
public:
	bool                                          bInputA;                                           // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInputB;                                           // 0x0001(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutput;                                           // 0x0002(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_GateBinary_BoolBool) == 0x000001, "Wrong alignment on FBrickComponentData_GateBinary_BoolBool");
static_assert(sizeof(FBrickComponentData_GateBinary_BoolBool) == 0x000003, "Wrong size on FBrickComponentData_GateBinary_BoolBool");
static_assert(offsetof(FBrickComponentData_GateBinary_BoolBool, bInputA) == 0x000000, "Member 'FBrickComponentData_GateBinary_BoolBool::bInputA' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateBinary_BoolBool, bInputB) == 0x000001, "Member 'FBrickComponentData_GateBinary_BoolBool::bInputB' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateBinary_BoolBool, bOutput) == 0x000002, "Member 'FBrickComponentData_GateBinary_BoolBool::bOutput' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateBinary_IntBool
// 0x0018 (0x0018 - 0x0000)
struct FBrickComponentData_GateBinary_IntBool final : public FBrickComponentDataBase
{
public:
	int64                                         InputA;                                            // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InputB;                                            // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutput;                                           // 0x0010(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_GateBinary_IntBool) == 0x000008, "Wrong alignment on FBrickComponentData_GateBinary_IntBool");
static_assert(sizeof(FBrickComponentData_GateBinary_IntBool) == 0x000018, "Wrong size on FBrickComponentData_GateBinary_IntBool");
static_assert(offsetof(FBrickComponentData_GateBinary_IntBool, InputA) == 0x000000, "Member 'FBrickComponentData_GateBinary_IntBool::InputA' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateBinary_IntBool, InputB) == 0x000008, "Member 'FBrickComponentData_GateBinary_IntBool::InputB' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateBinary_IntBool, bOutput) == 0x000010, "Member 'FBrickComponentData_GateBinary_IntBool::bOutput' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateBinary_FloatBool
// 0x0018 (0x0018 - 0x0000)
struct FBrickComponentData_GateBinary_FloatBool final : public FBrickComponentDataBase
{
public:
	double                                        InputA;                                            // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InputB;                                            // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutput;                                           // 0x0010(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_GateBinary_FloatBool) == 0x000008, "Wrong alignment on FBrickComponentData_GateBinary_FloatBool");
static_assert(sizeof(FBrickComponentData_GateBinary_FloatBool) == 0x000018, "Wrong size on FBrickComponentData_GateBinary_FloatBool");
static_assert(offsetof(FBrickComponentData_GateBinary_FloatBool, InputA) == 0x000000, "Member 'FBrickComponentData_GateBinary_FloatBool::InputA' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateBinary_FloatBool, InputB) == 0x000008, "Member 'FBrickComponentData_GateBinary_FloatBool::InputB' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateBinary_FloatBool, bOutput) == 0x000010, "Member 'FBrickComponentData_GateBinary_FloatBool::bOutput' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateBlendFloat
// 0x0008 (0x0020 - 0x0018)
struct FBrickComponentData_GateBlendFloat final : public FBrickComponentData_GateBinary_FloatFloat
{
public:
	double                                        Blend;                                             // 0x0018(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_GateBlendFloat) == 0x000008, "Wrong alignment on FBrickComponentData_GateBlendFloat");
static_assert(sizeof(FBrickComponentData_GateBlendFloat) == 0x000020, "Wrong size on FBrickComponentData_GateBlendFloat");
static_assert(offsetof(FBrickComponentData_GateBlendFloat, Blend) == 0x000018, "Member 'FBrickComponentData_GateBlendFloat::Blend' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_ConstantBool
// 0x0001 (0x0001 - 0x0000)
struct FBrickComponentData_ConstantBool final : public FBrickComponentDataBase
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_ConstantBool) == 0x000001, "Wrong alignment on FBrickComponentData_ConstantBool");
static_assert(sizeof(FBrickComponentData_ConstantBool) == 0x000001, "Wrong size on FBrickComponentData_ConstantBool");
static_assert(offsetof(FBrickComponentData_ConstantBool, bValue) == 0x000000, "Member 'FBrickComponentData_ConstantBool::bValue' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_ConstantInt
// 0x0008 (0x0008 - 0x0000)
struct FBrickComponentData_ConstantInt final : public FBrickComponentDataBase
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_ConstantInt) == 0x000008, "Wrong alignment on FBrickComponentData_ConstantInt");
static_assert(sizeof(FBrickComponentData_ConstantInt) == 0x000008, "Wrong size on FBrickComponentData_ConstantInt");
static_assert(offsetof(FBrickComponentData_ConstantInt, Value) == 0x000000, "Member 'FBrickComponentData_ConstantInt::Value' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_ConstantFloat
// 0x0008 (0x0008 - 0x0000)
struct FBrickComponentData_ConstantFloat final : public FBrickComponentDataBase
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_ConstantFloat) == 0x000008, "Wrong alignment on FBrickComponentData_ConstantFloat");
static_assert(sizeof(FBrickComponentData_ConstantFloat) == 0x000008, "Wrong size on FBrickComponentData_ConstantFloat");
static_assert(offsetof(FBrickComponentData_ConstantFloat, Value) == 0x000000, "Member 'FBrickComponentData_ConstantFloat::Value' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateEdgeDetector
// 0x000C (0x000C - 0x0000)
struct FBrickComponentData_GateEdgeDetector final : public FBrickComponentDataBase
{
public:
	float                                         Input;                                             // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPulseOnRisingEdge;                                // 0x0004(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPulseOnFallingEdge;                               // 0x0005(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputLast;                                         // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_GateEdgeDetector) == 0x000004, "Wrong alignment on FBrickComponentData_GateEdgeDetector");
static_assert(sizeof(FBrickComponentData_GateEdgeDetector) == 0x00000C, "Wrong size on FBrickComponentData_GateEdgeDetector");
static_assert(offsetof(FBrickComponentData_GateEdgeDetector, Input) == 0x000000, "Member 'FBrickComponentData_GateEdgeDetector::Input' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateEdgeDetector, bPulseOnRisingEdge) == 0x000004, "Member 'FBrickComponentData_GateEdgeDetector::bPulseOnRisingEdge' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateEdgeDetector, bPulseOnFallingEdge) == 0x000005, "Member 'FBrickComponentData_GateEdgeDetector::bPulseOnFallingEdge' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateEdgeDetector, InputLast) == 0x000008, "Member 'FBrickComponentData_GateEdgeDetector::InputLast' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateTimer
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FBrickComponentData_GateTimer final : public FBrickComponentDataBase
{
public:
	bool                                          bInput;                                            // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutput;                                           // 0x0001(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OnDuration;                                        // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffDuration;                                       // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOldInput;                                         // 0x000C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrentAction;                                    // 0x000D(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCurrentAction;                                 // 0x000E(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Saved_RemainingTime;                               // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasQueuedAction;                                  // 0x0014(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQueuedAction;                                     // 0x0015(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         QueuedDuration;                                    // 0x0018(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0xC];                                       // 0x001C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_GateTimer) == 0x000008, "Wrong alignment on FBrickComponentData_GateTimer");
static_assert(sizeof(FBrickComponentData_GateTimer) == 0x000028, "Wrong size on FBrickComponentData_GateTimer");
static_assert(offsetof(FBrickComponentData_GateTimer, bInput) == 0x000000, "Member 'FBrickComponentData_GateTimer::bInput' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer, bOutput) == 0x000001, "Member 'FBrickComponentData_GateTimer::bOutput' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer, OnDuration) == 0x000004, "Member 'FBrickComponentData_GateTimer::OnDuration' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer, OffDuration) == 0x000008, "Member 'FBrickComponentData_GateTimer::OffDuration' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer, bOldInput) == 0x00000C, "Member 'FBrickComponentData_GateTimer::bOldInput' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer, bCurrentAction) == 0x00000D, "Member 'FBrickComponentData_GateTimer::bCurrentAction' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer, bHasCurrentAction) == 0x00000E, "Member 'FBrickComponentData_GateTimer::bHasCurrentAction' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer, Saved_RemainingTime) == 0x000010, "Member 'FBrickComponentData_GateTimer::Saved_RemainingTime' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer, bHasQueuedAction) == 0x000014, "Member 'FBrickComponentData_GateTimer::bHasQueuedAction' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer, bQueuedAction) == 0x000015, "Member 'FBrickComponentData_GateTimer::bQueuedAction' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer, QueuedDuration) == 0x000018, "Member 'FBrickComponentData_GateTimer::QueuedDuration' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_GateTimer_Tick
// 0x001C (0x001C - 0x0000)
struct FBrickComponentData_GateTimer_Tick final : public FBrickComponentDataBase
{
public:
	bool                                          bInput;                                            // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutput;                                           // 0x0001(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OnTicks;                                           // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffTicks;                                          // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOldInput;                                         // 0x000C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrentAction;                                    // 0x000D(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentElapsed;                                    // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasQueuedAction;                                  // 0x0014(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQueuedAction;                                     // 0x0015(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QueuedTicks;                                       // 0x0018(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_GateTimer_Tick) == 0x000004, "Wrong alignment on FBrickComponentData_GateTimer_Tick");
static_assert(sizeof(FBrickComponentData_GateTimer_Tick) == 0x00001C, "Wrong size on FBrickComponentData_GateTimer_Tick");
static_assert(offsetof(FBrickComponentData_GateTimer_Tick, bInput) == 0x000000, "Member 'FBrickComponentData_GateTimer_Tick::bInput' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer_Tick, bOutput) == 0x000001, "Member 'FBrickComponentData_GateTimer_Tick::bOutput' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer_Tick, OnTicks) == 0x000004, "Member 'FBrickComponentData_GateTimer_Tick::OnTicks' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer_Tick, OffTicks) == 0x000008, "Member 'FBrickComponentData_GateTimer_Tick::OffTicks' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer_Tick, bOldInput) == 0x00000C, "Member 'FBrickComponentData_GateTimer_Tick::bOldInput' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer_Tick, bCurrentAction) == 0x00000D, "Member 'FBrickComponentData_GateTimer_Tick::bCurrentAction' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer_Tick, CurrentElapsed) == 0x000010, "Member 'FBrickComponentData_GateTimer_Tick::CurrentElapsed' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer_Tick, bHasQueuedAction) == 0x000014, "Member 'FBrickComponentData_GateTimer_Tick::bHasQueuedAction' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer_Tick, bQueuedAction) == 0x000015, "Member 'FBrickComponentData_GateTimer_Tick::bQueuedAction' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_GateTimer_Tick, QueuedTicks) == 0x000018, "Member 'FBrickComponentData_GateTimer_Tick::QueuedTicks' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Rerouter
// 0x0002 (0x0002 - 0x0000)
struct FBrickComponentData_Rerouter final : public FBrickComponentDataBase
{
public:
	struct FBrickComponentWirePortStub_Reroute    RER_Input;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComponentWirePortStub_Reroute    RER_Output;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_Rerouter) == 0x000001, "Wrong alignment on FBrickComponentData_Rerouter");
static_assert(sizeof(FBrickComponentData_Rerouter) == 0x000002, "Wrong size on FBrickComponentData_Rerouter");
static_assert(offsetof(FBrickComponentData_Rerouter, RER_Input) == 0x000000, "Member 'FBrickComponentData_Rerouter::RER_Input' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Rerouter, RER_Output) == 0x000001, "Member 'FBrickComponentData_Rerouter::RER_Output' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentWirePlayerInput
// 0x0001 (0x0001 - 0x0000)
struct FBrickComponentWirePlayerInput final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentWirePlayerInput) == 0x000001, "Wrong alignment on FBrickComponentWirePlayerInput");
static_assert(sizeof(FBrickComponentWirePlayerInput) == 0x000001, "Wrong size on FBrickComponentWirePlayerInput");

// ScriptStruct Brickadia.BrickComponentData_Seat
// 0x0010 (0x0028 - 0x0018)
struct FBrickComponentData_Seat final : public FBrickComponentData_InteractableBase
{
public:
	class ABRCharacter*                           SittingCharacter;                                  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentWirePlayerInput         PlayerInput;                                       // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_Seat) == 0x000008, "Wrong alignment on FBrickComponentData_Seat");
static_assert(sizeof(FBrickComponentData_Seat) == 0x000028, "Wrong size on FBrickComponentData_Seat");
static_assert(offsetof(FBrickComponentData_Seat, SittingCharacter) == 0x000018, "Member 'FBrickComponentData_Seat::SittingCharacter' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Seat, PlayerInput) == 0x000020, "Member 'FBrickComponentData_Seat::PlayerInput' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_ServoSlider
// 0x0018 (0x0038 - 0x0020)
struct FBrickComponentData_ServoSlider final : public FBrickComponentData_Slider
{
public:
	bool                                          bEnabled;                                          // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetPosition;                                    // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopSpeed;                                          // 0x002C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Exponent;                                          // 0x0030(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopped;                                          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_ServoSlider) == 0x000008, "Wrong alignment on FBrickComponentData_ServoSlider");
static_assert(sizeof(FBrickComponentData_ServoSlider) == 0x000038, "Wrong size on FBrickComponentData_ServoSlider");
static_assert(offsetof(FBrickComponentData_ServoSlider, bEnabled) == 0x000020, "Member 'FBrickComponentData_ServoSlider::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ServoSlider, TargetPosition) == 0x000024, "Member 'FBrickComponentData_ServoSlider::TargetPosition' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ServoSlider, Power) == 0x000028, "Member 'FBrickComponentData_ServoSlider::Power' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ServoSlider, TopSpeed) == 0x00002C, "Member 'FBrickComponentData_ServoSlider::TopSpeed' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ServoSlider, Exponent) == 0x000030, "Member 'FBrickComponentData_ServoSlider::Exponent' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ServoSlider, bStopped) == 0x000034, "Member 'FBrickComponentData_ServoSlider::bStopped' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_OldServoSlider
// 0x0018 (0x0038 - 0x0020)
struct FBrickComponentData_OldServoSlider final : public FBrickComponentData_Slider
{
public:
	bool                                          bEnabled;                                          // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetPosition;                                    // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveDamping;                                     // 0x002C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceLimit;                                        // 0x0030(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopped;                                          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_OldServoSlider) == 0x000008, "Wrong alignment on FBrickComponentData_OldServoSlider");
static_assert(sizeof(FBrickComponentData_OldServoSlider) == 0x000038, "Wrong size on FBrickComponentData_OldServoSlider");
static_assert(offsetof(FBrickComponentData_OldServoSlider, bEnabled) == 0x000020, "Member 'FBrickComponentData_OldServoSlider::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OldServoSlider, TargetPosition) == 0x000024, "Member 'FBrickComponentData_OldServoSlider::TargetPosition' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OldServoSlider, Power) == 0x000028, "Member 'FBrickComponentData_OldServoSlider::Power' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OldServoSlider, ActiveDamping) == 0x00002C, "Member 'FBrickComponentData_OldServoSlider::ActiveDamping' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OldServoSlider, ForceLimit) == 0x000030, "Member 'FBrickComponentData_OldServoSlider::ForceLimit' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OldServoSlider, bStopped) == 0x000034, "Member 'FBrickComponentData_OldServoSlider::bStopped' has a wrong offset!");

// ScriptStruct Brickadia.BrickWheelEngineUpdateContext
// 0x0110 (0x0110 - 0x0000)
struct FBrickWheelEngineUpdateContext final
{
public:
	struct FTransform                             WorldToEngine;                                     // 0x0000(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             EngineToWorld;                                     // 0x0060(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   SteeringBox;                                       // 0x00C0(0x0038)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        DeltaTime;                                         // 0x00F8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Drive;                                             // 0x0100(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Steer;                                             // 0x0104(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAccelerating;                                   // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBrake;                                            // 0x0109(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickWheelEngineUpdateContext) == 0x000010, "Wrong alignment on FBrickWheelEngineUpdateContext");
static_assert(sizeof(FBrickWheelEngineUpdateContext) == 0x000110, "Wrong size on FBrickWheelEngineUpdateContext");
static_assert(offsetof(FBrickWheelEngineUpdateContext, WorldToEngine) == 0x000000, "Member 'FBrickWheelEngineUpdateContext::WorldToEngine' has a wrong offset!");
static_assert(offsetof(FBrickWheelEngineUpdateContext, EngineToWorld) == 0x000060, "Member 'FBrickWheelEngineUpdateContext::EngineToWorld' has a wrong offset!");
static_assert(offsetof(FBrickWheelEngineUpdateContext, SteeringBox) == 0x0000C0, "Member 'FBrickWheelEngineUpdateContext::SteeringBox' has a wrong offset!");
static_assert(offsetof(FBrickWheelEngineUpdateContext, DeltaTime) == 0x0000F8, "Member 'FBrickWheelEngineUpdateContext::DeltaTime' has a wrong offset!");
static_assert(offsetof(FBrickWheelEngineUpdateContext, Drive) == 0x000100, "Member 'FBrickWheelEngineUpdateContext::Drive' has a wrong offset!");
static_assert(offsetof(FBrickWheelEngineUpdateContext, Steer) == 0x000104, "Member 'FBrickWheelEngineUpdateContext::Steer' has a wrong offset!");
static_assert(offsetof(FBrickWheelEngineUpdateContext, bIsAccelerating) == 0x000108, "Member 'FBrickWheelEngineUpdateContext::bIsAccelerating' has a wrong offset!");
static_assert(offsetof(FBrickWheelEngineUpdateContext, bBrake) == 0x000109, "Member 'FBrickWheelEngineUpdateContext::bBrake' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_WheelEngine
// 0x0068 (0x0068 - 0x0000)
struct FBrickComponentData_WheelEngine final : public FBrickComponentDataBase
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableManualControl;                              // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualInput_Drive;                                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualInput_Steer;                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManualInput_Brake;                                // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentWirePlayerInput         PlayerInput;                                       // 0x000D(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComponentWireControl_DriveAndSteer Control_DriveAndSteer;                             // 0x000E(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DriveInterpSpeed;                                  // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriveSpeed;                                        // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriveAcceleratingPowerMultiplier;                  // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriveBrakingPowerMultiplier;                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriveDampingMultiplier;                            // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerPowerMultiplier;                              // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerInterpSpeed;                                  // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerLimitDegree;                                  // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterOfSteering;                                  // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTankSteering;                                     // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TankSteerSpeedMultiplier;                          // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AudioComponentInstance;                            // 0x0040(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickWheelEngineAudioDescriptor*       AudioDescriptor;                                   // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentSteer;                                      // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentDrive;                                      // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AudioDrive;                                        // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEngineOn;                                         // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEngineLastOn;                                     // 0x0061(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitialTicked;                                    // 0x0062(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_WheelEngine) == 0x000008, "Wrong alignment on FBrickComponentData_WheelEngine");
static_assert(sizeof(FBrickComponentData_WheelEngine) == 0x000068, "Wrong size on FBrickComponentData_WheelEngine");
static_assert(offsetof(FBrickComponentData_WheelEngine, bEnabled) == 0x000000, "Member 'FBrickComponentData_WheelEngine::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, bEnableManualControl) == 0x000001, "Member 'FBrickComponentData_WheelEngine::bEnableManualControl' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, ManualInput_Drive) == 0x000004, "Member 'FBrickComponentData_WheelEngine::ManualInput_Drive' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, ManualInput_Steer) == 0x000008, "Member 'FBrickComponentData_WheelEngine::ManualInput_Steer' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, bManualInput_Brake) == 0x00000C, "Member 'FBrickComponentData_WheelEngine::bManualInput_Brake' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, PlayerInput) == 0x00000D, "Member 'FBrickComponentData_WheelEngine::PlayerInput' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, Control_DriveAndSteer) == 0x00000E, "Member 'FBrickComponentData_WheelEngine::Control_DriveAndSteer' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, DriveInterpSpeed) == 0x000010, "Member 'FBrickComponentData_WheelEngine::DriveInterpSpeed' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, DriveSpeed) == 0x000014, "Member 'FBrickComponentData_WheelEngine::DriveSpeed' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, DriveAcceleratingPowerMultiplier) == 0x000018, "Member 'FBrickComponentData_WheelEngine::DriveAcceleratingPowerMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, DriveBrakingPowerMultiplier) == 0x00001C, "Member 'FBrickComponentData_WheelEngine::DriveBrakingPowerMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, DriveDampingMultiplier) == 0x000020, "Member 'FBrickComponentData_WheelEngine::DriveDampingMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, SteerPowerMultiplier) == 0x000024, "Member 'FBrickComponentData_WheelEngine::SteerPowerMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, SteerInterpSpeed) == 0x000028, "Member 'FBrickComponentData_WheelEngine::SteerInterpSpeed' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, SteerLimitDegree) == 0x00002C, "Member 'FBrickComponentData_WheelEngine::SteerLimitDegree' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, CenterOfSteering) == 0x000030, "Member 'FBrickComponentData_WheelEngine::CenterOfSteering' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, bTankSteering) == 0x000034, "Member 'FBrickComponentData_WheelEngine::bTankSteering' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, TankSteerSpeedMultiplier) == 0x000038, "Member 'FBrickComponentData_WheelEngine::TankSteerSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, AudioComponentInstance) == 0x000040, "Member 'FBrickComponentData_WheelEngine::AudioComponentInstance' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, AudioDescriptor) == 0x000048, "Member 'FBrickComponentData_WheelEngine::AudioDescriptor' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, CurrentSteer) == 0x000050, "Member 'FBrickComponentData_WheelEngine::CurrentSteer' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, CurrentDrive) == 0x000054, "Member 'FBrickComponentData_WheelEngine::CurrentDrive' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, AudioDrive) == 0x000058, "Member 'FBrickComponentData_WheelEngine::AudioDrive' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, bEngineOn) == 0x000060, "Member 'FBrickComponentData_WheelEngine::bEngineOn' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, bEngineLastOn) == 0x000061, "Member 'FBrickComponentData_WheelEngine::bEngineLastOn' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_WheelEngine, bInitialTicked) == 0x000062, "Member 'FBrickComponentData_WheelEngine::bInitialTicked' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_ItemSpawn
// 0x0058 (0x0058 - 0x0000)
struct FBrickComponentData_ItemSpawn final : public FBrickComponentDataBase
{
public:
	TSubclassOf<class ABRPickupBase>              PickupClass;                                       // 0x0000(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPickupEnabled;                                    // 0x0008(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPickupRespawnOnMinigameReset;                     // 0x0009(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PickupMinigameResetRespawnDelay;                   // 0x000C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPickupAutoDisableOnPickup;                        // 0x0010(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PickupRespawnTime;                                 // 0x0014(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               PickupOffsetDirection;                             // 0x0018(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PickupOffsetDistance;                              // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator3f                             PickupRotation;                                    // 0x0020(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PickupScale;                                       // 0x002C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPickupAnimationEnabled;                           // 0x0030(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAxis                                    PickupAnimationAxis;                               // 0x0031(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPickupAnimationAxisLocal;                         // 0x0032(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PickupSpinSpeed;                                   // 0x0034(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PickupBobSpeed;                                    // 0x0038(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PickupBobHeight;                                   // 0x003C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PickupAnimationPhase;                              // 0x0040(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABRPickupBase*                          PickupInstance;                                    // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPickupEnabled;                                // 0x0050(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_ItemSpawn) == 0x000008, "Wrong alignment on FBrickComponentData_ItemSpawn");
static_assert(sizeof(FBrickComponentData_ItemSpawn) == 0x000058, "Wrong size on FBrickComponentData_ItemSpawn");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupClass) == 0x000000, "Member 'FBrickComponentData_ItemSpawn::PickupClass' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, bPickupEnabled) == 0x000008, "Member 'FBrickComponentData_ItemSpawn::bPickupEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, bPickupRespawnOnMinigameReset) == 0x000009, "Member 'FBrickComponentData_ItemSpawn::bPickupRespawnOnMinigameReset' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupMinigameResetRespawnDelay) == 0x00000C, "Member 'FBrickComponentData_ItemSpawn::PickupMinigameResetRespawnDelay' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, bPickupAutoDisableOnPickup) == 0x000010, "Member 'FBrickComponentData_ItemSpawn::bPickupAutoDisableOnPickup' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupRespawnTime) == 0x000014, "Member 'FBrickComponentData_ItemSpawn::PickupRespawnTime' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupOffsetDirection) == 0x000018, "Member 'FBrickComponentData_ItemSpawn::PickupOffsetDirection' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupOffsetDistance) == 0x00001C, "Member 'FBrickComponentData_ItemSpawn::PickupOffsetDistance' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupRotation) == 0x000020, "Member 'FBrickComponentData_ItemSpawn::PickupRotation' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupScale) == 0x00002C, "Member 'FBrickComponentData_ItemSpawn::PickupScale' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, bPickupAnimationEnabled) == 0x000030, "Member 'FBrickComponentData_ItemSpawn::bPickupAnimationEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupAnimationAxis) == 0x000031, "Member 'FBrickComponentData_ItemSpawn::PickupAnimationAxis' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, bPickupAnimationAxisLocal) == 0x000032, "Member 'FBrickComponentData_ItemSpawn::bPickupAnimationAxisLocal' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupSpinSpeed) == 0x000034, "Member 'FBrickComponentData_ItemSpawn::PickupSpinSpeed' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupBobSpeed) == 0x000038, "Member 'FBrickComponentData_ItemSpawn::PickupBobSpeed' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupBobHeight) == 0x00003C, "Member 'FBrickComponentData_ItemSpawn::PickupBobHeight' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupAnimationPhase) == 0x000040, "Member 'FBrickComponentData_ItemSpawn::PickupAnimationPhase' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, PickupInstance) == 0x000048, "Member 'FBrickComponentData_ItemSpawn::PickupInstance' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_ItemSpawn, bShowPickupEnabled) == 0x000050, "Member 'FBrickComponentData_ItemSpawn::bShowPickupEnabled' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_OneShotAudioEmitter
// 0x0028 (0x0028 - 0x0000)
struct FBrickComponentData_OneShotAudioEmitter final : public FBrickComponentDataBase
{
public:
	bool                                          bPlay;                                             // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayLast;                                         // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickOneShotAudioDescriptor*           AudioDescriptor;                                   // 0x0008(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0014(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0018(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpatialization;                                   // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_OneShotAudioEmitter) == 0x000008, "Wrong alignment on FBrickComponentData_OneShotAudioEmitter");
static_assert(sizeof(FBrickComponentData_OneShotAudioEmitter) == 0x000028, "Wrong size on FBrickComponentData_OneShotAudioEmitter");
static_assert(offsetof(FBrickComponentData_OneShotAudioEmitter, bPlay) == 0x000000, "Member 'FBrickComponentData_OneShotAudioEmitter::bPlay' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OneShotAudioEmitter, bPlayLast) == 0x000001, "Member 'FBrickComponentData_OneShotAudioEmitter::bPlayLast' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OneShotAudioEmitter, AudioDescriptor) == 0x000008, "Member 'FBrickComponentData_OneShotAudioEmitter::AudioDescriptor' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OneShotAudioEmitter, VolumeMultiplier) == 0x000010, "Member 'FBrickComponentData_OneShotAudioEmitter::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OneShotAudioEmitter, PitchMultiplier) == 0x000014, "Member 'FBrickComponentData_OneShotAudioEmitter::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OneShotAudioEmitter, InnerRadius) == 0x000018, "Member 'FBrickComponentData_OneShotAudioEmitter::InnerRadius' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OneShotAudioEmitter, MaxDistance) == 0x00001C, "Member 'FBrickComponentData_OneShotAudioEmitter::MaxDistance' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_OneShotAudioEmitter, bSpatialization) == 0x000020, "Member 'FBrickComponentData_OneShotAudioEmitter::bSpatialization' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_PointLight
// 0x0008 (0x0028 - 0x0020)
struct FBrickComponentData_PointLight final : public FBrickComponentData_LightBase
{
public:
	bool                                          bMatchBrickShape;                                  // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_PointLight) == 0x000008, "Wrong alignment on FBrickComponentData_PointLight");
static_assert(sizeof(FBrickComponentData_PointLight) == 0x000028, "Wrong size on FBrickComponentData_PointLight");
static_assert(offsetof(FBrickComponentData_PointLight, bMatchBrickShape) == 0x000020, "Member 'FBrickComponentData_PointLight::bMatchBrickShape' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_SpotLight
// 0x0018 (0x0038 - 0x0020)
struct FBrickComponentData_SpotLight final : public FBrickComponentData_LightBase
{
public:
	struct FRotator3f                             Rotation;                                          // 0x0020(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InnerConeAngle;                                    // 0x002C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x0030(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComponentData_SpotLight) == 0x000008, "Wrong alignment on FBrickComponentData_SpotLight");
static_assert(sizeof(FBrickComponentData_SpotLight) == 0x000038, "Wrong size on FBrickComponentData_SpotLight");
static_assert(offsetof(FBrickComponentData_SpotLight, Rotation) == 0x000020, "Member 'FBrickComponentData_SpotLight::Rotation' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_SpotLight, InnerConeAngle) == 0x00002C, "Member 'FBrickComponentData_SpotLight::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_SpotLight, OuterConeAngle) == 0x000030, "Member 'FBrickComponentData_SpotLight::OuterConeAngle' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentData_Switch
// 0x0018 (0x0030 - 0x0018)
struct FBrickComponentData_Switch final : public FBrickComponentData_InteractableBase
{
public:
	bool                                          bEnabled;                                          // 0x0018(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickOneShotAudioDescriptor*           InteractSound;                                     // 0x0020(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ABRCharacter>            Character;                                         // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentData_Switch) == 0x000008, "Wrong alignment on FBrickComponentData_Switch");
static_assert(sizeof(FBrickComponentData_Switch) == 0x000030, "Wrong size on FBrickComponentData_Switch");
static_assert(offsetof(FBrickComponentData_Switch, bEnabled) == 0x000018, "Member 'FBrickComponentData_Switch::bEnabled' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Switch, InteractSound) == 0x000020, "Member 'FBrickComponentData_Switch::InteractSound' has a wrong offset!");
static_assert(offsetof(FBrickComponentData_Switch, Character) == 0x000028, "Member 'FBrickComponentData_Switch::Character' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentTemplate
// 0x0020 (0x0020 - 0x0000)
struct FBrickComponentTemplate final
{
public:
	int32                                         BrickIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UBrickComponentTypeBase> ComponentType;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInspectorPropertyChangelist           Changelist;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentTemplate) == 0x000008, "Wrong alignment on FBrickComponentTemplate");
static_assert(sizeof(FBrickComponentTemplate) == 0x000020, "Wrong size on FBrickComponentTemplate");
static_assert(offsetof(FBrickComponentTemplate, BrickIndex) == 0x000000, "Member 'FBrickComponentTemplate::BrickIndex' has a wrong offset!");
static_assert(offsetof(FBrickComponentTemplate, ComponentType) == 0x000004, "Member 'FBrickComponentTemplate::ComponentType' has a wrong offset!");
static_assert(offsetof(FBrickComponentTemplate, Changelist) == 0x000010, "Member 'FBrickComponentTemplate::Changelist' has a wrong offset!");

// ScriptStruct Brickadia.BrickHandleNetSerializerConfig
// 0x0000 (0x0010 - 0x0010)
struct FBrickHandleNetSerializerConfig final : public FNetSerializerConfig
{
};
static_assert(alignof(FBrickHandleNetSerializerConfig) == 0x000008, "Wrong alignment on FBrickHandleNetSerializerConfig");
static_assert(sizeof(FBrickHandleNetSerializerConfig) == 0x000010, "Wrong size on FBrickHandleNetSerializerConfig");

// ScriptStruct Brickadia.BrickStudGroup
// 0x0010 (0x0010 - 0x0000)
struct FBrickStudGroup final
{
public:
	struct FIntVector                             Offset;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NumX;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NumY;                                              // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickDirection                               Direction;                                         // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickAnchorType                              Type;                                              // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickStudGroup) == 0x000004, "Wrong alignment on FBrickStudGroup");
static_assert(sizeof(FBrickStudGroup) == 0x000010, "Wrong size on FBrickStudGroup");
static_assert(offsetof(FBrickStudGroup, Offset) == 0x000000, "Member 'FBrickStudGroup::Offset' has a wrong offset!");
static_assert(offsetof(FBrickStudGroup, NumX) == 0x00000C, "Member 'FBrickStudGroup::NumX' has a wrong offset!");
static_assert(offsetof(FBrickStudGroup, NumY) == 0x00000D, "Member 'FBrickStudGroup::NumY' has a wrong offset!");
static_assert(offsetof(FBrickStudGroup, Direction) == 0x00000E, "Member 'FBrickStudGroup::Direction' has a wrong offset!");
static_assert(offsetof(FBrickStudGroup, Type) == 0x00000F, "Member 'FBrickStudGroup::Type' has a wrong offset!");

// ScriptStruct Brickadia.BrickOwnerData1
// 0x0020 (0x0020 - 0x0000)
struct FBrickOwnerData1 final
{
public:
	struct FBRGuid                                OwnerGuid;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerName;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickOwnerData1) == 0x000008, "Wrong alignment on FBrickOwnerData1");
static_assert(sizeof(FBrickOwnerData1) == 0x000020, "Wrong size on FBrickOwnerData1");
static_assert(offsetof(FBrickOwnerData1, OwnerGuid) == 0x000000, "Member 'FBrickOwnerData1::OwnerGuid' has a wrong offset!");
static_assert(offsetof(FBrickOwnerData1, OwnerName) == 0x000010, "Member 'FBrickOwnerData1::OwnerName' has a wrong offset!");

// ScriptStruct Brickadia.BrickLoadRestrictions
// 0x0020 (0x0020 - 0x0000)
struct FBrickLoadRestrictions final
{
public:
	int32                                         MaxOwners;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBricks;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxComponentTypes;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxComponentInstances;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWires;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             MaxBuildDimensions;                                // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickLoadRestrictions) == 0x000004, "Wrong alignment on FBrickLoadRestrictions");
static_assert(sizeof(FBrickLoadRestrictions) == 0x000020, "Wrong size on FBrickLoadRestrictions");
static_assert(offsetof(FBrickLoadRestrictions, MaxOwners) == 0x000000, "Member 'FBrickLoadRestrictions::MaxOwners' has a wrong offset!");
static_assert(offsetof(FBrickLoadRestrictions, MaxBricks) == 0x000004, "Member 'FBrickLoadRestrictions::MaxBricks' has a wrong offset!");
static_assert(offsetof(FBrickLoadRestrictions, MaxComponentTypes) == 0x000008, "Member 'FBrickLoadRestrictions::MaxComponentTypes' has a wrong offset!");
static_assert(offsetof(FBrickLoadRestrictions, MaxComponentInstances) == 0x00000C, "Member 'FBrickLoadRestrictions::MaxComponentInstances' has a wrong offset!");
static_assert(offsetof(FBrickLoadRestrictions, MaxWires) == 0x000010, "Member 'FBrickLoadRestrictions::MaxWires' has a wrong offset!");
static_assert(offsetof(FBrickLoadRestrictions, MaxBuildDimensions) == 0x000014, "Member 'FBrickLoadRestrictions::MaxBuildDimensions' has a wrong offset!");

// ScriptStruct Brickadia.BrickLoadResult
// 0x0038 (0x0038 - 0x0000)
struct FBrickLoadResult final
{
public:
	int32                                         NumBricksInFile;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricksRead;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrickReadDuration;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBricksInserted;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrickInsertDuration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponentsCreated;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComponentsCreateDuration;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWiresCreated;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WiresCreateDuration;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LoadError;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickLoadResult) == 0x000008, "Wrong alignment on FBrickLoadResult");
static_assert(sizeof(FBrickLoadResult) == 0x000038, "Wrong size on FBrickLoadResult");
static_assert(offsetof(FBrickLoadResult, NumBricksInFile) == 0x000000, "Member 'FBrickLoadResult::NumBricksInFile' has a wrong offset!");
static_assert(offsetof(FBrickLoadResult, NumBricksRead) == 0x000004, "Member 'FBrickLoadResult::NumBricksRead' has a wrong offset!");
static_assert(offsetof(FBrickLoadResult, BrickReadDuration) == 0x000008, "Member 'FBrickLoadResult::BrickReadDuration' has a wrong offset!");
static_assert(offsetof(FBrickLoadResult, NumBricksInserted) == 0x00000C, "Member 'FBrickLoadResult::NumBricksInserted' has a wrong offset!");
static_assert(offsetof(FBrickLoadResult, BrickInsertDuration) == 0x000010, "Member 'FBrickLoadResult::BrickInsertDuration' has a wrong offset!");
static_assert(offsetof(FBrickLoadResult, NumComponentsCreated) == 0x000014, "Member 'FBrickLoadResult::NumComponentsCreated' has a wrong offset!");
static_assert(offsetof(FBrickLoadResult, ComponentsCreateDuration) == 0x000018, "Member 'FBrickLoadResult::ComponentsCreateDuration' has a wrong offset!");
static_assert(offsetof(FBrickLoadResult, NumWiresCreated) == 0x00001C, "Member 'FBrickLoadResult::NumWiresCreated' has a wrong offset!");
static_assert(offsetof(FBrickLoadResult, WiresCreateDuration) == 0x000020, "Member 'FBrickLoadResult::WiresCreateDuration' has a wrong offset!");
static_assert(offsetof(FBrickLoadResult, LoadError) == 0x000028, "Member 'FBrickLoadResult::LoadError' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentWirePortRef
// 0x0018 (0x0018 - 0x0000)
struct FBrickComponentWirePortRef final
{
public:
	struct FBrickComponentInstanceRef             ComponentRef;                                      // 0x0000(0x0010)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PortName;                                          // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentWirePortRef) == 0x000008, "Wrong alignment on FBrickComponentWirePortRef");
static_assert(sizeof(FBrickComponentWirePortRef) == 0x000018, "Wrong size on FBrickComponentWirePortRef");
static_assert(offsetof(FBrickComponentWirePortRef, ComponentRef) == 0x000000, "Member 'FBrickComponentWirePortRef::ComponentRef' has a wrong offset!");
static_assert(offsetof(FBrickComponentWirePortRef, PortName) == 0x000010, "Member 'FBrickComponentWirePortRef::PortName' has a wrong offset!");

// ScriptStruct Brickadia.BrickComponentLatentWirePortRef
// 0x0020 (0x0020 - 0x0000)
struct FBrickComponentLatentWirePortRef final
{
public:
	struct FBrickComponentLatentInstanceRef       ComponentRef;                                      // 0x0000(0x0018)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PortName;                                          // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComponentLatentWirePortRef) == 0x000008, "Wrong alignment on FBrickComponentLatentWirePortRef");
static_assert(sizeof(FBrickComponentLatentWirePortRef) == 0x000020, "Wrong size on FBrickComponentLatentWirePortRef");
static_assert(offsetof(FBrickComponentLatentWirePortRef, ComponentRef) == 0x000000, "Member 'FBrickComponentLatentWirePortRef::ComponentRef' has a wrong offset!");
static_assert(offsetof(FBrickComponentLatentWirePortRef, PortName) == 0x000018, "Member 'FBrickComponentLatentWirePortRef::PortName' has a wrong offset!");

// ScriptStruct Brickadia.BrickWire
// 0x0038 (0x0038 - 0x0000)
struct FBrickWire final
{
public:
	struct FBrickComponentWirePortRef             Source;                                            // 0x0000(0x0018)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentWirePortRef             TARGET;                                            // 0x0018(0x0018)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        RenderSuperSegmentCount;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickWire) == 0x000008, "Wrong alignment on FBrickWire");
static_assert(sizeof(FBrickWire) == 0x000038, "Wrong size on FBrickWire");
static_assert(offsetof(FBrickWire, Source) == 0x000000, "Member 'FBrickWire::Source' has a wrong offset!");
static_assert(offsetof(FBrickWire, TARGET) == 0x000018, "Member 'FBrickWire::TARGET' has a wrong offset!");
static_assert(offsetof(FBrickWire, RenderSuperSegmentCount) == 0x000030, "Member 'FBrickWire::RenderSuperSegmentCount' has a wrong offset!");

// ScriptStruct Brickadia.BrickLatentWire
// 0x0040 (0x0040 - 0x0000)
struct FBrickLatentWire final
{
public:
	struct FBrickComponentLatentWirePortRef       Source;                                            // 0x0000(0x0020)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickComponentLatentWirePortRef       TARGET;                                            // 0x0020(0x0020)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickLatentWire) == 0x000008, "Wrong alignment on FBrickLatentWire");
static_assert(sizeof(FBrickLatentWire) == 0x000040, "Wrong size on FBrickLatentWire");
static_assert(offsetof(FBrickLatentWire, Source) == 0x000000, "Member 'FBrickLatentWire::Source' has a wrong offset!");
static_assert(offsetof(FBrickLatentWire, TARGET) == 0x000020, "Member 'FBrickLatentWire::TARGET' has a wrong offset!");

// ScriptStruct Brickadia.BrickSaveFileInfo
// 0x0028 (0x0028 - 0x0000)
struct FBrickSaveFileInfo final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         FileSize;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickSaveFileInfo) == 0x000008, "Wrong alignment on FBrickSaveFileInfo");
static_assert(sizeof(FBrickSaveFileInfo) == 0x000028, "Wrong size on FBrickSaveFileInfo");
static_assert(offsetof(FBrickSaveFileInfo, Path) == 0x000000, "Member 'FBrickSaveFileInfo::Path' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileInfo, Name) == 0x000010, "Member 'FBrickSaveFileInfo::Name' has a wrong offset!");
static_assert(offsetof(FBrickSaveFileInfo, FileSize) == 0x000020, "Member 'FBrickSaveFileInfo::FileSize' has a wrong offset!");

// ScriptStruct Brickadia.BrickStaticMeshBuildResults
// 0x0010 (0x0010 - 0x0000)
struct FBrickStaticMeshBuildResults final
{
public:
	class UStaticMesh*                            OpaqueMesh;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            TranslucentMesh;                                   // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickStaticMeshBuildResults) == 0x000008, "Wrong alignment on FBrickStaticMeshBuildResults");
static_assert(sizeof(FBrickStaticMeshBuildResults) == 0x000010, "Wrong size on FBrickStaticMeshBuildResults");
static_assert(offsetof(FBrickStaticMeshBuildResults, OpaqueMesh) == 0x000000, "Member 'FBrickStaticMeshBuildResults::OpaqueMesh' has a wrong offset!");
static_assert(offsetof(FBrickStaticMeshBuildResults, TranslucentMesh) == 0x000008, "Member 'FBrickStaticMeshBuildResults::TranslucentMesh' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_PlaceBrick
// 0x0038 (0x0050 - 0x0018)
struct FBrickAction_PlaceBrick final : public FBrickActionBase_SingleBrick
{
public:
	struct FBREntityPersistentHandle              BrickGridPersistentHandle;                         // 0x0018(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickTypeWeakRef                      BrickType;                                         // 0x001C(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntVector                             position;                                          // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorAndAlpha;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickCollisionChannels                       CollisionChannels;                                 // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnerTableId;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_PlaceBrick) == 0x000008, "Wrong alignment on FBrickAction_PlaceBrick");
static_assert(sizeof(FBrickAction_PlaceBrick) == 0x000050, "Wrong size on FBrickAction_PlaceBrick");
static_assert(offsetof(FBrickAction_PlaceBrick, BrickGridPersistentHandle) == 0x000018, "Member 'FBrickAction_PlaceBrick::BrickGridPersistentHandle' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceBrick, BrickType) == 0x00001C, "Member 'FBrickAction_PlaceBrick::BrickType' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceBrick, position) == 0x000030, "Member 'FBrickAction_PlaceBrick::position' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceBrick, MaterialIndex) == 0x00003C, "Member 'FBrickAction_PlaceBrick::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceBrick, ColorAndAlpha) == 0x000040, "Member 'FBrickAction_PlaceBrick::ColorAndAlpha' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceBrick, Orientation) == 0x000044, "Member 'FBrickAction_PlaceBrick::Orientation' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceBrick, CollisionChannels) == 0x000045, "Member 'FBrickAction_PlaceBrick::CollisionChannels' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceBrick, bVisibility) == 0x000046, "Member 'FBrickAction_PlaceBrick::bVisibility' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceBrick, OwnerTableId) == 0x000048, "Member 'FBrickAction_PlaceBrick::OwnerTableId' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_DeleteBrick
// 0x0000 (0x0018 - 0x0018)
struct FBrickAction_DeleteBrick final : public FBrickActionBase_SingleBrick
{
};
static_assert(alignof(FBrickAction_DeleteBrick) == 0x000008, "Wrong alignment on FBrickAction_DeleteBrick");
static_assert(sizeof(FBrickAction_DeleteBrick) == 0x000018, "Wrong size on FBrickAction_DeleteBrick");

// ScriptStruct Brickadia.BrickAction_SetColor
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_SetColor final : public FBrickActionBase_SingleBrick
{
public:
	struct FColor                                 NewColor;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_SetColor) == 0x000008, "Wrong alignment on FBrickAction_SetColor");
static_assert(sizeof(FBrickAction_SetColor) == 0x000020, "Wrong size on FBrickAction_SetColor");
static_assert(offsetof(FBrickAction_SetColor, NewColor) == 0x000018, "Member 'FBrickAction_SetColor::NewColor' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_SetMaterial
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_SetMaterial final : public FBrickActionBase_SingleBrick
{
public:
	uint8                                         NewMaterialIndex;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewMaterialAlpha;                                  // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_SetMaterial) == 0x000008, "Wrong alignment on FBrickAction_SetMaterial");
static_assert(sizeof(FBrickAction_SetMaterial) == 0x000020, "Wrong size on FBrickAction_SetMaterial");
static_assert(offsetof(FBrickAction_SetMaterial, NewMaterialIndex) == 0x000018, "Member 'FBrickAction_SetMaterial::NewMaterialIndex' has a wrong offset!");
static_assert(offsetof(FBrickAction_SetMaterial, NewMaterialAlpha) == 0x000019, "Member 'FBrickAction_SetMaterial::NewMaterialAlpha' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_SetColorAndMaterial
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_SetColorAndMaterial final : public FBrickActionBase_SingleBrick
{
public:
	struct FColor                                 NewColor;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewMaterialIndex;                                  // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewMaterialAlpha;                                  // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_SetColorAndMaterial) == 0x000008, "Wrong alignment on FBrickAction_SetColorAndMaterial");
static_assert(sizeof(FBrickAction_SetColorAndMaterial) == 0x000020, "Wrong size on FBrickAction_SetColorAndMaterial");
static_assert(offsetof(FBrickAction_SetColorAndMaterial, NewColor) == 0x000018, "Member 'FBrickAction_SetColorAndMaterial::NewColor' has a wrong offset!");
static_assert(offsetof(FBrickAction_SetColorAndMaterial, NewMaterialIndex) == 0x00001C, "Member 'FBrickAction_SetColorAndMaterial::NewMaterialIndex' has a wrong offset!");
static_assert(offsetof(FBrickAction_SetColorAndMaterial, NewMaterialAlpha) == 0x00001D, "Member 'FBrickAction_SetColorAndMaterial::NewMaterialAlpha' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_SetVisibility
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_SetVisibility final : public FBrickActionBase_SingleBrick
{
public:
	bool                                          bNewVisibility;                                    // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_SetVisibility) == 0x000008, "Wrong alignment on FBrickAction_SetVisibility");
static_assert(sizeof(FBrickAction_SetVisibility) == 0x000020, "Wrong size on FBrickAction_SetVisibility");
static_assert(offsetof(FBrickAction_SetVisibility, bNewVisibility) == 0x000018, "Member 'FBrickAction_SetVisibility::bNewVisibility' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_SetCollisionChannel
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_SetCollisionChannel final : public FBrickActionBase_SingleBrick
{
public:
	EBrickCollisionChannels                       Channel;                                           // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewEnabled;                                       // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_SetCollisionChannel) == 0x000008, "Wrong alignment on FBrickAction_SetCollisionChannel");
static_assert(sizeof(FBrickAction_SetCollisionChannel) == 0x000020, "Wrong size on FBrickAction_SetCollisionChannel");
static_assert(offsetof(FBrickAction_SetCollisionChannel, Channel) == 0x000018, "Member 'FBrickAction_SetCollisionChannel::Channel' has a wrong offset!");
static_assert(offsetof(FBrickAction_SetCollisionChannel, bNewEnabled) == 0x000019, "Member 'FBrickAction_SetCollisionChannel::bNewEnabled' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_ResizeAndMove
// 0x0018 (0x0030 - 0x0018)
struct FBrickAction_ResizeAndMove final : public FBrickActionBase_SingleBrick
{
public:
	struct FIntVector                             NewBrickSize;                                      // 0x0018(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             NewPosition;                                       // 0x0024(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_ResizeAndMove) == 0x000008, "Wrong alignment on FBrickAction_ResizeAndMove");
static_assert(sizeof(FBrickAction_ResizeAndMove) == 0x000030, "Wrong size on FBrickAction_ResizeAndMove");
static_assert(offsetof(FBrickAction_ResizeAndMove, NewBrickSize) == 0x000018, "Member 'FBrickAction_ResizeAndMove::NewBrickSize' has a wrong offset!");
static_assert(offsetof(FBrickAction_ResizeAndMove, NewPosition) == 0x000024, "Member 'FBrickAction_ResizeAndMove::NewPosition' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_AttachComponent
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_AttachComponent final : public FBrickActionBase_SingleBrick
{
public:
	TWeakObjectPtr<class UBrickComponentTypeBase> ComponentType;                                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_AttachComponent) == 0x000008, "Wrong alignment on FBrickAction_AttachComponent");
static_assert(sizeof(FBrickAction_AttachComponent) == 0x000020, "Wrong size on FBrickAction_AttachComponent");
static_assert(offsetof(FBrickAction_AttachComponent, ComponentType) == 0x000018, "Member 'FBrickAction_AttachComponent::ComponentType' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_DetachComponent
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_DetachComponent final : public FBrickActionBase_SingleBrick
{
public:
	TWeakObjectPtr<class UBrickComponentTypeBase> ComponentType;                                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_DetachComponent) == 0x000008, "Wrong alignment on FBrickAction_DetachComponent");
static_assert(sizeof(FBrickAction_DetachComponent) == 0x000020, "Wrong size on FBrickAction_DetachComponent");
static_assert(offsetof(FBrickAction_DetachComponent, ComponentType) == 0x000018, "Member 'FBrickAction_DetachComponent::ComponentType' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_ApplyChangelistToComponent
// 0x0018 (0x0030 - 0x0018)
struct FBrickAction_ApplyChangelistToComponent final : public FBrickActionBase_SingleBrick
{
public:
	TWeakObjectPtr<class UBrickComponentTypeBase> ComponentType;                                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           PropertyChangelist;                                // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_ApplyChangelistToComponent) == 0x000008, "Wrong alignment on FBrickAction_ApplyChangelistToComponent");
static_assert(sizeof(FBrickAction_ApplyChangelistToComponent) == 0x000030, "Wrong size on FBrickAction_ApplyChangelistToComponent");
static_assert(offsetof(FBrickAction_ApplyChangelistToComponent, ComponentType) == 0x000018, "Member 'FBrickAction_ApplyChangelistToComponent::ComponentType' has a wrong offset!");
static_assert(offsetof(FBrickAction_ApplyChangelistToComponent, PropertyChangelist) == 0x000020, "Member 'FBrickAction_ApplyChangelistToComponent::PropertyChangelist' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_DisconnectWire
// 0x0028 (0x0038 - 0x0010)
struct FBrickAction_DisconnectWire final : public FBrickActionBase
{
public:
	struct FBrickPersistentHandle                 SourceBrickPersistentHandle;                       // 0x0010(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UBrickComponentTypeBase> SourceComponentType;                               // 0x0014(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourcePortName;                                    // 0x001C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickPersistentHandle                 TargetBrickPersistentHandle;                       // 0x0024(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UBrickComponentTypeBase> TargetComponentType;                               // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPortName;                                    // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_DisconnectWire) == 0x000008, "Wrong alignment on FBrickAction_DisconnectWire");
static_assert(sizeof(FBrickAction_DisconnectWire) == 0x000038, "Wrong size on FBrickAction_DisconnectWire");
static_assert(offsetof(FBrickAction_DisconnectWire, SourceBrickPersistentHandle) == 0x000010, "Member 'FBrickAction_DisconnectWire::SourceBrickPersistentHandle' has a wrong offset!");
static_assert(offsetof(FBrickAction_DisconnectWire, SourceComponentType) == 0x000014, "Member 'FBrickAction_DisconnectWire::SourceComponentType' has a wrong offset!");
static_assert(offsetof(FBrickAction_DisconnectWire, SourcePortName) == 0x00001C, "Member 'FBrickAction_DisconnectWire::SourcePortName' has a wrong offset!");
static_assert(offsetof(FBrickAction_DisconnectWire, TargetBrickPersistentHandle) == 0x000024, "Member 'FBrickAction_DisconnectWire::TargetBrickPersistentHandle' has a wrong offset!");
static_assert(offsetof(FBrickAction_DisconnectWire, TargetComponentType) == 0x000028, "Member 'FBrickAction_DisconnectWire::TargetComponentType' has a wrong offset!");
static_assert(offsetof(FBrickAction_DisconnectWire, TargetPortName) == 0x000030, "Member 'FBrickAction_DisconnectWire::TargetPortName' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_DeleteEntity
// 0x00A8 (0x00C0 - 0x0018)
struct FBrickAction_DeleteEntity final : public FBrickActionBase_SingleEntity
{
public:
	bool                                          bHasRevPlaceInfo;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickPlaceEntityInfo                  RevPlaceInfo;                                      // 0x0020(0x00A0)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_DeleteEntity) == 0x000010, "Wrong alignment on FBrickAction_DeleteEntity");
static_assert(sizeof(FBrickAction_DeleteEntity) == 0x0000C0, "Wrong size on FBrickAction_DeleteEntity");
static_assert(offsetof(FBrickAction_DeleteEntity, bHasRevPlaceInfo) == 0x000018, "Member 'FBrickAction_DeleteEntity::bHasRevPlaceInfo' has a wrong offset!");
static_assert(offsetof(FBrickAction_DeleteEntity, RevPlaceInfo) == 0x000020, "Member 'FBrickAction_DeleteEntity::RevPlaceInfo' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_ApplyChangelistToEntity
// 0x0018 (0x0030 - 0x0018)
struct FBrickAction_ApplyChangelistToEntity final : public FBrickActionBase_SingleEntity
{
public:
	class UBREntityTypeBase*                      EntityType;                                        // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           PropertyChangelist;                                // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickAction_ApplyChangelistToEntity) == 0x000008, "Wrong alignment on FBrickAction_ApplyChangelistToEntity");
static_assert(sizeof(FBrickAction_ApplyChangelistToEntity) == 0x000030, "Wrong size on FBrickAction_ApplyChangelistToEntity");
static_assert(offsetof(FBrickAction_ApplyChangelistToEntity, EntityType) == 0x000018, "Member 'FBrickAction_ApplyChangelistToEntity::EntityType' has a wrong offset!");
static_assert(offsetof(FBrickAction_ApplyChangelistToEntity, PropertyChangelist) == 0x000020, "Member 'FBrickAction_ApplyChangelistToEntity::PropertyChangelist' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_SpreadFillPaint
// 0x0058 (0x0070 - 0x0018)
struct FBrickAction_SpreadFillPaint final : public FBrickActionBase_SingleBrick
{
public:
	struct FBrickFillPaintConfig                  PaintConfig;                                       // 0x0018(0x0014)(BlueprintVisible, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x44];                                      // 0x002C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_SpreadFillPaint) == 0x000008, "Wrong alignment on FBrickAction_SpreadFillPaint");
static_assert(sizeof(FBrickAction_SpreadFillPaint) == 0x000070, "Wrong size on FBrickAction_SpreadFillPaint");
static_assert(offsetof(FBrickAction_SpreadFillPaint, PaintConfig) == 0x000018, "Member 'FBrickAction_SpreadFillPaint::PaintConfig' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_PlaceTemplate
// 0x0038 (0x0048 - 0x0010)
struct FBrickAction_PlaceTemplate final : public FBrickActionBase
{
public:
	struct FBrickTemplateConfig                   Config;                                            // 0x0010(0x0028)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickPersistentHandle                 PersistentHandleStart;                             // 0x0038(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SavedBrickIndex;                                   // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SavedComponentIndex;                               // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SavedWireIndex;                                    // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FBrickAction_PlaceTemplate) == 0x000008, "Wrong alignment on FBrickAction_PlaceTemplate");
static_assert(sizeof(FBrickAction_PlaceTemplate) == 0x000048, "Wrong size on FBrickAction_PlaceTemplate");
static_assert(offsetof(FBrickAction_PlaceTemplate, Config) == 0x000010, "Member 'FBrickAction_PlaceTemplate::Config' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceTemplate, PersistentHandleStart) == 0x000038, "Member 'FBrickAction_PlaceTemplate::PersistentHandleStart' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceTemplate, SavedBrickIndex) == 0x00003C, "Member 'FBrickAction_PlaceTemplate::SavedBrickIndex' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceTemplate, SavedComponentIndex) == 0x000040, "Member 'FBrickAction_PlaceTemplate::SavedComponentIndex' has a wrong offset!");
static_assert(offsetof(FBrickAction_PlaceTemplate, SavedWireIndex) == 0x000044, "Member 'FBrickAction_PlaceTemplate::SavedWireIndex' has a wrong offset!");

// ScriptStruct Brickadia.BrickAction_DisconnectJointBrickFromEntity
// 0x0008 (0x0020 - 0x0018)
struct FBrickAction_DisconnectJointBrickFromEntity final : public FBrickActionBase_SingleBrick
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickAction_DisconnectJointBrickFromEntity) == 0x000008, "Wrong alignment on FBrickAction_DisconnectJointBrickFromEntity");
static_assert(sizeof(FBrickAction_DisconnectJointBrickFromEntity) == 0x000020, "Wrong size on FBrickAction_DisconnectJointBrickFromEntity");

// ScriptStruct Brickadia.BrickComposedGeneratorLayerEdges
// 0x00C8 (0x00C8 - 0x0000)
struct FBrickComposedGeneratorLayerEdges final
{
public:
	bool                                          bUseEdgeFrontLeftForAllEdges;                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickComposedGeneratorPart            EdgeFrontLeft;                                     // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeFrontRight;                                    // 0x0018(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeBackLeft;                                      // 0x0028(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeBackRight;                                     // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeFrontBottom;                                   // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeFrontTop;                                      // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeBackBottom;                                    // 0x0068(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeBackTop;                                       // 0x0078(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeLeftBottom;                                    // 0x0088(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeLeftTop;                                       // 0x0098(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeRightBottom;                                   // 0x00A8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            EdgeRightTop;                                      // 0x00B8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComposedGeneratorLayerEdges) == 0x000008, "Wrong alignment on FBrickComposedGeneratorLayerEdges");
static_assert(sizeof(FBrickComposedGeneratorLayerEdges) == 0x0000C8, "Wrong size on FBrickComposedGeneratorLayerEdges");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, bUseEdgeFrontLeftForAllEdges) == 0x000000, "Member 'FBrickComposedGeneratorLayerEdges::bUseEdgeFrontLeftForAllEdges' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeFrontLeft) == 0x000008, "Member 'FBrickComposedGeneratorLayerEdges::EdgeFrontLeft' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeFrontRight) == 0x000018, "Member 'FBrickComposedGeneratorLayerEdges::EdgeFrontRight' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeBackLeft) == 0x000028, "Member 'FBrickComposedGeneratorLayerEdges::EdgeBackLeft' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeBackRight) == 0x000038, "Member 'FBrickComposedGeneratorLayerEdges::EdgeBackRight' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeFrontBottom) == 0x000048, "Member 'FBrickComposedGeneratorLayerEdges::EdgeFrontBottom' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeFrontTop) == 0x000058, "Member 'FBrickComposedGeneratorLayerEdges::EdgeFrontTop' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeBackBottom) == 0x000068, "Member 'FBrickComposedGeneratorLayerEdges::EdgeBackBottom' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeBackTop) == 0x000078, "Member 'FBrickComposedGeneratorLayerEdges::EdgeBackTop' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeLeftBottom) == 0x000088, "Member 'FBrickComposedGeneratorLayerEdges::EdgeLeftBottom' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeLeftTop) == 0x000098, "Member 'FBrickComposedGeneratorLayerEdges::EdgeLeftTop' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeRightBottom) == 0x0000A8, "Member 'FBrickComposedGeneratorLayerEdges::EdgeRightBottom' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerEdges, EdgeRightTop) == 0x0000B8, "Member 'FBrickComposedGeneratorLayerEdges::EdgeRightTop' has a wrong offset!");

// ScriptStruct Brickadia.BrickComposedGeneratorLayerFaces
// 0x0068 (0x0068 - 0x0000)
struct FBrickComposedGeneratorLayerFaces final
{
public:
	bool                                          bUseFaceFrontForAllFaces;                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickComposedGeneratorPart            FaceFront;                                         // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            FaceBack;                                          // 0x0018(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            FaceBottom;                                        // 0x0028(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            FaceTop;                                           // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            FaceLeft;                                          // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorPart            FaceRight;                                         // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrickComposedGeneratorLayerFaces) == 0x000008, "Wrong alignment on FBrickComposedGeneratorLayerFaces");
static_assert(sizeof(FBrickComposedGeneratorLayerFaces) == 0x000068, "Wrong size on FBrickComposedGeneratorLayerFaces");
static_assert(offsetof(FBrickComposedGeneratorLayerFaces, bUseFaceFrontForAllFaces) == 0x000000, "Member 'FBrickComposedGeneratorLayerFaces::bUseFaceFrontForAllFaces' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerFaces, FaceFront) == 0x000008, "Member 'FBrickComposedGeneratorLayerFaces::FaceFront' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerFaces, FaceBack) == 0x000018, "Member 'FBrickComposedGeneratorLayerFaces::FaceBack' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerFaces, FaceBottom) == 0x000028, "Member 'FBrickComposedGeneratorLayerFaces::FaceBottom' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerFaces, FaceTop) == 0x000038, "Member 'FBrickComposedGeneratorLayerFaces::FaceTop' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerFaces, FaceLeft) == 0x000048, "Member 'FBrickComposedGeneratorLayerFaces::FaceLeft' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayerFaces, FaceRight) == 0x000058, "Member 'FBrickComposedGeneratorLayerFaces::FaceRight' has a wrong offset!");

// ScriptStruct Brickadia.BrickComposedGeneratorLayer
// 0x01D0 (0x01D0 - 0x0000)
struct FBrickComposedGeneratorLayer final
{
public:
	struct FBrickComposedGeneratorPart            Center;                                            // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorLayerCorners    Corners;                                           // 0x0010(0x0088)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorLayerEdges      Edges;                                             // 0x0098(0x00C8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBrickComposedGeneratorLayerFaces      Faces;                                             // 0x0160(0x0068)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBrickComposedSpanMode                        SpanX;                                             // 0x01C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickComposedSpanMode                        SpanY;                                             // 0x01C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickComposedSpanMode                        SpanZ;                                             // 0x01CA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB[0x5];                                      // 0x01CB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrickComposedGeneratorLayer) == 0x000008, "Wrong alignment on FBrickComposedGeneratorLayer");
static_assert(sizeof(FBrickComposedGeneratorLayer) == 0x0001D0, "Wrong size on FBrickComposedGeneratorLayer");
static_assert(offsetof(FBrickComposedGeneratorLayer, Center) == 0x000000, "Member 'FBrickComposedGeneratorLayer::Center' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayer, Corners) == 0x000010, "Member 'FBrickComposedGeneratorLayer::Corners' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayer, Edges) == 0x000098, "Member 'FBrickComposedGeneratorLayer::Edges' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayer, Faces) == 0x000160, "Member 'FBrickComposedGeneratorLayer::Faces' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayer, SpanX) == 0x0001C8, "Member 'FBrickComposedGeneratorLayer::SpanX' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayer, SpanY) == 0x0001C9, "Member 'FBrickComposedGeneratorLayer::SpanY' has a wrong offset!");
static_assert(offsetof(FBrickComposedGeneratorLayer, SpanZ) == 0x0001CA, "Member 'FBrickComposedGeneratorLayer::SpanZ' has a wrong offset!");

// ScriptStruct Brickadia.BRDraggableListEntryConfig
// 0x0230 (0x0230 - 0x0000)
struct FBRDraggableListEntryConfig final
{
public:
	struct FSlateBrush                            NormalBackground;                                  // 0x0000(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBackground;                                 // 0x00B0(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SelectedBackground;                                // 0x0160(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bAllowDragging;                                    // 0x0210(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDraggingWithAnyKey;                          // 0x0211(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   RequiredDragKey;                                   // 0x0218(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRDraggableListEntryConfig) == 0x000010, "Wrong alignment on FBRDraggableListEntryConfig");
static_assert(sizeof(FBRDraggableListEntryConfig) == 0x000230, "Wrong size on FBRDraggableListEntryConfig");
static_assert(offsetof(FBRDraggableListEntryConfig, NormalBackground) == 0x000000, "Member 'FBRDraggableListEntryConfig::NormalBackground' has a wrong offset!");
static_assert(offsetof(FBRDraggableListEntryConfig, HoveredBackground) == 0x0000B0, "Member 'FBRDraggableListEntryConfig::HoveredBackground' has a wrong offset!");
static_assert(offsetof(FBRDraggableListEntryConfig, SelectedBackground) == 0x000160, "Member 'FBRDraggableListEntryConfig::SelectedBackground' has a wrong offset!");
static_assert(offsetof(FBRDraggableListEntryConfig, bAllowDragging) == 0x000210, "Member 'FBRDraggableListEntryConfig::bAllowDragging' has a wrong offset!");
static_assert(offsetof(FBRDraggableListEntryConfig, bAllowDraggingWithAnyKey) == 0x000211, "Member 'FBRDraggableListEntryConfig::bAllowDraggingWithAnyKey' has a wrong offset!");
static_assert(offsetof(FBRDraggableListEntryConfig, RequiredDragKey) == 0x000218, "Member 'FBRDraggableListEntryConfig::RequiredDragKey' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_OneInt
// 0x0004 (0x0004 - 0x0000)
struct FBRMessagePackTestStruct_OneInt final
{
public:
	int32                                         IntValue;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_OneInt) == 0x000004, "Wrong alignment on FBRMessagePackTestStruct_OneInt");
static_assert(sizeof(FBRMessagePackTestStruct_OneInt) == 0x000004, "Wrong size on FBRMessagePackTestStruct_OneInt");
static_assert(offsetof(FBRMessagePackTestStruct_OneInt, IntValue) == 0x000000, "Member 'FBRMessagePackTestStruct_OneInt::IntValue' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_OneIntArray
// 0x0010 (0x0010 - 0x0000)
struct FBRMessagePackTestStruct_OneIntArray final
{
public:
	TArray<int32>                                 ArrayValue;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_OneIntArray) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_OneIntArray");
static_assert(sizeof(FBRMessagePackTestStruct_OneIntArray) == 0x000010, "Wrong size on FBRMessagePackTestStruct_OneIntArray");
static_assert(offsetof(FBRMessagePackTestStruct_OneIntArray, ArrayValue) == 0x000000, "Member 'FBRMessagePackTestStruct_OneIntArray::ArrayValue' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_OneIntSet
// 0x0050 (0x0050 - 0x0000)
struct FBRMessagePackTestStruct_OneIntSet final
{
public:
	TSet<int32>                                   SetValue;                                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_OneIntSet) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_OneIntSet");
static_assert(sizeof(FBRMessagePackTestStruct_OneIntSet) == 0x000050, "Wrong size on FBRMessagePackTestStruct_OneIntSet");
static_assert(offsetof(FBRMessagePackTestStruct_OneIntSet, SetValue) == 0x000000, "Member 'FBRMessagePackTestStruct_OneIntSet::SetValue' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_OneStringSet
// 0x0050 (0x0050 - 0x0000)
struct FBRMessagePackTestStruct_OneStringSet final
{
public:
	TSet<class FString>                           SetValue;                                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_OneStringSet) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_OneStringSet");
static_assert(sizeof(FBRMessagePackTestStruct_OneStringSet) == 0x000050, "Wrong size on FBRMessagePackTestStruct_OneStringSet");
static_assert(offsetof(FBRMessagePackTestStruct_OneStringSet, SetValue) == 0x000000, "Member 'FBRMessagePackTestStruct_OneStringSet::SetValue' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_OneIntToStringMap
// 0x0050 (0x0050 - 0x0000)
struct FBRMessagePackTestStruct_OneIntToStringMap final
{
public:
	TMap<int32, class FString>                    MapValue;                                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_OneIntToStringMap) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_OneIntToStringMap");
static_assert(sizeof(FBRMessagePackTestStruct_OneIntToStringMap) == 0x000050, "Wrong size on FBRMessagePackTestStruct_OneIntToStringMap");
static_assert(offsetof(FBRMessagePackTestStruct_OneIntToStringMap, MapValue) == 0x000000, "Member 'FBRMessagePackTestStruct_OneIntToStringMap::MapValue' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_Nested_OneInt
// 0x0004 (0x0004 - 0x0000)
struct FBRMessagePackTestStruct_Nested_OneInt final
{
public:
	struct FBRMessagePackTestStruct_OneInt        InnerStruct;                                       // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_Nested_OneInt) == 0x000004, "Wrong alignment on FBRMessagePackTestStruct_Nested_OneInt");
static_assert(sizeof(FBRMessagePackTestStruct_Nested_OneInt) == 0x000004, "Wrong size on FBRMessagePackTestStruct_Nested_OneInt");
static_assert(offsetof(FBRMessagePackTestStruct_Nested_OneInt, InnerStruct) == 0x000000, "Member 'FBRMessagePackTestStruct_Nested_OneInt::InnerStruct' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_Nested_ManyFields
// 0x00E0 (0x00E0 - 0x0000)
struct FBRMessagePackTestStruct_Nested_ManyFields final
{
public:
	struct FBRMessagePackTestStruct_OneInt        InnerStruct;                                       // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBRMessagePackTestStruct_ManyFields    InnerStruct2;                                      // 0x0008(0x00C8)(NativeAccessSpecifierPublic)
	class FString                                 ExtraStringValue;                                  // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_Nested_ManyFields) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_Nested_ManyFields");
static_assert(sizeof(FBRMessagePackTestStruct_Nested_ManyFields) == 0x0000E0, "Wrong size on FBRMessagePackTestStruct_Nested_ManyFields");
static_assert(offsetof(FBRMessagePackTestStruct_Nested_ManyFields, InnerStruct) == 0x000000, "Member 'FBRMessagePackTestStruct_Nested_ManyFields::InnerStruct' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_Nested_ManyFields, InnerStruct2) == 0x000008, "Member 'FBRMessagePackTestStruct_Nested_ManyFields::InnerStruct2' has a wrong offset!");
static_assert(offsetof(FBRMessagePackTestStruct_Nested_ManyFields, ExtraStringValue) == 0x0000D0, "Member 'FBRMessagePackTestStruct_Nested_ManyFields::ExtraStringValue' has a wrong offset!");

// ScriptStruct Brickadia.BRMessagePackTestStruct_Nested_ManyFields_Skip
// 0x0010 (0x0010 - 0x0000)
struct FBRMessagePackTestStruct_Nested_ManyFields_Skip final
{
public:
	class FString                                 ExtraStringValue;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRMessagePackTestStruct_Nested_ManyFields_Skip) == 0x000008, "Wrong alignment on FBRMessagePackTestStruct_Nested_ManyFields_Skip");
static_assert(sizeof(FBRMessagePackTestStruct_Nested_ManyFields_Skip) == 0x000010, "Wrong size on FBRMessagePackTestStruct_Nested_ManyFields_Skip");
static_assert(offsetof(FBRMessagePackTestStruct_Nested_ManyFields_Skip, ExtraStringValue) == 0x000000, "Member 'FBRMessagePackTestStruct_Nested_ManyFields_Skip::ExtraStringValue' has a wrong offset!");

// ScriptStruct Brickadia.BRPermissionDescriptor
// 0x0030 (0x0030 - 0x0000)
struct FBRPermissionDescriptor final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EBRPermissionDefaultForRole                   DefaultForRole;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRPermissionRulesetBehavior                  RulesetBehavior;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHide;                                             // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRPermissionDescriptor) == 0x000008, "Wrong alignment on FBRPermissionDescriptor");
static_assert(sizeof(FBRPermissionDescriptor) == 0x000030, "Wrong size on FBRPermissionDescriptor");
static_assert(offsetof(FBRPermissionDescriptor, Name) == 0x000000, "Member 'FBRPermissionDescriptor::Name' has a wrong offset!");
static_assert(offsetof(FBRPermissionDescriptor, DisplayName) == 0x000008, "Member 'FBRPermissionDescriptor::DisplayName' has a wrong offset!");
static_assert(offsetof(FBRPermissionDescriptor, Description) == 0x000018, "Member 'FBRPermissionDescriptor::Description' has a wrong offset!");
static_assert(offsetof(FBRPermissionDescriptor, DefaultForRole) == 0x000028, "Member 'FBRPermissionDescriptor::DefaultForRole' has a wrong offset!");
static_assert(offsetof(FBRPermissionDescriptor, RulesetBehavior) == 0x000029, "Member 'FBRPermissionDescriptor::RulesetBehavior' has a wrong offset!");
static_assert(offsetof(FBRPermissionDescriptor, bHide) == 0x00002A, "Member 'FBRPermissionDescriptor::bHide' has a wrong offset!");

// ScriptStruct Brickadia.BRPlaceableActorDefinition
// 0x0050 (0x0050 - 0x0000)
struct FBRPlaceableActorDefinition final
{
public:
	struct FBRCatalogData                         CatalogData;                                       // 0x0000(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UInspectorPropertyDescriptorList> PropertyDescriptorList;                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRPlaceableActorDefinition) == 0x000008, "Wrong alignment on FBRPlaceableActorDefinition");
static_assert(sizeof(FBRPlaceableActorDefinition) == 0x000050, "Wrong size on FBRPlaceableActorDefinition");
static_assert(offsetof(FBRPlaceableActorDefinition, CatalogData) == 0x000000, "Member 'FBRPlaceableActorDefinition::CatalogData' has a wrong offset!");
static_assert(offsetof(FBRPlaceableActorDefinition, PropertyDescriptorList) == 0x000048, "Member 'FBRPlaceableActorDefinition::PropertyDescriptorList' has a wrong offset!");

// ScriptStruct Brickadia.BRPlayerPartSocketNode
// 0x0088 (0x0088 - 0x0000)
struct FBRPlayerPartSocketNode final
{
public:
	class UBRPlayerPartDescriptor*                DefaultPartDescriptor;                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             ConnectionTags;                                    // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsMirrorSocket;                                   // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRequiredForAvatar;                              // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleInFirstPerson;                             // 0x007A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRPlayerDecalDescriptor*               DefaultDecalDescriptor;                            // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRPlayerPartSocketNode) == 0x000008, "Wrong alignment on FBRPlayerPartSocketNode");
static_assert(sizeof(FBRPlayerPartSocketNode) == 0x000088, "Wrong size on FBRPlayerPartSocketNode");
static_assert(offsetof(FBRPlayerPartSocketNode, DefaultPartDescriptor) == 0x000000, "Member 'FBRPlayerPartSocketNode::DefaultPartDescriptor' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartSocketNode, DisplayName) == 0x000008, "Member 'FBRPlayerPartSocketNode::DisplayName' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartSocketNode, ParentIndex) == 0x000018, "Member 'FBRPlayerPartSocketNode::ParentIndex' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartSocketNode, SocketName) == 0x00001C, "Member 'FBRPlayerPartSocketNode::SocketName' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartSocketNode, ConnectionTags) == 0x000028, "Member 'FBRPlayerPartSocketNode::ConnectionTags' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartSocketNode, bIsMirrorSocket) == 0x000078, "Member 'FBRPlayerPartSocketNode::bIsMirrorSocket' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartSocketNode, bIsRequiredForAvatar) == 0x000079, "Member 'FBRPlayerPartSocketNode::bIsRequiredForAvatar' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartSocketNode, bVisibleInFirstPerson) == 0x00007A, "Member 'FBRPlayerPartSocketNode::bVisibleInFirstPerson' has a wrong offset!");
static_assert(offsetof(FBRPlayerPartSocketNode, DefaultDecalDescriptor) == 0x000080, "Member 'FBRPlayerPartSocketNode::DefaultDecalDescriptor' has a wrong offset!");

// ScriptStruct Brickadia.BRLeaderboardColumn
// 0x0030 (0x0030 - 0x0000)
struct FBRLeaderboardColumn final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartingValue;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIColumnSpaceModifier;                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetEachRound;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetOnChangeTeam;                                // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRLeaderboardColumn) == 0x000008, "Wrong alignment on FBRLeaderboardColumn");
static_assert(sizeof(FBRLeaderboardColumn) == 0x000030, "Wrong size on FBRLeaderboardColumn");
static_assert(offsetof(FBRLeaderboardColumn, Name) == 0x000000, "Member 'FBRLeaderboardColumn::Name' has a wrong offset!");
static_assert(offsetof(FBRLeaderboardColumn, DisplayName) == 0x000008, "Member 'FBRLeaderboardColumn::DisplayName' has a wrong offset!");
static_assert(offsetof(FBRLeaderboardColumn, Texture) == 0x000018, "Member 'FBRLeaderboardColumn::Texture' has a wrong offset!");
static_assert(offsetof(FBRLeaderboardColumn, StartingValue) == 0x000020, "Member 'FBRLeaderboardColumn::StartingValue' has a wrong offset!");
static_assert(offsetof(FBRLeaderboardColumn, UIColumnSpaceModifier) == 0x000024, "Member 'FBRLeaderboardColumn::UIColumnSpaceModifier' has a wrong offset!");
static_assert(offsetof(FBRLeaderboardColumn, bResetEachRound) == 0x000028, "Member 'FBRLeaderboardColumn::bResetEachRound' has a wrong offset!");
static_assert(offsetof(FBRLeaderboardColumn, bResetOnChangeTeam) == 0x000029, "Member 'FBRLeaderboardColumn::bResetOnChangeTeam' has a wrong offset!");

// ScriptStruct Brickadia.BRQuickUnassignedTeamSettings
// 0x0010 (0x0010 - 0x0000)
struct FBRQuickUnassignedTeamSettings final
{
public:
	TArray<struct FBRTeamGameplayPermissionData>  Permissions;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRQuickUnassignedTeamSettings) == 0x000008, "Wrong alignment on FBRQuickUnassignedTeamSettings");
static_assert(sizeof(FBRQuickUnassignedTeamSettings) == 0x000010, "Wrong size on FBRQuickUnassignedTeamSettings");
static_assert(offsetof(FBRQuickUnassignedTeamSettings, Permissions) == 0x000000, "Member 'FBRQuickUnassignedTeamSettings::Permissions' has a wrong offset!");

// ScriptStruct Brickadia.TextFilterTable
// 0x0008 (0x0010 - 0x0008)
struct FTextFilterTable final : public FTableRowBase
{
public:
	ETextSeverity                                 Severity;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTextFilterTable) == 0x000008, "Wrong alignment on FTextFilterTable");
static_assert(sizeof(FTextFilterTable) == 0x000010, "Wrong size on FTextFilterTable");
static_assert(offsetof(FTextFilterTable, Severity) == 0x000008, "Member 'FTextFilterTable::Severity' has a wrong offset!");

// ScriptStruct Brickadia.BRToolPreviewInstancingParameters
// 0x0030 (0x0030 - 0x0000)
struct FBRToolPreviewInstancingParameters final
{
public:
	struct FIntVector                             InstanceSize;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             InstanceSpacing;                                   // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VolumeSize;                                        // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VolumeSigns;                                       // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRToolPreviewInstancingParameters) == 0x000004, "Wrong alignment on FBRToolPreviewInstancingParameters");
static_assert(sizeof(FBRToolPreviewInstancingParameters) == 0x000030, "Wrong size on FBRToolPreviewInstancingParameters");
static_assert(offsetof(FBRToolPreviewInstancingParameters, InstanceSize) == 0x000000, "Member 'FBRToolPreviewInstancingParameters::InstanceSize' has a wrong offset!");
static_assert(offsetof(FBRToolPreviewInstancingParameters, InstanceSpacing) == 0x00000C, "Member 'FBRToolPreviewInstancingParameters::InstanceSpacing' has a wrong offset!");
static_assert(offsetof(FBRToolPreviewInstancingParameters, VolumeSize) == 0x000018, "Member 'FBRToolPreviewInstancingParameters::VolumeSize' has a wrong offset!");
static_assert(offsetof(FBRToolPreviewInstancingParameters, VolumeSigns) == 0x000024, "Member 'FBRToolPreviewInstancingParameters::VolumeSigns' has a wrong offset!");

// ScriptStruct Brickadia.BRToolPreviewPartTransformParameters
// 0x0060 (0x0060 - 0x0000)
struct FBRToolPreviewPartTransformParameters final
{
public:
	struct FTransform                             RenderOffsetTransform;                             // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRToolPreviewPartTransformParameters) == 0x000010, "Wrong alignment on FBRToolPreviewPartTransformParameters");
static_assert(sizeof(FBRToolPreviewPartTransformParameters) == 0x000060, "Wrong size on FBRToolPreviewPartTransformParameters");
static_assert(offsetof(FBRToolPreviewPartTransformParameters, RenderOffsetTransform) == 0x000000, "Member 'FBRToolPreviewPartTransformParameters::RenderOffsetTransform' has a wrong offset!");

// ScriptStruct Brickadia.BRToolPreviewPartDisplayParameters
// 0x0048 (0x0048 - 0x0000)
struct FBRToolPreviewPartDisplayParameters final
{
public:
	struct FIntVector                             BaseOffset;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickTypeNetWrapper                   BrickType;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBREntityTypeBase*                      EntityType;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Colors;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCheckBlocked;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRToolPreviewPartDisplayParameters) == 0x000008, "Wrong alignment on FBRToolPreviewPartDisplayParameters");
static_assert(sizeof(FBRToolPreviewPartDisplayParameters) == 0x000048, "Wrong size on FBRToolPreviewPartDisplayParameters");
static_assert(offsetof(FBRToolPreviewPartDisplayParameters, BaseOffset) == 0x000000, "Member 'FBRToolPreviewPartDisplayParameters::BaseOffset' has a wrong offset!");
static_assert(offsetof(FBRToolPreviewPartDisplayParameters, BrickType) == 0x000010, "Member 'FBRToolPreviewPartDisplayParameters::BrickType' has a wrong offset!");
static_assert(offsetof(FBRToolPreviewPartDisplayParameters, EntityType) == 0x000028, "Member 'FBRToolPreviewPartDisplayParameters::EntityType' has a wrong offset!");
static_assert(offsetof(FBRToolPreviewPartDisplayParameters, Colors) == 0x000030, "Member 'FBRToolPreviewPartDisplayParameters::Colors' has a wrong offset!");
static_assert(offsetof(FBRToolPreviewPartDisplayParameters, bCheckBlocked) == 0x000040, "Member 'FBRToolPreviewPartDisplayParameters::bCheckBlocked' has a wrong offset!");

// ScriptStruct Brickadia.BRApplicatorBrickClipboard
// 0x0058 (0x0058 - 0x0000)
struct FBRApplicatorBrickClipboard final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UBrickComponentTypeBase*, struct FInspectorPropertyChangelist> Components;                                        // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRApplicatorBrickClipboard) == 0x000008, "Wrong alignment on FBRApplicatorBrickClipboard");
static_assert(sizeof(FBRApplicatorBrickClipboard) == 0x000058, "Wrong size on FBRApplicatorBrickClipboard");
static_assert(offsetof(FBRApplicatorBrickClipboard, Components) == 0x000008, "Member 'FBRApplicatorBrickClipboard::Components' has a wrong offset!");

// ScriptStruct Brickadia.BRApplicatorEntityClipboard
// 0x0018 (0x0018 - 0x0000)
struct FBRApplicatorEntityClipboard final
{
public:
	class UBREntityTypeBase*                      EntityType;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInspectorPropertyChangelist           Settings;                                          // 0x0008(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRApplicatorEntityClipboard) == 0x000008, "Wrong alignment on FBRApplicatorEntityClipboard");
static_assert(sizeof(FBRApplicatorEntityClipboard) == 0x000018, "Wrong size on FBRApplicatorEntityClipboard");
static_assert(offsetof(FBRApplicatorEntityClipboard, EntityType) == 0x000000, "Member 'FBRApplicatorEntityClipboard::EntityType' has a wrong offset!");
static_assert(offsetof(FBRApplicatorEntityClipboard, Settings) == 0x000008, "Member 'FBRApplicatorEntityClipboard::Settings' has a wrong offset!");

// ScriptStruct Brickadia.BRManipulatorAttachJointData
// 0x0090 (0x0090 - 0x0000)
struct FBRManipulatorAttachJointData final
{
public:
	bool                                          bFoundAttachJoint;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickHandle                           CurrentAttachJoint;                                // 0x0004(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentAttachTransform;                            // 0x0010(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentStartPosition;                              // 0x0070(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           CurrentAttachSocket;                               // 0x0088(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRManipulatorAttachJointData) == 0x000010, "Wrong alignment on FBRManipulatorAttachJointData");
static_assert(sizeof(FBRManipulatorAttachJointData) == 0x000090, "Wrong size on FBRManipulatorAttachJointData");
static_assert(offsetof(FBRManipulatorAttachJointData, bFoundAttachJoint) == 0x000000, "Member 'FBRManipulatorAttachJointData::bFoundAttachJoint' has a wrong offset!");
static_assert(offsetof(FBRManipulatorAttachJointData, CurrentAttachJoint) == 0x000004, "Member 'FBRManipulatorAttachJointData::CurrentAttachJoint' has a wrong offset!");
static_assert(offsetof(FBRManipulatorAttachJointData, CurrentAttachTransform) == 0x000010, "Member 'FBRManipulatorAttachJointData::CurrentAttachTransform' has a wrong offset!");
static_assert(offsetof(FBRManipulatorAttachJointData, CurrentStartPosition) == 0x000070, "Member 'FBRManipulatorAttachJointData::CurrentStartPosition' has a wrong offset!");
static_assert(offsetof(FBRManipulatorAttachJointData, CurrentAttachSocket) == 0x000088, "Member 'FBRManipulatorAttachJointData::CurrentAttachSocket' has a wrong offset!");

// ScriptStruct Brickadia.BRPlacerPlaceable
// 0x0090 (0x0090 - 0x0000)
struct FBRPlacerPlaceable final
{
public:
	class UObject*                                Placeable;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickTemplatePlacementInfo            PlacementInfoForTemplate;                          // 0x0008(0x0088)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRPlacerPlaceable) == 0x000008, "Wrong alignment on FBRPlacerPlaceable");
static_assert(sizeof(FBRPlacerPlaceable) == 0x000090, "Wrong size on FBRPlacerPlaceable");
static_assert(offsetof(FBRPlacerPlaceable, Placeable) == 0x000000, "Member 'FBRPlacerPlaceable::Placeable' has a wrong offset!");
static_assert(offsetof(FBRPlacerPlaceable, PlacementInfoForTemplate) == 0x000008, "Member 'FBRPlacerPlaceable::PlacementInfoForTemplate' has a wrong offset!");

// ScriptStruct Brickadia.BRPlacerPreviewInfo
// 0x0014 (0x0014 - 0x0000)
struct FBRPlacerPreviewInfo final
{
public:
	bool                                          bHaveValidLocationForPlacing;                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickOrientation                             Orientation;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRPlacerPreviewInfo) == 0x000004, "Wrong alignment on FBRPlacerPreviewInfo");
static_assert(sizeof(FBRPlacerPreviewInfo) == 0x000014, "Wrong size on FBRPlacerPreviewInfo");
static_assert(offsetof(FBRPlacerPreviewInfo, bHaveValidLocationForPlacing) == 0x000000, "Member 'FBRPlacerPreviewInfo::bHaveValidLocationForPlacing' has a wrong offset!");
static_assert(offsetof(FBRPlacerPreviewInfo, Location) == 0x000004, "Member 'FBRPlacerPreviewInfo::Location' has a wrong offset!");
static_assert(offsetof(FBRPlacerPreviewInfo, Orientation) == 0x000010, "Member 'FBRPlacerPreviewInfo::Orientation' has a wrong offset!");

// ScriptStruct Brickadia.BRPlacementContext
// 0x0080 (0x0080 - 0x0000)
struct FBRPlacementContext final
{
public:
	EBRPlacementContextType                       Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickGridComponent*                    ExistingBrickGrid;                                 // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             BrickGridTransform;                                // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickHandle                           JointBrickHandle;                                  // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRPlacementContext) == 0x000010, "Wrong alignment on FBRPlacementContext");
static_assert(sizeof(FBRPlacementContext) == 0x000080, "Wrong size on FBRPlacementContext");
static_assert(offsetof(FBRPlacementContext, Type) == 0x000000, "Member 'FBRPlacementContext::Type' has a wrong offset!");
static_assert(offsetof(FBRPlacementContext, ExistingBrickGrid) == 0x000008, "Member 'FBRPlacementContext::ExistingBrickGrid' has a wrong offset!");
static_assert(offsetof(FBRPlacementContext, BrickGridTransform) == 0x000010, "Member 'FBRPlacementContext::BrickGridTransform' has a wrong offset!");
static_assert(offsetof(FBRPlacementContext, JointBrickHandle) == 0x000070, "Member 'FBRPlacementContext::JointBrickHandle' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponAmmoCounter
// 0x0018 (0x0018 - 0x0000)
struct FBRWeaponAmmoCounter final
{
public:
	TSubclassOf<class UBRWeaponAmmoWidget>        WidgetType;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRWeaponResource*                      Resource;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerResource;                                // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponAmmoCounter) == 0x000008, "Wrong alignment on FBRWeaponAmmoCounter");
static_assert(sizeof(FBRWeaponAmmoCounter) == 0x000018, "Wrong size on FBRWeaponAmmoCounter");
static_assert(offsetof(FBRWeaponAmmoCounter, WidgetType) == 0x000000, "Member 'FBRWeaponAmmoCounter::WidgetType' has a wrong offset!");
static_assert(offsetof(FBRWeaponAmmoCounter, Resource) == 0x000008, "Member 'FBRWeaponAmmoCounter::Resource' has a wrong offset!");
static_assert(offsetof(FBRWeaponAmmoCounter, bUsePlayerResource) == 0x000010, "Member 'FBRWeaponAmmoCounter::bUsePlayerResource' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponProjectileSpawnRep
// 0x0038 (0x0038 - 0x0000)
struct FBRWeaponProjectileSpawnRep
{
public:
	uint8                                         SourceStateIndex;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        BaseSequenceNumber;                                // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerCompensatedLatency;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  SpawnLocation;                                     // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              SpawnDirection;                                    // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponProjectileSpawnRep) == 0x000008, "Wrong alignment on FBRWeaponProjectileSpawnRep");
static_assert(sizeof(FBRWeaponProjectileSpawnRep) == 0x000038, "Wrong size on FBRWeaponProjectileSpawnRep");
static_assert(offsetof(FBRWeaponProjectileSpawnRep, SourceStateIndex) == 0x000000, "Member 'FBRWeaponProjectileSpawnRep::SourceStateIndex' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectileSpawnRep, BaseSequenceNumber) == 0x000002, "Member 'FBRWeaponProjectileSpawnRep::BaseSequenceNumber' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectileSpawnRep, ServerCompensatedLatency) == 0x000004, "Member 'FBRWeaponProjectileSpawnRep::ServerCompensatedLatency' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectileSpawnRep, SpawnLocation) == 0x000008, "Member 'FBRWeaponProjectileSpawnRep::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectileSpawnRep, SpawnDirection) == 0x000020, "Member 'FBRWeaponProjectileSpawnRep::SpawnDirection' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponProjectileSpawnRepWithSeed
// 0x0008 (0x0040 - 0x0038)
struct FBRWeaponProjectileSpawnRepWithSeed final : public FBRWeaponProjectileSpawnRep
{
public:
	int32                                         RandomSeed;                                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponProjectileSpawnRepWithSeed) == 0x000008, "Wrong alignment on FBRWeaponProjectileSpawnRepWithSeed");
static_assert(sizeof(FBRWeaponProjectileSpawnRepWithSeed) == 0x000040, "Wrong size on FBRWeaponProjectileSpawnRepWithSeed");
static_assert(offsetof(FBRWeaponProjectileSpawnRepWithSeed, RandomSeed) == 0x000038, "Member 'FBRWeaponProjectileSpawnRepWithSeed::RandomSeed' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponProjectileExplosionRep
// 0x0040 (0x0040 - 0x0000)
struct FBRWeaponProjectileExplosionRep
{
public:
	uint16                                        ProjectileSequenceNumber;                          // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SourceStateIndex;                                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  ExplosionLocation;                                 // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ExplosionNormal;                                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirectHit;                                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeadshot;                                         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponProjectileExplosionRep) == 0x000008, "Wrong alignment on FBRWeaponProjectileExplosionRep");
static_assert(sizeof(FBRWeaponProjectileExplosionRep) == 0x000040, "Wrong size on FBRWeaponProjectileExplosionRep");
static_assert(offsetof(FBRWeaponProjectileExplosionRep, ProjectileSequenceNumber) == 0x000000, "Member 'FBRWeaponProjectileExplosionRep::ProjectileSequenceNumber' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectileExplosionRep, SourceStateIndex) == 0x000002, "Member 'FBRWeaponProjectileExplosionRep::SourceStateIndex' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectileExplosionRep, ExplosionLocation) == 0x000008, "Member 'FBRWeaponProjectileExplosionRep::ExplosionLocation' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectileExplosionRep, ExplosionNormal) == 0x000020, "Member 'FBRWeaponProjectileExplosionRep::ExplosionNormal' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectileExplosionRep, bDirectHit) == 0x000038, "Member 'FBRWeaponProjectileExplosionRep::bDirectHit' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectileExplosionRep, bHeadshot) == 0x000039, "Member 'FBRWeaponProjectileExplosionRep::bHeadshot' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponProjectileExplosionRepWithSeed
// 0x0008 (0x0048 - 0x0040)
struct FBRWeaponProjectileExplosionRepWithSeed final : public FBRWeaponProjectileExplosionRep
{
public:
	int32                                         RandomSeed;                                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponProjectileExplosionRepWithSeed) == 0x000008, "Wrong alignment on FBRWeaponProjectileExplosionRepWithSeed");
static_assert(sizeof(FBRWeaponProjectileExplosionRepWithSeed) == 0x000048, "Wrong size on FBRWeaponProjectileExplosionRepWithSeed");
static_assert(offsetof(FBRWeaponProjectileExplosionRepWithSeed, RandomSeed) == 0x000040, "Member 'FBRWeaponProjectileExplosionRepWithSeed::RandomSeed' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponProjectileInfo
// 0x0010 (0x0010 - 0x0000)
struct FBRWeaponProjectileInfo final
{
public:
	class ABRWeaponProjectile*                    Instance;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           RemovalTimerHandle;                                // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponProjectileInfo) == 0x000008, "Wrong alignment on FBRWeaponProjectileInfo");
static_assert(sizeof(FBRWeaponProjectileInfo) == 0x000010, "Wrong size on FBRWeaponProjectileInfo");
static_assert(offsetof(FBRWeaponProjectileInfo, Instance) == 0x000000, "Member 'FBRWeaponProjectileInfo::Instance' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectileInfo, RemovalTimerHandle) == 0x000008, "Member 'FBRWeaponProjectileInfo::RemovalTimerHandle' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponProjectilePredictionInfo
// 0x0050 (0x0050 - 0x0000)
struct FBRWeaponProjectilePredictionInfo final
{
public:
	TArray<class ABRWeaponProjectile*>            Instances;                                         // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint16                                        SequenceNumber;                                    // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SourceStateIndex;                                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClientSpawnLocation;                               // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClientSpawnDirection;                              // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           RemovalTimerHandle;                                // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponProjectilePredictionInfo) == 0x000008, "Wrong alignment on FBRWeaponProjectilePredictionInfo");
static_assert(sizeof(FBRWeaponProjectilePredictionInfo) == 0x000050, "Wrong size on FBRWeaponProjectilePredictionInfo");
static_assert(offsetof(FBRWeaponProjectilePredictionInfo, Instances) == 0x000000, "Member 'FBRWeaponProjectilePredictionInfo::Instances' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectilePredictionInfo, SequenceNumber) == 0x000010, "Member 'FBRWeaponProjectilePredictionInfo::SequenceNumber' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectilePredictionInfo, SourceStateIndex) == 0x000012, "Member 'FBRWeaponProjectilePredictionInfo::SourceStateIndex' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectilePredictionInfo, ClientSpawnLocation) == 0x000018, "Member 'FBRWeaponProjectilePredictionInfo::ClientSpawnLocation' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectilePredictionInfo, ClientSpawnDirection) == 0x000030, "Member 'FBRWeaponProjectilePredictionInfo::ClientSpawnDirection' has a wrong offset!");
static_assert(offsetof(FBRWeaponProjectilePredictionInfo, RemovalTimerHandle) == 0x000048, "Member 'FBRWeaponProjectilePredictionInfo::RemovalTimerHandle' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponResourceSlot
// 0x0018 (0x0018 - 0x0000)
struct FBRWeaponResourceSlot final
{
public:
	class UBRWeaponResource*                      Resource;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Starting;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPickupGivesStarting;                              // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadStarting;                                     // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponResourceSlot) == 0x000008, "Wrong alignment on FBRWeaponResourceSlot");
static_assert(sizeof(FBRWeaponResourceSlot) == 0x000018, "Wrong size on FBRWeaponResourceSlot");
static_assert(offsetof(FBRWeaponResourceSlot, Resource) == 0x000000, "Member 'FBRWeaponResourceSlot::Resource' has a wrong offset!");
static_assert(offsetof(FBRWeaponResourceSlot, Min) == 0x000008, "Member 'FBRWeaponResourceSlot::Min' has a wrong offset!");
static_assert(offsetof(FBRWeaponResourceSlot, Max) == 0x00000C, "Member 'FBRWeaponResourceSlot::Max' has a wrong offset!");
static_assert(offsetof(FBRWeaponResourceSlot, Starting) == 0x000010, "Member 'FBRWeaponResourceSlot::Starting' has a wrong offset!");
static_assert(offsetof(FBRWeaponResourceSlot, bPickupGivesStarting) == 0x000014, "Member 'FBRWeaponResourceSlot::bPickupGivesStarting' has a wrong offset!");
static_assert(offsetof(FBRWeaponResourceSlot, bLoadStarting) == 0x000015, "Member 'FBRWeaponResourceSlot::bLoadStarting' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponSimulationContext
// 0x0010 (0x0010 - 0x0000)
struct FBRWeaponSimulationContext final
{
public:
	EBRWeaponSimulationType                       SimType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FullDeltaTime;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRWeaponInputKeys                            InputKeys;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInputUnequip;                                     // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponSimulationContext) == 0x000004, "Wrong alignment on FBRWeaponSimulationContext");
static_assert(sizeof(FBRWeaponSimulationContext) == 0x000010, "Wrong size on FBRWeaponSimulationContext");
static_assert(offsetof(FBRWeaponSimulationContext, SimType) == 0x000000, "Member 'FBRWeaponSimulationContext::SimType' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationContext, FullDeltaTime) == 0x000004, "Member 'FBRWeaponSimulationContext::FullDeltaTime' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationContext, DeltaTime) == 0x000008, "Member 'FBRWeaponSimulationContext::DeltaTime' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationContext, InputKeys) == 0x00000C, "Member 'FBRWeaponSimulationContext::InputKeys' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationContext, bInputUnequip) == 0x00000D, "Member 'FBRWeaponSimulationContext::bInputUnequip' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponSimulationFeedback
// 0x0003 (0x0003 - 0x0000)
struct FBRWeaponSimulationFeedback final
{
public:
	bool                                          bStateTransitionOccured;                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnequipFinished;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateTriggerRequested;                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponSimulationFeedback) == 0x000001, "Wrong alignment on FBRWeaponSimulationFeedback");
static_assert(sizeof(FBRWeaponSimulationFeedback) == 0x000003, "Wrong size on FBRWeaponSimulationFeedback");
static_assert(offsetof(FBRWeaponSimulationFeedback, bStateTransitionOccured) == 0x000000, "Member 'FBRWeaponSimulationFeedback::bStateTransitionOccured' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationFeedback, bUnequipFinished) == 0x000001, "Member 'FBRWeaponSimulationFeedback::bUnequipFinished' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationFeedback, bStateTriggerRequested) == 0x000002, "Member 'FBRWeaponSimulationFeedback::bStateTriggerRequested' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponSimulationContext_Character
// 0x0010 (0x0010 - 0x0000)
struct FBRWeaponSimulationContext_Character final
{
public:
	EBRWeaponSimulationType                       SimType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FullDeltaTime;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x1];                                        // 0x000C(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EBRWeaponInputKeys                            InputKeys;                                         // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponSimulationContext_Character) == 0x000004, "Wrong alignment on FBRWeaponSimulationContext_Character");
static_assert(sizeof(FBRWeaponSimulationContext_Character) == 0x000010, "Wrong size on FBRWeaponSimulationContext_Character");
static_assert(offsetof(FBRWeaponSimulationContext_Character, SimType) == 0x000000, "Member 'FBRWeaponSimulationContext_Character::SimType' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationContext_Character, FullDeltaTime) == 0x000004, "Member 'FBRWeaponSimulationContext_Character::FullDeltaTime' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationContext_Character, DeltaTime) == 0x000008, "Member 'FBRWeaponSimulationContext_Character::DeltaTime' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationContext_Character, InputKeys) == 0x00000D, "Member 'FBRWeaponSimulationContext_Character::InputKeys' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponSimulationFeedback_Character
// 0x0002 (0x0002 - 0x0000)
struct FBRWeaponSimulationFeedback_Character final
{
public:
	bool                                          bStateTransitionOccured;                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeaponSwitchOccured;                              // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponSimulationFeedback_Character) == 0x000001, "Wrong alignment on FBRWeaponSimulationFeedback_Character");
static_assert(sizeof(FBRWeaponSimulationFeedback_Character) == 0x000002, "Wrong size on FBRWeaponSimulationFeedback_Character");
static_assert(offsetof(FBRWeaponSimulationFeedback_Character, bStateTransitionOccured) == 0x000000, "Member 'FBRWeaponSimulationFeedback_Character::bStateTransitionOccured' has a wrong offset!");
static_assert(offsetof(FBRWeaponSimulationFeedback_Character, bWeaponSwitchOccured) == 0x000001, "Member 'FBRWeaponSimulationFeedback_Character::bWeaponSwitchOccured' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponStateTransitionCondition_Float
// 0x0008 (0x0008 - 0x0000)
struct FBRWeaponStateTransitionCondition_Float final
{
public:
	EBRWeaponStateTransitionOp_Float              Op;                                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponStateTransitionCondition_Float) == 0x000004, "Wrong alignment on FBRWeaponStateTransitionCondition_Float");
static_assert(sizeof(FBRWeaponStateTransitionCondition_Float) == 0x000008, "Wrong size on FBRWeaponStateTransitionCondition_Float");
static_assert(offsetof(FBRWeaponStateTransitionCondition_Float, Op) == 0x000000, "Member 'FBRWeaponStateTransitionCondition_Float::Op' has a wrong offset!");
static_assert(offsetof(FBRWeaponStateTransitionCondition_Float, Value) == 0x000004, "Member 'FBRWeaponStateTransitionCondition_Float::Value' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponStateTransitionCondition_Integer
// 0x0008 (0x0008 - 0x0000)
struct FBRWeaponStateTransitionCondition_Integer
{
public:
	EBRWeaponStateTransitionOp_Integer            Op;                                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponStateTransitionCondition_Integer) == 0x000004, "Wrong alignment on FBRWeaponStateTransitionCondition_Integer");
static_assert(sizeof(FBRWeaponStateTransitionCondition_Integer) == 0x000008, "Wrong size on FBRWeaponStateTransitionCondition_Integer");
static_assert(offsetof(FBRWeaponStateTransitionCondition_Integer, Op) == 0x000000, "Member 'FBRWeaponStateTransitionCondition_Integer::Op' has a wrong offset!");
static_assert(offsetof(FBRWeaponStateTransitionCondition_Integer, Value) == 0x000004, "Member 'FBRWeaponStateTransitionCondition_Integer::Value' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponStateTransitionCondition_Resource
// 0x0010 (0x0018 - 0x0008)
struct FBRWeaponStateTransitionCondition_Resource final : public FBRWeaponStateTransitionCondition_Integer
{
public:
	class UBRWeaponResource*                      Resource;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerValue;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponStateTransitionCondition_Resource) == 0x000008, "Wrong alignment on FBRWeaponStateTransitionCondition_Resource");
static_assert(sizeof(FBRWeaponStateTransitionCondition_Resource) == 0x000018, "Wrong size on FBRWeaponStateTransitionCondition_Resource");
static_assert(offsetof(FBRWeaponStateTransitionCondition_Resource, Resource) == 0x000008, "Member 'FBRWeaponStateTransitionCondition_Resource::Resource' has a wrong offset!");
static_assert(offsetof(FBRWeaponStateTransitionCondition_Resource, bUsePlayerValue) == 0x000010, "Member 'FBRWeaponStateTransitionCondition_Resource::bUsePlayerValue' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponStateTransition
// 0x0038 (0x0038 - 0x0000)
struct FBRWeaponStateTransition final
{
public:
	class FName                                   TargetName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBRWeaponStateTransitionCondition_Float ConditionValue_Time;                               // 0x000C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBRWeaponStateTransitionCondition_Integer ConditionValue_AmmoLoaded;                         // 0x0014(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         ConditionValue_InputsPressed;                      // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ConditionValue_InputsReleased;                     // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConditionValue_RandomChance;                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bConditionEnable_Time : 1;                         // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConditionEnable_AmmoLoaded : 1;                   // 0x0024(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConditionEnable_InputsPressed : 1;                // 0x0024(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConditionEnable_InputsReleased : 1;               // 0x0024(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConditionEnable_RandomChance : 1;                 // 0x0024(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConditionEnable_StateTrigger : 1;                 // 0x0024(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBRWeaponStateTransitionCondition_Resource> ConditionValues_Resource;                          // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponStateTransition) == 0x000008, "Wrong alignment on FBRWeaponStateTransition");
static_assert(sizeof(FBRWeaponStateTransition) == 0x000038, "Wrong size on FBRWeaponStateTransition");
static_assert(offsetof(FBRWeaponStateTransition, TargetName) == 0x000000, "Member 'FBRWeaponStateTransition::TargetName' has a wrong offset!");
static_assert(offsetof(FBRWeaponStateTransition, ConditionValue_Time) == 0x00000C, "Member 'FBRWeaponStateTransition::ConditionValue_Time' has a wrong offset!");
static_assert(offsetof(FBRWeaponStateTransition, ConditionValue_AmmoLoaded) == 0x000014, "Member 'FBRWeaponStateTransition::ConditionValue_AmmoLoaded' has a wrong offset!");
static_assert(offsetof(FBRWeaponStateTransition, ConditionValue_InputsPressed) == 0x00001C, "Member 'FBRWeaponStateTransition::ConditionValue_InputsPressed' has a wrong offset!");
static_assert(offsetof(FBRWeaponStateTransition, ConditionValue_InputsReleased) == 0x00001D, "Member 'FBRWeaponStateTransition::ConditionValue_InputsReleased' has a wrong offset!");
static_assert(offsetof(FBRWeaponStateTransition, ConditionValue_RandomChance) == 0x000020, "Member 'FBRWeaponStateTransition::ConditionValue_RandomChance' has a wrong offset!");
static_assert(offsetof(FBRWeaponStateTransition, ConditionValues_Resource) == 0x000028, "Member 'FBRWeaponStateTransition::ConditionValues_Resource' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponStateTransitionContainer
// 0x0010 (0x0010 - 0x0000)
struct FBRWeaponStateTransitionContainer final
{
public:
	TArray<struct FBRWeaponStateTransition>       Transitions;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponStateTransitionContainer) == 0x000008, "Wrong alignment on FBRWeaponStateTransitionContainer");
static_assert(sizeof(FBRWeaponStateTransitionContainer) == 0x000010, "Wrong size on FBRWeaponStateTransitionContainer");
static_assert(offsetof(FBRWeaponStateTransitionContainer, Transitions) == 0x000000, "Member 'FBRWeaponStateTransitionContainer::Transitions' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponState
// 0x0050 (0x0050 - 0x0000)
struct FBRWeaponState final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBRWeaponStateBehavior*                 SpecialBehavior;                                   // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponAnimation;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlayerAnimation;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             WeaponSound;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeaponSoundBone;                                   // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           CameraShake;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSuspending;                                  // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBRWeaponStateTransitionContainer      TransitionContainer;                               // 0x0040(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponState) == 0x000008, "Wrong alignment on FBRWeaponState");
static_assert(sizeof(FBRWeaponState) == 0x000050, "Wrong size on FBRWeaponState");
static_assert(offsetof(FBRWeaponState, Name) == 0x000000, "Member 'FBRWeaponState::Name' has a wrong offset!");
static_assert(offsetof(FBRWeaponState, SpecialBehavior) == 0x000008, "Member 'FBRWeaponState::SpecialBehavior' has a wrong offset!");
static_assert(offsetof(FBRWeaponState, WeaponAnimation) == 0x000010, "Member 'FBRWeaponState::WeaponAnimation' has a wrong offset!");
static_assert(offsetof(FBRWeaponState, PlayerAnimation) == 0x000018, "Member 'FBRWeaponState::PlayerAnimation' has a wrong offset!");
static_assert(offsetof(FBRWeaponState, WeaponSound) == 0x000020, "Member 'FBRWeaponState::WeaponSound' has a wrong offset!");
static_assert(offsetof(FBRWeaponState, WeaponSoundBone) == 0x000028, "Member 'FBRWeaponState::WeaponSoundBone' has a wrong offset!");
static_assert(offsetof(FBRWeaponState, CameraShake) == 0x000030, "Member 'FBRWeaponState::CameraShake' has a wrong offset!");
static_assert(offsetof(FBRWeaponState, bAllowSuspending) == 0x000038, "Member 'FBRWeaponState::bAllowSuspending' has a wrong offset!");
static_assert(offsetof(FBRWeaponState, TransitionContainer) == 0x000040, "Member 'FBRWeaponState::TransitionContainer' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponResourceChange
// 0x0010 (0x0010 - 0x0000)
struct FBRWeaponResourceChange final
{
public:
	class UBRWeaponResource*                      Resource;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBRWeaponResourceChangeType                   ChangeType;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponResourceChange) == 0x000008, "Wrong alignment on FBRWeaponResourceChange");
static_assert(sizeof(FBRWeaponResourceChange) == 0x000010, "Wrong size on FBRWeaponResourceChange");
static_assert(offsetof(FBRWeaponResourceChange, Resource) == 0x000000, "Member 'FBRWeaponResourceChange::Resource' has a wrong offset!");
static_assert(offsetof(FBRWeaponResourceChange, Amount) == 0x000008, "Member 'FBRWeaponResourceChange::Amount' has a wrong offset!");
static_assert(offsetof(FBRWeaponResourceChange, ChangeType) == 0x00000C, "Member 'FBRWeaponResourceChange::ChangeType' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponMeleeOverlapResponse
// 0x0017 (0x0018 - 0x0001)
struct FBRWeaponMeleeOverlapResponse : public FBRWeaponMeleeResponse
{
public:
	bool                                          bAddActorToIgnore;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UBRWeaponExplosion>         Explosion;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreezeFrameDuration;                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBRWeaponMeleeOverlapResponse) == 0x000008, "Wrong alignment on FBRWeaponMeleeOverlapResponse");
static_assert(sizeof(FBRWeaponMeleeOverlapResponse) == 0x000018, "Wrong size on FBRWeaponMeleeOverlapResponse");
static_assert(offsetof(FBRWeaponMeleeOverlapResponse, bAddActorToIgnore) == 0x000001, "Member 'FBRWeaponMeleeOverlapResponse::bAddActorToIgnore' has a wrong offset!");
static_assert(offsetof(FBRWeaponMeleeOverlapResponse, Explosion) == 0x000008, "Member 'FBRWeaponMeleeOverlapResponse::Explosion' has a wrong offset!");
static_assert(offsetof(FBRWeaponMeleeOverlapResponse, FreezeFrameDuration) == 0x000010, "Member 'FBRWeaponMeleeOverlapResponse::FreezeFrameDuration' has a wrong offset!");

// ScriptStruct Brickadia.BRWeaponMeleeOverlapResponseDamageable
// 0x0020 (0x0038 - 0x0018)
struct FBRWeaponMeleeOverlapResponseDamageable final : public FBRWeaponMeleeOverlapResponse
{
public:
	TSubclassOf<class UBRDamageType>              DamageType;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBackstab;                                      // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UBRDamageType>              BackstabDamageType;                                // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackstabDamage;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackstabLeeway;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWeaponMeleeOverlapResponseDamageable) == 0x000008, "Wrong alignment on FBRWeaponMeleeOverlapResponseDamageable");
static_assert(sizeof(FBRWeaponMeleeOverlapResponseDamageable) == 0x000038, "Wrong size on FBRWeaponMeleeOverlapResponseDamageable");
static_assert(offsetof(FBRWeaponMeleeOverlapResponseDamageable, DamageType) == 0x000018, "Member 'FBRWeaponMeleeOverlapResponseDamageable::DamageType' has a wrong offset!");
static_assert(offsetof(FBRWeaponMeleeOverlapResponseDamageable, Damage) == 0x000020, "Member 'FBRWeaponMeleeOverlapResponseDamageable::Damage' has a wrong offset!");
static_assert(offsetof(FBRWeaponMeleeOverlapResponseDamageable, bCanBackstab) == 0x000024, "Member 'FBRWeaponMeleeOverlapResponseDamageable::bCanBackstab' has a wrong offset!");
static_assert(offsetof(FBRWeaponMeleeOverlapResponseDamageable, BackstabDamageType) == 0x000028, "Member 'FBRWeaponMeleeOverlapResponseDamageable::BackstabDamageType' has a wrong offset!");
static_assert(offsetof(FBRWeaponMeleeOverlapResponseDamageable, BackstabDamage) == 0x000030, "Member 'FBRWeaponMeleeOverlapResponseDamageable::BackstabDamage' has a wrong offset!");
static_assert(offsetof(FBRWeaponMeleeOverlapResponseDamageable, BackstabLeeway) == 0x000034, "Member 'FBRWeaponMeleeOverlapResponseDamageable::BackstabLeeway' has a wrong offset!");

// ScriptStruct Brickadia.BRWorldMetadata
// 0x0010 (0x0010 - 0x0000)
struct FBRWorldMetadata final
{
public:
	class FString                                 Environment;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRWorldMetadata) == 0x000008, "Wrong alignment on FBRWorldMetadata");
static_assert(sizeof(FBRWorldMetadata) == 0x000010, "Wrong size on FBRWorldMetadata");
static_assert(offsetof(FBRWorldMetadata, Environment) == 0x000000, "Member 'FBRWorldMetadata::Environment' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedPrimaryAssetId
// 0x0010 (0x0010 - 0x0000)
struct FBRSavedPrimaryAssetId final
{
public:
	class FName                                   PrimaryAssetType;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrimaryAssetName;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedPrimaryAssetId) == 0x000004, "Wrong alignment on FBRSavedPrimaryAssetId");
static_assert(sizeof(FBRSavedPrimaryAssetId) == 0x000010, "Wrong size on FBRSavedPrimaryAssetId");
static_assert(offsetof(FBRSavedPrimaryAssetId, PrimaryAssetType) == 0x000000, "Member 'FBRSavedPrimaryAssetId::PrimaryAssetType' has a wrong offset!");
static_assert(offsetof(FBRSavedPrimaryAssetId, PrimaryAssetName) == 0x000008, "Member 'FBRSavedPrimaryAssetId::PrimaryAssetName' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedOwnerTableSoA
// 0x0070 (0x0070 - 0x0000)
struct FBRSavedOwnerTableSoA final
{
public:
	TArray<struct FBRGuid>                        UserIds;                                           // 0x0000(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserNames;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DisplayNames;                                      // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                EntityCounts;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                BrickCounts;                                       // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                ComponentCounts;                                   // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                WireCounts;                                        // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedOwnerTableSoA) == 0x000008, "Wrong alignment on FBRSavedOwnerTableSoA");
static_assert(sizeof(FBRSavedOwnerTableSoA) == 0x000070, "Wrong size on FBRSavedOwnerTableSoA");
static_assert(offsetof(FBRSavedOwnerTableSoA, UserIds) == 0x000000, "Member 'FBRSavedOwnerTableSoA::UserIds' has a wrong offset!");
static_assert(offsetof(FBRSavedOwnerTableSoA, UserNames) == 0x000010, "Member 'FBRSavedOwnerTableSoA::UserNames' has a wrong offset!");
static_assert(offsetof(FBRSavedOwnerTableSoA, DisplayNames) == 0x000020, "Member 'FBRSavedOwnerTableSoA::DisplayNames' has a wrong offset!");
static_assert(offsetof(FBRSavedOwnerTableSoA, EntityCounts) == 0x000030, "Member 'FBRSavedOwnerTableSoA::EntityCounts' has a wrong offset!");
static_assert(offsetof(FBRSavedOwnerTableSoA, BrickCounts) == 0x000040, "Member 'FBRSavedOwnerTableSoA::BrickCounts' has a wrong offset!");
static_assert(offsetof(FBRSavedOwnerTableSoA, ComponentCounts) == 0x000050, "Member 'FBRSavedOwnerTableSoA::ComponentCounts' has a wrong offset!");
static_assert(offsetof(FBRSavedOwnerTableSoA, WireCounts) == 0x000060, "Member 'FBRSavedOwnerTableSoA::WireCounts' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedGlobalDataSoA
// 0x0080 (0x0080 - 0x0000)
struct FBRSavedGlobalDataSoA final
{
public:
	TArray<class FName>                           EntityTypeNames;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BasicBrickAssetNames;                              // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ProceduralBrickAssetNames;                         // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           MaterialAssetNames;                                // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ComponentTypeNames;                                // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ComponentDataStructNames;                          // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ComponentWirePortNames;                            // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBRSavedPrimaryAssetId>         ExternalAssetReferences;                           // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedGlobalDataSoA) == 0x000008, "Wrong alignment on FBRSavedGlobalDataSoA");
static_assert(sizeof(FBRSavedGlobalDataSoA) == 0x000080, "Wrong size on FBRSavedGlobalDataSoA");
static_assert(offsetof(FBRSavedGlobalDataSoA, EntityTypeNames) == 0x000000, "Member 'FBRSavedGlobalDataSoA::EntityTypeNames' has a wrong offset!");
static_assert(offsetof(FBRSavedGlobalDataSoA, BasicBrickAssetNames) == 0x000010, "Member 'FBRSavedGlobalDataSoA::BasicBrickAssetNames' has a wrong offset!");
static_assert(offsetof(FBRSavedGlobalDataSoA, ProceduralBrickAssetNames) == 0x000020, "Member 'FBRSavedGlobalDataSoA::ProceduralBrickAssetNames' has a wrong offset!");
static_assert(offsetof(FBRSavedGlobalDataSoA, MaterialAssetNames) == 0x000030, "Member 'FBRSavedGlobalDataSoA::MaterialAssetNames' has a wrong offset!");
static_assert(offsetof(FBRSavedGlobalDataSoA, ComponentTypeNames) == 0x000040, "Member 'FBRSavedGlobalDataSoA::ComponentTypeNames' has a wrong offset!");
static_assert(offsetof(FBRSavedGlobalDataSoA, ComponentDataStructNames) == 0x000050, "Member 'FBRSavedGlobalDataSoA::ComponentDataStructNames' has a wrong offset!");
static_assert(offsetof(FBRSavedGlobalDataSoA, ComponentWirePortNames) == 0x000060, "Member 'FBRSavedGlobalDataSoA::ComponentWirePortNames' has a wrong offset!");
static_assert(offsetof(FBRSavedGlobalDataSoA, ExternalAssetReferences) == 0x000070, "Member 'FBRSavedGlobalDataSoA::ExternalAssetReferences' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedEntityChunkSoA
// 0x00C0 (0x00C0 - 0x0000)
struct FBRSavedEntityChunkSoA final
{
public:
	TArray<struct FBRSavedEntityTypeCounter>      TypeCounters;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                PersistentIndices;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                OwnerIndices;                                      // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector3f>                      Locations;                                         // 0x0030(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuat4f>                        Rotations;                                         // 0x0040(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBRSavedBitFlags                       WeldParentFlags;                                   // 0x0050(0x0010)(NativeAccessSpecifierPublic)
	struct FBRSavedBitFlags                       PhysicsLockedFlags;                                // 0x0060(0x0010)(NativeAccessSpecifierPublic)
	struct FBRSavedBitFlags                       PhysicsSleepingFlags;                              // 0x0070(0x0010)(NativeAccessSpecifierPublic)
	TArray<uint32>                                WeldParentIndices;                                 // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector3f>                      LinearVelocities;                                  // 0x0090(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector3f>                      AngularVelocities;                                 // 0x00A0(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBRSavedEntityColors>           ColorsAndAlphas;                                   // 0x00B0(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedEntityChunkSoA) == 0x000008, "Wrong alignment on FBRSavedEntityChunkSoA");
static_assert(sizeof(FBRSavedEntityChunkSoA) == 0x0000C0, "Wrong size on FBRSavedEntityChunkSoA");
static_assert(offsetof(FBRSavedEntityChunkSoA, TypeCounters) == 0x000000, "Member 'FBRSavedEntityChunkSoA::TypeCounters' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, PersistentIndices) == 0x000010, "Member 'FBRSavedEntityChunkSoA::PersistentIndices' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, OwnerIndices) == 0x000020, "Member 'FBRSavedEntityChunkSoA::OwnerIndices' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, Locations) == 0x000030, "Member 'FBRSavedEntityChunkSoA::Locations' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, Rotations) == 0x000040, "Member 'FBRSavedEntityChunkSoA::Rotations' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, WeldParentFlags) == 0x000050, "Member 'FBRSavedEntityChunkSoA::WeldParentFlags' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, PhysicsLockedFlags) == 0x000060, "Member 'FBRSavedEntityChunkSoA::PhysicsLockedFlags' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, PhysicsSleepingFlags) == 0x000070, "Member 'FBRSavedEntityChunkSoA::PhysicsSleepingFlags' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, WeldParentIndices) == 0x000080, "Member 'FBRSavedEntityChunkSoA::WeldParentIndices' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, LinearVelocities) == 0x000090, "Member 'FBRSavedEntityChunkSoA::LinearVelocities' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, AngularVelocities) == 0x0000A0, "Member 'FBRSavedEntityChunkSoA::AngularVelocities' has a wrong offset!");
static_assert(offsetof(FBRSavedEntityChunkSoA, ColorsAndAlphas) == 0x0000B0, "Member 'FBRSavedEntityChunkSoA::ColorsAndAlphas' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedBrickChunkIndexSoA
// 0x0040 (0x0040 - 0x0000)
struct FBRSavedBrickChunkIndexSoA final
{
public:
	TArray<struct FBRSavedChunk3DIndex>           Chunk3DIndices;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                NumBricks;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                NumComponents;                                     // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                NumWires;                                          // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedBrickChunkIndexSoA) == 0x000008, "Wrong alignment on FBRSavedBrickChunkIndexSoA");
static_assert(sizeof(FBRSavedBrickChunkIndexSoA) == 0x000040, "Wrong size on FBRSavedBrickChunkIndexSoA");
static_assert(offsetof(FBRSavedBrickChunkIndexSoA, Chunk3DIndices) == 0x000000, "Member 'FBRSavedBrickChunkIndexSoA::Chunk3DIndices' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkIndexSoA, NumBricks) == 0x000010, "Member 'FBRSavedBrickChunkIndexSoA::NumBricks' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkIndexSoA, NumComponents) == 0x000020, "Member 'FBRSavedBrickChunkIndexSoA::NumComponents' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkIndexSoA, NumWires) == 0x000030, "Member 'FBRSavedBrickChunkIndexSoA::NumWires' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedBrickSizeCounter
// 0x0008 (0x0008 - 0x0000)
struct FBRSavedBrickSizeCounter final
{
public:
	uint32                                        AssetIndex;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumSizes;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedBrickSizeCounter) == 0x000004, "Wrong alignment on FBRSavedBrickSizeCounter");
static_assert(sizeof(FBRSavedBrickSizeCounter) == 0x000008, "Wrong size on FBRSavedBrickSizeCounter");
static_assert(offsetof(FBRSavedBrickSizeCounter, AssetIndex) == 0x000000, "Member 'FBRSavedBrickSizeCounter::AssetIndex' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickSizeCounter, NumSizes) == 0x000004, "Member 'FBRSavedBrickSizeCounter::NumSizes' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedRelativeBrickPosition
// 0x0006 (0x0006 - 0x0000)
struct FBRSavedRelativeBrickPosition final
{
public:
	int16                                         X;                                                 // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Y;                                                 // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Z;                                                 // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedRelativeBrickPosition) == 0x000002, "Wrong alignment on FBRSavedRelativeBrickPosition");
static_assert(sizeof(FBRSavedRelativeBrickPosition) == 0x000006, "Wrong size on FBRSavedRelativeBrickPosition");
static_assert(offsetof(FBRSavedRelativeBrickPosition, X) == 0x000000, "Member 'FBRSavedRelativeBrickPosition::X' has a wrong offset!");
static_assert(offsetof(FBRSavedRelativeBrickPosition, Y) == 0x000002, "Member 'FBRSavedRelativeBrickPosition::Y' has a wrong offset!");
static_assert(offsetof(FBRSavedRelativeBrickPosition, Z) == 0x000004, "Member 'FBRSavedRelativeBrickPosition::Z' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedBrickChunkSoA
// 0x00D8 (0x00D8 - 0x0000)
struct FBRSavedBrickChunkSoA final
{
public:
	uint32                                        ProceduralBrickStartingIndex;                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBRSavedBrickSizeCounter>       BrickSizeCounters;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBRSavedBrickSize>              BrickSizes;                                        // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                BrickTypeIndices;                                  // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                OwnerIndices;                                      // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBRSavedRelativeBrickPosition>  RelativePositions;                                 // 0x0048(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Orientations;                                      // 0x0058(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBRSavedBitFlags                       CollisionFlags_Player;                             // 0x0068(0x0010)(NativeAccessSpecifierPublic)
	struct FBRSavedBitFlags                       CollisionFlags_Weapon;                             // 0x0078(0x0010)(NativeAccessSpecifierPublic)
	struct FBRSavedBitFlags                       CollisionFlags_Interaction;                        // 0x0088(0x0010)(NativeAccessSpecifierPublic)
	struct FBRSavedBitFlags                       CollisionFlags_Tool;                               // 0x0098(0x0010)(NativeAccessSpecifierPublic)
	struct FBRSavedBitFlags                       VisibilityFlags;                                   // 0x00A8(0x0010)(NativeAccessSpecifierPublic)
	TArray<uint8>                                 MaterialIndices;                                   // 0x00B8(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBRSavedBrickColor>             ColorsAndAlphas;                                   // 0x00C8(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedBrickChunkSoA) == 0x000008, "Wrong alignment on FBRSavedBrickChunkSoA");
static_assert(sizeof(FBRSavedBrickChunkSoA) == 0x0000D8, "Wrong size on FBRSavedBrickChunkSoA");
static_assert(offsetof(FBRSavedBrickChunkSoA, ProceduralBrickStartingIndex) == 0x000000, "Member 'FBRSavedBrickChunkSoA::ProceduralBrickStartingIndex' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, BrickSizeCounters) == 0x000008, "Member 'FBRSavedBrickChunkSoA::BrickSizeCounters' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, BrickSizes) == 0x000018, "Member 'FBRSavedBrickChunkSoA::BrickSizes' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, BrickTypeIndices) == 0x000028, "Member 'FBRSavedBrickChunkSoA::BrickTypeIndices' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, OwnerIndices) == 0x000038, "Member 'FBRSavedBrickChunkSoA::OwnerIndices' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, RelativePositions) == 0x000048, "Member 'FBRSavedBrickChunkSoA::RelativePositions' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, Orientations) == 0x000058, "Member 'FBRSavedBrickChunkSoA::Orientations' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, CollisionFlags_Player) == 0x000068, "Member 'FBRSavedBrickChunkSoA::CollisionFlags_Player' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, CollisionFlags_Weapon) == 0x000078, "Member 'FBRSavedBrickChunkSoA::CollisionFlags_Weapon' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, CollisionFlags_Interaction) == 0x000088, "Member 'FBRSavedBrickChunkSoA::CollisionFlags_Interaction' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, CollisionFlags_Tool) == 0x000098, "Member 'FBRSavedBrickChunkSoA::CollisionFlags_Tool' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, VisibilityFlags) == 0x0000A8, "Member 'FBRSavedBrickChunkSoA::VisibilityFlags' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, MaterialIndices) == 0x0000B8, "Member 'FBRSavedBrickChunkSoA::MaterialIndices' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickChunkSoA, ColorsAndAlphas) == 0x0000C8, "Member 'FBRSavedBrickChunkSoA::ColorsAndAlphas' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedBrickComponentTypeCounter
// 0x0008 (0x0008 - 0x0000)
struct FBRSavedBrickComponentTypeCounter final
{
public:
	uint32                                        TypeIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumInstances;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedBrickComponentTypeCounter) == 0x000004, "Wrong alignment on FBRSavedBrickComponentTypeCounter");
static_assert(sizeof(FBRSavedBrickComponentTypeCounter) == 0x000008, "Wrong size on FBRSavedBrickComponentTypeCounter");
static_assert(offsetof(FBRSavedBrickComponentTypeCounter, TypeIndex) == 0x000000, "Member 'FBRSavedBrickComponentTypeCounter::TypeIndex' has a wrong offset!");
static_assert(offsetof(FBRSavedBrickComponentTypeCounter, NumInstances) == 0x000004, "Member 'FBRSavedBrickComponentTypeCounter::NumInstances' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedComponentChunkSoA
// 0x0060 (0x0060 - 0x0000)
struct FBRSavedComponentChunkSoA final
{
public:
	TArray<struct FBRSavedBrickComponentTypeCounter> ComponentTypeCounters;                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                ComponentBrickIndices;                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                JointBrickIndices;                                 // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                JointEntityReferences;                             // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector3f>                      JointInitialRelativeOffsets;                       // 0x0040(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuat4f>                        JointInitialRelativeRotations;                     // 0x0050(0x0010)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedComponentChunkSoA) == 0x000008, "Wrong alignment on FBRSavedComponentChunkSoA");
static_assert(sizeof(FBRSavedComponentChunkSoA) == 0x000060, "Wrong size on FBRSavedComponentChunkSoA");
static_assert(offsetof(FBRSavedComponentChunkSoA, ComponentTypeCounters) == 0x000000, "Member 'FBRSavedComponentChunkSoA::ComponentTypeCounters' has a wrong offset!");
static_assert(offsetof(FBRSavedComponentChunkSoA, ComponentBrickIndices) == 0x000010, "Member 'FBRSavedComponentChunkSoA::ComponentBrickIndices' has a wrong offset!");
static_assert(offsetof(FBRSavedComponentChunkSoA, JointBrickIndices) == 0x000020, "Member 'FBRSavedComponentChunkSoA::JointBrickIndices' has a wrong offset!");
static_assert(offsetof(FBRSavedComponentChunkSoA, JointEntityReferences) == 0x000030, "Member 'FBRSavedComponentChunkSoA::JointEntityReferences' has a wrong offset!");
static_assert(offsetof(FBRSavedComponentChunkSoA, JointInitialRelativeOffsets) == 0x000040, "Member 'FBRSavedComponentChunkSoA::JointInitialRelativeOffsets' has a wrong offset!");
static_assert(offsetof(FBRSavedComponentChunkSoA, JointInitialRelativeRotations) == 0x000050, "Member 'FBRSavedComponentChunkSoA::JointInitialRelativeRotations' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedLocalWirePortSource
// 0x0008 (0x0008 - 0x0000)
struct FBRSavedLocalWirePortSource final
{
public:
	uint32                                        BrickIndexInChunk;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ComponentTypeIndex;                                // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PortIndex;                                         // 0x0006(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedLocalWirePortSource) == 0x000004, "Wrong alignment on FBRSavedLocalWirePortSource");
static_assert(sizeof(FBRSavedLocalWirePortSource) == 0x000008, "Wrong size on FBRSavedLocalWirePortSource");
static_assert(offsetof(FBRSavedLocalWirePortSource, BrickIndexInChunk) == 0x000000, "Member 'FBRSavedLocalWirePortSource::BrickIndexInChunk' has a wrong offset!");
static_assert(offsetof(FBRSavedLocalWirePortSource, ComponentTypeIndex) == 0x000004, "Member 'FBRSavedLocalWirePortSource::ComponentTypeIndex' has a wrong offset!");
static_assert(offsetof(FBRSavedLocalWirePortSource, PortIndex) == 0x000006, "Member 'FBRSavedLocalWirePortSource::PortIndex' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedWirePortTarget
// 0x0008 (0x0008 - 0x0000)
struct FBRSavedWirePortTarget final
{
public:
	uint32                                        BrickIndexInChunk;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ComponentTypeIndex;                                // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PortIndex;                                         // 0x0006(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedWirePortTarget) == 0x000004, "Wrong alignment on FBRSavedWirePortTarget");
static_assert(sizeof(FBRSavedWirePortTarget) == 0x000008, "Wrong size on FBRSavedWirePortTarget");
static_assert(offsetof(FBRSavedWirePortTarget, BrickIndexInChunk) == 0x000000, "Member 'FBRSavedWirePortTarget::BrickIndexInChunk' has a wrong offset!");
static_assert(offsetof(FBRSavedWirePortTarget, ComponentTypeIndex) == 0x000004, "Member 'FBRSavedWirePortTarget::ComponentTypeIndex' has a wrong offset!");
static_assert(offsetof(FBRSavedWirePortTarget, PortIndex) == 0x000006, "Member 'FBRSavedWirePortTarget::PortIndex' has a wrong offset!");

// ScriptStruct Brickadia.BRSavedWireChunkSoA
// 0x0050 (0x0050 - 0x0000)
struct FBRSavedWireChunkSoA final
{
public:
	TArray<struct FBRSavedRemoteWirePortSource>   RemoteWireSources;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBRSavedLocalWirePortSource>    LocalWireSources;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBRSavedWirePortTarget>         RemoteWireTargets;                                 // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBRSavedWirePortTarget>         LocalWireTargets;                                  // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBRSavedBitFlags                       PendingPropagationFlags;                           // 0x0040(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRSavedWireChunkSoA) == 0x000008, "Wrong alignment on FBRSavedWireChunkSoA");
static_assert(sizeof(FBRSavedWireChunkSoA) == 0x000050, "Wrong size on FBRSavedWireChunkSoA");
static_assert(offsetof(FBRSavedWireChunkSoA, RemoteWireSources) == 0x000000, "Member 'FBRSavedWireChunkSoA::RemoteWireSources' has a wrong offset!");
static_assert(offsetof(FBRSavedWireChunkSoA, LocalWireSources) == 0x000010, "Member 'FBRSavedWireChunkSoA::LocalWireSources' has a wrong offset!");
static_assert(offsetof(FBRSavedWireChunkSoA, RemoteWireTargets) == 0x000020, "Member 'FBRSavedWireChunkSoA::RemoteWireTargets' has a wrong offset!");
static_assert(offsetof(FBRSavedWireChunkSoA, LocalWireTargets) == 0x000030, "Member 'FBRSavedWireChunkSoA::LocalWireTargets' has a wrong offset!");
static_assert(offsetof(FBRSavedWireChunkSoA, PendingPropagationFlags) == 0x000040, "Member 'FBRSavedWireChunkSoA::PendingPropagationFlags' has a wrong offset!");

// ScriptStruct Brickadia.BRChatCommandArgMetaData
// 0x0028 (0x0028 - 0x0000)
struct FBRChatCommandArgMetaData final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EBRChatCommandArgType                         Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRChatCommandArgMetaData) == 0x000008, "Wrong alignment on FBRChatCommandArgMetaData");
static_assert(sizeof(FBRChatCommandArgMetaData) == 0x000028, "Wrong size on FBRChatCommandArgMetaData");
static_assert(offsetof(FBRChatCommandArgMetaData, Name) == 0x000000, "Member 'FBRChatCommandArgMetaData::Name' has a wrong offset!");
static_assert(offsetof(FBRChatCommandArgMetaData, Type) == 0x000010, "Member 'FBRChatCommandArgMetaData::Type' has a wrong offset!");
static_assert(offsetof(FBRChatCommandArgMetaData, Description) == 0x000018, "Member 'FBRChatCommandArgMetaData::Description' has a wrong offset!");

// ScriptStruct Brickadia.BRChatCommandMetaData
// 0x0030 (0x0030 - 0x0000)
struct FBRChatCommandMetaData final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FName>                           RequiredServerPermissions;                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBRChatCommandArgMetaData>      ArgumentMetaData;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRChatCommandMetaData) == 0x000008, "Wrong alignment on FBRChatCommandMetaData");
static_assert(sizeof(FBRChatCommandMetaData) == 0x000030, "Wrong size on FBRChatCommandMetaData");
static_assert(offsetof(FBRChatCommandMetaData, Description) == 0x000000, "Member 'FBRChatCommandMetaData::Description' has a wrong offset!");
static_assert(offsetof(FBRChatCommandMetaData, RequiredServerPermissions) == 0x000010, "Member 'FBRChatCommandMetaData::RequiredServerPermissions' has a wrong offset!");
static_assert(offsetof(FBRChatCommandMetaData, ArgumentMetaData) == 0x000020, "Member 'FBRChatCommandMetaData::ArgumentMetaData' has a wrong offset!");

// ScriptStruct Brickadia.BRChatCommandDescriptor
// 0x0048 (0x0048 - 0x0000)
struct FBRChatCommandDescriptor final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandlerFunction;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRChatCommandMetaData                 MetaData;                                          // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRChatCommandDescriptor) == 0x000008, "Wrong alignment on FBRChatCommandDescriptor");
static_assert(sizeof(FBRChatCommandDescriptor) == 0x000048, "Wrong size on FBRChatCommandDescriptor");
static_assert(offsetof(FBRChatCommandDescriptor, Name) == 0x000000, "Member 'FBRChatCommandDescriptor::Name' has a wrong offset!");
static_assert(offsetof(FBRChatCommandDescriptor, HandlerFunction) == 0x000010, "Member 'FBRChatCommandDescriptor::HandlerFunction' has a wrong offset!");
static_assert(offsetof(FBRChatCommandDescriptor, MetaData) == 0x000018, "Member 'FBRChatCommandDescriptor::MetaData' has a wrong offset!");

// ScriptStruct Brickadia.BRRuntimeChatCommand
// 0x0040 (0x0040 - 0x0000)
struct FBRRuntimeChatCommand final
{
public:
	class UBRChatCommandLibrary*                  Library;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFunction*                              Function;                                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRChatCommandMetaData                 MetaData;                                          // 0x0010(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRRuntimeChatCommand) == 0x000008, "Wrong alignment on FBRRuntimeChatCommand");
static_assert(sizeof(FBRRuntimeChatCommand) == 0x000040, "Wrong size on FBRRuntimeChatCommand");
static_assert(offsetof(FBRRuntimeChatCommand, Library) == 0x000000, "Member 'FBRRuntimeChatCommand::Library' has a wrong offset!");
static_assert(offsetof(FBRRuntimeChatCommand, Function) == 0x000008, "Member 'FBRRuntimeChatCommand::Function' has a wrong offset!");
static_assert(offsetof(FBRRuntimeChatCommand, MetaData) == 0x000010, "Member 'FBRRuntimeChatCommand::MetaData' has a wrong offset!");

// ScriptStruct Brickadia.BRRuntimeChatCommandOverloads
// 0x0010 (0x0010 - 0x0000)
struct FBRRuntimeChatCommandOverloads final
{
public:
	TArray<struct FBRRuntimeChatCommand>          Overloads;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBRRuntimeChatCommandOverloads) == 0x000008, "Wrong alignment on FBRRuntimeChatCommandOverloads");
static_assert(sizeof(FBRRuntimeChatCommandOverloads) == 0x000010, "Wrong size on FBRRuntimeChatCommandOverloads");
static_assert(offsetof(FBRRuntimeChatCommandOverloads, Overloads) == 0x000000, "Member 'FBRRuntimeChatCommandOverloads::Overloads' has a wrong offset!");

// ScriptStruct Brickadia.InspectorPropertyValueNetSerializerConfig
// 0x0008 (0x0018 - 0x0010)
struct FInspectorPropertyValueNetSerializerConfig final : public FNetSerializerConfig
{
public:
	uint32                                        MaxAllowedDataSize;                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInspectorPropertyValueNetSerializerConfig) == 0x000008, "Wrong alignment on FInspectorPropertyValueNetSerializerConfig");
static_assert(sizeof(FInspectorPropertyValueNetSerializerConfig) == 0x000018, "Wrong size on FInspectorPropertyValueNetSerializerConfig");
static_assert(offsetof(FInspectorPropertyValueNetSerializerConfig, MaxAllowedDataSize) == 0x000010, "Member 'FInspectorPropertyValueNetSerializerConfig::MaxAllowedDataSize' has a wrong offset!");

// ScriptStruct Brickadia.JsonRequest_Login
// 0x0020 (0x0020 - 0x0000)
struct FJsonRequest_Login final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonRequest_Login) == 0x000008, "Wrong alignment on FJsonRequest_Login");
static_assert(sizeof(FJsonRequest_Login) == 0x000020, "Wrong size on FJsonRequest_Login");
static_assert(offsetof(FJsonRequest_Login, Email) == 0x000000, "Member 'FJsonRequest_Login::Email' has a wrong offset!");
static_assert(offsetof(FJsonRequest_Login, Password) == 0x000010, "Member 'FJsonRequest_Login::Password' has a wrong offset!");

// ScriptStruct Brickadia.JsonRequest_LoginSteam
// 0x0010 (0x0010 - 0x0000)
struct FJsonRequest_LoginSteam final
{
public:
	class FString                                 TicketBase64;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonRequest_LoginSteam) == 0x000008, "Wrong alignment on FJsonRequest_LoginSteam");
static_assert(sizeof(FJsonRequest_LoginSteam) == 0x000010, "Wrong size on FJsonRequest_LoginSteam");
static_assert(offsetof(FJsonRequest_LoginSteam, TicketBase64) == 0x000000, "Member 'FJsonRequest_LoginSteam::TicketBase64' has a wrong offset!");

// ScriptStruct Brickadia.JsonRequest_ConnectSteam
// 0x0030 (0x0030 - 0x0000)
struct FJsonRequest_ConnectSteam final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketBase64;                                      // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonRequest_ConnectSteam) == 0x000008, "Wrong alignment on FJsonRequest_ConnectSteam");
static_assert(sizeof(FJsonRequest_ConnectSteam) == 0x000030, "Wrong size on FJsonRequest_ConnectSteam");
static_assert(offsetof(FJsonRequest_ConnectSteam, Email) == 0x000000, "Member 'FJsonRequest_ConnectSteam::Email' has a wrong offset!");
static_assert(offsetof(FJsonRequest_ConnectSteam, Password) == 0x000010, "Member 'FJsonRequest_ConnectSteam::Password' has a wrong offset!");
static_assert(offsetof(FJsonRequest_ConnectSteam, TicketBase64) == 0x000020, "Member 'FJsonRequest_ConnectSteam::TicketBase64' has a wrong offset!");

// ScriptStruct Brickadia.JsonRequest_RegisterSteam
// 0x0020 (0x0020 - 0x0000)
struct FJsonRequest_RegisterSteam final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketBase64;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonRequest_RegisterSteam) == 0x000008, "Wrong alignment on FJsonRequest_RegisterSteam");
static_assert(sizeof(FJsonRequest_RegisterSteam) == 0x000020, "Wrong size on FJsonRequest_RegisterSteam");
static_assert(offsetof(FJsonRequest_RegisterSteam, UserName) == 0x000000, "Member 'FJsonRequest_RegisterSteam::UserName' has a wrong offset!");
static_assert(offsetof(FJsonRequest_RegisterSteam, TicketBase64) == 0x000010, "Member 'FJsonRequest_RegisterSteam::TicketBase64' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_Login
// 0x0030 (0x0030 - 0x0000)
struct FJsonResponse_Login final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 SessionToken;                                      // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_Login) == 0x000008, "Wrong alignment on FJsonResponse_Login");
static_assert(sizeof(FJsonResponse_Login) == 0x000030, "Wrong size on FJsonResponse_Login");
static_assert(offsetof(FJsonResponse_Login, Error) == 0x000000, "Member 'FJsonResponse_Login::Error' has a wrong offset!");
static_assert(offsetof(FJsonResponse_Login, SessionToken) == 0x000020, "Member 'FJsonResponse_Login::SessionToken' has a wrong offset!");

// ScriptStruct Brickadia.JsonRequest_ChangeDisplayName
// 0x0010 (0x0010 - 0x0000)
struct FJsonRequest_ChangeDisplayName final
{
public:
	class FString                                 NewDisplayName;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonRequest_ChangeDisplayName) == 0x000008, "Wrong alignment on FJsonRequest_ChangeDisplayName");
static_assert(sizeof(FJsonRequest_ChangeDisplayName) == 0x000010, "Wrong size on FJsonRequest_ChangeDisplayName");
static_assert(offsetof(FJsonRequest_ChangeDisplayName, NewDisplayName) == 0x000000, "Member 'FJsonRequest_ChangeDisplayName::NewDisplayName' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_ChangeDisplayName
// 0x0030 (0x0030 - 0x0000)
struct FJsonResponse_ChangeDisplayName final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ValidatedDisplayName;                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_ChangeDisplayName) == 0x000008, "Wrong alignment on FJsonResponse_ChangeDisplayName");
static_assert(sizeof(FJsonResponse_ChangeDisplayName) == 0x000030, "Wrong size on FJsonResponse_ChangeDisplayName");
static_assert(offsetof(FJsonResponse_ChangeDisplayName, Error) == 0x000000, "Member 'FJsonResponse_ChangeDisplayName::Error' has a wrong offset!");
static_assert(offsetof(FJsonResponse_ChangeDisplayName, ValidatedDisplayName) == 0x000020, "Member 'FJsonResponse_ChangeDisplayName::ValidatedDisplayName' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_CheckLogin_Payload
// 0x0050 (0x0050 - 0x0000)
struct FJsonResponse_CheckLogin_Payload final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserDisplayName;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBRGuid                                UserId;                                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LicenseTypeName;                                   // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValidBefore;                                       // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_CheckLogin_Payload) == 0x000008, "Wrong alignment on FJsonResponse_CheckLogin_Payload");
static_assert(sizeof(FJsonResponse_CheckLogin_Payload) == 0x000050, "Wrong size on FJsonResponse_CheckLogin_Payload");
static_assert(offsetof(FJsonResponse_CheckLogin_Payload, UserName) == 0x000000, "Member 'FJsonResponse_CheckLogin_Payload::UserName' has a wrong offset!");
static_assert(offsetof(FJsonResponse_CheckLogin_Payload, UserDisplayName) == 0x000010, "Member 'FJsonResponse_CheckLogin_Payload::UserDisplayName' has a wrong offset!");
static_assert(offsetof(FJsonResponse_CheckLogin_Payload, UserId) == 0x000020, "Member 'FJsonResponse_CheckLogin_Payload::UserId' has a wrong offset!");
static_assert(offsetof(FJsonResponse_CheckLogin_Payload, LicenseTypeName) == 0x000030, "Member 'FJsonResponse_CheckLogin_Payload::LicenseTypeName' has a wrong offset!");
static_assert(offsetof(FJsonResponse_CheckLogin_Payload, ValidBefore) == 0x000040, "Member 'FJsonResponse_CheckLogin_Payload::ValidBefore' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_CheckLogin
// 0x0048 (0x0048 - 0x0000)
struct FJsonResponse_CheckLogin final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Signature;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ServerTime;                                        // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_CheckLogin) == 0x000008, "Wrong alignment on FJsonResponse_CheckLogin");
static_assert(sizeof(FJsonResponse_CheckLogin) == 0x000048, "Wrong size on FJsonResponse_CheckLogin");
static_assert(offsetof(FJsonResponse_CheckLogin, Error) == 0x000000, "Member 'FJsonResponse_CheckLogin::Error' has a wrong offset!");
static_assert(offsetof(FJsonResponse_CheckLogin, Payload) == 0x000020, "Member 'FJsonResponse_CheckLogin::Payload' has a wrong offset!");
static_assert(offsetof(FJsonResponse_CheckLogin, Signature) == 0x000030, "Member 'FJsonResponse_CheckLogin::Signature' has a wrong offset!");
static_assert(offsetof(FJsonResponse_CheckLogin, ServerTime) == 0x000040, "Member 'FJsonResponse_CheckLogin::ServerTime' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_GamePing
// 0x0028 (0x0028 - 0x0000)
struct FJsonResponse_GamePing final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              ServerTime;                                        // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_GamePing) == 0x000008, "Wrong alignment on FJsonResponse_GamePing");
static_assert(sizeof(FJsonResponse_GamePing) == 0x000028, "Wrong size on FJsonResponse_GamePing");
static_assert(offsetof(FJsonResponse_GamePing, Error) == 0x000000, "Member 'FJsonResponse_GamePing::Error' has a wrong offset!");
static_assert(offsetof(FJsonResponse_GamePing, ServerTime) == 0x000020, "Member 'FJsonResponse_GamePing::ServerTime' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_ConfirmConnectChallenge
// 0x0040 (0x0040 - 0x0000)
struct FJsonResponse_ConfirmConnectChallenge final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Digest;                                            // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_ConfirmConnectChallenge) == 0x000008, "Wrong alignment on FJsonResponse_ConfirmConnectChallenge");
static_assert(sizeof(FJsonResponse_ConfirmConnectChallenge) == 0x000040, "Wrong size on FJsonResponse_ConfirmConnectChallenge");
static_assert(offsetof(FJsonResponse_ConfirmConnectChallenge, Error) == 0x000000, "Member 'FJsonResponse_ConfirmConnectChallenge::Error' has a wrong offset!");
static_assert(offsetof(FJsonResponse_ConfirmConnectChallenge, Payload) == 0x000020, "Member 'FJsonResponse_ConfirmConnectChallenge::Payload' has a wrong offset!");
static_assert(offsetof(FJsonResponse_ConfirmConnectChallenge, Digest) == 0x000030, "Member 'FJsonResponse_ConfirmConnectChallenge::Digest' has a wrong offset!");

// ScriptStruct Brickadia.JsonRequest_PostServer
// 0x0068 (0x0068 - 0x0000)
struct FJsonRequest_PostServer final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bricks;                                            // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerLimit;                                       // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Passworded;                                        // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Dedicated;                                         // 0x003D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Unlisted;                                          // 0x003E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBRGuid>                        PlayerHandles;                                     // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 EosPuid;                                           // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GenerateInviteCode;                                // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJsonRequest_PostServer) == 0x000008, "Wrong alignment on FJsonRequest_PostServer");
static_assert(sizeof(FJsonRequest_PostServer) == 0x000068, "Wrong size on FJsonRequest_PostServer");
static_assert(offsetof(FJsonRequest_PostServer, Name) == 0x000000, "Member 'FJsonRequest_PostServer::Name' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, Description) == 0x000010, "Member 'FJsonRequest_PostServer::Description' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, Map) == 0x000020, "Member 'FJsonRequest_PostServer::Map' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, Port) == 0x000030, "Member 'FJsonRequest_PostServer::Port' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, Bricks) == 0x000034, "Member 'FJsonRequest_PostServer::Bricks' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, PlayerLimit) == 0x000038, "Member 'FJsonRequest_PostServer::PlayerLimit' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, Passworded) == 0x00003C, "Member 'FJsonRequest_PostServer::Passworded' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, Dedicated) == 0x00003D, "Member 'FJsonRequest_PostServer::Dedicated' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, Unlisted) == 0x00003E, "Member 'FJsonRequest_PostServer::Unlisted' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, PlayerHandles) == 0x000040, "Member 'FJsonRequest_PostServer::PlayerHandles' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, EosPuid) == 0x000050, "Member 'FJsonRequest_PostServer::EosPuid' has a wrong offset!");
static_assert(offsetof(FJsonRequest_PostServer, GenerateInviteCode) == 0x000060, "Member 'FJsonRequest_PostServer::GenerateInviteCode' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_PostServer_InvalidHandle
// 0x0030 (0x0030 - 0x0000)
struct FJsonResponse_PostServer_InvalidHandle final
{
public:
	struct FBRGuid                                HandleId;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReasonCode;                                        // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_PostServer_InvalidHandle) == 0x000008, "Wrong alignment on FJsonResponse_PostServer_InvalidHandle");
static_assert(sizeof(FJsonResponse_PostServer_InvalidHandle) == 0x000030, "Wrong size on FJsonResponse_PostServer_InvalidHandle");
static_assert(offsetof(FJsonResponse_PostServer_InvalidHandle, HandleId) == 0x000000, "Member 'FJsonResponse_PostServer_InvalidHandle::HandleId' has a wrong offset!");
static_assert(offsetof(FJsonResponse_PostServer_InvalidHandle, Reason) == 0x000010, "Member 'FJsonResponse_PostServer_InvalidHandle::Reason' has a wrong offset!");
static_assert(offsetof(FJsonResponse_PostServer_InvalidHandle, ReasonCode) == 0x000020, "Member 'FJsonResponse_PostServer_InvalidHandle::ReasonCode' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_PostServer
// 0x0060 (0x0060 - 0x0000)
struct FJsonResponse_PostServer final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBRGuid                                ID;                                                // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthSecret;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJsonResponse_PostServer_InvalidHandle> InvalidHandles;                                    // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InviteCode;                                        // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_PostServer) == 0x000008, "Wrong alignment on FJsonResponse_PostServer");
static_assert(sizeof(FJsonResponse_PostServer) == 0x000060, "Wrong size on FJsonResponse_PostServer");
static_assert(offsetof(FJsonResponse_PostServer, Error) == 0x000000, "Member 'FJsonResponse_PostServer::Error' has a wrong offset!");
static_assert(offsetof(FJsonResponse_PostServer, ID) == 0x000020, "Member 'FJsonResponse_PostServer::ID' has a wrong offset!");
static_assert(offsetof(FJsonResponse_PostServer, AuthSecret) == 0x000030, "Member 'FJsonResponse_PostServer::AuthSecret' has a wrong offset!");
static_assert(offsetof(FJsonResponse_PostServer, InvalidHandles) == 0x000040, "Member 'FJsonResponse_PostServer::InvalidHandles' has a wrong offset!");
static_assert(offsetof(FJsonResponse_PostServer, InviteCode) == 0x000050, "Member 'FJsonResponse_PostServer::InviteCode' has a wrong offset!");

// ScriptStruct Brickadia.JsonRequest_CheckTrust
// 0x0020 (0x0020 - 0x0000)
struct FJsonRequest_CheckTrust final
{
public:
	struct FBRGuid                                GivingUserId;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBRGuid>                        ReceivingUserIds;                                  // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonRequest_CheckTrust) == 0x000008, "Wrong alignment on FJsonRequest_CheckTrust");
static_assert(sizeof(FJsonRequest_CheckTrust) == 0x000020, "Wrong size on FJsonRequest_CheckTrust");
static_assert(offsetof(FJsonRequest_CheckTrust, GivingUserId) == 0x000000, "Member 'FJsonRequest_CheckTrust::GivingUserId' has a wrong offset!");
static_assert(offsetof(FJsonRequest_CheckTrust, ReceivingUserIds) == 0x000010, "Member 'FJsonRequest_CheckTrust::ReceivingUserIds' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_CheckTrust
// 0x0030 (0x0030 - 0x0000)
struct FJsonResponse_CheckTrust final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         TrustStates;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_CheckTrust) == 0x000008, "Wrong alignment on FJsonResponse_CheckTrust");
static_assert(sizeof(FJsonResponse_CheckTrust) == 0x000030, "Wrong size on FJsonResponse_CheckTrust");
static_assert(offsetof(FJsonResponse_CheckTrust, Error) == 0x000000, "Member 'FJsonResponse_CheckTrust::Error' has a wrong offset!");
static_assert(offsetof(FJsonResponse_CheckTrust, TrustStates) == 0x000020, "Member 'FJsonResponse_CheckTrust::TrustStates' has a wrong offset!");

// ScriptStruct Brickadia.JsonRequest_SetTrustLevel
// 0x0020 (0x0020 - 0x0000)
struct FJsonRequest_SetTrustLevel final
{
public:
	struct FBRGuid                                UserId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TrustState;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonRequest_SetTrustLevel) == 0x000008, "Wrong alignment on FJsonRequest_SetTrustLevel");
static_assert(sizeof(FJsonRequest_SetTrustLevel) == 0x000020, "Wrong size on FJsonRequest_SetTrustLevel");
static_assert(offsetof(FJsonRequest_SetTrustLevel, UserId) == 0x000000, "Member 'FJsonRequest_SetTrustLevel::UserId' has a wrong offset!");
static_assert(offsetof(FJsonRequest_SetTrustLevel, TrustState) == 0x000010, "Member 'FJsonRequest_SetTrustLevel::TrustState' has a wrong offset!");

// ScriptStruct Brickadia.JsonResponse_SetTrustLevel
// 0x0020 (0x0020 - 0x0000)
struct FJsonResponse_SetTrustLevel final
{
public:
	struct FJsonServiceError                      Error;                                             // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonResponse_SetTrustLevel) == 0x000008, "Wrong alignment on FJsonResponse_SetTrustLevel");
static_assert(sizeof(FJsonResponse_SetTrustLevel) == 0x000020, "Wrong size on FJsonResponse_SetTrustLevel");
static_assert(offsetof(FJsonResponse_SetTrustLevel, Error) == 0x000000, "Member 'FJsonResponse_SetTrustLevel::Error' has a wrong offset!");

// ScriptStruct Brickadia.HierarchicalRichImageRow
// 0x00B8 (0x00C0 - 0x0008)
struct FHierarchicalRichImageRow final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHierarchicalRichImageRow) == 0x000010, "Wrong alignment on FHierarchicalRichImageRow");
static_assert(sizeof(FHierarchicalRichImageRow) == 0x0000C0, "Wrong size on FHierarchicalRichImageRow");
static_assert(offsetof(FHierarchicalRichImageRow, Brush) == 0x000010, "Member 'FHierarchicalRichImageRow::Brush' has a wrong offset!");

}

