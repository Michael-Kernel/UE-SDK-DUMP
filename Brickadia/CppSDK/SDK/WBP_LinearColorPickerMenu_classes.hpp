#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LinearColorPickerMenu

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_LinearColorPickerMenu.WBP_LinearColorPickerMenu_C
// 0x00A8 (0x0378 - 0x02D0)
class UWBP_LinearColorPickerMenu_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UColorWheel*                            ColorWheel;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_TextBox_LessEmphasis_C*             HexInputBox;                                       // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Spinbox_Default_C*                  InputBlue;                                         // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Spinbox_Default_C*                  InputGreen;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Spinbox_Default_C*                  InputHue;                                          // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Spinbox_Default_C*                  InputOpacity;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Spinbox_Default_C*                  InputRed;                                          // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Spinbox_Default_C*                  InputSaturation;                                   // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Spinbox_Default_C*                  InputValue;                                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_TextBlock_Default_C*                TextOpacity;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Slider_Vertical_C*                  ValueSlider;                                       // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const struct FLinearColor& NewColor, bool bCommit)> OnColorChanged;                                    // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnInteractionBegin;                                // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnInteractionEnd;                                  // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bAllowOpacity;                                     // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BndEvt__ColorWheel_K2Node_ComponentBoundEvent_0_OnLinearColorValueChangedEvent__DelegateSignature(const struct FLinearColor& Value);
	void BndEvt__ColorWheel_K2Node_ComponentBoundEvent_26_OnCaptureChangedEvent__DelegateSignature();
	void BndEvt__ColorWheel_K2Node_ComponentBoundEvent_27_OnCaptureChangedEvent__DelegateSignature();
	void BndEvt__HexInputBox_K2Node_ComponentBoundEvent_2_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	void BndEvt__InputBlue_K2Node_ComponentBoundEvent_28_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__InputBlue_K2Node_ComponentBoundEvent_4_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__InputBlue_K2Node_ComponentBoundEvent_6_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputBlue_K2Node_ComponentBoundEvent_8_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputGreen_K2Node_ComponentBoundEvent_10_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputGreen_K2Node_ComponentBoundEvent_29_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__InputGreen_K2Node_ComponentBoundEvent_5_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputGreen_K2Node_ComponentBoundEvent_9_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__InputHue_K2Node_ComponentBoundEvent_11_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputHue_K2Node_ComponentBoundEvent_14_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__InputHue_K2Node_ComponentBoundEvent_15_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputHue_K2Node_ComponentBoundEvent_30_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__InputOpacity_K2Node_ComponentBoundEvent_16_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__InputOpacity_K2Node_ComponentBoundEvent_17_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputOpacity_K2Node_ComponentBoundEvent_31_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__InputOpacity_K2Node_ComponentBoundEvent_7_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputRed_K2Node_ComponentBoundEvent_18_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__InputRed_K2Node_ComponentBoundEvent_19_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputRed_K2Node_ComponentBoundEvent_32_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__InputRed_K2Node_ComponentBoundEvent_3_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputSaturation_K2Node_ComponentBoundEvent_12_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputSaturation_K2Node_ComponentBoundEvent_20_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__InputSaturation_K2Node_ComponentBoundEvent_21_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputSaturation_K2Node_ComponentBoundEvent_33_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__InputValue_K2Node_ComponentBoundEvent_13_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputValue_K2Node_ComponentBoundEvent_22_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__InputValue_K2Node_ComponentBoundEvent_23_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__InputValue_K2Node_ComponentBoundEvent_34_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__ValueSlider_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void BndEvt__ValueSlider_K2Node_ComponentBoundEvent_24_OnMouseCaptureBeginEvent__DelegateSignature();
	void BndEvt__ValueSlider_K2Node_ComponentBoundEvent_25_OnMouseCaptureEndEvent__DelegateSignature();
	void Construct();
	void ExecuteUbergraph_WBP_LinearColorPickerMenu(int32 EntryPoint);
	void HandleColorChanged(bool Notify, bool bCommit);
	void PropagateToHSVInputs(const struct FLinearColor& HSV_Color);
	void PropagateToOpacityInput(const struct FLinearColor& HSV_Color);
	void PropagateToRGBInputs(const struct FLinearColor& RGB_Color);
	void SetHSVColor(const struct FLinearColor& HSV_Color, bool Notify, bool bCommit);
	void SetRGBColor(const struct FLinearColor& RGB_Color, bool Notify, bool bCommit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_LinearColorPickerMenu_C">();
	}
	static class UWBP_LinearColorPickerMenu_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_LinearColorPickerMenu_C>();
	}
};
static_assert(alignof(UWBP_LinearColorPickerMenu_C) == 0x000008, "Wrong alignment on UWBP_LinearColorPickerMenu_C");
static_assert(sizeof(UWBP_LinearColorPickerMenu_C) == 0x000378, "Wrong size on UWBP_LinearColorPickerMenu_C");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, UberGraphFrame) == 0x0002D0, "Member 'UWBP_LinearColorPickerMenu_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, ColorWheel) == 0x0002D8, "Member 'UWBP_LinearColorPickerMenu_C::ColorWheel' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, HexInputBox) == 0x0002E0, "Member 'UWBP_LinearColorPickerMenu_C::HexInputBox' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, InputBlue) == 0x0002E8, "Member 'UWBP_LinearColorPickerMenu_C::InputBlue' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, InputGreen) == 0x0002F0, "Member 'UWBP_LinearColorPickerMenu_C::InputGreen' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, InputHue) == 0x0002F8, "Member 'UWBP_LinearColorPickerMenu_C::InputHue' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, InputOpacity) == 0x000300, "Member 'UWBP_LinearColorPickerMenu_C::InputOpacity' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, InputRed) == 0x000308, "Member 'UWBP_LinearColorPickerMenu_C::InputRed' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, InputSaturation) == 0x000310, "Member 'UWBP_LinearColorPickerMenu_C::InputSaturation' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, InputValue) == 0x000318, "Member 'UWBP_LinearColorPickerMenu_C::InputValue' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, TextOpacity) == 0x000320, "Member 'UWBP_LinearColorPickerMenu_C::TextOpacity' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, ValueSlider) == 0x000328, "Member 'UWBP_LinearColorPickerMenu_C::ValueSlider' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, Color) == 0x000330, "Member 'UWBP_LinearColorPickerMenu_C::Color' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, OnColorChanged) == 0x000340, "Member 'UWBP_LinearColorPickerMenu_C::OnColorChanged' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, OnInteractionBegin) == 0x000350, "Member 'UWBP_LinearColorPickerMenu_C::OnInteractionBegin' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, OnInteractionEnd) == 0x000360, "Member 'UWBP_LinearColorPickerMenu_C::OnInteractionEnd' has a wrong offset!");
static_assert(offsetof(UWBP_LinearColorPickerMenu_C, bAllowOpacity) == 0x000370, "Member 'UWBP_LinearColorPickerMenu_C::bAllowOpacity' has a wrong offset!");

}

