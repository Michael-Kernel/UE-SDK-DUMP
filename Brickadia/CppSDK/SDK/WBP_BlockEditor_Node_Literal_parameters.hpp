#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_BlockEditor_Node_Literal

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Brickadia_structs.hpp"


namespace SDK::Params
{

// Function WBP_BlockEditor_Node_Literal.WBP_BlockEditor_Node_Literal_C.ExecuteUbergraph_WBP_BlockEditor_Node_Literal
// 0x0170 (0x0170 - 0x0000)
struct WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_TypeTooltip_C*                     CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0010(0x0038)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0048(0x0078)(ConstParm)
	struct FBHResolvedTypeInfo                    K2Node_Event_Type;                                 // 0x00C0(0x0038)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x00F8(0x0078)(ConstParm)
};
static_assert(alignof(WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal) == 0x000008, "Wrong alignment on WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal");
static_assert(sizeof(WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal) == 0x000170, "Wrong size on WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal");
static_assert(offsetof(WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal, EntryPoint) == 0x000000, "Member 'WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal, CallFunc_Create_ReturnValue) == 0x000008, "Member 'WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal, K2Node_Event_MyGeometry) == 0x000010, "Member 'WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal, K2Node_Event_MouseEvent_1) == 0x000048, "Member 'WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal, K2Node_Event_Type) == 0x0000C0, "Member 'WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal::K2Node_Event_Type' has a wrong offset!");
static_assert(offsetof(WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal, K2Node_Event_MouseEvent) == 0x0000F8, "Member 'WBP_BlockEditor_Node_Literal_C_ExecuteUbergraph_WBP_BlockEditor_Node_Literal::K2Node_Event_MouseEvent' has a wrong offset!");

// Function WBP_BlockEditor_Node_Literal.WBP_BlockEditor_Node_Literal_C.HandleType
// 0x0038 (0x0038 - 0x0000)
struct WBP_BlockEditor_Node_Literal_C_HandleType final
{
public:
	struct FBHResolvedTypeInfo                    Type;                                              // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_BlockEditor_Node_Literal_C_HandleType) == 0x000008, "Wrong alignment on WBP_BlockEditor_Node_Literal_C_HandleType");
static_assert(sizeof(WBP_BlockEditor_Node_Literal_C_HandleType) == 0x000038, "Wrong size on WBP_BlockEditor_Node_Literal_C_HandleType");
static_assert(offsetof(WBP_BlockEditor_Node_Literal_C_HandleType, Type) == 0x000000, "Member 'WBP_BlockEditor_Node_Literal_C_HandleType::Type' has a wrong offset!");

// Function WBP_BlockEditor_Node_Literal.WBP_BlockEditor_Node_Literal_C.OnMouseEnter
// 0x00B0 (0x00B0 - 0x0000)
struct WBP_BlockEditor_Node_Literal_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_BlockEditor_Node_Literal_C_OnMouseEnter) == 0x000008, "Wrong alignment on WBP_BlockEditor_Node_Literal_C_OnMouseEnter");
static_assert(sizeof(WBP_BlockEditor_Node_Literal_C_OnMouseEnter) == 0x0000B0, "Wrong size on WBP_BlockEditor_Node_Literal_C_OnMouseEnter");
static_assert(offsetof(WBP_BlockEditor_Node_Literal_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'WBP_BlockEditor_Node_Literal_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_BlockEditor_Node_Literal_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'WBP_BlockEditor_Node_Literal_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function WBP_BlockEditor_Node_Literal.WBP_BlockEditor_Node_Literal_C.OnMouseLeave
// 0x0078 (0x0078 - 0x0000)
struct WBP_BlockEditor_Node_Literal_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_BlockEditor_Node_Literal_C_OnMouseLeave) == 0x000008, "Wrong alignment on WBP_BlockEditor_Node_Literal_C_OnMouseLeave");
static_assert(sizeof(WBP_BlockEditor_Node_Literal_C_OnMouseLeave) == 0x000078, "Wrong size on WBP_BlockEditor_Node_Literal_C_OnMouseLeave");
static_assert(offsetof(WBP_BlockEditor_Node_Literal_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'WBP_BlockEditor_Node_Literal_C_OnMouseLeave::MouseEvent' has a wrong offset!");

}

