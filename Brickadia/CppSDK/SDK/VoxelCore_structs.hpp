#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VoxelCore

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum VoxelCore.EVoxelAxis
// NumValues: 0x0004
enum class EVoxelAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	EVoxelAxis_MAX                           = 3,
};

// Enum VoxelCore.EVoxelFalloffType
// NumValues: 0x0006
enum class EVoxelFalloffType : uint8
{
	None                                     = 0,
	Linear                                   = 1,
	Smooth                                   = 2,
	Spherical                                = 3,
	Tip                                      = 4,
	EVoxelFalloffType_MAX                    = 5,
};

// Enum VoxelCore.EVoxelPropertyInternalType
// NumValues: 0x000C
enum class EVoxelPropertyInternalType : uint8
{
	Invalid                                  = 0,
	Bool                                     = 1,
	Float                                    = 2,
	Double                                   = 3,
	Int32                                    = 4,
	Int64                                    = 5,
	Name                                     = 6,
	Byte                                     = 7,
	Class                                    = 8,
	Object                                   = 9,
	Struct                                   = 10,
	EVoxelPropertyInternalType_MAX           = 11,
};

// Enum VoxelCore.EVoxelPropertyContainerType
// NumValues: 0x0003
enum class EVoxelPropertyContainerType : uint8
{
	None                                     = 0,
	Array                                    = 1,
	EVoxelPropertyContainerType_MAX          = 2,
};

// Enum VoxelCore.EVoxelSuccess
// NumValues: 0x0003
enum class EVoxelSuccess : uint8
{
	Succeeded                                = 0,
	Failed                                   = 1,
	EVoxelSuccess_MAX                        = 2,
};

// Enum VoxelCore.EVoxelTextureChannel
// NumValues: 0x0005
enum class EVoxelTextureChannel : uint8
{
	R                                        = 0,
	G                                        = 1,
	B                                        = 2,
	A                                        = 3,
	EVoxelTextureChannel_MAX                 = 4,
};

// ScriptStruct VoxelCore.VoxelBox
// 0x0030 (0x0030 - 0x0000)
struct FVoxelBox final
{
public:
	struct FVector                                Min;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Max;                                               // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelBox) == 0x000008, "Wrong alignment on FVoxelBox");
static_assert(sizeof(FVoxelBox) == 0x000030, "Wrong size on FVoxelBox");
static_assert(offsetof(FVoxelBox, Min) == 0x000000, "Member 'FVoxelBox::Min' has a wrong offset!");
static_assert(offsetof(FVoxelBox, Max) == 0x000018, "Member 'FVoxelBox::Max' has a wrong offset!");

// ScriptStruct VoxelCore.VoxelBox2D
// 0x0020 (0x0020 - 0x0000)
struct FVoxelBox2D final
{
public:
	struct FVector2D                              Min;                                               // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Max;                                               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelBox2D) == 0x000008, "Wrong alignment on FVoxelBox2D");
static_assert(sizeof(FVoxelBox2D) == 0x000020, "Wrong size on FVoxelBox2D");
static_assert(offsetof(FVoxelBox2D, Min) == 0x000000, "Member 'FVoxelBox2D::Min' has a wrong offset!");
static_assert(offsetof(FVoxelBox2D, Max) == 0x000010, "Member 'FVoxelBox2D::Max' has a wrong offset!");

// ScriptStruct VoxelCore.VoxelFalloff
// 0x0008 (0x0008 - 0x0000)
struct FVoxelFalloff final
{
public:
	EVoxelFalloffType                             Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Amount;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelFalloff) == 0x000004, "Wrong alignment on FVoxelFalloff");
static_assert(sizeof(FVoxelFalloff) == 0x000008, "Wrong size on FVoxelFalloff");
static_assert(offsetof(FVoxelFalloff, Type) == 0x000000, "Member 'FVoxelFalloff::Type' has a wrong offset!");
static_assert(offsetof(FVoxelFalloff, Amount) == 0x000004, "Member 'FVoxelFalloff::Amount' has a wrong offset!");

// ScriptStruct VoxelCore.VoxelInstancedStruct
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FVoxelInstancedStruct final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelInstancedStruct) == 0x000008, "Wrong alignment on FVoxelInstancedStruct");
static_assert(sizeof(FVoxelInstancedStruct) == 0x000018, "Wrong size on FVoxelInstancedStruct");

// ScriptStruct VoxelCore.VoxelIntBox
// 0x0018 (0x0018 - 0x0000)
struct FVoxelIntBox final
{
public:
	struct FIntVector                             Min;                                               // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Max;                                               // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelIntBox) == 0x000004, "Wrong alignment on FVoxelIntBox");
static_assert(sizeof(FVoxelIntBox) == 0x000018, "Wrong size on FVoxelIntBox");
static_assert(offsetof(FVoxelIntBox, Min) == 0x000000, "Member 'FVoxelIntBox::Min' has a wrong offset!");
static_assert(offsetof(FVoxelIntBox, Max) == 0x00000C, "Member 'FVoxelIntBox::Max' has a wrong offset!");

// ScriptStruct VoxelCore.VoxelIntBox2D
// 0x0010 (0x0010 - 0x0000)
struct FVoxelIntBox2D final
{
public:
	struct FIntPoint                              Min;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Max;                                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelIntBox2D) == 0x000004, "Wrong alignment on FVoxelIntBox2D");
static_assert(sizeof(FVoxelIntBox2D) == 0x000010, "Wrong size on FVoxelIntBox2D");
static_assert(offsetof(FVoxelIntBox2D, Min) == 0x000000, "Member 'FVoxelIntBox2D::Min' has a wrong offset!");
static_assert(offsetof(FVoxelIntBox2D, Max) == 0x000008, "Member 'FVoxelIntBox2D::Max' has a wrong offset!");

// ScriptStruct VoxelCore.VoxelVirtualStruct
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FVoxelVirtualStruct
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelVirtualStruct) == 0x000008, "Wrong alignment on FVoxelVirtualStruct");
static_assert(sizeof(FVoxelVirtualStruct) == 0x000010, "Wrong size on FVoxelVirtualStruct");

// ScriptStruct VoxelCore.VoxelDynamicMaterialParameter
// 0x0000 (0x0010 - 0x0010)
struct FVoxelDynamicMaterialParameter final : public FVoxelVirtualStruct
{
};
static_assert(alignof(FVoxelDynamicMaterialParameter) == 0x000008, "Wrong alignment on FVoxelDynamicMaterialParameter");
static_assert(sizeof(FVoxelDynamicMaterialParameter) == 0x000010, "Wrong size on FVoxelDynamicMaterialParameter");

// ScriptStruct VoxelCore.VoxelMessageToken
// 0x0010 (0x0020 - 0x0010)
struct FVoxelMessageToken : public FVoxelVirtualStruct
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelMessageToken) == 0x000008, "Wrong alignment on FVoxelMessageToken");
static_assert(sizeof(FVoxelMessageToken) == 0x000020, "Wrong size on FVoxelMessageToken");

// ScriptStruct VoxelCore.VoxelMessageToken_Group
// 0x0010 (0x0030 - 0x0020)
struct FVoxelMessageToken_Group final : public FVoxelMessageToken
{
public:
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelMessageToken_Group) == 0x000008, "Wrong alignment on FVoxelMessageToken_Group");
static_assert(sizeof(FVoxelMessageToken_Group) == 0x000030, "Wrong size on FVoxelMessageToken_Group");

// ScriptStruct VoxelCore.VoxelMessageToken_Text
// 0x0010 (0x0030 - 0x0020)
struct FVoxelMessageToken_Text final : public FVoxelMessageToken
{
public:
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelMessageToken_Text) == 0x000008, "Wrong alignment on FVoxelMessageToken_Text");
static_assert(sizeof(FVoxelMessageToken_Text) == 0x000030, "Wrong size on FVoxelMessageToken_Text");

// ScriptStruct VoxelCore.VoxelMessageToken_Object
// 0x0008 (0x0028 - 0x0020)
struct FVoxelMessageToken_Object final : public FVoxelMessageToken
{
public:
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelMessageToken_Object) == 0x000008, "Wrong alignment on FVoxelMessageToken_Object");
static_assert(sizeof(FVoxelMessageToken_Object) == 0x000028, "Wrong size on FVoxelMessageToken_Object");

// ScriptStruct VoxelCore.VoxelMessageToken_Pin
// 0x0018 (0x0038 - 0x0020)
struct FVoxelMessageToken_Pin final : public FVoxelMessageToken
{
public:
	uint8                                         Pad_20[0x18];                                      // 0x0020(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelMessageToken_Pin) == 0x000008, "Wrong alignment on FVoxelMessageToken_Pin");
static_assert(sizeof(FVoxelMessageToken_Pin) == 0x000038, "Wrong size on FVoxelMessageToken_Pin");

// ScriptStruct VoxelCore.VoxelPrimitiveComponentSettings
// 0x0050 (0x0050 - 0x0000)
struct FVoxelPrimitiveComponentSettings final
{
public:
	bool                                          bCastShadow;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndirectLightingCacheQuality                 IndirectLightingCacheQuality;                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELightmapType                                 LightmapType;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmissiveLightSource;                              // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectDynamicIndirectLighting;                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectIndirectLightingWhileHidden;                // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectDistanceFieldLighting;                      // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastDynamicShadow;                                // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastStaticShadow;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShadowCacheInvalidationBehavior              ShadowCacheInvalidationBehavior;                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastVolumetricTranslucentShadow;                  // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastContactShadow;                                // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfShadowOnly;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastFarShadow;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastInsetShadow;                                  // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastCinematicShadow;                              // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastHiddenShadow;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadowAsTwoSided;                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightAttachmentsAsGroup;                          // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeFromLightAttachmentGroup;                  // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSingleSampleShadowFromStationaryLights;           // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x0015(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bVisibleInReflectionCaptures;                      // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleInRealTimeSkyCaptures;                     // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleInRayTracing;                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderInMainPass;                                 // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderInDepthPass;                                // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceivesDecals;                                   // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwnerNoSee;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyOwnerSee;                                     // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTreatAsBackgroundForOcclusion;                    // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAsOccluder;                                    // 0x001F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderCustomDepth;                                // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomDepthStencilValue;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleInSceneCaptureOnly;                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInSceneCapture;                             // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TranslucencySortPriority;                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucencySortDistanceOffset;                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERendererStencilMask                          CustomDepthStencilWriteMask;                       // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URuntimeVirtualTexture*>         RuntimeVirtualTextures;                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int8                                          VirtualTextureLodBias;                             // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          VirtualTextureCullMips;                            // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          VirtualTextureMinCoverage;                         // 0x004A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeVirtualTextureMainPassType            VirtualTextureRenderPassType;                      // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelPrimitiveComponentSettings) == 0x000008, "Wrong alignment on FVoxelPrimitiveComponentSettings");
static_assert(sizeof(FVoxelPrimitiveComponentSettings) == 0x000050, "Wrong size on FVoxelPrimitiveComponentSettings");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bCastShadow) == 0x000000, "Member 'FVoxelPrimitiveComponentSettings::bCastShadow' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, IndirectLightingCacheQuality) == 0x000001, "Member 'FVoxelPrimitiveComponentSettings::IndirectLightingCacheQuality' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, LightmapType) == 0x000002, "Member 'FVoxelPrimitiveComponentSettings::LightmapType' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bEmissiveLightSource) == 0x000003, "Member 'FVoxelPrimitiveComponentSettings::bEmissiveLightSource' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bAffectDynamicIndirectLighting) == 0x000004, "Member 'FVoxelPrimitiveComponentSettings::bAffectDynamicIndirectLighting' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bAffectIndirectLightingWhileHidden) == 0x000005, "Member 'FVoxelPrimitiveComponentSettings::bAffectIndirectLightingWhileHidden' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bAffectDistanceFieldLighting) == 0x000006, "Member 'FVoxelPrimitiveComponentSettings::bAffectDistanceFieldLighting' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bCastDynamicShadow) == 0x000007, "Member 'FVoxelPrimitiveComponentSettings::bCastDynamicShadow' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bCastStaticShadow) == 0x000008, "Member 'FVoxelPrimitiveComponentSettings::bCastStaticShadow' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, ShadowCacheInvalidationBehavior) == 0x000009, "Member 'FVoxelPrimitiveComponentSettings::ShadowCacheInvalidationBehavior' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bCastVolumetricTranslucentShadow) == 0x00000A, "Member 'FVoxelPrimitiveComponentSettings::bCastVolumetricTranslucentShadow' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bCastContactShadow) == 0x00000B, "Member 'FVoxelPrimitiveComponentSettings::bCastContactShadow' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bSelfShadowOnly) == 0x00000C, "Member 'FVoxelPrimitiveComponentSettings::bSelfShadowOnly' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bCastFarShadow) == 0x00000D, "Member 'FVoxelPrimitiveComponentSettings::bCastFarShadow' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bCastInsetShadow) == 0x00000E, "Member 'FVoxelPrimitiveComponentSettings::bCastInsetShadow' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bCastCinematicShadow) == 0x00000F, "Member 'FVoxelPrimitiveComponentSettings::bCastCinematicShadow' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bCastHiddenShadow) == 0x000010, "Member 'FVoxelPrimitiveComponentSettings::bCastHiddenShadow' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bCastShadowAsTwoSided) == 0x000011, "Member 'FVoxelPrimitiveComponentSettings::bCastShadowAsTwoSided' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bLightAttachmentsAsGroup) == 0x000012, "Member 'FVoxelPrimitiveComponentSettings::bLightAttachmentsAsGroup' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bExcludeFromLightAttachmentGroup) == 0x000013, "Member 'FVoxelPrimitiveComponentSettings::bExcludeFromLightAttachmentGroup' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bSingleSampleShadowFromStationaryLights) == 0x000014, "Member 'FVoxelPrimitiveComponentSettings::bSingleSampleShadowFromStationaryLights' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, LightingChannels) == 0x000015, "Member 'FVoxelPrimitiveComponentSettings::LightingChannels' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bVisibleInReflectionCaptures) == 0x000016, "Member 'FVoxelPrimitiveComponentSettings::bVisibleInReflectionCaptures' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bVisibleInRealTimeSkyCaptures) == 0x000017, "Member 'FVoxelPrimitiveComponentSettings::bVisibleInRealTimeSkyCaptures' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bVisibleInRayTracing) == 0x000018, "Member 'FVoxelPrimitiveComponentSettings::bVisibleInRayTracing' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bRenderInMainPass) == 0x000019, "Member 'FVoxelPrimitiveComponentSettings::bRenderInMainPass' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bRenderInDepthPass) == 0x00001A, "Member 'FVoxelPrimitiveComponentSettings::bRenderInDepthPass' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bReceivesDecals) == 0x00001B, "Member 'FVoxelPrimitiveComponentSettings::bReceivesDecals' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bOwnerNoSee) == 0x00001C, "Member 'FVoxelPrimitiveComponentSettings::bOwnerNoSee' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bOnlyOwnerSee) == 0x00001D, "Member 'FVoxelPrimitiveComponentSettings::bOnlyOwnerSee' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bTreatAsBackgroundForOcclusion) == 0x00001E, "Member 'FVoxelPrimitiveComponentSettings::bTreatAsBackgroundForOcclusion' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bUseAsOccluder) == 0x00001F, "Member 'FVoxelPrimitiveComponentSettings::bUseAsOccluder' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bRenderCustomDepth) == 0x000020, "Member 'FVoxelPrimitiveComponentSettings::bRenderCustomDepth' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, CustomDepthStencilValue) == 0x000024, "Member 'FVoxelPrimitiveComponentSettings::CustomDepthStencilValue' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bVisibleInSceneCaptureOnly) == 0x000028, "Member 'FVoxelPrimitiveComponentSettings::bVisibleInSceneCaptureOnly' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, bHiddenInSceneCapture) == 0x000029, "Member 'FVoxelPrimitiveComponentSettings::bHiddenInSceneCapture' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, TranslucencySortPriority) == 0x00002C, "Member 'FVoxelPrimitiveComponentSettings::TranslucencySortPriority' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, TranslucencySortDistanceOffset) == 0x000030, "Member 'FVoxelPrimitiveComponentSettings::TranslucencySortDistanceOffset' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, CustomDepthStencilWriteMask) == 0x000034, "Member 'FVoxelPrimitiveComponentSettings::CustomDepthStencilWriteMask' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, RuntimeVirtualTextures) == 0x000038, "Member 'FVoxelPrimitiveComponentSettings::RuntimeVirtualTextures' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, VirtualTextureLodBias) == 0x000048, "Member 'FVoxelPrimitiveComponentSettings::VirtualTextureLodBias' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, VirtualTextureCullMips) == 0x000049, "Member 'FVoxelPrimitiveComponentSettings::VirtualTextureCullMips' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, VirtualTextureMinCoverage) == 0x00004A, "Member 'FVoxelPrimitiveComponentSettings::VirtualTextureMinCoverage' has a wrong offset!");
static_assert(offsetof(FVoxelPrimitiveComponentSettings, VirtualTextureRenderPassType) == 0x00004B, "Member 'FVoxelPrimitiveComponentSettings::VirtualTextureRenderPassType' has a wrong offset!");

// ScriptStruct VoxelCore.VoxelPropertyType
// 0x0010 (0x0010 - 0x0000)
struct FVoxelPropertyType final
{
public:
	EVoxelPropertyInternalType                    InternalType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EVoxelPropertyContainerType                   ContainerType;                                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UField*                                 PrivateInternalField;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FVoxelPropertyType) == 0x000008, "Wrong alignment on FVoxelPropertyType");
static_assert(sizeof(FVoxelPropertyType) == 0x000010, "Wrong size on FVoxelPropertyType");
static_assert(offsetof(FVoxelPropertyType, InternalType) == 0x000000, "Member 'FVoxelPropertyType::InternalType' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyType, ContainerType) == 0x000001, "Member 'FVoxelPropertyType::ContainerType' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyType, PrivateInternalField) == 0x000008, "Member 'FVoxelPropertyType::PrivateInternalField' has a wrong offset!");

// ScriptStruct VoxelCore.VoxelPropertyValueBase
// 0x0078 (0x0078 - 0x0000)
struct FVoxelPropertyValueBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelPropertyType                     Type;                                              // 0x0008(0x0010)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBool;                                             // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         float_0;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Double;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         int32_0;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         int64_0;                                           // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Name;                                              // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         byte_0;                                            // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    Class;                                             // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                Object;                                            // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVoxelInstancedStruct                  struct_0;                                          // 0x0058(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FName                                   EnumValueName;                                     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FVoxelPropertyValueBase) == 0x000008, "Wrong alignment on FVoxelPropertyValueBase");
static_assert(sizeof(FVoxelPropertyValueBase) == 0x000078, "Wrong size on FVoxelPropertyValueBase");
static_assert(offsetof(FVoxelPropertyValueBase, Type) == 0x000008, "Member 'FVoxelPropertyValueBase::Type' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, bBool) == 0x000018, "Member 'FVoxelPropertyValueBase::bBool' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, float_0) == 0x00001C, "Member 'FVoxelPropertyValueBase::float_0' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, Double) == 0x000020, "Member 'FVoxelPropertyValueBase::Double' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, int32_0) == 0x000028, "Member 'FVoxelPropertyValueBase::int32_0' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, int64_0) == 0x000030, "Member 'FVoxelPropertyValueBase::int64_0' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, Name) == 0x000038, "Member 'FVoxelPropertyValueBase::Name' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, byte_0) == 0x000040, "Member 'FVoxelPropertyValueBase::byte_0' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, Class) == 0x000048, "Member 'FVoxelPropertyValueBase::Class' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, Object) == 0x000050, "Member 'FVoxelPropertyValueBase::Object' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, struct_0) == 0x000058, "Member 'FVoxelPropertyValueBase::struct_0' has a wrong offset!");
static_assert(offsetof(FVoxelPropertyValueBase, EnumValueName) == 0x000070, "Member 'FVoxelPropertyValueBase::EnumValueName' has a wrong offset!");

// ScriptStruct VoxelCore.VoxelPropertyTerminalValue
// 0x0000 (0x0078 - 0x0078)
struct FVoxelPropertyTerminalValue final : public FVoxelPropertyValueBase
{
};
static_assert(alignof(FVoxelPropertyTerminalValue) == 0x000008, "Wrong alignment on FVoxelPropertyTerminalValue");
static_assert(sizeof(FVoxelPropertyTerminalValue) == 0x000078, "Wrong size on FVoxelPropertyTerminalValue");

// ScriptStruct VoxelCore.VoxelPropertyValue
// 0x0010 (0x0088 - 0x0078)
struct FVoxelPropertyValue final : public FVoxelPropertyValueBase
{
public:
	TArray<struct FVoxelPropertyTerminalValue>    Array;                                             // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FVoxelPropertyValue) == 0x000008, "Wrong alignment on FVoxelPropertyValue");
static_assert(sizeof(FVoxelPropertyValue) == 0x000088, "Wrong size on FVoxelPropertyValue");
static_assert(offsetof(FVoxelPropertyValue, Array) == 0x000078, "Member 'FVoxelPropertyValue::Array' has a wrong offset!");

// ScriptStruct VoxelCore.VoxelFloatRange
// 0x0008 (0x0008 - 0x0000)
struct FVoxelFloatRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelFloatRange) == 0x000004, "Wrong alignment on FVoxelFloatRange");
static_assert(sizeof(FVoxelFloatRange) == 0x000008, "Wrong size on FVoxelFloatRange");
static_assert(offsetof(FVoxelFloatRange, Min) == 0x000000, "Member 'FVoxelFloatRange::Min' has a wrong offset!");
static_assert(offsetof(FVoxelFloatRange, Max) == 0x000004, "Member 'FVoxelFloatRange::Max' has a wrong offset!");

// ScriptStruct VoxelCore.VoxelInt32Range
// 0x0008 (0x0008 - 0x0000)
struct FVoxelInt32Range final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelInt32Range) == 0x000004, "Wrong alignment on FVoxelInt32Range");
static_assert(sizeof(FVoxelInt32Range) == 0x000008, "Wrong size on FVoxelInt32Range");
static_assert(offsetof(FVoxelInt32Range, Min) == 0x000000, "Member 'FVoxelInt32Range::Min' has a wrong offset!");
static_assert(offsetof(FVoxelInt32Range, Max) == 0x000004, "Member 'FVoxelInt32Range::Max' has a wrong offset!");

}

