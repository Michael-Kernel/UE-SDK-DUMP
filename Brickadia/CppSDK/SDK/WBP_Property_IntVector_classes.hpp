#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Property_IntVector

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Brickadia_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Property_IntVector.WBP_Property_IntVector_C
// 0x0040 (0x03C0 - 0x0380)
class UWBP_Property_IntVector_C final : public UInspectorPropertyWidgetBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 XImage;                                            // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Spinbox_IntVector_C*                XInputBox;                                         // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 YImage;                                            // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Spinbox_IntVector_C*                YInputBox;                                         // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ZImage;                                            // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_Spinbox_IntVector_C*                ZInputBox;                                         // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bAllowExternalUpdate;                              // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__XInputBox_K2Node_ComponentBoundEvent_10_OnSpinBoxValueChangedEvent__DelegateSignature(int32 InValue);
	void BndEvt__XInputBox_K2Node_ComponentBoundEvent_13_OnSpinBoxValueCommittedEvent__DelegateSignature(int32 InValue, ETextCommit CommitMethod);
	void BndEvt__XInputBox_K2Node_ComponentBoundEvent_16_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__XInputBox_K2Node_ComponentBoundEvent_19_OnSpinBoxValueChangedEvent__DelegateSignature(int32 InValue);
	void BndEvt__YInputBox_K2Node_ComponentBoundEvent_11_OnSpinBoxValueChangedEvent__DelegateSignature(int32 InValue);
	void BndEvt__YInputBox_K2Node_ComponentBoundEvent_14_OnSpinBoxValueCommittedEvent__DelegateSignature(int32 InValue, ETextCommit CommitMethod);
	void BndEvt__YInputBox_K2Node_ComponentBoundEvent_17_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__YInputBox_K2Node_ComponentBoundEvent_20_OnSpinBoxValueChangedEvent__DelegateSignature(int32 InValue);
	void BndEvt__ZInputBox_K2Node_ComponentBoundEvent_12_OnSpinBoxValueChangedEvent__DelegateSignature(int32 InValue);
	void BndEvt__ZInputBox_K2Node_ComponentBoundEvent_15_OnSpinBoxValueCommittedEvent__DelegateSignature(int32 InValue, ETextCommit CommitMethod);
	void BndEvt__ZInputBox_K2Node_ComponentBoundEvent_18_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__ZInputBox_K2Node_ComponentBoundEvent_21_OnSpinBoxValueChangedEvent__DelegateSignature(int32 InValue);
	void ExecuteUbergraph_WBP_Property_IntVector(int32 EntryPoint);
	void GetSliderValues(struct FIntVector* Return_Value);
	void OnInit(class UInspectorPropertyDescriptor* NewDescriptor, const struct FInspectorViewTarget& NewViewTarget);
	void OnValueChangedExternally(const struct FInspectorPropertyValue& ValueIn);
	void SetEnabled(bool Yes);
	void SetSliderValues(const struct FIntVector& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Property_IntVector_C">();
	}
	static class UWBP_Property_IntVector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Property_IntVector_C>();
	}
};
static_assert(alignof(UWBP_Property_IntVector_C) == 0x000008, "Wrong alignment on UWBP_Property_IntVector_C");
static_assert(sizeof(UWBP_Property_IntVector_C) == 0x0003C0, "Wrong size on UWBP_Property_IntVector_C");
static_assert(offsetof(UWBP_Property_IntVector_C, UberGraphFrame) == 0x000380, "Member 'UWBP_Property_IntVector_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Property_IntVector_C, XImage) == 0x000388, "Member 'UWBP_Property_IntVector_C::XImage' has a wrong offset!");
static_assert(offsetof(UWBP_Property_IntVector_C, XInputBox) == 0x000390, "Member 'UWBP_Property_IntVector_C::XInputBox' has a wrong offset!");
static_assert(offsetof(UWBP_Property_IntVector_C, YImage) == 0x000398, "Member 'UWBP_Property_IntVector_C::YImage' has a wrong offset!");
static_assert(offsetof(UWBP_Property_IntVector_C, YInputBox) == 0x0003A0, "Member 'UWBP_Property_IntVector_C::YInputBox' has a wrong offset!");
static_assert(offsetof(UWBP_Property_IntVector_C, ZImage) == 0x0003A8, "Member 'UWBP_Property_IntVector_C::ZImage' has a wrong offset!");
static_assert(offsetof(UWBP_Property_IntVector_C, ZInputBox) == 0x0003B0, "Member 'UWBP_Property_IntVector_C::ZInputBox' has a wrong offset!");
static_assert(offsetof(UWBP_Property_IntVector_C, bAllowExternalUpdate) == 0x0003B8, "Member 'UWBP_Property_IntVector_C::bAllowExternalUpdate' has a wrong offset!");

}

