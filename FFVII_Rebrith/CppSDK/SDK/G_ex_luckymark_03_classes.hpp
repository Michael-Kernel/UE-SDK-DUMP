#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: G_ex_luckymark_03

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass g_ex_luckymark_03.g_ex_luckymark_03_C
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class AG_ex_luckymark_03_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E0(0x6F26)(Transient, DuplicateTransient)
	class UDecalComponent*                        Decal;                                             // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTresHiddenMickeyComponent*             TresLuckyMark;                                     // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot1;                                 // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               NewMaterialInstance;                               // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalIntensity;                                   // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Roughness;                                         // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EdgeSmooth;                                        // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               EdgeNoiseMask;                                     // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EdgeMaskNoiseUV;                                   // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EdgeNoiseHardness;                                 // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EdgeNoiseSmooth;                                   // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               BaseColorMap;                                      // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseColorMapOffsetU;                               // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseColorMapOffsetV;                               // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseColorMapScale;                                 // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrightIntensity;                                   // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EnviromentColor;                                   // 0x0448(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightVector;                                       // 0x0458(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_g_ex_luckymark_03(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"g_ex_luckymark_03_C">();
	}
	static class AG_ex_luckymark_03_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AG_ex_luckymark_03_C>();
	}
};
static_assert(alignof(AG_ex_luckymark_03_C) == 0x1EF72E00, "Wrong alignment on AG_ex_luckymark_03_C");
static_assert(sizeof(AG_ex_luckymark_03_C) == 0x1EF72E00, "Wrong size on AG_ex_luckymark_03_C");
static_assert(offsetof(AG_ex_luckymark_03_C, UberGraphFrame) == 0x0003E0, "Member 'AG_ex_luckymark_03_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, Decal) == 0x0003E8, "Member 'AG_ex_luckymark_03_C::Decal' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, TresLuckyMark) == 0x0003F0, "Member 'AG_ex_luckymark_03_C::TresLuckyMark' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, DefaultSceneRoot1) == 0x0003F8, "Member 'AG_ex_luckymark_03_C::DefaultSceneRoot1' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, NewMaterialInstance) == 0x000400, "Member 'AG_ex_luckymark_03_C::NewMaterialInstance' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, NormalIntensity) == 0x000408, "Member 'AG_ex_luckymark_03_C::NormalIntensity' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, Roughness) == 0x00040C, "Member 'AG_ex_luckymark_03_C::Roughness' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, EdgeSmooth) == 0x000410, "Member 'AG_ex_luckymark_03_C::EdgeSmooth' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, EdgeNoiseMask) == 0x000418, "Member 'AG_ex_luckymark_03_C::EdgeNoiseMask' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, EdgeMaskNoiseUV) == 0x000420, "Member 'AG_ex_luckymark_03_C::EdgeMaskNoiseUV' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, EdgeNoiseHardness) == 0x000424, "Member 'AG_ex_luckymark_03_C::EdgeNoiseHardness' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, EdgeNoiseSmooth) == 0x000428, "Member 'AG_ex_luckymark_03_C::EdgeNoiseSmooth' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, BaseColorMap) == 0x000430, "Member 'AG_ex_luckymark_03_C::BaseColorMap' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, BaseColorMapOffsetU) == 0x000438, "Member 'AG_ex_luckymark_03_C::BaseColorMapOffsetU' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, BaseColorMapOffsetV) == 0x00043C, "Member 'AG_ex_luckymark_03_C::BaseColorMapOffsetV' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, BaseColorMapScale) == 0x000440, "Member 'AG_ex_luckymark_03_C::BaseColorMapScale' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, BrightIntensity) == 0x000444, "Member 'AG_ex_luckymark_03_C::BrightIntensity' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, EnviromentColor) == 0x000448, "Member 'AG_ex_luckymark_03_C::EnviromentColor' has a wrong offset!");
static_assert(offsetof(AG_ex_luckymark_03_C, LightVector) == 0x000458, "Member 'AG_ex_luckymark_03_C::LightVector' has a wrong offset!");

}

