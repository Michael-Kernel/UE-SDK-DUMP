#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Lv_TriggerBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Lv_TriggerBox_CtrlGim_structs.hpp"
#include "TresGame_structs.hpp"
#include "TresGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass lv_TriggerBox.lv_TriggerBox_C
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ALv_TriggerBox_C final : public ATresTriggerBox
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0400(0x6F26)(Transient, DuplicateTransient)
	UMulticastDelegateProperty_                   OnTresActorBeginOverlap;                           // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnTresActorEndOverlap;                             // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Enable;                                            // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Player;                                            // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Without_Gigas;                                     // 0x042A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42B[0x5];                                      // 0x042B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLv_TriggerBox_CtrlGim>         BeginOverlap_Gimmicks;                             // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FLv_TriggerBox_CtrlGim>         EndOverlap_Gimmicks;                               // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class FName                                   ControllerId;                                      // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoStartGimmick;                                  // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_IsStartedGimmick;                             // 0x0459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseBlockCollision;                                 // 0x045A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45B[0x5];                                      // 0x045B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          Collision;                                         // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockDirectionY;                                   // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlockThickness;                                    // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FlagName;                                          // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnTresActorBeginOverlap__DelegateSignature(class AActor* OtherActor);
	void OnTresActorEndOverlap__DelegateSignature(class AActor* OtherActor);
	void ExecuteUbergraph_lv_TriggerBox(int32 EntryPoint);
	void ReceiveBeginPlay();
	void TresResetGimmick(class FName ControllerId_0);
	void TresStopGimmick(bool PlayAnimation, class FName ControllerId_0);
	void TresStartGimmick(bool ActivateGimmick, bool Reset, bool PlayAnimation, class FName ControllerId_0);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void TresDisableCollisionGimmick();
	void TresEnableCollisionGimmick();
	void TresDeactivateGimmick();
	void TresActivateGimmick();
	void TresHideGimmick();
	void TresShowGimmick();
	void TresDestroyGimmick();
	void TresSetControlGimmick(class FName Name_0, const struct FVector& Param1, float Param2, int32 Param3, bool Param4, class FName Param5, class UObject* Param6, class FName ControllerId_0);
	void UserConstructionScript();
	void SetEnableTrigger(bool NewEnable);
	void DestroyBlock();
	void TresGetControlGimmick(class FName Name_0, const struct FVector& Param1_, float Param2_, int32 Param3_, class FName Param4_, bool Param5_, class UObject* Param6_, class FName ControllerId_0, struct FVector* Param1, float* Param2, int32* Param3, bool* Param4, class FName* Param5, class UObject** Param6);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"lv_TriggerBox_C">();
	}
	static class ALv_TriggerBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALv_TriggerBox_C>();
	}
};
static_assert(alignof(ALv_TriggerBox_C) == 0x1EF72E00, "Wrong alignment on ALv_TriggerBox_C");
static_assert(sizeof(ALv_TriggerBox_C) == 0x1EF72E00, "Wrong size on ALv_TriggerBox_C");
static_assert(offsetof(ALv_TriggerBox_C, UberGraphFrame) == 0x000400, "Member 'ALv_TriggerBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, OnTresActorBeginOverlap) == 0x000408, "Member 'ALv_TriggerBox_C::OnTresActorBeginOverlap' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, OnTresActorEndOverlap) == 0x000418, "Member 'ALv_TriggerBox_C::OnTresActorEndOverlap' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, Enable) == 0x000428, "Member 'ALv_TriggerBox_C::Enable' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, Player) == 0x000429, "Member 'ALv_TriggerBox_C::Player' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, Without_Gigas) == 0x00042A, "Member 'ALv_TriggerBox_C::Without_Gigas' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, BeginOverlap_Gimmicks) == 0x000430, "Member 'ALv_TriggerBox_C::BeginOverlap_Gimmicks' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, EndOverlap_Gimmicks) == 0x000440, "Member 'ALv_TriggerBox_C::EndOverlap_Gimmicks' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, ControllerId) == 0x000450, "Member 'ALv_TriggerBox_C::ControllerId' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, AutoStartGimmick) == 0x000458, "Member 'ALv_TriggerBox_C::AutoStartGimmick' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, Temp_IsStartedGimmick) == 0x000459, "Member 'ALv_TriggerBox_C::Temp_IsStartedGimmick' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, UseBlockCollision) == 0x00045A, "Member 'ALv_TriggerBox_C::UseBlockCollision' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, Collision) == 0x000460, "Member 'ALv_TriggerBox_C::Collision' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, BlockDirectionY) == 0x000468, "Member 'ALv_TriggerBox_C::BlockDirectionY' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, BlockThickness) == 0x00046C, "Member 'ALv_TriggerBox_C::BlockThickness' has a wrong offset!");
static_assert(offsetof(ALv_TriggerBox_C, FlagName) == 0x000470, "Member 'ALv_TriggerBox_C::FlagName' has a wrong offset!");

}

