#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Lv_EventTriggerBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TresGame_structs.hpp"
#include "TresGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass lv_EventTriggerBox.lv_EventTriggerBox_C
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ALv_EventTriggerBox_C final : public ATresTriggerBox
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0400(0x6F26)(Transient, DuplicateTransient)
	bool                                          Enable;                                            // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseDoOnce;                                         // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40A[0x6];                                      // 0x040A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnTresStartevent;                                  // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Temp_IsStartedGimmick;                             // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AutoStartGimmick;                                  // 0x0421(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseBlockCollision;                                 // 0x0422(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_423[0x5];                                      // 0x0423(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          Collision;                                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockDirectionY;                                   // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlockThickness;                                    // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FlagName;                                          // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnTresStartevent__DelegateSignature(class AActor* Instigated_by);
	void ExecuteUbergraph_lv_EventTriggerBox(int32 EntryPoint);
	void ReceiveBeginPlay();
	void TresResetGimmick(class FName ControllerId);
	void TresStopGimmick(bool PlayAnimation, class FName ControllerId);
	void TresStartGimmick(bool ActivateGimmick, bool Reset, bool PlayAnimation, class FName ControllerId);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void TresDisableCollisionGimmick();
	void TresEnableCollisionGimmick();
	void TresDeactivateGimmick();
	void TresActivateGimmick();
	void TresHideGimmick();
	void TresShowGimmick();
	void TresDestroyGimmick();
	void TresSetControlGimmick(class FName Name_0, const struct FVector& Param1, float Param2, int32 Param3, bool Param4, class FName Param5, class UObject* Param6, class FName ControllerId);
	void UserConstructionScript();
	void Set_EnableTrigger(bool NewEnable);
	void DestroyBlock();
	void TresGetControlGimmick(class FName Name_0, const struct FVector& Param1_, float Param2_, int32 Param3_, class FName Param4_, bool Param5_, class UObject* Param6_, class FName ControllerId, struct FVector* Param1, float* Param2, int32* Param3, bool* Param4, class FName* Param5, class UObject** Param6);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"lv_EventTriggerBox_C">();
	}
	static class ALv_EventTriggerBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALv_EventTriggerBox_C>();
	}
};
static_assert(alignof(ALv_EventTriggerBox_C) == 0x1EF72E00, "Wrong alignment on ALv_EventTriggerBox_C");
static_assert(sizeof(ALv_EventTriggerBox_C) == 0x1EF72E00, "Wrong size on ALv_EventTriggerBox_C");
static_assert(offsetof(ALv_EventTriggerBox_C, UberGraphFrame) == 0x000400, "Member 'ALv_EventTriggerBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ALv_EventTriggerBox_C, Enable) == 0x000408, "Member 'ALv_EventTriggerBox_C::Enable' has a wrong offset!");
static_assert(offsetof(ALv_EventTriggerBox_C, UseDoOnce) == 0x000409, "Member 'ALv_EventTriggerBox_C::UseDoOnce' has a wrong offset!");
static_assert(offsetof(ALv_EventTriggerBox_C, OnTresStartevent) == 0x000410, "Member 'ALv_EventTriggerBox_C::OnTresStartevent' has a wrong offset!");
static_assert(offsetof(ALv_EventTriggerBox_C, Temp_IsStartedGimmick) == 0x000420, "Member 'ALv_EventTriggerBox_C::Temp_IsStartedGimmick' has a wrong offset!");
static_assert(offsetof(ALv_EventTriggerBox_C, AutoStartGimmick) == 0x000421, "Member 'ALv_EventTriggerBox_C::AutoStartGimmick' has a wrong offset!");
static_assert(offsetof(ALv_EventTriggerBox_C, UseBlockCollision) == 0x000422, "Member 'ALv_EventTriggerBox_C::UseBlockCollision' has a wrong offset!");
static_assert(offsetof(ALv_EventTriggerBox_C, Collision) == 0x000428, "Member 'ALv_EventTriggerBox_C::Collision' has a wrong offset!");
static_assert(offsetof(ALv_EventTriggerBox_C, BlockDirectionY) == 0x000430, "Member 'ALv_EventTriggerBox_C::BlockDirectionY' has a wrong offset!");
static_assert(offsetof(ALv_EventTriggerBox_C, BlockThickness) == 0x000434, "Member 'ALv_EventTriggerBox_C::BlockThickness' has a wrong offset!");
static_assert(offsetof(ALv_EventTriggerBox_C, FlagName) == 0x000438, "Member 'ALv_EventTriggerBox_C::FlagName' has a wrong offset!");

}

