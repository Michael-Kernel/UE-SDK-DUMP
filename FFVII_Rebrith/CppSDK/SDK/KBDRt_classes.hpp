#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KBDRt

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "KBDRt_structs.hpp"


namespace SDK
{

// Class KBDRt.SQEX_KBD_Component
// 0x0000 (0x112E9AF0 - 0x112E9AF0)
class USQEX_KBD_Component final : public USceneComponent
{
public:
	uint8                                         Pad_418[0x28];                                     // 0x0418(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0440(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterMovementComponent*            CharacterMovementComponent;                        // 0x0448(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_450[0xF0];                                     // 0x0450(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SQEX_ApplyKBDAssetElement(class FName ElementName, bool bIsReset, bool bIsResetPose, int32 PreRoll, bool KeepReferences);
	void SQEX_Bonamik_AddReference(class USQEX_KBD_Component* OtherComponent, const class FString& ReferenceGroupName);
	void SQEX_Bonamik_AddReferenceCommon(class USQEX_KBD_Component* OtherComponent);
	void SQEX_Bonamik_AddReferenceDefault();
	void SQEX_Bonamik_ClearAllPresetWind();
	void SQEX_Bonamik_ClearEmissiveWind(float BlendTime, bool bApplyToChildren);
	void SQEX_Bonamik_DisablePresetWind(const TArray<class FName>& PresetNames);
	void SQEX_Bonamik_EnableBnm3VariableFPSSupport(bool bEnable);
	void SQEX_Bonamik_EnablePresetWind(const TArray<class FName>& PresetNames);
	float SQEX_Bonamik_GetTeleportDistance();
	float SQEX_Bonamik_GetWeight();
	bool SQEX_Bonamik_IsAutoDisable();
	bool SQEX_Bonamik_IsSetup();
	void SQEX_Bonamik_ReinitializeSimulationPose();
	void SQEX_Bonamik_RemoveReference(class USQEX_KBD_Component* OtherComponent, const class FString& ReferenceGroupName);
	void SQEX_Bonamik_RemoveReferenceAll();
	void SQEX_Bonamik_RemoveReferenceCommon(class USQEX_KBD_Component* OtherComponent);
	void SQEX_Bonamik_RemoveReferenceDefault();
	void SQEX_Bonamik_Reset(bool bResetPose, bool bApplyToChildren);
	void SQEX_Bonamik_ResetGravity();
	void SQEX_Bonamik_RestoreDefaultParameters();
	void SQEX_Bonamik_RestoreGroupParam(const TArray<struct FSQEX_BonamikChangingParameter>& GroupParam);
	void SQEX_Bonamik_SetAnimPos(int32 BoneIndex, bool bForceSet);
	void SQEX_Bonamik_SetAutoDisable(bool AutoDisable);
	void SQEX_Bonamik_SetEmissiveWind(const TArray<class FString>& Groups, int32 DirectionSpace, const struct FVector& DirectionVec, float BaseStrength, float WaveAmplitude, float WaveFreq, float BlendTime, bool bApplyToChildren);
	void SQEX_Bonamik_SetEnable(bool NewEnable);
	void SQEX_Bonamik_SetEnableGroundCollision(const TArray<class FString>& Groups, bool bNewEnable);
	void SQEX_Bonamik_SetEnableGroundCollisionAll(bool bNewEnable);
	void SQEX_Bonamik_SetGravity(const struct FVector& Gravity);
	void SQEX_Bonamik_SetGroupParam(const TArray<struct FSQEX_BonamikChangingParameter>& GroupParam);
	void SQEX_Bonamik_SetGroupWeight(const TArray<class FString>& Groups, float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetInnerConeScale(const TArray<class FString>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetLocalForceScale(const TArray<class FString>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetMassScale(const TArray<class FString>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetOuterConeScale(const TArray<class FString>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetPreRoll(int32 Step, bool bApplyToChildren);
	void SQEX_Bonamik_SetPresetWindScale(const TArray<class FName>& PresetNames, const float Scale);
	void SQEX_Bonamik_SetSpeedRate(float SpeedRate, float SpeedRateChangeTime, bool bApplyToChildren);
	void SQEX_Bonamik_SetTeleportDistance(float Distance, int32 TeleportPreRollStep, bool bApplyToChildren);
	void SQEX_Bonamik_SetUpdateOnlyRendered(bool bUpdateOnlyRendered);
	void SQEX_Bonamik_SetUpdateOnlyVisible(bool bUpdateOnlyVisible);
	void SQEX_Bonamik_SetWeight(float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetWorldWindScale(const TArray<class FString>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_TurnOff(bool PreserveLatestResult, const TArray<class FString>& Groups, float BlendTime);
	void SQEX_SetEmissiveWindScale(const TArray<class FString>& Groups, const float Scale, bool bApplyToChildren);

	struct FVector SQEX_Bonamik_GetGravity() const;
	int32 SQEX_Bonamik_GetNumReferences() const;
	float SQEX_Bonamik_GetSpeedRate() const;
	bool SQEX_Bonamik_IsEnable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KBD_Component">();
	}
	static class USQEX_KBD_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KBD_Component>();
	}
};
static_assert(alignof(USQEX_KBD_Component) == 0x112E9AF0, "Wrong alignment on USQEX_KBD_Component");
static_assert(sizeof(USQEX_KBD_Component) == 0x112E9AF0, "Wrong size on USQEX_KBD_Component");
static_assert(offsetof(USQEX_KBD_Component, SkeletalMeshComponent) == 0x000440, "Member 'USQEX_KBD_Component::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(USQEX_KBD_Component, CharacterMovementComponent) == 0x000448, "Member 'USQEX_KBD_Component::CharacterMovementComponent' has a wrong offset!");

// Class KBDRt.SQEX_KBDAssetUserData
// 0x0010 (0x0050 - 0x0040)
class USQEX_KBDAssetUserData final : public UAssetUserData
{
public:
	TArray<struct FSQEX_KBDAssetElement>          AssetElements;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KBDAssetUserData">();
	}
	static class USQEX_KBDAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KBDAssetUserData>();
	}
};
static_assert(alignof(USQEX_KBDAssetUserData) == 0x000008, "Wrong alignment on USQEX_KBDAssetUserData");
static_assert(sizeof(USQEX_KBDAssetUserData) == 0x000050, "Wrong size on USQEX_KBDAssetUserData");
static_assert(offsetof(USQEX_KBDAssetUserData, AssetElements) == 0x000040, "Member 'USQEX_KBDAssetUserData::AssetElements' has a wrong offset!");

}

