#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Renderer

#include "Basic.hpp"

#include "Renderer_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Renderer.SQEX_BreakSimulationActor.GetBreakSimulationActor
// 0x0010 (0x0010 - 0x0000)
struct SQEX_BreakSimulationActor_GetBreakSimulationActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEX_BreakSimulationActor*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_BreakSimulationActor_GetBreakSimulationActor) == 0x000008, "Wrong alignment on SQEX_BreakSimulationActor_GetBreakSimulationActor");
static_assert(sizeof(SQEX_BreakSimulationActor_GetBreakSimulationActor) == 0x000010, "Wrong size on SQEX_BreakSimulationActor_GetBreakSimulationActor");
static_assert(offsetof(SQEX_BreakSimulationActor_GetBreakSimulationActor, WorldContextObject) == 0x000000, "Member 'SQEX_BreakSimulationActor_GetBreakSimulationActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEX_BreakSimulationActor_GetBreakSimulationActor, ReturnValue) == 0x000008, "Member 'SQEX_BreakSimulationActor_GetBreakSimulationActor::ReturnValue' has a wrong offset!");

// Function Renderer.SQEX_BreakSimulationActor.PutBreakAnimPattern
// 0x112E95F0 (0x112E95F0 - 0x0000)
struct SQEX_BreakSimulationActor_PutBreakAnimPattern final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x000C(0x112E95F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_BreakBlendMode                          BlendMode;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_BreakSimulationActor_PutBreakAnimPattern) == 0x112E95F0, "Wrong alignment on SQEX_BreakSimulationActor_PutBreakAnimPattern");
static_assert(sizeof(SQEX_BreakSimulationActor_PutBreakAnimPattern) == 0x112E95F0, "Wrong size on SQEX_BreakSimulationActor_PutBreakAnimPattern");
static_assert(offsetof(SQEX_BreakSimulationActor_PutBreakAnimPattern, WorldPosition) == 0x000000, "Member 'SQEX_BreakSimulationActor_PutBreakAnimPattern::WorldPosition' has a wrong offset!");
static_assert(offsetof(SQEX_BreakSimulationActor_PutBreakAnimPattern, Size) == 0x00000C, "Member 'SQEX_BreakSimulationActor_PutBreakAnimPattern::Size' has a wrong offset!");
static_assert(offsetof(SQEX_BreakSimulationActor_PutBreakAnimPattern, Time) == 0x000014, "Member 'SQEX_BreakSimulationActor_PutBreakAnimPattern::Time' has a wrong offset!");
static_assert(offsetof(SQEX_BreakSimulationActor_PutBreakAnimPattern, Material) == 0x000018, "Member 'SQEX_BreakSimulationActor_PutBreakAnimPattern::Material' has a wrong offset!");
static_assert(offsetof(SQEX_BreakSimulationActor_PutBreakAnimPattern, BlendMode) == 0x000020, "Member 'SQEX_BreakSimulationActor_PutBreakAnimPattern::BlendMode' has a wrong offset!");

// Function Renderer.SQEX_BreakSimulationActor.PutBreakPattern
// 0x112E95F0 (0x112E95F0 - 0x0000)
struct SQEX_BreakSimulationActor_PutBreakPattern final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x000C(0x112E95F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_BreakBlendMode                          BlendMode;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_BreakSimulationActor_PutBreakPattern) == 0x112E95F0, "Wrong alignment on SQEX_BreakSimulationActor_PutBreakPattern");
static_assert(sizeof(SQEX_BreakSimulationActor_PutBreakPattern) == 0x112E95F0, "Wrong size on SQEX_BreakSimulationActor_PutBreakPattern");
static_assert(offsetof(SQEX_BreakSimulationActor_PutBreakPattern, WorldPosition) == 0x000000, "Member 'SQEX_BreakSimulationActor_PutBreakPattern::WorldPosition' has a wrong offset!");
static_assert(offsetof(SQEX_BreakSimulationActor_PutBreakPattern, Size) == 0x00000C, "Member 'SQEX_BreakSimulationActor_PutBreakPattern::Size' has a wrong offset!");
static_assert(offsetof(SQEX_BreakSimulationActor_PutBreakPattern, Material) == 0x000018, "Member 'SQEX_BreakSimulationActor_PutBreakPattern::Material' has a wrong offset!");
static_assert(offsetof(SQEX_BreakSimulationActor_PutBreakPattern, BlendMode) == 0x000020, "Member 'SQEX_BreakSimulationActor_PutBreakPattern::BlendMode' has a wrong offset!");

// Function Renderer.SQEX_OceanShoreActor.Initialize
// 0x0001 (0x0001 - 0x0000)
struct SQEX_OceanShoreActor_Initialize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_OceanShoreActor_Initialize) == 0x000001, "Wrong alignment on SQEX_OceanShoreActor_Initialize");
static_assert(sizeof(SQEX_OceanShoreActor_Initialize) == 0x000001, "Wrong size on SQEX_OceanShoreActor_Initialize");
static_assert(offsetof(SQEX_OceanShoreActor_Initialize, ReturnValue) == 0x000000, "Member 'SQEX_OceanShoreActor_Initialize::ReturnValue' has a wrong offset!");

// Function Renderer.SQEX_OceanSimulatorActor.GetOceanBaseHeight
// 0xD49D (0xD49D - 0x0000)
struct alignas(0xD49D) SQEX_OceanSimulatorActor_GetOceanBaseHeight final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseHeight;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_OceanSimulatorActor_GetOceanBaseHeight) == 0x00D49D, "Wrong alignment on SQEX_OceanSimulatorActor_GetOceanBaseHeight");
static_assert(sizeof(SQEX_OceanSimulatorActor_GetOceanBaseHeight) == 0x00D49D, "Wrong size on SQEX_OceanSimulatorActor_GetOceanBaseHeight");
static_assert(offsetof(SQEX_OceanSimulatorActor_GetOceanBaseHeight, WorldContextObject) == 0x000000, "Member 'SQEX_OceanSimulatorActor_GetOceanBaseHeight::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEX_OceanSimulatorActor_GetOceanBaseHeight, BaseHeight) == 0x000008, "Member 'SQEX_OceanSimulatorActor_GetOceanBaseHeight::BaseHeight' has a wrong offset!");

// Function Renderer.SQEX_OceanSimulatorActor.GetOceanDisplacement
// 0x0028 (0x0028 - 0x0000)
struct SQEX_OceanSimulatorActor_GetOceanDisplacement final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x001C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_OceanSimulatorActor_GetOceanDisplacement) == 0x000001, "Wrong alignment on SQEX_OceanSimulatorActor_GetOceanDisplacement");
static_assert(sizeof(SQEX_OceanSimulatorActor_GetOceanDisplacement) == 0x000028, "Wrong size on SQEX_OceanSimulatorActor_GetOceanDisplacement");
static_assert(offsetof(SQEX_OceanSimulatorActor_GetOceanDisplacement, WorldPosition) == 0x000000, "Member 'SQEX_OceanSimulatorActor_GetOceanDisplacement::WorldPosition' has a wrong offset!");
static_assert(offsetof(SQEX_OceanSimulatorActor_GetOceanDisplacement, Success) == 0x00000C, "Member 'SQEX_OceanSimulatorActor_GetOceanDisplacement::Success' has a wrong offset!");
static_assert(offsetof(SQEX_OceanSimulatorActor_GetOceanDisplacement, Offset) == 0x000010, "Member 'SQEX_OceanSimulatorActor_GetOceanDisplacement::Offset' has a wrong offset!");
static_assert(offsetof(SQEX_OceanSimulatorActor_GetOceanDisplacement, Normal) == 0x00001C, "Member 'SQEX_OceanSimulatorActor_GetOceanDisplacement::Normal' has a wrong offset!");

// Function Renderer.SQEX_OceanSimulatorActor.GetOceanMaxAmplitude
// 0xCD4E (0xCD4E - 0x0000)
struct alignas(0xCD4E) SQEX_OceanSimulatorActor_GetOceanMaxAmplitude final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAmplitude;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_OceanSimulatorActor_GetOceanMaxAmplitude) == 0x00CD4E, "Wrong alignment on SQEX_OceanSimulatorActor_GetOceanMaxAmplitude");
static_assert(sizeof(SQEX_OceanSimulatorActor_GetOceanMaxAmplitude) == 0x00CD4E, "Wrong size on SQEX_OceanSimulatorActor_GetOceanMaxAmplitude");
static_assert(offsetof(SQEX_OceanSimulatorActor_GetOceanMaxAmplitude, WorldPosition) == 0x000000, "Member 'SQEX_OceanSimulatorActor_GetOceanMaxAmplitude::WorldPosition' has a wrong offset!");
static_assert(offsetof(SQEX_OceanSimulatorActor_GetOceanMaxAmplitude, MaxAmplitude) == 0x00000C, "Member 'SQEX_OceanSimulatorActor_GetOceanMaxAmplitude::MaxAmplitude' has a wrong offset!");

// Function Renderer.SQEX_OceanSimulatorActor.GetWindDirection
// 0x112E95F0 (0x112E95F0 - 0x0000)
struct SQEX_OceanSimulatorActor_GetWindDirection final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x112E95F0)(ConstParm, Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_OceanSimulatorActor_GetWindDirection) == 0x112E95F0, "Wrong alignment on SQEX_OceanSimulatorActor_GetWindDirection");
static_assert(sizeof(SQEX_OceanSimulatorActor_GetWindDirection) == 0x112E95F0, "Wrong size on SQEX_OceanSimulatorActor_GetWindDirection");
static_assert(offsetof(SQEX_OceanSimulatorActor_GetWindDirection, ReturnValue) == 0x000000, "Member 'SQEX_OceanSimulatorActor_GetWindDirection::ReturnValue' has a wrong offset!");

// Function Renderer.SQEX_WaterRippleActor.Initialize
// 0x0001 (0x0001 - 0x0000)
struct SQEX_WaterRippleActor_Initialize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_WaterRippleActor_Initialize) == 0x000001, "Wrong alignment on SQEX_WaterRippleActor_Initialize");
static_assert(sizeof(SQEX_WaterRippleActor_Initialize) == 0x000001, "Wrong size on SQEX_WaterRippleActor_Initialize");
static_assert(offsetof(SQEX_WaterRippleActor_Initialize, ReturnValue) == 0x000000, "Member 'SQEX_WaterRippleActor_Initialize::ReturnValue' has a wrong offset!");

}

