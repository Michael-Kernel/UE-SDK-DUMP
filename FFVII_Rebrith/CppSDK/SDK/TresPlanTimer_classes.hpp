#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TresPlanTimer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TresPlanTimer.TresPlanTimer_C
// 0x0000 (0xD38D - 0xD38D)
class UTresPlanTimer_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0200(0x6F26)(Transient, DuplicateTransient)
	struct FTimerHandle                           Temp_StartTimer;                                   // 0x0208(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor)
	bool                                          Loop;                                              // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnTimer;                                           // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          UseAfterTimer;                                     // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_WaitCalling;                                  // 0x0229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Temp_IsZeroTimePause;                              // 0x022A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnTimer__DelegateSignature();
	void ExecuteUbergraph_TresPlanTimer(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnUnpauseTimer();
	void OnPauseTimer();
	void TimerDelegate();
	void OnStopTimer();
	void OnStartTimer(float Time, bool Paused);
	void StartTimer(float Time, bool Paused);
	void StopTimer();
	void PauseTimer();
	void UnpauseTimer();
	void IsPauseTimer(bool* Paused);
	void IsStartTimer(bool* Started);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TresPlanTimer_C">();
	}
	static class UTresPlanTimer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTresPlanTimer_C>();
	}
};
static_assert(alignof(UTresPlanTimer_C) == 0x00D38D, "Wrong alignment on UTresPlanTimer_C");
static_assert(sizeof(UTresPlanTimer_C) == 0x00D38D, "Wrong size on UTresPlanTimer_C");
static_assert(offsetof(UTresPlanTimer_C, UberGraphFrame) == 0x000200, "Member 'UTresPlanTimer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTresPlanTimer_C, Temp_StartTimer) == 0x000208, "Member 'UTresPlanTimer_C::Temp_StartTimer' has a wrong offset!");
static_assert(offsetof(UTresPlanTimer_C, Loop) == 0x000210, "Member 'UTresPlanTimer_C::Loop' has a wrong offset!");
static_assert(offsetof(UTresPlanTimer_C, OnTimer) == 0x000218, "Member 'UTresPlanTimer_C::OnTimer' has a wrong offset!");
static_assert(offsetof(UTresPlanTimer_C, UseAfterTimer) == 0x000228, "Member 'UTresPlanTimer_C::UseAfterTimer' has a wrong offset!");
static_assert(offsetof(UTresPlanTimer_C, Temp_WaitCalling) == 0x000229, "Member 'UTresPlanTimer_C::Temp_WaitCalling' has a wrong offset!");
static_assert(offsetof(UTresPlanTimer_C, Temp_IsZeroTimePause) == 0x00022A, "Member 'UTresPlanTimer_C::Temp_IsZeroTimePause' has a wrong offset!");

}

