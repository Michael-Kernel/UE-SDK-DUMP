#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Renderer

#include "Basic.hpp"

#include "Renderer_classes.hpp"
#include "Renderer_parameters.hpp"


namespace SDK
{

// Function Renderer.SQEX_BreakSimulationActor.GetBreakSimulationActor
// (Final, Native, Static, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQEX_BreakSimulationActor*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQEX_BreakSimulationActor* ASQEX_BreakSimulationActor::GetBreakSimulationActor(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQEX_BreakSimulationActor", "GetBreakSimulationActor");

	Params::SQEX_BreakSimulationActor_GetBreakSimulationActor Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Renderer.SQEX_BreakSimulationActor.ClearBreakPatterns
// (Final, Native, Public, BlueprintCallable)

void ASQEX_BreakSimulationActor::ClearBreakPatterns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEX_BreakSimulationActor", "ClearBreakPatterns");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Renderer.SQEX_BreakSimulationActor.PutBreakAnimPattern
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPosition                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Size                                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQEX_BreakBlendMode                    BlendMode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEX_BreakSimulationActor::PutBreakAnimPattern(const struct FVector& WorldPosition, const struct FVector2D& Size, float Time, class UMaterialInterface* Material, ESQEX_BreakBlendMode BlendMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEX_BreakSimulationActor", "PutBreakAnimPattern");

	Params::SQEX_BreakSimulationActor_PutBreakAnimPattern Parms{};

	Parms.WorldPosition = std::move(WorldPosition);
	Parms.Size = std::move(Size);
	Parms.Time = Time;
	Parms.Material = Material;
	Parms.BlendMode = BlendMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Renderer.SQEX_BreakSimulationActor.PutBreakPattern
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPosition                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Size                                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQEX_BreakBlendMode                    BlendMode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEX_BreakSimulationActor::PutBreakPattern(const struct FVector& WorldPosition, const struct FVector2D& Size, class UMaterialInterface* Material, ESQEX_BreakBlendMode BlendMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEX_BreakSimulationActor", "PutBreakPattern");

	Params::SQEX_BreakSimulationActor_PutBreakPattern Parms{};

	Parms.WorldPosition = std::move(WorldPosition);
	Parms.Size = std::move(Size);
	Parms.Material = Material;
	Parms.BlendMode = BlendMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Renderer.SQEX_OceanShoreActor.Initialize
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool ASQEX_OceanShoreActor::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEX_OceanShoreActor", "Initialize");

	Params::SQEX_OceanShoreActor_Initialize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Renderer.SQEX_OceanSimulatorActor.GetOceanBaseHeight
// (Final, Native, Static, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BaseHeight                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEX_OceanSimulatorActor::GetOceanBaseHeight(const class UObject* WorldContextObject, float* BaseHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQEX_OceanSimulatorActor", "GetOceanBaseHeight");

	Params::SQEX_OceanSimulatorActor_GetOceanBaseHeight Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BaseHeight != nullptr)
		*BaseHeight = Parms.BaseHeight;
}


// Function Renderer.SQEX_OceanSimulatorActor.GetOceanDisplacement
// (Final, Native, Static, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPosition                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Normal                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEX_OceanSimulatorActor::GetOceanDisplacement(const struct FVector& WorldPosition, bool* Success, struct FVector* Offset, struct FVector* Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQEX_OceanSimulatorActor", "GetOceanDisplacement");

	Params::SQEX_OceanSimulatorActor_GetOceanDisplacement Parms{};

	Parms.WorldPosition = std::move(WorldPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (Offset != nullptr)
		*Offset = std::move(Parms.Offset);

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);
}


// Function Renderer.SQEX_OceanSimulatorActor.GetOceanMaxAmplitude
// (Final, Native, Static, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPosition                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAmplitude                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEX_OceanSimulatorActor::GetOceanMaxAmplitude(const struct FVector& WorldPosition, float* MaxAmplitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQEX_OceanSimulatorActor", "GetOceanMaxAmplitude");

	Params::SQEX_OceanSimulatorActor_GetOceanMaxAmplitude Parms{};

	Parms.WorldPosition = std::move(WorldPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MaxAmplitude != nullptr)
		*MaxAmplitude = Parms.MaxAmplitude;
}


// Function Renderer.SQEX_OceanSimulatorActor.GetWindDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D ASQEX_OceanSimulatorActor::GetWindDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEX_OceanSimulatorActor", "GetWindDirection");

	Params::SQEX_OceanSimulatorActor_GetWindDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Renderer.SQEX_WaterRippleActor.Initialize
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool ASQEX_WaterRippleActor::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEX_WaterRippleActor", "Initialize");

	Params::SQEX_WaterRippleActor_Initialize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

