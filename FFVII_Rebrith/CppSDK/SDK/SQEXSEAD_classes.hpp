#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SQEXSEAD

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SQEXSEAD_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class SQEXSEAD.SQEXKlangBinary
// 0x0010 (0x0058 - 0x0048)
class USQEXKlangBinary final : public UDataAsset
{
public:
	TArray<uint8>                                 DataArray;                                         // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXKlangBinary">();
	}
	static class USQEXKlangBinary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXKlangBinary>();
	}
};
static_assert(alignof(USQEXKlangBinary) == 0x000008, "Wrong alignment on USQEXKlangBinary");
static_assert(sizeof(USQEXKlangBinary) == 0x000058, "Wrong size on USQEXKlangBinary");
static_assert(offsetof(USQEXKlangBinary, DataArray) == 0x000048, "Member 'USQEXKlangBinary::DataArray' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeComponentCallback
// 0x0000 (0x0040 - 0x0040)
class USQEXSEADAutoSeComponentCallback : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeComponentCallback">();
	}
	static class USQEXSEADAutoSeComponentCallback* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeComponentCallback>();
	}
};
static_assert(alignof(USQEXSEADAutoSeComponentCallback) == 0x000008, "Wrong alignment on USQEXSEADAutoSeComponentCallback");
static_assert(sizeof(USQEXSEADAutoSeComponentCallback) == 0x000040, "Wrong size on USQEXSEADAutoSeComponentCallback");

// Class SQEXSEAD.SQEXSEADAutoSeComponentCallbackDefault
// 0x0060 (0x00A0 - 0x0040)
class USQEXSEADAutoSeComponentCallbackDefault final : public USQEXSEADAutoSeComponentCallback
{
public:
	uint8                                         Pad_40[0x60];                                      // 0x0040(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeComponentCallbackDefault">();
	}
	static class USQEXSEADAutoSeComponentCallbackDefault* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeComponentCallbackDefault>();
	}
};
static_assert(alignof(USQEXSEADAutoSeComponentCallbackDefault) == 0x000008, "Wrong alignment on USQEXSEADAutoSeComponentCallbackDefault");
static_assert(sizeof(USQEXSEADAutoSeComponentCallbackDefault) == 0x0000A0, "Wrong size on USQEXSEADAutoSeComponentCallbackDefault");

// Class SQEXSEAD.SQEXSEADInterpTrackBGM
// 0x0000 (0x112ED410 - 0x112ED410)
#pragma pack(push, 0x1)
class alignas(0x112ED410) USQEXSEADInterpTrackBGM : public UInterpTrackSound
{
public:
	float                                         OnMatineeEndSetVolume;                             // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackBGM">();
	}
	static class USQEXSEADInterpTrackBGM* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackBGM>();
	}
};
#pragma pack(pop)
static_assert(alignof(USQEXSEADInterpTrackBGM) == 0x112ED410, "Wrong alignment on USQEXSEADInterpTrackBGM");
static_assert(sizeof(USQEXSEADInterpTrackBGM) == 0x112ED410, "Wrong size on USQEXSEADInterpTrackBGM");
static_assert(offsetof(USQEXSEADInterpTrackBGM, OnMatineeEndSetVolume) == 0x0000C8, "Member 'USQEXSEADInterpTrackBGM::OnMatineeEndSetVolume' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackBGMControl
// 0x0030 (0x00C0 - 0x0090)
class USQEXSEADInterpTrackBGMControl : public UInterpTrack
{
public:
	TArray<struct FSQEXSEADBGMControlTrackKey>    Keys;                                              // 0x0090(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              BGMAssetPtr;                                       // 0x00A0(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackBGMControl">();
	}
	static class USQEXSEADInterpTrackBGMControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackBGMControl>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackBGMControl) == 0x000008, "Wrong alignment on USQEXSEADInterpTrackBGMControl");
static_assert(sizeof(USQEXSEADInterpTrackBGMControl) == 0x0000C0, "Wrong size on USQEXSEADInterpTrackBGMControl");
static_assert(offsetof(USQEXSEADInterpTrackBGMControl, Keys) == 0x000090, "Member 'USQEXSEADInterpTrackBGMControl::Keys' has a wrong offset!");
static_assert(offsetof(USQEXSEADInterpTrackBGMControl, BGMAssetPtr) == 0x0000A0, "Member 'USQEXSEADInterpTrackBGMControl::BGMAssetPtr' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAnimNotify_ChangeAudioVolumeEnable
// 0x0018 (0x0068 - 0x0050)
class USQEXSEADAnimNotify_ChangeAudioVolumeEnable final : public UAnimNotify
{
public:
	class FString                                 AudioVolumeName;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnable : 1;                                       // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAnimNotify_ChangeAudioVolumeEnable">();
	}
	static class USQEXSEADAnimNotify_ChangeAudioVolumeEnable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAnimNotify_ChangeAudioVolumeEnable>();
	}
};
static_assert(alignof(USQEXSEADAnimNotify_ChangeAudioVolumeEnable) == 0x000008, "Wrong alignment on USQEXSEADAnimNotify_ChangeAudioVolumeEnable");
static_assert(sizeof(USQEXSEADAnimNotify_ChangeAudioVolumeEnable) == 0x000068, "Wrong size on USQEXSEADAnimNotify_ChangeAudioVolumeEnable");
static_assert(offsetof(USQEXSEADAnimNotify_ChangeAudioVolumeEnable, AudioVolumeName) == 0x000050, "Member 'USQEXSEADAnimNotify_ChangeAudioVolumeEnable::AudioVolumeName' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAnimNotify_PlayAutoSe
// 0x0028 (0x0078 - 0x0050)
class USQEXSEADAnimNotify_PlayAutoSe final : public UAnimNotify
{
public:
	struct FSQEXSEADAnimNotifyPlayAutoSeParams    PlaySettings;                                      // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAnimNotify_PlayAutoSe">();
	}
	static class USQEXSEADAnimNotify_PlayAutoSe* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAnimNotify_PlayAutoSe>();
	}
};
static_assert(alignof(USQEXSEADAnimNotify_PlayAutoSe) == 0x000008, "Wrong alignment on USQEXSEADAnimNotify_PlayAutoSe");
static_assert(sizeof(USQEXSEADAnimNotify_PlayAutoSe) == 0x000078, "Wrong size on USQEXSEADAnimNotify_PlayAutoSe");
static_assert(offsetof(USQEXSEADAnimNotify_PlayAutoSe, PlaySettings) == 0x000050, "Member 'USQEXSEADAnimNotify_PlayAutoSe::PlaySettings' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAnimNotifyState_PlayAutoSe
// 0x0080 (0x00C8 - 0x0048)
class USQEXSEADAnimNotifyState_PlayAutoSe final : public UAnimNotifyState
{
public:
	struct FSQEXSEADAnimNotifyPlayAutoSeParams    PlaySettings;                                      // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x54];                                      // 0x0074(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAnimNotifyState_PlayAutoSe">();
	}
	static class USQEXSEADAnimNotifyState_PlayAutoSe* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAnimNotifyState_PlayAutoSe>();
	}
};
static_assert(alignof(USQEXSEADAnimNotifyState_PlayAutoSe) == 0x000008, "Wrong alignment on USQEXSEADAnimNotifyState_PlayAutoSe");
static_assert(sizeof(USQEXSEADAnimNotifyState_PlayAutoSe) == 0x0000C8, "Wrong size on USQEXSEADAnimNotifyState_PlayAutoSe");
static_assert(offsetof(USQEXSEADAnimNotifyState_PlayAutoSe, PlaySettings) == 0x000048, "Member 'USQEXSEADAnimNotifyState_PlayAutoSe::PlaySettings' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_PlayAutoSe, FadeOutDuration) == 0x000070, "Member 'USQEXSEADAnimNotifyState_PlayAutoSe::FadeOutDuration' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAnimNotifyState_ChangeAutoSeEnable
// 0x0058 (0x00A0 - 0x0048)
class USQEXSEADAnimNotifyState_ChangeAutoSeEnable final : public UAnimNotifyState
{
public:
	uint8                                         bEnableSetting : 1;                                // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ESQEXSEADChangeAutoSeEnableNotifyEndBehavior  NotifyEndBehavior;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableContinuousDisabling : 1;                    // 0x004A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4B[0x55];                                      // 0x004B(0x0055)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAnimNotifyState_ChangeAutoSeEnable">();
	}
	static class USQEXSEADAnimNotifyState_ChangeAutoSeEnable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAnimNotifyState_ChangeAutoSeEnable>();
	}
};
static_assert(alignof(USQEXSEADAnimNotifyState_ChangeAutoSeEnable) == 0x000008, "Wrong alignment on USQEXSEADAnimNotifyState_ChangeAutoSeEnable");
static_assert(sizeof(USQEXSEADAnimNotifyState_ChangeAutoSeEnable) == 0x0000A0, "Wrong size on USQEXSEADAnimNotifyState_ChangeAutoSeEnable");
static_assert(offsetof(USQEXSEADAnimNotifyState_ChangeAutoSeEnable, NotifyEndBehavior) == 0x000049, "Member 'USQEXSEADAnimNotifyState_ChangeAutoSeEnable::NotifyEndBehavior' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAnimNotify_PlaySound
// 0x0028 (0x0078 - 0x0050)
class USQEXSEADAnimNotify_PlaySound final : public UAnimNotify
{
public:
	class USoundBase*                             Sound;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDuration;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollow : 1;                                       // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollowOwnerVisible : 1;                           // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAnimNotify_PlaySound">();
	}
	static class USQEXSEADAnimNotify_PlaySound* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAnimNotify_PlaySound>();
	}
};
static_assert(alignof(USQEXSEADAnimNotify_PlaySound) == 0x000008, "Wrong alignment on USQEXSEADAnimNotify_PlaySound");
static_assert(sizeof(USQEXSEADAnimNotify_PlaySound) == 0x000078, "Wrong size on USQEXSEADAnimNotify_PlaySound");
static_assert(offsetof(USQEXSEADAnimNotify_PlaySound, Sound) == 0x000050, "Member 'USQEXSEADAnimNotify_PlaySound::Sound' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotify_PlaySound, VolumeMultiplier) == 0x000058, "Member 'USQEXSEADAnimNotify_PlaySound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotify_PlaySound, PitchMultiplier) == 0x00005C, "Member 'USQEXSEADAnimNotify_PlaySound::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotify_PlaySound, FadeInDuration) == 0x000060, "Member 'USQEXSEADAnimNotify_PlaySound::FadeInDuration' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotify_PlaySound, AttachPointName) == 0x000068, "Member 'USQEXSEADAnimNotify_PlaySound::AttachPointName' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAnimNotifyState_AttachSound
// 0x0090 (0x00D8 - 0x0048)
class USQEXSEADAnimNotifyState_AttachSound final : public UAnimNotifyState
{
public:
	class USoundBase*                             Sound;                                             // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartWaitTime;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDuration;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollow : 1;                                       // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             LoopEndSound;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopEndSoundVolumeMultiplier;                      // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopEndSoundPitchMultiplier;                       // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollowOwnerVisible : 1;                           // 0x0080(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_81[0x57];                                      // 0x0081(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAnimNotifyState_AttachSound">();
	}
	static class USQEXSEADAnimNotifyState_AttachSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAnimNotifyState_AttachSound>();
	}
};
static_assert(alignof(USQEXSEADAnimNotifyState_AttachSound) == 0x000008, "Wrong alignment on USQEXSEADAnimNotifyState_AttachSound");
static_assert(sizeof(USQEXSEADAnimNotifyState_AttachSound) == 0x0000D8, "Wrong size on USQEXSEADAnimNotifyState_AttachSound");
static_assert(offsetof(USQEXSEADAnimNotifyState_AttachSound, Sound) == 0x000048, "Member 'USQEXSEADAnimNotifyState_AttachSound::Sound' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_AttachSound, VolumeMultiplier) == 0x000050, "Member 'USQEXSEADAnimNotifyState_AttachSound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_AttachSound, PitchMultiplier) == 0x000054, "Member 'USQEXSEADAnimNotifyState_AttachSound::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_AttachSound, StartWaitTime) == 0x000058, "Member 'USQEXSEADAnimNotifyState_AttachSound::StartWaitTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_AttachSound, FadeInDuration) == 0x00005C, "Member 'USQEXSEADAnimNotifyState_AttachSound::FadeInDuration' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_AttachSound, FadeOutDuration) == 0x000060, "Member 'USQEXSEADAnimNotifyState_AttachSound::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_AttachSound, AttachPointName) == 0x000068, "Member 'USQEXSEADAnimNotifyState_AttachSound::AttachPointName' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_AttachSound, LoopEndSound) == 0x000070, "Member 'USQEXSEADAnimNotifyState_AttachSound::LoopEndSound' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_AttachSound, LoopEndSoundVolumeMultiplier) == 0x000078, "Member 'USQEXSEADAnimNotifyState_AttachSound::LoopEndSoundVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_AttachSound, LoopEndSoundPitchMultiplier) == 0x00007C, "Member 'USQEXSEADAnimNotifyState_AttachSound::LoopEndSoundPitchMultiplier' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAssetHolder
// 0x0010 (0x0050 - 0x0040)
class USQEXSEADAssetHolder final : public UObject
{
public:
	TArray<class UObject*>                        HoldAssets;                                        // 0x0040(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAssetHolder">();
	}
	static class USQEXSEADAssetHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAssetHolder>();
	}
};
static_assert(alignof(USQEXSEADAssetHolder) == 0x000008, "Wrong alignment on USQEXSEADAssetHolder");
static_assert(sizeof(USQEXSEADAssetHolder) == 0x000050, "Wrong size on USQEXSEADAssetHolder");
static_assert(offsetof(USQEXSEADAssetHolder, HoldAssets) == 0x000040, "Member 'USQEXSEADAssetHolder::HoldAssets' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAttachSeComponent
// 0x0000 (0xD38D - 0xD38D)
class USQEXSEADAttachSeComponent final : public UActorComponent
{
public:
	class USoundBase*                             SoundAsset;                                        // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollow : 1;                                       // 0x0210(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollowOwnerVisible : 1;                           // 0x0220(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        MyAudioComponent;                                  // 0x0228(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        MyAttachComponent;                                 // 0x0230(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAttachSeComponent">();
	}
	static class USQEXSEADAttachSeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAttachSeComponent>();
	}
};
static_assert(alignof(USQEXSEADAttachSeComponent) == 0x00D38D, "Wrong alignment on USQEXSEADAttachSeComponent");
static_assert(sizeof(USQEXSEADAttachSeComponent) == 0x00D38D, "Wrong size on USQEXSEADAttachSeComponent");
static_assert(offsetof(USQEXSEADAttachSeComponent, SoundAsset) == 0x000200, "Member 'USQEXSEADAttachSeComponent::SoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADAttachSeComponent, FadeInTime) == 0x000208, "Member 'USQEXSEADAttachSeComponent::FadeInTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADAttachSeComponent, FadeOutTime) == 0x00020C, "Member 'USQEXSEADAttachSeComponent::FadeOutTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADAttachSeComponent, AttachPointName) == 0x000218, "Member 'USQEXSEADAttachSeComponent::AttachPointName' has a wrong offset!");
static_assert(offsetof(USQEXSEADAttachSeComponent, MyAudioComponent) == 0x000228, "Member 'USQEXSEADAttachSeComponent::MyAudioComponent' has a wrong offset!");
static_assert(offsetof(USQEXSEADAttachSeComponent, MyAttachComponent) == 0x000230, "Member 'USQEXSEADAttachSeComponent::MyAttachComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAudioComponent
// 0x0000 (0x112E9AF0 - 0x112E9AF0)
class USQEXSEADAudioComponent : public UAudioComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAudioComponent">();
	}
	static class USQEXSEADAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAudioComponent>();
	}
};
static_assert(alignof(USQEXSEADAudioComponent) == 0x112E9AF0, "Wrong alignment on USQEXSEADAudioComponent");
static_assert(sizeof(USQEXSEADAudioComponent) == 0x112E9AF0, "Wrong size on USQEXSEADAudioComponent");

// Class SQEXSEAD.SQEXSEADAudioVolume
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEXSEADAudioVolume final : public AVolume
{
public:
	class USQEXSEADVolumeComponent*               VolumeComponent;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x0428(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectPresetNumber;                                // 0x042C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectFadeTime;                                    // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventName;                                         // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableZeroOne : 1;                                // 0x0440(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZeroOneSlot;                                       // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroOneValue;                                      // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroOneFadeTime;                                   // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     AudioVolumeSounds;                                 // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SoundVolume;                                       // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundFadeInTime;                                   // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundFadeInCurveNumber;                            // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundFadeOutTime;                                  // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundFadeOutCurveNumber;                           // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOccludeExteriorAudioVolumeSounds : 1;             // 0x0474(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_475[0x3];                                      // 0x0475(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudioVolumeSoundOcclusionVolume;                   // 0x0478(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolumeSoundOcclusionLPF;                      // 0x047C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolumeSoundOcclusionFadeInTime;               // 0x0480(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolumeSoundOcclusionFadeOutTime;              // 0x0484(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolumeSoundOcclusionLPFFadeInTime;            // 0x0488(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolumeSoundOcclusionLPFFadeOutTime;           // 0x048C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableUnoccludedObstruction : 1;                  // 0x0490(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObstructionVolume;                                 // 0x0494(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructionLPF;                                    // 0x0498(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InternalObstructionVolume;                         // 0x049C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InternalObstructionLPF;                            // 0x04A0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructionFadeTime;                               // 0x04A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseObstructionParamsSeparatePriority : 1;         // 0x04AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObstructionParamsSeparatePriority;                 // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupingID;                                        // 0x04B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASQEXSEADAudioVolume*>           GroupedAudioVolumes;                               // 0x04B8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      OverridingAttenuationSettings;                     // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D0[0x10];                                     // 0x04D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAudioVolume">();
	}
	static class ASQEXSEADAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEXSEADAudioVolume>();
	}
};
static_assert(alignof(ASQEXSEADAudioVolume) == 0x1EF72E00, "Wrong alignment on ASQEXSEADAudioVolume");
static_assert(sizeof(ASQEXSEADAudioVolume) == 0x1EF72E00, "Wrong size on ASQEXSEADAudioVolume");
static_assert(offsetof(ASQEXSEADAudioVolume, VolumeComponent) == 0x000420, "Member 'ASQEXSEADAudioVolume::VolumeComponent' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, EffectPresetNumber) == 0x00042C, "Member 'ASQEXSEADAudioVolume::EffectPresetNumber' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, EffectFadeTime) == 0x000430, "Member 'ASQEXSEADAudioVolume::EffectFadeTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, EventName) == 0x000438, "Member 'ASQEXSEADAudioVolume::EventName' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ZeroOneSlot) == 0x000444, "Member 'ASQEXSEADAudioVolume::ZeroOneSlot' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ZeroOneValue) == 0x000448, "Member 'ASQEXSEADAudioVolume::ZeroOneValue' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ZeroOneFadeTime) == 0x00044C, "Member 'ASQEXSEADAudioVolume::ZeroOneFadeTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSounds) == 0x000450, "Member 'ASQEXSEADAudioVolume::AudioVolumeSounds' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundVolume) == 0x000460, "Member 'ASQEXSEADAudioVolume::SoundVolume' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundFadeInTime) == 0x000464, "Member 'ASQEXSEADAudioVolume::SoundFadeInTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundFadeInCurveNumber) == 0x000468, "Member 'ASQEXSEADAudioVolume::SoundFadeInCurveNumber' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundFadeOutTime) == 0x00046C, "Member 'ASQEXSEADAudioVolume::SoundFadeOutTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundFadeOutCurveNumber) == 0x000470, "Member 'ASQEXSEADAudioVolume::SoundFadeOutCurveNumber' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionVolume) == 0x000478, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionVolume' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionLPF) == 0x00047C, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionLPF' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionFadeInTime) == 0x000480, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionFadeInTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionFadeOutTime) == 0x000484, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionFadeOutTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionLPFFadeInTime) == 0x000488, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionLPFFadeInTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionLPFFadeOutTime) == 0x00048C, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionLPFFadeOutTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ObstructionVolume) == 0x000494, "Member 'ASQEXSEADAudioVolume::ObstructionVolume' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ObstructionLPF) == 0x000498, "Member 'ASQEXSEADAudioVolume::ObstructionLPF' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, InternalObstructionVolume) == 0x00049C, "Member 'ASQEXSEADAudioVolume::InternalObstructionVolume' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, InternalObstructionLPF) == 0x0004A0, "Member 'ASQEXSEADAudioVolume::InternalObstructionLPF' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ObstructionFadeTime) == 0x0004A4, "Member 'ASQEXSEADAudioVolume::ObstructionFadeTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, Priority) == 0x0004A8, "Member 'ASQEXSEADAudioVolume::Priority' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ObstructionParamsSeparatePriority) == 0x0004B0, "Member 'ASQEXSEADAudioVolume::ObstructionParamsSeparatePriority' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, GroupingID) == 0x0004B4, "Member 'ASQEXSEADAudioVolume::GroupingID' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, GroupedAudioVolumes) == 0x0004B8, "Member 'ASQEXSEADAudioVolume::GroupedAudioVolumes' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, OverridingAttenuationSettings) == 0x0004C8, "Member 'ASQEXSEADAudioVolume::OverridingAttenuationSettings' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeAssetLoader
// 0x0010 (0x0058 - 0x0048)
class USQEXSEADAutoSeAssetLoader final : public UDataAsset
{
public:
	TArray<struct FSQEXSEADAutoSeAssetLoaderAssets> LoadAssets;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeAssetLoader">();
	}
	static class USQEXSEADAutoSeAssetLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeAssetLoader>();
	}
};
static_assert(alignof(USQEXSEADAutoSeAssetLoader) == 0x000008, "Wrong alignment on USQEXSEADAutoSeAssetLoader");
static_assert(sizeof(USQEXSEADAutoSeAssetLoader) == 0x000058, "Wrong size on USQEXSEADAutoSeAssetLoader");
static_assert(offsetof(USQEXSEADAutoSeAssetLoader, LoadAssets) == 0x000048, "Member 'USQEXSEADAutoSeAssetLoader::LoadAssets' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeComponentAssetTable
// 0x1850 (0x1898 - 0x0048)
class USQEXSEADAutoSeComponentAssetTable final : public UDataAsset
{
public:
	struct FSQEXSEADAutoSeComponentAssetTablePerSurface PerSurfaceInfos[0x3F];                             // 0x0048(0x0060)(Edit, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeComponentAssetTableNonSurface NonSurfaceInfos;                                   // 0x17E8(0x00A0)(Edit, NativeAccessSpecifierPublic)
	struct FSQEXSEADSurfaceAssetReferenceTableData AuxSurfaceAssetTable;                              // 0x1888(0x0010)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeComponentAssetTable">();
	}
	static class USQEXSEADAutoSeComponentAssetTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeComponentAssetTable>();
	}
};
static_assert(alignof(USQEXSEADAutoSeComponentAssetTable) == 0x000008, "Wrong alignment on USQEXSEADAutoSeComponentAssetTable");
static_assert(sizeof(USQEXSEADAutoSeComponentAssetTable) == 0x001898, "Wrong size on USQEXSEADAutoSeComponentAssetTable");
static_assert(offsetof(USQEXSEADAutoSeComponentAssetTable, PerSurfaceInfos) == 0x000048, "Member 'USQEXSEADAutoSeComponentAssetTable::PerSurfaceInfos' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponentAssetTable, NonSurfaceInfos) == 0x0017E8, "Member 'USQEXSEADAutoSeComponentAssetTable::NonSurfaceInfos' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponentAssetTable, AuxSurfaceAssetTable) == 0x001888, "Member 'USQEXSEADAutoSeComponentAssetTable::AuxSurfaceAssetTable' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeComponentSetting
// 0x116925F8 (0x11692640 - 0x0048)
class USQEXSEADAutoSeComponentSetting final : public UDataAsset
{
public:
	struct FSQEXSEADAutoSeComponentInitParams     InitParams;                                        // 0x0048(0x11692820)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeComponentSetting">();
	}
	static class USQEXSEADAutoSeComponentSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeComponentSetting>();
	}
};
static_assert(alignof(USQEXSEADAutoSeComponentSetting) == 0x11692640, "Wrong alignment on USQEXSEADAutoSeComponentSetting");
static_assert(sizeof(USQEXSEADAutoSeComponentSetting) == 0x11692640, "Wrong size on USQEXSEADAutoSeComponentSetting");
static_assert(offsetof(USQEXSEADAutoSeComponentSetting, InitParams) == 0x000048, "Member 'USQEXSEADAutoSeComponentSetting::InitParams' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeDetectionSetting
// 0x116921B8 (0x11692200 - 0x0048)
class USQEXSEADAutoSeDetectionSetting final : public UDataAsset
{
public:
	struct FSQEXSEADAutoSeAnalyzerSetting         AnalyzerSetting;                                   // 0x0048(0x11692200)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseAnalyzerSettingForMotionOnlyMode;              // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEXSEADAutoSeAnalyzerSetting         AnalyzerSettingForMotionOnlyMode;                  // 0x0064(0x11692200)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeDetectorSettingFootStep DetectorSettingFootStep;                           // 0x007C(0x11691EF0)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeDetectorSettingRustle   DetectorSettingRustle;                             // 0x008C(0x11691880)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeDetectorSettingSwing    DetectorSettingSwing;                              // 0x00B4(0x11691570)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeDetectionSetting">();
	}
	static class USQEXSEADAutoSeDetectionSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeDetectionSetting>();
	}
};
static_assert(alignof(USQEXSEADAutoSeDetectionSetting) == 0x11692200, "Wrong alignment on USQEXSEADAutoSeDetectionSetting");
static_assert(sizeof(USQEXSEADAutoSeDetectionSetting) == 0x11692200, "Wrong size on USQEXSEADAutoSeDetectionSetting");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, AnalyzerSetting) == 0x000048, "Member 'USQEXSEADAutoSeDetectionSetting::AnalyzerSetting' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, bUseAnalyzerSettingForMotionOnlyMode) == 0x000060, "Member 'USQEXSEADAutoSeDetectionSetting::bUseAnalyzerSettingForMotionOnlyMode' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, AnalyzerSettingForMotionOnlyMode) == 0x000064, "Member 'USQEXSEADAutoSeDetectionSetting::AnalyzerSettingForMotionOnlyMode' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, DetectorSettingFootStep) == 0x00007C, "Member 'USQEXSEADAutoSeDetectionSetting::DetectorSettingFootStep' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, DetectorSettingRustle) == 0x00008C, "Member 'USQEXSEADAutoSeDetectionSetting::DetectorSettingRustle' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, DetectorSettingSwing) == 0x0000B4, "Member 'USQEXSEADAutoSeDetectionSetting::DetectorSettingSwing' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeComponent
// 0x0000 (0xD38D - 0xD38D)
class USQEXSEADAutoSeComponent final : public UActorComponent
{
public:
	class USQEXSEADAutoSeComponentCallback*       AutoSeCallback;                                    // 0x0200(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAutoSeComponentSetting*        SettingData;                                       // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAutoSeComponentAssetTable*     AssetTable;                                        // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAutoSeDetectionSetting*        DetectionSetting;                                  // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableClip : 1;                                   // 0x0220(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlwaysMotionOnlyMode : 1;                         // 0x0220(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_221[0xF];                                      // 0x0221(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CachedMeshReference;                               // 0x0230(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPawnMovementComponent*                 CachedMovementComponent;                           // 0x0238(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_240[0x80];                                     // 0x0240(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeComponent">();
	}
	static class USQEXSEADAutoSeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeComponent>();
	}
};
static_assert(alignof(USQEXSEADAutoSeComponent) == 0x00D38D, "Wrong alignment on USQEXSEADAutoSeComponent");
static_assert(sizeof(USQEXSEADAutoSeComponent) == 0x00D38D, "Wrong size on USQEXSEADAutoSeComponent");
static_assert(offsetof(USQEXSEADAutoSeComponent, AutoSeCallback) == 0x000200, "Member 'USQEXSEADAutoSeComponent::AutoSeCallback' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponent, SettingData) == 0x000208, "Member 'USQEXSEADAutoSeComponent::SettingData' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponent, AssetTable) == 0x000210, "Member 'USQEXSEADAutoSeComponent::AssetTable' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponent, DetectionSetting) == 0x000218, "Member 'USQEXSEADAutoSeComponent::DetectionSetting' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponent, CachedMeshReference) == 0x000230, "Member 'USQEXSEADAutoSeComponent::CachedMeshReference' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponent, CachedMovementComponent) == 0x000238, "Member 'USQEXSEADAutoSeComponent::CachedMovementComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEAD_BGM
// 0x0040 (0x0080 - 0x0040)
class USQEXSEAD_BGM final : public UObject
{
public:
	class USQEXSEADBGMSlot*                       OwnerSlot_;                                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADSound*                         Sound_;                                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x30];                                      // 0x0050(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEAD_BGM">();
	}
	static class USQEXSEAD_BGM* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEAD_BGM>();
	}
};
static_assert(alignof(USQEXSEAD_BGM) == 0x000008, "Wrong alignment on USQEXSEAD_BGM");
static_assert(sizeof(USQEXSEAD_BGM) == 0x000080, "Wrong size on USQEXSEAD_BGM");
static_assert(offsetof(USQEXSEAD_BGM, OwnerSlot_) == 0x000040, "Member 'USQEXSEAD_BGM::OwnerSlot_' has a wrong offset!");
static_assert(offsetof(USQEXSEAD_BGM, Sound_) == 0x000048, "Member 'USQEXSEAD_BGM::Sound_' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADBGMManager
// 0x0120 (0x0160 - 0x0040)
class USQEXSEADBGMManager final : public UObject
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQEXSEADBGMSlot*>               Slots_;                                            // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class USQEXSEADBGMSlotController*>     Controllers_;                                      // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class USQEXSEADBGMSlot*                       PlayingSlot_;                                      // 0x0068(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0xC8];                                      // 0x0070(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQEXSEAD_BGMSlotSetting>       SlotSettings_;                                     // 0x0138(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x18];                                     // 0x0148(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADBGMManager">();
	}
	static class USQEXSEADBGMManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADBGMManager>();
	}
};
static_assert(alignof(USQEXSEADBGMManager) == 0x000008, "Wrong alignment on USQEXSEADBGMManager");
static_assert(sizeof(USQEXSEADBGMManager) == 0x000160, "Wrong size on USQEXSEADBGMManager");
static_assert(offsetof(USQEXSEADBGMManager, Slots_) == 0x000048, "Member 'USQEXSEADBGMManager::Slots_' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMManager, Controllers_) == 0x000058, "Member 'USQEXSEADBGMManager::Controllers_' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMManager, PlayingSlot_) == 0x000068, "Member 'USQEXSEADBGMManager::PlayingSlot_' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMManager, SlotSettings_) == 0x000138, "Member 'USQEXSEADBGMManager::SlotSettings_' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADBGMSlot
// 0x0078 (0x00B8 - 0x0040)
class USQEXSEADBGMSlot final : public UObject
{
public:
	ESQEXSEAD_BGMState                            State;                                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x47];                                      // 0x0041(0x0047)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEXSEAD_BGMOptions                   DefaultOptions_;                                   // 0x0088(0x0020)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	class USQEXSEAD_BGM*                          BGM_;                                              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USQEXSEAD_BGM*                          PrevBGM_;                                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADBGMSlot">();
	}
	static class USQEXSEADBGMSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADBGMSlot>();
	}
};
static_assert(alignof(USQEXSEADBGMSlot) == 0x000008, "Wrong alignment on USQEXSEADBGMSlot");
static_assert(sizeof(USQEXSEADBGMSlot) == 0x0000B8, "Wrong size on USQEXSEADBGMSlot");
static_assert(offsetof(USQEXSEADBGMSlot, State) == 0x000040, "Member 'USQEXSEADBGMSlot::State' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMSlot, DefaultOptions_) == 0x000088, "Member 'USQEXSEADBGMSlot::DefaultOptions_' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMSlot, BGM_) == 0x0000A8, "Member 'USQEXSEADBGMSlot::BGM_' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMSlot, PrevBGM_) == 0x0000B0, "Member 'USQEXSEADBGMSlot::PrevBGM_' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADBGMSlotController
// 0x0008 (0x0048 - 0x0040)
class USQEXSEADBGMSlotController final : public UObject
{
public:
	class USQEXSEADBGMSlot*                       Slot_;                                             // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	struct FSQEXSEAD_Timing GetJustTiming();
	int32 GetModeIndex();
	float GetMusicalTime();
	struct FSQEXSEAD_Timing GetNearTiming();
	int32 GetNextSectionIndex();
	int32 GetSectionIndex();
	float GetTempo();
	bool IsPlaying();
	bool IsSuspended();
	void Play();
	void Ready();
	void Reset();
	void ResetToDefaultOptions(const struct FSQEXSEAD_BGMOptions& NewOptions);
	void Set(class USoundBase* Sound);
	void SetDefaultOptions(const struct FSQEXSEAD_BGMOptions& NewOptions);
	void SetMode(int32 Index_0);
	void SetModeByName(class FName Name_0);
	void SetOptions(const struct FSQEXSEAD_BGMOptions& NewOptions);
	void SetPath(TSoftObjectPtr<class USoundBase> SoundReference);
	void SetPlayFadeInTime(float FadeTime);
	void SetPriority(int32 Priority);
	void SetRestoreAfterFinish(bool bRestoreAfterFinish);
	void SetResumeFadeInTime(float FadeTime);
	void SetSection(int32 Index_0);
	void SetSeekTime(float SeekTime);
	void SetSilent();
	void SetStaySuspendTime(float StaySuspendTime);
	void SetStopFadeOutTime(float FadeTime);
	void SetStoreBehaviour(ESQEXSEAD_BGMStoreBehaviour StoreBehaviour);
	void SetSuspendFadeOutTime(float FadeTime);
	void SetSuspendSilent();
	void SetVolume(float Volume, float FadeTime);
	void Stop();
	void Unreference();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADBGMSlotController">();
	}
	static class USQEXSEADBGMSlotController* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADBGMSlotController>();
	}
};
static_assert(alignof(USQEXSEADBGMSlotController) == 0x000008, "Wrong alignment on USQEXSEADBGMSlotController");
static_assert(sizeof(USQEXSEADBGMSlotController) == 0x000048, "Wrong size on USQEXSEADBGMSlotController");
static_assert(offsetof(USQEXSEADBGMSlotController, Slot_) == 0x000040, "Member 'USQEXSEADBGMSlotController::Slot_' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADCollisionEventSeComponent
// 0x0000 (0xD38D - 0xD38D)
class USQEXSEADCollisionEventSeComponent final : public UActorComponent
{
public:
	class USoundBase*                             OnHitSoundAsset;                                   // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OnPawnHitSoundAsset;                               // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistanceThreshold;                              // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnBeginOverlapSoundAsset;                          // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OnEndOverlapSoundAsset;                            // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPawnOverlapOnly : 1;                              // 0x0228(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnFractureSoundAsset;                              // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         MyMeshComponent;                                   // 0x0238(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDestructibleComponent*                 MyDestructibleComponent;                           // 0x0240(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_248[0x18];                                     // 0x0248(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnFracture(const struct FVector& HitPoint, const struct FVector& HitDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADCollisionEventSeComponent">();
	}
	static class USQEXSEADCollisionEventSeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADCollisionEventSeComponent>();
	}
};
static_assert(alignof(USQEXSEADCollisionEventSeComponent) == 0x00D38D, "Wrong alignment on USQEXSEADCollisionEventSeComponent");
static_assert(sizeof(USQEXSEADCollisionEventSeComponent) == 0x00D38D, "Wrong size on USQEXSEADCollisionEventSeComponent");
static_assert(offsetof(USQEXSEADCollisionEventSeComponent, OnHitSoundAsset) == 0x000200, "Member 'USQEXSEADCollisionEventSeComponent::OnHitSoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADCollisionEventSeComponent, OnPawnHitSoundAsset) == 0x000208, "Member 'USQEXSEADCollisionEventSeComponent::OnPawnHitSoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADCollisionEventSeComponent, HitDistanceThreshold) == 0x000210, "Member 'USQEXSEADCollisionEventSeComponent::HitDistanceThreshold' has a wrong offset!");
static_assert(offsetof(USQEXSEADCollisionEventSeComponent, OnBeginOverlapSoundAsset) == 0x000218, "Member 'USQEXSEADCollisionEventSeComponent::OnBeginOverlapSoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADCollisionEventSeComponent, OnEndOverlapSoundAsset) == 0x000220, "Member 'USQEXSEADCollisionEventSeComponent::OnEndOverlapSoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADCollisionEventSeComponent, OnFractureSoundAsset) == 0x000230, "Member 'USQEXSEADCollisionEventSeComponent::OnFractureSoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADCollisionEventSeComponent, MyMeshComponent) == 0x000238, "Member 'USQEXSEADCollisionEventSeComponent::MyMeshComponent' has a wrong offset!");
static_assert(offsetof(USQEXSEADCollisionEventSeComponent, MyDestructibleComponent) == 0x000240, "Member 'USQEXSEADCollisionEventSeComponent::MyDestructibleComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADSurfaceNameTable
// 0x01F8 (0x0240 - 0x0048)
class USQEXSEADSurfaceNameTable final : public UDataAsset
{
public:
	class FName                                   Names[0x3F];                                       // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADSurfaceNameTable">();
	}
	static class USQEXSEADSurfaceNameTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADSurfaceNameTable>();
	}
};
static_assert(alignof(USQEXSEADSurfaceNameTable) == 0x000008, "Wrong alignment on USQEXSEADSurfaceNameTable");
static_assert(sizeof(USQEXSEADSurfaceNameTable) == 0x000240, "Wrong size on USQEXSEADSurfaceNameTable");
static_assert(offsetof(USQEXSEADSurfaceNameTable, Names) == 0x000048, "Member 'USQEXSEADSurfaceNameTable::Names' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADSurfaceAssetReferenceTable
// 0x0010 (0x0058 - 0x0048)
class USQEXSEADSurfaceAssetReferenceTable final : public UDataAsset
{
public:
	struct FSQEXSEADSurfaceAssetReferenceTableData TableData;                                         // 0x0048(0x0010)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADSurfaceAssetReferenceTable">();
	}
	static class USQEXSEADSurfaceAssetReferenceTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADSurfaceAssetReferenceTable>();
	}
};
static_assert(alignof(USQEXSEADSurfaceAssetReferenceTable) == 0x000008, "Wrong alignment on USQEXSEADSurfaceAssetReferenceTable");
static_assert(sizeof(USQEXSEADSurfaceAssetReferenceTable) == 0x000058, "Wrong size on USQEXSEADSurfaceAssetReferenceTable");
static_assert(offsetof(USQEXSEADSurfaceAssetReferenceTable, TableData) == 0x000048, "Member 'USQEXSEADSurfaceAssetReferenceTable::TableData' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackAutoSeControl
// 0x0018 (0x00A8 - 0x0090)
class USQEXSEADInterpTrackAutoSeControl final : public UInterpTrack
{
public:
	TArray<struct FSQEXSEADAutoSeControlTrackKey> Keys;                                              // 0x0090(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   OverrideGroupName;                                 // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackAutoSeControl">();
	}
	static class USQEXSEADInterpTrackAutoSeControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackAutoSeControl>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackAutoSeControl) == 0x000008, "Wrong alignment on USQEXSEADInterpTrackAutoSeControl");
static_assert(sizeof(USQEXSEADInterpTrackAutoSeControl) == 0x0000A8, "Wrong size on USQEXSEADInterpTrackAutoSeControl");
static_assert(offsetof(USQEXSEADInterpTrackAutoSeControl, Keys) == 0x000090, "Member 'USQEXSEADInterpTrackAutoSeControl::Keys' has a wrong offset!");
static_assert(offsetof(USQEXSEADInterpTrackAutoSeControl, OverrideGroupName) == 0x0000A0, "Member 'USQEXSEADInterpTrackAutoSeControl::OverrideGroupName' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackCategoryVolumeFade
// 0x0000 (0x112EC5B0 - 0x112EC5B0)
class USQEXSEADInterpTrackCategoryVolumeFade final : public UInterpTrackFloatBase
{
public:
	class FName                                   CategoryName;                                      // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExtendCategoryNames;                               // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         OnMatineeEndSetCategoryVolume;                     // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackCategoryVolumeFade">();
	}
	static class USQEXSEADInterpTrackCategoryVolumeFade* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackCategoryVolumeFade>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackCategoryVolumeFade) == 0x112EC5B0, "Wrong alignment on USQEXSEADInterpTrackCategoryVolumeFade");
static_assert(sizeof(USQEXSEADInterpTrackCategoryVolumeFade) == 0x112EC5B0, "Wrong size on USQEXSEADInterpTrackCategoryVolumeFade");
static_assert(offsetof(USQEXSEADInterpTrackCategoryVolumeFade, CategoryName) == 0x0000B0, "Member 'USQEXSEADInterpTrackCategoryVolumeFade::CategoryName' has a wrong offset!");
static_assert(offsetof(USQEXSEADInterpTrackCategoryVolumeFade, ExtendCategoryNames) == 0x0000B8, "Member 'USQEXSEADInterpTrackCategoryVolumeFade::ExtendCategoryNames' has a wrong offset!");
static_assert(offsetof(USQEXSEADInterpTrackCategoryVolumeFade, OnMatineeEndSetCategoryVolume) == 0x0000C8, "Member 'USQEXSEADInterpTrackCategoryVolumeFade::OnMatineeEndSetCategoryVolume' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackEvent
// 0x0018 (0x00A8 - 0x0090)
class USQEXSEADInterpTrackEvent final : public UInterpTrack
{
public:
	TArray<struct FSQEXSEADEventTrackKey>         EventTrack;                                        // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenJumpingForwards : 1;                // 0x00A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCustomEventName : 1;                           // 0x00A0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackEvent">();
	}
	static class USQEXSEADInterpTrackEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackEvent>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackEvent) == 0x000008, "Wrong alignment on USQEXSEADInterpTrackEvent");
static_assert(sizeof(USQEXSEADInterpTrackEvent) == 0x0000A8, "Wrong size on USQEXSEADInterpTrackEvent");
static_assert(offsetof(USQEXSEADInterpTrackEvent, EventTrack) == 0x000090, "Member 'USQEXSEADInterpTrackEvent::EventTrack' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackExternalParameter
// 0x0000 (0x112EC5B0 - 0x112EC5B0)
class USQEXSEADInterpTrackExternalParameter final : public UInterpTrackFloatBase
{
public:
	class FName                                   ExternalParameterName;                             // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnMatineeEndSetParameterValue;                     // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackExternalParameter">();
	}
	static class USQEXSEADInterpTrackExternalParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackExternalParameter>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackExternalParameter) == 0x112EC5B0, "Wrong alignment on USQEXSEADInterpTrackExternalParameter");
static_assert(sizeof(USQEXSEADInterpTrackExternalParameter) == 0x112EC5B0, "Wrong size on USQEXSEADInterpTrackExternalParameter");
static_assert(offsetof(USQEXSEADInterpTrackExternalParameter, ExternalParameterName) == 0x0000B0, "Member 'USQEXSEADInterpTrackExternalParameter::ExternalParameterName' has a wrong offset!");
static_assert(offsetof(USQEXSEADInterpTrackExternalParameter, OnMatineeEndSetParameterValue) == 0x0000B8, "Member 'USQEXSEADInterpTrackExternalParameter::OnMatineeEndSetParameterValue' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackInstAutoSeControl
// 0x0018 (0x0058 - 0x0040)
class USQEXSEADInterpTrackInstAutoSeControl final : public UInterpTrackInst
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackInstAutoSeControl">();
	}
	static class USQEXSEADInterpTrackInstAutoSeControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackInstAutoSeControl>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackInstAutoSeControl) == 0x000008, "Wrong alignment on USQEXSEADInterpTrackInstAutoSeControl");
static_assert(sizeof(USQEXSEADInterpTrackInstAutoSeControl) == 0x000058, "Wrong size on USQEXSEADInterpTrackInstAutoSeControl");

// Class SQEXSEAD.SQEXSEADInterpTrackInstBGM
// 0x0008 (0x0058 - 0x0050)
class USQEXSEADInterpTrackInstBGM final : public UInterpTrackInstSound
{
public:
	class USoundBase*                             PlayedSound;                                       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackInstBGM">();
	}
	static class USQEXSEADInterpTrackInstBGM* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackInstBGM>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackInstBGM) == 0x000008, "Wrong alignment on USQEXSEADInterpTrackInstBGM");
static_assert(sizeof(USQEXSEADInterpTrackInstBGM) == 0x000058, "Wrong size on USQEXSEADInterpTrackInstBGM");
static_assert(offsetof(USQEXSEADInterpTrackInstBGM, PlayedSound) == 0x000050, "Member 'USQEXSEADInterpTrackInstBGM::PlayedSound' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackInstBGMControl
// 0x0008 (0x0048 - 0x0040)
class USQEXSEADInterpTrackInstBGMControl final : public UInterpTrackInst
{
public:
	float                                         LastUpdatePosition;                                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackInstBGMControl">();
	}
	static class USQEXSEADInterpTrackInstBGMControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackInstBGMControl>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackInstBGMControl) == 0x000008, "Wrong alignment on USQEXSEADInterpTrackInstBGMControl");
static_assert(sizeof(USQEXSEADInterpTrackInstBGMControl) == 0x000048, "Wrong size on USQEXSEADInterpTrackInstBGMControl");
static_assert(offsetof(USQEXSEADInterpTrackInstBGMControl, LastUpdatePosition) == 0x000040, "Member 'USQEXSEADInterpTrackInstBGMControl::LastUpdatePosition' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackInstCategoryVolumeFade
// 0x0008 (0x0058 - 0x0050)
class USQEXSEADInterpTrackInstCategoryVolumeFade final : public UInterpTrackInstProperty
{
public:
	uint8                                         Pad_50[0x4];                                       // 0x0050(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ResetVolume;                                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackInstCategoryVolumeFade">();
	}
	static class USQEXSEADInterpTrackInstCategoryVolumeFade* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackInstCategoryVolumeFade>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackInstCategoryVolumeFade) == 0x000008, "Wrong alignment on USQEXSEADInterpTrackInstCategoryVolumeFade");
static_assert(sizeof(USQEXSEADInterpTrackInstCategoryVolumeFade) == 0x000058, "Wrong size on USQEXSEADInterpTrackInstCategoryVolumeFade");
static_assert(offsetof(USQEXSEADInterpTrackInstCategoryVolumeFade, ResetVolume) == 0x000054, "Member 'USQEXSEADInterpTrackInstCategoryVolumeFade::ResetVolume' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackInstEvent
// 0x0008 (0x0048 - 0x0040)
class USQEXSEADInterpTrackInstEvent final : public UInterpTrackInst
{
public:
	float                                         LastUpdatePosition;                                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackInstEvent">();
	}
	static class USQEXSEADInterpTrackInstEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackInstEvent>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackInstEvent) == 0x000008, "Wrong alignment on USQEXSEADInterpTrackInstEvent");
static_assert(sizeof(USQEXSEADInterpTrackInstEvent) == 0x000048, "Wrong size on USQEXSEADInterpTrackInstEvent");
static_assert(offsetof(USQEXSEADInterpTrackInstEvent, LastUpdatePosition) == 0x000040, "Member 'USQEXSEADInterpTrackInstEvent::LastUpdatePosition' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackInstExternalParameter
// 0x0008 (0x0058 - 0x0050)
class USQEXSEADInterpTrackInstExternalParameter final : public UInterpTrackInstProperty
{
public:
	uint8                                         Pad_50[0x4];                                       // 0x0050(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ResetValue;                                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackInstExternalParameter">();
	}
	static class USQEXSEADInterpTrackInstExternalParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackInstExternalParameter>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackInstExternalParameter) == 0x000008, "Wrong alignment on USQEXSEADInterpTrackInstExternalParameter");
static_assert(sizeof(USQEXSEADInterpTrackInstExternalParameter) == 0x000058, "Wrong size on USQEXSEADInterpTrackInstExternalParameter");
static_assert(offsetof(USQEXSEADInterpTrackInstExternalParameter, ResetValue) == 0x000054, "Member 'USQEXSEADInterpTrackInstExternalParameter::ResetValue' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADInterpTrackInstSound
// 0x0010 (0x0060 - 0x0050)
class USQEXSEADInterpTrackInstSound final : public UInterpTrackInstSound
{
public:
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackInstSound">();
	}
	static class USQEXSEADInterpTrackInstSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackInstSound>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackInstSound) == 0x000008, "Wrong alignment on USQEXSEADInterpTrackInstSound");
static_assert(sizeof(USQEXSEADInterpTrackInstSound) == 0x000060, "Wrong size on USQEXSEADInterpTrackInstSound");

// Class SQEXSEAD.SQEXSEADInterpTrackSound
// 0x0000 (0x112ED410 - 0x112ED410)
class USQEXSEADInterpTrackSound final : public UInterpTrackSound
{
public:
	uint8                                         bTreatAsNonWorldSound : 1;                         // 0x00C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADInterpTrackSound">();
	}
	static class USQEXSEADInterpTrackSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADInterpTrackSound>();
	}
};
static_assert(alignof(USQEXSEADInterpTrackSound) == 0x112ED410, "Wrong alignment on USQEXSEADInterpTrackSound");
static_assert(sizeof(USQEXSEADInterpTrackSound) == 0x112ED410, "Wrong size on USQEXSEADInterpTrackSound");

// Class SQEXSEAD.SQEXSEADLayoutAudioComponent
// 0x0000 (0x112E9AF0 - 0x112E9AF0)
class USQEXSEADLayoutAudioComponent final : public USQEXSEADAudioComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADLayoutAudioComponent">();
	}
	static class USQEXSEADLayoutAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADLayoutAudioComponent>();
	}
};
static_assert(alignof(USQEXSEADLayoutAudioComponent) == 0x112E9AF0, "Wrong alignment on USQEXSEADLayoutAudioComponent");
static_assert(sizeof(USQEXSEADLayoutAudioComponent) == 0x112E9AF0, "Wrong size on USQEXSEADLayoutAudioComponent");

// Class SQEXSEAD.SQEXSEADLayoutComponent
// 0x0000 (0x112E9AF0 - 0x112E9AF0)
class USQEXSEADLayoutComponent final : public UPrimitiveComponent
{
public:
	class USoundBase*                             Sound;                                             // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEXSEADLayoutInfo                    LayoutInfo;                                        // 0x0870(0x0040)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bIgnoreObstruction : 1;                            // 0x08B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideInteriorFactor : 1;                       // 0x08B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_8B1[0x3];                                      // 0x08B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InteriorFactor;                                    // 0x08B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x08B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x08BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x08C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C4[0x4];                                      // 0x08C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEXSEADLayoutAudioComponent*          AudioComponent;                                    // 0x08C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8D0[0x20];                                     // 0x08D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADLayoutComponent">();
	}
	static class USQEXSEADLayoutComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADLayoutComponent>();
	}
};
static_assert(alignof(USQEXSEADLayoutComponent) == 0x112E9AF0, "Wrong alignment on USQEXSEADLayoutComponent");
static_assert(sizeof(USQEXSEADLayoutComponent) == 0x112E9AF0, "Wrong size on USQEXSEADLayoutComponent");
static_assert(offsetof(USQEXSEADLayoutComponent, Sound) == 0x000868, "Member 'USQEXSEADLayoutComponent::Sound' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, LayoutInfo) == 0x000870, "Member 'USQEXSEADLayoutComponent::LayoutInfo' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, InteriorFactor) == 0x0008B4, "Member 'USQEXSEADLayoutComponent::InteriorFactor' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, VolumeMultiplier) == 0x0008B8, "Member 'USQEXSEADLayoutComponent::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, PitchMultiplier) == 0x0008BC, "Member 'USQEXSEADLayoutComponent::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, FadeTime) == 0x0008C0, "Member 'USQEXSEADLayoutComponent::FadeTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, AudioComponent) == 0x0008C8, "Member 'USQEXSEADLayoutComponent::AudioComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADLayoutObstruction
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEXSEADLayoutObstruction final : public AActor
{
public:
	class USQEXSEADLayoutObstructionComponent*    ObstructionComponent;                              // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADLayoutObstruction">();
	}
	static class ASQEXSEADLayoutObstruction* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEXSEADLayoutObstruction>();
	}
};
static_assert(alignof(ASQEXSEADLayoutObstruction) == 0x1EF72E00, "Wrong alignment on ASQEXSEADLayoutObstruction");
static_assert(sizeof(ASQEXSEADLayoutObstruction) == 0x1EF72E00, "Wrong size on ASQEXSEADLayoutObstruction");
static_assert(offsetof(ASQEXSEADLayoutObstruction, ObstructionComponent) == 0x0003E0, "Member 'ASQEXSEADLayoutObstruction::ObstructionComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADLayoutObstructionComponent
// 0x0000 (0x112E9AF0 - 0x112E9AF0)
class USQEXSEADLayoutObstructionComponent final : public USceneComponent
{
public:
	struct FSQEXSEADLayoutObstructionInfo         ObstructionInfo;                                   // 0x0418(0x0028)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADLayoutObstructionComponent">();
	}
	static class USQEXSEADLayoutObstructionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADLayoutObstructionComponent>();
	}
};
static_assert(alignof(USQEXSEADLayoutObstructionComponent) == 0x112E9AF0, "Wrong alignment on USQEXSEADLayoutObstructionComponent");
static_assert(sizeof(USQEXSEADLayoutObstructionComponent) == 0x112E9AF0, "Wrong size on USQEXSEADLayoutObstructionComponent");
static_assert(offsetof(USQEXSEADLayoutObstructionComponent, ObstructionInfo) == 0x000418, "Member 'USQEXSEADLayoutObstructionComponent::ObstructionInfo' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADLayoutSound
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEXSEADLayoutSound final : public AActor
{
public:
	class USQEXSEADLayoutComponent*               LayoutComponent;                                   // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADLayoutSound">();
	}
	static class ASQEXSEADLayoutSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEXSEADLayoutSound>();
	}
};
static_assert(alignof(ASQEXSEADLayoutSound) == 0x1EF72E00, "Wrong alignment on ASQEXSEADLayoutSound");
static_assert(sizeof(ASQEXSEADLayoutSound) == 0x1EF72E00, "Wrong size on ASQEXSEADLayoutSound");
static_assert(offsetof(ASQEXSEADLayoutSound, LayoutComponent) == 0x0003E0, "Member 'ASQEXSEADLayoutSound::LayoutComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADSound
// 0x0000 (0x1166C9B0 - 0x1166C9B0)
class USQEXSEADSound : public USoundWave
{
public:
	bool                                          bUseKohrogiAttenuation;                            // 0x0290(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEXSEADSoundBank*                     ReferenceBank;                                     // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x02A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideStopFadeTime;                             // 0x02A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopFadeTime;                                      // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUISound;                                        // 0x02AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreEnginePause;                                // 0x02AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE[0x2];                                      // 0x02AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PauseFadeTime;                                     // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAudioVolumeAttenuation;                     // 0x02B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreObstruction;                                // 0x02B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSEADTracingOcclusion;                       // 0x02B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             SEADOcclusionTraceChannel;                         // 0x02B7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEADSoundOutputPort                      SEADSoundOutputPort;                               // 0x02B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9[0x2EF];                                    // 0x02B9(0x02EF)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADSound">();
	}
	static class USQEXSEADSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADSound>();
	}
};
static_assert(alignof(USQEXSEADSound) == 0x1166C9B0, "Wrong alignment on USQEXSEADSound");
static_assert(sizeof(USQEXSEADSound) == 0x1166C9B0, "Wrong size on USQEXSEADSound");
static_assert(offsetof(USQEXSEADSound, bUseKohrogiAttenuation) == 0x000290, "Member 'USQEXSEADSound::bUseKohrogiAttenuation' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, ReferenceBank) == 0x000298, "Member 'USQEXSEADSound::ReferenceBank' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, SoundIndex) == 0x0002A0, "Member 'USQEXSEADSound::SoundIndex' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bOverrideStopFadeTime) == 0x0002A4, "Member 'USQEXSEADSound::bOverrideStopFadeTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, StopFadeTime) == 0x0002A8, "Member 'USQEXSEADSound::StopFadeTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bIsUISound) == 0x0002AC, "Member 'USQEXSEADSound::bIsUISound' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bIgnoreEnginePause) == 0x0002AD, "Member 'USQEXSEADSound::bIgnoreEnginePause' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, PauseFadeTime) == 0x0002B0, "Member 'USQEXSEADSound::PauseFadeTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bIgnoreAudioVolumeAttenuation) == 0x0002B4, "Member 'USQEXSEADSound::bIgnoreAudioVolumeAttenuation' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bIgnoreObstruction) == 0x0002B5, "Member 'USQEXSEADSound::bIgnoreObstruction' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bEnableSEADTracingOcclusion) == 0x0002B6, "Member 'USQEXSEADSound::bEnableSEADTracingOcclusion' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, SEADOcclusionTraceChannel) == 0x0002B7, "Member 'USQEXSEADSound::SEADOcclusionTraceChannel' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, SEADSoundOutputPort) == 0x0002B8, "Member 'USQEXSEADSound::SEADSoundOutputPort' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADMusic
// 0x0000 (0x1166C9B0 - 0x1166C9B0)
class USQEXSEADMusic final : public USQEXSEADSound
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADMusic">();
	}
	static class USQEXSEADMusic* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADMusic>();
	}
};
static_assert(alignof(USQEXSEADMusic) == 0x1166C9B0, "Wrong alignment on USQEXSEADMusic");
static_assert(sizeof(USQEXSEADMusic) == 0x1166C9B0, "Wrong size on USQEXSEADMusic");

// Class SQEXSEAD.SQEXSEADMusicActor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEXSEADMusicActor final : public AActor
{
public:
	uint8                                         bAutoPlay : 1;                                     // 0x03E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AudioComponent;                                    // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void BlendMode(const class FString& ModeName, float Rate, float FadeTime);
	void BlendModeIndex(int32 ModeIndex, float Rate, float FadeTime);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void Play(float StartTime);
	void SetMode(const class FString& ModeName);
	void SetModeIndex(int32 ModeIndex);
	void SetNextSection(const class FString& SectionName);
	void SetNextSectionIndex(int32 SectionIndex);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADMusicActor">();
	}
	static class ASQEXSEADMusicActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEXSEADMusicActor>();
	}
};
static_assert(alignof(ASQEXSEADMusicActor) == 0x1EF72E00, "Wrong alignment on ASQEXSEADMusicActor");
static_assert(sizeof(ASQEXSEADMusicActor) == 0x1EF72E00, "Wrong size on ASQEXSEADMusicActor");
static_assert(offsetof(ASQEXSEADMusicActor, AudioComponent) == 0x0003E8, "Member 'ASQEXSEADMusicActor::AudioComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADPhysObjSeComponentSetting
// 0x0028 (0x0070 - 0x0048)
class USQEXSEADPhysObjSeComponentSetting final : public UDataAsset
{
public:
	class USoundBase*                             HitSE;                                             // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableSwithHitSE : 1;                             // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             VelocitySE;                                        // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitImpulseThreshold;                               // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistanceThreshold;                              // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityThreshold;                                 // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityAudioFadeOutTime;                          // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADPhysObjSeComponentSetting">();
	}
	static class USQEXSEADPhysObjSeComponentSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADPhysObjSeComponentSetting>();
	}
};
static_assert(alignof(USQEXSEADPhysObjSeComponentSetting) == 0x000008, "Wrong alignment on USQEXSEADPhysObjSeComponentSetting");
static_assert(sizeof(USQEXSEADPhysObjSeComponentSetting) == 0x000070, "Wrong size on USQEXSEADPhysObjSeComponentSetting");
static_assert(offsetof(USQEXSEADPhysObjSeComponentSetting, HitSE) == 0x000048, "Member 'USQEXSEADPhysObjSeComponentSetting::HitSE' has a wrong offset!");
static_assert(offsetof(USQEXSEADPhysObjSeComponentSetting, VelocitySE) == 0x000058, "Member 'USQEXSEADPhysObjSeComponentSetting::VelocitySE' has a wrong offset!");
static_assert(offsetof(USQEXSEADPhysObjSeComponentSetting, HitImpulseThreshold) == 0x000060, "Member 'USQEXSEADPhysObjSeComponentSetting::HitImpulseThreshold' has a wrong offset!");
static_assert(offsetof(USQEXSEADPhysObjSeComponentSetting, HitDistanceThreshold) == 0x000064, "Member 'USQEXSEADPhysObjSeComponentSetting::HitDistanceThreshold' has a wrong offset!");
static_assert(offsetof(USQEXSEADPhysObjSeComponentSetting, VelocityThreshold) == 0x000068, "Member 'USQEXSEADPhysObjSeComponentSetting::VelocityThreshold' has a wrong offset!");
static_assert(offsetof(USQEXSEADPhysObjSeComponentSetting, VelocityAudioFadeOutTime) == 0x00006C, "Member 'USQEXSEADPhysObjSeComponentSetting::VelocityAudioFadeOutTime' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADPhysObjSeComponent
// 0x0000 (0xD38D - 0xD38D)
class USQEXSEADPhysObjSeComponent final : public UActorComponent
{
public:
	class USQEXSEADPhysObjSeComponentSetting*     Setting;                                           // 0x0200(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         MyMeshComponent;                                   // 0x0208(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        VelocityAudioComponent;                            // 0x0210(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_218[0x28];                                     // 0x0218(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void StopCalculation(float StopInnerSoundsFadeTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADPhysObjSeComponent">();
	}
	static class USQEXSEADPhysObjSeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADPhysObjSeComponent>();
	}
};
static_assert(alignof(USQEXSEADPhysObjSeComponent) == 0x00D38D, "Wrong alignment on USQEXSEADPhysObjSeComponent");
static_assert(sizeof(USQEXSEADPhysObjSeComponent) == 0x00D38D, "Wrong size on USQEXSEADPhysObjSeComponent");
static_assert(offsetof(USQEXSEADPhysObjSeComponent, Setting) == 0x000200, "Member 'USQEXSEADPhysObjSeComponent::Setting' has a wrong offset!");
static_assert(offsetof(USQEXSEADPhysObjSeComponent, MyMeshComponent) == 0x000208, "Member 'USQEXSEADPhysObjSeComponent::MyMeshComponent' has a wrong offset!");
static_assert(offsetof(USQEXSEADPhysObjSeComponent, VelocityAudioComponent) == 0x000210, "Member 'USQEXSEADPhysObjSeComponent::VelocityAudioComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADSoundBank
// 0x02F0 (0x0330 - 0x0040)
class USQEXSEADSoundBank final : public UObject
{
public:
	class UAssetImportData*                       AssetImportData;                                   // 0x0040(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x2E8];                                     // 0x0048(0x02E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADSoundBank">();
	}
	static class USQEXSEADSoundBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADSoundBank>();
	}
};
static_assert(alignof(USQEXSEADSoundBank) == 0x000008, "Wrong alignment on USQEXSEADSoundBank");
static_assert(sizeof(USQEXSEADSoundBank) == 0x000330, "Wrong size on USQEXSEADSoundBank");
static_assert(offsetof(USQEXSEADSoundBank, AssetImportData) == 0x000040, "Member 'USQEXSEADSoundBank::AssetImportData' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADSoundReferenceEnumSet
// 0x0010 (0x0058 - 0x0048)
class USQEXSEADSoundReferenceEnumSet final : public UDataAsset
{
public:
	TArray<struct FSQEXSEADSoundReference>        References;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADSoundReferenceEnumSet">();
	}
	static class USQEXSEADSoundReferenceEnumSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADSoundReferenceEnumSet>();
	}
};
static_assert(alignof(USQEXSEADSoundReferenceEnumSet) == 0x000008, "Wrong alignment on USQEXSEADSoundReferenceEnumSet");
static_assert(sizeof(USQEXSEADSoundReferenceEnumSet) == 0x000058, "Wrong size on USQEXSEADSoundReferenceEnumSet");
static_assert(offsetof(USQEXSEADSoundReferenceEnumSet, References) == 0x000048, "Member 'USQEXSEADSoundReferenceEnumSet::References' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADStatics
// 0x0000 (0x0040 - 0x0040)
class USQEXSEADStatics final : public UObject
{
public:
	static bool AudioVolumeCtrl_SetEnable(class UObject* WorldContextObject, const class FString& AudioVolumeActorName, bool bEnable);
	static void AutoSeCtrl_SetEnable(bool Enable);
	static void CallEvent(class FName EventName);
	static void CategoryCtrl_DebugMute(class FName CategoryName, bool bToBeMuted, float FadeTime);
	static float CategoryCtrl_GetVolume(class FName CategoryName);
	static void CategoryCtrl_Resume(class FName CategoryName, float FadeInTime);
	static void CategoryCtrl_SetPitch(class FName CategoryName, float Pitch, float FadeTime);
	static void CategoryCtrl_SetVolume(class FName CategoryName, float Volume, float FadeTime);
	static void CategoryCtrl_SetVolumeWithLayer(class FName CategoryName, int32 LayerIndex, float Volume, float FadeTime);
	static void CategoryCtrl_Stop(class FName CategoryName, float FadeOutTime);
	static void CategoryCtrl_Suspend(class FName CategoryName, float FadeOutTime);
	static class USQEXSEADBGMSlotController* CreateBGMSlot(class FName Name_0, const struct FSQEXSEAD_BGMOptions& Options);
	static class USQEXSEADBGMSlotController* GetBGMSlotController(class FName Name_0);
	static int32 GetNumAudibleSoundsAtLocation(class UObject* WorldContextObject, const struct FVector& Location);
	static class USQEXSEADBGMSlotController* GetPlayingBGMSlotController();
	static bool IsPlayingBGM(class USoundBase* Sound);
	static void ReadySetPathBGM(class FName Name_0, TSoftObjectPtr<class USoundBase> SoundReference);
	static void ResetAllBGM(float FadeTime);
	static void ResetAllCategoryTemporarySettings(float ResetFadeTime);
	static void ResetEffectPreset(float ResetFadeTime);
	static void ResetOverrideAttenuation();
	static void ResumeBGM();
	static void ResumeBGM_OptionalFade(float FadeTime);
	static void SetConfigCategoryVolume(class FName CategoryName, float Volume, float FadeTime);
	static void SetConfigVolumeAllCategory(float Volume, float FadeTime);
	static void SetEffectPreset(class FName PresetName, float FadeTime);
	static void SetEnableBGMAutoResume(bool bIsEnabled);
	static void SetExternalParameter(class FName ParamName, float Value);
	static void SetOverrideAttenuation(class USoundAttenuation* OverrideAttenuation);
	static void SetSEADAudioVolumeUpdateEnabled(bool bEnabled);
	static void StopAllBGM();
	static void StopAllBGM_OptionalFade(float FadeTime);
	static void StopAllCategorySounds(float FadeTime);
	static void SuspendBGM();
	static void SuspendBGM_OptionalFade(float FadeTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADStatics">();
	}
	static class USQEXSEADStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADStatics>();
	}
};
static_assert(alignof(USQEXSEADStatics) == 0x000008, "Wrong alignment on USQEXSEADStatics");
static_assert(sizeof(USQEXSEADStatics) == 0x000040, "Wrong size on USQEXSEADStatics");

// Class SQEXSEAD.SQEXSEADVolumeComponent
// 0x3ACAE0 (0x116965D0 - 0x112E9AF0)
class USQEXSEADVolumeComponent final : public USceneComponent
{
public:
	struct FSQEXSEADVolumeInfo                    VolumeInfo;                                        // 0x0418(0x116965D0)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADVolumeComponent">();
	}
	static class USQEXSEADVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADVolumeComponent>();
	}
};
static_assert(alignof(USQEXSEADVolumeComponent) == 0x116965D0, "Wrong alignment on USQEXSEADVolumeComponent");
static_assert(sizeof(USQEXSEADVolumeComponent) == 0x116965D0, "Wrong size on USQEXSEADVolumeComponent");
static_assert(offsetof(USQEXSEADVolumeComponent, VolumeInfo) == 0x000418, "Member 'USQEXSEADVolumeComponent::VolumeInfo' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADWhizSeComponent
// 0x0000 (0x112E9AF0 - 0x112E9AF0)
class USQEXSEADWhizSeComponent final : public USceneComponent
{
public:
	class USoundBase*                             SoundAsset;                                        // 0x0418(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApproachJudgmentDistance;                          // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApproachJudgmentVelocity;                          // 0x0424(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollow : 1;                                       // 0x0428(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyOnce : 1;                                     // 0x0428(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseRelativeVelocity : 1;                          // 0x0428(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCalcVelocityFromLocation : 1;                     // 0x0428(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        MyAudioComponent;                                  // 0x0430(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMeshComponent*                         MyMeshComponent;                                   // 0x0438(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_440[0x10];                                     // 0x0440(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADWhizSeComponent">();
	}
	static class USQEXSEADWhizSeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADWhizSeComponent>();
	}
};
static_assert(alignof(USQEXSEADWhizSeComponent) == 0x112E9AF0, "Wrong alignment on USQEXSEADWhizSeComponent");
static_assert(sizeof(USQEXSEADWhizSeComponent) == 0x112E9AF0, "Wrong size on USQEXSEADWhizSeComponent");
static_assert(offsetof(USQEXSEADWhizSeComponent, SoundAsset) == 0x000418, "Member 'USQEXSEADWhizSeComponent::SoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADWhizSeComponent, ApproachJudgmentDistance) == 0x000420, "Member 'USQEXSEADWhizSeComponent::ApproachJudgmentDistance' has a wrong offset!");
static_assert(offsetof(USQEXSEADWhizSeComponent, ApproachJudgmentVelocity) == 0x000424, "Member 'USQEXSEADWhizSeComponent::ApproachJudgmentVelocity' has a wrong offset!");
static_assert(offsetof(USQEXSEADWhizSeComponent, MyAudioComponent) == 0x000430, "Member 'USQEXSEADWhizSeComponent::MyAudioComponent' has a wrong offset!");
static_assert(offsetof(USQEXSEADWhizSeComponent, MyMeshComponent) == 0x000438, "Member 'USQEXSEADWhizSeComponent::MyMeshComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADWhizSound
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEXSEADWhizSound final : public AActor
{
public:
	class USQEXSEADWhizSeComponent*               WhizComponent;                                     // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADWhizSound">();
	}
	static class ASQEXSEADWhizSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEXSEADWhizSound>();
	}
};
static_assert(alignof(ASQEXSEADWhizSound) == 0x1EF72E00, "Wrong alignment on ASQEXSEADWhizSound");
static_assert(sizeof(ASQEXSEADWhizSound) == 0x1EF72E00, "Wrong size on ASQEXSEADWhizSound");
static_assert(offsetof(ASQEXSEADWhizSound, WhizComponent) == 0x0003E0, "Member 'ASQEXSEADWhizSound::WhizComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADZeroOneSeComponent
// 0x0000 (0xD38D - 0xD38D)
class USQEXSEADZeroOneSeComponent final : public UActorComponent
{
public:
	class USoundBase*                             SoundAsset;                                        // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OnStopSoundAsset;                                  // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEADAudioStartTimings                    AudioStartTiming;                                  // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnable_Slot0 : 1;                                 // 0x0228(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ESQEXSEADZeroOneProperties                    PropertyType_Slot0;                                // 0x022C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZeroOneFadeTime_Slot0;                             // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValiableValueThreshold_Slot0;                      // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnable_Slot1 : 1;                                 // 0x0238(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ESQEXSEADZeroOneProperties                    PropertyType_Slot1;                                // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZeroOneFadeTime_Slot1;                             // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValiableValueThreshold_Slot1;                      // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAudioComponent*                MyAudioComponent;                                  // 0x0248(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x30];                                     // 0x0250(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsPlaying();
	void Play();
	void SetZeroOneValue(int32 Slot, float Value, float FadeTime);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADZeroOneSeComponent">();
	}
	static class USQEXSEADZeroOneSeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADZeroOneSeComponent>();
	}
};
static_assert(alignof(USQEXSEADZeroOneSeComponent) == 0x00D38D, "Wrong alignment on USQEXSEADZeroOneSeComponent");
static_assert(sizeof(USQEXSEADZeroOneSeComponent) == 0x00D38D, "Wrong size on USQEXSEADZeroOneSeComponent");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, SoundAsset) == 0x000200, "Member 'USQEXSEADZeroOneSeComponent::SoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, FadeInTime) == 0x000208, "Member 'USQEXSEADZeroOneSeComponent::FadeInTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, FadeOutTime) == 0x00020C, "Member 'USQEXSEADZeroOneSeComponent::FadeOutTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, OnStopSoundAsset) == 0x000210, "Member 'USQEXSEADZeroOneSeComponent::OnStopSoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, AudioStartTiming) == 0x000218, "Member 'USQEXSEADZeroOneSeComponent::AudioStartTiming' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, AttachPointName) == 0x000220, "Member 'USQEXSEADZeroOneSeComponent::AttachPointName' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, PropertyType_Slot0) == 0x00022C, "Member 'USQEXSEADZeroOneSeComponent::PropertyType_Slot0' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, ZeroOneFadeTime_Slot0) == 0x000230, "Member 'USQEXSEADZeroOneSeComponent::ZeroOneFadeTime_Slot0' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, ValiableValueThreshold_Slot0) == 0x000234, "Member 'USQEXSEADZeroOneSeComponent::ValiableValueThreshold_Slot0' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, PropertyType_Slot1) == 0x00023C, "Member 'USQEXSEADZeroOneSeComponent::PropertyType_Slot1' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, ZeroOneFadeTime_Slot1) == 0x000240, "Member 'USQEXSEADZeroOneSeComponent::ZeroOneFadeTime_Slot1' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, ValiableValueThreshold_Slot1) == 0x000244, "Member 'USQEXSEADZeroOneSeComponent::ValiableValueThreshold_Slot1' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, MyAudioComponent) == 0x000248, "Member 'USQEXSEADZeroOneSeComponent::MyAudioComponent' has a wrong offset!");

}

