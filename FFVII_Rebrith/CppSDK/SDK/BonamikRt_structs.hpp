#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BonamikRt

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum BonamikRt.SHAPEMATCHING_MODE
// NumValues: 0x0004
enum class ESHAPEMATCHING_MODE : uint8
{
	ESQEX_Bonamik_SMMODE_CHAINSHAPEMATCH     = 0,
	ESQEX_Bonamik_SMMODE_SEQCHAINMATCH       = 1,
	ESQEX_Bonamik_SMMODE_VOLUMEMATCH         = 2,
	ESQEX_Bonamik_SMMODE_MAX                 = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_FastMotionHandling
// NumValues: 0x0004
enum class ESQEX_Bonamik_FastMotionHandling : uint8
{
	ESQEX_Bonamik_FMH_NONE                   = 0,
	ESQEX_Bonamik_FMH_LOCAL_FORCE            = 1,
	ESQEX_Bonamik_FMH_LSS                    = 2,
	ESQEX_Bonamik_FMH_MAX                    = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_JointLinkSimulationMode
// NumValues: 0x0003
enum class ESQEX_Bonamik_JointLinkSimulationMode : uint8
{
	ESQEX_Bonamik_JOINTLINK_MODE_SEQ         = 0,
	ESQEX_Bonamik_JOINTLINK_MODE_BATCH       = 1,
	ESQEX_Bonamik_JOINTLINK_MODE_MAX         = 2,
};

// Enum BonamikRt.ESQEX_Bonamik_ConstraintType
// NumValues: 0x0006
enum class ESQEX_Bonamik_ConstraintType : uint8
{
	ESQEX_Bonamik_ConstraintType_None        = 0,
	ESQEX_Bonamik_ConstraintType_Sphere      = 1,
	ESQEX_Bonamik_ConstraintType_Spring      = 2,
	ESQEX_Bonamik_ConstraintType_GroundAttach = 3,
	ESQEX_Bonamik_ConstraintType_SecondOrder_Sphere = 4,
	ESQEX_Bonamik_ConstraintType_MAX         = 5,
};

// Enum BonamikRt.ESQEX_Bonamik_CollisionShape
// NumValues: 0x000B
enum class ESQEX_Bonamik_CollisionShape : uint8
{
	ESQEX_Bonamik_CollisionShape_None        = 0,
	ESQEX_Bonamik_CollisionShape_Sphere      = 1,
	ESQEX_Bonamik_CollisionShape_Capsule     = 2,
	ESQEX_Bonamik_CollisionShape_Inverse_Sphere = 3,
	ESQEX_Bonamik_CollisionShape_Inverse_Capsule = 4,
	ESQEX_Bonamik_CollisionShape_ReservedA   = 5,
	ESQEX_Bonamik_CollisionShape_Plane       = 6,
	ESQEX_Bonamik_CollisionShape_ReservedB   = 7,
	ESQEX_Bonamik_CollisionShape_Box         = 8,
	ESQEX_Bonamik_CollisionShape_Self_Collision = 9,
	ESQEX_Bonamik_CollisionShape_MAX         = 10,
};

// Enum BonamikRt.ESQEX_Bonamik_LinkType
// NumValues: 0x0008
enum class ESQEX_Bonamik_LinkType : uint8
{
	ESQEX_Bonamik_LinkType_Lateral           = 0,
	ESQEX_Bonamik_LinkType_ParentChild       = 1,
	ESQEX_Bonamik_LinkType_Bending           = 2,
	ESQEX_Bonamik_LinkType_PinConstraint     = 3,
	ESQEX_Bonamik_LinkType_KdiConstraint     = 4,
	ESQEX_Bonamik_LinkType_ReactionTransfer  = 5,
	ESQEX_Bonamik_LinkType_InverseFreeConstraint = 6,
	ESQEX_Bonamik_LinkType_MAX               = 7,
};

// Enum BonamikRt.ESQEX_Bonamik_OutOfCamera
// NumValues: 0x0005
enum class ESQEX_Bonamik_OutOfCamera : uint8
{
	ESQEX_Bonamik_OutOfCamera_Default        = 0,
	ESQEX_Bonamik_OutOfCamera_Override       = 1,
	ESQEX_Bonamik_OutOfCamera_FullCheck      = 2,
	ESQEX_Bonamik_OutOfCamera_UseGlobal      = 3,
	ESQEX_Bonamik_OutOfCamera_MAX            = 4,
};

// Enum BonamikRt.ESQEX_Bonamik_Parameters
// NumValues: 0x000E
enum class ESQEX_Bonamik_Parameters : uint8
{
	ESQEX_Bonamik_Parameters_Mass            = 0,
	ESQEX_Bonamik_Parameters_Friction        = 1,
	ESQEX_Bonamik_Parameters_Damping         = 2,
	ESQEX_Bonamik_Parameters_Bounciness      = 3,
	ESQEX_Bonamik_Parameters_WindDrag        = 4,
	ESQEX_Bonamik_Parameters_WindLift        = 5,
	ESQEX_Bonamik_Parameters_LFCoeff         = 6,
	ESQEX_Bonamik_Parameters_ParkRate        = 7,
	ESQEX_Bonamik_Parameters_MaxLF           = 8,
	ESQEX_Bonamik_Parameters_LFDrag          = 9,
	ESQEX_Bonamik_Parameters_LFLift          = 10,
	ESQEX_Bonamik_Parameters_InnerConeStr    = 11,
	ESQEX_Bonamik_Parameters_OuterConeStr    = 12,
	ESQEX_Bonamik_Parameters_MAX             = 13,
};

// Enum BonamikRt.ESQEX_Bonamik_GlobalOutOfCamera
// NumValues: 0x0004
enum class ESQEX_Bonamik_GlobalOutOfCamera : uint8
{
	ESQEX_Bonamik_GlobalOutOfCamera_Default  = 0,
	ESQEX_Bonamik_GlobalOutOfCamera_Override = 1,
	ESQEX_Bonamik_GlobalOutOfCamera_FullCheck = 2,
	ESQEX_Bonamik_GlobalOutOfCamera_MAX      = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_EmissiveDirection
// NumValues: 0x0004
enum class ESQEX_Bonamik_EmissiveDirection : uint8
{
	ESQEX_Bonamik_EmissiveDirection_UpVec    = 0,
	ESQEX_Bonamik_EmissiveDirection_ModelSpace = 1,
	ESQEX_Bonamik_EmissiveDirection_WorldSpace = 2,
	ESQEX_Bonamik_EmissiveDirection_MAX      = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_WindOwnerType
// NumValues: 0x0006
enum class ESQEX_Bonamik_WindOwnerType : uint8
{
	ESQEX_Bonamik_WindOwnerType_Actor        = 0,
	ESQEX_Bonamik_WindOwnerType_Preset       = 1,
	ESQEX_Bonamik_WindOwnerType_AnimNotify   = 2,
	ESQEX_Bonamik_WindOwnerType_Matinee      = 3,
	ESQEX_Bonamik_WindOwnerType_AllTypes     = 4,
	ESQEX_Bonamik_WindOwnerType_MAX          = 5,
};

// Enum BonamikRt.ESQEX_Bonamik_WindAreaType
// NumValues: 0x0004
enum class ESQEX_Bonamik_WindAreaType : uint8
{
	ESQEX_Bonamik_WindAreaType_Global        = 0,
	ESQEX_Bonamik_WindAreaType_Box           = 1,
	ESQEX_Bonamik_WindAreaType_Sphere        = 2,
	ESQEX_Bonamik_WindAreaType_MAX           = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_WindType_Notify
// NumValues: 0x0003
enum class ESQEX_Bonamik_WindType_Notify : uint8
{
	ESQEX_Bonamik_WindType_Notify_Directional = 0,
	ESQEX_Bonamik_WindType_Notify_PointBlast = 1,
	ESQEX_Bonamik_WindType_Notify_MAX        = 2,
};

// Enum BonamikRt.ESQEX_Bonamik_CustomWindType
// NumValues: 0x0004
enum class ESQEX_Bonamik_CustomWindType : uint8
{
	ESQEX_Bonamik_CustomWindType_Directional = 0,
	ESQEX_Bonamik_CustomWindType_Wave        = 1,
	ESQEX_Bonamik_CustomWindType_PointBlast  = 2,
	ESQEX_Bonamik_CustomWindType_MAX         = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_WindType
// NumValues: 0x0005
enum class ESQEX_Bonamik_WindType : uint8
{
	ESQEX_Bonamik_WindType_Directional       = 0,
	ESQEX_Bonamik_WindType_Wave              = 1,
	ESQEX_Bonamik_WindType_CustomWave        = 2,
	ESQEX_Bonamik_WindType_PointBlast        = 3,
	ESQEX_Bonamik_WindType_MAX               = 4,
};

// ScriptStruct BonamikRt.SQEX_BonamikFpsCorrectionDesc
// 0x115DF1A0 (0x115DF1A0 - 0x0000)
struct alignas(0x115DF1A0) FSQEX_BonamikFpsCorrectionDesc final
{
public:
	float                                         M_FrameRate;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WindDrag;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WindLift;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LocalForceDrag;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LocalForceLift;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Damping;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Mass;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Friction;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Bounce;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LateralLink;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BendingLink;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LongRangeAttachment;                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Cone;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikFpsCorrectionDesc) == 0x115DF1A0, "Wrong alignment on FSQEX_BonamikFpsCorrectionDesc");
static_assert(sizeof(FSQEX_BonamikFpsCorrectionDesc) == 0x115DF1A0, "Wrong size on FSQEX_BonamikFpsCorrectionDesc");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_FrameRate) == 0x000000, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_FrameRate' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_WindDrag) == 0x000004, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_WindDrag' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_WindLift) == 0x000008, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_WindLift' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_LocalForceDrag) == 0x00000C, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_LocalForceDrag' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_LocalForceLift) == 0x000010, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_LocalForceLift' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_Damping) == 0x000014, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_Damping' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_Mass) == 0x000018, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_Mass' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_Friction) == 0x00001C, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_Friction' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_Bounce) == 0x000020, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_Bounce' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_LateralLink) == 0x000024, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_LateralLink' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_BendingLink) == 0x000028, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_BendingLink' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_LongRangeAttachment) == 0x00002C, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_LongRangeAttachment' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikFpsCorrectionDesc, M_Cone) == 0x000030, "Member 'FSQEX_BonamikFpsCorrectionDesc::M_Cone' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikSceneManagerDesc
// 0x0480 (0x0480 - 0x0000)
struct FSQEX_BonamikSceneManagerDesc final
{
public:
	bool                                          M_IsEnable;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsUseGPU;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        M_SubStep;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Dt;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalGroup;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_GroupName[0x30];                                 // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsEnableLSS;                                     // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_LSScoeff_tran;                                   // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LSScoeff_rot;                                    // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_RootName;                                        // 0x0320(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsEnableLocalForce;                              // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_Gravity;                                         // 0x0334(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_WindForce;                                       // 0x0340(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_DirRange;                                        // 0x034C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_ForceRange;                                      // 0x0358(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalLinkBatches;                                // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalLinksInBatch[0xF];                          // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalConeBatches;                                // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalConesInBatch[0xF];                          // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalCollisionBatches;                           // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalCollisionsInBatch[0xF];                     // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalSelfCollisionBatches;                       // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalSelfCollisionsInBatch[0xF];                 // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_JointLinkSimulationMode         M_JointLinkSimulationMode;                         // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_FastMotionHandling              M_FastMotionHandlingMode;                          // 0x0465(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_EnableGroundCollision;                           // 0x0466(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_467[0x1];                                      // 0x0467(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        M_RefUpVec;                                        // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQEX_BonamikFpsCorrectionDesc> M_FpsCorrection;                                   // 0x0470(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikSceneManagerDesc) == 0x000008, "Wrong alignment on FSQEX_BonamikSceneManagerDesc");
static_assert(sizeof(FSQEX_BonamikSceneManagerDesc) == 0x000480, "Wrong size on FSQEX_BonamikSceneManagerDesc");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_IsEnable) == 0x000000, "Member 'FSQEX_BonamikSceneManagerDesc::M_IsEnable' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_IsUseGPU) == 0x000001, "Member 'FSQEX_BonamikSceneManagerDesc::M_IsUseGPU' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_SubStep) == 0x000004, "Member 'FSQEX_BonamikSceneManagerDesc::M_SubStep' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_Dt) == 0x000008, "Member 'FSQEX_BonamikSceneManagerDesc::M_Dt' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_TotalGroup) == 0x00000C, "Member 'FSQEX_BonamikSceneManagerDesc::M_TotalGroup' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_GroupName) == 0x000010, "Member 'FSQEX_BonamikSceneManagerDesc::M_GroupName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_IsEnableLSS) == 0x000310, "Member 'FSQEX_BonamikSceneManagerDesc::M_IsEnableLSS' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_LSScoeff_tran) == 0x000314, "Member 'FSQEX_BonamikSceneManagerDesc::M_LSScoeff_tran' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_LSScoeff_rot) == 0x000318, "Member 'FSQEX_BonamikSceneManagerDesc::M_LSScoeff_rot' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_RootName) == 0x000320, "Member 'FSQEX_BonamikSceneManagerDesc::M_RootName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_IsEnableLocalForce) == 0x000330, "Member 'FSQEX_BonamikSceneManagerDesc::M_IsEnableLocalForce' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_Gravity) == 0x000334, "Member 'FSQEX_BonamikSceneManagerDesc::M_Gravity' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_WindForce) == 0x000340, "Member 'FSQEX_BonamikSceneManagerDesc::M_WindForce' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_DirRange) == 0x00034C, "Member 'FSQEX_BonamikSceneManagerDesc::M_DirRange' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_ForceRange) == 0x000358, "Member 'FSQEX_BonamikSceneManagerDesc::M_ForceRange' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_TotalLinkBatches) == 0x000364, "Member 'FSQEX_BonamikSceneManagerDesc::M_TotalLinkBatches' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_TotalLinksInBatch) == 0x000368, "Member 'FSQEX_BonamikSceneManagerDesc::M_TotalLinksInBatch' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_TotalConeBatches) == 0x0003A4, "Member 'FSQEX_BonamikSceneManagerDesc::M_TotalConeBatches' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_TotalConesInBatch) == 0x0003A8, "Member 'FSQEX_BonamikSceneManagerDesc::M_TotalConesInBatch' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_TotalCollisionBatches) == 0x0003E4, "Member 'FSQEX_BonamikSceneManagerDesc::M_TotalCollisionBatches' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_TotalCollisionsInBatch) == 0x0003E8, "Member 'FSQEX_BonamikSceneManagerDesc::M_TotalCollisionsInBatch' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_TotalSelfCollisionBatches) == 0x000424, "Member 'FSQEX_BonamikSceneManagerDesc::M_TotalSelfCollisionBatches' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_TotalSelfCollisionsInBatch) == 0x000428, "Member 'FSQEX_BonamikSceneManagerDesc::M_TotalSelfCollisionsInBatch' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_JointLinkSimulationMode) == 0x000464, "Member 'FSQEX_BonamikSceneManagerDesc::M_JointLinkSimulationMode' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_FastMotionHandlingMode) == 0x000465, "Member 'FSQEX_BonamikSceneManagerDesc::M_FastMotionHandlingMode' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_EnableGroundCollision) == 0x000466, "Member 'FSQEX_BonamikSceneManagerDesc::M_EnableGroundCollision' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_RefUpVec) == 0x000468, "Member 'FSQEX_BonamikSceneManagerDesc::M_RefUpVec' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, M_FpsCorrection) == 0x000470, "Member 'FSQEX_BonamikSceneManagerDesc::M_FpsCorrection' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikShapeMatchingDesc
// 0x115DBC10 (0x115DBC10 - 0x0000)
struct alignas(0x115DBC10) FSQEX_BonamikShapeMatchingDesc final
{
public:
	int32                                         M_TotalParticle;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_RegionSize;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Stiffness;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_ParticleIds[0x32];                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikShapeMatchingDesc) == 0x115DBC10, "Wrong alignment on FSQEX_BonamikShapeMatchingDesc");
static_assert(sizeof(FSQEX_BonamikShapeMatchingDesc) == 0x115DBC10, "Wrong size on FSQEX_BonamikShapeMatchingDesc");
static_assert(offsetof(FSQEX_BonamikShapeMatchingDesc, M_TotalParticle) == 0x000000, "Member 'FSQEX_BonamikShapeMatchingDesc::M_TotalParticle' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikShapeMatchingDesc, M_RegionSize) == 0x000004, "Member 'FSQEX_BonamikShapeMatchingDesc::M_RegionSize' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikShapeMatchingDesc, M_Stiffness) == 0x000008, "Member 'FSQEX_BonamikShapeMatchingDesc::M_Stiffness' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikShapeMatchingDesc, M_ParticleIds) == 0x00000C, "Member 'FSQEX_BonamikShapeMatchingDesc::M_ParticleIds' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikChangingParameter
// 0x11557AC0 (0x11557AC0 - 0x0000)
struct alignas(0x11557AC0) FSQEX_BonamikChangingParameter final
{
public:
	TArray<class FName>                           M_Groups;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_Parameters                      M_Parameter;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Value;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikChangingParameter) == 0x11557AC0, "Wrong alignment on FSQEX_BonamikChangingParameter");
static_assert(sizeof(FSQEX_BonamikChangingParameter) == 0x11557AC0, "Wrong size on FSQEX_BonamikChangingParameter");
static_assert(offsetof(FSQEX_BonamikChangingParameter, M_Groups) == 0x000000, "Member 'FSQEX_BonamikChangingParameter::M_Groups' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikChangingParameter, M_Parameter) == 0x000010, "Member 'FSQEX_BonamikChangingParameter::M_Parameter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikChangingParameter, M_Value) == 0x000014, "Member 'FSQEX_BonamikChangingParameter::M_Value' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikBodyDesc
// 0x115DDAD0 (0x115DDAD0 - 0x0000)
struct alignas(0x115DDAD0) FSQEX_BonamikBodyDesc final
{
public:
	uint32                                        M_Index;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_JointName;                                       // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_ParentBodyName;                                  // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_ChildBodyName;                                   // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ParentId;                                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ChildId;                                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_GroupID;                                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ColId[0x8];                                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsKinematic;                                     // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsCollision;                                     // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsMultipleCollisionObject;                       // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Mass;                                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Inertia;                                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Radius;                                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Damping;                                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Bounciness;                                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Friction;                                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WindDrag;                                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WindLift;                                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LocalTransCoeff;                                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxLocalTrans;                                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_CollisionShape                  M_ColShape;                                        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_ConstraintType                  M_AddiConstType;                                   // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_AddiConstStr;                                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AddiConstRad;                                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_LocalTransform;                                  // 0x009C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  M_LocalRotation;                                   // 0x00B0(0x112E9D50)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        M_CollisionBatchNo;                                // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_LocalScale;                                      // 0x00C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ConcaveRatio;                                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LFcoeff;                                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ParkRate;                                        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxLF;                                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LFdrag;                                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LFlift;                                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_BonamikBodyDesc) == 0x115DDAD0, "Wrong alignment on FSQEX_BonamikBodyDesc");
static_assert(sizeof(FSQEX_BonamikBodyDesc) == 0x115DDAD0, "Wrong size on FSQEX_BonamikBodyDesc");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_Index) == 0x000000, "Member 'FSQEX_BonamikBodyDesc::M_Index' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_JointName) == 0x000008, "Member 'FSQEX_BonamikBodyDesc::M_JointName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_ParentBodyName) == 0x000018, "Member 'FSQEX_BonamikBodyDesc::M_ParentBodyName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_ChildBodyName) == 0x000028, "Member 'FSQEX_BonamikBodyDesc::M_ChildBodyName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_ParentId) == 0x000038, "Member 'FSQEX_BonamikBodyDesc::M_ParentId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_ChildId) == 0x00003C, "Member 'FSQEX_BonamikBodyDesc::M_ChildId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_GroupID) == 0x000040, "Member 'FSQEX_BonamikBodyDesc::M_GroupID' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_ColId) == 0x000044, "Member 'FSQEX_BonamikBodyDesc::M_ColId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_IsKinematic) == 0x000064, "Member 'FSQEX_BonamikBodyDesc::M_IsKinematic' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_IsCollision) == 0x000065, "Member 'FSQEX_BonamikBodyDesc::M_IsCollision' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_IsMultipleCollisionObject) == 0x000066, "Member 'FSQEX_BonamikBodyDesc::M_IsMultipleCollisionObject' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_Mass) == 0x000068, "Member 'FSQEX_BonamikBodyDesc::M_Mass' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_Inertia) == 0x00006C, "Member 'FSQEX_BonamikBodyDesc::M_Inertia' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_Radius) == 0x000070, "Member 'FSQEX_BonamikBodyDesc::M_Radius' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_Damping) == 0x000074, "Member 'FSQEX_BonamikBodyDesc::M_Damping' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_Bounciness) == 0x000078, "Member 'FSQEX_BonamikBodyDesc::M_Bounciness' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_Friction) == 0x00007C, "Member 'FSQEX_BonamikBodyDesc::M_Friction' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_WindDrag) == 0x000080, "Member 'FSQEX_BonamikBodyDesc::M_WindDrag' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_WindLift) == 0x000084, "Member 'FSQEX_BonamikBodyDesc::M_WindLift' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_LocalTransCoeff) == 0x000088, "Member 'FSQEX_BonamikBodyDesc::M_LocalTransCoeff' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_MaxLocalTrans) == 0x00008C, "Member 'FSQEX_BonamikBodyDesc::M_MaxLocalTrans' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_ColShape) == 0x000090, "Member 'FSQEX_BonamikBodyDesc::M_ColShape' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_AddiConstType) == 0x000091, "Member 'FSQEX_BonamikBodyDesc::M_AddiConstType' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_AddiConstStr) == 0x000094, "Member 'FSQEX_BonamikBodyDesc::M_AddiConstStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_AddiConstRad) == 0x000098, "Member 'FSQEX_BonamikBodyDesc::M_AddiConstRad' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_LocalTransform) == 0x00009C, "Member 'FSQEX_BonamikBodyDesc::M_LocalTransform' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_LocalRotation) == 0x0000B0, "Member 'FSQEX_BonamikBodyDesc::M_LocalRotation' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_CollisionBatchNo) == 0x0000C0, "Member 'FSQEX_BonamikBodyDesc::M_CollisionBatchNo' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_LocalScale) == 0x0000C4, "Member 'FSQEX_BonamikBodyDesc::M_LocalScale' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_ConcaveRatio) == 0x0000D0, "Member 'FSQEX_BonamikBodyDesc::M_ConcaveRatio' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_LFcoeff) == 0x0000D4, "Member 'FSQEX_BonamikBodyDesc::M_LFcoeff' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_ParkRate) == 0x0000D8, "Member 'FSQEX_BonamikBodyDesc::M_ParkRate' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_MaxLF) == 0x0000DC, "Member 'FSQEX_BonamikBodyDesc::M_MaxLF' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_LFdrag) == 0x0000E0, "Member 'FSQEX_BonamikBodyDesc::M_LFdrag' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, M_LFlift) == 0x0000E4, "Member 'FSQEX_BonamikBodyDesc::M_LFlift' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikPlaneDesc
// 0x115DBF00 (0x115DBF00 - 0x0000)
struct alignas(0x115DBF00) FSQEX_BonamikPlaneDesc final
{
public:
	uint32                                        M_GroupID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_ParticleAName;                                   // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_ParticleBName;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_ParticleCName;                                   // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ParticleA;                                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ParticleB;                                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ParticleC;                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_Index;                                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Thickness;                                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Offset;                                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsCollision;                                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_CollisionBatchNo;                                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ColId[0x8];                                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikPlaneDesc) == 0x115DBF00, "Wrong alignment on FSQEX_BonamikPlaneDesc");
static_assert(sizeof(FSQEX_BonamikPlaneDesc) == 0x115DBF00, "Wrong size on FSQEX_BonamikPlaneDesc");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_GroupID) == 0x000000, "Member 'FSQEX_BonamikPlaneDesc::M_GroupID' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_ParticleAName) == 0x000008, "Member 'FSQEX_BonamikPlaneDesc::M_ParticleAName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_ParticleBName) == 0x000018, "Member 'FSQEX_BonamikPlaneDesc::M_ParticleBName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_ParticleCName) == 0x000028, "Member 'FSQEX_BonamikPlaneDesc::M_ParticleCName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_ParticleA) == 0x000038, "Member 'FSQEX_BonamikPlaneDesc::M_ParticleA' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_ParticleB) == 0x00003C, "Member 'FSQEX_BonamikPlaneDesc::M_ParticleB' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_ParticleC) == 0x000040, "Member 'FSQEX_BonamikPlaneDesc::M_ParticleC' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_Index) == 0x000044, "Member 'FSQEX_BonamikPlaneDesc::M_Index' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_Thickness) == 0x000048, "Member 'FSQEX_BonamikPlaneDesc::M_Thickness' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_Offset) == 0x00004C, "Member 'FSQEX_BonamikPlaneDesc::M_Offset' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_IsCollision) == 0x000050, "Member 'FSQEX_BonamikPlaneDesc::M_IsCollision' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_CollisionBatchNo) == 0x000054, "Member 'FSQEX_BonamikPlaneDesc::M_CollisionBatchNo' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, M_ColId) == 0x000058, "Member 'FSQEX_BonamikPlaneDesc::M_ColId' has a wrong offset!");

// ScriptStruct BonamikRt.DEPRECATED_AnimNode_SQEX_Bonamik
// 0x0000 (0x11498FB0 - 0x11498FB0)
struct FDEPRECATED_AnimNode_SQEX_Bonamik final : public FAnimNode_SkeletalControlBase
{
public:
	TArray<class USQEX_BonamikAsset*>             BonamikAssets;                                     // 0x0070(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x90];                                      // 0x0080(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDEPRECATED_AnimNode_SQEX_Bonamik) == 0x11498FB0, "Wrong alignment on FDEPRECATED_AnimNode_SQEX_Bonamik");
static_assert(sizeof(FDEPRECATED_AnimNode_SQEX_Bonamik) == 0x11498FB0, "Wrong size on FDEPRECATED_AnimNode_SQEX_Bonamik");
static_assert(offsetof(FDEPRECATED_AnimNode_SQEX_Bonamik, BonamikAssets) == 0x000070, "Member 'FDEPRECATED_AnimNode_SQEX_Bonamik::BonamikAssets' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikLinkDesc
// 0x115DC710 (0x115DC710 - 0x0000)
struct alignas(0x115DC710) FSQEX_BonamikLinkDesc final
{
public:
	class FString                                 M_ParentBodyName;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_ChildBodyName;                                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_ParentId;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_ChildId;                                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_LinkType                        M_LinkType;                                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsSelfCollision;                                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_EnableJointTwist;                                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_EnableCone;                                      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_EnableConeAnimation;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_LinkStr;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LinkParentStr;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ConeInnerStr;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ConeOuterStr;                                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ConeParentStr;                                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LimitY;                                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LimitZ;                                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ConeOffsetY;                                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ConeOffsetZ;                                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LimitOffsetY;                                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LimitOffsetZ;                                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsCollisionReceiver;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsCollisionRepulsor;                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsLRA;                                           // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_LRAstr;                                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LRAdamping;                                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_LinkBatchNo;                                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_ConeBatchNo;                                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_CollisionBatchNo;                                // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PinRadius;                                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PinStr;                                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_KdiTrans;                                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_KdiRot;                                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ConcaveRatio;                                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikLinkDesc) == 0x115DC710, "Wrong alignment on FSQEX_BonamikLinkDesc");
static_assert(sizeof(FSQEX_BonamikLinkDesc) == 0x115DC710, "Wrong size on FSQEX_BonamikLinkDesc");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ParentBodyName) == 0x000000, "Member 'FSQEX_BonamikLinkDesc::M_ParentBodyName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ChildBodyName) == 0x000010, "Member 'FSQEX_BonamikLinkDesc::M_ChildBodyName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ParentId) == 0x000020, "Member 'FSQEX_BonamikLinkDesc::M_ParentId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ChildId) == 0x000024, "Member 'FSQEX_BonamikLinkDesc::M_ChildId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_LinkType) == 0x000028, "Member 'FSQEX_BonamikLinkDesc::M_LinkType' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_IsSelfCollision) == 0x000029, "Member 'FSQEX_BonamikLinkDesc::M_IsSelfCollision' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_EnableJointTwist) == 0x00002A, "Member 'FSQEX_BonamikLinkDesc::M_EnableJointTwist' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_EnableCone) == 0x00002B, "Member 'FSQEX_BonamikLinkDesc::M_EnableCone' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_EnableConeAnimation) == 0x00002C, "Member 'FSQEX_BonamikLinkDesc::M_EnableConeAnimation' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_LinkStr) == 0x000030, "Member 'FSQEX_BonamikLinkDesc::M_LinkStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_LinkParentStr) == 0x000034, "Member 'FSQEX_BonamikLinkDesc::M_LinkParentStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ConeInnerStr) == 0x000038, "Member 'FSQEX_BonamikLinkDesc::M_ConeInnerStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ConeOuterStr) == 0x00003C, "Member 'FSQEX_BonamikLinkDesc::M_ConeOuterStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ConeParentStr) == 0x000040, "Member 'FSQEX_BonamikLinkDesc::M_ConeParentStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_LimitY) == 0x000044, "Member 'FSQEX_BonamikLinkDesc::M_LimitY' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_LimitZ) == 0x000048, "Member 'FSQEX_BonamikLinkDesc::M_LimitZ' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ConeOffsetY) == 0x00004C, "Member 'FSQEX_BonamikLinkDesc::M_ConeOffsetY' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ConeOffsetZ) == 0x000050, "Member 'FSQEX_BonamikLinkDesc::M_ConeOffsetZ' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_LimitOffsetY) == 0x000054, "Member 'FSQEX_BonamikLinkDesc::M_LimitOffsetY' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_LimitOffsetZ) == 0x000058, "Member 'FSQEX_BonamikLinkDesc::M_LimitOffsetZ' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_IsCollisionReceiver) == 0x00005C, "Member 'FSQEX_BonamikLinkDesc::M_IsCollisionReceiver' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_IsCollisionRepulsor) == 0x00005D, "Member 'FSQEX_BonamikLinkDesc::M_IsCollisionRepulsor' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_IsLRA) == 0x00005E, "Member 'FSQEX_BonamikLinkDesc::M_IsLRA' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_LRAstr) == 0x000060, "Member 'FSQEX_BonamikLinkDesc::M_LRAstr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_LRAdamping) == 0x000064, "Member 'FSQEX_BonamikLinkDesc::M_LRAdamping' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_LinkBatchNo) == 0x000068, "Member 'FSQEX_BonamikLinkDesc::M_LinkBatchNo' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ConeBatchNo) == 0x00006C, "Member 'FSQEX_BonamikLinkDesc::M_ConeBatchNo' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_CollisionBatchNo) == 0x000070, "Member 'FSQEX_BonamikLinkDesc::M_CollisionBatchNo' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_PinRadius) == 0x000074, "Member 'FSQEX_BonamikLinkDesc::M_PinRadius' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_PinStr) == 0x000078, "Member 'FSQEX_BonamikLinkDesc::M_PinStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_KdiTrans) == 0x00007C, "Member 'FSQEX_BonamikLinkDesc::M_KdiTrans' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_KdiRot) == 0x000080, "Member 'FSQEX_BonamikLinkDesc::M_KdiRot' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, M_ConcaveRatio) == 0x000084, "Member 'FSQEX_BonamikLinkDesc::M_ConcaveRatio' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikSolverDesc
// 0x0058 (0x0058 - 0x0000)
struct FSQEX_BonamikSolverDesc final
{
public:
	uint32                                        M_GroupID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_GroupName;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsEnable;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsUseConeSEQ;                                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsEnableDraw;                                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        M_ColIter;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_ConsIter;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_ConeIter;                                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_LinkIter;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_SolverIter;                                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TagId;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_CollisionTagId;                                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_EnableGround;                                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_LODdistance;                                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_RefUpVec;                                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQEX_BonamikFpsCorrectionDesc> M_FpsCorrection;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikSolverDesc) == 0x000008, "Wrong alignment on FSQEX_BonamikSolverDesc");
static_assert(sizeof(FSQEX_BonamikSolverDesc) == 0x000058, "Wrong size on FSQEX_BonamikSolverDesc");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_GroupID) == 0x000000, "Member 'FSQEX_BonamikSolverDesc::M_GroupID' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_GroupName) == 0x000008, "Member 'FSQEX_BonamikSolverDesc::M_GroupName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_IsEnable) == 0x000018, "Member 'FSQEX_BonamikSolverDesc::M_IsEnable' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_IsUseConeSEQ) == 0x000019, "Member 'FSQEX_BonamikSolverDesc::M_IsUseConeSEQ' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_IsEnableDraw) == 0x00001A, "Member 'FSQEX_BonamikSolverDesc::M_IsEnableDraw' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_ColIter) == 0x00001C, "Member 'FSQEX_BonamikSolverDesc::M_ColIter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_ConsIter) == 0x000020, "Member 'FSQEX_BonamikSolverDesc::M_ConsIter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_ConeIter) == 0x000024, "Member 'FSQEX_BonamikSolverDesc::M_ConeIter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_LinkIter) == 0x000028, "Member 'FSQEX_BonamikSolverDesc::M_LinkIter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_SolverIter) == 0x00002C, "Member 'FSQEX_BonamikSolverDesc::M_SolverIter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_TagId) == 0x000030, "Member 'FSQEX_BonamikSolverDesc::M_TagId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_CollisionTagId) == 0x000034, "Member 'FSQEX_BonamikSolverDesc::M_CollisionTagId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_EnableGround) == 0x000038, "Member 'FSQEX_BonamikSolverDesc::M_EnableGround' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_LODdistance) == 0x00003C, "Member 'FSQEX_BonamikSolverDesc::M_LODdistance' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_RefUpVec) == 0x000040, "Member 'FSQEX_BonamikSolverDesc::M_RefUpVec' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, M_FpsCorrection) == 0x000048, "Member 'FSQEX_BonamikSolverDesc::M_FpsCorrection' has a wrong offset!");

// ScriptStruct BonamikRt.CustomWindSettings
// 0x115E1420 (0x115E1420 - 0x0000)
struct alignas(0x115E1420) FCustomWindSettings final
{
public:
	ESQEX_Bonamik_CustomWindType                  M_WindType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_WindForce;                                       // 0x0004(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_RandomRange;                                     // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RandomTime;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_WaveMagnitude;                                   // 0x0020(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_WaveFrequency;                                   // 0x002C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_WaveMagOffset;                                   // 0x0038(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_WaveFreqOffset;                                  // 0x0044(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WaveTime;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PointStrength;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BlastRange;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BlastSpeed;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PointRadius;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PeakInRange;                                     // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_StartFrame;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_LoopNum;                                         // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomWindSettings) == 0x115E1420, "Wrong alignment on FCustomWindSettings");
static_assert(sizeof(FCustomWindSettings) == 0x115E1420, "Wrong size on FCustomWindSettings");
static_assert(offsetof(FCustomWindSettings, M_WindType) == 0x000000, "Member 'FCustomWindSettings::M_WindType' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_WindForce) == 0x000004, "Member 'FCustomWindSettings::M_WindForce' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_RandomRange) == 0x000010, "Member 'FCustomWindSettings::M_RandomRange' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_RandomTime) == 0x00001C, "Member 'FCustomWindSettings::M_RandomTime' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_WaveMagnitude) == 0x000020, "Member 'FCustomWindSettings::M_WaveMagnitude' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_WaveFrequency) == 0x00002C, "Member 'FCustomWindSettings::M_WaveFrequency' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_WaveMagOffset) == 0x000038, "Member 'FCustomWindSettings::M_WaveMagOffset' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_WaveFreqOffset) == 0x000044, "Member 'FCustomWindSettings::M_WaveFreqOffset' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_WaveTime) == 0x000050, "Member 'FCustomWindSettings::M_WaveTime' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_PointStrength) == 0x000054, "Member 'FCustomWindSettings::M_PointStrength' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_BlastRange) == 0x000058, "Member 'FCustomWindSettings::M_BlastRange' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_BlastSpeed) == 0x00005C, "Member 'FCustomWindSettings::M_BlastSpeed' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_PointRadius) == 0x000060, "Member 'FCustomWindSettings::M_PointRadius' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_PeakInRange) == 0x000064, "Member 'FCustomWindSettings::M_PeakInRange' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_StartFrame) == 0x000068, "Member 'FCustomWindSettings::M_StartFrame' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, M_LoopNum) == 0x00006C, "Member 'FCustomWindSettings::M_LoopNum' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikGroupLOD
// 0x115E1E40 (0x115E1E40 - 0x0000)
struct alignas(0x115E1E40) FSQEX_BonamikGroupLOD final
{
public:
	TArray<class FName>                           Groups;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MinSize;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrerollTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_BonamikGroupLOD) == 0x115E1E40, "Wrong alignment on FSQEX_BonamikGroupLOD");
static_assert(sizeof(FSQEX_BonamikGroupLOD) == 0x115E1E40, "Wrong size on FSQEX_BonamikGroupLOD");
static_assert(offsetof(FSQEX_BonamikGroupLOD, Groups) == 0x000000, "Member 'FSQEX_BonamikGroupLOD::Groups' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikGroupLOD, MinSize) == 0x000010, "Member 'FSQEX_BonamikGroupLOD::MinSize' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikGroupLOD, BlendTime) == 0x000014, "Member 'FSQEX_BonamikGroupLOD::BlendTime' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikGroupLOD, PrerollTime) == 0x000018, "Member 'FSQEX_BonamikGroupLOD::PrerollTime' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikPresetWindInstance
// 0x0020 (0x0020 - 0x0000)
struct FSQEX_BonamikPresetWindInstance final
{
public:
	class FName                                   M_PresetName;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_BonamikWind*                      M_Wind;                                            // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_TargetGroups;                                    // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikPresetWindInstance) == 0x000008, "Wrong alignment on FSQEX_BonamikPresetWindInstance");
static_assert(sizeof(FSQEX_BonamikPresetWindInstance) == 0x000020, "Wrong size on FSQEX_BonamikPresetWindInstance");
static_assert(offsetof(FSQEX_BonamikPresetWindInstance, M_PresetName) == 0x000000, "Member 'FSQEX_BonamikPresetWindInstance::M_PresetName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPresetWindInstance, M_Wind) == 0x000008, "Member 'FSQEX_BonamikPresetWindInstance::M_Wind' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPresetWindInstance, M_TargetGroups) == 0x000010, "Member 'FSQEX_BonamikPresetWindInstance::M_TargetGroups' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikWindController
// 0x0178 (0x0178 - 0x0000)
struct FSQEX_BonamikWindController final
{
public:
	struct FSQEX_BonamikPresetWindInstance        M_PresetWind[0xA];                                 // 0x0000(0x0020)(Transient, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class USQEX_BonamikWind>> M_WindSources;                                     // 0x0140(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FVector                                M_CurrentGlobalWindForce;                          // 0x0150(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         M_GlobalWindScale;                                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0x10];                                     // 0x0160(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWorld>                  RefWorld;                                          // 0x0170(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSQEX_BonamikWindController) == 0x000008, "Wrong alignment on FSQEX_BonamikWindController");
static_assert(sizeof(FSQEX_BonamikWindController) == 0x000178, "Wrong size on FSQEX_BonamikWindController");
static_assert(offsetof(FSQEX_BonamikWindController, M_PresetWind) == 0x000000, "Member 'FSQEX_BonamikWindController::M_PresetWind' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikWindController, M_WindSources) == 0x000140, "Member 'FSQEX_BonamikWindController::M_WindSources' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikWindController, M_CurrentGlobalWindForce) == 0x000150, "Member 'FSQEX_BonamikWindController::M_CurrentGlobalWindForce' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikWindController, M_GlobalWindScale) == 0x00015C, "Member 'FSQEX_BonamikWindController::M_GlobalWindScale' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikWindController, RefWorld) == 0x000170, "Member 'FSQEX_BonamikWindController::RefWorld' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikPresetWindSettings
// 0x0020 (0x0020 - 0x0000)
struct FSQEX_BonamikPresetWindSettings final
{
public:
	class FName                                   M_PresetName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_BonamikWindDesc*                  M_WindDesc;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         M_TargetGroups;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikPresetWindSettings) == 0x000008, "Wrong alignment on FSQEX_BonamikPresetWindSettings");
static_assert(sizeof(FSQEX_BonamikPresetWindSettings) == 0x000020, "Wrong size on FSQEX_BonamikPresetWindSettings");
static_assert(offsetof(FSQEX_BonamikPresetWindSettings, M_PresetName) == 0x000000, "Member 'FSQEX_BonamikPresetWindSettings::M_PresetName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPresetWindSettings, M_WindDesc) == 0x000008, "Member 'FSQEX_BonamikPresetWindSettings::M_WindDesc' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPresetWindSettings, M_TargetGroups) == 0x000010, "Member 'FSQEX_BonamikPresetWindSettings::M_TargetGroups' has a wrong offset!");

}

