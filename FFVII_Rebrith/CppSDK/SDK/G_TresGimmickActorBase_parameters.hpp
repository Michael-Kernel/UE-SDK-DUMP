#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: G_TresGimmickActorBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function g_TresGimmickActorBase.g_TresGimmickActorBase_C.ExecuteUbergraph_g_TresGimmickActorBase
// 0x0060 (0x0060 - 0x0000)
struct G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ActivateGimmick;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Reset;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_playAnimation2;                       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_ControllerID4;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_playAnimation;                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_ControllerID3;                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_ControllerID2;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_Name;                                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Param1;                               // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Param2;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Param3;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Param4;                               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_Param5;                               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Event_Param6;                               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_ControllerID;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase) == 0x000008, "Wrong alignment on G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase");
static_assert(sizeof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase) == 0x000060, "Wrong size on G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, EntryPoint) == 0x000000, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_ActivateGimmick) == 0x000004, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_ActivateGimmick' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_Reset) == 0x000005, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_Reset' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_playAnimation2) == 0x000006, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_playAnimation2' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_ControllerID4) == 0x000008, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_ControllerID4' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_playAnimation) == 0x000010, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_playAnimation' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_ControllerID3) == 0x000018, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_ControllerID3' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_ControllerID2) == 0x000020, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_ControllerID2' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_Name) == 0x000028, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_Param1) == 0x000030, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_Param1' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_Param2) == 0x00003C, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_Param2' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_Param3) == 0x000040, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_Param3' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_Param4) == 0x000044, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_Param4' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_Param5) == 0x000048, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_Param5' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_Param6) == 0x000050, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_Param6' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase, K2Node_Event_ControllerID) == 0x000058, "Member 'G_TresGimmickActorBase_C_ExecuteUbergraph_g_TresGimmickActorBase::K2Node_Event_ControllerID' has a wrong offset!");

// Function g_TresGimmickActorBase.g_TresGimmickActorBase_C.TresSetControlGimmick
// 0x10101 (0x10101 - 0x0000)
struct alignas(0x10101) G_TresGimmickActorBase_C_TresSetControlGimmick final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param1;                                            // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param2;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param3;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param4;                                            // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Param5;                                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Param6;                                            // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ControllerId;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(G_TresGimmickActorBase_C_TresSetControlGimmick) == 0x010101, "Wrong alignment on G_TresGimmickActorBase_C_TresSetControlGimmick");
static_assert(sizeof(G_TresGimmickActorBase_C_TresSetControlGimmick) == 0x010101, "Wrong size on G_TresGimmickActorBase_C_TresSetControlGimmick");
static_assert(offsetof(G_TresGimmickActorBase_C_TresSetControlGimmick, Name_0) == 0x000000, "Member 'G_TresGimmickActorBase_C_TresSetControlGimmick::Name_0' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresSetControlGimmick, Param1) == 0x000008, "Member 'G_TresGimmickActorBase_C_TresSetControlGimmick::Param1' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresSetControlGimmick, Param2) == 0x000014, "Member 'G_TresGimmickActorBase_C_TresSetControlGimmick::Param2' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresSetControlGimmick, Param3) == 0x000018, "Member 'G_TresGimmickActorBase_C_TresSetControlGimmick::Param3' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresSetControlGimmick, Param4) == 0x00001C, "Member 'G_TresGimmickActorBase_C_TresSetControlGimmick::Param4' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresSetControlGimmick, Param5) == 0x000020, "Member 'G_TresGimmickActorBase_C_TresSetControlGimmick::Param5' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresSetControlGimmick, Param6) == 0x000028, "Member 'G_TresGimmickActorBase_C_TresSetControlGimmick::Param6' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresSetControlGimmick, ControllerId) == 0x000030, "Member 'G_TresGimmickActorBase_C_TresSetControlGimmick::ControllerId' has a wrong offset!");

// Function g_TresGimmickActorBase.g_TresGimmickActorBase_C.TresResetGimmick
// 0x8080800 (0x8080800 - 0x0000)
struct alignas(0x8080800) G_TresGimmickActorBase_C_TresResetGimmick final
{
public:
	class FName                                   ControllerId;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(G_TresGimmickActorBase_C_TresResetGimmick) == 0x8080800, "Wrong alignment on G_TresGimmickActorBase_C_TresResetGimmick");
static_assert(sizeof(G_TresGimmickActorBase_C_TresResetGimmick) == 0x8080800, "Wrong size on G_TresGimmickActorBase_C_TresResetGimmick");
static_assert(offsetof(G_TresGimmickActorBase_C_TresResetGimmick, ControllerId) == 0x000000, "Member 'G_TresGimmickActorBase_C_TresResetGimmick::ControllerId' has a wrong offset!");

// Function g_TresGimmickActorBase.g_TresGimmickActorBase_C.TresStopGimmick
// 0xC020000 (0xC020000 - 0x0000)
struct alignas(0xC020000) G_TresGimmickActorBase_C_TresStopGimmick final
{
public:
	bool                                          PlayAnimation;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ControllerId;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(G_TresGimmickActorBase_C_TresStopGimmick) == 0xC020000, "Wrong alignment on G_TresGimmickActorBase_C_TresStopGimmick");
static_assert(sizeof(G_TresGimmickActorBase_C_TresStopGimmick) == 0xC020000, "Wrong size on G_TresGimmickActorBase_C_TresStopGimmick");
static_assert(offsetof(G_TresGimmickActorBase_C_TresStopGimmick, PlayAnimation) == 0x000000, "Member 'G_TresGimmickActorBase_C_TresStopGimmick::PlayAnimation' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresStopGimmick, ControllerId) == 0x000008, "Member 'G_TresGimmickActorBase_C_TresStopGimmick::ControllerId' has a wrong offset!");

// Function g_TresGimmickActorBase.g_TresGimmickActorBase_C.TresStartGimmick
// 0xC020000 (0xC020000 - 0x0000)
struct alignas(0xC020000) G_TresGimmickActorBase_C_TresStartGimmick final
{
public:
	bool                                          ActivateGimmick;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Reset;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayAnimation;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ControllerId;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(G_TresGimmickActorBase_C_TresStartGimmick) == 0xC020000, "Wrong alignment on G_TresGimmickActorBase_C_TresStartGimmick");
static_assert(sizeof(G_TresGimmickActorBase_C_TresStartGimmick) == 0xC020000, "Wrong size on G_TresGimmickActorBase_C_TresStartGimmick");
static_assert(offsetof(G_TresGimmickActorBase_C_TresStartGimmick, ActivateGimmick) == 0x000000, "Member 'G_TresGimmickActorBase_C_TresStartGimmick::ActivateGimmick' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresStartGimmick, Reset) == 0x000001, "Member 'G_TresGimmickActorBase_C_TresStartGimmick::Reset' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresStartGimmick, PlayAnimation) == 0x000002, "Member 'G_TresGimmickActorBase_C_TresStartGimmick::PlayAnimation' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresStartGimmick, ControllerId) == 0x000008, "Member 'G_TresGimmickActorBase_C_TresStartGimmick::ControllerId' has a wrong offset!");

// Function g_TresGimmickActorBase.g_TresGimmickActorBase_C.UserConstructionScript
// 0xC020000 (0xC020000 - 0x0000)
struct alignas(0xC020000) G_TresGimmickActorBase_C_UserConstructionScript final
{
public:
	class FName                                   Temp_name_Variable;                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(G_TresGimmickActorBase_C_UserConstructionScript) == 0xC020000, "Wrong alignment on G_TresGimmickActorBase_C_UserConstructionScript");
static_assert(sizeof(G_TresGimmickActorBase_C_UserConstructionScript) == 0xC020000, "Wrong size on G_TresGimmickActorBase_C_UserConstructionScript");
static_assert(offsetof(G_TresGimmickActorBase_C_UserConstructionScript, Temp_name_Variable) == 0x000000, "Member 'G_TresGimmickActorBase_C_UserConstructionScript::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_UserConstructionScript, CallFunc_Array_AddUnique_ReturnValue) == 0x000008, "Member 'G_TresGimmickActorBase_C_UserConstructionScript::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function g_TresGimmickActorBase.g_TresGimmickActorBase_C.TresGetControlGimmick
// 0x1C420000 (0x1C420000 - 0x0000)
struct alignas(0x1C420000) G_TresGimmickActorBase_C_TresGetControlGimmick final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param1_;                                           // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param2_;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param3_;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Param4_;                                           // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param5_;                                           // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Param6_;                                           // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ControllerId;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param1;                                            // 0x0040(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param2;                                            // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param3;                                            // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param4;                                            // 0x0054(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Param5;                                            // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Param6;                                            // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(G_TresGimmickActorBase_C_TresGetControlGimmick) == 0x1C420000, "Wrong alignment on G_TresGimmickActorBase_C_TresGetControlGimmick");
static_assert(sizeof(G_TresGimmickActorBase_C_TresGetControlGimmick) == 0x1C420000, "Wrong size on G_TresGimmickActorBase_C_TresGetControlGimmick");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Name_0) == 0x000000, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Name_0' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param1_) == 0x000008, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param1_' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param2_) == 0x000014, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param2_' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param3_) == 0x000018, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param3_' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param4_) == 0x000020, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param4_' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param5_) == 0x000028, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param5_' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param6_) == 0x000030, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param6_' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, ControllerId) == 0x000038, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::ControllerId' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param1) == 0x000040, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param1' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param2) == 0x00004C, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param2' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param3) == 0x000050, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param3' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param4) == 0x000054, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param4' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param5) == 0x000058, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param5' has a wrong offset!");
static_assert(offsetof(G_TresGimmickActorBase_C_TresGetControlGimmick, Param6) == 0x000060, "Member 'G_TresGimmickActorBase_C_TresGetControlGimmick::Param6' has a wrong offset!");

}

