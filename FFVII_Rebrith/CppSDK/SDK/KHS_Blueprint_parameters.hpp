#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KHS_Blueprint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "TresGame_structs.hpp"


namespace SDK::Params
{

// Function KHS_Blueprint.KHS_Blueprint_C.ExecuteUbergraph_KHS_Blueprint
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATresGameState*                         K2Node_DynamicCast_AsTres_Game_State;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresSceneManager*                      CallFunc_GetSceneManager_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isCampMode;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Coefficient2;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Coefficient;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue36;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight35;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue35;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight34;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue34;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight33;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue33;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight32;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue32;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight31;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_inValue31;                            // 0x0068(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight30;                             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_inValue30;                            // 0x007C(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight29;                             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue29;                            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight28;                             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue28;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight27;                             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue27;                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight26;                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue26;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight25;                             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue25;                            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight24;                             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue24;                            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight23;                             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue23;                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight22;                             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_inValue22;                            // 0x00C8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight21;                             // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue21;                            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight20;                             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue20;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight19;                             // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue19;                            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight18;                             // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_inValue18;                            // 0x00F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight17;                             // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue17;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight16;                             // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_inValue16;                            // 0x0108(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight15;                             // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue15;                            // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight14;                             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue14;                            // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight13;                             // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue13;                            // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight12;                             // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue12;                            // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight11;                             // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue11;                            // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight10;                             // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue10;                            // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight9;                              // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue9;                             // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight8;                              // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue8;                             // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight7;                              // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_inValue7;                             // 0x015C(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight6;                              // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_inValue6;                             // 0x0170(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight5;                              // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0188(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue2;                        // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue3;                        // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue4;                        // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue2;             // 0x01A4(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x01B4(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue5;                        // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x01C8(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue6;                        // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue2;     // 0x01DC(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue7;                        // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor2;                    // 0x01F0(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue3;     // 0x0200(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor3;                    // 0x0210(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue3;             // 0x0220(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue4;     // 0x0230(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue8;                        // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor4;                    // 0x0244(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue9;                        // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue5;     // 0x0258(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue10;                       // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor5;                    // 0x026C(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x027C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue4;             // 0x0288(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0298(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue6;     // 0x02A8(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue11;                       // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor6;                    // 0x02BC(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue12;                       // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue7;     // 0x02D0(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue13;                       // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor7;                    // 0x02E4(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue2;                       // 0x02F4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue5;             // 0x0300(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue2;    // 0x0310(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue8;     // 0x0320(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue14;                       // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor8;                    // 0x0334(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue15;                       // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue9;     // 0x0348(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue16;                       // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor9;                    // 0x035C(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue17;                       // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue18;                       // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue19;                       // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue20;                       // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue21;                       // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue22;                       // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue23;                       // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue24;                       // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue5;                             // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight4;                              // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue4;                             // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight3;                              // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue3;                             // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight2;                              // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue25;                       // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue26;                       // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue27;                       // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue2;                // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inValue2;                             // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Weight;                               // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATresGameState*                         K2Node_DynamicCast_AsTres_Game_State2;             // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresSceneManager*                      CallFunc_GetSceneManager_ReturnValue2;             // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue28;                       // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESqexCPPKHSWorldType                          K2Node_Event_inValue;                              // 0x03E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x03E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum2_CmpSuccess;                     // 0x03E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum3_CmpSuccess;                     // 0x03E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint) == 0x112EAE80, "Wrong alignment on KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint");
static_assert(sizeof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint) == 0x112EAE80, "Wrong size on KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, EntryPoint) == 0x000000, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::EntryPoint' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_DynamicCast_AsTres_Game_State) == 0x000010, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_DynamicCast_AsTres_Game_State' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetSceneManager_ReturnValue) == 0x000020, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetSceneManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_isCampMode) == 0x000028, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_isCampMode' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_DeltaSeconds) == 0x00002C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Coefficient2) == 0x000030, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Coefficient2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Coefficient) == 0x000034, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Coefficient' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_FClamp_ReturnValue) == 0x00003C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue36) == 0x000040, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue36' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight35) == 0x000044, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight35' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue35) == 0x000048, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue35' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight34) == 0x00004C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight34' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue34) == 0x000050, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue34' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight33) == 0x000054, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight33' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue33) == 0x000058, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue33' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight32) == 0x00005C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight32' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue32) == 0x000060, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue32' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight31) == 0x000064, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight31' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue31) == 0x000068, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue31' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight30) == 0x000078, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight30' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue30) == 0x00007C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue30' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight29) == 0x00008C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight29' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue29) == 0x000090, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue29' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight28) == 0x000094, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight28' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue28) == 0x000098, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue28' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight27) == 0x00009C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight27' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue27) == 0x0000A0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue27' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight26) == 0x0000A4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight26' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue26) == 0x0000A8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue26' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight25) == 0x0000AC, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight25' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue25) == 0x0000B0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue25' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight24) == 0x0000B4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight24' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue24) == 0x0000B8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue24' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight23) == 0x0000BC, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight23' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue23) == 0x0000C0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue23' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight22) == 0x0000C4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight22' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue22) == 0x0000C8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue22' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight21) == 0x0000D4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight21' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue21) == 0x0000D8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue21' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight20) == 0x0000DC, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight20' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue20) == 0x0000E0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue20' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight19) == 0x0000E4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight19' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue19) == 0x0000E8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue19' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight18) == 0x0000EC, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight18' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue18) == 0x0000F0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue18' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight17) == 0x0000FC, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight17' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue17) == 0x000100, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue17' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight16) == 0x000104, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight16' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue16) == 0x000108, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue16' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight15) == 0x000118, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight15' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue15) == 0x00011C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue15' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight14) == 0x000120, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight14' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue14) == 0x000124, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue14' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight13) == 0x000128, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight13' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue13) == 0x00012C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue13' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight12) == 0x000130, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight12' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue12) == 0x000134, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue12' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight11) == 0x000138, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight11' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue11) == 0x00013C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue11' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight10) == 0x000140, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight10' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue10) == 0x000144, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue10' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight9) == 0x000148, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight9' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue9) == 0x00014C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue9' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight8) == 0x000150, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight8' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue8) == 0x000154, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue8' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight7) == 0x000158, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight7' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue7) == 0x00015C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue7' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight6) == 0x00016C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight6' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue6) == 0x000170, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue6' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight5) == 0x000180, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight5' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue) == 0x000184, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_LinearColorLerp_ReturnValue) == 0x000188, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue2) == 0x000198, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue3) == 0x00019C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue3' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue4) == 0x0001A0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue4' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_LinearColorLerp_ReturnValue2) == 0x0001A4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_LinearColorLerp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetVectorParameterValue_ReturnValue) == 0x0001B4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue5) == 0x0001C4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue5' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_MakeStruct_LinearColor) == 0x0001C8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue6) == 0x0001D8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue6' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetVectorParameterValue_ReturnValue2) == 0x0001DC, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetVectorParameterValue_ReturnValue2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue7) == 0x0001EC, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue7' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_MakeStruct_LinearColor2) == 0x0001F0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_MakeStruct_LinearColor2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetVectorParameterValue_ReturnValue3) == 0x000200, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetVectorParameterValue_ReturnValue3' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_MakeStruct_LinearColor3) == 0x000210, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_MakeStruct_LinearColor3' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_LinearColorLerp_ReturnValue3) == 0x000220, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_LinearColorLerp_ReturnValue3' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetVectorParameterValue_ReturnValue4) == 0x000230, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetVectorParameterValue_ReturnValue4' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue8) == 0x000240, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue8' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_MakeStruct_LinearColor4) == 0x000244, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_MakeStruct_LinearColor4' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue9) == 0x000254, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue9' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetVectorParameterValue_ReturnValue5) == 0x000258, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetVectorParameterValue_ReturnValue5' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue10) == 0x000268, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue10' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_MakeStruct_LinearColor5) == 0x00026C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_MakeStruct_LinearColor5' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_VLerp_ReturnValue) == 0x00027C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_LinearColorLerp_ReturnValue4) == 0x000288, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_LinearColorLerp_ReturnValue4' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000298, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetVectorParameterValue_ReturnValue6) == 0x0002A8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetVectorParameterValue_ReturnValue6' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue11) == 0x0002B8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue11' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_MakeStruct_LinearColor6) == 0x0002BC, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_MakeStruct_LinearColor6' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue12) == 0x0002CC, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue12' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetVectorParameterValue_ReturnValue7) == 0x0002D0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetVectorParameterValue_ReturnValue7' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue13) == 0x0002E0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue13' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_MakeStruct_LinearColor7) == 0x0002E4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_MakeStruct_LinearColor7' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_VLerp_ReturnValue2) == 0x0002F4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_VLerp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_LinearColorLerp_ReturnValue5) == 0x000300, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_LinearColorLerp_ReturnValue5' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Conv_VectorToLinearColor_ReturnValue2) == 0x000310, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Conv_VectorToLinearColor_ReturnValue2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetVectorParameterValue_ReturnValue8) == 0x000320, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetVectorParameterValue_ReturnValue8' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue14) == 0x000330, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue14' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_MakeStruct_LinearColor8) == 0x000334, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_MakeStruct_LinearColor8' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue15) == 0x000344, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue15' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetVectorParameterValue_ReturnValue9) == 0x000348, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetVectorParameterValue_ReturnValue9' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue16) == 0x000358, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue16' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_MakeStruct_LinearColor9) == 0x00035C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_MakeStruct_LinearColor9' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue17) == 0x00036C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue17' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue18) == 0x000370, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue18' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue19) == 0x000374, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue19' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue20) == 0x000378, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue20' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue21) == 0x00037C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue21' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue22) == 0x000380, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue22' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue23) == 0x000384, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue23' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue24) == 0x000388, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue24' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue5) == 0x00038C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue5' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight4) == 0x000390, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight4' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue4) == 0x000394, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue4' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight3) == 0x000398, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight3' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue3) == 0x00039C, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue3' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight2) == 0x0003A0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue25) == 0x0003A4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue25' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue26) == 0x0003A8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue26' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue27) == 0x0003AC, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue27' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_EndPlayReason) == 0x0003B0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetGameState_ReturnValue2) == 0x0003B8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetGameState_ReturnValue2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue2) == 0x0003C0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_Weight) == 0x0003C4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_Weight' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_DynamicCast_AsTres_Game_State2) == 0x0003C8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_DynamicCast_AsTres_Game_State2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_DynamicCast_bSuccess2) == 0x0003D0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_GetSceneManager_ReturnValue2) == 0x0003D8, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_GetSceneManager_ReturnValue2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, CallFunc_Lerp_ReturnValue28) == 0x0003E0, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::CallFunc_Lerp_ReturnValue28' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_Event_inValue) == 0x0003E4, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_Event_inValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_SwitchEnum_CmpSuccess) == 0x0003E5, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_SwitchEnum2_CmpSuccess) == 0x0003E6, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_SwitchEnum2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint, K2Node_SwitchEnum3_CmpSuccess) == 0x0003E7, "Member 'KHS_Blueprint_C_ExecuteUbergraph_KHS_Blueprint::K2Node_SwitchEnum3_CmpSuccess' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_ChangeWorldType
// 0x0001 (0x0001 - 0x0000)
struct KHS_Blueprint_C_BP_ChangeWorldType final
{
public:
	ESqexCPPKHSWorldType                          InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_ChangeWorldType) == 0x000001, "Wrong alignment on KHS_Blueprint_C_BP_ChangeWorldType");
static_assert(sizeof(KHS_Blueprint_C_BP_ChangeWorldType) == 0x000001, "Wrong size on KHS_Blueprint_C_BP_ChangeWorldType");
static_assert(offsetof(KHS_Blueprint_C_BP_ChangeWorldType, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_ChangeWorldType::InValue' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendKHSChrEmissivMultiCounter
// 0x1001000 (0x1001000 - 0x0000)
struct alignas(0x1001000) KHS_Blueprint_C_BP_BlendKHSChrEmissivMultiCounter final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendKHSChrEmissivMultiCounter) == 0x1001000, "Wrong alignment on KHS_Blueprint_C_BP_BlendKHSChrEmissivMultiCounter");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendKHSChrEmissivMultiCounter) == 0x1001000, "Wrong size on KHS_Blueprint_C_BP_BlendKHSChrEmissivMultiCounter");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendKHSChrEmissivMultiCounter, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendKHSChrEmissivMultiCounter::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendKHSChrEmissivMultiCounter, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendKHSChrEmissivMultiCounter::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.ReceiveEndPlay
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_ReceiveEndPlay) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_ReceiveEndPlay");
static_assert(sizeof(KHS_Blueprint_C_ReceiveEndPlay) == 0x8020800, "Wrong size on KHS_Blueprint_C_ReceiveEndPlay");
static_assert(offsetof(KHS_Blueprint_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'KHS_Blueprint_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendRABrightnessBoost
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendRABrightnessBoost final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendRABrightnessBoost) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendRABrightnessBoost");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendRABrightnessBoost) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendRABrightnessBoost");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendRABrightnessBoost, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendRABrightnessBoost::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendRABrightnessBoost, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendRABrightnessBoost::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendRAAOBoost
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendRAAOBoost final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendRAAOBoost) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendRAAOBoost");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendRAAOBoost) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendRAAOBoost");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendRAAOBoost, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendRAAOBoost::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendRAAOBoost, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendRAAOBoost::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendRAMasterIntensity
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendRAMasterIntensity final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendRAMasterIntensity) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendRAMasterIntensity");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendRAMasterIntensity) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendRAMasterIntensity");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendRAMasterIntensity, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendRAMasterIntensity::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendRAMasterIntensity, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendRAMasterIntensity::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendBoardColorA
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct KHS_Blueprint_C_BP_BlendBoardColorA final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x112EAE80)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendBoardColorA) == 0x112EAE80, "Wrong alignment on KHS_Blueprint_C_BP_BlendBoardColorA");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendBoardColorA) == 0x112EAE80, "Wrong size on KHS_Blueprint_C_BP_BlendBoardColorA");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardColorA, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendBoardColorA::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardColorA, Weight) == 0x000010, "Member 'KHS_Blueprint_C_BP_BlendBoardColorA::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendBoardColorB
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct KHS_Blueprint_C_BP_BlendBoardColorB final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x112EAE80)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendBoardColorB) == 0x112EAE80, "Wrong alignment on KHS_Blueprint_C_BP_BlendBoardColorB");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendBoardColorB) == 0x112EAE80, "Wrong size on KHS_Blueprint_C_BP_BlendBoardColorB");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardColorB, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendBoardColorB::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardColorB, Weight) == 0x000010, "Member 'KHS_Blueprint_C_BP_BlendBoardColorB::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendBoardGradientA
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendBoardGradientA final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendBoardGradientA) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendBoardGradientA");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendBoardGradientA) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendBoardGradientA");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardGradientA, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendBoardGradientA::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardGradientA, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendBoardGradientA::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendBoardGradientB
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendBoardGradientB final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendBoardGradientB) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendBoardGradientB");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendBoardGradientB) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendBoardGradientB");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardGradientB, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendBoardGradientB::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardGradientB, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendBoardGradientB::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendBoardPowerA
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendBoardPowerA final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendBoardPowerA) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendBoardPowerA");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendBoardPowerA) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendBoardPowerA");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardPowerA, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendBoardPowerA::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardPowerA, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendBoardPowerA::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendBoardPowerB
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendBoardPowerB final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendBoardPowerB) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendBoardPowerB");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendBoardPowerB) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendBoardPowerB");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardPowerB, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendBoardPowerB::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardPowerB, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendBoardPowerB::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendBoardRotateA
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendBoardRotateA final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendBoardRotateA) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendBoardRotateA");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendBoardRotateA) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendBoardRotateA");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardRotateA, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendBoardRotateA::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendBoardRotateA, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendBoardRotateA::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendCameraLightingSwitch
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendCameraLightingSwitch final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendCameraLightingSwitch) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendCameraLightingSwitch");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendCameraLightingSwitch) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendCameraLightingSwitch");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendCameraLightingSwitch, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendCameraLightingSwitch::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendCameraLightingSwitch, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendCameraLightingSwitch::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendDarkAreaBoostMode
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendDarkAreaBoostMode final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendDarkAreaBoostMode) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendDarkAreaBoostMode");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendDarkAreaBoostMode) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendDarkAreaBoostMode");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendDarkAreaBoostMode, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendDarkAreaBoostMode::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendDarkAreaBoostMode, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendDarkAreaBoostMode::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendRefLightMode
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendRefLightMode final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendRefLightMode) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendRefLightMode");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendRefLightMode) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendRefLightMode");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendRefLightMode, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendRefLightMode::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendRefLightMode, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendRefLightMode::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendShadowColorMultiply
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct KHS_Blueprint_C_BP_BlendShadowColorMultiply final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x112EAE80)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendShadowColorMultiply) == 0x112EAE80, "Wrong alignment on KHS_Blueprint_C_BP_BlendShadowColorMultiply");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendShadowColorMultiply) == 0x112EAE80, "Wrong size on KHS_Blueprint_C_BP_BlendShadowColorMultiply");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendShadowColorMultiply, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendShadowColorMultiply::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendShadowColorMultiply, Weight) == 0x000010, "Member 'KHS_Blueprint_C_BP_BlendShadowColorMultiply::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendSSAOShadowPower
// 0x36D59B10 (0x36D59B10 - 0x0000)
struct alignas(0x36D59B10) KHS_Blueprint_C_BP_BlendSSAOShadowPower final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendSSAOShadowPower) == 0x36D59B10, "Wrong alignment on KHS_Blueprint_C_BP_BlendSSAOShadowPower");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendSSAOShadowPower) == 0x36D59B10, "Wrong size on KHS_Blueprint_C_BP_BlendSSAOShadowPower");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendSSAOShadowPower, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendSSAOShadowPower::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendSSAOShadowPower, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendSSAOShadowPower::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVA
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVA final
{
public:
	struct FVector                                InValue;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVA) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVA");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVA) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVA");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVA, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVA::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVA, Weight) == 0x00000C, "Member 'KHS_Blueprint_C_BP_BlendWLVA::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendUseWLVAreaDepthA
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendUseWLVAreaDepthA final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthA) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendUseWLVAreaDepthA");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthA) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendUseWLVAreaDepthA");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthA, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendUseWLVAreaDepthA::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthA, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendUseWLVAreaDepthA::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendUseWLVAreaDepthB
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendUseWLVAreaDepthB final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthB) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendUseWLVAreaDepthB");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthB) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendUseWLVAreaDepthB");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthB, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendUseWLVAreaDepthB::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthB, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendUseWLVAreaDepthB::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendUseWLVAreaDepthFov
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendUseWLVAreaDepthFov final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthFov) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendUseWLVAreaDepthFov");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthFov) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendUseWLVAreaDepthFov");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthFov, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendUseWLVAreaDepthFov::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVAreaDepthFov, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendUseWLVAreaDepthFov::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendUseWLVB
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendUseWLVB final
{
public:
	struct FVector                                InValue;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendUseWLVB) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendUseWLVB");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendUseWLVB) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendUseWLVB");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVB, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendUseWLVB::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVB, Weight) == 0x00000C, "Member 'KHS_Blueprint_C_BP_BlendUseWLVB::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendUseWLVModeA
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendUseWLVModeA final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendUseWLVModeA) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendUseWLVModeA");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendUseWLVModeA) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendUseWLVModeA");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVModeA, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendUseWLVModeA::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVModeA, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendUseWLVModeA::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendUseWLVModeB
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendUseWLVModeB final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendUseWLVModeB) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendUseWLVModeB");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendUseWLVModeB) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendUseWLVModeB");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVModeB, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendUseWLVModeB::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendUseWLVModeB, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendUseWLVModeB::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVAreaDepthInvert
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVAreaDepthInvert final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVAreaDepthInvert) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVAreaDepthInvert");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVAreaDepthInvert) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVAreaDepthInvert");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaDepthInvert, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaDepthInvert::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaDepthInvert, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaDepthInvert::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVAreaLengthA0
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVAreaLengthA0 final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVAreaLengthA0) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVAreaLengthA0");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVAreaLengthA0) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVAreaLengthA0");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaLengthA0, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaLengthA0::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaLengthA0, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaLengthA0::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVAreaLengthA1
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVAreaLengthA1 final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVAreaLengthA1) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVAreaLengthA1");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVAreaLengthA1) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVAreaLengthA1");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaLengthA1, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaLengthA1::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaLengthA1, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaLengthA1::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVAreaLengthB0
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVAreaLengthB0 final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVAreaLengthB0) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVAreaLengthB0");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVAreaLengthB0) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVAreaLengthB0");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaLengthB0, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaLengthB0::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaLengthB0, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaLengthB0::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVAreaLengthB1
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVAreaLengthB1 final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVAreaLengthB1) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVAreaLengthB1");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVAreaLengthB1) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVAreaLengthB1");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaLengthB1, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaLengthB1::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaLengthB1, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaLengthB1::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVColorA
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct KHS_Blueprint_C_BP_BlendWLVColorA final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x112EAE80)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVColorA) == 0x112EAE80, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVColorA");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVColorA) == 0x112EAE80, "Wrong size on KHS_Blueprint_C_BP_BlendWLVColorA");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVColorA, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVColorA::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVColorA, Weight) == 0x000010, "Member 'KHS_Blueprint_C_BP_BlendWLVColorA::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVColorB
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct KHS_Blueprint_C_BP_BlendWLVColorB final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x112EAE80)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVColorB) == 0x112EAE80, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVColorB");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVColorB) == 0x112EAE80, "Wrong size on KHS_Blueprint_C_BP_BlendWLVColorB");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVColorB, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVColorB::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVColorB, Weight) == 0x000010, "Member 'KHS_Blueprint_C_BP_BlendWLVColorB::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVGradientA
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVGradientA final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVGradientA) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVGradientA");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVGradientA) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVGradientA");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVGradientA, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVGradientA::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVGradientA, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendWLVGradientA::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVGradientB
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVGradientB final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVGradientB) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVGradientB");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVGradientB) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVGradientB");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVGradientB, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVGradientB::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVGradientB, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendWLVGradientB::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVPowerA
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVPowerA final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVPowerA) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVPowerA");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVPowerA) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVPowerA");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVPowerA, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVPowerA::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVPowerA, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendWLVPowerA::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVPowerB
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVPowerB final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVPowerB) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVPowerB");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVPowerB) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVPowerB");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVPowerB, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVPowerB::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVPowerB, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendWLVPowerB::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_BlendWLVAreaDepthDarknessVolume
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_BlendWLVAreaDepthDarknessVolume final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_BP_BlendWLVAreaDepthDarknessVolume) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_BlendWLVAreaDepthDarknessVolume");
static_assert(sizeof(KHS_Blueprint_C_BP_BlendWLVAreaDepthDarknessVolume) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_BlendWLVAreaDepthDarknessVolume");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaDepthDarknessVolume, InValue) == 0x000000, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaDepthDarknessVolume::InValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_BP_BlendWLVAreaDepthDarknessVolume, Weight) == 0x000004, "Member 'KHS_Blueprint_C_BP_BlendWLVAreaDepthDarknessVolume::Weight' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.SetKHSEnvVolCoefficient
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_SetKHSEnvVolCoefficient final
{
public:
	float                                         Coefficient;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_SetKHSEnvVolCoefficient) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_SetKHSEnvVolCoefficient");
static_assert(sizeof(KHS_Blueprint_C_SetKHSEnvVolCoefficient) == 0x8020800, "Wrong size on KHS_Blueprint_C_SetKHSEnvVolCoefficient");
static_assert(offsetof(KHS_Blueprint_C_SetKHSEnvVolCoefficient, Coefficient) == 0x000000, "Member 'KHS_Blueprint_C_SetKHSEnvVolCoefficient::Coefficient' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.SetKHSSceneEmissiveCoefficient
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_SetKHSSceneEmissiveCoefficient final
{
public:
	float                                         Coefficient;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_SetKHSSceneEmissiveCoefficient) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_SetKHSSceneEmissiveCoefficient");
static_assert(sizeof(KHS_Blueprint_C_SetKHSSceneEmissiveCoefficient) == 0x8020800, "Wrong size on KHS_Blueprint_C_SetKHSSceneEmissiveCoefficient");
static_assert(offsetof(KHS_Blueprint_C_SetKHSSceneEmissiveCoefficient, Coefficient) == 0x000000, "Member 'KHS_Blueprint_C_SetKHSSceneEmissiveCoefficient::Coefficient' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.ReceiveTick
// 0x8080800 (0x8080800 - 0x0000)
struct alignas(0x8080800) KHS_Blueprint_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_ReceiveTick) == 0x8080800, "Wrong alignment on KHS_Blueprint_C_ReceiveTick");
static_assert(sizeof(KHS_Blueprint_C_ReceiveTick) == 0x8080800, "Wrong size on KHS_Blueprint_C_ReceiveTick");
static_assert(offsetof(KHS_Blueprint_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'KHS_Blueprint_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.BP_PostEnableCampRenderMode
// 0x8020800 (0x8020800 - 0x0000)
struct alignas(0x8020800) KHS_Blueprint_C_BP_PostEnableCampRenderMode final
{
public:
	bool                                          IsCampMode;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KHS_Blueprint_C_BP_PostEnableCampRenderMode) == 0x8020800, "Wrong alignment on KHS_Blueprint_C_BP_PostEnableCampRenderMode");
static_assert(sizeof(KHS_Blueprint_C_BP_PostEnableCampRenderMode) == 0x8020800, "Wrong size on KHS_Blueprint_C_BP_PostEnableCampRenderMode");
static_assert(offsetof(KHS_Blueprint_C_BP_PostEnableCampRenderMode, IsCampMode) == 0x000000, "Member 'KHS_Blueprint_C_BP_PostEnableCampRenderMode::IsCampMode' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.SetSceneEmissivIntencity
// 0xC020000 (0xC020000 - 0x0000)
struct alignas(0xC020000) KHS_Blueprint_C_SetSceneEmissivIntencity final
{
public:
	float                                         NewIntencity;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_SetSceneEmissivIntencity) == 0xC020000, "Wrong alignment on KHS_Blueprint_C_SetSceneEmissivIntencity");
static_assert(sizeof(KHS_Blueprint_C_SetSceneEmissivIntencity) == 0xC020000, "Wrong size on KHS_Blueprint_C_SetSceneEmissivIntencity");
static_assert(offsetof(KHS_Blueprint_C_SetSceneEmissivIntencity, NewIntencity) == 0x000000, "Member 'KHS_Blueprint_C_SetSceneEmissivIntencity::NewIntencity' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.SetEnv_KHColVol
// 0xC820000 (0xC820000 - 0x0000)
struct alignas(0xC820000) KHS_Blueprint_C_SetEnv_KHColVol final
{
public:
	float                                         NewEnvKHColVol;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_SetEnv_KHColVol) == 0xC820000, "Wrong alignment on KHS_Blueprint_C_SetEnv_KHColVol");
static_assert(sizeof(KHS_Blueprint_C_SetEnv_KHColVol) == 0xC820000, "Wrong size on KHS_Blueprint_C_SetEnv_KHColVol");
static_assert(offsetof(KHS_Blueprint_C_SetEnv_KHColVol, NewEnvKHColVol) == 0x000000, "Member 'KHS_Blueprint_C_SetEnv_KHColVol::NewEnvKHColVol' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.updateKHSParameter
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct KHS_Blueprint_C_UpdateKHSParameter final
{
public:
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0000(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor2;                    // 0x0010(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor3;                    // 0x0020(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor4;                    // 0x0030(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0040(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue2;    // 0x0050(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_UpdateKHSParameter) == 0x112EAE80, "Wrong alignment on KHS_Blueprint_C_UpdateKHSParameter");
static_assert(sizeof(KHS_Blueprint_C_UpdateKHSParameter) == 0x112EAE80, "Wrong size on KHS_Blueprint_C_UpdateKHSParameter");
static_assert(offsetof(KHS_Blueprint_C_UpdateKHSParameter, K2Node_MakeStruct_LinearColor) == 0x000000, "Member 'KHS_Blueprint_C_UpdateKHSParameter::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_UpdateKHSParameter, K2Node_MakeStruct_LinearColor2) == 0x000010, "Member 'KHS_Blueprint_C_UpdateKHSParameter::K2Node_MakeStruct_LinearColor2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_UpdateKHSParameter, K2Node_MakeStruct_LinearColor3) == 0x000020, "Member 'KHS_Blueprint_C_UpdateKHSParameter::K2Node_MakeStruct_LinearColor3' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_UpdateKHSParameter, K2Node_MakeStruct_LinearColor4) == 0x000030, "Member 'KHS_Blueprint_C_UpdateKHSParameter::K2Node_MakeStruct_LinearColor4' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_UpdateKHSParameter, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000040, "Member 'KHS_Blueprint_C_UpdateKHSParameter::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_UpdateKHSParameter, CallFunc_Conv_VectorToLinearColor_ReturnValue2) == 0x000050, "Member 'KHS_Blueprint_C_UpdateKHSParameter::CallFunc_Conv_VectorToLinearColor_ReturnValue2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_UpdateKHSParameter, K2Node_SwitchEnum_CmpSuccess) == 0x000060, "Member 'KHS_Blueprint_C_UpdateKHSParameter::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_UpdateKHSParameter, CallFunc_FTrunc_ReturnValue) == 0x000064, "Member 'KHS_Blueprint_C_UpdateKHSParameter::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_UpdateKHSParameter, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000068, "Member 'KHS_Blueprint_C_UpdateKHSParameter::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.SetKHSMaterial
// 0xC020000 (0xC020000 - 0x0000)
struct alignas(0xC020000) KHS_Blueprint_C_SetKHSMaterial final
{
public:
	struct FPostProcessSettings                   CallFunc_Array_Get_Item;                           // 0x0000(0x112EAE80)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0740(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_741[0x7];                                      // 0x0741(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeightedBlendable                     CallFunc_Array_Get_Item2;                          // 0x0748(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0758(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x075C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75D[0x3];                                      // 0x075D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_DynamicCast_AsMaterial_Interface;           // 0x0760(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0768(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0769(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76A[0x6];                                      // 0x076A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   CallFunc_Array_Get_Item3;                          // 0x0770(0x112EAE80)()
	struct FPostProcessSettings                   CallFunc_Array_Get_Item4;                          // 0x0EB0(0x112EAE80)()
	struct FPostProcessSettings                   CallFunc_Array_Get_Item5;                          // 0x15F0(0x112EAE80)()
};
static_assert(alignof(KHS_Blueprint_C_SetKHSMaterial) == 0xC020000, "Wrong alignment on KHS_Blueprint_C_SetKHSMaterial");
static_assert(sizeof(KHS_Blueprint_C_SetKHSMaterial) == 0xC020000, "Wrong size on KHS_Blueprint_C_SetKHSMaterial");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, CallFunc_Array_Get_Item) == 0x000000, "Member 'KHS_Blueprint_C_SetKHSMaterial::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, K2Node_SwitchEnum_CmpSuccess) == 0x000740, "Member 'KHS_Blueprint_C_SetKHSMaterial::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, CallFunc_Array_Get_Item2) == 0x000748, "Member 'KHS_Blueprint_C_SetKHSMaterial::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, CallFunc_Array_Length_ReturnValue) == 0x000758, "Member 'KHS_Blueprint_C_SetKHSMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00075C, "Member 'KHS_Blueprint_C_SetKHSMaterial::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, K2Node_DynamicCast_AsMaterial_Interface) == 0x000760, "Member 'KHS_Blueprint_C_SetKHSMaterial::K2Node_DynamicCast_AsMaterial_Interface' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, K2Node_DynamicCast_bSuccess) == 0x000768, "Member 'KHS_Blueprint_C_SetKHSMaterial::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000769, "Member 'KHS_Blueprint_C_SetKHSMaterial::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, CallFunc_Array_Get_Item3) == 0x000770, "Member 'KHS_Blueprint_C_SetKHSMaterial::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, CallFunc_Array_Get_Item4) == 0x000EB0, "Member 'KHS_Blueprint_C_SetKHSMaterial::CallFunc_Array_Get_Item4' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetKHSMaterial, CallFunc_Array_Get_Item5) == 0x0015F0, "Member 'KHS_Blueprint_C_SetKHSMaterial::CallFunc_Array_Get_Item5' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.Set Chr Color Multiply
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct KHS_Blueprint_C_Set_Chr_Color_Multiply final
{
public:
	struct FLinearColor                           New_Color;                                         // 0x0000(0x112EAE80)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_Set_Chr_Color_Multiply) == 0x112EAE80, "Wrong alignment on KHS_Blueprint_C_Set_Chr_Color_Multiply");
static_assert(sizeof(KHS_Blueprint_C_Set_Chr_Color_Multiply) == 0x112EAE80, "Wrong size on KHS_Blueprint_C_Set_Chr_Color_Multiply");
static_assert(offsetof(KHS_Blueprint_C_Set_Chr_Color_Multiply, New_Color) == 0x000000, "Member 'KHS_Blueprint_C_Set_Chr_Color_Multiply::New_Color' has a wrong offset!");

// Function KHS_Blueprint.KHS_Blueprint_C.SetCmpBoardReflector
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct KHS_Blueprint_C_SetCmpBoardReflector final
{
public:
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0000(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor2;                    // 0x0010(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0020(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue2;    // 0x0030(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor3;                    // 0x0040(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor4;                    // 0x0050(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KHS_Blueprint_C_SetCmpBoardReflector) == 0x112EAE80, "Wrong alignment on KHS_Blueprint_C_SetCmpBoardReflector");
static_assert(sizeof(KHS_Blueprint_C_SetCmpBoardReflector) == 0x112EAE80, "Wrong size on KHS_Blueprint_C_SetCmpBoardReflector");
static_assert(offsetof(KHS_Blueprint_C_SetCmpBoardReflector, K2Node_MakeStruct_LinearColor) == 0x000000, "Member 'KHS_Blueprint_C_SetCmpBoardReflector::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetCmpBoardReflector, K2Node_MakeStruct_LinearColor2) == 0x000010, "Member 'KHS_Blueprint_C_SetCmpBoardReflector::K2Node_MakeStruct_LinearColor2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetCmpBoardReflector, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000020, "Member 'KHS_Blueprint_C_SetCmpBoardReflector::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetCmpBoardReflector, CallFunc_Conv_VectorToLinearColor_ReturnValue2) == 0x000030, "Member 'KHS_Blueprint_C_SetCmpBoardReflector::CallFunc_Conv_VectorToLinearColor_ReturnValue2' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetCmpBoardReflector, K2Node_MakeStruct_LinearColor3) == 0x000040, "Member 'KHS_Blueprint_C_SetCmpBoardReflector::K2Node_MakeStruct_LinearColor3' has a wrong offset!");
static_assert(offsetof(KHS_Blueprint_C_SetCmpBoardReflector, K2Node_MakeStruct_LinearColor4) == 0x000050, "Member 'KHS_Blueprint_C_SetCmpBoardReflector::K2Node_MakeStruct_LinearColor4' has a wrong offset!");

}

