#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TresPlanTimer

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TresPlanTimer.TresPlanTimer_C.ExecuteUbergraph_TresPlanTimer
// 0x0034 (0x0034 - 0x0000)
struct TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsSwitchB_Variable;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_has_been_Initialized_Variable;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsSwitchB_Variable2;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue4;                 // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_CustomEvent_Time;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_paused;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerPausedHandle_ReturnValue;       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor)
	bool                                          Temp_bool_has_been_Initialized_Variable2;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer) == 0x000004, "Wrong alignment on TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer");
static_assert(sizeof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer) == 0x000034, "Wrong size on TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, EntryPoint) == 0x000000, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::EntryPoint' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, Temp_bool_IsSwitchB_Variable) == 0x000005, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::Temp_bool_IsSwitchB_Variable' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, CallFunc_Not_PreBool_ReturnValue2) == 0x000006, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, Temp_bool_has_been_Initialized_Variable) == 0x000018, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::Temp_bool_has_been_Initialized_Variable' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, Temp_bool_IsSwitchB_Variable2) == 0x000019, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::Temp_bool_IsSwitchB_Variable2' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, CallFunc_Not_PreBool_ReturnValue3) == 0x00001A, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, CallFunc_Not_PreBool_ReturnValue4) == 0x00001B, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::CallFunc_Not_PreBool_ReturnValue4' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, K2Node_CustomEvent_Time) == 0x00001C, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, K2Node_CustomEvent_paused) == 0x000020, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::K2Node_CustomEvent_paused' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000021, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, CallFunc_K2_IsTimerPausedHandle_ReturnValue) == 0x000022, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::CallFunc_K2_IsTimerPausedHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000023, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000024, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, Temp_bool_has_been_Initialized_Variable2) == 0x000030, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::Temp_bool_has_been_Initialized_Variable2' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, K2Node_Event_EndPlayReason) == 0x000031, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer, K2Node_SwitchEnum_CmpSuccess) == 0x000032, "Member 'TresPlanTimer_C_ExecuteUbergraph_TresPlanTimer::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function TresPlanTimer.TresPlanTimer_C.ReceiveEndPlay
// 0x10101 (0x10101 - 0x0000)
struct alignas(0x10101) TresPlanTimer_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TresPlanTimer_C_ReceiveEndPlay) == 0x010101, "Wrong alignment on TresPlanTimer_C_ReceiveEndPlay");
static_assert(sizeof(TresPlanTimer_C_ReceiveEndPlay) == 0x010101, "Wrong size on TresPlanTimer_C_ReceiveEndPlay");
static_assert(offsetof(TresPlanTimer_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'TresPlanTimer_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function TresPlanTimer.TresPlanTimer_C.OnStartTimer
// 0xC000000 (0xC000000 - 0x0000)
struct alignas(0xC000000) TresPlanTimer_C_OnStartTimer final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Paused;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TresPlanTimer_C_OnStartTimer) == 0xC000000, "Wrong alignment on TresPlanTimer_C_OnStartTimer");
static_assert(sizeof(TresPlanTimer_C_OnStartTimer) == 0xC000000, "Wrong size on TresPlanTimer_C_OnStartTimer");
static_assert(offsetof(TresPlanTimer_C_OnStartTimer, Time) == 0x000000, "Member 'TresPlanTimer_C_OnStartTimer::Time' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_OnStartTimer, Paused) == 0x000004, "Member 'TresPlanTimer_C_OnStartTimer::Paused' has a wrong offset!");

// Function TresPlanTimer.TresPlanTimer_C.StartTimer
// 0x0008 (0x0008 - 0x0000)
struct TresPlanTimer_C_StartTimer final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Paused;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TresPlanTimer_C_StartTimer) == 0x000004, "Wrong alignment on TresPlanTimer_C_StartTimer");
static_assert(sizeof(TresPlanTimer_C_StartTimer) == 0x000008, "Wrong size on TresPlanTimer_C_StartTimer");
static_assert(offsetof(TresPlanTimer_C_StartTimer, Time) == 0x000000, "Member 'TresPlanTimer_C_StartTimer::Time' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_StartTimer, Paused) == 0x000004, "Member 'TresPlanTimer_C_StartTimer::Paused' has a wrong offset!");

// Function TresPlanTimer.TresPlanTimer_C.IsPauseTimer
// 0xC020800 (0xC020800 - 0x0000)
struct alignas(0xC020800) TresPlanTimer_C_IsPauseTimer final
{
public:
	bool                                          Paused;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerPausedHandle_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TresPlanTimer_C_IsPauseTimer) == 0xC020800, "Wrong alignment on TresPlanTimer_C_IsPauseTimer");
static_assert(sizeof(TresPlanTimer_C_IsPauseTimer) == 0xC020800, "Wrong size on TresPlanTimer_C_IsPauseTimer");
static_assert(offsetof(TresPlanTimer_C_IsPauseTimer, Paused) == 0x000000, "Member 'TresPlanTimer_C_IsPauseTimer::Paused' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_IsPauseTimer, CallFunc_K2_IsTimerPausedHandle_ReturnValue) == 0x000001, "Member 'TresPlanTimer_C_IsPauseTimer::CallFunc_K2_IsTimerPausedHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_IsPauseTimer, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000002, "Member 'TresPlanTimer_C_IsPauseTimer::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");

// Function TresPlanTimer.TresPlanTimer_C.IsStartTimer
// 0x1C420000 (0x1C420000 - 0x0000)
struct alignas(0x1C420000) TresPlanTimer_C_IsStartTimer final
{
public:
	bool                                          Started;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TresPlanTimer_C_IsStartTimer) == 0x1C420000, "Wrong alignment on TresPlanTimer_C_IsStartTimer");
static_assert(sizeof(TresPlanTimer_C_IsStartTimer) == 0x1C420000, "Wrong size on TresPlanTimer_C_IsStartTimer");
static_assert(offsetof(TresPlanTimer_C_IsStartTimer, Started) == 0x000000, "Member 'TresPlanTimer_C_IsStartTimer::Started' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_IsStartTimer, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000001, "Member 'TresPlanTimer_C_IsStartTimer::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(TresPlanTimer_C_IsStartTimer, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000002, "Member 'TresPlanTimer_C_IsStartTimer::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");

}

