#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KHS_Blueprint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "KHS_WorldType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KHS_ElDebugMode_structs.hpp"
#include "TresGame_structs.hpp"
#include "TresGame_classes.hpp"
#include "KHS_ChangeType_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass KHS_Blueprint.KHS_Blueprint_C
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class AKHS_Blueprint_C final : public ATresKHShaderController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E8(0x6F26)(Transient, DuplicateTransient)
	class UPostProcessComponent*                  KHSPostVolume;                                     // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    KHS;                                               // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ObjectColor;                                       // 0x0400(0x112EAE80)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShinCol;                                           // 0x0410(0x112EAE80)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dark_Col;                                          // 0x0420(0x112EAE80)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableKHShader;                                    // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _MinusMinusMinusKHS_Blend_VolumeMinusMinusMinus_;  // 0x0438(0x0018)(Edit, BlueprintVisible)
	float                                         Chr_KHColVol;                                      // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CharaMainLightCutVolume;                           // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Chr_LightVol;                                      // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Chr_IBLVol;                                        // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Chr_AmbientVol;                                    // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Env_KHVolShine;                                    // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Env_KHVolDark;                                     // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Env_LightVol;                                      // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Env_IBLVol;                                        // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Env_AmbientVol;                                    // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   _MinusMinusMinusRenderModeMinusMinusMinus_;        // 0x0478(0x0018)(Edit, BlueprintVisible)
	float                                         ChangeShader;                                      // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKHS_WorldType                                WorldType;                                         // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKHS_ElDebugMode                              El_Debug_Mode;                                     // 0x0495(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKHS_ChangeType                               KHSRenderMode;                                     // 0x0496(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_497[0x1];                                      // 0x0497(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Env_BlendOut;                                      // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SceneEmissivIntencity;                             // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KHSArea_Depth;                                     // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _MinusMinusMinusDefault_MaterialMinusMinusMinus_;  // 0x04A8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Default_Metalic;                                   // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Default_Specular;                                  // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Default_Roughness;                                 // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _MinusMinusMinusTextureProcessMinusMinusMinus_;    // 0x04D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Chr_Saturation;                                    // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Env_Saturation;                                    // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChrTexNoizePattern;                                // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Chr_DarkShinBlend;                                 // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Env_DarkShineBlend;                                // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaltiplyShadowColorVolume;                         // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MaltiplyShadowColor;                               // 0x0500(0x112EAE80)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextureOcclusionVolume;                            // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterDepth;                                        // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Default_Env_KHColVol;                              // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPostProcessSettings>           Postprocess;                                       // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         BG_Saturation;                                     // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BG_LUT_Number;                                     // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BG_LUT_Blend;                                      // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BG_board_reflector;                                // 0x0540(0x0018)(Edit, BlueprintVisible)
	float                                         CameraPow;                                         // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BGboard_reflector;                                 // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraLightingSwitch;                              // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShadowColorMultiply;                               // 0x0564(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         SSAOShadowPower;                                   // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         DarkAreaBoostMode;                                 // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         BG_ShadowPower;                                    // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColorMakePPindex;                                  // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         BlendColorMakePP;                                  // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         BG_RefLightBoost;                                  // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BG_RefLength;                                      // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefLightMode;                                      // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Board_A_Color;                                     // 0x0594(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_A_rotate;                                    // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_A_gradient;                                  // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_A_Power;                                     // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_A_PowerBG;                                   // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Board_B_Color;                                     // 0x05B4(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_B_rotate;                                    // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Board_B_gradient;                                  // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_B_Power;                                     // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_B_PowerBG;                                   // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Board_C_rotate;                                    // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Board_C_PowerBG;                                   // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _MinusMinusMinusWorldLightVecterMinusMinusMinus_;  // 0x05E0(0x0018)(Edit, BlueprintVisible)
	float                                         UseWorldLightVecterMode;                           // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLightVecter;                                  // 0x05FC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Board_WLV_Color;                                   // 0x0608(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_WLV_gradient;                                // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_WLV_Power;                                   // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class FText                                   _MinusMinusMinusWorldLightVecter2MinusMinusMinus_; // 0x0620(0x0018)(Edit, BlueprintVisible)
	float                                         UseWorldLightVecter2Mode;                          // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLightVecter2;                                 // 0x063C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Board_WLV2_Color;                                  // 0x0648(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_WLV2_gradient;                               // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_WLV2_Power;                                  // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class FText                                   _MinusMinusMinusWorldLightVecterDepth_AMinusMinusMinus_; // 0x0660(0x0018)(Edit, BlueprintVisible)
	float                                         UseWLVAreaDepth_A;                                 // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Board_D_rotate;                                    // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKey>                           CheckKeys;                                         // 0x0680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         Board_D_PowerBG;                                   // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BG_Contrast;                                       // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BG_Lef;                                            // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BG_ACM_Blend;                                      // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BG_ACM_Intencity;                                  // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BG_Brightness;                                     // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BG_Lef_ACMBlend;                                   // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BG_Lef_ACMHue;                                     // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Chr_ColorMutiply;                                  // 0x06B0(0x112EAE80)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Para;                                              // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BG_Luminosity_Value;                               // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CC[0x4];                                      // 0x06CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           WorldTypeKey;                                      // 0x06D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         KHSCoreControl;                                    // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PixarCoreControl;                                  // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RealCoreControl;                                   // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyDarknessMode;                                 // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsCampRenderMode;                                  // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F1[0x7];                                      // 0x06F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CMP_board_reflector;                               // 0x06F8(0x0018)(Edit, BlueprintVisible)
	float                                         CMP_CameraLightingSwitch;                          // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_ShadowPower;                                   // 0x0714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_SSAOShadowPower;                               // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_DarkAreaBoostMode;                             // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_RefLightMode;                                  // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CMP_Board_A_Color;                                 // 0x0724(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_Board_A_rotate;                                // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_Board_A_gradient;                              // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_Board_A_Power;                                 // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CMP_Board_B_Color;                                 // 0x0740(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_Board_B_Power;                                 // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnableDebug;                                     // 0x0754(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_755[0x3];                                      // 0x0755(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AOPatturn;                                         // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         IndirectLightLA;                                   // 0x075C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         WLV_Aresdepth_A_Length_0;                          // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         WLV_Aresdepth_A_Length_1;                          // 0x0764(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class FText                                   _MinusMinusMinusWorldLightVecterDepth_BMinusMinusMinus_; // 0x0768(0x0018)(Edit, BlueprintVisible)
	float                                         UseWLVAreaDepth_B;                                 // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         WLV_Aresdepth_B_Length_1;                          // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         WLV_Aresdepth_B_Length_0;                          // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78C[0x4];                                      // 0x078C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _MinusMinusMinusWorldLightVecterDepth_OptionMinusMinusMinus_; // 0x0790(0x0018)(Edit, BlueprintVisible)
	float                                         UseWLVAreaDepth_Fov;                               // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         WLVAreaDepth_Invert;                               // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         WLVAreaDepthDarknessVolume;                        // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B4[0x4];                                      // 0x07B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _MinusMinusMinusCMPMinusWorldLightVecterMinusMinusMinus_; // 0x07B8(0x0018)(Edit, BlueprintVisible)
	float                                         CMP_UseWorldLightVecterMode;                       // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMP_WorldLightVecter;                              // 0x07D4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CMP_Board_WLV_Color;                               // 0x07E0(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_Board_WLV_gradient;                            // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_Board_WLV_Power;                               // 0x07F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class FText                                   _MinusMinusMinusCMPMinusWorldLightVecter2MinusMinusMinus_; // 0x07F8(0x0018)(Edit, BlueprintVisible)
	float                                         CMP_UseWorldLightVecter2Mode;                      // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMP_WorldLightVecter2;                             // 0x0814(0x000C)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CMP_Board_WLV2_Color;                              // 0x0820(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_Board_WLV2_gradient;                           // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CMP_Board_WLV2_Power;                              // 0x0834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectionAttenuationMasterIntensity;              // 0x0838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectionAttenuationAOBoost;                      // 0x083C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectionAttenuationBrightnessBoost;              // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         ChrShaderWindPower;                                // 0x0844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         KHS_ChrEmissivMultiCounter;                        // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EKHS_WorldType                                DefaultWorld;                                      // 0x084C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_KHS_Blueprint(int32 EntryPoint);
	void BP_ChangeWorldType(ESqexCPPKHSWorldType InValue);
	void BP_BlendKHSChrEmissivMultiCounter(float InValue, float Weight);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BP_BlendRABrightnessBoost(float InValue, float Weight);
	void BP_BlendRAAOBoost(float InValue, float Weight);
	void BP_BlendRAMasterIntensity(float InValue, float Weight);
	void BP_BlendBoardColorA(const struct FLinearColor& InValue, float Weight);
	void BP_BlendBoardColorB(const struct FLinearColor& InValue, float Weight);
	void BP_BlendBoardGradientA(float InValue, float Weight);
	void BP_BlendBoardGradientB(float InValue, float Weight);
	void BP_BlendBoardPowerA(float InValue, float Weight);
	void BP_BlendBoardPowerB(float InValue, float Weight);
	void BP_BlendBoardRotateA(float InValue, float Weight);
	void BP_BlendCameraLightingSwitch(float InValue, float Weight);
	void BP_BlendDarkAreaBoostMode(float InValue, float Weight);
	void BP_BlendRefLightMode(float InValue, float Weight);
	void BP_BlendShadowColorMultiply(const struct FLinearColor& InValue, float Weight);
	void BP_BlendSSAOShadowPower(float InValue, float Weight);
	void BP_BlendWLVA(const struct FVector& InValue, float Weight);
	void BP_BlendUseWLVAreaDepthA(float InValue, float Weight);
	void BP_BlendUseWLVAreaDepthB(float InValue, float Weight);
	void BP_BlendUseWLVAreaDepthFov(float InValue, float Weight);
	void BP_BlendUseWLVB(const struct FVector& InValue, float Weight);
	void BP_BlendUseWLVModeA(float InValue, float Weight);
	void BP_BlendUseWLVModeB(float InValue, float Weight);
	void BP_BlendWLVAreaDepthInvert(float InValue, float Weight);
	void BP_BlendWLVAreaLengthA0(float InValue, float Weight);
	void BP_BlendWLVAreaLengthA1(float InValue, float Weight);
	void BP_BlendWLVAreaLengthB0(float InValue, float Weight);
	void BP_BlendWLVAreaLengthB1(float InValue, float Weight);
	void BP_BlendWLVColorA(const struct FLinearColor& InValue, float Weight);
	void BP_BlendWLVColorB(const struct FLinearColor& InValue, float Weight);
	void BP_BlendWLVGradientA(float InValue, float Weight);
	void BP_BlendWLVGradientB(float InValue, float Weight);
	void BP_BlendWLVPowerA(float InValue, float Weight);
	void BP_BlendWLVPowerB(float InValue, float Weight);
	void BP_BlendWLVAreaDepthDarknessVolume(float InValue, float Weight);
	void SetKHSEnvVolCoefficient(float Coefficient);
	void SetKHSSceneEmissiveCoefficient(float Coefficient);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void BP_PostEnableCampRenderMode(bool IsCampMode);
	void BP_PostParamResetAll();
	void BP_PostInterpChange();
	void UserConstructionScript();
	void SetSceneEmissivIntencity(float NewIntencity);
	void SetEnv_KHColVol(float NewEnvKHColVol);
	void UpdateKHSParameter();
	void SetKHSMaterial();
	void Set_Chr_Color_Multiply(const struct FLinearColor& New_Color);
	void SetCmpBoardReflector();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"KHS_Blueprint_C">();
	}
	static class AKHS_Blueprint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKHS_Blueprint_C>();
	}
};
static_assert(alignof(AKHS_Blueprint_C) == 0x1EF72E00, "Wrong alignment on AKHS_Blueprint_C");
static_assert(sizeof(AKHS_Blueprint_C) == 0x1EF72E00, "Wrong size on AKHS_Blueprint_C");
static_assert(offsetof(AKHS_Blueprint_C, UberGraphFrame) == 0x0003E8, "Member 'AKHS_Blueprint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, KHSPostVolume) == 0x0003F0, "Member 'AKHS_Blueprint_C::KHSPostVolume' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, KHS) == 0x0003F8, "Member 'AKHS_Blueprint_C::KHS' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, ObjectColor) == 0x000400, "Member 'AKHS_Blueprint_C::ObjectColor' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, ShinCol) == 0x000410, "Member 'AKHS_Blueprint_C::ShinCol' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Dark_Col) == 0x000420, "Member 'AKHS_Blueprint_C::Dark_Col' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, EnableKHShader) == 0x000430, "Member 'AKHS_Blueprint_C::EnableKHShader' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusKHS_Blend_VolumeMinusMinusMinus_) == 0x000438, "Member 'AKHS_Blueprint_C::_MinusMinusMinusKHS_Blend_VolumeMinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Chr_KHColVol) == 0x000450, "Member 'AKHS_Blueprint_C::Chr_KHColVol' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CharaMainLightCutVolume) == 0x000454, "Member 'AKHS_Blueprint_C::CharaMainLightCutVolume' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Chr_LightVol) == 0x000458, "Member 'AKHS_Blueprint_C::Chr_LightVol' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Chr_IBLVol) == 0x00045C, "Member 'AKHS_Blueprint_C::Chr_IBLVol' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Chr_AmbientVol) == 0x000460, "Member 'AKHS_Blueprint_C::Chr_AmbientVol' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Env_KHVolShine) == 0x000464, "Member 'AKHS_Blueprint_C::Env_KHVolShine' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Env_KHVolDark) == 0x000468, "Member 'AKHS_Blueprint_C::Env_KHVolDark' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Env_LightVol) == 0x00046C, "Member 'AKHS_Blueprint_C::Env_LightVol' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Env_IBLVol) == 0x000470, "Member 'AKHS_Blueprint_C::Env_IBLVol' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Env_AmbientVol) == 0x000474, "Member 'AKHS_Blueprint_C::Env_AmbientVol' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusRenderModeMinusMinusMinus_) == 0x000478, "Member 'AKHS_Blueprint_C::_MinusMinusMinusRenderModeMinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, ChangeShader) == 0x000490, "Member 'AKHS_Blueprint_C::ChangeShader' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WorldType) == 0x000494, "Member 'AKHS_Blueprint_C::WorldType' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, El_Debug_Mode) == 0x000495, "Member 'AKHS_Blueprint_C::El_Debug_Mode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, KHSRenderMode) == 0x000496, "Member 'AKHS_Blueprint_C::KHSRenderMode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Env_BlendOut) == 0x000498, "Member 'AKHS_Blueprint_C::Env_BlendOut' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, SceneEmissivIntencity) == 0x00049C, "Member 'AKHS_Blueprint_C::SceneEmissivIntencity' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, KHSArea_Depth) == 0x0004A0, "Member 'AKHS_Blueprint_C::KHSArea_Depth' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusDefault_MaterialMinusMinusMinus_) == 0x0004A8, "Member 'AKHS_Blueprint_C::_MinusMinusMinusDefault_MaterialMinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Default_Metalic) == 0x0004C0, "Member 'AKHS_Blueprint_C::Default_Metalic' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Default_Specular) == 0x0004C4, "Member 'AKHS_Blueprint_C::Default_Specular' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Default_Roughness) == 0x0004C8, "Member 'AKHS_Blueprint_C::Default_Roughness' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusTextureProcessMinusMinusMinus_) == 0x0004D0, "Member 'AKHS_Blueprint_C::_MinusMinusMinusTextureProcessMinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Chr_Saturation) == 0x0004E8, "Member 'AKHS_Blueprint_C::Chr_Saturation' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Env_Saturation) == 0x0004EC, "Member 'AKHS_Blueprint_C::Env_Saturation' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, ChrTexNoizePattern) == 0x0004F0, "Member 'AKHS_Blueprint_C::ChrTexNoizePattern' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Chr_DarkShinBlend) == 0x0004F4, "Member 'AKHS_Blueprint_C::Chr_DarkShinBlend' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Env_DarkShineBlend) == 0x0004F8, "Member 'AKHS_Blueprint_C::Env_DarkShineBlend' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, MaltiplyShadowColorVolume) == 0x0004FC, "Member 'AKHS_Blueprint_C::MaltiplyShadowColorVolume' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, MaltiplyShadowColor) == 0x000500, "Member 'AKHS_Blueprint_C::MaltiplyShadowColor' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, TextureOcclusionVolume) == 0x000510, "Member 'AKHS_Blueprint_C::TextureOcclusionVolume' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WaterDepth) == 0x000514, "Member 'AKHS_Blueprint_C::WaterDepth' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Default_Env_KHColVol) == 0x000518, "Member 'AKHS_Blueprint_C::Default_Env_KHColVol' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Postprocess) == 0x000520, "Member 'AKHS_Blueprint_C::Postprocess' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_Saturation) == 0x000530, "Member 'AKHS_Blueprint_C::BG_Saturation' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_LUT_Number) == 0x000534, "Member 'AKHS_Blueprint_C::BG_LUT_Number' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_LUT_Blend) == 0x000538, "Member 'AKHS_Blueprint_C::BG_LUT_Blend' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_board_reflector) == 0x000540, "Member 'AKHS_Blueprint_C::BG_board_reflector' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CameraPow) == 0x000558, "Member 'AKHS_Blueprint_C::CameraPow' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BGboard_reflector) == 0x00055C, "Member 'AKHS_Blueprint_C::BGboard_reflector' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CameraLightingSwitch) == 0x000560, "Member 'AKHS_Blueprint_C::CameraLightingSwitch' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, ShadowColorMultiply) == 0x000564, "Member 'AKHS_Blueprint_C::ShadowColorMultiply' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, SSAOShadowPower) == 0x000574, "Member 'AKHS_Blueprint_C::SSAOShadowPower' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, DarkAreaBoostMode) == 0x000578, "Member 'AKHS_Blueprint_C::DarkAreaBoostMode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_ShadowPower) == 0x00057C, "Member 'AKHS_Blueprint_C::BG_ShadowPower' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, ColorMakePPindex) == 0x000580, "Member 'AKHS_Blueprint_C::ColorMakePPindex' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BlendColorMakePP) == 0x000584, "Member 'AKHS_Blueprint_C::BlendColorMakePP' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_RefLightBoost) == 0x000588, "Member 'AKHS_Blueprint_C::BG_RefLightBoost' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_RefLength) == 0x00058C, "Member 'AKHS_Blueprint_C::BG_RefLength' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, RefLightMode) == 0x000590, "Member 'AKHS_Blueprint_C::RefLightMode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_A_Color) == 0x000594, "Member 'AKHS_Blueprint_C::Board_A_Color' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_A_rotate) == 0x0005A4, "Member 'AKHS_Blueprint_C::Board_A_rotate' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_A_gradient) == 0x0005A8, "Member 'AKHS_Blueprint_C::Board_A_gradient' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_A_Power) == 0x0005AC, "Member 'AKHS_Blueprint_C::Board_A_Power' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_A_PowerBG) == 0x0005B0, "Member 'AKHS_Blueprint_C::Board_A_PowerBG' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_B_Color) == 0x0005B4, "Member 'AKHS_Blueprint_C::Board_B_Color' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_B_rotate) == 0x0005C4, "Member 'AKHS_Blueprint_C::Board_B_rotate' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_B_gradient) == 0x0005C8, "Member 'AKHS_Blueprint_C::Board_B_gradient' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_B_Power) == 0x0005CC, "Member 'AKHS_Blueprint_C::Board_B_Power' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_B_PowerBG) == 0x0005D0, "Member 'AKHS_Blueprint_C::Board_B_PowerBG' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_C_rotate) == 0x0005D4, "Member 'AKHS_Blueprint_C::Board_C_rotate' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_C_PowerBG) == 0x0005D8, "Member 'AKHS_Blueprint_C::Board_C_PowerBG' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusWorldLightVecterMinusMinusMinus_) == 0x0005E0, "Member 'AKHS_Blueprint_C::_MinusMinusMinusWorldLightVecterMinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, UseWorldLightVecterMode) == 0x0005F8, "Member 'AKHS_Blueprint_C::UseWorldLightVecterMode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WorldLightVecter) == 0x0005FC, "Member 'AKHS_Blueprint_C::WorldLightVecter' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_WLV_Color) == 0x000608, "Member 'AKHS_Blueprint_C::Board_WLV_Color' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_WLV_gradient) == 0x000618, "Member 'AKHS_Blueprint_C::Board_WLV_gradient' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_WLV_Power) == 0x00061C, "Member 'AKHS_Blueprint_C::Board_WLV_Power' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusWorldLightVecter2MinusMinusMinus_) == 0x000620, "Member 'AKHS_Blueprint_C::_MinusMinusMinusWorldLightVecter2MinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, UseWorldLightVecter2Mode) == 0x000638, "Member 'AKHS_Blueprint_C::UseWorldLightVecter2Mode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WorldLightVecter2) == 0x00063C, "Member 'AKHS_Blueprint_C::WorldLightVecter2' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_WLV2_Color) == 0x000648, "Member 'AKHS_Blueprint_C::Board_WLV2_Color' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_WLV2_gradient) == 0x000658, "Member 'AKHS_Blueprint_C::Board_WLV2_gradient' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_WLV2_Power) == 0x00065C, "Member 'AKHS_Blueprint_C::Board_WLV2_Power' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusWorldLightVecterDepth_AMinusMinusMinus_) == 0x000660, "Member 'AKHS_Blueprint_C::_MinusMinusMinusWorldLightVecterDepth_AMinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, UseWLVAreaDepth_A) == 0x000678, "Member 'AKHS_Blueprint_C::UseWLVAreaDepth_A' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_D_rotate) == 0x00067C, "Member 'AKHS_Blueprint_C::Board_D_rotate' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CheckKeys) == 0x000680, "Member 'AKHS_Blueprint_C::CheckKeys' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Board_D_PowerBG) == 0x000690, "Member 'AKHS_Blueprint_C::Board_D_PowerBG' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_Contrast) == 0x000694, "Member 'AKHS_Blueprint_C::BG_Contrast' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_Lef) == 0x000698, "Member 'AKHS_Blueprint_C::BG_Lef' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_ACM_Blend) == 0x00069C, "Member 'AKHS_Blueprint_C::BG_ACM_Blend' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_ACM_Intencity) == 0x0006A0, "Member 'AKHS_Blueprint_C::BG_ACM_Intencity' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_Brightness) == 0x0006A4, "Member 'AKHS_Blueprint_C::BG_Brightness' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_Lef_ACMBlend) == 0x0006A8, "Member 'AKHS_Blueprint_C::BG_Lef_ACMBlend' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_Lef_ACMHue) == 0x0006AC, "Member 'AKHS_Blueprint_C::BG_Lef_ACMHue' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Chr_ColorMutiply) == 0x0006B0, "Member 'AKHS_Blueprint_C::Chr_ColorMutiply' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, Para) == 0x0006C0, "Member 'AKHS_Blueprint_C::Para' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, BG_Luminosity_Value) == 0x0006C8, "Member 'AKHS_Blueprint_C::BG_Luminosity_Value' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WorldTypeKey) == 0x0006D0, "Member 'AKHS_Blueprint_C::WorldTypeKey' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, KHSCoreControl) == 0x0006E0, "Member 'AKHS_Blueprint_C::KHSCoreControl' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, PixarCoreControl) == 0x0006E4, "Member 'AKHS_Blueprint_C::PixarCoreControl' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, RealCoreControl) == 0x0006E8, "Member 'AKHS_Blueprint_C::RealCoreControl' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, EnemyDarknessMode) == 0x0006EC, "Member 'AKHS_Blueprint_C::EnemyDarknessMode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, IsCampRenderMode) == 0x0006F0, "Member 'AKHS_Blueprint_C::IsCampRenderMode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_board_reflector) == 0x0006F8, "Member 'AKHS_Blueprint_C::CMP_board_reflector' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_CameraLightingSwitch) == 0x000710, "Member 'AKHS_Blueprint_C::CMP_CameraLightingSwitch' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_ShadowPower) == 0x000714, "Member 'AKHS_Blueprint_C::CMP_ShadowPower' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_SSAOShadowPower) == 0x000718, "Member 'AKHS_Blueprint_C::CMP_SSAOShadowPower' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_DarkAreaBoostMode) == 0x00071C, "Member 'AKHS_Blueprint_C::CMP_DarkAreaBoostMode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_RefLightMode) == 0x000720, "Member 'AKHS_Blueprint_C::CMP_RefLightMode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_A_Color) == 0x000724, "Member 'AKHS_Blueprint_C::CMP_Board_A_Color' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_A_rotate) == 0x000734, "Member 'AKHS_Blueprint_C::CMP_Board_A_rotate' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_A_gradient) == 0x000738, "Member 'AKHS_Blueprint_C::CMP_Board_A_gradient' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_A_Power) == 0x00073C, "Member 'AKHS_Blueprint_C::CMP_Board_A_Power' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_B_Color) == 0x000740, "Member 'AKHS_Blueprint_C::CMP_Board_B_Color' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_B_Power) == 0x000750, "Member 'AKHS_Blueprint_C::CMP_Board_B_Power' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, IsEnableDebug) == 0x000754, "Member 'AKHS_Blueprint_C::IsEnableDebug' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, AOPatturn) == 0x000758, "Member 'AKHS_Blueprint_C::AOPatturn' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, IndirectLightLA) == 0x00075C, "Member 'AKHS_Blueprint_C::IndirectLightLA' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WLV_Aresdepth_A_Length_0) == 0x000760, "Member 'AKHS_Blueprint_C::WLV_Aresdepth_A_Length_0' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WLV_Aresdepth_A_Length_1) == 0x000764, "Member 'AKHS_Blueprint_C::WLV_Aresdepth_A_Length_1' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusWorldLightVecterDepth_BMinusMinusMinus_) == 0x000768, "Member 'AKHS_Blueprint_C::_MinusMinusMinusWorldLightVecterDepth_BMinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, UseWLVAreaDepth_B) == 0x000780, "Member 'AKHS_Blueprint_C::UseWLVAreaDepth_B' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WLV_Aresdepth_B_Length_1) == 0x000784, "Member 'AKHS_Blueprint_C::WLV_Aresdepth_B_Length_1' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WLV_Aresdepth_B_Length_0) == 0x000788, "Member 'AKHS_Blueprint_C::WLV_Aresdepth_B_Length_0' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusWorldLightVecterDepth_OptionMinusMinusMinus_) == 0x000790, "Member 'AKHS_Blueprint_C::_MinusMinusMinusWorldLightVecterDepth_OptionMinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, UseWLVAreaDepth_Fov) == 0x0007A8, "Member 'AKHS_Blueprint_C::UseWLVAreaDepth_Fov' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WLVAreaDepth_Invert) == 0x0007AC, "Member 'AKHS_Blueprint_C::WLVAreaDepth_Invert' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, WLVAreaDepthDarknessVolume) == 0x0007B0, "Member 'AKHS_Blueprint_C::WLVAreaDepthDarknessVolume' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusCMPMinusWorldLightVecterMinusMinusMinus_) == 0x0007B8, "Member 'AKHS_Blueprint_C::_MinusMinusMinusCMPMinusWorldLightVecterMinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_UseWorldLightVecterMode) == 0x0007D0, "Member 'AKHS_Blueprint_C::CMP_UseWorldLightVecterMode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_WorldLightVecter) == 0x0007D4, "Member 'AKHS_Blueprint_C::CMP_WorldLightVecter' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_WLV_Color) == 0x0007E0, "Member 'AKHS_Blueprint_C::CMP_Board_WLV_Color' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_WLV_gradient) == 0x0007F0, "Member 'AKHS_Blueprint_C::CMP_Board_WLV_gradient' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_WLV_Power) == 0x0007F4, "Member 'AKHS_Blueprint_C::CMP_Board_WLV_Power' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, _MinusMinusMinusCMPMinusWorldLightVecter2MinusMinusMinus_) == 0x0007F8, "Member 'AKHS_Blueprint_C::_MinusMinusMinusCMPMinusWorldLightVecter2MinusMinusMinus_' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_UseWorldLightVecter2Mode) == 0x000810, "Member 'AKHS_Blueprint_C::CMP_UseWorldLightVecter2Mode' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_WorldLightVecter2) == 0x000814, "Member 'AKHS_Blueprint_C::CMP_WorldLightVecter2' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_WLV2_Color) == 0x000820, "Member 'AKHS_Blueprint_C::CMP_Board_WLV2_Color' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_WLV2_gradient) == 0x000830, "Member 'AKHS_Blueprint_C::CMP_Board_WLV2_gradient' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, CMP_Board_WLV2_Power) == 0x000834, "Member 'AKHS_Blueprint_C::CMP_Board_WLV2_Power' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, ReflectionAttenuationMasterIntensity) == 0x000838, "Member 'AKHS_Blueprint_C::ReflectionAttenuationMasterIntensity' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, ReflectionAttenuationAOBoost) == 0x00083C, "Member 'AKHS_Blueprint_C::ReflectionAttenuationAOBoost' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, ReflectionAttenuationBrightnessBoost) == 0x000840, "Member 'AKHS_Blueprint_C::ReflectionAttenuationBrightnessBoost' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, ChrShaderWindPower) == 0x000844, "Member 'AKHS_Blueprint_C::ChrShaderWindPower' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, KHS_ChrEmissivMultiCounter) == 0x000848, "Member 'AKHS_Blueprint_C::KHS_ChrEmissivMultiCounter' has a wrong offset!");
static_assert(offsetof(AKHS_Blueprint_C, DefaultWorld) == 0x00084C, "Member 'AKHS_Blueprint_C::DefaultWorld' has a wrong offset!");

}

