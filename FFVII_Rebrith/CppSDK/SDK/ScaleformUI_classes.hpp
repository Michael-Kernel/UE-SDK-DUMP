#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ScaleformUI

#include "Basic.hpp"

#include "ScaleformUI_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class ScaleformUI.GFxMoviePlayer
// 0x01B8 (0x01F8 - 0x0040)
class UGFxMoviePlayer : public UObject
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SwfAssetName;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             Root;                                              // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDisplayWithHudOff : 1;                            // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableGammaCorrection : 1;                        // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowInput : 1;                                   // 0x0060(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowFocus : 1;                                   // 0x0060(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCloseOnLevelChange : 1;                           // 0x0060(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyOwnerFocusable : 1;                           // 0x0060(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDiscardNonOwnerInput : 1;                         // 0x0060(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCaptureKeyboardInput : 1;                         // 0x0060(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCaptureMouseInput : 1;                            // 0x0061(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCaptureGamepadInput : 1;                          // 0x0061(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCaptureTouchInput : 1;                            // 0x0061(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSplitscreenLayoutModified : 1;                  // 0x0061(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowDefaultMouseCursor : 1;                       // 0x0061(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBlurLesserMovies : 1;                             // 0x0061(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHideLesserMovies : 1;                             // 0x0061(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPriorityBlurred : 1;                            // 0x0061(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPriorityHidden : 1;                             // 0x0062(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreVisibilityEffect : 1;                       // 0x0062(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreBlurEffect : 1;                             // 0x0062(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRefreshed : 1;                                    // 0x0062(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlphaComposite : 1;                               // 0x0062(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPerformHitTest : 1;                               // 0x0062(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EGFxHitTestType                               HitTestType;                                       // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RenderTexture;                                     // 0x0068(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ExternalInterface;                                 // 0x0070(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           CaptureKeys;                                       // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           FocusIgnoreKeys;                                   // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FExternalTexture>               ExternalTextures;                                  // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EGFxRenderTextureMode                         RenderTextureMode;                                 // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x00A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGFxWidgetBinding>              WidgetBindings;                                    // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SplitscreenLayoutYAdjust;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnFsCommand;                                       // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStartCommand;                                    // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCloseCommand;                                    // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTickCommand;                                     // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusGainedCommand;                              // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusLostCommand;                                // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0xB8];                                     // 0x0128(0x00B8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGFxObject*>                     CachedMovieClipsArray;                             // 0x01E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         bSwitchingPlayInThread : 1;                        // 0x01F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UGFxMoviePlayer* OpenMovie(class USwfMovie* SwfMovie, class UObject* ExternalScriptInterface, class UTextureRenderTarget2D* RenderToTexture, class UGFxMoviePlayer* MoviePlayer, bool DisplayWithHudOff, bool StartPaused);

	void Close(bool Unload);
	struct FASColorTransform GetColorTransform(const class FString& MovieClipName);
	struct FASDisplayInfo GetDisplayInfo(const class FString& MovieClipName);
	struct FTransform GetDisplayTransform(const class FString& MovieClipName);
	class UGFxObject* GetMovieClip(const class FString& MovieClipName);
	struct FASPerspectiveTransform GetPerspective3D();
	bool GetPosition(const class FString& MovieClipName, float* X, float* Y);
	bool GetScale(const class FString& MovieClipName, float* XScale, float* YScale);
	struct FASValue GetVariableValue(const class FString& MovieClipName, const class FString& MemberName);
	TArray<struct FASValue> GetVariableValueArray(const class FString& MovieClipName, const class FString& MemberName);
	struct FTransform GetView3D();
	bool GetVisibility(const class FString& MovieClipName);
	void GotoAndPlay(const class FString& MovieClipName, const class FString& Frame);
	void GotoAndPlayI(const class FString& MovieClipName, int32 Frame);
	void GotoAndStop(const class FString& MovieClipName, const class FString& Frame);
	void GotoAndStopI(const class FString& MovieClipName, int32 Frame);
	struct FASValue Invoke(const class FString& MovieClipName, const class FString& FunctionName, const TArray<struct FASValue>& Params_0);
	bool LoadAndStart(const class FString& InSwfAssetName, bool bRefresh);
	void OnClose();
	void OnFocusGained(int32 LocalPlayerIndex);
	void OnFocusLost(int32 LocalPlayerIndex);
	void OnStart();
	void OnTick(float DeltaTime);
	void ReceiveGFxCommand(const class FString& Command, const class FString& Arguments);
	void SetAlignment(EGFxAlign Align);
	void SetCaptureKeys(const TArray<struct FKey>& Keys);
	void SetColorTransform(const class FString& MovieClipName, const struct FASColorTransform& UnrealColorTransform);
	void SetDisplayInfo(const class FString& MovieClipName, const struct FASDisplayInfo& Info);
	void SetDisplayTransform(const class FString& MovieClipName, const struct FTransform& DisplayTransform);
	bool SetExternalTexture(const class FString& Resource, class UTexture* Texture);
	void SetFocusIgnoreKeys(const TArray<struct FKey>& Keys);
	void SetMovieCanReceiveFocus(bool bCanReceiveFocus);
	void SetMovieCanReceiveInput(bool bCanReceiveInput);
	void SetPause(bool bPausePlayback);
	void SetPerspective3D(const struct FASPerspectiveTransform& PerspectiveTransform);
	void SetPosition(const class FString& MovieClipName, float X, float Y);
	void SetScale(const class FString& MovieClipName, float XScale, float YScale);
	void SetTimingMode(EGFxTimingMode TimingMode);
	void SetVariableValue(const class FString& MovieClipName, const class FString& MemberName, const struct FASValue& Value);
	void SetVariableValueArray(const class FString& MovieClipName, const class FString& MemberName, const TArray<struct FASValue>& Value);
	void SetView3D(const struct FTransform& ViewTransform);
	void SetViewport(int32 X, int32 Y, int32 Width, int32 Height);
	void SetViewScaleMode(EGFxScaleMode ScaleMode);
	void SetVisibility(const class FString& MovieClipName, bool bVisible);
	bool Start(bool bRefresh);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxMoviePlayer">();
	}
	static class UGFxMoviePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxMoviePlayer>();
	}
};
static_assert(alignof(UGFxMoviePlayer) == 0x000008, "Wrong alignment on UGFxMoviePlayer");
static_assert(sizeof(UGFxMoviePlayer) == 0x0001F8, "Wrong size on UGFxMoviePlayer");
static_assert(offsetof(UGFxMoviePlayer, SwfAssetName) == 0x000048, "Member 'UGFxMoviePlayer::SwfAssetName' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, Root) == 0x000058, "Member 'UGFxMoviePlayer::Root' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, HitTestType) == 0x000064, "Member 'UGFxMoviePlayer::HitTestType' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, RenderTexture) == 0x000068, "Member 'UGFxMoviePlayer::RenderTexture' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, ExternalInterface) == 0x000070, "Member 'UGFxMoviePlayer::ExternalInterface' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, CaptureKeys) == 0x000078, "Member 'UGFxMoviePlayer::CaptureKeys' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, FocusIgnoreKeys) == 0x000088, "Member 'UGFxMoviePlayer::FocusIgnoreKeys' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, ExternalTextures) == 0x000098, "Member 'UGFxMoviePlayer::ExternalTextures' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, RenderTextureMode) == 0x0000A8, "Member 'UGFxMoviePlayer::RenderTextureMode' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, Priority) == 0x0000A9, "Member 'UGFxMoviePlayer::Priority' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, WidgetBindings) == 0x0000B0, "Member 'UGFxMoviePlayer::WidgetBindings' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, SplitscreenLayoutYAdjust) == 0x0000C0, "Member 'UGFxMoviePlayer::SplitscreenLayoutYAdjust' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, OnFsCommand) == 0x0000C8, "Member 'UGFxMoviePlayer::OnFsCommand' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, OnStartCommand) == 0x0000D8, "Member 'UGFxMoviePlayer::OnStartCommand' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, OnCloseCommand) == 0x0000E8, "Member 'UGFxMoviePlayer::OnCloseCommand' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, OnTickCommand) == 0x0000F8, "Member 'UGFxMoviePlayer::OnTickCommand' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, OnFocusGainedCommand) == 0x000108, "Member 'UGFxMoviePlayer::OnFocusGainedCommand' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, OnFocusLostCommand) == 0x000118, "Member 'UGFxMoviePlayer::OnFocusLostCommand' has a wrong offset!");
static_assert(offsetof(UGFxMoviePlayer, CachedMovieClipsArray) == 0x0001E0, "Member 'UGFxMoviePlayer::CachedMovieClipsArray' has a wrong offset!");

// Class ScaleformUI.GFxEngine
// 0x0018 (0x0058 - 0x0040)
class UGFxEngine final : public UObject
{
public:
	TArray<struct FGCReference>                   GCReferences;                                      // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RefCount;                                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxEngine">();
	}
	static class UGFxEngine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxEngine>();
	}
};
static_assert(alignof(UGFxEngine) == 0x000008, "Wrong alignment on UGFxEngine");
static_assert(sizeof(UGFxEngine) == 0x000058, "Wrong size on UGFxEngine");
static_assert(offsetof(UGFxEngine, GCReferences) == 0x000040, "Member 'UGFxEngine::GCReferences' has a wrong offset!");
static_assert(offsetof(UGFxEngine, RefCount) == 0x000050, "Member 'UGFxEngine::RefCount' has a wrong offset!");

// Class ScaleformUI.GFxObject
// 0x0030 (0x0070 - 0x0040)
class UGFxObject final : public UObject
{
public:
	uint8                                         Pad_40[0x30];                                      // 0x0040(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FASColorTransform GetColorTransform();
	struct FASDisplayInfo GetDisplayInfo();
	struct FTransform GetDisplayTransform();
	struct FASValue GetMemberValue(const class FString& MemberName);
	TArray<struct FASValue> GetMemberValueArray(const class FString& MemberName);
	bool GetPosition(float* X, float* Y);
	bool GetScale(float* XScale, float* YScale);
	bool GetVisible();
	void GotoAndPlay(const class FString& FrameString);
	void GotoAndPlayI(int32 FrameNumber);
	void GotoAndStop(const class FString& FrameString);
	void GotoAndStopI(int32 FrameNumber);
	struct FASValue Invoke(const class FString& FunctionName, const TArray<struct FASValue>& Params_0);
	void SetColorTransform(const struct FASColorTransform& UnrealColorTransform);
	void SetDisplayInfo(const struct FASDisplayInfo& UnrealDisplayInfo);
	void SetDisplayTransform(const struct FTransform& DisplayTransform);
	void SetMemberValue(const class FString& MemberName, const struct FASValue& Input);
	void SetMemberValueArray(class UGFxMoviePlayer* MoviePlayer, const class FString& MemberName, const TArray<struct FASValue>& Input);
	void SetPosition(float X, float Y);
	void SetScale(float XScale, float YScale);
	void SetVisible(bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxObject">();
	}
	static class UGFxObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxObject>();
	}
};
static_assert(alignof(UGFxObject) == 0x000008, "Wrong alignment on UGFxObject");
static_assert(sizeof(UGFxObject) == 0x000070, "Wrong size on UGFxObject");

// Class ScaleformUI.ScaleformBlueprintLibrary
// 0x0000 (0x0040 - 0x0040)
class UScaleformBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CloseMovie(class UGFxMoviePlayer* MoviePlayer);
	static class UGFxObject* GetMember(class UGFxMoviePlayer* MoviePlayer, const class FString& MemberName);
	static class UGFxObject* GetMovieClip(class UGFxMoviePlayer* MoviePlayer, const class FString& MovieClipName);
	static class UGFxObject* GetVariable(class UGFxMoviePlayer* MoviePlayer, const class FString& VariablePath);
	static struct FASValue Invoke(class UGFxMoviePlayer* MoviePlayer, const class FString& FunctionName, const TArray<struct FASValue>& Params_0);
	static struct FASValue InvokeNoParams(class UGFxMoviePlayer* MoviePlayer, const class FString& FunctionName);
	static class UGFxMoviePlayer* OpenMovie(class USwfMovie* Movie, class UObject* ExternalInterface, class UTextureRenderTarget2D* RenderTexture, class UGFxMoviePlayer* MoviePlayer, bool DisplayWithHudOff, bool StartPaused);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScaleformBlueprintLibrary">();
	}
	static class UScaleformBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScaleformBlueprintLibrary>();
	}
};
static_assert(alignof(UScaleformBlueprintLibrary) == 0x000008, "Wrong alignment on UScaleformBlueprintLibrary");
static_assert(sizeof(UScaleformBlueprintLibrary) == 0x000040, "Wrong size on UScaleformBlueprintLibrary");

// Class ScaleformUI.SwfMovie
// 0x00A0 (0x00E0 - 0x0040)
class USwfMovie final : public UObject
{
public:
	uint8                                         bUseGFxExport : 1;                                 // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOptimizeForMobiles : 1;                           // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSetSRGBOnImportedTextures : 1;                    // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPackTextures : 1;                                 // 0x0040(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PackTextureSize;                                   // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bForceSquarePacking : 1;                           // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFlashTextureRescale                          TextureRescale;                                    // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextureFormat;                                     // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bReplaceImages : 1;                                // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceFile;                                        // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FontMappings;                                      // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 SourceFileTimestamp;                               // 0x0088(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        ImportTimeStamp;                                   // 0x0098(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 RawData;                                           // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReferencedAssetNames;                              // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        References;                                        // 0x00C0(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        UserReferences;                                    // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SwfMovie">();
	}
	static class USwfMovie* GetDefaultObj()
	{
		return GetDefaultObjImpl<USwfMovie>();
	}
};
static_assert(alignof(USwfMovie) == 0x000008, "Wrong alignment on USwfMovie");
static_assert(sizeof(USwfMovie) == 0x0000E0, "Wrong size on USwfMovie");
static_assert(offsetof(USwfMovie, PackTextureSize) == 0x000044, "Member 'USwfMovie::PackTextureSize' has a wrong offset!");
static_assert(offsetof(USwfMovie, TextureRescale) == 0x00004C, "Member 'USwfMovie::TextureRescale' has a wrong offset!");
static_assert(offsetof(USwfMovie, TextureFormat) == 0x000050, "Member 'USwfMovie::TextureFormat' has a wrong offset!");
static_assert(offsetof(USwfMovie, SourceFile) == 0x000068, "Member 'USwfMovie::SourceFile' has a wrong offset!");
static_assert(offsetof(USwfMovie, FontMappings) == 0x000078, "Member 'USwfMovie::FontMappings' has a wrong offset!");
static_assert(offsetof(USwfMovie, SourceFileTimestamp) == 0x000088, "Member 'USwfMovie::SourceFileTimestamp' has a wrong offset!");
static_assert(offsetof(USwfMovie, ImportTimeStamp) == 0x000098, "Member 'USwfMovie::ImportTimeStamp' has a wrong offset!");
static_assert(offsetof(USwfMovie, RawData) == 0x0000A0, "Member 'USwfMovie::RawData' has a wrong offset!");
static_assert(offsetof(USwfMovie, ReferencedAssetNames) == 0x0000B0, "Member 'USwfMovie::ReferencedAssetNames' has a wrong offset!");
static_assert(offsetof(USwfMovie, References) == 0x0000C0, "Member 'USwfMovie::References' has a wrong offset!");
static_assert(offsetof(USwfMovie, UserReferences) == 0x0000D0, "Member 'USwfMovie::UserReferences' has a wrong offset!");

}

