#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KineDriverRt

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum KineDriverRt.ESQEX_KD_InterpolateType
// NumValues: 0x0004
enum class ESQEX_KD_InterpolateType : uint8
{
	ESQEX_KD_InterpolateType_Step            = 0,
	ESQEX_KD_InterpolateType_Linear          = 1,
	ESQEX_KD_InterpolateType_Spline          = 2,
	ESQEX_KD_InterpolateType_MAX             = 3,
};

// Enum KineDriverRt.ESQEX_KD_ExtrapolateType
// NumValues: 0x0005
enum class ESQEX_KD_ExtrapolateType : uint8
{
	ESQEX_KD_ExtrapolateType_Constant        = 0,
	ESQEX_KD_ExtrapolateType_Gradient        = 1,
	ESQEX_KD_ExtrapolateType_Cycle           = 2,
	ESQEX_KD_ExtrapolateType_RelativeCycle   = 3,
	ESQEX_KD_ExtrapolateType_MAX             = 4,
};

// Enum KineDriverRt.ESQEX_KD_ParameterType
// NumValues: 0x0017
enum class ESQEX_KD_ParameterType : uint8
{
	ESQEX_KD_ParameterType_Other             = 0,
	ESQEX_KD_ParameterType_TranslateX        = 1,
	ESQEX_KD_ParameterType_TranslateY        = 2,
	ESQEX_KD_ParameterType_TranslateZ        = 3,
	ESQEX_KD_ParameterType_Distance          = 4,
	ESQEX_KD_ParameterType_RotateQuatX       = 5,
	ESQEX_KD_ParameterType_RotateQuatY       = 6,
	ESQEX_KD_ParameterType_RotateQuatZ       = 7,
	ESQEX_KD_ParameterType_RotateQuatW       = 8,
	ESQEX_KD_ParameterType_RotateAngle       = 9,
	ESQEX_KD_ParameterType_BendingQuatX      = 10,
	ESQEX_KD_ParameterType_BendingQuatY      = 11,
	ESQEX_KD_ParameterType_BendingQuatZ      = 12,
	ESQEX_KD_ParameterType_BendingQuatW      = 13,
	ESQEX_KD_ParameterType_BendingAngle      = 14,
	ESQEX_KD_ParameterType_BendS             = 15,
	ESQEX_KD_ParameterType_BendT             = 16,
	ESQEX_KD_ParameterType_Roll              = 17,
	ESQEX_KD_ParameterType_QuatAngle         = 18,
	ESQEX_KD_ParameterType_ScaleX            = 19,
	ESQEX_KD_ParameterType_ScaleY            = 20,
	ESQEX_KD_ParameterType_ScaleZ            = 21,
	ESQEX_KD_ParameterType_MAX               = 22,
};

// Enum KineDriverRt.ESQEX_KD_OperatorType
// NumValues: 0x0014
enum class ESQEX_KD_OperatorType : uint8
{
	ESQEX_KD_OperatorType_Unknown            = 0,
	ESQEX_KD_OperatorType_ComputeSpaceBases  = 1,
	ESQEX_KD_OperatorType_Source             = 2,
	ESQEX_KD_OperatorType_SourceTranslate    = 3,
	ESQEX_KD_OperatorType_SourceRotate       = 4,
	ESQEX_KD_OperatorType_SourceOther        = 5,
	ESQEX_KD_OperatorType_TargetTranslate    = 6,
	ESQEX_KD_OperatorType_TargetScale        = 7,
	ESQEX_KD_OperatorType_TargetRotate       = 8,
	ESQEX_KD_OperatorType_TargetBendRoll     = 9,
	ESQEX_KD_OperatorType_TargetBendSTRoll   = 10,
	ESQEX_KD_OperatorType_TargetPoscns       = 11,
	ESQEX_KD_OperatorType_TargetOricns       = 12,
	ESQEX_KD_OperatorType_TargetDircns       = 13,
	ESQEX_KD_OperatorType_TargetOther        = 14,
	ESQEX_KD_OperatorType_ConnectEquals      = 15,
	ESQEX_KD_OperatorType_ConnectLinkWith    = 16,
	ESQEX_KD_OperatorType_ConnectEZParamLink = 17,
	ESQEX_KD_OperatorType_ConnectEZParamLinkLinear = 18,
	ESQEX_KD_OperatorType_MAX                = 19,
};

// ScriptStruct KineDriverRt.SQEX_KineDriverConnectEZParamLink
// 0x0048 (0x0048 - 0x0000)
struct FSQEX_KineDriverConnectEZParamLink final
{
public:
	int32                                         InOperator;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_ParameterType                        InParameterType;                                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutOperator;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_ParameterType                        OutParameterType;                                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OtherTargetParamIndex;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PX0;                                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX1_0;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX2_1;                                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Grad0;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Grad1;                                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY0;                                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY0A;                                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY0B;                                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY1;                                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY1A;                                              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY1B;                                              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY2;                                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ByCoef;                                            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverConnectEZParamLink) == 0x000004, "Wrong alignment on FSQEX_KineDriverConnectEZParamLink");
static_assert(sizeof(FSQEX_KineDriverConnectEZParamLink) == 0x000048, "Wrong size on FSQEX_KineDriverConnectEZParamLink");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, InOperator) == 0x000000, "Member 'FSQEX_KineDriverConnectEZParamLink::InOperator' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, InParameterType) == 0x000004, "Member 'FSQEX_KineDriverConnectEZParamLink::InParameterType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, OutOperator) == 0x000008, "Member 'FSQEX_KineDriverConnectEZParamLink::OutOperator' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, OutParameterType) == 0x00000C, "Member 'FSQEX_KineDriverConnectEZParamLink::OutParameterType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, OtherTargetParamIndex) == 0x000010, "Member 'FSQEX_KineDriverConnectEZParamLink::OtherTargetParamIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, PX0) == 0x000014, "Member 'FSQEX_KineDriverConnectEZParamLink::PX0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, VX1_0) == 0x000018, "Member 'FSQEX_KineDriverConnectEZParamLink::VX1_0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, VX2_1) == 0x00001C, "Member 'FSQEX_KineDriverConnectEZParamLink::VX2_1' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, Grad0) == 0x000020, "Member 'FSQEX_KineDriverConnectEZParamLink::Grad0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, Grad1) == 0x000024, "Member 'FSQEX_KineDriverConnectEZParamLink::Grad1' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, PY0) == 0x000028, "Member 'FSQEX_KineDriverConnectEZParamLink::PY0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, PY0A) == 0x00002C, "Member 'FSQEX_KineDriverConnectEZParamLink::PY0A' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, PY0B) == 0x000030, "Member 'FSQEX_KineDriverConnectEZParamLink::PY0B' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, PY1) == 0x000034, "Member 'FSQEX_KineDriverConnectEZParamLink::PY1' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, PY1A) == 0x000038, "Member 'FSQEX_KineDriverConnectEZParamLink::PY1A' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, PY1B) == 0x00003C, "Member 'FSQEX_KineDriverConnectEZParamLink::PY1B' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, PY2) == 0x000040, "Member 'FSQEX_KineDriverConnectEZParamLink::PY2' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLink, ByCoef) == 0x000044, "Member 'FSQEX_KineDriverConnectEZParamLink::ByCoef' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverSourceRotate
// 0x112E9D50 (0x112E9D50 - 0x0000)
struct FSQEX_KineDriverSourceRotate final
{
public:
	TArray<int32>                                 SourceArray;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SourceBoneNameArray;                               // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WeightArray;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BaseSpace;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BaseSpaceBoneName;                                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0050(0x112E9D50)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimVector;                                         // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrossVector;                                       // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverSourceRotate) == 0x112E9D50, "Wrong alignment on FSQEX_KineDriverSourceRotate");
static_assert(sizeof(FSQEX_KineDriverSourceRotate) == 0x112E9D50, "Wrong size on FSQEX_KineDriverSourceRotate");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, SourceArray) == 0x000000, "Member 'FSQEX_KineDriverSourceRotate::SourceArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, SourceBoneNameArray) == 0x000010, "Member 'FSQEX_KineDriverSourceRotate::SourceBoneNameArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, WeightArray) == 0x000020, "Member 'FSQEX_KineDriverSourceRotate::WeightArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, BaseSpace) == 0x000030, "Member 'FSQEX_KineDriverSourceRotate::BaseSpace' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, BaseSpaceBoneName) == 0x000038, "Member 'FSQEX_KineDriverSourceRotate::BaseSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, SegmentScaleCompensate) == 0x000040, "Member 'FSQEX_KineDriverSourceRotate::SegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, NeutralRotate) == 0x000050, "Member 'FSQEX_KineDriverSourceRotate::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, AimVector) == 0x000060, "Member 'FSQEX_KineDriverSourceRotate::AimVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, UpVector) == 0x00006C, "Member 'FSQEX_KineDriverSourceRotate::UpVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, CrossVector) == 0x000078, "Member 'FSQEX_KineDriverSourceRotate::CrossVector' has a wrong offset!");

// ScriptStruct KineDriverRt.AnimNode_SQEX_KineDriver
// 0x0000 (0x11498FB0 - 0x11498FB0)
struct FAnimNode_SQEX_KineDriver final : public FAnimNode_SkeletalControlBase
{
public:
	int32                                         KineDriverIndex;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQEX_KineDriverData*>           KineDriverData;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EnableScaleOpChildSSC;                             // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLOD;                                         // 0x008A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B[0x1];                                       // 0x008B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinScreenSize;                                     // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCheckDrawn;                                  // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7F];                                      // 0x0091(0x007F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SQEX_KineDriver) == 0x11498FB0, "Wrong alignment on FAnimNode_SQEX_KineDriver");
static_assert(sizeof(FAnimNode_SQEX_KineDriver) == 0x11498FB0, "Wrong size on FAnimNode_SQEX_KineDriver");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, KineDriverIndex) == 0x000070, "Member 'FAnimNode_SQEX_KineDriver::KineDriverIndex' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, KineDriverData) == 0x000078, "Member 'FAnimNode_SQEX_KineDriver::KineDriverData' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, EnableScaleOpChildSSC) == 0x000088, "Member 'FAnimNode_SQEX_KineDriver::EnableScaleOpChildSSC' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, Enabled) == 0x000089, "Member 'FAnimNode_SQEX_KineDriver::Enabled' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, EnableLOD) == 0x00008A, "Member 'FAnimNode_SQEX_KineDriver::EnableLOD' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, MinScreenSize) == 0x00008C, "Member 'FAnimNode_SQEX_KineDriver::MinScreenSize' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, EnableCheckDrawn) == 0x000090, "Member 'FAnimNode_SQEX_KineDriver::EnableCheckDrawn' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriver_AssetUserDataElement
// 0x0038 (0x0038 - 0x0000)
struct FSQEX_KineDriver_AssetUserDataElement final
{
public:
	int32                                         KineDriverIndex;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQEX_KineDriverData*>           KineDriverData;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EnableScaleOpChildSSC;                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickingGroup                                 TickGroup;                                         // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentTag;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLOD;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinScreenSize;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFrustumCulling;                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCheckDrawn;                                  // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriver_AssetUserDataElement) == 0x000008, "Wrong alignment on FSQEX_KineDriver_AssetUserDataElement");
static_assert(sizeof(FSQEX_KineDriver_AssetUserDataElement) == 0x000038, "Wrong size on FSQEX_KineDriver_AssetUserDataElement");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, KineDriverIndex) == 0x000000, "Member 'FSQEX_KineDriver_AssetUserDataElement::KineDriverIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, KineDriverData) == 0x000008, "Member 'FSQEX_KineDriver_AssetUserDataElement::KineDriverData' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, EnableScaleOpChildSSC) == 0x000018, "Member 'FSQEX_KineDriver_AssetUserDataElement::EnableScaleOpChildSSC' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, TickGroup) == 0x000019, "Member 'FSQEX_KineDriver_AssetUserDataElement::TickGroup' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, ComponentTag) == 0x000020, "Member 'FSQEX_KineDriver_AssetUserDataElement::ComponentTag' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, EnableLOD) == 0x000028, "Member 'FSQEX_KineDriver_AssetUserDataElement::EnableLOD' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, MinScreenSize) == 0x00002C, "Member 'FSQEX_KineDriver_AssetUserDataElement::MinScreenSize' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, EnableFrustumCulling) == 0x000030, "Member 'FSQEX_KineDriver_AssetUserDataElement::EnableFrustumCulling' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, EnableCheckDrawn) == 0x000031, "Member 'FSQEX_KineDriver_AssetUserDataElement::EnableCheckDrawn' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverConnectEquals
// 0x115D5C60 (0x115D5C60 - 0x0000)
struct alignas(0x115D5C60) FSQEX_KineDriverConnectEquals final
{
public:
	int32                                         InOperator;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_ParameterType                        InParameterType;                                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutOperator;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_ParameterType                        OutParameterType;                                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OtherTargetParamIndex;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coef;                                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverConnectEquals) == 0x115D5C60, "Wrong alignment on FSQEX_KineDriverConnectEquals");
static_assert(sizeof(FSQEX_KineDriverConnectEquals) == 0x115D5C60, "Wrong size on FSQEX_KineDriverConnectEquals");
static_assert(offsetof(FSQEX_KineDriverConnectEquals, InOperator) == 0x000000, "Member 'FSQEX_KineDriverConnectEquals::InOperator' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEquals, InParameterType) == 0x000004, "Member 'FSQEX_KineDriverConnectEquals::InParameterType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEquals, OutOperator) == 0x000008, "Member 'FSQEX_KineDriverConnectEquals::OutOperator' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEquals, OutParameterType) == 0x00000C, "Member 'FSQEX_KineDriverConnectEquals::OutParameterType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEquals, OtherTargetParamIndex) == 0x000010, "Member 'FSQEX_KineDriverConnectEquals::OtherTargetParamIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEquals, Coef) == 0x000014, "Member 'FSQEX_KineDriverConnectEquals::Coef' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverConnectEZParamLinkLinear
// 0x0028 (0x0028 - 0x0000)
struct FSQEX_KineDriverConnectEZParamLinkLinear final
{
public:
	int32                                         InOperator;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_ParameterType                        InParameterType;                                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutOperator;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_ParameterType                        OutParameterType;                                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OtherTargetParamIndex;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampMin;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampMax;                                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableMin;                                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableMax;                                         // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverConnectEZParamLinkLinear) == 0x000004, "Wrong alignment on FSQEX_KineDriverConnectEZParamLinkLinear");
static_assert(sizeof(FSQEX_KineDriverConnectEZParamLinkLinear) == 0x000028, "Wrong size on FSQEX_KineDriverConnectEZParamLinkLinear");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, InOperator) == 0x000000, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::InOperator' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, InParameterType) == 0x000004, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::InParameterType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, OutOperator) == 0x000008, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::OutOperator' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, OutParameterType) == 0x00000C, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::OutParameterType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, OtherTargetParamIndex) == 0x000010, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::OtherTargetParamIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, Scale) == 0x000014, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::Scale' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, Offset) == 0x000018, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::Offset' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, ClampMin) == 0x00001C, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::ClampMin' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, ClampMax) == 0x000020, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::ClampMax' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, EnableMin) == 0x000024, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::EnableMin' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectEZParamLinkLinear, EnableMax) == 0x000025, "Member 'FSQEX_KineDriverConnectEZParamLinkLinear::EnableMax' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverCurveKey
// 0x001C (0x001C - 0x0000)
struct FSQEX_KineDriverCurveKey final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftTanX;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftTanY;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightTanX;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightTanY;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_InterpolateType                      InterpType;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverCurveKey) == 0x000004, "Wrong alignment on FSQEX_KineDriverCurveKey");
static_assert(sizeof(FSQEX_KineDriverCurveKey) == 0x00001C, "Wrong size on FSQEX_KineDriverCurveKey");
static_assert(offsetof(FSQEX_KineDriverCurveKey, X) == 0x000000, "Member 'FSQEX_KineDriverCurveKey::X' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, Y) == 0x000004, "Member 'FSQEX_KineDriverCurveKey::Y' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, LeftTanX) == 0x000008, "Member 'FSQEX_KineDriverCurveKey::LeftTanX' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, LeftTanY) == 0x00000C, "Member 'FSQEX_KineDriverCurveKey::LeftTanY' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, RightTanX) == 0x000010, "Member 'FSQEX_KineDriverCurveKey::RightTanX' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, RightTanY) == 0x000014, "Member 'FSQEX_KineDriverCurveKey::RightTanY' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, InterpType) == 0x000018, "Member 'FSQEX_KineDriverCurveKey::InterpType' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverConnectLinkWith
// 0x0028 (0x0028 - 0x0000)
struct FSQEX_KineDriverConnectLinkWith final
{
public:
	int32                                         InOperator;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_ParameterType                        InParameterType;                                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutOperator;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_ParameterType                        OutParameterType;                                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OtherTargetParamIndex;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_ExtrapolateType                      ExtrapType;                                        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQEX_KineDriverCurveKey>       Keys;                                              // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverConnectLinkWith) == 0x000008, "Wrong alignment on FSQEX_KineDriverConnectLinkWith");
static_assert(sizeof(FSQEX_KineDriverConnectLinkWith) == 0x000028, "Wrong size on FSQEX_KineDriverConnectLinkWith");
static_assert(offsetof(FSQEX_KineDriverConnectLinkWith, InOperator) == 0x000000, "Member 'FSQEX_KineDriverConnectLinkWith::InOperator' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectLinkWith, InParameterType) == 0x000004, "Member 'FSQEX_KineDriverConnectLinkWith::InParameterType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectLinkWith, OutOperator) == 0x000008, "Member 'FSQEX_KineDriverConnectLinkWith::OutOperator' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectLinkWith, OutParameterType) == 0x00000C, "Member 'FSQEX_KineDriverConnectLinkWith::OutParameterType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectLinkWith, OtherTargetParamIndex) == 0x000010, "Member 'FSQEX_KineDriverConnectLinkWith::OtherTargetParamIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectLinkWith, ExtrapType) == 0x000014, "Member 'FSQEX_KineDriverConnectLinkWith::ExtrapType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnectLinkWith, Keys) == 0x000018, "Member 'FSQEX_KineDriverConnectLinkWith::Keys' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetOther
// 0x0040 (0x0040 - 0x0000)
struct FSQEX_KineDriverTargetOther final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParamNames;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Params;                                            // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetOther) == 0x000008, "Wrong alignment on FSQEX_KineDriverTargetOther");
static_assert(sizeof(FSQEX_KineDriverTargetOther) == 0x000040, "Wrong size on FSQEX_KineDriverTargetOther");
static_assert(offsetof(FSQEX_KineDriverTargetOther, Name) == 0x000000, "Member 'FSQEX_KineDriverTargetOther::Name' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOther, SubType) == 0x000010, "Member 'FSQEX_KineDriverTargetOther::SubType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOther, ParamNames) == 0x000020, "Member 'FSQEX_KineDriverTargetOther::ParamNames' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOther, Params) == 0x000030, "Member 'FSQEX_KineDriverTargetOther::Params' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetDircns
// 0x112E9D50 (0x112E9D50 - 0x0000)
struct FSQEX_KineDriverTargetDircns final
{
public:
	int32                                         TargetObject;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetObjectBoneName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AimObject;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AimObjectBoneName;                                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpObject;                                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UpObjectBoneName;                                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  NeutralRotate;                                     // 0x0030(0x112E9D50)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimVector;                                         // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrossVector;                                       // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AimSrcOffset;                                      // 0x0064(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpSrcOffset;                                       // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AimTransformAffect;                                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpTransformAffect;                                 // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverTargetDircns) == 0x112E9D50, "Wrong alignment on FSQEX_KineDriverTargetDircns");
static_assert(sizeof(FSQEX_KineDriverTargetDircns) == 0x112E9D50, "Wrong size on FSQEX_KineDriverTargetDircns");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, TargetObject) == 0x000000, "Member 'FSQEX_KineDriverTargetDircns::TargetObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, TargetObjectBoneName) == 0x000008, "Member 'FSQEX_KineDriverTargetDircns::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, AimObject) == 0x000010, "Member 'FSQEX_KineDriverTargetDircns::AimObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, AimObjectBoneName) == 0x000018, "Member 'FSQEX_KineDriverTargetDircns::AimObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, UpObject) == 0x000020, "Member 'FSQEX_KineDriverTargetDircns::UpObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, UpObjectBoneName) == 0x000028, "Member 'FSQEX_KineDriverTargetDircns::UpObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, NeutralRotate) == 0x000030, "Member 'FSQEX_KineDriverTargetDircns::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, AimVector) == 0x000040, "Member 'FSQEX_KineDriverTargetDircns::AimVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, UpVector) == 0x00004C, "Member 'FSQEX_KineDriverTargetDircns::UpVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, CrossVector) == 0x000058, "Member 'FSQEX_KineDriverTargetDircns::CrossVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, AimSrcOffset) == 0x000064, "Member 'FSQEX_KineDriverTargetDircns::AimSrcOffset' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, UpSrcOffset) == 0x000070, "Member 'FSQEX_KineDriverTargetDircns::UpSrcOffset' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, AimTransformAffect) == 0x00007C, "Member 'FSQEX_KineDriverTargetDircns::AimTransformAffect' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, UpTransformAffect) == 0x00007D, "Member 'FSQEX_KineDriverTargetDircns::UpTransformAffect' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetOricns
// 0x112E9D50 (0x112E9D50 - 0x0000)
struct FSQEX_KineDriverTargetOricns final
{
public:
	int32                                         TargetObject;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetObjectBoneName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  OffsetRotate;                                      // 0x0010(0x112E9D50)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SourceArray;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SourceBoneNameArray;                               // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WeightArray;                                       // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          OffsetArray;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetOricns) == 0x112E9D50, "Wrong alignment on FSQEX_KineDriverTargetOricns");
static_assert(sizeof(FSQEX_KineDriverTargetOricns) == 0x112E9D50, "Wrong size on FSQEX_KineDriverTargetOricns");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, TargetObject) == 0x000000, "Member 'FSQEX_KineDriverTargetOricns::TargetObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, TargetObjectBoneName) == 0x000008, "Member 'FSQEX_KineDriverTargetOricns::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, OffsetRotate) == 0x000010, "Member 'FSQEX_KineDriverTargetOricns::OffsetRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, SourceArray) == 0x000020, "Member 'FSQEX_KineDriverTargetOricns::SourceArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, SourceBoneNameArray) == 0x000030, "Member 'FSQEX_KineDriverTargetOricns::SourceBoneNameArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, WeightArray) == 0x000040, "Member 'FSQEX_KineDriverTargetOricns::WeightArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, OffsetArray) == 0x000050, "Member 'FSQEX_KineDriverTargetOricns::OffsetArray' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetPoscns
// 0x0060 (0x0060 - 0x0000)
struct FSQEX_KineDriverTargetPoscns final
{
public:
	int32                                         TargetObject;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetObjectBoneName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrientAffect;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScaleAffect;                                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetTranslate;                                   // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SourceArray;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SourceBoneNameArray;                               // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WeightArray;                                       // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OffsetArray;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetPoscns) == 0x000008, "Wrong alignment on FSQEX_KineDriverTargetPoscns");
static_assert(sizeof(FSQEX_KineDriverTargetPoscns) == 0x000060, "Wrong size on FSQEX_KineDriverTargetPoscns");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, TargetObject) == 0x000000, "Member 'FSQEX_KineDriverTargetPoscns::TargetObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, TargetObjectBoneName) == 0x000008, "Member 'FSQEX_KineDriverTargetPoscns::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, OrientAffect) == 0x000010, "Member 'FSQEX_KineDriverTargetPoscns::OrientAffect' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, ScaleAffect) == 0x000011, "Member 'FSQEX_KineDriverTargetPoscns::ScaleAffect' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, OffsetTranslate) == 0x000014, "Member 'FSQEX_KineDriverTargetPoscns::OffsetTranslate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, SourceArray) == 0x000020, "Member 'FSQEX_KineDriverTargetPoscns::SourceArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, SourceBoneNameArray) == 0x000030, "Member 'FSQEX_KineDriverTargetPoscns::SourceBoneNameArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, WeightArray) == 0x000040, "Member 'FSQEX_KineDriverTargetPoscns::WeightArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, OffsetArray) == 0x000050, "Member 'FSQEX_KineDriverTargetPoscns::OffsetArray' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetBendSTRoll
// 0x112E9D50 (0x112E9D50 - 0x0000)
struct FSQEX_KineDriverTargetBendSTRoll final
{
public:
	int32                                         TargetObject;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetObjectBoneName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendS;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendT;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseSpace;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseSpaceBoneName;                                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0030(0x112E9D50)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimVector;                                         // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrossVector;                                       // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverTargetBendSTRoll) == 0x112E9D50, "Wrong alignment on FSQEX_KineDriverTargetBendSTRoll");
static_assert(sizeof(FSQEX_KineDriverTargetBendSTRoll) == 0x112E9D50, "Wrong size on FSQEX_KineDriverTargetBendSTRoll");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, TargetObject) == 0x000000, "Member 'FSQEX_KineDriverTargetBendSTRoll::TargetObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, TargetObjectBoneName) == 0x000008, "Member 'FSQEX_KineDriverTargetBendSTRoll::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, BendS) == 0x000010, "Member 'FSQEX_KineDriverTargetBendSTRoll::BendS' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, BendT) == 0x000014, "Member 'FSQEX_KineDriverTargetBendSTRoll::BendT' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, Roll) == 0x000018, "Member 'FSQEX_KineDriverTargetBendSTRoll::Roll' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, BaseSpace) == 0x00001C, "Member 'FSQEX_KineDriverTargetBendSTRoll::BaseSpace' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, BaseSpaceBoneName) == 0x000020, "Member 'FSQEX_KineDriverTargetBendSTRoll::BaseSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, SegmentScaleCompensate) == 0x000028, "Member 'FSQEX_KineDriverTargetBendSTRoll::SegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, NeutralRotate) == 0x000030, "Member 'FSQEX_KineDriverTargetBendSTRoll::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, AimVector) == 0x000040, "Member 'FSQEX_KineDriverTargetBendSTRoll::AimVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, UpVector) == 0x00004C, "Member 'FSQEX_KineDriverTargetBendSTRoll::UpVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, CrossVector) == 0x000058, "Member 'FSQEX_KineDriverTargetBendSTRoll::CrossVector' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetBendRoll
// 0x112E9D50 (0x112E9D50 - 0x0000)
struct FSQEX_KineDriverTargetBendRoll final
{
public:
	int32                                         TargetObject;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetObjectBoneName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceQuat;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuatWeight;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AsQuatAngle;                                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Roll;                                              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseSpace;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BaseSpaceBoneName;                                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0040(0x112E9D50)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimVector;                                         // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverTargetBendRoll) == 0x112E9D50, "Wrong alignment on FSQEX_KineDriverTargetBendRoll");
static_assert(sizeof(FSQEX_KineDriverTargetBendRoll) == 0x112E9D50, "Wrong size on FSQEX_KineDriverTargetBendRoll");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, TargetObject) == 0x000000, "Member 'FSQEX_KineDriverTargetBendRoll::TargetObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, TargetObjectBoneName) == 0x000008, "Member 'FSQEX_KineDriverTargetBendRoll::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, SourceQuat) == 0x000010, "Member 'FSQEX_KineDriverTargetBendRoll::SourceQuat' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, QuatWeight) == 0x000014, "Member 'FSQEX_KineDriverTargetBendRoll::QuatWeight' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, AsQuatAngle) == 0x000018, "Member 'FSQEX_KineDriverTargetBendRoll::AsQuatAngle' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, Roll) == 0x00001C, "Member 'FSQEX_KineDriverTargetBendRoll::Roll' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, BaseSpace) == 0x000020, "Member 'FSQEX_KineDriverTargetBendRoll::BaseSpace' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, BaseSpaceBoneName) == 0x000028, "Member 'FSQEX_KineDriverTargetBendRoll::BaseSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, SegmentScaleCompensate) == 0x000030, "Member 'FSQEX_KineDriverTargetBendRoll::SegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, NeutralRotate) == 0x000040, "Member 'FSQEX_KineDriverTargetBendRoll::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, AimVector) == 0x000050, "Member 'FSQEX_KineDriverTargetBendRoll::AimVector' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetRotate
// 0x112E9D50 (0x112E9D50 - 0x0000)
struct FSQEX_KineDriverTargetRotate final
{
public:
	int32                                         TargetObject;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetObjectBoneName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceQuat;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuatWeight;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AsQuatAngle;                                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BaseSpace;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseSpaceBoneName;                                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0030(0x112E9D50)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetRotate) == 0x112E9D50, "Wrong alignment on FSQEX_KineDriverTargetRotate");
static_assert(sizeof(FSQEX_KineDriverTargetRotate) == 0x112E9D50, "Wrong size on FSQEX_KineDriverTargetRotate");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, TargetObject) == 0x000000, "Member 'FSQEX_KineDriverTargetRotate::TargetObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, TargetObjectBoneName) == 0x000008, "Member 'FSQEX_KineDriverTargetRotate::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, SourceQuat) == 0x000010, "Member 'FSQEX_KineDriverTargetRotate::SourceQuat' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, QuatWeight) == 0x000014, "Member 'FSQEX_KineDriverTargetRotate::QuatWeight' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, AsQuatAngle) == 0x000018, "Member 'FSQEX_KineDriverTargetRotate::AsQuatAngle' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, BaseSpace) == 0x00001C, "Member 'FSQEX_KineDriverTargetRotate::BaseSpace' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, BaseSpaceBoneName) == 0x000020, "Member 'FSQEX_KineDriverTargetRotate::BaseSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, SegmentScaleCompensate) == 0x000028, "Member 'FSQEX_KineDriverTargetRotate::SegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, NeutralRotate) == 0x000030, "Member 'FSQEX_KineDriverTargetRotate::NeutralRotate' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetScale
// 0x0038 (0x0038 - 0x0000)
struct FSQEX_KineDriverTargetScale final
{
public:
	int32                                         TargetObject;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetObjectBoneName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClampZero;                                         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BaseSpace;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BaseSpaceBoneName;                                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverTargetScale) == 0x000004, "Wrong alignment on FSQEX_KineDriverTargetScale");
static_assert(sizeof(FSQEX_KineDriverTargetScale) == 0x000038, "Wrong size on FSQEX_KineDriverTargetScale");
static_assert(offsetof(FSQEX_KineDriverTargetScale, TargetObject) == 0x000000, "Member 'FSQEX_KineDriverTargetScale::TargetObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, TargetObjectBoneName) == 0x000008, "Member 'FSQEX_KineDriverTargetScale::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, Scale) == 0x000010, "Member 'FSQEX_KineDriverTargetScale::Scale' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, ClampZero) == 0x00001C, "Member 'FSQEX_KineDriverTargetScale::ClampZero' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, BaseSpace) == 0x000020, "Member 'FSQEX_KineDriverTargetScale::BaseSpace' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, BaseSpaceBoneName) == 0x000028, "Member 'FSQEX_KineDriverTargetScale::BaseSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, SegmentScaleCompensate) == 0x000030, "Member 'FSQEX_KineDriverTargetScale::SegmentScaleCompensate' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetTranslate
// 0x112E9D50 (0x112E9D50 - 0x0000)
struct FSQEX_KineDriverTargetTranslate final
{
public:
	int32                                         TargetObject;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetObjectBoneName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Translate;                                         // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseSpace;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseSpaceBoneName;                                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NeutralTranslate;                                  // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0040(0x112E9D50)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetTranslate) == 0x112E9D50, "Wrong alignment on FSQEX_KineDriverTargetTranslate");
static_assert(sizeof(FSQEX_KineDriverTargetTranslate) == 0x112E9D50, "Wrong size on FSQEX_KineDriverTargetTranslate");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, TargetObject) == 0x000000, "Member 'FSQEX_KineDriverTargetTranslate::TargetObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, TargetObjectBoneName) == 0x000008, "Member 'FSQEX_KineDriverTargetTranslate::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, Translate) == 0x000010, "Member 'FSQEX_KineDriverTargetTranslate::Translate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, BaseSpace) == 0x00001C, "Member 'FSQEX_KineDriverTargetTranslate::BaseSpace' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, BaseSpaceBoneName) == 0x000020, "Member 'FSQEX_KineDriverTargetTranslate::BaseSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, NeutralTranslate) == 0x000028, "Member 'FSQEX_KineDriverTargetTranslate::NeutralTranslate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, NeutralRotate) == 0x000040, "Member 'FSQEX_KineDriverTargetTranslate::NeutralRotate' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverSourceOther
// 0x115D9C00 (0x115D9C00 - 0x0000)
struct alignas(0x115D9C00) FSQEX_KineDriverSourceOther final
{
public:
	int32                                         SourceObject;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceObjectBoneName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverSourceOther) == 0x115D9C00, "Wrong alignment on FSQEX_KineDriverSourceOther");
static_assert(sizeof(FSQEX_KineDriverSourceOther) == 0x115D9C00, "Wrong size on FSQEX_KineDriverSourceOther");
static_assert(offsetof(FSQEX_KineDriverSourceOther, SourceObject) == 0x000000, "Member 'FSQEX_KineDriverSourceOther::SourceObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceOther, SourceObjectBoneName) == 0x000008, "Member 'FSQEX_KineDriverSourceOther::SourceObjectBoneName' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverSourceTranslate
// 0x112E9D50 (0x112E9D50 - 0x0000)
struct FSQEX_KineDriverSourceTranslate final
{
public:
	TArray<int32>                                 SourceArray;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SourceBoneNameArray;                               // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WeightArray;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BaseSpace;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BaseSpaceBoneName;                                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NeutralTranslate;                                  // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0050(0x112E9D50)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverSourceTranslate) == 0x112E9D50, "Wrong alignment on FSQEX_KineDriverSourceTranslate");
static_assert(sizeof(FSQEX_KineDriverSourceTranslate) == 0x112E9D50, "Wrong size on FSQEX_KineDriverSourceTranslate");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, SourceArray) == 0x000000, "Member 'FSQEX_KineDriverSourceTranslate::SourceArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, SourceBoneNameArray) == 0x000010, "Member 'FSQEX_KineDriverSourceTranslate::SourceBoneNameArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, WeightArray) == 0x000020, "Member 'FSQEX_KineDriverSourceTranslate::WeightArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, BaseSpace) == 0x000030, "Member 'FSQEX_KineDriverSourceTranslate::BaseSpace' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, BaseSpaceBoneName) == 0x000038, "Member 'FSQEX_KineDriverSourceTranslate::BaseSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, NeutralTranslate) == 0x000040, "Member 'FSQEX_KineDriverSourceTranslate::NeutralTranslate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, NeutralRotate) == 0x000050, "Member 'FSQEX_KineDriverSourceTranslate::NeutralRotate' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverSource
// 0x112E9D50 (0x112E9D50 - 0x0000)
struct FSQEX_KineDriverSource final
{
public:
	int32                                         Source0;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceBoneName0;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Source1;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceBoneName1;                                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseSpace;                                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseSpaceBoneName;                                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NeutralTranslate;                                  // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0040(0x112E9D50)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimVector;                                         // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrossVector;                                       // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverSource) == 0x112E9D50, "Wrong alignment on FSQEX_KineDriverSource");
static_assert(sizeof(FSQEX_KineDriverSource) == 0x112E9D50, "Wrong size on FSQEX_KineDriverSource");
static_assert(offsetof(FSQEX_KineDriverSource, Source0) == 0x000000, "Member 'FSQEX_KineDriverSource::Source0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, SourceBoneName0) == 0x000008, "Member 'FSQEX_KineDriverSource::SourceBoneName0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, Source1) == 0x000010, "Member 'FSQEX_KineDriverSource::Source1' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, SourceBoneName1) == 0x000018, "Member 'FSQEX_KineDriverSource::SourceBoneName1' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, BlendWeight) == 0x000020, "Member 'FSQEX_KineDriverSource::BlendWeight' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, BaseSpace) == 0x000024, "Member 'FSQEX_KineDriverSource::BaseSpace' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, BaseSpaceBoneName) == 0x000028, "Member 'FSQEX_KineDriverSource::BaseSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, NeutralTranslate) == 0x000030, "Member 'FSQEX_KineDriverSource::NeutralTranslate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, NeutralRotate) == 0x000040, "Member 'FSQEX_KineDriverSource::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, AimVector) == 0x000050, "Member 'FSQEX_KineDriverSource::AimVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, UpVector) == 0x00005C, "Member 'FSQEX_KineDriverSource::UpVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, CrossVector) == 0x000068, "Member 'FSQEX_KineDriverSource::CrossVector' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverComputeSpaceBases
// 0x0018 (0x0018 - 0x0000)
struct FSQEX_KineDriverComputeSpaceBases final
{
public:
	int32                                         TargetObject;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetObjectBoneName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsScaleOpChild;                                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverComputeSpaceBases) == 0x000004, "Wrong alignment on FSQEX_KineDriverComputeSpaceBases");
static_assert(sizeof(FSQEX_KineDriverComputeSpaceBases) == 0x000018, "Wrong size on FSQEX_KineDriverComputeSpaceBases");
static_assert(offsetof(FSQEX_KineDriverComputeSpaceBases, TargetObject) == 0x000000, "Member 'FSQEX_KineDriverComputeSpaceBases::TargetObject' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverComputeSpaceBases, TargetObjectBoneName) == 0x000008, "Member 'FSQEX_KineDriverComputeSpaceBases::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverComputeSpaceBases, IsScaleOpChild) == 0x000010, "Member 'FSQEX_KineDriverComputeSpaceBases::IsScaleOpChild' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverOperatorHead
// 0x115DB720 (0x115DB720 - 0x0000)
struct alignas(0x115DB720) FSQEX_KineDriverOperatorHead final
{
public:
	int32                                         Owner;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkIndex;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_OperatorType                         OpType;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OperatorBody;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverOperatorHead) == 0x115DB720, "Wrong alignment on FSQEX_KineDriverOperatorHead");
static_assert(sizeof(FSQEX_KineDriverOperatorHead) == 0x115DB720, "Wrong size on FSQEX_KineDriverOperatorHead");
static_assert(offsetof(FSQEX_KineDriverOperatorHead, Owner) == 0x000000, "Member 'FSQEX_KineDriverOperatorHead::Owner' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverOperatorHead, WorkIndex) == 0x000004, "Member 'FSQEX_KineDriverOperatorHead::WorkIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverOperatorHead, OpType) == 0x000008, "Member 'FSQEX_KineDriverOperatorHead::OpType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverOperatorHead, OperatorBody) == 0x00000C, "Member 'FSQEX_KineDriverOperatorHead::OperatorBody' has a wrong offset!");

}

