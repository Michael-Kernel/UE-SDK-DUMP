#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mercuna

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "Mercuna_structs.hpp"


namespace SDK::Params
{

// Function Mercuna.MercunaNavigationComponent.CheckReachable
// 0x0030 (0x0030 - 0x0000)
struct MercunaNavigationComponent_CheckReachable final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaNavigationComponent_CheckReachable) == 0x000008, "Wrong alignment on MercunaNavigationComponent_CheckReachable");
static_assert(sizeof(MercunaNavigationComponent_CheckReachable) == 0x000030, "Wrong size on MercunaNavigationComponent_CheckReachable");
static_assert(offsetof(MercunaNavigationComponent_CheckReachable, Point) == 0x000000, "Member 'MercunaNavigationComponent_CheckReachable::Point' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_CheckReachable, Success) == 0x00000C, "Member 'MercunaNavigationComponent_CheckReachable::Success' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_CheckReachable, WorldContextObject) == 0x000010, "Member 'MercunaNavigationComponent_CheckReachable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_CheckReachable, LatentInfo) == 0x000018, "Member 'MercunaNavigationComponent_CheckReachable::LatentInfo' has a wrong offset!");

// Function Mercuna.MercunaNavigationComponent.Configure
// 0x000C (0x000C - 0x0000)
struct MercunaNavigationComponent_Configure final
{
public:
	struct FMercunaNavigationConfiguration        NewConfiguration;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaNavigationComponent_Configure) == 0x000001, "Wrong alignment on MercunaNavigationComponent_Configure");
static_assert(sizeof(MercunaNavigationComponent_Configure) == 0x00000C, "Wrong size on MercunaNavigationComponent_Configure");
static_assert(offsetof(MercunaNavigationComponent_Configure, NewConfiguration) == 0x000000, "Member 'MercunaNavigationComponent_Configure::NewConfiguration' has a wrong offset!");

// Function Mercuna.MercunaNavigationComponent.ConfigureMovement
// 0x0002 (0x0002 - 0x0000)
struct MercunaNavigationComponent_ConfigureMovement final
{
public:
	bool                                          bUsePathfinding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDynamicAvoidance;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaNavigationComponent_ConfigureMovement) == 0x000001, "Wrong alignment on MercunaNavigationComponent_ConfigureMovement");
static_assert(sizeof(MercunaNavigationComponent_ConfigureMovement) == 0x000002, "Wrong size on MercunaNavigationComponent_ConfigureMovement");
static_assert(offsetof(MercunaNavigationComponent_ConfigureMovement, bUsePathfinding) == 0x000000, "Member 'MercunaNavigationComponent_ConfigureMovement::bUsePathfinding' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_ConfigureMovement, bUseDynamicAvoidance) == 0x000001, "Member 'MercunaNavigationComponent_ConfigureMovement::bUseDynamicAvoidance' has a wrong offset!");

// Function Mercuna.MercunaNavigationComponent.GetPathInfo
// 0x0018 (0x0018 - 0x0000)
struct MercunaNavigationComponent_GetPathInfo final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToEnd;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NextPathPoint;                                     // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFinalPoint;                                     // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaNavigationComponent_GetPathInfo) == 0x000004, "Wrong alignment on MercunaNavigationComponent_GetPathInfo");
static_assert(sizeof(MercunaNavigationComponent_GetPathInfo) == 0x000018, "Wrong size on MercunaNavigationComponent_GetPathInfo");
static_assert(offsetof(MercunaNavigationComponent_GetPathInfo, Valid) == 0x000000, "Member 'MercunaNavigationComponent_GetPathInfo::Valid' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_GetPathInfo, DistanceToEnd) == 0x000004, "Member 'MercunaNavigationComponent_GetPathInfo::DistanceToEnd' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_GetPathInfo, NextPathPoint) == 0x000008, "Member 'MercunaNavigationComponent_GetPathInfo::NextPathPoint' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_GetPathInfo, bIsFinalPoint) == 0x000014, "Member 'MercunaNavigationComponent_GetPathInfo::bIsFinalPoint' has a wrong offset!");

// Function Mercuna.MercunaNavigationComponent.LookAt
// 0x0066 (0x0066 - 0x0000)
struct alignas(0x66) MercunaNavigationComponent_LookAt final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitch;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaNavigationComponent_LookAt) == 0x000066, "Wrong alignment on MercunaNavigationComponent_LookAt");
static_assert(sizeof(MercunaNavigationComponent_LookAt) == 0x000066, "Wrong size on MercunaNavigationComponent_LookAt");
static_assert(offsetof(MercunaNavigationComponent_LookAt, Actor) == 0x000000, "Member 'MercunaNavigationComponent_LookAt::Actor' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_LookAt, MaxPitch) == 0x000008, "Member 'MercunaNavigationComponent_LookAt::MaxPitch' has a wrong offset!");

// DelegateFunction Mercuna.MercunaNavigationComponent.MercunaMoveComplete__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct MercunaNavigationComponent_MercunaMoveComplete__DelegateSignature final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EMercunaMoveResult                            Result;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaNavigationComponent_MercunaMoveComplete__DelegateSignature) == 0x000001, "Wrong alignment on MercunaNavigationComponent_MercunaMoveComplete__DelegateSignature");
static_assert(sizeof(MercunaNavigationComponent_MercunaMoveComplete__DelegateSignature) == 0x000008, "Wrong size on MercunaNavigationComponent_MercunaMoveComplete__DelegateSignature");
static_assert(offsetof(MercunaNavigationComponent_MercunaMoveComplete__DelegateSignature, RequestID) == 0x000000, "Member 'MercunaNavigationComponent_MercunaMoveComplete__DelegateSignature::RequestID' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_MercunaMoveComplete__DelegateSignature, Result) == 0x000004, "Member 'MercunaNavigationComponent_MercunaMoveComplete__DelegateSignature::Result' has a wrong offset!");

// Function Mercuna.MercunaNavigationComponent.MoveToActor
// 0x0018 (0x0018 - 0x0000)
struct MercunaNavigationComponent_MoveToActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePartialPath;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaNavigationComponent_MoveToActor) == 0x000008, "Wrong alignment on MercunaNavigationComponent_MoveToActor");
static_assert(sizeof(MercunaNavigationComponent_MoveToActor) == 0x000018, "Wrong size on MercunaNavigationComponent_MoveToActor");
static_assert(offsetof(MercunaNavigationComponent_MoveToActor, Actor) == 0x000000, "Member 'MercunaNavigationComponent_MoveToActor::Actor' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_MoveToActor, EndDistance) == 0x000008, "Member 'MercunaNavigationComponent_MoveToActor::EndDistance' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_MoveToActor, Speed) == 0x00000C, "Member 'MercunaNavigationComponent_MoveToActor::Speed' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_MoveToActor, UsePartialPath) == 0x000010, "Member 'MercunaNavigationComponent_MoveToActor::UsePartialPath' has a wrong offset!");

// Function Mercuna.MercunaNavigationComponent.MoveToLocation
// 0x0018 (0x0018 - 0x0000)
struct MercunaNavigationComponent_MoveToLocation final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePartialPath;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaNavigationComponent_MoveToLocation) == 0x000004, "Wrong alignment on MercunaNavigationComponent_MoveToLocation");
static_assert(sizeof(MercunaNavigationComponent_MoveToLocation) == 0x000018, "Wrong size on MercunaNavigationComponent_MoveToLocation");
static_assert(offsetof(MercunaNavigationComponent_MoveToLocation, Destination) == 0x000000, "Member 'MercunaNavigationComponent_MoveToLocation::Destination' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_MoveToLocation, EndDistance) == 0x00000C, "Member 'MercunaNavigationComponent_MoveToLocation::EndDistance' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_MoveToLocation, Speed) == 0x000010, "Member 'MercunaNavigationComponent_MoveToLocation::Speed' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_MoveToLocation, UsePartialPath) == 0x000014, "Member 'MercunaNavigationComponent_MoveToLocation::UsePartialPath' has a wrong offset!");

// Function Mercuna.MercunaNavigationComponent.SetAvoidanceAgainst
// 0x0010 (0x0010 - 0x0000)
struct MercunaNavigationComponent_SetAvoidanceAgainst final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaNavigationComponent_SetAvoidanceAgainst) == 0x000008, "Wrong alignment on MercunaNavigationComponent_SetAvoidanceAgainst");
static_assert(sizeof(MercunaNavigationComponent_SetAvoidanceAgainst) == 0x000010, "Wrong size on MercunaNavigationComponent_SetAvoidanceAgainst");
static_assert(offsetof(MercunaNavigationComponent_SetAvoidanceAgainst, Actor) == 0x000000, "Member 'MercunaNavigationComponent_SetAvoidanceAgainst::Actor' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_SetAvoidanceAgainst, Enable) == 0x000008, "Member 'MercunaNavigationComponent_SetAvoidanceAgainst::Enable' has a wrong offset!");

// Function Mercuna.MercunaNavigationComponent.TrackActor
// 0xD304 (0xD304 - 0x0000)
struct alignas(0xD304) MercunaNavigationComponent_TrackActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaNavigationComponent_TrackActor) == 0x00D304, "Wrong alignment on MercunaNavigationComponent_TrackActor");
static_assert(sizeof(MercunaNavigationComponent_TrackActor) == 0x00D304, "Wrong size on MercunaNavigationComponent_TrackActor");
static_assert(offsetof(MercunaNavigationComponent_TrackActor, Actor) == 0x000000, "Member 'MercunaNavigationComponent_TrackActor::Actor' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_TrackActor, Distance) == 0x000008, "Member 'MercunaNavigationComponent_TrackActor::Distance' has a wrong offset!");
static_assert(offsetof(MercunaNavigationComponent_TrackActor, Speed) == 0x00000C, "Member 'MercunaNavigationComponent_TrackActor::Speed' has a wrong offset!");

// Function Mercuna.MercunaMoveToProxy.MercunaMoveToActor
// 0x0030 (0x0030 - 0x0000)
struct MercunaMoveToProxy_MercunaMoveToActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePartialPath;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMercunaMoveToProxy*                    ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaMoveToProxy_MercunaMoveToActor) == 0x000008, "Wrong alignment on MercunaMoveToProxy_MercunaMoveToActor");
static_assert(sizeof(MercunaMoveToProxy_MercunaMoveToActor) == 0x000030, "Wrong size on MercunaMoveToProxy_MercunaMoveToActor");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToActor, WorldContextObject) == 0x000000, "Member 'MercunaMoveToProxy_MercunaMoveToActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToActor, Pawn) == 0x000008, "Member 'MercunaMoveToProxy_MercunaMoveToActor::Pawn' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToActor, Actor) == 0x000010, "Member 'MercunaMoveToProxy_MercunaMoveToActor::Actor' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToActor, EndDistance) == 0x000018, "Member 'MercunaMoveToProxy_MercunaMoveToActor::EndDistance' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToActor, Speed) == 0x00001C, "Member 'MercunaMoveToProxy_MercunaMoveToActor::Speed' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToActor, UsePartialPath) == 0x000020, "Member 'MercunaMoveToProxy_MercunaMoveToActor::UsePartialPath' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToActor, ReturnValue) == 0x000028, "Member 'MercunaMoveToProxy_MercunaMoveToActor::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaMoveToProxy.MercunaMoveToLocation
// 0x0030 (0x0030 - 0x0000)
struct MercunaMoveToProxy_MercunaMoveToLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePartialPath;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMercunaMoveToProxy*                    ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaMoveToProxy_MercunaMoveToLocation) == 0x000008, "Wrong alignment on MercunaMoveToProxy_MercunaMoveToLocation");
static_assert(sizeof(MercunaMoveToProxy_MercunaMoveToLocation) == 0x000030, "Wrong size on MercunaMoveToProxy_MercunaMoveToLocation");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToLocation, WorldContextObject) == 0x000000, "Member 'MercunaMoveToProxy_MercunaMoveToLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToLocation, Pawn) == 0x000008, "Member 'MercunaMoveToProxy_MercunaMoveToLocation::Pawn' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToLocation, Destination) == 0x000010, "Member 'MercunaMoveToProxy_MercunaMoveToLocation::Destination' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToLocation, EndDistance) == 0x00001C, "Member 'MercunaMoveToProxy_MercunaMoveToLocation::EndDistance' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToLocation, Speed) == 0x000020, "Member 'MercunaMoveToProxy_MercunaMoveToLocation::Speed' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToLocation, UsePartialPath) == 0x000024, "Member 'MercunaMoveToProxy_MercunaMoveToLocation::UsePartialPath' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_MercunaMoveToLocation, ReturnValue) == 0x000028, "Member 'MercunaMoveToProxy_MercunaMoveToLocation::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaMoveToProxy.OnMoveComplete
// 0x0008 (0x0008 - 0x0000)
struct MercunaMoveToProxy_OnMoveComplete final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EMercunaMoveResult                            Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaMoveToProxy_OnMoveComplete) == 0x000001, "Wrong alignment on MercunaMoveToProxy_OnMoveComplete");
static_assert(sizeof(MercunaMoveToProxy_OnMoveComplete) == 0x000008, "Wrong size on MercunaMoveToProxy_OnMoveComplete");
static_assert(offsetof(MercunaMoveToProxy_OnMoveComplete, RequestID) == 0x000000, "Member 'MercunaMoveToProxy_OnMoveComplete::RequestID' has a wrong offset!");
static_assert(offsetof(MercunaMoveToProxy_OnMoveComplete, Result) == 0x000004, "Member 'MercunaMoveToProxy_OnMoveComplete::Result' has a wrong offset!");

// Function Mercuna.MercunaTrackActorProxy.MercunaTrackActor
// 0x0028 (0x0028 - 0x0000)
struct MercunaTrackActorProxy_MercunaTrackActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMercunaTrackActorProxy*                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaTrackActorProxy_MercunaTrackActor) == 0x000008, "Wrong alignment on MercunaTrackActorProxy_MercunaTrackActor");
static_assert(sizeof(MercunaTrackActorProxy_MercunaTrackActor) == 0x000028, "Wrong size on MercunaTrackActorProxy_MercunaTrackActor");
static_assert(offsetof(MercunaTrackActorProxy_MercunaTrackActor, WorldContextObject) == 0x000000, "Member 'MercunaTrackActorProxy_MercunaTrackActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MercunaTrackActorProxy_MercunaTrackActor, Pawn) == 0x000008, "Member 'MercunaTrackActorProxy_MercunaTrackActor::Pawn' has a wrong offset!");
static_assert(offsetof(MercunaTrackActorProxy_MercunaTrackActor, Actor) == 0x000010, "Member 'MercunaTrackActorProxy_MercunaTrackActor::Actor' has a wrong offset!");
static_assert(offsetof(MercunaTrackActorProxy_MercunaTrackActor, Distance) == 0x000018, "Member 'MercunaTrackActorProxy_MercunaTrackActor::Distance' has a wrong offset!");
static_assert(offsetof(MercunaTrackActorProxy_MercunaTrackActor, Speed) == 0x00001C, "Member 'MercunaTrackActorProxy_MercunaTrackActor::Speed' has a wrong offset!");
static_assert(offsetof(MercunaTrackActorProxy_MercunaTrackActor, ReturnValue) == 0x000020, "Member 'MercunaTrackActorProxy_MercunaTrackActor::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaTrackActorProxy.OnMoveComplete
// 0x0008 (0x0008 - 0x0000)
struct MercunaTrackActorProxy_OnMoveComplete final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EMercunaMoveResult                            Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaTrackActorProxy_OnMoveComplete) == 0x000001, "Wrong alignment on MercunaTrackActorProxy_OnMoveComplete");
static_assert(sizeof(MercunaTrackActorProxy_OnMoveComplete) == 0x000008, "Wrong size on MercunaTrackActorProxy_OnMoveComplete");
static_assert(offsetof(MercunaTrackActorProxy_OnMoveComplete, RequestID) == 0x000000, "Member 'MercunaTrackActorProxy_OnMoveComplete::RequestID' has a wrong offset!");
static_assert(offsetof(MercunaTrackActorProxy_OnMoveComplete, Result) == 0x000004, "Member 'MercunaTrackActorProxy_OnMoveComplete::Result' has a wrong offset!");

// Function Mercuna.MercunaNavOctree.CheckReachable
// 0x0024 (0x0024 - 0x0000)
struct MercunaNavOctree_CheckReachable final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavigationRadius;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPathLength;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaNavOctree_CheckReachable) == 0x000004, "Wrong alignment on MercunaNavOctree_CheckReachable");
static_assert(sizeof(MercunaNavOctree_CheckReachable) == 0x000024, "Wrong size on MercunaNavOctree_CheckReachable");
static_assert(offsetof(MercunaNavOctree_CheckReachable, Start) == 0x000000, "Member 'MercunaNavOctree_CheckReachable::Start' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_CheckReachable, End) == 0x00000C, "Member 'MercunaNavOctree_CheckReachable::End' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_CheckReachable, NavigationRadius) == 0x000018, "Member 'MercunaNavOctree_CheckReachable::NavigationRadius' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_CheckReachable, MaxPathLength) == 0x00001C, "Member 'MercunaNavOctree_CheckReachable::MaxPathLength' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_CheckReachable, Result) == 0x000020, "Member 'MercunaNavOctree_CheckReachable::Result' has a wrong offset!");

// Function Mercuna.MercunaNavOctree.ClampToNavigable
// 0x0024 (0x0024 - 0x0000)
struct MercunaNavOctree_ClampToNavigable final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavigationRadius;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRadius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClampedPosition;                                   // 0x0014(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaNavOctree_ClampToNavigable) == 0x000004, "Wrong alignment on MercunaNavOctree_ClampToNavigable");
static_assert(sizeof(MercunaNavOctree_ClampToNavigable) == 0x000024, "Wrong size on MercunaNavOctree_ClampToNavigable");
static_assert(offsetof(MercunaNavOctree_ClampToNavigable, Position) == 0x000000, "Member 'MercunaNavOctree_ClampToNavigable::Position' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_ClampToNavigable, NavigationRadius) == 0x00000C, "Member 'MercunaNavOctree_ClampToNavigable::NavigationRadius' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_ClampToNavigable, SearchRadius) == 0x000010, "Member 'MercunaNavOctree_ClampToNavigable::SearchRadius' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_ClampToNavigable, ClampedPosition) == 0x000014, "Member 'MercunaNavOctree_ClampToNavigable::ClampedPosition' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_ClampToNavigable, Result) == 0x000020, "Member 'MercunaNavOctree_ClampToNavigable::Result' has a wrong offset!");

// Function Mercuna.MercunaNavOctree.FindPathToActor
// 0x0030 (0x0030 - 0x0000)
struct MercunaNavOctree_FindPathToActor final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 GoalActor;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavigationRadius;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowPartial;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxPathLength;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMercunaPath*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaNavOctree_FindPathToActor) == 0x000008, "Wrong alignment on MercunaNavOctree_FindPathToActor");
static_assert(sizeof(MercunaNavOctree_FindPathToActor) == 0x000030, "Wrong size on MercunaNavOctree_FindPathToActor");
static_assert(offsetof(MercunaNavOctree_FindPathToActor, Start) == 0x000000, "Member 'MercunaNavOctree_FindPathToActor::Start' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_FindPathToActor, GoalActor) == 0x000010, "Member 'MercunaNavOctree_FindPathToActor::GoalActor' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_FindPathToActor, NavigationRadius) == 0x000018, "Member 'MercunaNavOctree_FindPathToActor::NavigationRadius' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_FindPathToActor, AllowPartial) == 0x00001C, "Member 'MercunaNavOctree_FindPathToActor::AllowPartial' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_FindPathToActor, MaxPathLength) == 0x000020, "Member 'MercunaNavOctree_FindPathToActor::MaxPathLength' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_FindPathToActor, ReturnValue) == 0x000028, "Member 'MercunaNavOctree_FindPathToActor::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaNavOctree.FindPathToLocation
// 0x0030 (0x0030 - 0x0000)
struct MercunaNavOctree_FindPathToLocation final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavigationRadius;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowPartial;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxPathLength;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMercunaPath*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaNavOctree_FindPathToLocation) == 0x000008, "Wrong alignment on MercunaNavOctree_FindPathToLocation");
static_assert(sizeof(MercunaNavOctree_FindPathToLocation) == 0x000030, "Wrong size on MercunaNavOctree_FindPathToLocation");
static_assert(offsetof(MercunaNavOctree_FindPathToLocation, Start) == 0x000000, "Member 'MercunaNavOctree_FindPathToLocation::Start' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_FindPathToLocation, End) == 0x00000C, "Member 'MercunaNavOctree_FindPathToLocation::End' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_FindPathToLocation, NavigationRadius) == 0x000018, "Member 'MercunaNavOctree_FindPathToLocation::NavigationRadius' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_FindPathToLocation, AllowPartial) == 0x00001C, "Member 'MercunaNavOctree_FindPathToLocation::AllowPartial' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_FindPathToLocation, MaxPathLength) == 0x000020, "Member 'MercunaNavOctree_FindPathToLocation::MaxPathLength' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_FindPathToLocation, ReturnValue) == 0x000028, "Member 'MercunaNavOctree_FindPathToLocation::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaNavOctree.IsNavigable
// 0x0014 (0x0014 - 0x0000)
struct MercunaNavOctree_IsNavigable final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavigationRadius;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaNavOctree_IsNavigable) == 0x000004, "Wrong alignment on MercunaNavOctree_IsNavigable");
static_assert(sizeof(MercunaNavOctree_IsNavigable) == 0x000014, "Wrong size on MercunaNavOctree_IsNavigable");
static_assert(offsetof(MercunaNavOctree_IsNavigable, Position) == 0x000000, "Member 'MercunaNavOctree_IsNavigable::Position' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_IsNavigable, NavigationRadius) == 0x00000C, "Member 'MercunaNavOctree_IsNavigable::NavigationRadius' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_IsNavigable, Result) == 0x000010, "Member 'MercunaNavOctree_IsNavigable::Result' has a wrong offset!");

// Function Mercuna.MercunaNavOctree.IsNavigableMulti
// 0x0028 (0x0028 - 0x0000)
struct MercunaNavOctree_IsNavigableMulti final
{
public:
	TArray<struct FVector>                        Positions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         NavigationRadius;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  Results;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaNavOctree_IsNavigableMulti) == 0x000008, "Wrong alignment on MercunaNavOctree_IsNavigableMulti");
static_assert(sizeof(MercunaNavOctree_IsNavigableMulti) == 0x000028, "Wrong size on MercunaNavOctree_IsNavigableMulti");
static_assert(offsetof(MercunaNavOctree_IsNavigableMulti, Positions) == 0x000000, "Member 'MercunaNavOctree_IsNavigableMulti::Positions' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_IsNavigableMulti, NavigationRadius) == 0x000010, "Member 'MercunaNavOctree_IsNavigableMulti::NavigationRadius' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_IsNavigableMulti, Results) == 0x000018, "Member 'MercunaNavOctree_IsNavigableMulti::Results' has a wrong offset!");

// Function Mercuna.MercunaNavOctree.Raycast
// 0x002C (0x002C - 0x0000)
struct MercunaNavOctree_Raycast final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavigationRadius;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitPosition;                                       // 0x001C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RayHit;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaNavOctree_Raycast) == 0x000004, "Wrong alignment on MercunaNavOctree_Raycast");
static_assert(sizeof(MercunaNavOctree_Raycast) == 0x00002C, "Wrong size on MercunaNavOctree_Raycast");
static_assert(offsetof(MercunaNavOctree_Raycast, Start) == 0x000000, "Member 'MercunaNavOctree_Raycast::Start' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_Raycast, End) == 0x00000C, "Member 'MercunaNavOctree_Raycast::End' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_Raycast, NavigationRadius) == 0x000018, "Member 'MercunaNavOctree_Raycast::NavigationRadius' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_Raycast, HitPosition) == 0x00001C, "Member 'MercunaNavOctree_Raycast::HitPosition' has a wrong offset!");
static_assert(offsetof(MercunaNavOctree_Raycast, RayHit) == 0x000028, "Member 'MercunaNavOctree_Raycast::RayHit' has a wrong offset!");

// Function Mercuna.MercunaNavTestingActor.OnPathUpdate
// 0x0001 (0x0001 - 0x0000)
struct MercunaNavTestingActor_OnPathUpdate final
{
public:
	EMercunaPathEvent                             PathEvent;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaNavTestingActor_OnPathUpdate) == 0x000001, "Wrong alignment on MercunaNavTestingActor_OnPathUpdate");
static_assert(sizeof(MercunaNavTestingActor_OnPathUpdate) == 0x000001, "Wrong size on MercunaNavTestingActor_OnPathUpdate");
static_assert(offsetof(MercunaNavTestingActor_OnPathUpdate, PathEvent) == 0x000000, "Member 'MercunaNavTestingActor_OnPathUpdate::PathEvent' has a wrong offset!");

// Function Mercuna.MercunaClampToNavigableProxy.MercunaClampToNavigable
// 0x0028 (0x0028 - 0x0000)
struct MercunaClampToNavigableProxy_MercunaClampToNavigable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavigationRadius;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRadius;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMercunaClampToNavigableProxy*          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaClampToNavigableProxy_MercunaClampToNavigable) == 0x000008, "Wrong alignment on MercunaClampToNavigableProxy_MercunaClampToNavigable");
static_assert(sizeof(MercunaClampToNavigableProxy_MercunaClampToNavigable) == 0x000028, "Wrong size on MercunaClampToNavigableProxy_MercunaClampToNavigable");
static_assert(offsetof(MercunaClampToNavigableProxy_MercunaClampToNavigable, WorldContextObject) == 0x000000, "Member 'MercunaClampToNavigableProxy_MercunaClampToNavigable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MercunaClampToNavigableProxy_MercunaClampToNavigable, Position) == 0x000008, "Member 'MercunaClampToNavigableProxy_MercunaClampToNavigable::Position' has a wrong offset!");
static_assert(offsetof(MercunaClampToNavigableProxy_MercunaClampToNavigable, NavigationRadius) == 0x000014, "Member 'MercunaClampToNavigableProxy_MercunaClampToNavigable::NavigationRadius' has a wrong offset!");
static_assert(offsetof(MercunaClampToNavigableProxy_MercunaClampToNavigable, SearchRadius) == 0x000018, "Member 'MercunaClampToNavigableProxy_MercunaClampToNavigable::SearchRadius' has a wrong offset!");
static_assert(offsetof(MercunaClampToNavigableProxy_MercunaClampToNavigable, ReturnValue) == 0x000020, "Member 'MercunaClampToNavigableProxy_MercunaClampToNavigable::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaRaycastProxy.MercunaRaycast
// 0x0030 (0x0030 - 0x0000)
struct MercunaRaycastProxy_MercunaRaycast final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavigationRadius;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMercunaRaycastProxy*                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaRaycastProxy_MercunaRaycast) == 0x000008, "Wrong alignment on MercunaRaycastProxy_MercunaRaycast");
static_assert(sizeof(MercunaRaycastProxy_MercunaRaycast) == 0x000030, "Wrong size on MercunaRaycastProxy_MercunaRaycast");
static_assert(offsetof(MercunaRaycastProxy_MercunaRaycast, WorldContextObject) == 0x000000, "Member 'MercunaRaycastProxy_MercunaRaycast::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MercunaRaycastProxy_MercunaRaycast, Start) == 0x000008, "Member 'MercunaRaycastProxy_MercunaRaycast::Start' has a wrong offset!");
static_assert(offsetof(MercunaRaycastProxy_MercunaRaycast, End) == 0x000014, "Member 'MercunaRaycastProxy_MercunaRaycast::End' has a wrong offset!");
static_assert(offsetof(MercunaRaycastProxy_MercunaRaycast, NavigationRadius) == 0x000020, "Member 'MercunaRaycastProxy_MercunaRaycast::NavigationRadius' has a wrong offset!");
static_assert(offsetof(MercunaRaycastProxy_MercunaRaycast, ReturnValue) == 0x000028, "Member 'MercunaRaycastProxy_MercunaRaycast::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaPath.GetNumPoints
// 0xAC1D (0xAC1D - 0x0000)
struct alignas(0xAC1D) MercunaPath_GetNumPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaPath_GetNumPoints) == 0x00AC1D, "Wrong alignment on MercunaPath_GetNumPoints");
static_assert(sizeof(MercunaPath_GetNumPoints) == 0x00AC1D, "Wrong size on MercunaPath_GetNumPoints");
static_assert(offsetof(MercunaPath_GetNumPoints, ReturnValue) == 0x000000, "Member 'MercunaPath_GetNumPoints::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaPath.GetPathLength
// 0xC468 (0xC468 - 0x0000)
struct alignas(0xC468) MercunaPath_GetPathLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaPath_GetPathLength) == 0x00C468, "Wrong alignment on MercunaPath_GetPathLength");
static_assert(sizeof(MercunaPath_GetPathLength) == 0x00C468, "Wrong size on MercunaPath_GetPathLength");
static_assert(offsetof(MercunaPath_GetPathLength, ReturnValue) == 0x000000, "Member 'MercunaPath_GetPathLength::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaPath.GetPoint
// 0x0010 (0x0010 - 0x0000)
struct MercunaPath_GetPoint final
{
public:
	int32                                         I;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaPath_GetPoint) == 0x000004, "Wrong alignment on MercunaPath_GetPoint");
static_assert(sizeof(MercunaPath_GetPoint) == 0x000010, "Wrong size on MercunaPath_GetPoint");
static_assert(offsetof(MercunaPath_GetPoint, I) == 0x000000, "Member 'MercunaPath_GetPoint::I' has a wrong offset!");
static_assert(offsetof(MercunaPath_GetPoint, ReturnValue) == 0x000004, "Member 'MercunaPath_GetPoint::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaPath.IsPartial
// 0x0001 (0x0001 - 0x0000)
struct MercunaPath_IsPartial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaPath_IsPartial) == 0x000001, "Wrong alignment on MercunaPath_IsPartial");
static_assert(sizeof(MercunaPath_IsPartial) == 0x000001, "Wrong size on MercunaPath_IsPartial");
static_assert(offsetof(MercunaPath_IsPartial, ReturnValue) == 0x000000, "Member 'MercunaPath_IsPartial::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaPath.IsReady
// 0x0001 (0x0001 - 0x0000)
struct MercunaPath_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaPath_IsReady) == 0x000001, "Wrong alignment on MercunaPath_IsReady");
static_assert(sizeof(MercunaPath_IsReady) == 0x000001, "Wrong size on MercunaPath_IsReady");
static_assert(offsetof(MercunaPath_IsReady, ReturnValue) == 0x000000, "Member 'MercunaPath_IsReady::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaPath.IsValid
// 0x0001 (0x0001 - 0x0000)
struct MercunaPath_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaPath_IsValid) == 0x000001, "Wrong alignment on MercunaPath_IsValid");
static_assert(sizeof(MercunaPath_IsValid) == 0x000001, "Wrong size on MercunaPath_IsValid");
static_assert(offsetof(MercunaPath_IsValid, ReturnValue) == 0x000000, "Member 'MercunaPath_IsValid::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaTask_MoveTo.MercunaMoveTo
// 0x0030 (0x0030 - 0x0000)
struct MercunaTask_MoveTo_MercunaMoveTo final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GoalLocation;                                      // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 GoalActor;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptPartialPath;                                 // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockAILogic;                                      // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMercunaTask_MoveTo*                    ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MercunaTask_MoveTo_MercunaMoveTo) == 0x000008, "Wrong alignment on MercunaTask_MoveTo_MercunaMoveTo");
static_assert(sizeof(MercunaTask_MoveTo_MercunaMoveTo) == 0x000030, "Wrong size on MercunaTask_MoveTo_MercunaMoveTo");
static_assert(offsetof(MercunaTask_MoveTo_MercunaMoveTo, Controller) == 0x000000, "Member 'MercunaTask_MoveTo_MercunaMoveTo::Controller' has a wrong offset!");
static_assert(offsetof(MercunaTask_MoveTo_MercunaMoveTo, GoalLocation) == 0x000008, "Member 'MercunaTask_MoveTo_MercunaMoveTo::GoalLocation' has a wrong offset!");
static_assert(offsetof(MercunaTask_MoveTo_MercunaMoveTo, GoalActor) == 0x000018, "Member 'MercunaTask_MoveTo_MercunaMoveTo::GoalActor' has a wrong offset!");
static_assert(offsetof(MercunaTask_MoveTo_MercunaMoveTo, EndDistance) == 0x000020, "Member 'MercunaTask_MoveTo_MercunaMoveTo::EndDistance' has a wrong offset!");
static_assert(offsetof(MercunaTask_MoveTo_MercunaMoveTo, AcceptPartialPath) == 0x000024, "Member 'MercunaTask_MoveTo_MercunaMoveTo::AcceptPartialPath' has a wrong offset!");
static_assert(offsetof(MercunaTask_MoveTo_MercunaMoveTo, bLockAILogic) == 0x000025, "Member 'MercunaTask_MoveTo_MercunaMoveTo::bLockAILogic' has a wrong offset!");
static_assert(offsetof(MercunaTask_MoveTo_MercunaMoveTo, ReturnValue) == 0x000028, "Member 'MercunaTask_MoveTo_MercunaMoveTo::ReturnValue' has a wrong offset!");

// Function Mercuna.MercunaTask_MoveTo.OnMoveComplete
// 0x0008 (0x0008 - 0x0000)
struct MercunaTask_MoveTo_OnMoveComplete final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EMercunaMoveResult                            Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MercunaTask_MoveTo_OnMoveComplete) == 0x000001, "Wrong alignment on MercunaTask_MoveTo_OnMoveComplete");
static_assert(sizeof(MercunaTask_MoveTo_OnMoveComplete) == 0x000008, "Wrong size on MercunaTask_MoveTo_OnMoveComplete");
static_assert(offsetof(MercunaTask_MoveTo_OnMoveComplete, RequestID) == 0x000000, "Member 'MercunaTask_MoveTo_OnMoveComplete::RequestID' has a wrong offset!");
static_assert(offsetof(MercunaTask_MoveTo_OnMoveComplete, Result) == 0x000004, "Member 'MercunaTask_MoveTo_OnMoveComplete::Result' has a wrong offset!");

}

