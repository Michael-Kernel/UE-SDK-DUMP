#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieSceneCapture

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum MovieSceneCapture.EHDRCaptureGamut
// NumValues: 0x0006
enum class EHDRCaptureGamut : uint8
{
	HCGM_Rec709                              = 0,
	HCGM_P3DCI                               = 1,
	HCGM_Rec2020                             = 2,
	HCGM_ACES                                = 3,
	HCGM_ACEScg                              = 4,
	HCGM_MAX                                 = 5,
};

// Enum MovieSceneCapture.ESqexAudioCaptureMode
// NumValues: 0x0004
enum class ESqexAudioCaptureMode : uint8
{
	VOICE_BG                                 = 0,
	FOOT_CLOTH                               = 1,
	OTHERS                                   = 2,
	ESqexAudioCaptureMode_MAX                = 3,
};

// Enum MovieSceneCapture.ESqexMaskDrawMode
// NumValues: 0x0007
enum class ESqexMaskDrawMode : uint8
{
	None                                     = 0,
	Depth                                    = 1,
	CharaMask                                = 2,
	Normal                                   = 3,
	DetailLight                              = 4,
	AO                                       = 5,
	ESqexMaskDrawMode_MAX                    = 6,
};

// ScriptStruct MovieSceneCapture.CompositionGraphCapturePasses
// 0x0010 (0x0010 - 0x0000)
struct FCompositionGraphCapturePasses final
{
public:
	TArray<class FString>                         Value;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompositionGraphCapturePasses) == 0x000008, "Wrong alignment on FCompositionGraphCapturePasses");
static_assert(sizeof(FCompositionGraphCapturePasses) == 0x000010, "Wrong size on FCompositionGraphCapturePasses");
static_assert(offsetof(FCompositionGraphCapturePasses, Value) == 0x000000, "Member 'FCompositionGraphCapturePasses::Value' has a wrong offset!");

// ScriptStruct MovieSceneCapture.CaptureResolution
// 0x115F0450 (0x115F0450 - 0x0000)
struct alignas(0x115F0450) FCaptureResolution final
{
public:
	uint32                                        ResX;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ResY;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCaptureResolution) == 0x115F0450, "Wrong alignment on FCaptureResolution");
static_assert(sizeof(FCaptureResolution) == 0x115F0450, "Wrong size on FCaptureResolution");
static_assert(offsetof(FCaptureResolution, ResX) == 0x000000, "Member 'FCaptureResolution::ResX' has a wrong offset!");
static_assert(offsetof(FCaptureResolution, ResY) == 0x000004, "Member 'FCaptureResolution::ResY' has a wrong offset!");

// ScriptStruct MovieSceneCapture.CaptureProtocolID
// 0x0008 (0x0008 - 0x0000)
struct FCaptureProtocolID final
{
public:
	class FName                                   Identifier;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCaptureProtocolID) == 0x000004, "Wrong alignment on FCaptureProtocolID");
static_assert(sizeof(FCaptureProtocolID) == 0x000008, "Wrong size on FCaptureProtocolID");
static_assert(offsetof(FCaptureProtocolID, Identifier) == 0x000000, "Member 'FCaptureProtocolID::Identifier' has a wrong offset!");

// ScriptStruct MovieSceneCapture.MovieSceneCaptureSettings
// 0x115F0450 (0x115F0450 - 0x0000)
struct FMovieSceneCaptureSettings final
{
public:
	struct FDirectoryPath                         OutputDirectory;                                   // 0x0000(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bCreateTemporaryCopiesOfLevels;                    // 0x0010(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGameModeBase>              GameModeOverride;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputFormat;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwriteExisting;                                // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRelativeFrameNumbers;                          // 0x0031(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HandleFrames;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ZeroPadFrameNumbers;                               // 0x0038(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrameRate;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCaptureResolution                     Resolution;                                        // 0x0040(0x115F0450)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableTextureStreaming;                           // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicEngineScalability;                       // 0x0049(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicMode;                                    // 0x004A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMovement;                                    // 0x004B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTurning;                                     // 0x004C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPlayer;                                       // 0x004D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHUD;                                          // 0x004E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_DisableMatineeFade;                              // 0x004F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_DisableMapJumpFade;                              // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_DisableSubtitle;                                 // 0x0051(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_AllowOcclusionQueries;                           // 0x0052(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_ShowCaptureDebugInfo;                            // 0x0053(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_RegardTimeDilation;                              // 0x0054(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexExportVisualizeTextures;                       // 0x0055(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexExportSceneColor;                              // 0x0056(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexExportSSAO;                                    // 0x0057(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexExportDepth;                                   // 0x0058(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexExportCharaMask;                               // 0x0059(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexExportLight;                                   // 0x005A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexExportWorldPos;                                // 0x005B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexExportNormal;                                  // 0x005C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexExportEXRFileMode;                             // 0x005D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexExportMovie;                                   // 0x005E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SqexResolutionScale;                               // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SqexCaptureName;                                   // 0x0068(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SqexUseAudioCapture;                               // 0x0078(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESqexAudioCaptureMode                         SqexAudioCaputreMode;                              // 0x0079(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneCaptureSettings) == 0x115F0450, "Wrong alignment on FMovieSceneCaptureSettings");
static_assert(sizeof(FMovieSceneCaptureSettings) == 0x115F0450, "Wrong size on FMovieSceneCaptureSettings");
static_assert(offsetof(FMovieSceneCaptureSettings, OutputDirectory) == 0x000000, "Member 'FMovieSceneCaptureSettings::OutputDirectory' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bCreateTemporaryCopiesOfLevels) == 0x000010, "Member 'FMovieSceneCaptureSettings::bCreateTemporaryCopiesOfLevels' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, GameModeOverride) == 0x000018, "Member 'FMovieSceneCaptureSettings::GameModeOverride' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, OutputFormat) == 0x000020, "Member 'FMovieSceneCaptureSettings::OutputFormat' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bOverwriteExisting) == 0x000030, "Member 'FMovieSceneCaptureSettings::bOverwriteExisting' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bUseRelativeFrameNumbers) == 0x000031, "Member 'FMovieSceneCaptureSettings::bUseRelativeFrameNumbers' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, HandleFrames) == 0x000034, "Member 'FMovieSceneCaptureSettings::HandleFrames' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, ZeroPadFrameNumbers) == 0x000038, "Member 'FMovieSceneCaptureSettings::ZeroPadFrameNumbers' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, FrameRate) == 0x00003C, "Member 'FMovieSceneCaptureSettings::FrameRate' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, Resolution) == 0x000040, "Member 'FMovieSceneCaptureSettings::Resolution' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bEnableTextureStreaming) == 0x000048, "Member 'FMovieSceneCaptureSettings::bEnableTextureStreaming' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bCinematicEngineScalability) == 0x000049, "Member 'FMovieSceneCaptureSettings::bCinematicEngineScalability' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bCinematicMode) == 0x00004A, "Member 'FMovieSceneCaptureSettings::bCinematicMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bAllowMovement) == 0x00004B, "Member 'FMovieSceneCaptureSettings::bAllowMovement' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bAllowTurning) == 0x00004C, "Member 'FMovieSceneCaptureSettings::bAllowTurning' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bShowPlayer) == 0x00004D, "Member 'FMovieSceneCaptureSettings::bShowPlayer' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bShowHUD) == 0x00004E, "Member 'FMovieSceneCaptureSettings::bShowHUD' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, M_DisableMatineeFade) == 0x00004F, "Member 'FMovieSceneCaptureSettings::M_DisableMatineeFade' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, M_DisableMapJumpFade) == 0x000050, "Member 'FMovieSceneCaptureSettings::M_DisableMapJumpFade' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, M_DisableSubtitle) == 0x000051, "Member 'FMovieSceneCaptureSettings::M_DisableSubtitle' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, M_AllowOcclusionQueries) == 0x000052, "Member 'FMovieSceneCaptureSettings::M_AllowOcclusionQueries' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, M_ShowCaptureDebugInfo) == 0x000053, "Member 'FMovieSceneCaptureSettings::M_ShowCaptureDebugInfo' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, M_RegardTimeDilation) == 0x000054, "Member 'FMovieSceneCaptureSettings::M_RegardTimeDilation' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexExportVisualizeTextures) == 0x000055, "Member 'FMovieSceneCaptureSettings::SqexExportVisualizeTextures' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexExportSceneColor) == 0x000056, "Member 'FMovieSceneCaptureSettings::SqexExportSceneColor' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexExportSSAO) == 0x000057, "Member 'FMovieSceneCaptureSettings::SqexExportSSAO' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexExportDepth) == 0x000058, "Member 'FMovieSceneCaptureSettings::SqexExportDepth' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexExportCharaMask) == 0x000059, "Member 'FMovieSceneCaptureSettings::SqexExportCharaMask' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexExportLight) == 0x00005A, "Member 'FMovieSceneCaptureSettings::SqexExportLight' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexExportWorldPos) == 0x00005B, "Member 'FMovieSceneCaptureSettings::SqexExportWorldPos' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexExportNormal) == 0x00005C, "Member 'FMovieSceneCaptureSettings::SqexExportNormal' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexExportEXRFileMode) == 0x00005D, "Member 'FMovieSceneCaptureSettings::SqexExportEXRFileMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexExportMovie) == 0x00005E, "Member 'FMovieSceneCaptureSettings::SqexExportMovie' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexResolutionScale) == 0x000060, "Member 'FMovieSceneCaptureSettings::SqexResolutionScale' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexCaptureName) == 0x000068, "Member 'FMovieSceneCaptureSettings::SqexCaptureName' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexUseAudioCapture) == 0x000078, "Member 'FMovieSceneCaptureSettings::SqexUseAudioCapture' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, SqexAudioCaputreMode) == 0x000079, "Member 'FMovieSceneCaptureSettings::SqexAudioCaputreMode' has a wrong offset!");

}

