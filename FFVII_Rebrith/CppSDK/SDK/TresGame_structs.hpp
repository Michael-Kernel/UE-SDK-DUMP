#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TresGame

#include "Basic.hpp"

#include "Renderer_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "AnimationCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "BonamikRt_structs.hpp"


namespace SDK
{

// Enum TresGame.ETresProjectileHomingType
// NumValues: 0x0005
enum class ETresProjectileHomingType : uint8
{
	NORMAL                                   = 0,
	IGNORE_Z                                 = 1,
	PITCH_YAW                                = 2,
	_MAX                                     = 3,
	ETresProjectileHomingType_MAX            = 4,
};

// Enum TresGame.ETresSavePointDispType
// NumValues: 0x0005
enum class ETresSavePointDispType : uint8
{
	NORMAL                                   = 0,
	DISABLE                                  = 1,
	DESTROY                                  = 2,
	_MAX                                     = 3,
	ETresSavePointDispType_MAX               = 4,
};

// Enum TresGame.ETresCommandKind
// NumValues: 0x0100
enum class ETresCommandKind : uint8
{
	TRES_CMD_KIND_NONE                       = 0,
	TRES_CMD_KIND_REFLECTGUARD               = 1,
	TRES_CMD_KIND_BLOWCOUNTER                = 2,
	TRES_CMD_KIND_REVENGESLASH               = 3,
	TRES_CMD_KIND_REVENGEIMPACT              = 4,
	TRES_CMD_KIND_REVENGEDIVE                = 5,
	TRES_CMD_KIND_BARRIERCRACKER             = 6,
	TRES_CMD_KIND_HOOKUPPER                  = 7,
	TRES_CMD_KIND_BACKRAID                   = 8,
	TRES_CMD_KIND_BACKRUSH                   = 9,
	TRES_CMD_KIND_WARPSLASH                  = 10,
	TRES_CMD_KIND_DIVEATTACK                 = 11,
	TRES_CMD_KIND_REVENGESLASH2              = 12,
	TRES_CMD_KIND_ANTIRAID                   = 13,
	TRES_CMD_KIND_SHIELDBURST                = 14,
	TRES_CMD_KIND_BLADECOUNTER               = 15,
	TRES_CMD_KIND_SHIELDCOUNTER              = 16,
	TRES_CMD_KIND_SHIELDCOUNTER2             = 17,
	TRES_CMD_KIND_SHIELDCOUNTER3             = 18,
	TRES_CMD_KIND_SHIELDCOUNTER4             = 19,
	TRES_CMD_KIND_IKAZUCHI                   = 20,
	TRES_CMD_KIND_SNEEZE                     = 21,
	TRES_CMD_KIND_FR_DONALD                  = 22,
	TRES_CMD_KIND_FR_DONALD2                 = 23,
	TRES_CMD_KIND_FR_DONALD3                 = 24,
	TRES_CMD_KIND_FR_GOOFY                   = 25,
	TRES_CMD_KIND_FR_GOOFY2                  = 26,
	TRES_CMD_KIND_ATTACK                     = 27,
	TRES_CMD_KIND_MAGIC                      = 28,
	TRES_CMD_KIND_FIRE                       = 29,
	TRES_CMD_KIND_FIRA                       = 30,
	TRES_CMD_KIND_FIRAGA                     = 31,
	TRES_CMD_KIND_FIRAGAN                    = 32,
	TRES_CMD_KIND_BLIZZARD                   = 33,
	TRES_CMD_KIND_BLIZZARA                   = 34,
	TRES_CMD_KIND_BLIZZAGA                   = 35,
	TRES_CMD_KIND_BLIZZAGAN                  = 36,
	TRES_CMD_KIND_THUNDER                    = 37,
	TRES_CMD_KIND_THUNDARA                   = 38,
	TRES_CMD_KIND_THUNDAGA                   = 39,
	TRES_CMD_KIND_THUNDAGAN                  = 40,
	TRES_CMD_KIND_WATER                      = 41,
	TRES_CMD_KIND_WATARA                     = 42,
	TRES_CMD_KIND_WATAGA                     = 43,
	TRES_CMD_KIND_WATAGAN                    = 44,
	TRES_CMD_KIND_AERO                       = 45,
	TRES_CMD_KIND_AERORA                     = 46,
	TRES_CMD_KIND_AEROGA                     = 47,
	TRES_CMD_KIND_AEROGAN                    = 48,
	TRES_CMD_KIND_CURE                       = 49,
	TRES_CMD_KIND_CURA                       = 50,
	TRES_CMD_KIND_CURAGA                     = 51,
	TRES_CMD_KIND_HOLY                       = 52,
	TRES_CMD_KIND_WATERFIRE                  = 53,
	TRES_CMD_KIND_WATERBLIZZARD              = 54,
	TRES_CMD_KIND_WATERTHUNDER               = 55,
	TRES_CMD_KIND_WATERAERO                  = 56,
	TRES_CMD_KIND_ITEM                       = 57,
	TRES_CMD_KIND_POTION                     = 58,
	TRES_CMD_KIND_HIPOTION                   = 59,
	TRES_CMD_KIND_MEGAPOTION                 = 60,
	TRES_CMD_KIND_ETHER                      = 61,
	TRES_CMD_KIND_HIETHER                    = 62,
	TRES_CMD_KIND_MEGAETHER                  = 63,
	TRES_CMD_KIND_ELIXIR                     = 64,
	TRES_CMD_KIND_LASTELIXIR                 = 65,
	TRES_CMD_KIND_FOCUSSUPPLEMENT            = 66,
	TRES_CMD_KIND_HIFOCUSSUPPLEMENT          = 67,
	TRES_CMD_KIND_ALLCURE                    = 68,
	TRES_CMD_KIND_DM                         = 69,
	TRES_CMD_KIND_DM_WANDANYAN               = 70,
	TRES_CMD_KIND_DM_RALPH                   = 71,
	TRES_CMD_KIND_DM_SIMBA                   = 72,
	TRES_CMD_KIND_DM_STITCH                  = 73,
	TRES_CMD_KIND_DM_ARIEL                   = 74,
	TRES_CMD_KIND_DM_FINISH                  = 75,
	TRES_CMD_KIND_SAVE                       = 76,
	TRES_CMD_KIND_TALK                       = 77,
	TRES_CMD_KIND_OPEN                       = 78,
	TRES_CMD_KIND_CHECK                      = 79,
	TRES_CMD_KIND_SHOP                       = 80,
	TRES_CMD_KIND_RESCUE                     = 81,
	TRES_CMD_KIND_VEHICLE                    = 82,
	TRES_CMD_KIND_SHIP                       = 83,
	TRES_CMD_KIND_PLANE                      = 84,
	TRES_CMD_KIND_GETOFF                     = 85,
	TRES_CMD_KIND_GIGAS_ELECTRO              = 86,
	TRES_CMD_KIND_RAIL                       = 87,
	TRES_CMD_KIND_PLANEBOSS                  = 88,
	TRES_CMD_KIND_SLIDESHOT                  = 89,
	TRES_CMD_KIND_COVERSLIDE                 = 90,
	TRES_CMD_KIND_TRICK                      = 91,
	TRES_CMD_KIND_WATERPLAY                  = 92,
	TRES_CMD_KIND_EXTENDHAND                 = 93,
	TRES_CMD_KIND_ENEMYSHIP                  = 94,
	TRES_CMD_KIND_SPECIALSHIP_RAGINGCANNON   = 95,
	TRES_CMD_KIND_SPECIALSHIP_WINDCHASER     = 96,
	TRES_CMD_KIND_SPECIALSHIP_TIDALWAVE      = 97,
	TRES_CMD_KIND_SPECIALSHIP_DASH           = 98,
	TRES_CMD_KIND_SWING                      = 99,
	TRES_CMD_KIND_PUDDING                    = 100,
	TRES_CMD_KIND_CHARGEBERSERK              = 101,
	TRES_CMD_KIND_POSTCARD                   = 102,
	TRES_CMD_KIND_ANS_ENDURE                 = 103,
	TRES_CMD_KIND_ANS_CHALLENGE              = 104,
	TRES_CMD_KIND_ANS_MIXING                 = 105,
	TRES_CMD_KIND_ANS_BUMPING                = 106,
	TRES_CMD_KIND_ANS_BELIEVE                = 107,
	TRES_CMD_KIND_ANS_ACCEPT                 = 108,
	TRES_CMD_KIND_FINISH_AN2                 = 109,
	TRES_CMD_KIND_S_FIRA                     = 110,
	TRES_CMD_KIND_S_FIRAGA                   = 111,
	TRES_CMD_KIND_S_FIRAGAN                  = 112,
	TRES_CMD_KIND_S_BLIZZARA                 = 113,
	TRES_CMD_KIND_S_BLIZZAGA                 = 114,
	TRES_CMD_KIND_S_BLIZZAGAN                = 115,
	TRES_CMD_KIND_S_THUNDARA                 = 116,
	TRES_CMD_KIND_S_THUNDAGA                 = 117,
	TRES_CMD_KIND_S_THUNDAGAN                = 118,
	TRES_CMD_KIND_S_WATARA                   = 119,
	TRES_CMD_KIND_S_WATAGA                   = 120,
	TRES_CMD_KIND_S_WATAGAN                  = 121,
	TRES_CMD_KIND_S_AERORA                   = 122,
	TRES_CMD_KIND_S_AEROGA                   = 123,
	TRES_CMD_KIND_S_AEROGAN                  = 124,
	TRES_CMD_KIND_S_CURAGAN                  = 125,
	TRES_CMD_KIND_S_DARKFIRAGA               = 126,
	TRES_CMD_KIND_CHANGE_KB                  = 127,
	TRES_CMD_KIND_CHANGE_DW                  = 128,
	TRES_CMD_KIND_CHANGE_HM                  = 129,
	TRES_CMD_KIND_CHANGE_YO                  = 130,
	TRES_CMD_KIND_CHANGE_BZ                  = 131,
	TRES_CMD_KIND_CHANGE_DR                  = 132,
	TRES_CMD_KIND_CHANGE_SK                  = 133,
	TRES_CMD_KIND_CHANGE_GM                  = 134,
	TRES_CMD_KIND_CHANGE_SW                  = 135,
	TRES_CMD_KIND_CHANGE_WA                  = 136,
	TRES_CMD_KIND_CHANGE_SH                  = 137,
	TRES_CMD_KIND_CHANGE_CL                  = 138,
	TRES_CMD_KIND_CHANGE_AN                  = 139,
	TRES_CMD_KIND_CHANGE_HL                  = 140,
	TRES_CMD_KIND_CHANGE_FL                  = 141,
	TRES_CMD_KIND_CHANGE_DW2                 = 142,
	TRES_CMD_KIND_CHANGE_BZ2                 = 143,
	TRES_CMD_KIND_CHANGE_CL2                 = 144,
	TRES_CMD_KIND_CHANGE_SH2                 = 145,
	TRES_CMD_KIND_CHANGE_HM2                 = 146,
	TRES_CMD_KIND_CHANGE_DR2                 = 147,
	TRES_CMD_KIND_CHANGE_L1                  = 148,
	TRES_CMD_KIND_CHANGE_L2                  = 149,
	TRES_CMD_KIND_CHANGE_L3                  = 150,
	TRES_CMD_KIND_CHANGE_L4                  = 151,
	TRES_CMD_KIND_CHANGE_L5                  = 152,
	TRES_CMD_KIND_CHANGE_A1                  = 153,
	TRES_CMD_KIND_CHANGE_A2                  = 154,
	TRES_CMD_KIND_FINISH                     = 155,
	TRES_CMD_KIND_FINISH_YO                  = 156,
	TRES_CMD_KIND_FINISH_BZ                  = 157,
	TRES_CMD_KIND_FINISH_DR                  = 158,
	TRES_CMD_KIND_FINISH_SK                  = 159,
	TRES_CMD_KIND_FINISH_GM                  = 160,
	TRES_CMD_KIND_FINISH_SW                  = 161,
	TRES_CMD_KIND_FINISH_WA                  = 162,
	TRES_CMD_KIND_FINISH_SH                  = 163,
	TRES_CMD_KIND_FINISH_CL                  = 164,
	TRES_CMD_KIND_FINISH_AN                  = 165,
	TRES_CMD_KIND_FINISH_FL                  = 166,
	TRES_CMD_KIND_FINISH_AQ                  = 167,
	TRES_CMD_KIND_FINISH_A2                  = 168,
	TRES_CMD_KIND_FINISH_RI                  = 169,
	TRES_CMD_KIND_SHEX_THUNDER               = 170,
	TRES_CMD_KIND_LM_STUNIMPACT              = 171,
	TRES_CMD_KIND_LM_SONICRAVE               = 172,
	TRES_CMD_KIND_LM_LASTARCANUM             = 173,
	TRES_CMD_KIND_LM_UNIONDISCODE            = 174,
	TRES_CMD_KIND_LMEX_RAVE                  = 175,
	TRES_CMD_KIND_LMEX_FINISH                = 176,
	TRES_CMD_KIND_LMEX_BREAK                 = 177,
	TRES_CMD_KIND_LMEX_THEEND                = 178,
	TRES_CMD_KIND_RISKCHARGE                 = 179,
	TRES_CMD_KIND_FINISH_UNIONX              = 180,
	TRES_CMD_KIND_FINISH_UX1                 = 181,
	TRES_CMD_KIND_FINISH_UX2                 = 182,
	TRES_CMD_KIND_FINISH_UX3                 = 183,
	TRES_CMD_KIND_FINISH_UX4                 = 184,
	TRES_CMD_KIND_FINISH_UX5                 = 185,
	TRES_CMD_KIND_AF_JETCOASTER_BM           = 186,
	TRES_CMD_KIND_AF_VIKINGSHIP              = 187,
	TRES_CMD_KIND_AF_TEACUP                  = 188,
	TRES_CMD_KIND_AF_SHOOTINGRIDE            = 189,
	TRES_CMD_KIND_AF_MERRYGOROUND            = 190,
	TRES_CMD_KIND_AF_WATERRIDE               = 191,
	TRES_CMD_KIND_AF_FINISH                  = 192,
	TRES_CMD_KIND_FR_SHIELDGUARDIAN          = 193,
	TRES_CMD_KIND_FR_MOUNTCURLING            = 194,
	TRES_CMD_KIND_FR_GOOFYSHOOT              = 195,
	TRES_CMD_KIND_FR_MICKEY                  = 196,
	TRES_CMD_KIND_FR_MICKEYCHAIN             = 197,
	TRES_CMD_KIND_FR_SNOWCURLING             = 198,
	TRES_CMD_KIND_FR_MIKEBOWLING             = 199,
	TRES_CMD_KIND_FR_JACKSPIN                = 200,
	TRES_CMD_KIND_FR_SNOWCHASE               = 201,
	TRES_CMD_KIND_FR_POWERSTRIKE             = 202,
	TRES_CMD_KIND_FR_GIANTSOLDIER            = 203,
	TRES_CMD_KIND_FR_ROCKETLASER             = 204,
	TRES_CMD_KIND_FR_SPINNINGHOLD            = 205,
	TRES_CMD_KIND_FR_SNOWCOVERSWING          = 206,
	TRES_CMD_KIND_FR_CALLMETEOR              = 207,
	TRES_CMD_KIND_FR_FLAREFORCE              = 208,
	TRES_CMD_KIND_FR_BAYMAXRIDE              = 209,
	TRES_CMD_KIND_FR_ICEREVENGER             = 210,
	TRES_CMD_KIND_S_FINISH                   = 211,
	TRES_CMD_KIND_FR_TRINITY                 = 212,
	TRES_CMD_KIND_FR_SORA                    = 213,
	TRES_CMD_KIND_FR_FINISH                  = 214,
	TRES_CMD_KIND_BARRIERCRACKER2            = 215,
	TRES_CMD_KIND_BARRIERCRACKER3            = 216,
	TRES_CMD_KIND_BARRIERCRACKER4            = 217,
	TRES_CMD_KIND_GUARDCOUNTER_RO            = 218,
	TRES_CMD_KIND_GUARDCOUNTER_KA            = 219,
	TRES_CMD_KIND_SLIDETURN                  = 220,
	TRES_CMD_KIND_CHANGE_LF                  = 221,
	TRES_CMD_KIND_CHANGE_DF                  = 222,
	TRES_CMD_KIND_CHANGE_TF                  = 223,
	TRES_CMD_KIND_CHANGE_TF2                 = 224,
	TRES_CMD_KIND_FINISH_TF                  = 225,
	TRES_CMD_KIND_FINISH_TF2                 = 226,
	TRES_CMD_KIND_FINISH_RO                  = 227,
	TRES_CMD_KIND_FINISH_KA                  = 228,
	TRES_CMD_KIND_DISPEL                     = 229,
	TRES_CMD_KIND_QUICKBATTLE                = 230,
	TRES_CMD_KIND_S_CROSSSHOOT               = 231,
	TRES_CMD_KIND_SWTCH_SORA                 = 232,
	TRES_CMD_KIND_SWTCH_AQUA                 = 233,
	TRES_CMD_KIND_SWTCH_RIKU                 = 234,
	TRES_CMD_KIND_SWTCH_KAIRI                = 235,
	TRES_CMD_KIND_SWTCH_ROXAS                = 236,
	TRES_CMD_KIND_FR_POPPINGHOLY             = 237,
	TRES_CMD_KIND_FR_BLIZZAGABOARD           = 238,
	TRES_CMD_KIND_FR_THINKOFYOU              = 239,
	TRES_CMD_KIND_FR_ULTIMATEEND             = 240,
	TRES_CMD_KIND_FR_LINKOFHEARTS            = 241,
	TRES_CMD_KIND_FR_PROMISEWINGS            = 242,
	TRES_CMD_KIND_LMEX_SLASH                 = 243,
	TRES_CMD_KIND_ANS_USUAL                  = 244,
	TRES_CMD_KIND_ANS_EASY                   = 245,
	TRES_CMD_KIND_ANS_CHALLENGING            = 246,
	TRES_CMD_KIND_CARDDRAW                   = 247,
	TRES_CMD_KIND_RESERVE248                 = 248,
	TRES_CMD_KIND_RESERVE249                 = 249,
	TRES_CMD_KIND_RESERVE250                 = 250,
	TRES_CMD_KIND_RESERVE251                 = 251,
	TRES_CMD_KIND_RESERVE252                 = 252,
	TRES_CMD_KIND_SHOOTFLOW                  = 253,
	TRES_CMD_KIND_END                        = 254,
	TRES_CMD_KIND_MAX                        = 255,
};

// Enum TresGame.ETresPhysDamageForceLevel
// NumValues: 0x0006
enum class ETresPhysDamageForceLevel : uint8
{
	TPDF_LV_1                                = 0,
	TPDF_LV_2                                = 1,
	TPDF_LV_3                                = 2,
	TPDF_LV_4                                = 3,
	_TPDF_LV_MAX                             = 4,
	ETresPhysDamageForceLevel_MAX            = 5,
};

// Enum TresGame.ETresBadStatusType
// NumValues: 0x0015
enum class ETresBadStatusType : uint8
{
	TRES_BADSTAT_NONE                        = 0,
	TRES_BADSTAT_DEATH                       = 1,
	TRES_BADSTAT_CATCH                       = 2,
	TRES_BADSTAT_DRILL_BIND                  = 3,
	TRES_BADSTAT_YO_BIND                     = 4,
	TRES_BADSTAT_RALPH_BIND                  = 5,
	TRES_BADSTAT_ENERGYBURST                 = 6,
	TRES_BADSTAT_FREEZE                      = 7,
	TRES_BADSTAT_STOP                        = 8,
	TRES_BADSTAT_MAGNET                      = 9,
	TRES_BADSTAT_DRAIN                       = 10,
	TRES_BADSTAT_ASPIR                       = 11,
	TRES_BADSTAT_STUN                        = 12,
	TRES_BADSTAT_SNEEZE                      = 13,
	TRES_BADSTAT_HONEY                       = 14,
	TRES_BADSTAT_CLOUD                       = 15,
	TRES_BADSTAT_DISCHARGE                   = 16,
	TRES_BADSTAT_BURN                        = 17,
	TRES_BADSTAT_HP_BREAK                    = 18,
	TRES_BADSTAT_TIME_BREAK                  = 19,
	TRES_BADSTAT_MAX                         = 20,
};

// Enum TresGame.ETresAtkHitKnockbackType
// NumValues: 0x0008
enum class ETresAtkHitKnockbackType : uint8
{
	TRES_AHKBT_NORMAL                        = 0,
	TRES_AHKBT_VELOCITY                      = 1,
	TRES_AHKBT_ATK_COLLISION                 = 2,
	TRES_AHKBT_INSTIGATOR_PAWN               = 3,
	TRES_AHKBT_IMPACT_LOCATION               = 4,
	SPECIFIC                                 = 5,
	_TRES_AHKBT_MAX                          = 6,
	ETresAtkHitKnockbackType_MAX             = 7,
};

// Enum TresGame.ETresDamageAttribute
// NumValues: 0x0009
enum class ETresDamageAttribute : uint8
{
	TRES_DMG_ATTR_PHYSICAL                   = 0,
	TRES_DMG_ATTR_FIRE                       = 1,
	TRES_DMG_ATTR_BLIZZARD                   = 2,
	TRES_DMG_ATTR_THUNDER                    = 3,
	TRES_DMG_ATTR_WATER                      = 4,
	TRES_DMG_ATTR_AERO                       = 5,
	TRES_DMG_ATTR_DARK                       = 6,
	TRES_DMG_ATTR_NOTYPE                     = 7,
	TRES_DMG_ATTR_MAX                        = 8,
};

// Enum TresGame.ETresDamageKind
// NumValues: 0x002B
enum class ETresDamageKind : uint8
{
	TRES_DMG_KIND_NONE                       = 0,
	TRES_DMG_KIND_SMALL                      = 1,
	TRES_DMG_KIND_BLOW                       = 2,
	TRES_DMG_KIND_SIDESPIN                   = 3,
	TRES_DMG_KIND_VERTICALROLL               = 4,
	TRES_DMG_KIND_BILLIARD                   = 5,
	TRES_DMG_KIND_FLOAT                      = 6,
	TRES_DMG_KIND_TOSS                       = 7,
	TRES_DMG_KIND_LAUNCH                     = 8,
	TRES_DMG_KIND_BEAT                       = 9,
	TRES_DMG_KIND_PARABOLA                   = 10,
	TRES_DMG_KIND_PARABOLA_NO_RECOVERY       = 11,
	TRES_DMG_KIND_WITHOUT                    = 12,
	TRES_DMG_KIND_RECOVER                    = 13,
	TRES_DMG_KIND_KILL                       = 14,
	TRES_DMG_KIND_STOP                       = 15,
	TRES_DMG_KIND_MAGNET                     = 16,
	TRES_DMG_KIND_CATCH                      = 17,
	TRES_DMG_KIND_BIND                       = 18,
	TRES_DMG_KIND_SUCTION                    = 19,
	TRES_DMG_KIND_EAT                        = 20,
	TRES_DMG_KIND_SHIELD_BLOW                = 21,
	TRES_DMG_KIND_SHIELD_TOSS                = 22,
	TRES_DMG_KIND_FREE_FLOW                  = 23,
	TRES_DMG_KIND_SHOOTING_RIDE              = 24,
	TRES_DMG_KIND_MERRYGOROUND               = 25,
	TRES_DMG_KIND_ZEROGRAVITY                = 26,
	TRES_DMG_KIND_SWALLOW                    = 27,
	TRES_DMG_KIND_UNIQUE                     = 28,
	TRES_DMG_KIND_SWIRL_UP                   = 29,
	TRES_DMG_KIND_POLE_SPIN                  = 30,
	TRES_DMG_KIND_POLE_SWING                 = 31,
	TRES_DMG_KIND_RALPH_BIND                 = 32,
	TRES_DMG_KIND_VIKINGSHIP_FRONT           = 33,
	TRES_DMG_KIND_VIKINGSHIP_BACK            = 34,
	TRES_DMG_KIND_DRILL_BIND                 = 35,
	TRES_DMG_KIND_YO_BIND                    = 36,
	TRES_DMG_KIND_EX071_BIND                 = 37,
	TRES_DMG_KIND_GOOFY_TORNADO              = 38,
	TRES_DMG_KIND_ENERGYBURST_ATTRACT        = 39,
	TRES_DMG_KIND_EX301_BIND                 = 40,
	TRES_DMG_KIND_PUDDING_EAT                = 41,
	TRES_DMG_KIND_MAX                        = 42,
};

// Enum TresGame.ETresShootFlowKind
// NumValues: 0x002F
enum class ETresShootFlowKind : uint8
{
	TRES_SF_KIND_NONE                        = 0,
	TRES_SF_KIND_SHOOTFLOW1                  = 1,
	TRES_SF_KIND_SHOOTFLOW2                  = 2,
	TRES_SF_KIND_SHOOTFLOW3                  = 3,
	TRES_SF_KIND_SHOOTFLOW4                  = 4,
	TRES_SF_KIND_SHOOTFLOW5                  = 5,
	TRES_SF_KIND_SHOOTFLOW6                  = 6,
	TRES_SF_KIND_SHOOTFLOW7                  = 7,
	TRES_SF_KIND_SHOOTFLOW8                  = 8,
	TRES_SF_KIND_SHOOTFLOW9                  = 9,
	TRES_SF_KIND_SHOOTFLOW10                 = 10,
	TRES_SF_KIND_SHOOTFLOW11                 = 11,
	TRES_SF_KIND_SHOOTFLOW12                 = 12,
	TRES_SF_KIND_SHOOTFLOW13                 = 13,
	TRES_SF_KIND_SHOOTFLOW14                 = 14,
	TRES_SF_KIND_SHOOTFLOW15                 = 15,
	TRES_SF_KIND_SHOOTFLOW16                 = 16,
	TRES_SF_KIND_SHOOTFLOW17                 = 17,
	TRES_SF_KIND_SHOOTFLOW18                 = 18,
	TRES_SF_KIND_SHOOTFLOW19                 = 19,
	TRES_SF_KIND_SHOOTFLOW20                 = 20,
	TRES_SF_KIND_SHOOTFLOW21                 = 21,
	TRES_SF_KIND_SHOOTFLOW22                 = 22,
	TRES_SF_KIND_SHOOTFLOW23                 = 23,
	TRES_SF_KIND_SHOOTFLOW24                 = 24,
	TRES_SF_KIND_SHOOTFLOW25                 = 25,
	TRES_SF_KIND_SHOOTFLOW26                 = 26,
	TRES_SF_KIND_SHOOTFLOW27                 = 27,
	TRES_SF_KIND_SHOOTFLOW28                 = 28,
	TRES_SF_KIND_SHOOTFLOW29                 = 29,
	TRES_SF_KIND_SHOOTFLOW30                 = 30,
	TRES_SF_KIND_SHOOTFLOW31                 = 31,
	TRES_SF_KIND_SHOOTFLOW32                 = 32,
	TRES_SF_KIND_SHOOTFLOW33                 = 33,
	TRES_SF_KIND_SHOOTFLOW34                 = 34,
	TRES_SF_KIND_SHOOTFLOW35                 = 35,
	TRES_SF_KIND_FOCUSASPIR                  = 36,
	TRES_SF_KIND_ATHLETICFLOW                = 37,
	TRES_SF_KIND_RAINBOWSHOWER               = 38,
	TRES_SF_KIND_SHINING                     = 39,
	TRES_SF_KIND_SHOOTFLOW40                 = 40,
	TRES_SF_KIND_SHOOTFLOW41                 = 41,
	TRES_SF_KIND_SHOOTFLOW42                 = 42,
	TRES_SF_KIND_DARKFIRAGA                  = 43,
	TRES_SF_KIND_SHOOTFLOW44                 = 44,
	TRES_SF_KIND_END                         = 45,
	TRES_SF_KIND_MAX                         = 46,
};

// Enum TresGame.ETresChrUniqueID
// NumValues: 0x0029
enum class ETresChrUniqueID : uint8
{
	TRES_CHR_UID_UNKNOWN                     = 0,
	TRES_CHR_UID_SORA                        = 1,
	TRES_CHR_UID_RIKU                        = 2,
	TRES_CHR_UID_KAIRI                       = 3,
	TRES_CHR_UID_TERRA                       = 4,
	TRES_CHR_UID_VENTUS                      = 5,
	TRES_CHR_UID_AQUA                        = 6,
	TRES_CHR_UID_ROXAS                       = 7,
	TRES_CHR_UID_LEA                         = 8,
	TRES_CHR_UID_XION                        = 9,
	TRES_CHR_UID_MICKEY                      = 10,
	TRES_CHR_UID_DONALD                      = 11,
	TRES_CHR_UID_GOOFY                       = 12,
	TRES_CHR_UID_JACK_SPARROW                = 13,
	TRES_CHR_UID_WOODY                       = 14,
	TRES_CHR_UID_BUZZ                        = 15,
	TRES_CHR_UID_HERCULES                    = 16,
	TRES_CHR_UID_RAPUNZEL                    = 17,
	TRES_CHR_UID_FLYNN                       = 18,
	TRES_CHR_UID_SULLEY                      = 19,
	TRES_CHR_UID_MIKE                        = 20,
	TRES_CHR_UID_BOO                         = 21,
	TRES_CHR_UID_MARSHMALLOW                 = 22,
	TRES_CHR_UID_BAYMAX                      = 23,
	TRES_CHR_UID_VEHICLE_GIGAS_POWER         = 24,
	TRES_CHR_UID_VEHICLE_GIGAS_POWER_GAME    = 25,
	TRES_CHR_UID_VEHICLE_GIGAS_POWER_ACE     = 26,
	TRES_CHR_UID_VEHICLE_GIGAS_SPEED         = 27,
	TRES_CHR_UID_VEHICLE_GIGAS_SPEED_GAME    = 28,
	TRES_CHR_UID_VEHICLE_GIGAS_SPEED_ACE     = 29,
	TRES_CHR_UID_VEHICLE_GIGAS_LONG          = 30,
	TRES_CHR_UID_VEHICLE_GIGAS_LONG_GAME     = 31,
	TRES_CHR_UID_VEHICLE_GIGAS_LONG_ACE      = 32,
	TRES_CHR_UID_VEHICLE_SPECIAL_SHIP        = 33,
	TRES_CHR_UID_VEHICLE_BLACK_PEARL         = 34,
	TRES_CHR_UID_VEHICLE_SMALLAIRPLANE       = 35,
	TRES_CHR_UID_FRD_RIKU                    = 36,
	TRES_CHR_UID_FRD_AQUA                    = 37,
	TRES_CHR_UID_ENEMY                       = 38,
	TRES_CHR_UID_FRD_SORA                    = 39,
	TRES_CHR_UID_MAX                         = 40,
};

// Enum TresGame.ETresEnemyUniqueID
// NumValues: 0x0095
enum class ETresEnemyUniqueID : uint8
{
	TRES_ENEMY_UID_UNKNOWN                   = 0,
	TRES_ENEMY_UID_EX001                     = 1,
	TRES_ENEMY_UID_EX003                     = 2,
	TRES_ENEMY_UID_EX004                     = 3,
	TRES_ENEMY_UID_EX005                     = 4,
	TRES_ENEMY_UID_EX016                     = 5,
	TRES_ENEMY_UID_EX081                     = 6,
	TRES_ENEMY_UID_DW401                     = 7,
	TRES_ENEMY_UID_DW401_s0                  = 8,
	TRES_ENEMY_UID_DW401_s1                  = 9,
	TRES_ENEMY_UID_DW402                     = 10,
	TRES_ENEMY_UID_DW402_s1                  = 11,
	TRES_ENEMY_UID_DW405                     = 12,
	TRES_ENEMY_UID_DW407                     = 13,
	TRES_ENEMY_UID_EX002                     = 14,
	TRES_ENEMY_UID_EX006                     = 15,
	TRES_ENEMY_UID_EX007                     = 16,
	TRES_ENEMY_UID_EX009                     = 17,
	TRES_ENEMY_UID_EX010                     = 18,
	TRES_ENEMY_UID_EX011                     = 19,
	TRES_ENEMY_UID_EX012                     = 20,
	TRES_ENEMY_UID_EX013                     = 21,
	TRES_ENEMY_UID_EX014                     = 22,
	TRES_ENEMY_UID_EX015                     = 23,
	TRES_ENEMY_UID_EX017                     = 24,
	TRES_ENEMY_UID_EX036                     = 25,
	TRES_ENEMY_UID_EX037                     = 26,
	TRES_ENEMY_UID_EX038                     = 27,
	TRES_ENEMY_UID_EX018                     = 28,
	TRES_ENEMY_UID_EX032                     = 29,
	TRES_ENEMY_UID_EX033                     = 30,
	TRES_ENEMY_UID_EX020                     = 31,
	TRES_ENEMY_UID_EX021                     = 32,
	TRES_ENEMY_UID_EX026                     = 33,
	TRES_ENEMY_UID_EX027                     = 34,
	TRES_ENEMY_UID_EX028                     = 35,
	TRES_ENEMY_UID_EX035                     = 36,
	TRES_ENEMY_UID_EX039                     = 37,
	TRES_ENEMY_UID_EX041                     = 38,
	TRES_ENEMY_UID_EX042                     = 39,
	TRES_ENEMY_UID_EX043                     = 40,
	TRES_ENEMY_UID_EX044                     = 41,
	TRES_ENEMY_UID_EX045                     = 42,
	TRES_ENEMY_UID_EX046                     = 43,
	TRES_ENEMY_UID_EX047                     = 44,
	TRES_ENEMY_UID_EX048                     = 45,
	TRES_ENEMY_UID_EX049                     = 46,
	TRES_ENEMY_UID_EX050                     = 47,
	TRES_ENEMY_UID_EX051                     = 48,
	TRES_ENEMY_UID_EX052                     = 49,
	TRES_ENEMY_UID_EX053                     = 50,
	TRES_ENEMY_UID_EX054                     = 51,
	TRES_ENEMY_UID_EX055                     = 52,
	TRES_ENEMY_UID_EX056                     = 53,
	TRES_ENEMY_UID_EX059                     = 54,
	TRES_ENEMY_UID_EX061                     = 55,
	TRES_ENEMY_UID_EX065                     = 56,
	TRES_ENEMY_UID_EX066                     = 57,
	TRES_ENEMY_UID_EX067                     = 58,
	TRES_ENEMY_UID_EX068                     = 59,
	TRES_ENEMY_UID_EX073                     = 60,
	TRES_ENEMY_UID_EX082                     = 61,
	TRES_ENEMY_UID_EX085                     = 62,
	TRES_ENEMY_UID_EX086                     = 63,
	TRES_ENEMY_UID_EX086_s0                  = 64,
	TRES_ENEMY_UID_EX086_s1                  = 65,
	TRES_ENEMY_UID_EX087                     = 66,
	TRES_ENEMY_UID_EX093                     = 67,
	TRES_ENEMY_UID_EX094                     = 68,
	TRES_ENEMY_UID_EX095                     = 69,
	TRES_ENEMY_UID_EX101                     = 70,
	TRES_ENEMY_UID_EX105                     = 71,
	TRES_ENEMY_UID_EX106                     = 72,
	TRES_ENEMY_UID_EX107                     = 73,
	TRES_ENEMY_UID_EX110                     = 74,
	TRES_ENEMY_UID_EX113                     = 75,
	TRES_ENEMY_UID_EX114                     = 76,
	TRES_ENEMY_UID_EX201                     = 77,
	TRES_ENEMY_UID_EX202                     = 78,
	TRES_ENEMY_UID_EX203                     = 79,
	TRES_ENEMY_UID_EX205                     = 80,
	TRES_ENEMY_UID_EX301                     = 81,
	TRES_ENEMY_UID_EX302                     = 82,
	TRES_ENEMY_UID_EX316                     = 83,
	TRES_ENEMY_UID_EX304                     = 84,
	TRES_ENEMY_UID_EX305                     = 85,
	TRES_ENEMY_UID_EX306                     = 86,
	TRES_ENEMY_UID_EX307                     = 87,
	TRES_ENEMY_UID_EX308                     = 88,
	TRES_ENEMY_UID_EX309                     = 89,
	TRES_ENEMY_UID_EX310                     = 90,
	TRES_ENEMY_UID_EX311                     = 91,
	TRES_ENEMY_UID_EX313                     = 92,
	TRES_ENEMY_UID_EX322                     = 93,
	TRES_ENEMY_UID_EX325                     = 94,
	TRES_ENEMY_UID_EX326                     = 95,
	TRES_ENEMY_UID_EX701                     = 96,
	TRES_ENEMY_UID_EX702                     = 97,
	TRES_ENEMY_UID_EX703                     = 98,
	TRES_ENEMY_UID_EX711                     = 99,
	TRES_ENEMY_UID_EX721                     = 100,
	TRES_ENEMY_UID_EX731                     = 101,
	TRES_ENEMY_UID_EX732                     = 102,
	TRES_ENEMY_UID_EX734                     = 103,
	TRES_ENEMY_UID_EX761                     = 104,
	TRES_ENEMY_UID_EX047_s0                  = 105,
	TRES_ENEMY_UID_EX771                     = 106,
	TRES_ENEMY_UID_EX771_0                   = 107,
	TRES_ENEMY_UID_EX771_1                   = 108,
	TRES_ENEMY_UID_EX047_s1                  = 109,
	TRES_ENEMY_UID_EX801                     = 110,
	TRES_ENEMY_UID_EX806                     = 111,
	TRES_ENEMY_UID_EX816                     = 112,
	TRES_ENEMY_UID_EX830                     = 113,
	TRES_ENEMY_UID_EX831                     = 114,
	TRES_ENEMY_UID_EX832                     = 115,
	TRES_ENEMY_UID_EX833                     = 116,
	TRES_ENEMY_UID_EX834                     = 117,
	TRES_ENEMY_UID_EX840                     = 118,
	TRES_ENEMY_UID_EX841                     = 119,
	TRES_ENEMY_UID_EX842                     = 120,
	TRES_ENEMY_UID_EX843                     = 121,
	TRES_ENEMY_UID_EX844                     = 122,
	TRES_ENEMY_UID_EX845                     = 123,
	TRES_ENEMY_UID_BX059                     = 124,
	TRES_ENEMY_UID_BX901                     = 125,
	TRES_ENEMY_UID_EX047_s2                  = 126,
	TRES_ENEMY_UID_BX903                     = 127,
	TRES_ENEMY_UID_CA901                     = 128,
	TRES_ENEMY_UID_FZ903                     = 129,
	TRES_ENEMY_UID_HE001                     = 130,
	TRES_ENEMY_UID_HE902                     = 131,
	TRES_ENEMY_UID_HE903                     = 132,
	TRES_ENEMY_UID_HE904                     = 133,
	TRES_ENEMY_UID_CA401                     = 134,
	TRES_ENEMY_UID_CA402                     = 135,
	TRES_ENEMY_UID_CA403                     = 136,
	TRES_ENEMY_UID_CA404                     = 137,
	TRES_ENEMY_UID_CA405                     = 138,
	TRES_ENEMY_UID_EX071                     = 139,
	TRES_ENEMY_UID_EX072                     = 140,
	TRES_ENEMY_UID_EX407                     = 141,
	TRES_ENEMY_UID_EX064                     = 142,
	TRES_ENEMY_UID_EX047_s3                  = 143,
	TRES_ENEMY_UID_EX047_s4                  = 144,
	TRES_ENEMY_UID_EX409                     = 145,
	TRES_ENEMY_UID_EX751                     = 146,
	TRES_ENEMY_UID_EX781                     = 147,
	TRES_ENEMY_UID_MAX                       = 148,
};

// Enum TresGame.ETresPlayerUniqueID
// NumValues: 0x0016
enum class ETresPlayerUniqueID : uint8
{
	SORA_KH3                                 = 0,
	SORA_KH3CA                               = 1,
	SORA_KH3MI                               = 2,
	SORA_KH3TS                               = 3,
	SORA_KH3BX                               = 4,
	SORA_KH3EW                               = 5,
	SORA_KH2                                 = 6,
	SORA_KH1                                 = 7,
	RIKU_KH3                                 = 8,
	RIKU_KH29                                = 9,
	AQUA_KH3                                 = 10,
	SORA_KH3TUTO                             = 11,
	SORA_KH3TS_GAME                          = 12,
	SORA_KH3PO                               = 13,
	UNKNOWN                                  = 14,
	SORA_KH3DL                               = 15,
	KAIRI_KH3                                = 16,
	ROXAS_KH3                                = 17,
	MICKEY_KH3MiRx                           = 18,
	SORA_KH3SoKc                             = 19,
	_MAX                                     = 20,
	ETresPlayerUniqueID_MAX                  = 21,
};

// Enum TresGame.ETresAbilityKind
// NumValues: 0x00BA
enum class ETresAbilityKind : uint8
{
	NONE                                     = 0,
	AIR_RECOVERY                             = 1,
	BLOW_COUNTER                             = 2,
	REFLECT_GUARD                            = 3,
	GUARD_COUNTER                            = 4,
	REVENGEIMPACT                            = 5,
	REVENGEDIVE                              = 6,
	REVENGE_EX                               = 7,
	RISKDODGE                                = 8,
	RD_COUNTER                               = 9,
	SLASH_UPPER                              = 10,
	AIR_ROLL_BEAT                            = 11,
	AIR_DOWN                                 = 12,
	TRIPPLE_SLASH                            = 13,
	CHARGE_THRUST                            = 14,
	MAGICFLUSH                               = 15,
	HIGHJUMP                                 = 16,
	DOUBLEFLIGHT                             = 17,
	SUPERJUMP                                = 18,
	SUPERSLIDE                               = 19,
	GLIDE                                    = 20,
	LIBRA                                    = 21,
	DODGE                                    = 22,
	AIRSLIDE                                 = 23,
	AIRDODGE                                 = 24,
	MP_SAFETY                                = 25,
	EXPZERO                                  = 26,
	FRIEND_AID                               = 27,
	COMBO_PLUS                               = 28,
	AIRCOMBO_PLUS                            = 29,
	COMBO_MASTER                             = 30,
	COMBO_UP                                 = 31,
	AIRCOMBO_UP                              = 32,
	FIRE_UP                                  = 33,
	BLIZZARD_UP                              = 34,
	THUNDER_UP                               = 35,
	WATER_UP                                 = 36,
	AERO_UP                                  = 37,
	WIZZARD_STAR                             = 38,
	LUCK_UP                                  = 39,
	ITEM_UP                                  = 40,
	PRIZE_DRAW                               = 41,
	FOCUS_BOOST                              = 42,
	LEAF_VEIL                                = 43,
	LAST_LEAVE                               = 44,
	COMBO_LEAVE                              = 45,
	FOCUS_ASPIR                              = 46,
	ATTRACTION_TIME                          = 47,
	LINK_BOOST                               = 48,
	FORM_TIME                                = 49,
	DEFENDER                                 = 50,
	CRITICAL_HALF                            = 51,
	DAMAGE_ASPIR                             = 52,
	MP_HASTE                                 = 53,
	MP_HASTERA                               = 54,
	MP_HASTEGA                               = 55,
	MAGIC_COMBO_SAVE                         = 56,
	MAGIC_COMBO_UP                           = 57,
	WALK_REGENE                              = 58,
	WALK_HEALING                             = 59,
	MAGIC_DRAW                               = 60,
	MASTER_DRAW                              = 61,
	ATTRACTION_UP                            = 62,
	BURN_GUARD                               = 63,
	CLOUD_GUARD                              = 64,
	SNEEZE_GUARD                             = 65,
	FREEZE_GUARD                             = 66,
	DISCHARGE_GUARD                          = 67,
	STUN_GUARD                               = 68,
	COUNTER_UP                               = 69,
	AUTO_FINISH                              = 70,
	FORM_UP                                  = 71,
	MAGIC_TIME                               = 72,
	AUTO_LOCK_MAGIC                          = 73,
	GUARD_REGENE                             = 74,
	MP_SAVE                                  = 75,
	MP_LEAVE                                 = 76,
	FULLMP_BURST                             = 77,
	HARVEST                                  = 78,
	HP_CONVERTER                             = 79,
	MP_CONVERTER                             = 80,
	MUNNY_CONVERTER                          = 81,
	ENDLESS_MAGIC                            = 82,
	FP_CONVERTER                             = 83,
	FIRE_ASPIR                               = 84,
	BLIZZARD_ASPIR                           = 85,
	THUNDER_ASPIR                            = 86,
	WATER_ASPIR                              = 87,
	AERO_ASPIR                               = 88,
	DARK_ASPIR                               = 89,
	BEST_COMBI                               = 90,
	SONIC_SLASH                              = 91,
	SONIC_DOWN                               = 92,
	TURN_CUTTER                              = 93,
	SUMMERSALT                               = 94,
	POLE_SPIN                                = 95,
	POLE_SWING                               = 96,
	WALL_KICK                                = 97,
	BATTLE_GRAPHER                           = 98,
	CHARISMA_CHEF                            = 99,
	JOIN_FORCE                               = 100,
	HEARTLESS_BUSTER                         = 101,
	NOBODY_BUSTER                            = 102,
	POWER_CURE                               = 103,
	CRITICAL_COUNTER                         = 104,
	CRITICAL_CHARGE                          = 105,
	CRITICAL_CONVERTER                       = 106,
	QUICK_SHAFT                              = 107,
	FLASH_STEP                               = 108,
	RADIAL_CUT                               = 109,
	FINAL_HEAVEN                             = 110,
	AERIAL_SWEEP                             = 111,
	AERIAL_DIVE                              = 112,
	LUNCH_TIME                               = 170,
	POWER_LUNCH                              = 171,
	OVER_TIME                                = 172,
	BEST_CONDITION                           = 173,
	EXP_BARGAIN                              = 174,
	PRIZE_FEEVER                             = 175,
	MILLIONAIRE                              = 176,
	CURAGAN                                  = 177,
	CHARGE_BERSERK                           = 178,
	OVERCOME                                 = 179,
	GRAND_MAGIC                              = 180,
	FIRAGAN                                  = 181,
	BLIZZAGAN                                = 182,
	THUNDAGAN                                = 183,
	WATAGAN                                  = 184,
	AEROGAN                                  = 185,
	MAGIC_ROULETTE                           = 186,
	UNISON_FIRE                              = 190,
	UNISON_BLIZZARD                          = 191,
	UNISON_THUNDER                           = 192,
	FUSION_SPIN                              = 193,
	FUSION_ROCKET                            = 194,
	HYPER_HEALING                            = 195,
	COMBI_UP                                 = 196,
	COMBI_TIME                               = 197,
	SHARE_PRIZE                              = 198,
	MICKEY_CURE                              = 199,
	MICKEY_HOLY                              = 200,
	DONALD_FIRE                              = 201,
	DONALD_BLIZZARD                          = 202,
	DONALD_THUNDER                           = 203,
	DONALD_AERO                              = 204,
	DONALD_CURE                              = 205,
	GOOFY_TORNADE                            = 206,
	GOOFY_TURBO                              = 207,
	GOOFY_FLIP                               = 208,
	HERCULES_ROCKTHROW                       = 209,
	HERCULES_ENERGYBURST                     = 210,
	WOODY_SHOULDERTACKLE                     = 211,
	WOODY_ROPEATTACK                         = 212,
	BUZZ_BEAM                                = 213,
	BUZZ_DOUBLELARIAT                        = 214,
	RAPUNZEL_HAIRSWING                       = 215,
	RAPUNZEL_HAIRROTATION                    = 216,
	FLYNN_THROWFRYINGPAN                     = 217,
	FLYNN_BARRELBASH                         = 218,
	SULLEY_ROAR                              = 219,
	SULLEY_SHOULDERTACKLE                    = 220,
	MIKE_MIKEAPPEAL                          = 221,
	MIKE_SUPPORT                             = 222,
	SPARROW_BONECRASH                        = 223,
	SPARROW_TWISTROLLING                     = 224,
	MARSHMALLOW_JUMPSTRIKE                   = 225,
	MARSHMALLOW_COLDBREATH                   = 226,
	BAYMAX_ROCKETPUNCH                       = 227,
	BAYMAX_CURESPRAY                         = 228,
	RIKU_DARKFIRE                            = 229,
	RIKU_SHADOWBREAKER                       = 230,
	VENTUS_WINDRAID                          = 231,
	AQUA_BLIZZAGA                            = 232,
	AQUA_THUNDAGA                            = 233,
	AQUA_CURAGA                              = 234,
	ROXAS_CROSSSHOT                          = 235,
	ROXAS_CROSSBRADE                         = 236,
	XION_CURAGA                              = 237,
	XION_LASERRAIN                           = 238,
	__LEA_FIRAGARAID                         = 239,
	LEA_FIRAGASLICER                         = 240,
	KAIRI_CURE                               = 241,
	SORA_FIRAGA                              = 242,
	SORA_CURAGA                              = 243,
	TRES_ABI_KIND_MAX                        = 244,
	ETresAbilityKind_MAX                     = 245,
};

// Enum TresGame.ETresCharWearForm
// NumValues: 0x000C
enum class ETresCharWearForm : uint8
{
	TRES_WEAR_FORM_NORMAL                    = 0,
	TRES_WEAR_FORM_01                        = 1,
	TRES_WEAR_FORM_02                        = 2,
	TRES_WEAR_FORM_03                        = 3,
	TRES_WEAR_FORM_04                        = 4,
	TRES_WEAR_FORM_05                        = 5,
	TRES_WEAR_FORM_06                        = 6,
	TRES_WEAR_FORM_07                        = 7,
	TRES_WEAR_FORM_08                        = 8,
	TRES_WEAR_FORM_09                        = 9,
	TRES_WEAR_FORM_0A                        = 10,
	TRES_WEAR_FORM_MAX                       = 11,
};

// Enum TresGame.ETresItemDefWeapon
// NumValues: 0x005C
enum class ETresItemDefWeapon : uint8
{
	WEP_NOEQUIP                              = 0,
	WEP_KEYBLADE00                           = 1,
	WEP_KEYBLADE02                           = 2,
	WEP_KEYBLADE01                           = 3,
	WEP_KEYBLADE03                           = 4,
	WEP_KEYBLADE04                           = 5,
	WEP_KEYBLADE09                           = 6,
	WEP_KEYBLADE06                           = 7,
	WEP_KEYBLADE07                           = 8,
	WEP_KEYBLADE08                           = 9,
	WEP_KEYBLADE05                           = 10,
	WEP_KEYBLADE11                           = 11,
	WEP_KEYBLADE10                           = 12,
	WEP_KEYBLADE12                           = 13,
	WEP_KEYBLADE13                           = 14,
	WEP_KEYBLADE14                           = 15,
	WEP_KEYBLADE15                           = 16,
	WEP_KEYBLADE16                           = 17,
	WEP_KEYBLADE17                           = 18,
	WEP_KEYBLADE18                           = 19,
	WEP_KEYBLADE19                           = 20,
	WEP_DONALD00                             = 21,
	WEP_DONALD01                             = 22,
	WEP_DONALD02                             = 23,
	WEP_DONALD03                             = 24,
	WEP_DONALD04                             = 25,
	WEP_DONALD05                             = 26,
	WEP_DONALD06                             = 27,
	WEP_DONALD07                             = 28,
	WEP_DONALD08                             = 29,
	WEP_DONALD09                             = 30,
	WEP_DONALD10                             = 31,
	WEP_DONALD11                             = 32,
	WEP_DONALD12                             = 33,
	WEP_DONALD13                             = 34,
	WEP_DONALD14                             = 35,
	WEP_DONALD15                             = 36,
	WEP_DONALD16                             = 37,
	WEP_DONALD17                             = 38,
	WEP_DONALD18                             = 39,
	WEP_DONALD19                             = 40,
	WEP_GOOFY00                              = 41,
	WEP_GOOFY01                              = 42,
	WEP_GOOFY02                              = 43,
	WEP_GOOFY03                              = 44,
	WEP_GOOFY04                              = 45,
	WEP_GOOFY05                              = 46,
	WEP_GOOFY06                              = 47,
	WEP_GOOFY07                              = 48,
	WEP_GOOFY08                              = 49,
	WEP_GOOFY09                              = 50,
	WEP_GOOFY10                              = 51,
	WEP_GOOFY11                              = 52,
	WEP_GOOFY12                              = 53,
	WEP_GOOFY13                              = 54,
	WEP_GOOFY14                              = 55,
	WEP_GOOFY15                              = 56,
	WEP_GOOFY16                              = 57,
	WEP_GOOFY17                              = 58,
	WEP_GOOFY18                              = 59,
	WEP_GOOFY19                              = 60,
	WEP_AQUA00                               = 61,
	WEP_AQUA01                               = 62,
	WEP_AQUA02                               = 63,
	WEP_AQUA03                               = 64,
	WEP_MICKEY00                             = 65,
	WEP_MICKEY01                             = 66,
	WEP_MICKEY02                             = 67,
	WEP_MICKEY03                             = 68,
	WEP_HERCULES00                           = 69,
	WEP_WOODY00                              = 70,
	WEP_BUZZ00                               = 71,
	WEP_RAPUNZEL00                           = 72,
	WEP_FLYNN00                              = 73,
	WEP_JACK_SPARROW00                       = 74,
	WEP_MARSHMALLOW00                        = 75,
	WEP_BAYMAX00                             = 76,
	WEP_SULLEY00                             = 77,
	WEP_MIKE00                               = 78,
	WEP_RIKU00                               = 79,
	WEP_RIKU01                               = 80,
	WEP_RIKU02                               = 81,
	WEP_RIKU03                               = 82,
	WEP_KAIRI00                              = 83,
	WEP_LEA00                                = 84,
	WEP_TERRA00                              = 85,
	WEP_VENTUS00                             = 86,
	WEP_ROXAS00                              = 87,
	WEP_XION00                               = 88,
	WEP_FRD_SORA00                           = 89,
	_WEP_MAX                                 = 100,
	ETresItemDefWeapon_MAX                   = 101,
};

// Enum TresGame.ETresWeaponType
// NumValues: 0x0015
enum class ETresWeaponType : uint8
{
	TRES_WEAPON_TYPE_NONE                    = 0,
	TRES_WEAPON_TYPE_01                      = 1,
	TRES_WEAPON_TYPE_03                      = 2,
	TRES_WEAPON_TYPE_02                      = 3,
	TRES_WEAPON_TYPE_04                      = 4,
	TRES_WEAPON_TYPE_05                      = 5,
	TRES_WEAPON_TYPE_10                      = 6,
	TRES_WEAPON_TYPE_07                      = 7,
	TRES_WEAPON_TYPE_08                      = 8,
	TRES_WEAPON_TYPE_09                      = 9,
	TRES_WEAPON_TYPE_06                      = 10,
	TRES_WEAPON_TYPE_12                      = 11,
	TRES_WEAPON_TYPE_11                      = 12,
	TRES_WEAPON_TYPE_13                      = 13,
	TRES_WEAPON_TYPE_14                      = 14,
	TRES_WEAPON_TYPE_15                      = 15,
	TRES_WEAPON_TYPE_16                      = 16,
	TRES_WEAPON_TYPE_17                      = 17,
	TRES_WEAPON_TYPE_18                      = 18,
	TRES_WEAPON_TYPE_19                      = 19,
	TRES_WEAPON_TYPE_MAX                     = 20,
};

// Enum TresGame.ETresStateID
// NumValues: 0x00AF
enum class ETresStateID : uint8
{
	TSID_STATE_EMPTY                         = 0,
	TSID_STATE_IDLE                          = 1,
	TSID_STATE_RUN                           = 2,
	TSID_STATE_JUMP                          = 3,
	TSID_STATE_GLIDE                         = 4,
	TSID_STATE_FLOATING                      = 5,
	TSID_STATE_DANGLE                        = 6,
	TSID_STATE_CLIMBING                      = 7,
	TSID_STATE_WALLRUN                       = 8,
	TSID_STATE_HOPPING                       = 9,
	TSID_STATE_SLOPESLIDE                    = 10,
	TSID_STATE_SWAYING                       = 11,
	TSID_STATE_ATTACK                        = 12,
	TSID_STATE_ATTACK_AQ                     = 13,
	TSID_STATE_ATTACK_RI                     = 14,
	TSID_STATE_GUARD                         = 15,
	TSID_STATE_DODGEROLL                     = 16,
	TSID_STATE_RISKDODGE                     = 17,
	TSID_STATE_FIREMAGIC                     = 18,
	TSID_STATE_DAMAGE                        = 19,
	TSID_STATE_AIR_SLIDE                     = 20,
	TSID_STATE_SUPER_SLIDE                   = 21,
	TSID_STATE_RAIL_SLIDE                    = 22,
	TSID_STATE_WALL_KICK                     = 23,
	TSID_STATE_POLE_TURN                     = 24,
	TSID_STATE_ENEMY_FLOW                    = 25,
	TSID_STATE_AF_ROLLER_COASTER             = 26,
	TSID_STATE_AF_VIKING_SHIP                = 27,
	TSID_STATE_DM_SIMBA                      = 28,
	TSID_STATE_FRIENDATTACK                  = 29,
	TSID_STATE_FR_SHIELD_GUARDIAN            = 30,
	TSID_STATE_STYLECHANGE                   = 31,
	TSID_STATE_WEAPONCHANGE                  = 32,
	TSID_STATE_STYLEFINISH                   = 33,
	TSID_STATE_STYLEFINISH_DR                = 34,
	TSID_STATE_STYLEFINISH_SK                = 35,
	TSID_STATE_STYLEFINISH_GM                = 36,
	TSID_STATE_STYLEFINISH_WA                = 37,
	TSID_STATE_STYLEFINISH_SH                = 38,
	TSID_STATE_STYLEFINISH_FL                = 39,
	TSID_STATE_SHOOTERMODE                   = 40,
	TSID_STATE_SHOOTFLOW                     = 41,
	TSID_STATE_ATHLETICFLOW                  = 42,
	TSID_STATE_NAVLINK_JUMP                  = 43,
	TSID_STATE_TURN                          = 44,
	TSID_STATE_ATTACK1                       = 45,
	TSID_STATE_ATTACK2                       = 46,
	TSID_STATE_ATTACK3                       = 47,
	TSID_STATE_ATTACK4                       = 48,
	TSID_STATE_ATTACK5                       = 49,
	TSID_STATE_ATTACK6                       = 50,
	TSID_STATE_ATTACK7                       = 51,
	TSID_STATE_ATTACK8                       = 52,
	TSID_STATE_ATTACK9                       = 53,
	TSID_STATE_STAGGER                       = 54,
	TSID_STATE_RUN1                          = 55,
	TSID_STATE_RUN2                          = 56,
	TSID_STATE_RUN3                          = 57,
	TSID_STATE_APPEAR                        = 58,
	TSID_STATE_DIE                           = 59,
	TSID_STATE_VANISH_DIE                    = 60,
	TSID_STATE_CATCH                         = 61,
	TSID_STATE_BIND                          = 62,
	TSID_STATE_EMOTION                       = 63,
	TSID_STATE_DISAPPEAR                     = 64,
	TSID_STATE_FLY                           = 65,
	TSID_STATE_REFLECT                       = 66,
	TSID_STATE_CINEMATIC                     = 67,
	TSID_STATE_ACTION                        = 68,
	TSID_STATE_UP_DOWN                       = 69,
	TSID_STATE_FLY1                          = 70,
	TSID_STATE_FLY2                          = 71,
	TSID_STATE_PLAY_MOTION                   = 72,
	TSID_STATE_AF_TEACUP                     = 73,
	TSID_STATE_OPEN_TREASURE_BOX             = 74,
	TSID_STATE_COMBO_DW                      = 75,
	TSID_STATE_COMBO_HM                      = 76,
	TSID_STATE_COMBO_YO                      = 77,
	TSID_STATE_COMBO_BZ                      = 78,
	TSID_STATE_COMBO_DR                      = 79,
	TSID_STATE_COMBO_SK                      = 80,
	TSID_STATE_COMBO_GM                      = 81,
	TSID_STATE_COMBO_SW                      = 82,
	TSID_STATE_COMBO_WA                      = 83,
	TSID_STATE_COMBO_SH                      = 84,
	TSID_STATE_COMBO_CL                      = 85,
	TSID_STATE_COMBO_AN                      = 86,
	TSID_STATE_COMBO_HL                      = 87,
	TSID_STATE_COMBO_FL                      = 88,
	TSID_STATE_COMBO_SWIM                    = 89,
	TSID_STATE_COMBO_LIMIT                   = 90,
	TSID_STATE_COMMON_ATTACK                 = 91,
	TSID_STATE_FR_MOUNTCURLING               = 92,
	TSID_STATE_COMMON_MOVE                   = 93,
	TSID_STATE_COMMON_ACTION                 = 94,
	TSID_STATE_AF_SHOOTINGRIDE               = 95,
	TSID_STATE_GIGAS                         = 96,
	TSID_STATE_GIMMICK_ATTACH                = 97,
	TSID_STATE_AI_MOVE                       = 98,
	TSID_STATE_AI_ACTION                     = 99,
	TSID_STATE_AI_ATTACK                     = 100,
	TSID_STATE_FR_GOOFYSHOOT                 = 101,
	TSID_STATE_SWIM                          = 102,
	TSID_STATE_SPECIAL_SHIP                  = 103,
	TSID_STATE_TALK                          = 104,
	TSID_STATE_SAVE_MENU                     = 105,
	TSID_STATE_SHOP_MENU                     = 106,
	TSID_STATE_NAVLINK_HOPPING               = 107,
	TSID_STATE_CHECK                         = 108,
	TSID_STATE_RESCUE                        = 109,
	TSID_STATE_AF_MERRYGOROUND               = 110,
	TSID_STATE_USE_ITEM                      = 111,
	TSID_STATE_FR_MICKEYCHAIN                = 112,
	TSID_STATE_FR_MICKEYAQUA                 = 113,
	TSID_STATE_FR_SNOWCURLING                = 114,
	TSID_STATE_FR_SNOWCHASE                  = 115,
	TSID_STATE_FR_ICERAILSLIDE               = 116,
	TSID_STATE_DM_WANDANYAN                  = 117,
	TSID_STATE_GAMEOVER                      = 118,
	TSID_STATE_SMALLAIRPLANE                 = 119,
	TSID_STATE_AF_WATERRIDE                  = 120,
	TSID_STATE_FR_MIKEBOWLING                = 121,
	TSID_STATE_BADSTAT_STUN                  = 122,
	TSID_STATE_BADSTAT_FREEZE                = 123,
	TSID_STATE_BADSTAT_BURN                  = 124,
	TSID_STATE_WARP                          = 125,
	TSID_STATE_DM_RALPH                      = 126,
	TSID_STATE_DM_ARIEL                      = 127,
	TSID_STATE_DM_STITCH                     = 128,
	TSID_STATE_FR_JACKSPIN                   = 129,
	TSID_STATE_FR_POWERSTRIKE                = 130,
	TSID_STATE_FR_GIANTSOLDIER               = 131,
	TSID_STATE_FR_ROCKETLASER                = 132,
	TSID_STATE_FR_SPINNINGHOLD               = 133,
	TSID_STATE_FR_SNOWCOVERSWING             = 134,
	TSID_STATE_FR_CALLMETEOR                 = 135,
	TSID_STATE_FR_FLAREFORCE                 = 136,
	TSID_STATE_FR_BAYMAXRIDE                 = 137,
	TSID_STATE_RAILSLIDE_MI                  = 138,
	TSID_STATE_AI_SLOPESLIDE                 = 139,
	TSID_STATE_HIDDEN                        = 140,
	TSID_STATE_BTL_COMICAL                   = 141,
	TSID_STATE_COVER                         = 142,
	TSID_STATE_AI_SWIM                       = 143,
	TSID_STATE_HOLD_CAMERA                   = 144,
	TSID_STATE_FESTIVAL_DANCE                = 145,
	TSID_STATE_IDLE_WAIT                     = 146,
	TSID_STATE_SITUATION_ACTION              = 147,
	TSID_STATE_PLANEBOSS                     = 148,
	TSID_STATE_TALK_MOTION                   = 149,
	TSID_STATE_ONE_ACTION                    = 150,
	TSID_STATE_BADSTAT_SNEEZE                = 151,
	TSID_STATE_FR_MICKEYRIKU                 = 152,
	TSID_STATE_WATER_PLAY                    = 153,
	TSID_STATE_FR_DONALDSORA                 = 154,
	TSID_STATE_FR_GOOFYSORA                  = 155,
	TSID_STATE_ATTACK_RO                     = 156,
	TSID_STATE_ATTACK_KA                     = 157,
	TSID_STATE_ATTACK_MI                     = 158,
	TSID_STATE_COMBO_LF                      = 159,
	TSID_STATE_COMBO_DF                      = 160,
	TSID_STATE_COMBO_TF                      = 161,
	TSID_STATE_SLIDE_TURN_RO                 = 162,
	TSID_STATE_FR_POPPINGHOLY                = 163,
	TSID_STATE_FR_BLIZZAGABOARD              = 164,
	TSID_STATE_FR_THINKOFYOU                 = 165,
	TSID_STATE_FR_ULTIMATEEND                = 166,
	TSID_STATE_FR_PROMISEWINGS               = 167,
	TSID_STATE_QUICKBATTLE                   = 168,
	TSID_STATE_REMIND_LGRX                   = 169,
	TSID_STATE_REMIND_MIRX_DOWN_MI           = 170,
	TSID_STATE_REMIND_MIRX_ATTACK_MI         = 171,
	TSID_STATE_REMIND_MIRX_TIRED_MI          = 172,
	TSID_STATE_REMIND_SOKC_MAIN              = 173,
	TSID_STATE_MAX                           = 174,
};

// Enum TresGame.ETresBodyCollReactionType
// NumValues: 0x000E
enum class ETresBodyCollReactionType : uint8
{
	TRES_BODY_RT_DEFAULT                     = 0,
	TRES_BODY_RT_NO_REACTION                 = 1,
	STRONG                                   = 2,
	TRES_BODY_RT_GUARD                       = 3,
	WEAK_GUARD                               = 4,
	GUARD_NOREACT                            = 5,
	TRES_BODY_RT_INVINCIBLE                  = 6,
	INVINCIBLE_NOREACT                       = 7,
	TRES_BODY_RT_GHOST                       = 8,
	GHOST_NOREACT                            = 9,
	REFLECT1                                 = 10,
	GHOST_INVINCIBLE                         = 11,
	_TRES_BODY_RT_MAX                        = 12,
	ETresBodyCollReactionType_MAX            = 13,
};

// Enum TresGame.ETresPlayerJumpModes
// NumValues: 0x0006
enum class ETresPlayerJumpModes : uint8
{
	TPJ_NORMAL                               = 0,
	TPJ_HIGH                                 = 1,
	TPJ_SUPER                                = 2,
	TPJ_DOUBLE_FLIGHT                        = 3,
	TPJ_SUPER_FLIGHT                         = 4,
	TPJ_MAX                                  = 5,
};

// Enum TresGame.ETresAnimNotifyBpEventID
// NumValues: 0x0002
enum class ETresAnimNotifyBpEventID : uint8
{
	TRES_ANIMNOTIFYBPEVENT_NONE              = 0,
	TRES_ANIMNOTIFYBPEVENT_MAX               = 1,
};

// Enum TresGame.ETresTeam
// NumValues: 0x000A
enum class ETresTeam : uint8
{
	Player                                   = 0,
	FriendNpc                                = 1,
	Enemy                                    = 32,
	Heartless                                = 33,
	Nobody                                   = 34,
	Unverse                                  = 35,
	Neutral                                  = 160,
	CityNpc                                  = 161,
	Unknown                                  = 254,
	ETresTeam_MAX                            = 255,
};

// Enum TresGame.ETresReactionResultType
// NumValues: 0x000D
enum class ETresReactionResultType : uint8
{
	TRES_REACT_RESULT_NONE                   = 0,
	TRES_REACT_RESULT_NOREACTION             = 1,
	TRES_REACT_RESULT_DAMAGE                 = 2,
	TRES_REACT_RESULT_REFLECT                = 3,
	TRES_REACT_RESULT_GUARD_REFLECT          = 4,
	TRES_REACT_RESULT_GUARD                  = 5,
	ARMOR_BREAK                              = 6,
	STRONG_BODY_DAMAGE1                      = 7,
	STRONG_BODY_DAMAGE2                      = 8,
	STRONG_BODY_DAMAGE3                      = 9,
	STRONG_BODY_DAMAGE4                      = 10,
	_MAX                                     = 11,
	ETresReactionResultType_MAX              = 12,
};

// Enum TresGame.ETresProjectileInnerWaterVolumeProc
// NumValues: 0x0006
enum class ETresProjectileInnerWaterVolumeProc : uint8
{
	NOTHING                                  = 0,
	SHUTDOWN                                 = 1,
	MAPHITEXPLODE                            = 2,
	SHUTDOWN_DOWN                            = 3,
	MAPHITEXPLODE_DOWN                       = 4,
	ETresProjectileInnerWaterVolumeProc_MAX  = 5,
};

// Enum TresGame.ETresProjectileRespawnRotType
// NumValues: 0x0004
enum class ETresProjectileRespawnRotType : uint8
{
	TPRR_NORMAL                              = 0,
	TPRR_YAW_ONLY                            = 1,
	TPRR_CLEAR                               = 2,
	TPRR_MAX                                 = 3,
};

// Enum TresGame.ETresProjectileRespawnType
// NumValues: 0x0006
enum class ETresProjectileRespawnType : uint8
{
	TPR_TYPE_HIT_ALWAYS                      = 0,
	TPR_TYPE_HIT_ANY                         = 1,
	TPR_TYPE_HIT_PAWN                        = 2,
	TPR_TYPE_HIT_MAP                         = 3,
	TPR_TYPE_NO_HIT                          = 4,
	TPR_TYPE_MAX                             = 5,
};

// Enum TresGame.ETresBodyCollOverlapCameraFunction
// NumValues: 0x0003
enum class ETresBodyCollOverlapCameraFunction : uint8
{
	TRES_BODY_OVERLAPCAMERA_FADE             = 0,
	TRES_BODY_OVERLAPCAMERA_RESET            = 1,
	TRES_BODY_OVERLAPCAMERA_MAX              = 2,
};

// Enum TresGame.ETresBodyCollision
// NumValues: 0x0006
enum class ETresBodyCollision : uint8
{
	SPHERE                                   = 0,
	CAPSULE                                  = 1,
	BOX                                      = 2,
	CONVEX                                   = 3,
	MAX                                      = 4,
	ETresBodyCollision_MAX                   = 5,
};

// Enum TresGame.ETresPlayerSpecificActionID
// NumValues: 0x0088
enum class ETresPlayerSpecificActionID : uint8
{
	TRES_PSA_ACCOMPANY_PAWN                  = 0,
	TRES_PSA_CHANT_END                       = 1,
	TRES_PSA_SHOOTFLOW_ACTION_END            = 2,
	TRES_PSA_ATHLETICFLOW_ATTACK             = 3,
	TRES_PSA_PLANEBOSS_START                 = 4,
	TRES_PSA_SMALLAIRPLANE_AUTOTURN_START    = 5,
	TRES_PSA_SMALLAIRPLANE_AUTOTURN_END      = 6,
	TRES_PSA_SPECIALSHIP_DASHHIT_START       = 7,
	TRES_PSA_SPECIALSHIP_DASHHIT_END         = 8,
	TRES_PSA_SPECIALSHIP_JUMP_START          = 9,
	TRES_PSA_SPECIALSHIP_JUMP_DOWN           = 10,
	TRES_PSA_SPECIALSHIP_JUMP_LAND           = 11,
	TRES_PSA_SPECIALSHIP_ENEMY_START         = 12,
	TRES_PSA_SPECIALSHIP_HP0_START           = 13,
	TRES_PSA_SPECIALSHIP_MAELSTROM_HP0_START = 14,
	TRES_PSA_RAIL_SLIDE_START                = 15,
	TRES_PSA_RAIL_SLIDE_END                  = 16,
	TRES_PSA_MI_04_DOOR_ATTACH_START         = 17,
	TRES_PSA_MI_04_DOOR_ATTACH_END           = 18,
	TRES_PSA_VIKINGSHIP_APPEARSKIP           = 19,
	TRES_PSA_VIKINGSHIP_START                = 20,
	TRES_PSA_VIKINGSHIP_ATTACK               = 21,
	TRES_PSA_VIKINGSHIP_END                  = 22,
	TRES_PSA_ROLLERCOASTER_PRE_JUMPSTART     = 23,
	TRES_PSA_ROLLERCOASTER_PRE_START         = 24,
	TRES_PSA_ROLLERCOASTER_START             = 25,
	TRES_PSA_ROLLERCOASTER_JUMP              = 26,
	TRES_PSA_ROLLERCOASTER_ATTACK            = 27,
	TRES_PSA_ROLLERCOASTER_ENEMY_ATTACKREFLECT = 28,
	TRES_PSA_ROLLERCOASTER_CANCEL            = 29,
	TRES_PSA_ROLLERCOASTER_FINISH_START      = 30,
	TRES_PSA_ROLLERCOASTER_FINISH_WIN_START  = 31,
	TRES_PSA_ROLLERCOASTER_FINISH_WIN_END    = 32,
	TRES_PSA_ROLLERCOASTER_FINISH_CMD_START  = 33,
	TRES_PSA_TEACUP_APPEARSKIP               = 34,
	TRES_PSA_TEACUP_FINISH                   = 35,
	TRES_PSA_TEACUP_END                      = 36,
	TRES_PSA_SHOOTINGRIDE_APPEARSKIP         = 37,
	TRES_PSA_MERRYGOROUND_APPEARSKIP         = 38,
	TRES_PSA_MERRYGOROUND_FINISH             = 39,
	TRES_PSA_MERRYGOROUND_FINISH_ATTACK      = 40,
	TRES_PSA_MERRYGOROUND_END                = 41,
	TRES_PSA_WATERRIDE_SPAWNWARP             = 42,
	TRES_PSA_WATERRIDE_APPEARSKIP            = 43,
	TRES_PSA_WATERRIDE_START                 = 44,
	TRES_PSA_WATERRIDE_FINISH                = 45,
	TRES_PSA_WATERRIDE_FINISH_LAST           = 46,
	TRES_PSA_WATERRIDE_FINISH_LAST2          = 47,
	TRES_PSA_WATERRIDE_END                   = 48,
	TRES_PSA_SIMBA_APPEARSKIP                = 49,
	TRES_PSA_SIMBA_START                     = 50,
	TRES_PSA_SIMBA_FINISH                    = 51,
	TRES_PSA_SIMBA_END                       = 52,
	TRES_PSA_ARIEL_APPEARSKIP                = 53,
	TRES_PSA_ARIEL_START                     = 54,
	TRES_PSA_ARIEL_CUT2                      = 55,
	TRES_PSA_ARIEL_END                       = 56,
	TRES_PSA_RALPH_APPEARSKIP                = 57,
	TRES_PSA_RALPH_EXPLOSION                 = 58,
	TRES_PSA_RALPH_END                       = 59,
	TRES_PSA_STITCH_APPEARSKIP               = 60,
	TRES_PSA_STITCH_START                    = 61,
	TRES_PSA_STITCH_END                      = 62,
	TRES_PSA_WANDANYAN_APPEARSKIP            = 63,
	TRES_PSA_STYLE_FINISH_SH_END             = 64,
	TRES_PSA_STYLE_FINISH_WA_END             = 65,
	TRES_PSA_STYLE_FINISH_SK_END             = 66,
	TRES_PSA_STYLE_FINISH_GM_END             = 67,
	TRES_PSA_SHIELD_GUARDIAN_FINISH          = 68,
	TRES_PSA_SHIELD_GUARDIAN_END             = 69,
	TRES_PSA_MICKEYCHAIN_START               = 70,
	TRES_PSA_SNOW_COVER_SWING_START          = 71,
	TRES_PSA_SNOW_COVER_SWING_ATTACK_SUCCESS = 72,
	TRES_PSA_SNOW_COVER_SWING_ATTACK_FAILED  = 73,
	TRES_PSA_SNOW_COVER_SWING_FAILED         = 74,
	TRES_PSA_SPINNING_HOLD_START             = 75,
	TRES_PSA_SPINNING_HOLD_EXPLODE           = 76,
	TRES_PSA_SPINNING_HOLD_LIGHTBALL_WALL_HIT = 77,
	TRES_PSA_CALL_METEOR_START               = 78,
	TRES_PSA_CALL_METEOR_FINISH              = 79,
	TRES_PSA_CALL_METEOR_END                 = 80,
	TRES_PSA_BAYMAXRIDE_FINISH_RUSH          = 81,
	TRES_PSA_BAYMAXRIDE_FINISH_HIT           = 82,
	TRES_PSA_BAYMAXRIDE_FINISH_END           = 83,
	TRES_PSA_GIANTSOLDIER_START              = 84,
	TRES_PSA_GIANTSOLDIER_CANCEL             = 85,
	TRES_PSA_POWERSTRIKE_START               = 86,
	TRES_PSA_FLAREFORCE_START                = 87,
	TRES_PSA_BLIZZAGABOARD_CUT3              = 88,
	TRES_PSA_BLIZZAGABOARD_CUT4              = 89,
	TRES_PSA_BLIZZAGABOARD_EXP               = 90,
	TRES_PSA_BLIZZAGABOARD_EXPEND            = 91,
	TRES_PSA_THINKOFYOU_END                  = 92,
	TRES_PSA_PROMISEWINGS_START              = 93,
	TRES_PSA_PROMISEWINGS_MOVE               = 94,
	TRES_PSA_PROMISEWINGS_FINISH             = 95,
	TRES_PSA_PROMISEWINGS_END                = 96,
	TRES_PSA_LGRX_PHASE_START                = 97,
	TRES_PSA_LGRX_ADD_COMMAND_FINISH         = 98,
	TRES_PSA_LGRX_RUSH_START                 = 99,
	TRES_PSA_LGRX_RUSH_LAST                  = 100,
	TRES_PSA_LGRX_RUSH_END                   = 101,
	TRES_PSA_LGRX_RUSH_HIT                   = 102,
	TRES_PSA_LGRX_GUARD_HIT                  = 103,
	TRES_PSA_LGRX_GUARDCOUNTER               = 104,
	TRES_PSA_LGRX_REACTION_CUT1              = 105,
	TRES_PSA_LGRX_REACTION_CUT2              = 106,
	TRES_PSA_LGRX_REACTION_CUT3              = 107,
	TRES_PSA_LGRX_REACTION_CUT4              = 108,
	TRES_PSA_LGRX_REACTION_CUT5              = 109,
	TRES_PSA_LGRX_REACTION_CUT6              = 110,
	TRES_PSA_LGRX_REACTION_CUT7              = 111,
	TRES_PSA_LGRX_REACTION_CUT8              = 112,
	TRES_PSA_LGRX_REACTION_CUT9              = 113,
	TRES_PSA_LGRX_REACTION_CUT10             = 114,
	TRES_PSA_LGRX_REACTION_CUT11             = 115,
	TRES_PSA_LGRX_REACTION_CUT12             = 116,
	TRES_PSA_LGRX_REACTION_SUCCESS           = 117,
	TRES_PSA_LGRX_REACTION_FAIL              = 118,
	TRES_PSA_LGRX_GAMECLEAR                  = 119,
	TRES_PSA_LGRX_GAMEOVER_ONE               = 120,
	TRES_PSA_LGRX_GAMEOVER_ALL               = 121,
	TRES_PSA_MIRX_REPLICA_LASER_OMEN_START   = 122,
	TRES_PSA_MIRX_REPLICA_WARP_ATTACK_START  = 123,
	TRES_PSA_MIRX_MICKEY_BLOW_START          = 124,
	TRES_PSA_MIRX_MICKEY_DOWN_START          = 125,
	TRES_PSA_MIRX_MICKEY_DOWN_DURING         = 126,
	TRES_PSA_MIRX_MICKEY_DOWN_END            = 127,
	TRES_PSA_MIRX_MICKEY_FAILDE_12_HOLY_SEAL = 128,
	TRES_PSA_MIRX_MICKEY_RISE_LAST_HOLY_COMMAND = 129,
	TRES_PSA_MIRX_MICKEY_LAST_HOLY_START     = 130,
	TRES_PSA_MIRX_MICKEY_TIRED_START         = 131,
	TRES_PSA_MIRX_MICKEY_TIRED_END           = 132,
	TRES_PSA_MIRX_REPLICA_STATE_END          = 133,
	TRES_PSA_MIRX_REPLICA_FULLFIRE_LASER_OMEN_START = 134,
	TRES_PSA_MAX                             = 135,
};

// Enum TresGame.ETresActorSpecificActionID
// NumValues: 0x0023
enum class ETresActorSpecificActionID : uint8
{
	TRES_ASA_BOSS_DIE                        = 0,
	TRES_ASA_SATYR_SCRUM                     = 1,
	TRES_ASA_SATYR_WARP                      = 2,
	TRES_ASA_GOOFYSHOOT_TOWER                = 3,
	TRES_ASA_GOOFYSHOOT_TARUNVERSED          = 4,
	TRES_ASA_GOOFYSHOOT_GENERAL              = 5,
	TRES_ASA_TURTLEFROG_INHALE               = 6,
	TRES_ASA_TURTLEFROG_SPIT                 = 7,
	TRES_ASA_DAVYJONES_DRAWINGTOSS           = 8,
	TRES_ASA_DAVYJONES_DRAWINGEND            = 9,
	TRES_ASA_TORNADO_INHALE_START            = 10,
	TRES_ASA_TORNADO_LAUNCH_START            = 11,
	TRES_ASA_TORNADO_LAUNCH_END              = 12,
	TRES_ASA_PLANEBOSS_SHAKEOFF_START        = 13,
	TRES_ASA_PLANEBOSS_SHAKEOFF_END          = 14,
	TRES_ASA_PLANEBOSS_TURNAROUND_START      = 15,
	TRES_ASA_E_EX027_EAT_BIND_START          = 16,
	TRES_ASA_E_EX027_EAT_BIND_END            = 17,
	TRES_ASA_E_EX027_BITE_BIND_START         = 18,
	TRES_ASA_E_EX027_BITE_BIND_END           = 19,
	TRES_ASA_E_EX054_JUMP_CHANGE_CAMERA      = 20,
	TRES_ASA_E_CA901_TENTACLE_SUMMONS_CAMERA = 21,
	TRES_ASA_E_EX721_FLASH_CAMERA            = 22,
	TRES_ASA_E_CA404_BEFORE_STOLETRAP        = 23,
	TRES_ASA_E_CA404_EXEC_STOLETRAP          = 24,
	TRES_ASA_GUMISHIP_WORLD_SYMBOL_START     = 25,
	TRES_ASA_GUMISHIP_TRAVEL_POINT_START     = 26,
	TRES_ASA_GUMISHIP_FINISHED_BATTLE_WIPE_START = 27,
	TRES_ASA_LEVLE_PRIZEBOX_FOOD_GET         = 28,
	TRES_ASA_MIRX_REPLICA_WARP_ATTACK_START  = 29,
	TRES_ASA_MIRX_REPLICA_WARP_ATTACK_END    = 30,
	TRES_ASA_MIRX_MICKEY_HOLY_SEAL_START     = 31,
	TRES_ASA_MIRX_MICKEY_HOLY_SEAL_END       = 32,
	TRES_ASA_MIRX_MICKEY_HIT_FINISH_ATTACK   = 33,
	TRES_ASA_MAX                             = 34,
};

// Enum TresGame.ETresPlayerFlyModes
// NumValues: 0x0006
enum class ETresPlayerFlyModes : uint8
{
	TPF_GLIDE                                = 0,
	TPF_SUPER_SLIDE                          = 1,
	TPF_SONIC_SLIDE                          = 2,
	TPF_SUPER_FLIGHT                         = 3,
	TPF_AIR_DODGE                            = 4,
	TPF_MAX                                  = 5,
};

// Enum TresGame.ETresEnemyMajorUseID
// NumValues: 0x0003
enum class ETresEnemyMajorUseID : uint8
{
	MAJOR_USE_ID_COMMON                      = 0,
	MAJOR_USE_ID_BATTLE_PORTAL               = 1,
	MAJOR_USE_ID_MAX                         = 2,
};

// Enum TresGame.ETresEnemydw407Region
// NumValues: 0x0004
enum class ETresEnemydw407Region : uint8
{
	TRES_ENEMY_DW407_REGION_RIGHTHAND        = 0,
	TRES_ENEMY_DW407_REGION_LEFTHAND         = 1,
	TRES_ENEMY_DW407_REGION_HEAD             = 2,
	TRES_ENEMY_DW407_REGION_MAX              = 3,
};

// Enum TresGame.ETresEnemydw407ViewWay
// NumValues: 0x0003
enum class ETresEnemydw407ViewWay : uint8
{
	TRES_ENEMY_DW407_VIEWWAY_SEPARATESETTING = 0,
	TRES_ENEMY_DW407_VIEWWAY_HEIGHTFIXED     = 1,
	TRES_ENEMY_DW407_VIEWWAY_MAX             = 2,
};

// Enum TresGame.ETresGimmickInstanceManagerInstanceState
// NumValues: 0x0003
enum class ETresGimmickInstanceManagerInstanceState : uint8
{
	Alive                                    = 0,
	Destroy                                  = 1,
	ETresGimmickInstanceManagerInstanceState_MAX = 2,
};

// Enum TresGame.ETresEnemyToyKind
// NumValues: 0x0010
enum class ETresEnemyToyKind : uint8
{
	TRES_ENEMY_TOY_KIND_UNKNOWN              = 0,
	TRES_ENEMY_TOY_KIND_MONSTER              = 1,
	TRES_ENEMY_TOY_KIND_ANGELICAMBER         = 2,
	TRES_ENEMY_TOY_KIND_BOUNCYPETS_PIGS      = 3,
	TRES_ENEMY_TOY_KIND_BOUNCYPETS_DOG       = 4,
	TRES_ENEMY_TOY_KIND_BOUNCYPETS_CAT       = 5,
	TRES_ENEMY_TOY_KIND_BOUNCYPETS_ELEPHANT  = 6,
	TRES_ENEMY_TOY_KIND_BOUNCYPETS_COW       = 7,
	TRES_ENEMY_TOY_KIND_BOUNCYPETS_FROG      = 8,
	TRES_ENEMY_TOY_KIND_PATCHWORKANIMALS_PANDA = 9,
	TRES_ENEMY_TOY_KIND_PATCHWORKANIMALS_LION = 10,
	TRES_ENEMY_TOY_KIND_ROBO_ELEPHANT        = 11,
	TRES_ENEMY_TOY_KIND_ROBO_FAN_WHITE       = 12,
	TRES_ENEMY_TOY_KIND_ROBO_FAN_BLUE        = 13,
	TRES_ENEMY_TOY_KIND_ROBO_FAN_GREEN       = 14,
	TRES_ENEMY_TOY_KIND_MAX                  = 15,
};

// Enum TresGame.ETresHologramSubAnimReplaceType
// NumValues: 0x0009
enum class ETresHologramSubAnimReplaceType : uint8
{
	None                                     = 0,
	LeftHand                                 = 1,
	RightHand                                = 2,
	LeftHand2                                = 3,
	RightHand2                               = 4,
	LeftHand3                                = 5,
	RightHand3                               = 6,
	Max                                      = 7,
	ETresHologramSubAnimReplaceType_MAX      = 8,
};

// Enum TresGame.EDancePerformType
// NumValues: 0x000F
enum class EDancePerformType : uint8
{
	NONE                                     = 0,
	SPIN_PERFORM                             = 1,
	STEP_PERFORM                             = 2,
	PAIR_IN                                  = 3,
	PAIR_LOOP                                = 4,
	PAIR_OUT                                 = 5,
	PAIR_OUTIN_OUT                           = 6,
	PAIR_OUTIN_IN                            = 7,
	PAIR_CHANGE                              = 8,
	PAIR_CHANGE_FAILED                       = 9,
	SPECIAL_MOVE_SUCCESS                     = 10,
	SITUATION_COMMAND                        = 11,
	RAPUNZEL_FINISH                          = 12,
	CLAP_ACTION                              = 13,
	EDancePerformType_MAX                    = 14,
};

// Enum TresGame.ETresRaDanceAreaType
// NumValues: 0x0009
enum class ETresRaDanceAreaType : uint8
{
	RA_DANCE_NONE                            = 0,
	RA_DANCE_NORMAL                          = 1,
	RA_DANCE_RETURN                          = 2,
	RA_DANCE_CENTER                          = 3,
	RA_DANCE_CENTER_OUT                      = 4,
	RA_DANCE_OUTFIELD                        = 5,
	RA_DANCE_RAPUNZEL                        = 6,
	RA_DANCE_FLYNN                           = 7,
	RA_DANCE_MAX                             = 8,
};

// Enum TresGame.EDanceActorAction
// NumValues: 0x0004
enum class EDanceActorAction : uint8
{
	NORMAL_STEP                              = 0,
	INVITE_1                                 = 1,
	INVITE_2                                 = 2,
	EDanceActorAction_MAX                    = 3,
};

// Enum TresGame.EDanceActorType
// NumValues: 0x0004
enum class EDanceActorType : uint8
{
	MALE                                     = 0,
	FEMALE                                   = 1,
	ANY                                      = 2,
	EDanceActorType_MAX                      = 3,
};

// Enum TresGame.ETresGimmickDistanceBetweenPlayer
// NumValues: 0x0005
enum class ETresGimmickDistanceBetweenPlayer : uint8
{
	None                                     = 0,
	Near                                     = 1,
	Middle                                   = 2,
	Far                                      = 3,
	ETresGimmickDistanceBetweenPlayer_MAX    = 4,
};

// Enum TresGame.ETresGimmickLookAtType
// NumValues: 0x0003
enum class ETresGimmickLookAtType : uint8
{
	GLTYPE_NONE                              = 0,
	GLTYPE_ALWAYS_TRUE                       = 1,
	GLTYPE_MAX                               = 2,
};

// Enum TresGame.ETresGimmickLookAtTrackingType
// NumValues: 0x0003
enum class ETresGimmickLookAtTrackingType : uint8
{
	GLTTYPE_NONE                             = 0,
	GLTTYPE_PLAYER                           = 1,
	GLTTYPE_MAX                              = 2,
};

// Enum TresGame.EDanceSpecialPerformType
// NumValues: 0x0004
enum class EDanceSpecialPerformType : uint8
{
	BARREL                                   = 0,
	FLAG                                     = 1,
	CART                                     = 2,
	EDanceSpecialPerformType_MAX             = 3,
};

// Enum TresGame.ETresUIHudDanceResult
// NumValues: 0x0006
enum class ETresUIHudDanceResult : uint8
{
	RankA                                    = 0,
	RankB                                    = 1,
	RankC                                    = 2,
	RankD                                    = 3,
	MAX                                      = 4,
	ETresUIHudDanceResult_MAX                = 5,
};

// Enum TresGame.EDanceClapMissionType
// NumValues: 0x0004
enum class EDanceClapMissionType : uint8
{
	PATTERN_1                                = 0,
	PATTERN_2                                = 1,
	PATTERN_3                                = 2,
	PATTERN_MAX                              = 3,
};

// Enum TresGame.ETresGumiShipCollisionShape
// NumValues: 0x0006
enum class ETresGumiShipCollisionShape : uint8
{
	CS_SPHERE                                = 0,
	CS_CAPSULE_1                             = 1,
	CS_CAPSULE_ROOT                          = 2,
	CS_BOX                                   = 3,
	CS_RING                                  = 4,
	CS_MAX                                   = 5,
};

// Enum TresGame.ETresGumiShipCollisionPriority
// NumValues: 0x0004
enum class ETresGumiShipCollisionPriority : uint8
{
	CP_HIGH                                  = 0,
	CP_NORMAL                                = 1,
	CP_LOW                                   = 2,
	CP_MAX                                   = 3,
};

// Enum TresGame.ETresGumiShipWeaponPrimType
// NumValues: 0x0008
enum class ETresGumiShipWeaponPrimType : uint8
{
	SEQUENCE                                 = 0,
	NORMAL_WEAPON                            = 1,
	SPECIAL_WEAPON                           = 2,
	AUTO_MULTI_LOCKON_WEAPON                 = 3,
	MANUAL_MULTI_LOCKON_WEAPON               = 4,
	NONE                                     = 5,
	TYPE_MAX                                 = 6,
	ETresGumiShipWeaponPrimType_MAX          = 7,
};

// Enum TresGame.ETresGumiShipWeaponSequencePort
// NumValues: 0x0006
enum class ETresGumiShipWeaponSequencePort : uint8
{
	WS_INDEX_1                               = 0,
	WS_INDEX_2                               = 1,
	WS_INDEX_3                               = 2,
	WS_INDEX_4                               = 3,
	WS_INDEX_SP                              = 4,
	WS_MAX                                   = 5,
};

// Enum TresGame.ETresGumiShipBadStateType
// NumValues: 0x0003
enum class ETresGumiShipBadStateType : uint8
{
	BS_NONE                                  = 0,
	BS_STUN                                  = 1,
	BS_MAX                                   = 2,
};

// Enum TresGame.ETresGumiShipReactionType
// NumValues: 0x0005
enum class ETresGumiShipReactionType : uint8
{
	RT_NONE                                  = 0,
	RT_BLOW_SMALL                            = 1,
	RT_BLOW_MIDDLE                           = 2,
	RT_BLOW_BIG                              = 3,
	RT_MAX                                   = 4,
};

// Enum TresGame.ETresGumiShipPlayerAccelerationType
// NumValues: 0x0005
enum class ETresGumiShipPlayerAccelerationType : uint8
{
	AT_NONE_TYPE                             = 0,
	AT_GEAR_CHANGE_TYPE                      = 1,
	AT_ACCELERATOR_TYPE                      = 2,
	AT_TYPE_MAX                              = 3,
	AT_MAX                                   = 4,
};

// Enum TresGame.ETresGumiShipPlayerMovementType
// NumValues: 0x0009
enum class ETresGumiShipPlayerMovementType : uint8
{
	MT_NONE_TYPE                             = 0,
	MT_DEFAULT_TYPE                          = 1,
	MT_EXPERT_TYPE                           = 2,
	MT_TRACKING_TYPE                         = 3,
	MT_RAIL_SLIDE_TYPE                       = 4,
	MT_RAIL_SLIDE_TYPE_TRACKING_LIKE         = 5,
	MT_DEBUG_TYPE                            = 6,
	MOVE_TYPE_MAX                            = 7,
	ETresGumiShipPlayerMovementType_MAX      = 8,
};

// Enum TresGame.ETresGumiShipSplineEventType
// NumValues: 0x0007
enum class ETresGumiShipSplineEventType : uint8
{
	ENEMY_MOVE_SPEED_UP_POINT                = 0,
	ENEMY_MOVE_SPEED_DOWN_POINT              = 1,
	ENEMY_ATTACK_CHECK_START_POINT           = 2,
	ENEMY_SPECIAL_EVENT_TRIGGER_POINT        = 3,
	ARRIVED_SPLINE_END_POINT                 = 4,
	SPLINE_ADDITIONAL_DATA_KIND_MAX          = 5,
	ETresGumiShipSplineEventType_MAX         = 6,
};

// Enum TresGame.ETresGumiShipEnemyStateID
// NumValues: 0x0021
enum class ETresGumiShipEnemyStateID : uint8
{
	BLANK_STATE                              = 0,
	DEAD_STATE                               = 1,
	APPEAR_STATE                             = 2,
	DISAPPEAR_STATE                          = 3,
	IDLING_STATE                             = 4,
	CINEMATIC_MODE_STATE                     = 5,
	FIELD_ENCOUNT_SYMBOL_STATE               = 6,
	ATTACK1_STATE                            = 7,
	ATTACK2_STATE                            = 8,
	ATTACK3_STATE                            = 9,
	ATTACK4_STATE                            = 10,
	ATTACK5_STATE                            = 11,
	ATTACK6_STATE                            = 12,
	ATTACK7_STATE                            = 13,
	ATTACK8_STATE                            = 14,
	ATTACK9_STATE                            = 15,
	ATTACK10_STATE                           = 16,
	ACTION1_STATE                            = 17,
	ACTION2_STATE                            = 18,
	ACTION3_STATE                            = 19,
	ACTION4_STATE                            = 20,
	ACTION5_STATE                            = 21,
	ACTION6_STATE                            = 22,
	ACTION7_STATE                            = 23,
	SPECIAL1_STATE                           = 24,
	SPECIAL2_STATE                           = 25,
	SPECIAL3_STATE                           = 26,
	SPECIAL4_STATE                           = 27,
	SPECIAL5_STATE                           = 28,
	SPECIAL6_STATE                           = 29,
	SPECIAL7_STATE                           = 30,
	STATE_ID_MAX                             = 31,
	ETresGumiShipEnemyStateID_MAX            = 32,
};

// Enum TresGame.ETresGumiShipEnemyID
// NumValues: 0x001E
enum class ETresGumiShipEnemyID : uint8
{
	ENEMY_ID_NONE                            = 0,
	E_GM601                                  = 1,
	E_GM602                                  = 2,
	E_GM603                                  = 3,
	E_GM604                                  = 4,
	E_GM605                                  = 5,
	E_GM606                                  = 6,
	E_GM607                                  = 7,
	E_GM608                                  = 8,
	E_GM609                                  = 9,
	E_GM610                                  = 10,
	E_GM611                                  = 11,
	E_GM612                                  = 12,
	E_GM613                                  = 13,
	E_GM614                                  = 14,
	E_GM615                                  = 15,
	E_GM616                                  = 16,
	E_GM617                                  = 17,
	E_GM618                                  = 18,
	E_GM632                                  = 19,
	E_GM619                                  = 20,
	E_GM620                                  = 21,
	E_GM621                                  = 22,
	E_GM622                                  = 23,
	E_GM623                                  = 24,
	E_GM624                                  = 25,
	E_GM625                                  = 26,
	E_GM626                                  = 27,
	ENEMY_ID_MAX                             = 28,
	ETresGumiShipEnemyID_MAX                 = 29,
};

// Enum TresGame.ETresGumiShipEnemyLookAtType
// NumValues: 0x0005
enum class ETresGumiShipEnemyLookAtType : uint8
{
	KEEP_SPLINE_MOVE_DIRECTION               = 0,
	TURN_TO_GUMI_SHIP_PLAYER                 = 1,
	TURN_TO_CAMERA_OFFSET_LOCATION           = 2,
	DIRECTION_TYPE_MAX                       = 3,
	ETresGumiShipEnemyLookAtType_MAX         = 4,
};

// Enum TresGame.ETresGumiShipEnemyStateResult
// NumValues: 0x0004
enum class ETresGumiShipEnemyStateResult : uint8
{
	RESULT_SUCCESS                           = 0,
	RESULT_FAILED                            = 1,
	RESULT_ABORT                             = 2,
	RESULT_MAX                               = 3,
};

// Enum TresGame.ETresGumiShipGimmickID
// NumValues: 0x0054
enum class ETresGumiShipGimmickID : uint8
{
	G_GM_000                                 = 0,
	G_GM_002                                 = 1,
	G_GM_020                                 = 2,
	G_GM_040                                 = 3,
	G_GM_050                                 = 4,
	G_GM_100                                 = 20,
	G_GM_101                                 = 21,
	G_GM_103                                 = 22,
	G_GM_104                                 = 23,
	G_GM_105_0                               = 24,
	G_GM_105_1                               = 25,
	G_GM_105_2                               = 26,
	G_GM_120                                 = 27,
	G_GM_121                                 = 28,
	G_GM_130                                 = 29,
	G_GM_132                                 = 30,
	G_GM_140                                 = 31,
	G_GM_140_1                               = 32,
	G_GM_140_2                               = 33,
	G_GM_140_3                               = 34,
	G_GM_141                                 = 35,
	G_GM_141_2                               = 36,
	G_GM_141_3                               = 37,
	G_GM_141_4                               = 38,
	G_GM_141_5                               = 39,
	G_GM_142                                 = 40,
	G_GM_142_3                               = 41,
	G_GM_200                                 = 70,
	G_GM_211                                 = 71,
	G_GM_212                                 = 72,
	G_GM_221                                 = 73,
	G_GM_222                                 = 74,
	G_GM_240                                 = 75,
	G_GM_251                                 = 76,
	G_GM_252                                 = 77,
	G_GM_253_0                               = 78,
	G_GM_253_1                               = 79,
	G_GM_253_2                               = 80,
	G_GM_253_3                               = 81,
	G_GM_253_4                               = 82,
	G_GM_253_5                               = 83,
	G_GM_253_6_0                             = 84,
	G_GM_253_6_1                             = 85,
	G_GM_253_6_2                             = 86,
	G_GM_253_6_3                             = 87,
	G_GM_253_7_0                             = 88,
	G_GM_253_7_1                             = 89,
	G_GM_253_8_0                             = 90,
	G_GM_253_9_0                             = 91,
	G_GM_253_9_1                             = 92,
	G_GM_256_0                               = 93,
	G_GM_256_1                               = 94,
	G_GM_256_2                               = 95,
	G_GM_256_3                               = 96,
	G_GM_256_4                               = 97,
	G_GM_256_5                               = 98,
	G_GM_256_6_0                             = 99,
	G_GM_256_6_1                             = 100,
	G_GM_256_6_2                             = 101,
	G_GM_256_6_3                             = 102,
	G_GM_256_7_0                             = 103,
	G_GM_256_7_1                             = 104,
	G_GM_256_8_0                             = 105,
	G_GM_256_9_0                             = 106,
	G_GM_256_9_1                             = 107,
	G_GM_260                                 = 108,
	G_GM_261                                 = 109,
	G_GM_262                                 = 110,
	G_GM_263                                 = 111,
	G_GM_264                                 = 112,
	G_GM_265                                 = 113,
	G_GM_266                                 = 114,
	G_GM_266_1                               = 115,
	G_GM_266_2                               = 116,
	G_GM_266_3                               = 117,
	G_GM_267                                 = 118,
	G_GM_267_1                               = 119,
	G_GM_268_0                               = 120,
	G_GM_269                                 = 121,
	G_GM_269_1                               = 122,
	G_GM_300                                 = 170,
	G_GM_310                                 = 171,
	G_GM_NONE                                = 200,
	G_GM_MAX                                 = 201,
};

// Enum TresGame.ETresGumiShipBattleMissionEndFactorType
// NumValues: 0x0006
enum class ETresGumiShipBattleMissionEndFactorType : uint8
{
	BMEF_NONE                                = 0,
	BMEF_RETRY                               = 1,
	BMEF_QUIT                                = 2,
	BMEF_SEARCH_RESTART                      = 3,
	BMEF_NORMAL                              = 4,
	BMEF_MAX                                 = 5,
};

// Enum TresGame.ETresGumiShipBattleMissionRankType
// NumValues: 0x0006
enum class ETresGumiShipBattleMissionRankType : uint8
{
	BMRT_A                                   = 0,
	BMRT_B                                   = 1,
	BMRT_C                                   = 2,
	BMRT_D                                   = 3,
	BMRT_E                                   = 4,
	BMRT_MAX                                 = 5,
};

// Enum TresGame.ETresGumiShipEnemyBattleFinishType
// NumValues: 0x0005
enum class ETresGumiShipEnemyBattleFinishType : uint8
{
	BATTLE_QUIT_SELECT                       = 0,
	BATTLE_RETRY_SELECT                      = 1,
	RETURN_FIELD_QUEST_SELECT                = 2,
	BATTLE_FINISH_TYPE_MAX                   = 3,
	ETresGumiShipEnemyBattleFinishType_MAX   = 4,
};

// Enum TresGame.ETresGumiShipEnemyTerritoryID
// NumValues: 0x0037
enum class ETresGumiShipEnemyTerritoryID : uint8
{
	E_GM01_TE_01                             = 0,
	E_GM01_TE_02                             = 1,
	E_GM01_TE_03                             = 2,
	E_GM01_TE_04                             = 3,
	E_GM01_TE_05                             = 4,
	E_GM01_TE_06                             = 5,
	E_GM01_TE_07                             = 6,
	E_GM01_TE_08                             = 7,
	E_GM01_TE_09                             = 8,
	E_GM01_TE_10                             = 9,
	E_GM01_TE_11                             = 10,
	E_GM01_TE_12                             = 11,
	E_GM02_TE_01                             = 12,
	E_GM02_TE_02                             = 13,
	E_GM02_TE_03                             = 14,
	E_GM02_TE_04                             = 15,
	E_GM02_TE_05                             = 16,
	E_GM02_TE_06                             = 17,
	E_GM02_TE_07                             = 18,
	E_GM02_TE_08                             = 19,
	E_GM02_TE_09                             = 20,
	E_GM02_TE_10                             = 21,
	E_GM02_TE_11                             = 22,
	E_GM02_TE_12                             = 23,
	E_GM02_TE_13                             = 24,
	E_GM02_TE_14                             = 25,
	E_GM02_TE_15                             = 26,
	E_GM02_TE_16                             = 27,
	E_GM02_TE_17                             = 28,
	E_GM03_TE_01                             = 29,
	E_GM03_TE_02                             = 30,
	E_GM03_TE_03                             = 31,
	E_GM03_TE_04                             = 32,
	E_GM03_TE_05                             = 33,
	E_GM03_TE_06                             = 34,
	E_GM03_TE_07                             = 35,
	E_GM03_TE_08                             = 36,
	E_GM03_TE_09                             = 37,
	E_GM03_TE_10                             = 38,
	E_GM03_TE_11                             = 39,
	E_GM03_TE_12                             = 40,
	E_GM04_TE_01                             = 41,
	E_GM04_TE_02                             = 42,
	E_GM04_TE_03                             = 43,
	E_GM04_TE_04                             = 44,
	E_GM04_TE_05                             = 45,
	E_GM04_TE_06                             = 46,
	E_GM04_TE_07                             = 47,
	E_GM04_TE_08                             = 48,
	E_GM04_TE_09                             = 49,
	E_GM04_TE_10                             = 50,
	E_GM04_TE_11                             = 51,
	E_GM04_TE_12                             = 52,
	ENEMY_TERRITORY_MAX                      = 53,
	ETresGumiShipEnemyTerritoryID_MAX        = 54,
};

// Enum TresGame.ETresGumiShipEnemyBattleStartType
// NumValues: 0x0005
enum class ETresGumiShipEnemyBattleStartType : uint8
{
	ENEMY_SYMBOL_ENCOUNTER                   = 0,
	BOSS_ENEMY_BATTLE_TRIGGER                = 1,
	FIELD_TYPE_ENEMY_BATTLE_TRIGGER          = 2,
	BATTLE_START_TYPE_MAX                    = 3,
	ETresGumiShipEnemyBattleStartType_MAX    = 4,
};

// Enum TresGame.ETresGumiShipBattleAreaState
// NumValues: 0x0005
enum class ETresGumiShipBattleAreaState : uint8
{
	ACTIVE                                   = 0,
	LEAVE_GUMI_SHIP                          = 1,
	ENEMY_DISAPPEAR                          = 2,
	NON_ACTIVE                               = 3,
	ETresGumiShipBattleAreaState_MAX         = 4,
};

// Enum TresGame.ETresGumiShipRailSlideType
// NumValues: 0x0005
enum class ETresGumiShipRailSlideType : uint8
{
	RST_NONE                                 = 0,
	RST_ROUTE                                = 1,
	RST_TRACKING                             = 2,
	RST_SP_TRACKING                          = 3,
	RST_MAX                                  = 4,
};

// Enum TresGame.ETresGumiShipConsumptionType
// NumValues: 0x0004
enum class ETresGumiShipConsumptionType : uint8
{
	CT_CHARGE_TYPE                           = 0,
	CT_COUNT_TYPE                            = 1,
	CT_TIME_TYPE                             = 2,
	CT_MAX                                   = 3,
};

// Enum TresGame.ETresGumiShipBonusKind
// NumValues: 0x0004
enum class ETresGumiShipBonusKind : uint8
{
	BK_DEFEAD_COUNT                          = 0,
	BK_QUICK_TEAM_DEFEAD                     = 1,
	BK_AREA_DEFEAD                           = 2,
	BK_MAX                                   = 3,
};

// Enum TresGame.ETresGumiShipBonusType
// NumValues: 0x0004
enum class ETresGumiShipBonusType : uint8
{
	BONUS_DEFEAT_ENEMY                       = 0,
	BONUS_DESTROY_PARTS                      = 1,
	BONUS_DEFEAT_GROUP                       = 2,
	BONUS_MAX                                = 3,
};

// Enum TresGame.ETresGameHelp
// NumValues: 0x0094
enum class ETresGameHelp : uint8
{
	Help_00100                               = 0,
	Help_00200                               = 1,
	Help_00300                               = 2,
	Help_00400                               = 3,
	Help_00450                               = 4,
	Help_00500                               = 5,
	Help_00600                               = 6,
	Help_00700                               = 7,
	Help_00800                               = 8,
	Help_00900                               = 9,
	Help_01000                               = 10,
	Help_01100                               = 11,
	Help_01200                               = 12,
	Help_01300                               = 13,
	Help_01400                               = 14,
	Help_01500                               = 15,
	Help_01600                               = 16,
	Help_01700                               = 17,
	Help_01800                               = 18,
	Help_01900                               = 19,
	Help_10100                               = 20,
	Help_10101                               = 21,
	Help_10102                               = 22,
	Help_10103                               = 23,
	Help_10104                               = 24,
	Help_10200                               = 25,
	Help_10300                               = 26,
	Help_10400                               = 27,
	Help_10500                               = 28,
	Help_10600                               = 29,
	Help_10700                               = 30,
	Help_20100                               = 31,
	Help_20200                               = 32,
	Help_20300                               = 33,
	Help_20400                               = 34,
	Help_20500                               = 35,
	Help_20600                               = 36,
	Help_20700                               = 37,
	Help_20800                               = 38,
	Help_20900                               = 39,
	Help_21000                               = 40,
	Help_21100                               = 41,
	Help_21200                               = 42,
	Help_21300                               = 43,
	Help_21400                               = 44,
	Help_30100                               = 45,
	Help_30200                               = 46,
	Help_30201                               = 47,
	Help_30300                               = 48,
	Help_30301                               = 49,
	Help_30302                               = 50,
	Help_30303                               = 51,
	Help_30400                               = 52,
	Help_30401                               = 53,
	Help_30402                               = 54,
	Help_30500                               = 55,
	Help_30501                               = 56,
	Help_30600                               = 57,
	Help_30601                               = 58,
	Help_30700                               = 59,
	Help_30701                               = 60,
	Help_30702                               = 61,
	Help_30703                               = 62,
	Help_30704                               = 63,
	Help_30705                               = 64,
	Help_40100                               = 65,
	Help_40101                               = 66,
	Help_40102                               = 67,
	Help_40103                               = 68,
	Help_40104                               = 69,
	Help_40105                               = 70,
	Help_40200                               = 71,
	Help_40201                               = 72,
	Help_40202                               = 73,
	Help_40203                               = 74,
	Help_40300                               = 75,
	Help_40301                               = 76,
	Help_40302                               = 77,
	Help_40303                               = 78,
	Help_40304                               = 79,
	Help_40305                               = 80,
	Help_40306                               = 81,
	Help_40307                               = 82,
	Help_40308                               = 83,
	Help_40309                               = 84,
	Help_40310                               = 85,
	Help_40311                               = 86,
	Help_40312                               = 87,
	Help_40313                               = 88,
	Help_40314                               = 89,
	Help_40315                               = 90,
	Help_40316                               = 91,
	Help_40317                               = 92,
	Help_40318                               = 93,
	Help_40319                               = 94,
	Help_40320                               = 95,
	Help_40321                               = 96,
	Help_40322                               = 97,
	Help_50100                               = 98,
	Help_50200                               = 99,
	Help_50300                               = 100,
	Help_50400                               = 101,
	Help_50500                               = 102,
	Help_50600                               = 103,
	Help_50700                               = 104,
	Help_50800                               = 105,
	Help_50900                               = 106,
	Help_51000                               = 107,
	Help_51100                               = 108,
	Help_51200                               = 109,
	Help_51300                               = 110,
	Help_51400                               = 111,
	Help_51500                               = 112,
	Help_51600                               = 113,
	Help_55100                               = 114,
	Help_55200                               = 115,
	Help_55300                               = 116,
	Help_55400                               = 117,
	Help_55500                               = 118,
	Help_55600                               = 119,
	Help_55700                               = 120,
	Help_55800                               = 121,
	Help_55900                               = 122,
	Help_56000                               = 123,
	Help_56100                               = 124,
	Help_00650                               = 125,
	Help_60100                               = 126,
	Help_60200                               = 127,
	Help_60300                               = 128,
	Help_60400                               = 129,
	Help_60450                               = 130,
	Help_60500                               = 131,
	Help_60600                               = 132,
	Help_60610                               = 133,
	Help_60620                               = 134,
	Help_60700                               = 135,
	Help_10110                               = 136,
	Help_10111                               = 137,
	Help_10112                               = 138,
	Help_50110                               = 139,
	Help_70000                               = 140,
	Help_70100                               = 141,
	Help_70200                               = 142,
	Help_70300                               = 143,
	Help_70400                               = 144,
	Max                                      = 145,
	Invalid                                  = 255,
	ETresGameHelp_MAX                        = 256,
};

// Enum TresGame.ETresGumiShipMuzzleInfoCalcType
// NumValues: 0x0003
enum class ETresGumiShipMuzzleInfoCalcType : uint8
{
	MICT_RROT_RLOC                           = 0,
	MICT_RLOC_RROT                           = 1,
	MICT_MAX                                 = 2,
};

// Enum TresGame.WinniePuzzleComboEvalution
// NumValues: 0x0005
enum class EWinniePuzzleComboEvalution : uint8
{
	None                                     = 0,
	Good                                     = 1,
	Cool                                     = 2,
	Fantastic                                = 3,
	WinniePuzzleComboEvalution_MAX           = 4,
};

// Enum TresGame.WinniePuzzleScoreEvalutionInOneTurnJudgementMethod
// NumValues: 0x0003
enum class EWinniePuzzleScoreEvalutionInOneTurnJudgementMethod : uint8
{
	ComboDependency                          = 0,
	ScoreDependency                          = 1,
	WinniePuzzleScoreEvalutionInOneTurnJudgementMethod_MAX = 2,
};

// Enum TresGame.WinniePuzzleUnitScoreSizeJudgementMethod
// NumValues: 0x0003
enum class EWinniePuzzleUnitScoreSizeJudgementMethod : uint8
{
	UnitNumDependency                        = 0,
	ScoreDependency                          = 1,
	WinniePuzzleUnitScoreSizeJudgementMethod_MAX = 2,
};

// Enum TresGame.ETresForwardDirection
// NumValues: 0x0004
enum class ETresForwardDirection : uint8
{
	X_FORWAED                                = 0,
	Y_FORWAED                                = 1,
	Z_FORWAED                                = 2,
	ETresForwardDirection_MAX                = 3,
};

// Enum TresGame.ETresNavLinkSegment_Common
// NumValues: 0x0003
enum class ETresNavLinkSegment_Common : uint8
{
	NavLinkSegment_Left                      = 0,
	NavLinkSegment_Right                     = 1,
	NavLinkSegment_MAX                       = 2,
};

// Enum TresGame.SEQUENTIAL_EXEC_GET_TARGET_ACTOR
// NumValues: 0x0003
enum class ESEQUENTIAL_EXEC_GET_TARGET_ACTOR : uint8
{
	Blackboard                               = 0,
	EQS_DefaultTargetSelection               = 1,
	SEQUENTIAL_EXEC_GET_TARGET_MAX           = 2,
};

// Enum TresGame.SEQUENTIAL_EXEC_TASK_MODE
// NumValues: 0x0009
enum class ESEQUENTIAL_EXEC_TASK_MODE : uint8
{
	None                                     = 0,
	MoveTo                                   = 1,
	MoveToWaitAnimEnd                        = 2,
	TurnTo                                   = 3,
	SetTempDestination_Querier               = 4,
	SetTempDirection_Querier                 = 5,
	TerminateTask                            = 6,
	SkipSequence                             = 7,
	SEQUENTIAL_EXEC_TASK_MAX                 = 8,
};

// Enum TresGame.EQS_PARAM_VALUE_Enum
// NumValues: 0x0004
enum class EQS_PARAM_VALUE_Enum : uint8
{
	Literal                                  = 0,
	DistanceTargetToQuerier                  = 1,
	DistanceTargetToQuerierPlusMargin        = 2,
	EQS_PARAM_VALUE_MAX                      = 3,
};

// Enum TresGame.EQS_PARAM_NAME_Enum
// NumValues: 0x000C
enum class EQS_PARAM_NAME_Enum : uint8
{
	ONRING_MINRADIUS                         = 0,
	ONRING_MAXRADIUS                         = 1,
	ONRING_MINRADIUSITEMSPACING              = 2,
	ONRING_ANGLE                             = 3,
	EQ_PAWNDISTANCE                          = 4,
	RANGE                                    = 5,
	MINDISTANCE_FLOATVALUEMIN                = 6,
	MINDISTANCE_FLOATVALUEMAX                = 7,
	DOT_SCORINGFACTOR                        = 8,
	DOT_SCORINGFACTOR2                       = 9,
	NOISE_SCORINGFACTOR                      = 10,
	EQS_PARAM_NAME_MAX                       = 11,
};

// Enum TresGame.ETresAbilityEquipType
// NumValues: 0x0004
enum class ETresAbilityEquipType : uint8
{
	NORMAL                                   = 0,
	AUTO                                     = 1,
	_MAX                                     = 2,
	ETresAbilityEquipType_MAX                = 3,
};

// Enum TresGame.ETresTextAbilityKind
// NumValues: 0x0085
enum class ETresTextAbilityKind : uint8
{
	NONE                                     = 0,
	TEXT_SHOOTFLOW_KB00_00                   = 1,
	TEXT_SHOOTFLOW_KB09_00                   = 2,
	TEXT_SHOOTFLOW_KB07_00                   = 3,
	TEXT_SHOOTFLOW_KB01_00                   = 4,
	TEXT_SHOOTFLOW_KB08_00                   = 5,
	TEXT_SHOOTFLOW_KB11_00                   = 6,
	TEXT_SHOOTFLOW_KB06_00                   = 7,
	TEXT_SHOOTFLOW_KB05_00                   = 8,
	TEXT_SHOOTFLOW_KB17_00                   = 9,
	TEXT_SHOOTFLOW_KB03_00                   = 10,
	TEXT_SHOOTFLOW_KB10_00                   = 11,
	TEXT_SHOOTFLOW_KB02_00                   = 12,
	TEXT_SHOOTFLOW_KB04_00                   = 13,
	TEXT_SHOOTFLOW_KB00_01                   = 14,
	TEXT_SHOOTFLOW_KB17_01                   = 15,
	TEXT_SHOOTFLOW_KB01_01                   = 16,
	TEXT_SHOOTFLOW_KB07_01                   = 17,
	TEXT_SHOOTFLOW_KB01_02                   = 18,
	TEXT_SHOOTFLOW_KB07_02                   = 19,
	TEXT_SHOOTFLOW_KB02_01                   = 20,
	TEXT_SHOOTFLOW_KB11_01                   = 21,
	TEXT_SHOOTFLOW_KB03_01                   = 22,
	TEXT_SHOOTFLOW_KB10_01                   = 23,
	TEXT_SHOOTFLOW_KB09_01                   = 24,
	TEXT_SHOOTFLOW_KB08_01                   = 25,
	TEXT_SHOOTFLOW_KB04_01                   = 26,
	TEXT_SHOOTFLOW_KB06_01                   = 27,
	TEXT_SHOOTFLOW_KB05_01                   = 28,
	TEXT_SHOOTFLOW_KB14_00                   = 29,
	TEXT_FORM_EXPLOSION                      = 30,
	TEXT_FORM_STRIDE_BREAK                   = 31,
	TEXT_FORM_RIPPLE_FRIVE                   = 32,
	TEXT_FORM_HURRICANE_PERIOD               = 33,
	TEXT_FORM_AERIAL_FINISH                  = 34,
	TEXT_FORM_MAGNE_SPLASH                   = 35,
	TEXT_FORM_STUN_IMPACT                    = 36,
	TEXT_FORM_SONIC_RAVE                     = 37,
	TEXT_FORM_LAST_ARCANUM                   = 38,
	TEXT_FORM_UNION_DISCORD                  = 39,
	TEXT_ACTION_KB0000                       = 40,
	TEXT_ACTION_KB0001                       = 41,
	TEXT_ACTION_KB0002                       = 42,
	TEXT_ACTION_KB0003                       = 43,
	TEXT_ACTION_KB0004                       = 44,
	TEXT_ACTION_KB0005                       = 45,
	TEXT_ACTION_KB0006                       = 46,
	TEXT_ACTION_KB0007                       = 47,
	TEXT_ACTION_KB0008                       = 48,
	TEXT_ACTION_KB0009                       = 49,
	TEXT_ACTION_KB0010                       = 50,
	TEXT_ACTION_KB0011                       = 51,
	TEXT_ACTION_KB0012                       = 52,
	TEXT_ACTION_KB0013                       = 53,
	TEXT_ACTION_KB0014                       = 54,
	TEXT_ACTION_KB0015                       = 55,
	TEXT_ACTION_KB0016                       = 56,
	TEXT_ACTION_KB0017                       = 57,
	TEXT_ACTION_KB0018                       = 58,
	TEXT_ACTION_KB0019                       = 59,
	TEXT_ACTION_KB0020                       = 60,
	TEXT_ACTION_KB0021                       = 61,
	TEXT_ACTION_KB0022                       = 62,
	TEXT_ACTION_KB0023                       = 63,
	TEXT_ACTION_KB0024                       = 64,
	TEXT_ACTION_KB0025                       = 65,
	TEXT_ACTION_KB0026                       = 66,
	TEXT_ACTION_KB0027                       = 67,
	TEXT_ACTION_KB0028                       = 68,
	TEXT_ACTION_KB0029                       = 69,
	TEXT_ACTION_KB0030                       = 70,
	TEXT_ACTION_KB0031                       = 71,
	TEXT_ACTION_KB0032                       = 72,
	TEXT_ACTION_KB0033                       = 73,
	TEXT_ACTION_KB0034                       = 74,
	TEXT_ACTION_KB0035                       = 75,
	TEXT_ACTION_KB0036                       = 76,
	TEXT_ACTION_KB0037                       = 77,
	TEXT_ACTION_KB0038                       = 78,
	TEXT_ACTION_KB0039                       = 79,
	TEXT_ACTION_KB0040                       = 80,
	TEXT_ACTION_KB0041                       = 81,
	TEXT_ACTION_KB0042                       = 82,
	TEXT_ACTION_KB0043                       = 83,
	TEXT_ACTION_KB0044                       = 84,
	TEXT_ACTION_KB0045                       = 85,
	TEXT_ACTION_KB0046                       = 86,
	TEXT_ACTION_KB0047                       = 87,
	TEXT_ACTION_SLASH_DODGE                  = 88,
	TEXT_ACTION_BACK_SLIDE                   = 89,
	TEXT_ACTION_BACK_SLASH                   = 90,
	TEXT_ACTION_REFLECT                      = 91,
	TEXT_ACTION_BARRIER_CRACKER              = 92,
	TEXT_ACTION_FINISH_ARTS                  = 93,
	TEXT_MOVE_TELEPO                         = 94,
	TEXT_MOVE_ACTIVE_HOVER                   = 95,
	TEXT_MOVE_ICE_SLIDE                      = 96,
	TEXT_SUPPORT_FREE_FINISH                 = 97,
	TEXT_SUPPORT_FULL_CARE                   = 98,
	TEXT_SUPPORT_FULL_REFRESH                = 99,
	TEXT_SUPPORT_HONEY_JAM                   = 100,
	TEXT_SUPPORT_MULTI_LOCK                  = 101,
	TEXT_SUPPORT_GUARD_BREAK                 = 102,
	TEXT_SUPPORT_TRANSFORM                   = 103,
	TEXT_SUPPORT_RISK_CHARGE                 = 104,
	TEXT_SHOOTFLOW_KB12_00                   = 105,
	TEXT_SHOOTFLOW_KB13_00                   = 106,
	TEXT_SHOOTFLOW_KB12_01                   = 107,
	TEXT_ACTION_FM0100                       = 108,
	TEXT_ACTION_FM0101                       = 109,
	TEXT_ACTION_FM0102                       = 110,
	TEXT_ACTION_FM0103                       = 111,
	TEXT_ACTION_FM0104                       = 112,
	TEXT_ACTION_FM0105                       = 113,
	TEXT_ACTION_FM0106                       = 114,
	TEXT_MOVE_FM0100                         = 115,
	TEXT_ACTION_FM0107                       = 116,
	TEXT_ACTION_FM0108                       = 117,
	TEXT_ACTION_FM0109                       = 118,
	TEXT_ACTION_FM0110                       = 119,
	TEXT_ACTION_FM0200                       = 120,
	TEXT_ACTION_FM0201                       = 121,
	TEXT_ACTION_FM0202                       = 122,
	TEXT_ACTION_FM0203                       = 123,
	TEXT_ACTION_FM0204                       = 124,
	TEXT_ACTION_FM0205                       = 125,
	TEXT_ACTION_FM0206                       = 126,
	TEXT_MOVE_FM0200                         = 127,
	TEXT_ACTION_FM0207                       = 128,
	TEXT_ACTION_FM0208                       = 129,
	TEXT_ACTION_FM0209                       = 130,
	_MAX                                     = 131,
	ETresTextAbilityKind_MAX                 = 132,
};

// Enum TresGame.ETresAbilityCategory
// NumValues: 0x0005
enum class ETresAbilityCategory : uint8
{
	ACTION                                   = 0,
	MOVE                                     = 1,
	SUPPORT                                  = 2,
	_MAX                                     = 3,
	ETresAbilityCategory_MAX                 = 4,
};

// Enum TresGame.ETresAchievement
// NumValues: 0x0036
enum class ETresAchievement : uint8
{
	ACH_00                                   = 0,
	ACH_01                                   = 1,
	ACH_02                                   = 2,
	ACH_03                                   = 3,
	ACH_04                                   = 4,
	ACH_05                                   = 5,
	ACH_06                                   = 6,
	ACH_07                                   = 7,
	ACH_08                                   = 8,
	ACH_09                                   = 9,
	ACH_10                                   = 10,
	ACH_11                                   = 11,
	ACH_12                                   = 12,
	ACH_13                                   = 13,
	ACH_14                                   = 14,
	ACH_15                                   = 15,
	ACH_16                                   = 16,
	ACH_17                                   = 17,
	ACH_18                                   = 18,
	ACH_19                                   = 19,
	ACH_20                                   = 20,
	ACH_21                                   = 21,
	ACH_22                                   = 22,
	ACH_23                                   = 23,
	ACH_24                                   = 24,
	ACH_25                                   = 25,
	ACH_26                                   = 26,
	ACH_27                                   = 27,
	ACH_28                                   = 28,
	ACH_29                                   = 29,
	ACH_30                                   = 30,
	ACH_31                                   = 31,
	ACH_32                                   = 32,
	ACH_33                                   = 33,
	ACH_34                                   = 34,
	ACH_35                                   = 35,
	ACH_36                                   = 36,
	ACH_37                                   = 37,
	ACH_38                                   = 38,
	ACH_39                                   = 39,
	ACH_40                                   = 40,
	ACH_41                                   = 41,
	ACH_42                                   = 42,
	ACH_43                                   = 43,
	ACH_44                                   = 44,
	ACH_45                                   = 45,
	ACH_46                                   = 46,
	ACH_47                                   = 47,
	ACH_48                                   = 48,
	ACH_49                                   = 49,
	ACH_50                                   = 50,
	ACH_51                                   = 51,
	Max                                      = 52,
	ETresAchievement_MAX                     = 53,
};

// Enum TresGame.EBX901_CommonAction
// NumValues: 0x0004
enum class EBX901_CommonAction : uint8
{
	EBX901_CommonAction_ResetBoolProperty    = 0,
	EBX901_CommonAction_BlockEffect          = 1,
	EBX901_CommonAction_BlockEffect_Wing     = 2,
	EBX901_CommonAction_MAX                  = 3,
};

// Enum TresGame.ETresEnemyEx009ActionKind
// NumValues: 0x0005
enum class ETresEnemyEx009ActionKind : uint8
{
	Singleshot_One                           = 0,
	Right_Step                               = 1,
	Left_Step                                = 2,
	MAX                                      = 3,
	ETresEnemyEx009ActionKind_MAX            = 4,
};

// Enum TresGame.ETresEnemyEx016ActionKind
// NumValues: 0x0003
enum class ETresEnemyEx016ActionKind : uint8
{
	Footwork_Loop                            = 0,
	MAX                                      = 1,
	ETresEnemyEx016ActionKind_MAX            = 2,
};

// Enum TresGame.ECommonAction_e_ex306
// NumValues: 0x0004
enum class ECommonAction_e_ex306 : uint8
{
	ECommonAction_e_ex306_ChangeDefaultBodyReactionType = 0,
	ECommonAction_e_ex306_SpawnClaymore      = 1,
	ECommonAction_e_ex306_DestroyClaymore    = 2,
	ECommonAction_e_ex306_MAX                = 3,
};

// Enum TresGame.EEX354_CommonAction
// NumValues: 0x0008
enum class EEX354_CommonAction : uint8
{
	EEX354_CommonAction_ChangeField_Standard = 0,
	EEX354_CommonAction_ChangeField_Narrow   = 1,
	EEX354_CommonAction_ChangeField_Doughnut = 2,
	EEX354_CommonAction_FinishQuickBattle    = 3,
	EEX354_CommonAction_BodyNoReaction       = 4,
	EEX354_CommonAction_NoAppearOnRevengeWarp = 5,
	EEX354_CommonAction_ResetBodyReaction    = 6,
	EEX354_CommonAction_MAX                  = 7,
};

// Enum TresGame.ECommonAction_e_ex355
// NumValues: 0x000C
enum class ECommonAction_e_ex355 : uint8
{
	ECommonAction_e_ex355_ChangeDefaultBodyReactionType = 0,
	ECommonAction_e_ex355_SpawnClaymore      = 1,
	ECommonAction_e_ex355_DestroyClaymore    = 2,
	ECommonAction_e_ex355_ShowBerserkGage    = 3,
	ECommonAction_e_ex355_InitBerserkGage    = 4,
	ECommonAction_e_ex355_SetBodyTypeNormal  = 5,
	ECommonAction_e_ex355_SetBodyTypeBerserk = 6,
	ECommonAction_e_ex355_SetBodyTypeBlue    = 7,
	ECommonAction_e_ex355_SetBodyTypeStun    = 8,
	ECommonAction_e_ex355_NotifyHpDownAIChange = 9,
	ECommonAction_e_ex355_ResetBodyReactionType = 10,
	ECommonAction_e_ex355_MAX                = 11,
};

// Enum TresGame.EEX359_CommonAction
// NumValues: 0x0005
enum class EEX359_CommonAction : uint8
{
	EEX359_CommonAction_LockonOn             = 0,
	EEX359_CommonAction_LockonOff            = 1,
	EEX359_CommonAction_SceneChangeStart     = 2,
	EEX359_CommonAction_SceneChangeEnd       = 3,
	EEX359_CommonAction_MAX                  = 4,
};

// Enum TresGame.EEX731_CommonAction
// NumValues: 0x0003
enum class EEX731_CommonAction : uint8
{
	EEX731_CommonAction_Warp                 = 0,
	EEX731_CommonAction_ModeChange           = 1,
	EEX731_CommonAction_MAX                  = 2,
};

// Enum TresGame.EEX734_CommonAction
// NumValues: 0x0002
enum class EEX734_CommonAction : uint8
{
	EEX734_CommonAction_ModeChange           = 0,
	EEX734_CommonAction_MAX                  = 1,
};

// Enum TresGame.ETornado_CommonAction
// NumValues: 0x000A
enum class ETornado_CommonAction : uint8
{
	ETornado_CommonAction_GenerateDebris     = 0,
	ETornado_CommonAction_Invincible         = 1,
	ETornado_CommonAction_WarpIn             = 2,
	ETornado_CommonAction_WarpOut            = 3,
	ETornado_CommonAction_PermitAttack       = 4,
	ETornado_CommonAction_ProhibitAttack     = 5,
	ETornado_CommonAction_EndFloatingMode    = 6,
	ETornado_CommonAction_BeginFloatingMode  = 7,
	ETornado_CommonAction_BeginBigTornado    = 8,
	ETornado_CommonAction_MAX                = 9,
};

// Enum TresGame.ETresEnemyShipCondition
// NumValues: 0x0003
enum class ETresEnemyShipCondition : uint8
{
	MinCoreNum                               = 0,
	TypeMax                                  = 1,
	ETresEnemyShipCondition_MAX              = 2,
};

// Enum TresGame.EStoleTrapN
// NumValues: 0x0004
enum class EStoleTrapN : uint8
{
	CPT_Destination                          = 0,
	CPT_BattleAreaCenter                     = 1,
	CPT_OwnerLocation                        = 2,
	CPT_MAX                                  = 3,
};

// Enum TresGame.ETresEnemy_e_ex035_StepType
// NumValues: 0x0004
enum class ETresEnemy_e_ex035_StepType : uint8
{
	ETresEnemy_e_ex035_StepType_Back         = 0,
	ETresEnemy_e_ex035_StepType_Right        = 1,
	ETresEnemy_e_ex035_StepType_Left         = 2,
	ETresEnemy_e_ex035_StepType_MAX          = 3,
};

// Enum TresGame.ETresEnemy_e_ex043_SideBoostType
// NumValues: 0x0003
enum class ETresEnemy_e_ex043_SideBoostType : uint8
{
	ETresEnemy_e_ex043_SideBoostType_Right   = 0,
	ETresEnemy_e_ex043_SideBoostType_Left    = 1,
	ETresEnemy_e_ex043_SideBoostType_MAX     = 2,
};

// Enum TresGame.ETresActionTaskParamType
// NumValues: 0x0004
enum class ETresActionTaskParamType : uint8
{
	Float                                    = 0,
	Int                                      = 1,
	Bool                                     = 2,
	ETresActionTaskParamType_MAX             = 3,
};

// Enum TresGame.MovingTypes_e_ex047
// NumValues: 0x0005
enum class EMovingTypes_e_ex047 : uint8
{
	TRES_ENEMY_EX047_MOVE_FRONT              = 0,
	TRES_ENEMY_EX047_MOVE_BACK               = 1,
	TRES_ENEMY_EX047_MOVE_LEFT               = 2,
	TRES_ENEMY_EX047_MOVE_RIGHT              = 3,
	TRES_ENEMY_EX047_MOVE_MAX                = 4,
};

// Enum TresGame.e_ex059_ACTION_TYPE
// NumValues: 0x0004
enum class E_ex059_ACTION_TYPE : uint8
{
	Single                                   = 0,
	INCLUSIVE                                = 1,
	CONDITION                                = 2,
	E_ex059_ACTION_TYPE_MAX                  = 3,
};

// Enum TresGame.TeleportTypes_e_ex301
// NumValues: 0x0004
enum class ETeleportTypes_e_ex301 : uint8
{
	TRES_ENEMY_EX301_TELEPORT_NORMAL         = 0,
	TRES_ENEMY_EX301_TELEPORT_SPAWN          = 1,
	TRES_ENEMY_EX301_TELEPORT_INVISIBLE      = 2,
	TRES_ENEMY_EX301_TELEPORT_MAX            = 3,
};

// Enum TresGame.ETresEnemyEx304WarpType
// NumValues: 0x0004
enum class ETresEnemyEx304WarpType : uint8
{
	Warp                                     = 0,
	WarpFastMove                             = 1,
	MAX                                      = 2,
	ETresEnemyEx304WarpType_MAX              = 3,
};

// Enum TresGame.ETresEnemyStepDirectionType_e_ex309
// NumValues: 0x0004
enum class ETresEnemyStepDirectionType_e_ex309 : uint8
{
	TRES_ENEMY_STEP_DIRECTION_TYPE_E_EX309_RIGHT = 0,
	TRES_ENEMY_STEP_DIRECTION_TYPE_E_EX309_LEFT = 1,
	TRES_ENEMY_STEP_DIRECTION_TYPE_E_EX309_BACK = 2,
	TRES_ENEMY_STEP_DIRECTION_TYPE_E_EX309_MAX = 3,
};

// Enum TresGame.StepTypes_e_ex311
// NumValues: 0x0004
enum class EStepTypes_e_ex311 : uint8
{
	TRES_ENEMY_EX311_BACK_STEP               = 0,
	TRES_ENEMY_EX311_RIGHT_STEP              = 1,
	TRES_ENEMY_EX311_LEFT_STEP               = 2,
	TRES_ENEMY_EX311_MAX                     = 3,
};

// Enum TresGame.ETresEnemy_e_ex313_StepType
// NumValues: 0x0004
enum class ETresEnemy_e_ex313_StepType : uint8
{
	ETresEnemy_e_ex313_StepType_Back         = 0,
	ETresEnemy_e_ex313_StepType_Right        = 1,
	ETresEnemy_e_ex313_StepType_Left         = 2,
	ETresEnemy_e_ex313_StepType_MAX          = 3,
};

// Enum TresGame.StepTypes_e_ex360
// NumValues: 0x0004
enum class EStepTypes_e_ex360 : uint8
{
	TRES_ENEMY_EX360_BACK_STEP               = 0,
	TRES_ENEMY_EX360_RIGHT_STEP              = 1,
	TRES_ENEMY_EX360_LEFT_STEP               = 2,
	TRES_ENEMY_EX360_MAX                     = 3,
};

// Enum TresGame.ETresEnemyEx361CounterAfterActionKind
// NumValues: 0x0004
enum class ETresEnemyEx361CounterAfterActionKind : uint8
{
	Kabutowari                               = 0,
	AirCombo                                 = 1,
	MAX                                      = 2,
	ETresEnemyEx361CounterAfterActionKind_MAX = 3,
};

// Enum TresGame.ETresEnemy_e_ex361_StepType
// NumValues: 0x0004
enum class ETresEnemy_e_ex361_StepType : uint8
{
	ETresEnemy_e_ex361_StepType_Back         = 0,
	ETresEnemy_e_ex361_StepType_Right        = 1,
	ETresEnemy_e_ex361_StepType_Left         = 2,
	ETresEnemy_e_ex361_StepType_MAX          = 3,
};

// Enum TresGame.TeleportTypes_e_ex367
// NumValues: 0x0004
enum class ETeleportTypes_e_ex367 : uint8
{
	TRES_ENEMY_EX367_TELEPORT_NORMAL         = 0,
	TRES_ENEMY_EX367_TELEPORT_SPAWN          = 1,
	TRES_ENEMY_EX367_TELEPORT_INVISIBLE      = 2,
	TRES_ENEMY_EX367_TELEPORT_MAX            = 3,
};

// Enum TresGame.ETresEnemy_e_ex731_StepType
// NumValues: 0x0004
enum class ETresEnemy_e_ex731_StepType : uint8
{
	ETresEnemy_e_ex731_StepType_Back         = 0,
	ETresEnemy_e_ex731_StepType_Right        = 1,
	ETresEnemy_e_ex731_StepType_Left         = 2,
	ETresEnemy_e_ex731_StepType_MAX          = 3,
};

// Enum TresGame.ETresEnemyEEX771_ACTION_1WARP_KIND
// NumValues: 0x0005
enum class ETresEnemyEEX771_ACTION_1WARP_KIND : uint8
{
	WARP_KIND_COMMON                         = 0,
	WARP_KIND_ESCAPE                         = 1,
	WARP_KIND_HVN_PHASE3_FIRST               = 2,
	WARP_KIND_FTRND_END                      = 3,
	WARP_KIND_MAX                            = 4,
};

// Enum TresGame.ETresEnemyEEX773_ACTION_1WARP_KIND
// NumValues: 0x0005
enum class ETresEnemyEEX773_ACTION_1WARP_KIND : uint8
{
	WARP_KIND_COMMON                         = 0,
	WARP_KIND_ESCAPE                         = 1,
	WARP_KIND_HVN_PHASE3_FIRST               = 2,
	WARP_KIND_FTRND_END                      = 3,
	WARP_KIND_MAX                            = 4,
};

// Enum TresGame.HVSceneTypes_e_ex781
// NumValues: 0x0004
enum class EHVSceneTypes_e_ex781 : uint8
{
	TRES_ENEMY_EX781_HV_GRAVITY_SCENE        = 0,
	TRES_ENEMY_EX781_HV_CRAFT_SCENE          = 1,
	TRES_ENEMY_EX781_HV_CRIMAX_SCENE         = 2,
	TRES_ENEMY_EX781_HV_MAX                  = 3,
};

// Enum TresGame.ETresE_dw405VigilanceMoveVec
// NumValues: 0x0003
enum class ETresE_dw405VigilanceMoveVec : uint8
{
	TRES_ENEMY_DW405_VIGILANCE_MOVE_RIGHT    = 0,
	TRES_ENEMY_DW405_VIGILANCE_MOVE_LEFT     = 1,
	TRES_ENEMY_DW405_VIGILANCE_MOVE_MAX      = 2,
};

// Enum TresGame.ETresEnemyEx304FastMoveType
// NumValues: 0x0004
enum class ETresEnemyEx304FastMoveType : uint8
{
	FastMove                                 = 0,
	FastMoveWarp                             = 1,
	MAX                                      = 2,
	ETresEnemyEx304FastMoveType_MAX          = 3,
};

// Enum TresGame.KBRideTypes_e_ex311
// NumValues: 0x0004
enum class EKBRideTypes_e_ex311 : uint8
{
	TRES_ENEMY_EX311_KBRIDE_ALL              = 0,
	TRES_ENEMY_EX311_KBRIDE_CALL             = 1,
	TRES_ENEMY_EX311_KBRIDE_RIDE             = 2,
	TRES_ENEMY_EX311_KBRIDE_MAX              = 3,
};

// Enum TresGame.ETresEnemyEx353FastMoveType
// NumValues: 0x0004
enum class ETresEnemyEx353FastMoveType : uint8
{
	Speed                                    = 0,
	Time                                     = 1,
	MAX                                      = 2,
	ETresEnemyEx353FastMoveType_MAX          = 3,
};

// Enum TresGame.ETresEnemyHideAndSeekLocation_e_ex356
// NumValues: 0x0003
enum class ETresEnemyHideAndSeekLocation_e_ex356 : uint8
{
	Target                                   = 0,
	Camera                                   = 1,
	ETresEnemyHideAndSeekLocation_e_MAX      = 2,
};

// Enum TresGame.ETresEnemy_e_ex043_PhaseNum
// NumValues: 0x0004
enum class ETresEnemy_e_ex043_PhaseNum : uint8
{
	ETresEnemy_e_ex043_Phase1                = 0,
	ETresEnemy_e_ex043_Phase2                = 1,
	ETresEnemy_e_ex043_Phase3                = 2,
	ETresEnemy_e_ex043_MAX                   = 3,
};

// Enum TresGame.EEX354_WarpPosType
// NumValues: 0x0004
enum class EEX354_WarpPosType : uint8
{
	EEX354_WarpPosType_Land                  = 0,
	EEX354_WarpPosType_Fly                   = 1,
	EEX354_WarpPosType_Fly_NoRev             = 2,
	EEX354_WarpPosType_Max                   = 3,
};

// Enum TresGame.EEX354_WarpType
// NumValues: 0x0004
enum class EEX354_WarpType : uint8
{
	EEX354_WarpType_Default                  = 0,
	EEX354_WarpType_Disappear                = 1,
	EEX354_WarpType_Appear                   = 2,
	EEX354_WarpType_Max                      = 3,
};

// Enum TresGame.EBX901_QuickMoveDir
// NumValues: 0x0006
enum class EBX901_QuickMoveDir : uint8
{
	EBX901_QuickMoveDir_Front                = 0,
	EBX901_QuickMoveDir_Up                   = 1,
	EBX901_QuickMoveDir_Down                 = 2,
	EBX901_QuickMoveDir_Left                 = 3,
	EBX901_QuickMoveDir_Right                = 4,
	EBX901_QuickMoveDir_MAX                  = 5,
};

// Enum TresGame.ETresEnemyHeight_e_ex357
// NumValues: 0x0003
enum class ETresEnemyHeight_e_ex357 : uint8
{
	Target                                   = 0,
	Ground                                   = 1,
	ETresEnemyHeight_e_MAX                   = 2,
};

// Enum TresGame.ETresEnemyMove_e_ex357
// NumValues: 0x0003
enum class ETresEnemyMove_e_ex357 : uint8
{
	Target                                   = 0,
	InvTarget                                = 1,
	ETresEnemyMove_e_MAX                     = 2,
};

// Enum TresGame.ETresEnemyArc_e_ex357
// NumValues: 0x0003
enum class ETresEnemyArc_e_ex357 : uint8
{
	Right                                    = 0,
	Left                                     = 1,
	ETresEnemyArc_e_MAX                      = 2,
};

// Enum TresGame.EWarpType_e_ex355
// NumValues: 0x0004
enum class EWarpType_e_ex355 : uint8
{
	EWarpType_e_ex355_Appear                 = 0,
	EWarpType_e_ex355_Disappear              = 1,
	EWarpType_e_ex355_Default                = 2,
	EWarpType_e_ex355_Max                    = 3,
};

// Enum TresGame.ETresEnemyEEX771_POINT_KIND
// NumValues: 0x0007
enum class ETresEnemyEEX771_POINT_KIND : uint8
{
	POINT_KIND_NONE                          = 0,
	POINT_KIND_FACE_CLAW                     = 1,
	POINT_KIND_HEAVENLY_PILLAR_START         = 2,
	POINT_KIND_HEAVENLY_PILLAR_END           = 3,
	POINT_KIND_FLARE_TORNADO                 = 4,
	POINT_KIND_ALL_PILLAR_HEIGHT             = 5,
	POINT_KIND_MAX                           = 6,
};

// Enum TresGame.ETresEnemyEEX773_POINT_KIND
// NumValues: 0x0009
enum class ETresEnemyEEX773_POINT_KIND : uint8
{
	POINT_KIND_NONE                          = 0,
	POINT_KIND_FACE_CLAW                     = 1,
	POINT_KIND_HEAVENLY_PILLAR_START         = 2,
	POINT_KIND_HEAVENLY_PILLAR_END           = 3,
	POINT_KIND_FLARE_TORNADO                 = 4,
	POINT_KIND_ALL_PILLAR_HEIGHT             = 5,
	POINT_KIND_ECLIPSE13_WARP_ESCAPE         = 6,
	POINT_KIND_ECLIPSE13_WARP_APEAR          = 7,
	POINT_KIND_MAX                           = 8,
};

// Enum TresGame.ETresEnemyEx006ScrumState
// NumValues: 0x0008
enum class ETresEnemyEx006ScrumState : uint8
{
	WARP                                     = 0,
	IDLE                                     = 1,
	WANTED_TURN                              = 2,
	TURN                                     = 3,
	WANTED_DASH                              = 4,
	DASH                                     = 5,
	MAX                                      = 6,
	ETresEnemyEx006ScrumState_MAX            = 7,
};

// Enum TresGame.ETresTurnMode
// NumValues: 0x0003
enum class ETresTurnMode : uint8
{
	TurnInPlace                              = 0,
	QuickTurn                                = 1,
	ETresTurnMode_MAX                        = 2,
};

// Enum TresGame.ETresAIAction
// NumValues: 0x0005
enum class ETresAIAction : uint8
{
	Move                                     = 0,
	Fall                                     = 1,
	Jump                                     = 2,
	Custom                                   = 3,
	ETresAIAction_MAX                        = 4,
};

// Enum TresGame.ETresEnemyca901WarpKind
// NumValues: 0x0003
enum class ETresEnemyca901WarpKind : uint8
{
	TRES_ENEMY_CA901_WARP_FIXEDPlACE         = 0,
	TRES_ENEMY_CA901_WARP_TENTACLESUMMONS    = 1,
	TRES_ENEMY_CA901_WARP_MAX                = 2,
};

// Enum TresGame.ETresEnemy_e_ex035_AIPointType
// NumValues: 0x0003
enum class ETresEnemy_e_ex035_AIPointType : uint8
{
	ETresEnemy_e_ex035_AIPointType_Tree      = 0,
	ETresEnemy_e_ex035_AIPointType_Carriage  = 1,
	ETresEnemy_e_ex035_AIPointType_MAX       = 2,
};

// Enum TresGame.ETresAIActionAbortTimingID
// NumValues: 0x0011
enum class ETresAIActionAbortTimingID : uint8
{
	ID_None                                  = 0,
	ID_00                                    = 1,
	ID_01                                    = 2,
	ID_02                                    = 3,
	ID_03                                    = 4,
	ID_04                                    = 5,
	ID_05                                    = 6,
	ID_06                                    = 7,
	ID_07                                    = 8,
	ID_08                                    = 9,
	ID_09                                    = 10,
	ID_10                                    = 11,
	ID_11                                    = 12,
	ID_12                                    = 13,
	ID_13                                    = 14,
	ID_14                                    = 15,
	ID_MAX                                   = 16,
};

// Enum TresGame.ETresAIAttrResistKind
// NumValues: 0x0005
enum class ETresAIAttrResistKind : uint8
{
	Normal                                   = 0,
	Low                                      = 1,
	High                                     = 2,
	Invalid                                  = 3,
	ETresAIAttrResistKind_MAX                = 4,
};

// Enum TresGame.ETresWaypointKind
// NumValues: 0x0003
enum class ETresWaypointKind : uint8
{
	Unknown                                  = 0,
	PositionForShooting                      = 1,
	ETresWaypointKind_MAX                    = 2,
};

// Enum TresGame.ETresNavAreaFlag
// NumValues: 0x000B
enum class ETresNavAreaFlag : uint8
{
	Default                                  = 0,
	Jump                                     = 1,
	Fall                                     = 2,
	Hop                                      = 3,
	Rail                                     = 4,
	Vault                                    = 5,
	PowerWildOnlyTreeBranch                  = 6,
	LowJump                                  = 7,
	WaterSurface                             = 8,
	Damage                                   = 9,
	ETresNavAreaFlag_MAX                     = 10,
};

// Enum TresGame.ETresFloorTestMode
// NumValues: 0x0004
enum class ETresFloorTestMode : uint8
{
	Navmesh                                  = 0,
	Collision                                = 1,
	NavmeshAndCollisionCheck                 = 2,
	ETresFloorTestMode_MAX                   = 3,
};

// Enum TresGame.ETresFaceAnimType
// NumValues: 0x0078
enum class ETresFaceAnimType : uint8
{
	NORMAL_AUTO                              = 0,
	NORMAL_AUTO_IDLE_BATTLE                  = 1,
	NORMAL_AUTO_BATTLE_IDLE                  = 2,
	Normal                                   = 3,
	NO_1                                     = 4,
	NO_2                                     = 5,
	NO_3                                     = 6,
	NO_4                                     = 7,
	Battle                                   = 8,
	BATTLE_SINGLE                            = 9,
	BA_1                                     = 10,
	Damage                                   = 11,
	DMG_LOOP                                 = 12,
	DMG_END                                  = 13,
	MAGIC_AUTO_IDLE_BATTLE                   = 14,
	MAGIC2_AUTO_IDLE_BATTLE                  = 15,
	USEITEM_AUTO_IDLE_BATTLE                 = 16,
	NORMAL_AUTO_01                           = 17,
	SA_FREEZE_0                              = 18,
	SA_BARN_0                                = 19,
	SA_OIL_0                                 = 20,
	SA_STEAM_0                               = 21,
	SA_THUNDER_0                             = 22,
	AF_RC_0                                  = 23,
	AF_VS_0                                  = 24,
	AF_TC_0                                  = 25,
	WEP_BS_0                                 = 26,
	WEP_GUN_0                                = 27,
	WEP_SD_0                                 = 28,
	NORMAL_AUTO_EF01                         = 29,
	NORMAL_AUTO_EU01                         = 30,
	NORMAL_AUTO_ED01                         = 31,
	NORMAL_AUTO_ED02                         = 32,
	NORMAL_AUTO_ER01                         = 33,
	NORMAL_AUTO_EL01                         = 34,
	MOUTH_OPEN_01                            = 35,
	MOUTH_OPEN_02                            = 36,
	MOUTH_OPEN_03                            = 37,
	MOUTH_OPEN_04                            = 38,
	MOUTH_OPEN_05                            = 39,
	TIPBALANCE_AUTO_R01                      = 40,
	TIPBALANCE_AUTO_L01                      = 41,
	RAILSLIDE_AUTO01                         = 42,
	RAILSLIDE_AUTO02                         = 43,
	PLEASURE_EYE00                           = 44,
	PLEASURE_EYE01                           = 45,
	PLEASURE_EYE02                           = 46,
	PREASURE_LIP00                           = 47,
	PREASURE_LIP01                           = 48,
	PREASURE_LIP02                           = 49,
	SURPRISE_EYE00                           = 50,
	SURPRISE_EYE01                           = 51,
	SURPRISE_LIP00                           = 52,
	SURPRISE_LIP01                           = 53,
	EMOTION_NO300                            = 54,
	EMOTION_NO301                            = 55,
	EMOTION_NO302                            = 56,
	EMOTION_NO350                            = 57,
	EMOTION_NO351                            = 58,
	EMOTION_NO352                            = 59,
	EMOTION_NO354                            = 60,
	EMOTION_NO400                            = 61,
	EMOTION_NO401                            = 62,
	EMOTION_NO450                            = 63,
	EMOTION_NO451                            = 64,
	EMOTION_NO452                            = 65,
	EMOTION_NO500                            = 66,
	EMOTION_NO501                            = 67,
	EMOTION_NO502                            = 68,
	NORMAL_AUTO_EC01                         = 69,
	EMOTION_TA_DE_E_00                       = 70,
	EMOTION_TA_DE_E_01                       = 71,
	EMOTION_TA_DE_E_02                       = 72,
	EMOTION_TA_DE_E_03                       = 73,
	EMOTION_TA_DE_E_04                       = 74,
	EMOTION_TA_DE_E_05                       = 75,
	EMOTION_TA_DE_E_06                       = 76,
	EMOTION_TA_DE_E_07                       = 77,
	EMOTION_TA_DE_E_08                       = 78,
	EMOTION_TA_DE_E_09                       = 79,
	EMOTION_TA_DE_E_10                       = 80,
	EMOTION_TA_DE_E_11                       = 81,
	EMOTION_TA_DE_E_12                       = 82,
	EMOTION_TA_DE_M_00                       = 83,
	EMOTION_TA_DE_M_01                       = 84,
	EMOTION_TA_DE_M_02                       = 85,
	EMOTION_TA_DE_M_03                       = 86,
	EMOTION_TA_SM_E_00                       = 87,
	EMOTION_TA_SM_E_01                       = 88,
	EMOTION_TA_SM_E_02                       = 89,
	EMOTION_TA_SM_E_03                       = 90,
	EMOTION_TA_SM_M_00                       = 91,
	EMOTION_TA_SM_M_01                       = 92,
	EMOTION_TA_SM_M_02                       = 93,
	EMOTION_TA_SM_M_03                       = 94,
	EMOTION_TA_AN_E_00                       = 95,
	EMOTION_TA_AN_E_01                       = 96,
	EMOTION_TA_AN_E_02                       = 97,
	EMOTION_TA_AN_E_20                       = 98,
	EMOTION_TA_AN_M_00                       = 99,
	EMOTION_TA_AN_M_01                       = 100,
	EMOTION_TA_AN_M_02                       = 101,
	EMOTION_TA_AN_M_03                       = 102,
	EMOTION_TA_SA_E_00                       = 103,
	EMOTION_TA_SA_E_01                       = 104,
	EMOTION_TA_SA_E_02                       = 105,
	EMOTION_TA_SA_E_03                       = 106,
	EMOTION_TA_SA_E_04                       = 107,
	EMOTION_TA_SA_E_20                       = 108,
	EMOTION_TA_SA_M_00                       = 109,
	EMOTION_TA_SA_M_01                       = 110,
	EMOTION_TA_SA_M_02                       = 111,
	EMOTION_TA_SU_E_00                       = 112,
	EMOTION_TA_SU_E_01                       = 113,
	EMOTION_TA_SU_E_02                       = 114,
	EMOTION_TA_SU_E_20                       = 115,
	EMOTION_TA_SU_M_00                       = 116,
	EMOTION_TA_SU_M_02                       = 117,
	FACE_ANIM_TYPE_MAX                       = 118,
	ETresFaceAnimType_MAX                    = 119,
};

// Enum TresGame.ETresFaceAnimPlayPriority
// NumValues: 0x000D
enum class ETresFaceAnimPlayPriority : uint8
{
	PRIO_DEFAULT                             = 0,
	PRIO_1                                   = 1,
	PRIO_2                                   = 2,
	PRIO_3                                   = 3,
	PRIO_4                                   = 4,
	PRIO_5                                   = 5,
	PRIO_6                                   = 6,
	PRIO_7                                   = 7,
	PRIO_8                                   = 8,
	PRIO_9                                   = 9,
	PRIO_MAX                                 = 10,
	_PRIO_MAX                                = 11,
	ETresFaceAnimPlayPriority_MAX            = 12,
};

// Enum TresGame.ETresSplineAnchorInterpType
// NumValues: 0x0004
enum class ETresSplineAnchorInterpType : uint8
{
	TSAIT_SPLINE                             = 0,
	TSAIT_LINEAR                             = 1,
	_TSAIT_MAX                               = 2,
	ETresSplineAnchorInterpType_MAX          = 3,
};

// Enum TresGame.TRES_ATTACH_OBJECT_NAME
// NumValues: 0x0004
enum class ETRES_ATTACH_OBJECT_NAME : uint8
{
	TRES_ATTACH_OBJECT_OWNER                 = 0,
	TRES_ATTACH_OBJECT_ATTACH_TO_OBJECT      = 1,
	TRES_ATTACH_OBJECT_ATTACH_TO_WEAPON      = 2,
	TRES_ATTACH_OBJECT_MAX                   = 3,
};

// Enum TresGame.ETresSoundAliasUnitID
// NumValues: 0x0007
enum class ETresSoundAliasUnitID : uint8
{
	SEAU_NOTHING                             = 0,
	SEAU_RH_WEAPON                           = 1,
	SEAU_LH_WEAPON                           = 2,
	SEAU_RL_WEAPON                           = 3,
	SEAU_LL_WEAPON                           = 4,
	_SEAU_MAX                                = 5,
	ETresSoundAliasUnitID_MAX                = 6,
};

// Enum TresGame.FSQEX_EFFCT_CURVE_DATA_AXIS
// NumValues: 0x0003
enum class EFSQEX_EFFCT_CURVE_DATA_AXIS : uint8
{
	FSQEX_EFFCT_CURVE_DATA_AXIS_SCALE        = 0,
	FSQEX_EFFCT_CURVE_DATA_AXIS_XYZ          = 1,
	FSQEX_EFFCT_CURVE_DATA_AXIS_MAX          = 2,
};

// Enum TresGame.ETresAtkCollRotAttachType
// NumValues: 0x0003
enum class ETresAtkCollRotAttachType : uint8
{
	TRES_ACRA_NORMAL                         = 0,
	TRES_ACRA_LOCAL                          = 1,
	TRES_ACRA_MAX                            = 2,
};

// Enum TresGame.ETresEnemyDw405PostWaitAction
// NumValues: 0x0005
enum class ETresEnemyDw405PostWaitAction : uint8
{
	TRES_ENEMY_DW405_POSTWAITACTION_IDLE     = 0,
	TRES_ENEMY_DW405_POSTWAITACTION_WHEELROLL = 1,
	TRES_ENEMY_DW405_POSTWAITACTION_WALK     = 2,
	TRES_ENEMY_DW405_POSTWAITACTION_RESTBARRIER = 3,
	TRES_ENEMY_DW405_POSTWAITACTION_MAX      = 4,
};

// Enum TresGame.ETresEnemyDw405AttackPossibleKind
// NumValues: 0x0005
enum class ETresEnemyDw405AttackPossibleKind : uint8
{
	TRES_ENEMY_DW405_ATTACKPOSSIBLE_LAND     = 0,
	TRES_ENEMY_DW405_ATTACKPOSSIBLE_AIR      = 1,
	TRES_ENEMY_DW405_ATTACKPOSSIBLE_ALWAYS   = 2,
	TRES_ENEMY_DW405_ATTACKPOSSIBLE_NONE     = 3,
	TRES_ENEMY_DW405_ATTACKPOSSIBLE_MAX      = 4,
};

// Enum TresGame.ETresEnemyDw405ComboAttackType
// NumValues: 0x0003
enum class ETresEnemyDw405ComboAttackType : uint8
{
	TRES_ENEMY_DW405_COMBOATTCKTYPE_LAND     = 0,
	TRES_ENEMY_DW405_COMBOATTCKTYPE_AIR      = 1,
	TRES_ENEMY_DW405_COMBOATTCKTYPE_MAX      = 2,
};

// Enum TresGame.ETresEnemyEx361ComboKind
// NumValues: 0x0007
enum class ETresEnemyEx361ComboKind : uint8
{
	AirCombo_VerticalSwing                   = 0,
	AirCombo_Turning                         = 1,
	AirCombo_Thrust                          = 2,
	AirCombo_ContinuousAttack                = 3,
	AirCombo_Beat                            = 4,
	MAX                                      = 5,
	ETresEnemyEx361ComboKind_MAX             = 6,
};

// Enum TresGame.ETresAttack_e_ex773_ReverseFlareMoveAxisType
// NumValues: 0x0003
enum class ETresAttack_e_ex773_ReverseFlareMoveAxisType : uint8
{
	Camera                                   = 0,
	TargetDir2D                              = 1,
	ETresAttack_e_ex773_MAX                  = 2,
};

// Enum TresGame.ETresHitWallAction_e_ex011
// NumValues: 0x0004
enum class ETresHitWallAction_e_ex011 : uint8
{
	None                                     = 0,
	AttackExit                               = 1,
	Reflection                               = 2,
	ETresHitWallAction_e_MAX                 = 3,
};

// Enum TresGame.ETresDashLimit_e_ex011
// NumValues: 0x0004
enum class ETresDashLimit_e_ex011 : uint8
{
	Distance                                 = 0,
	Time                                     = 1,
	TargetDistance                           = 2,
	ETresDashLimit_e_MAX                     = 3,
};

// Enum TresGame.FireTurnTypes_e_ex047
// NumValues: 0x0006
enum class EFireTurnTypes_e_ex047 : uint8
{
	TRES_ENEMY_EX047_FIRETURN_LEFT           = 0,
	TRES_ENEMY_EX047_FIRETURN_RIGHT          = 1,
	TRES_ENEMY_EX047_FIRETURN_LR             = 2,
	TRES_ENEMY_EX047_FIRETURN_RADIAL         = 3,
	TRES_ENEMY_EX047_FIRETURN_RANDOM         = 4,
	TRES_ENEMY_EX047_FIRETURN_MAX            = 5,
};

// Enum TresGame.EKunaiType
// NumValues: 0x0005
enum class EKunaiType : uint8
{
	EKunaiType_teR                           = 0,
	EKunaiType_teL                           = 1,
	EKunaiType_ashiR                         = 2,
	EKunaiType_ashiL                         = 3,
	EKunaiType_MAX                           = 4,
};

// Enum TresGame.MoveSlashTypes_e_ex301
// NumValues: 0x0005
enum class EMoveSlashTypes_e_ex301 : uint8
{
	TRES_ENEMY_EX301_MOVESLASH1              = 0,
	TRES_ENEMY_EX301_MOVESLASH2              = 1,
	TRES_ENEMY_EX301_MOVESLASH3              = 2,
	TRES_ENEMY_EX301_MOVESLASH4              = 3,
	TRES_ENEMY_EX301_MAX                     = 4,
};

// Enum TresGame.ETresEnemyEx302ComboKind
// NumValues: 0x0009
enum class ETresEnemyEx302ComboKind : uint8
{
	Combo_VerticalSwing                      = 0,
	Combo_SideSwing                          = 1,
	Combo_Attract                            = 2,
	Combo_JumpSlash                          = 3,
	Combo_NearBlow                           = 4,
	Combo_VerticalSwing2                     = 5,
	Combo_AirShotDown                        = 6,
	MAX                                      = 7,
	ETresEnemyEx302ComboKind_MAX             = 8,
};

// Enum TresGame.ETresEnemyEx304ComboKind
// NumValues: 0x0007
enum class ETresEnemyEx304ComboKind : uint8
{
	Combo_Short                              = 0,
	Combo_Medium                             = 1,
	Combo_Wide                               = 2,
	Combo_FinishBlow                         = 3,
	Combo_FinishToss                         = 4,
	MAX                                      = 5,
	ETresEnemyEx304ComboKind_MAX             = 6,
};

// Enum TresGame.ETresEnemy_e_ex305_ShotDirType
// NumValues: 0x0006
enum class ETresEnemy_e_ex305_ShotDirType : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	Down                                     = 4,
	ETresEnemy_e_ex305_MAX                   = 5,
};

// Enum TresGame.ETresEnemy_e_ex313_DarkHandComboType
// NumValues: 0x0004
enum class ETresEnemy_e_ex313_DarkHandComboType : uint8
{
	ETresEnemy_e_ex313_DarkHandComboType_Slash = 0,
	ETresEnemy_e_ex313_DarkHandComboType_Thrust = 1,
	ETresEnemy_e_ex313_DarkHandComboType_Finish = 2,
	ETresEnemy_e_ex313_DarkHandComboType_MAX = 3,
};

// Enum TresGame.ETresEnemyex351ComboKind
// NumValues: 0x0009
enum class ETresEnemyex351ComboKind : uint8
{
	Combo_VerticalSwing                      = 0,
	Combo_SideSwing                          = 1,
	Combo_Attract                            = 2,
	Combo_JumpSlash                          = 3,
	Combo_NearBlow                           = 4,
	Combo_VerticalSwing2                     = 5,
	Combo_AirShotDown                        = 6,
	MAX                                      = 7,
	ETresEnemyex351ComboKind_MAX             = 8,
};

// Enum TresGame.ETresEnemyEx353RootMotionCorrectionKind
// NumValues: 0x0005
enum class ETresEnemyEx353RootMotionCorrectionKind : uint8
{
	CurveData                                = 0,
	DistRate                                 = 1,
	AimFinishLocation                        = 2,
	MAX                                      = 3,
	ETresEnemyEx353RootMotionCorrectionKind_MAX = 4,
};

// Enum TresGame.ETresEnemyEx353ComboKind
// NumValues: 0x0009
enum class ETresEnemyEx353ComboKind : uint8
{
	Combo_Short                              = 0,
	Combo_Medium                             = 1,
	Combo_Wide                               = 2,
	Combo_FinishBlow                         = 3,
	Combo_FinishToss                         = 4,
	Combo_KickUp                             = 5,
	Combo_RushRoundhouseKick                 = 6,
	MAX                                      = 7,
	ETresEnemyEx353ComboKind_MAX             = 8,
};

// Enum TresGame.EEX354_NormalShotDistanceType
// NumValues: 0x0003
enum class EEX354_NormalShotDistanceType : uint8
{
	Distance2D                               = 0,
	Distance3D                               = 1,
	EEX354_MAX                               = 2,
};

// Enum TresGame.ETresEnemy_e_ex354_ShotDirType
// NumValues: 0x0006
enum class ETresEnemy_e_ex354_ShotDirType : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	Down                                     = 4,
	ETresEnemy_e_ex354_MAX                   = 5,
};

// Enum TresGame.ETresEnemyWarpCutMotionType_e_ex357
// NumValues: 0x0004
enum class ETresEnemyWarpCutMotionType_e_ex357 : uint8
{
	WarpCut                                  = 0,
	ContinuityCutStart                       = 1,
	ContinuityCutEnd                         = 2,
	ETresEnemyWarpCutMotionType_e_ex357_MAX  = 3,
};

// Enum TresGame.EEX359_ComboStartType
// NumValues: 0x0004
enum class EEX359_ComboStartType : uint8
{
	EEX359_ComboStartType_1                  = 0,
	EEX359_ComboStartType_2                  = 1,
	EEX359_ComboStartType_3                  = 2,
	EEX359_ComboStartType_MAX                = 3,
};

// Enum TresGame.ETresEnemy_e_ex361_DarkHandComboType
// NumValues: 0x0005
enum class ETresEnemy_e_ex361_DarkHandComboType : uint8
{
	ETresEnemy_e_ex361_DarkHandComboType_Slash = 0,
	ETresEnemy_e_ex361_DarkHandComboType_Thrust = 1,
	ETresEnemy_e_ex361_DarkHandComboType_Finish = 2,
	ETresEnemy_e_ex361_DarkHandComboType_VerticalSwing = 3,
	ETresEnemy_e_ex361_DarkHandComboType_MAX = 4,
};

// Enum TresGame.MoveSlashTypes_e_ex367
// NumValues: 0x0005
enum class EMoveSlashTypes_e_ex367 : uint8
{
	TRES_ENEMY_EX367_MOVESLASH1              = 0,
	TRES_ENEMY_EX367_MOVESLASH2              = 1,
	TRES_ENEMY_EX367_MOVESLASH3              = 2,
	TRES_ENEMY_EX367_MOVESLASH4              = 3,
	TRES_ENEMY_EX367_MAX                     = 4,
};

// Enum TresGame.e_ex731_DoubleClawType
// NumValues: 0x0004
enum class E_ex731_DoubleClawType : uint8
{
	E_ex731_DoubleClawType_SINGLE            = 0,
	E_ex731_DoubleClawType_CONDITION         = 1,
	E_ex731_DoubleClawType_DASH              = 2,
	E_ex731_DoubleClawType_MAX               = 3,
};

// Enum TresGame.CloneBurstSlashTypes_e_ex360
// NumValues: 0x0005
enum class ECloneBurstSlashTypes_e_ex360 : uint8
{
	TRES_ENEMY_EX360_CLONEBURSTSLASH_MOVE_CUTDOWN = 0,
	TRES_ENEMY_EX360_CLONEBURSTSLASH_CUTUP   = 1,
	TRES_ENEMY_EX360_CLONEBURSTSLASH_CUTDOWN = 2,
	TRES_ENEMY_EX360_CLONEBURSTSLASH_SHOOT   = 3,
	TRES_ENEMY_EX360_CLONEBURSTSLASH_MAX     = 4,
};

// Enum TresGame.KBRCloneBurstTypes_e_ex360
// NumValues: 0x0009
enum class EKBRCloneBurstTypes_e_ex360 : uint8
{
	TRES_ENEMY_EX360_CLONEBURST_SLASH        = 0,
	TRES_ENEMY_EX360_CLONEBURST_CUTUP        = 1,
	TRES_ENEMY_EX360_CLONEBURST_CUTDOWN      = 2,
	TRES_ENEMY_EX360_CLONEBURST_ONLY_KEYBLADES = 3,
	TRES_ENEMY_EX360_CLONEBURST_CLONE_SLASH  = 4,
	TRES_ENEMY_EX360_CLONEBURST_CLONE_CUTUP  = 5,
	TRES_ENEMY_EX360_CLONEBURST_CLONE_CUTDOWN = 6,
	TRES_ENEMY_EX360_CLONEBURST_SHOOT_KEYBLADES = 7,
	TRES_ENEMY_EX360_CLONEBURST_MAX          = 8,
};

// Enum TresGame.BreakSlashNumTypes_e_ex781
// NumValues: 0x0006
enum class EBreakSlashNumTypes_e_ex781 : uint8
{
	TRES_ENEMY_EX781_NORMAL_SLASH            = 0,
	TRES_ENEMY_EX781_CONTINUOUS_SLASH        = 1,
	TRES_ENEMY_EX781_FEINT                   = 2,
	TRES_ENEMY_EX781_FAST_SLASH              = 3,
	TRES_ENEMY_EX781_FAST_CONTISLASH         = 4,
	TRES_ENEMY_EX781_MAX                     = 5,
};

// Enum TresGame.ETresEnemy_e_ex043_FlameFangBoostType
// NumValues: 0x0003
enum class ETresEnemy_e_ex043_FlameFangBoostType : uint8
{
	ETresEnemy_e_ex043_FlameFangBoostType_Right = 0,
	ETresEnemy_e_ex043_FlameFangBoostType_Left = 1,
	ETresEnemy_e_ex043_FlameFangBoostType_MAX = 2,
};

// Enum TresGame.ETresAttack2_e_ex081_RotationGliding_HitWallReactionType
// NumValues: 0x0004
enum class ETresAttack2_e_ex081_RotationGliding_HitWallReactionType : uint8
{
	TRES_EX081_ATTACK2_HITWALLREACTIONTYPE_END = 0,
	TRES_EX081_ATTACK2_HITWALLREACTIONTYPE_REFLECTION = 1,
	TRES_EX081_ATTACK2_HITWALLREACTIONTYPE_ALONGWALL = 2,
	TRES_EX081_ATTACK2_HITWALLREACTIONTYPE_MAX = 3,
};

// Enum TresGame.ETresEnemyEx302SlowEndKind
// NumValues: 0x0005
enum class ETresEnemyEx302SlowEndKind : uint8
{
	LastBlow_EndSlow                         = 0,
	LastContinuousHit_EndSlow                = 1,
	Last_EndSlow                             = 2,
	MAX                                      = 3,
	ETresEnemyEx302SlowEndKind_MAX           = 4,
};

// Enum TresGame.ETresEnemy_e_ex305_ArmWarpType
// NumValues: 0x0004
enum class ETresEnemy_e_ex305_ArmWarpType : uint8
{
	Random                                   = 0,
	Vertical                                 = 1,
	Horizontal                               = 2,
	ETresEnemy_e_ex305_MAX                   = 3,
};

// Enum TresGame.EEX354_ArmSpawnPosAdjustType
// NumValues: 0x0003
enum class EEX354_ArmSpawnPosAdjustType : uint8
{
	EEX354_ArmSpawnPosAdjustType_Pos         = 0,
	EEX354_ArmSpawnPosAdjustType_Dir         = 1,
	EEX354_ArmSpawnPosAdjustType_Max         = 2,
};

// Enum TresGame.EEX354_ArmAimDirType
// NumValues: 0x0004
enum class EEX354_ArmAimDirType : uint8
{
	EEX354_ArmAimDirType_ToTarget            = 0,
	EEX354_ArmAimDirType_OwnerToSelf         = 1,
	EEX354_ArmAimDirType_OwnerToTarget       = 2,
	EEX354_ArmAimDirType_Max                 = 3,
};

// Enum TresGame.EEX354_ArmSpawnDirType
// NumValues: 0x0005
enum class EEX354_ArmSpawnDirType : uint8
{
	EEX355_ArmSpawnDirType_Owner             = 0,
	EEX355_ArmSpawnDirType_Target            = 1,
	EEX355_ArmSpawnDirType_ToTarget          = 2,
	EEX355_ArmSpawnDirType_Camera            = 3,
	EEX355_ArmSpawnDirType_Max               = 4,
};

// Enum TresGame.ETresEnemy_e_ex354_ArmWarpPos
// NumValues: 0x0003
enum class ETresEnemy_e_ex354_ArmWarpPos : uint8
{
	Target                                   = 0,
	Owner                                    = 1,
	ETresEnemy_e_ex354_MAX                   = 2,
};

// Enum TresGame.ETresEnemy_e_ex354_ArmWarpType
// NumValues: 0x0004
enum class ETresEnemy_e_ex354_ArmWarpType : uint8
{
	Random                                   = 0,
	Vertical                                 = 1,
	Horizontal                               = 2,
	ETresEnemy_e_ex354_MAX                   = 3,
};

// Enum TresGame.ETresEnemy_e_ex354_ArmTag
// NumValues: 0x0003
enum class ETresEnemy_e_ex354_ArmTag : uint8
{
	ETresEnemy_e_ex354_ArmWarpTag_Left       = 0,
	ETresEnemy_e_ex354_ArmWarpTag_Right      = 1,
	ETresEnemy_e_ex354_ArmWarpTag_Max        = 2,
};

// Enum TresGame.EEX355_RushAwayTurnDir
// NumValues: 0x0004
enum class EEX355_RushAwayTurnDir : uint8
{
	EEX355_RushAwayTurnDir_Default           = 0,
	EEX355_RushAwayTurnDir_Right             = 1,
	EEX355_RushAwayTurnDir_Left              = 2,
	EEX355_RushAwayTurnDir_Max               = 3,
};

// Enum TresGame.EEX355_RushAwayTurnType
// NumValues: 0x0003
enum class EEX355_RushAwayTurnType : uint8
{
	EEX355_RushAwayTurnType_Destination      = 0,
	EEX355_RushAwayTurnType_Target           = 1,
	EEX355_RushAwayTurnType_Max              = 2,
};

// Enum TresGame.ETresEnemyCardThrow_e_ex356
// NumValues: 0x0004
enum class ETresEnemyCardThrow_e_ex356 : uint8
{
	First                                    = 0,
	Second                                   = 1,
	Finish                                   = 2,
	ETresEnemyCardThrow_e_MAX                = 3,
};

// Enum TresGame.EBX901_ComboType
// NumValues: 0x0004
enum class EBX901_ComboType : uint8
{
	EBX901_Combo_Claw                        = 0,
	EBX901_Combo_Punch                       = 1,
	EBX901_Combo_Chop                        = 2,
	EBX901_Combo_MAX                         = 3,
};

// Enum TresGame.ETresEx304HandKind
// NumValues: 0x0004
enum class ETresEx304HandKind : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Max                                      = 2,
	ETresEx304HandKind_MAX                   = 3,
};

// Enum TresGame.DarkVolleyNumTypes_e_ex325
// NumValues: 0x0003
enum class EDarkVolleyNumTypes_e_ex325 : uint8
{
	TRES_ENEMY_EX047_DARKVOLLEYNUM1          = 0,
	TRES_ENEMY_EX047_DARKVOLLEYNUM4          = 1,
	TRES_ENEMY_EX047_MAX                     = 2,
};

// Enum TresGame.ETresEnemyEx351RootMotionCorrectionKind
// NumValues: 0x0004
enum class ETresEnemyEx351RootMotionCorrectionKind : uint8
{
	AimFinishLocation                        = 0,
	DistRate                                 = 1,
	MAX                                      = 2,
	ETresEnemyEx351RootMotionCorrectionKind_MAX = 3,
};

// Enum TresGame.ETresEnemyEx351KeyBladeComboKind
// NumValues: 0x0009
enum class ETresEnemyEx351KeyBladeComboKind : uint8
{
	Combo_LeftRotaion                        = 0,
	Combo_RightRotation                      = 1,
	AirCombo_VerticalSwing                   = 2,
	AirCombo_SideSwing                       = 3,
	AirCombo_Attract                         = 4,
	AirMaliceWhip_VerticalSwing              = 5,
	AirMaliceWhip_SideSwing                  = 6,
	MAX                                      = 7,
	ETresEnemyEx351KeyBladeComboKind_MAX     = 8,
};

// Enum TresGame.ETresEx353HandKind
// NumValues: 0x0004
enum class ETresEx353HandKind : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Max                                      = 2,
	ETresEx353HandKind_MAX                   = 3,
};

// Enum TresGame.EEX355_SwingTractionHorizontalDir
// NumValues: 0x0004
enum class EEX355_SwingTractionHorizontalDir : uint8
{
	EEX355_SwingTractionHorizontalDir_Both   = 0,
	EEX355_SwingTractionHorizontalDir_Front  = 1,
	EEX355_SwingTractionHorizontalDir_Rear   = 2,
	EEX355_SwingTractionHorizontalDir_Max    = 3,
};

// Enum TresGame.EEX355_SwingTractionDir
// NumValues: 0x0004
enum class EEX355_SwingTractionDir : uint8
{
	EEX355_SwingTractionDir_Both             = 0,
	EEX355_SwingTractionDir_Up               = 1,
	EEX355_SwingTractionDir_Down             = 2,
	EEX355_SwingTractionDir_Max              = 3,
};

// Enum TresGame.ETresWeaponDirection_e_ex357
// NumValues: 0x0004
enum class ETresWeaponDirection_e_ex357 : uint8
{
	Vertical                                 = 0,
	Horizontal                               = 1,
	Max                                      = 2,
	ETresWeaponDirection_e_MAX               = 3,
};

// Enum TresGame.EEX359_BerserkComboType
// NumValues: 0x0006
enum class EEX359_BerserkComboType : uint8
{
	EEX359_BerserkComboType0                 = 0,
	EEX359_BerserkComboType1                 = 1,
	EEX359_BerserkComboType2                 = 2,
	EEX359_BerserkComboType3                 = 3,
	EEX359_BerserkComboType_Max              = 4,
	EEX359_MAX                               = 5,
};

// Enum TresGame.ETresEnemyEx361SettingKind
// NumValues: 0x0009
enum class ETresEnemyEx361SettingKind : uint8
{
	Myself                                   = 0,
	Target                                   = 1,
	Sandwich                                 = 2,
	Ceiling                                  = 3,
	Ring                                     = 4,
	Row                                      = 5,
	RowTarget                                = 6,
	MAX                                      = 7,
	ETresEnemyEx361SettingKind_MAX           = 8,
};

// Enum TresGame.PowerAlcanamNumTypes_e_ex362
// NumValues: 0x0005
enum class EPowerAlcanamNumTypes_e_ex362 : uint8
{
	TRES_ENEMY_EX362_ATTACK_ALL              = 0,
	TRES_ENEMY_EX362_ATTACK_TYPEA            = 1,
	TRES_ENEMY_EX362_ATTACK_TYPEB            = 2,
	TRES_ENEMY_EX362_ATTACK_TYPEC            = 3,
	TRES_ENEMY_EX362_ATTACK_MAX              = 4,
};

// Enum TresGame.EBX901_BoostAttack_Mine
// NumValues: 0x0004
enum class EBX901_BoostAttack_Mine : uint8
{
	EBX901_BoostAttack_Mine_Back             = 0,
	EBX901_BoostAttack_Mine_Forward          = 1,
	EBX901_BoostAttack_Mine_Turn             = 2,
	EBX901_BoostAttack_Mine_Max              = 3,
};

// Enum TresGame.TresAttack4AscensionTypes_e_ex301
// NumValues: 0x0008
enum class ETresAttack4AscensionTypes_e_ex301 : uint8
{
	TRES_ATTACK4_ENEMY_EX301_ASCENSION1      = 0,
	TRES_ATTACK4_ENEMY_EX301_ASCENSION2      = 1,
	TRES_ATTACK4_ENEMY_EX301_ASCENSION3      = 2,
	TRES_ATTACK4_ENEMY_EX301_ASCENSION4      = 3,
	TRES_ATTACK4_ENEMY_EX301_ASCENSION5      = 4,
	TRES_ATTACK4_ENEMY_EX301_ASCENSION6      = 5,
	TRES_ATTACK4_ENEMY_EX301_ASCENSION7      = 6,
	TRES_ATTACK4_ENEMY_EX301_MAX             = 7,
};

// Enum TresGame.ETresEnemyPressCardAttribute_e_ex356
// NumValues: 0x0004
enum class ETresEnemyPressCardAttribute_e_ex356 : uint8
{
	None                                     = 0,
	Fire                                     = 1,
	Thunder                                  = 2,
	ETresEnemyPressCardAttribute_e_MAX       = 3,
};

// Enum TresGame.ETresEnemyContinuityCutAction_e_ex357
// NumValues: 0x0004
enum class ETresEnemyContinuityCutAction_e_ex357 : uint8
{
	Auto                                     = 0,
	ForceLand                                = 1,
	ForceAir                                 = 2,
	ETresEnemyContinuityCutAction_e_MAX      = 3,
};

// Enum TresGame.WaterActionTypes_e_ex047
// NumValues: 0x0005
enum class EWaterActionTypes_e_ex047 : uint8
{
	TRES_ENEMY_EX047_WATERACTION_ALL         = 0,
	TRES_ENEMY_EX047_WATERACTION_START       = 1,
	TRES_ENEMY_EX047_WATERACTION_LOOP        = 2,
	TRES_ENEMY_EX047_WATERACTION_END         = 3,
	TRES_ENEMY_EX047_WATERACTION_MAX         = 4,
};

// Enum TresGame.TresAttack5XIIIAttackTypes_e_ex301
// NumValues: 0x0004
enum class ETresAttack5XIIIAttackTypes_e_ex301 : uint8
{
	TRES_ATTACK5_ENEMY_EX301_XIIIATK1        = 0,
	TRES_ATTACK5_ENEMY_EX301_XIIIATK2        = 1,
	TRES_ATTACK5_ENEMY_EX301_XIIIATK3        = 2,
	TRES_ATTACK5_ENEMY_EX301_MAX             = 3,
};

// Enum TresGame.ETresEnemyEx353EveryDirectionShotKind
// NumValues: 0x0004
enum class ETresEnemyEx353EveryDirectionShotKind : uint8
{
	StartOrLoop                              = 0,
	End                                      = 1,
	MAX                                      = 2,
	ETresEnemyEx353EveryDirectionShotKind_MAX = 3,
};

// Enum TresGame.ETresEnemyWildDanceWarpHeight_e_ex358
// NumValues: 0x0005
enum class ETresEnemyWildDanceWarpHeight_e_ex358 : uint8
{
	Normal                                   = 0,
	Absolute                                 = 1,
	Relative                                 = 2,
	TargetOffset                             = 3,
	ETresEnemyWildDanceWarpHeight_e_MAX      = 4,
};

// Enum TresGame.ETresEnemyWildDanceWarpDirection_e_ex358
// NumValues: 0x0004
enum class ETresEnemyWildDanceWarpDirection_e_ex358 : uint8
{
	Right                                    = 0,
	Front                                    = 1,
	Left                                     = 2,
	ETresEnemyWildDanceWarpDirection_e_MAX   = 3,
};

// Enum TresGame.DarkSplicerTypes_e_ex360
// NumValues: 0x0008
enum class EDarkSplicerTypes_e_ex360 : uint8
{
	TRES_ENEMY_EX360_DARKSPLICER_MOVE_CUTDOWN = 0,
	TRES_ENEMY_EX360_DARKSPLICER_CUTDOWN     = 1,
	TRES_ENEMY_EX360_DARKSPLICER_CUTUP       = 2,
	TRES_ENEMY_EX360_DARKSPLICER_SPIN_CUTUP  = 3,
	TRES_ENEMY_EX360_DARKSPLICER_MOVE_WCUT   = 4,
	TRES_ENEMY_EX360_DARKSPLICER_WCUT        = 5,
	TRES_ENEMY_EX360_DARKSPLICER_MOVE_SPINCUT = 6,
	TRES_ENEMY_EX360_DARKSPLICER_MAX         = 7,
};

// Enum TresGame.ETresEnemyEx361ThunderKind
// NumValues: 0x0004
enum class ETresEnemyEx361ThunderKind : uint8
{
	HomingBaseTarget                         = 0,
	FirstBaseTarget                          = 1,
	MAX                                      = 2,
	ETresEnemyEx361ThunderKind_MAX           = 3,
};

// Enum TresGame.TresAttack5XIIIAttackTypes_e_ex367
// NumValues: 0x0004
enum class ETresAttack5XIIIAttackTypes_e_ex367 : uint8
{
	TRES_ATTACK5_ENEMY_EX367_XIIIATKSTART    = 0,
	TRES_ATTACK5_ENEMY_EX367_CHANGECIRCLE    = 1,
	TRES_ATTACK5_ENEMY_EX367_XIIIATKEND      = 2,
	TRES_ATTACK5_ENEMY_EX367_MAX             = 3,
};

// Enum TresGame.EProjectileSpawnPos
// NumValues: 0x0004
enum class EProjectileSpawnPos : uint8
{
	EProjectileSpawnPos_L                    = 0,
	EProjectileSpawnPos_R                    = 1,
	EProjectileSpawnPos_H                    = 2,
	EProjectileSpawnPos_Max                  = 3,
};

// Enum TresGame.ETresHitWallAction_e_ex059
// NumValues: 0x0003
enum class ETresHitWallAction_e_ex059 : uint8
{
	None                                     = 0,
	AttackExit                               = 1,
	ETresHitWallAction_e_MAX                 = 2,
};

// Enum TresGame.DarkRushTypes_e_ex325
// NumValues: 0x0005
enum class EDarkRushTypes_e_ex325 : uint8
{
	TRES_ENEMY_EX325_DARKRUSH_START          = 0,
	TRES_ENEMY_EX325_DARKRUSH_STROM          = 1,
	TRES_ENEMY_EX325_DARKRUSH_ATTACK         = 2,
	TRES_ENEMY_EX325_DARKRUSH_FINISH         = 3,
	TRES_ENEMY_EX325_DARKRUSH_MAX            = 4,
};

// Enum TresGame.EEX355_DashMiddleAction
// NumValues: 0x0004
enum class EEX355_DashMiddleAction : uint8
{
	EEX355_DashMiddleAction_None             = 0,
	EEX355_DashRoamDir_Accel                 = 1,
	EEX355_DashRoamDir_Swing                 = 2,
	EEX355_MAX                               = 3,
};

// Enum TresGame.EEX355_DashRoamDir
// NumValues: 0x0003
enum class EEX355_DashRoamDir : uint8
{
	EEX355_DashRoamDir_Left                  = 0,
	EEX355_DashRoamDir_Right                 = 1,
	EEX355_DashRoamDir_MAX                   = 2,
};

// Enum TresGame.EIceProjectileDestroyType_e_he903
// NumValues: 0x0004
enum class EIceProjectileDestroyType_e_he903 : uint8
{
	DestroyType_Destroy                      = 0,
	DestroyType_NoHoming                     = 1,
	DestroyType_Evade                        = 2,
	DestroyType_MAX                          = 3,
};

// Enum TresGame.EEX355_CutDownClaymoreGoalBase
// NumValues: 0x0004
enum class EEX355_CutDownClaymoreGoalBase : uint8
{
	EEX355_CutDownClaymoreGoalBase_Owner     = 0,
	EEX355_CutDownClaymoreGoalBase_Target    = 1,
	EEX355_CutDownClaymoreGoalBase_Map       = 2,
	EEX355_CutDownClaymoreGoalBase_Max       = 3,
};

// Enum TresGame.ReverseSlashTypes_e_ex781
// NumValues: 0x0004
enum class EReverseSlashTypes_e_ex781 : uint8
{
	TRES_ENEMY_EX781_RS_ALL                  = 0,
	TRES_ENEMY_EX781_RS_SLASH_UP             = 1,
	TRES_ENEMY_EX781_RS_SLASH_DOWN           = 2,
	TRES_ENEMY_EX781_RS_MAX                  = 3,
};

// Enum TresGame.EBigTornadoProjPos
// NumValues: 0x0003
enum class EBigTornadoProjPos : uint8
{
	EBigTornadoProjPos_L                     = 0,
	EBigTornadoProjPos_R                     = 1,
	EBigTornadoProjPos_MAX                   = 2,
};

// Enum TresGame.ETresAttackDefinition
// NumValues: 0x0007
enum class ETresAttackDefinition : uint8
{
	Unknown                                  = 0,
	Melee                                    = 1,
	Ranged                                   = 2,
	Dash                                     = 3,
	Jump                                     = 4,
	Custom                                   = 5,
	ETresAttackDefinition_MAX                = 6,
};

// Enum TresGame.ETresHitWallAction
// NumValues: 0x0004
enum class ETresHitWallAction : uint8
{
	None                                     = 0,
	AttackExit                               = 1,
	Reflection                               = 2,
	ETresHitWallAction_MAX                   = 3,
};

// Enum TresGame.ETresDashLimit
// NumValues: 0x0004
enum class ETresDashLimit : uint8
{
	Distance                                 = 0,
	Time                                     = 1,
	TargetDistance                           = 2,
	ETresDashLimit_MAX                       = 3,
};

// Enum TresGame.ETresJumpAttack
// NumValues: 0x0003
enum class ETresJumpAttack : uint8
{
	Proximity                                = 0,
	Rush                                     = 1,
	ETresJumpAttack_MAX                      = 2,
};

// Enum TresGame.ETresAutoNavLinkDebugDrawLabels
// NumValues: 0x0004
enum class ETresAutoNavLinkDebugDrawLabels : uint8
{
	Disable                                  = 0,
	Score                                    = 1,
	Priority                                 = 2,
	ETresAutoNavLinkDebugDrawLabels_MAX      = 3,
};

// Enum TresGame.ETresBPEM_SystemEventType
// NumValues: 0x0006
enum class ETresBPEM_SystemEventType : uint8
{
	UNKNOWN                                  = 0,
	TICK_ENABLED                             = 1,
	TICK_DISABLED                            = 2,
	SUSPEND_START                            = 3,
	SUSPEND_END                              = 4,
	ETresBPEM_MAX                            = 5,
};

// Enum TresGame.ETresBPEM_BattleEventType
// NumValues: 0x001A
enum class ETresBPEM_BattleEventType : uint8
{
	UNKNOWN                                  = 0,
	HIT_ATTACK_PLAYER                        = 1,
	HIT_ATTACK_ENEMY                         = 2,
	HIT_ATTACK_NOREACTION_PLAYER             = 3,
	HIT_ATTACK_NOREACTION_ENEMY              = 4,
	MISS_ATTACK_PLAYER                       = 5,
	MISS_ATTACK_ENEMY                        = 6,
	GUARD_ATTACK                             = 7,
	IGNORE_TAKING_DAMAGE_PLAYER              = 8,
	IGNORE_TAKING_DAMAGE_ENEMY               = 9,
	RECOVERED_PLAYER                         = 10,
	RECOVERED_FRIEND                         = 11,
	FIREMAGIC_S                              = 12,
	BEGIN_SHOOTFLOW                          = 13,
	END_SHOOTFLOW                            = 14,
	BEGIN_ATHLETICFLOW                       = 15,
	END_ATHLETICFLOW                         = 16,
	BEGIN_ATTRACTIONFLOW                     = 17,
	END_ATTRACTIONFLOW                       = 18,
	BEGIN_DISNEYMAGIC                        = 19,
	END_DISNEYMAGIC                          = 20,
	BEGIN_STYLECHANGE                        = 21,
	END_STYLECHANGE                          = 22,
	BEGIN_STYLEFINISH                        = 23,
	END_STYLEFINISH                          = 24,
	ETresBPEM_MAX                            = 25,
};

// Enum TresGame.ETresBPEM_BattleType
// NumValues: 0x0005
enum class ETresBPEM_BattleType : uint8
{
	UNKNOWN                                  = 0,
	XIII_A                                   = 1,
	XIII_B                                   = 2,
	XIII_E                                   = 3,
	ETresBPEM_MAX                            = 4,
};

// Enum TresGame.ETresPlayerSpecialActionType
// NumValues: 0x0003
enum class ETresPlayerSpecialActionType : uint8
{
	Guard                                    = 0,
	InvincibleTakeDamage                     = 1,
	ETresPlayerSpecialActionType_MAX         = 2,
};

// Enum TresGame.ETresCustomCompositeReturnCondition
// NumValues: 0x0004
enum class ETresCustomCompositeReturnCondition : uint8
{
	FirstSuccess                             = 0,
	FirstFailure                             = 1,
	LastNodeCompletes                        = 2,
	ETresCustomCompositeReturnCondition_MAX  = 3,
};

// Enum TresGame.ETresControlledRandomPeriod
// NumValues: 0x0007
enum class ETresControlledRandomPeriod : uint8
{
	NoRandom                                 = 0,
	VeryLowRandom                            = 1,
	LowRandom                                = 2,
	MediumRandom                             = 3,
	PureRandom                               = 4,
	Custom                                   = 5,
	ETresControlledRandomPeriod_MAX          = 6,
};

// Enum TresGame.ETresArithmeticComparisonSource
// NumValues: 0x0005
enum class ETresArithmeticComparisonSource : uint8
{
	Blackboard                               = 0,
	ActorProperty                            = 1,
	ActorFunction                            = 2,
	LiteralValue                             = 3,
	ETresArithmeticComparisonSource_MAX      = 4,
};

// Enum TresGame.ETresCanCoopJoinRole
// NumValues: 0x0004
enum class ETresCanCoopJoinRole : uint8
{
	Leader                                   = 0,
	Follower                                 = 1,
	LeaderOrFollower                         = 2,
	ETresCanCoopJoinRole_MAX                 = 3,
};

// Enum TresGame.EEX354_TargetMoveDir
// NumValues: 0x0005
enum class EEX354_TargetMoveDir : uint8
{
	EEX354_TargetMoveDir_Front               = 0,
	EEX354_TargetMoveDir_Rear                = 1,
	EEX354_TargetMoveDir_Right               = 2,
	EEX354_TargetMoveDir_Left                = 3,
	EEX354_TargetMoveDir_MAX                 = 4,
};

// Enum TresGame.ETresHateCompare
// NumValues: 0x0004
enum class ETresHateCompare : uint8
{
	Blackboard                               = 0,
	MostHated                                = 1,
	TotalHateAgainstAllEnemies               = 2,
	ETresHateCompare_MAX                     = 3,
};

// Enum TresGame.EInterruptableEvent
// NumValues: 0x0007
enum class EInterruptableEvent : uint8
{
	IE_OnDamage                              = 0,
	IE_OnReflect                             = 1,
	IE_OnRevenge                             = 2,
	IE_OnDeath                               = 3,
	IE_OnScriptBegin                         = 4,
	IE_OnScriptEnd                           = 5,
	IE_MAX                                   = 6,
};

// Enum TresGame.ETresDecoratorMercunaRaycast
// NumValues: 0x0008
enum class ETresDecoratorMercunaRaycast : uint8
{
	Forward                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	Back                                     = 3,
	Up                                       = 4,
	Down                                     = 5,
	Direct                                   = 6,
	ETresDecoratorMercunaRaycast_MAX         = 7,
};

// Enum TresGame.ETresDecoratorNavigationRayDir
// NumValues: 0x0006
enum class ETresDecoratorNavigationRayDir : uint8
{
	Forward                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	Back                                     = 3,
	Direct                                   = 4,
	ETresDecoratorNavigationRayDir_MAX       = 5,
};

// Enum TresGame.ETresDecoratorValueModifierMethod
// NumValues: 0x0006
enum class ETresDecoratorValueModifierMethod : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	Sub                                      = 2,
	Mul                                      = 3,
	Div                                      = 4,
	ETresDecoratorValueModifierMethod_MAX    = 5,
};

// Enum TresGame.ETresDecoratorVectorValueModifierMethod
// NumValues: 0x0006
enum class ETresDecoratorVectorValueModifierMethod : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	Sub                                      = 2,
	Mul                                      = 3,
	Div                                      = 4,
	ETresDecoratorVectorValueModifierMethod_MAX = 5,
};

// Enum TresGame.ETresBTPlayerStateCkeck
// NumValues: 0x0007
enum class ETresBTPlayerStateCkeck : uint8
{
	FlyingMissionNormal                      = 0,
	FlyingMissionRideEx026                   = 1,
	FlyingMissionRideEx021                   = 2,
	ShootingRide                             = 3,
	RailSlide                                = 4,
	Max                                      = 5,
	ETresBTPlayerStateCkeck_MAX              = 6,
};

// Enum TresGame.ETresRandomEntryProbabilitySource
// NumValues: 0x0003
enum class ETresRandomEntryProbabilitySource : uint8
{
	LiteralValue                             = 0,
	Blackboard                               = 1,
	ETresRandomEntryProbabilitySource_MAX    = 2,
};

// Enum TresGame.ETresRandomEntryCooldownProbabilitySource
// NumValues: 0x0003
enum class ETresRandomEntryCooldownProbabilitySource : uint8
{
	LiteralValue                             = 0,
	Blackboard                               = 1,
	ETresRandomEntryCooldownProbabilitySource_MAX = 2,
};

// Enum TresGame.ETresRangeCheckValueSource
// NumValues: 0x0003
enum class ETresRangeCheckValueSource : uint8
{
	LiteralValue                             = 0,
	Blackboard                               = 1,
	ETresRangeCheckValueSource_MAX           = 2,
};

// Enum TresGame.ETresRangeCheckValueSetting
// NumValues: 0x0004
enum class ETresRangeCheckValueSetting : uint8
{
	Minimum                                  = 0,
	Maximum                                  = 1,
	Range                                    = 2,
	ETresRangeCheckValueSetting_MAX          = 3,
};

// Enum TresGame.ETresRangeCheckMode
// NumValues: 0x0006
enum class ETresRangeCheckMode : uint8
{
	DirectDistance                           = 0,
	DirectDistance2D                         = 1,
	DirectDistanceZ                          = 2,
	PathDistance                             = 3,
	PathCost                                 = 4,
	ETresRangeCheckMode_MAX                  = 5,
};

// Enum TresGame.ETresVelocityTestMode
// NumValues: 0x0004
enum class ETresVelocityTestMode : uint8
{
	Velocity3D                               = 0,
	Velocity2D                               = 1,
	VelocityZ                                = 2,
	ETresVelocityTestMode_MAX                = 3,
};

// Enum TresGame.ETresBlackboardValueModifierInOutMethod
// NumValues: 0x0006
enum class ETresBlackboardValueModifierInOutMethod : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	Sub                                      = 2,
	Mul                                      = 3,
	Div                                      = 4,
	ETresBlackboardValueModifierInOutMethod_MAX = 5,
};

// Enum TresGame.ETresArithmeticModifierSource
// NumValues: 0x0005
enum class ETresArithmeticModifierSource : uint8
{
	Blackboard                               = 0,
	ActorProperty                            = 1,
	ActorFunction                            = 2,
	LiteralValue                             = 3,
	ETresArithmeticModifierSource_MAX        = 4,
};

// Enum TresGame.ETresValueModifierMethod
// NumValues: 0x0006
enum class ETresValueModifierMethod : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	Sub                                      = 2,
	Mul                                      = 3,
	Div                                      = 4,
	ETresValueModifierMethod_MAX             = 5,
};

// Enum TresGame.COMMON_HANGAROUNDTARGET_MODE_Enum
// NumValues: 0x0003
enum class ECOMMON_HANGAROUNDTARGET_MODE_Enum : uint8
{
	Boorish                                  = 0,
	Smart                                    = 1,
	COMMON_HANGAROUNDTARGET_MODE_MAX         = 2,
};

// Enum TresGame.COMMON_ROUNDANDROUND_MODE_Enum
// NumValues: 0x0003
enum class ECOMMON_ROUNDANDROUND_MODE_Enum : uint8
{
	Right                                    = 0,
	Unsteady                                 = 1,
	COMMON_ROUNDANDROUND_MODE_MAX            = 2,
};

// Enum TresGame.DIRECTIONAL_MOVE_MODE_Enum
// NumValues: 0x0005
enum class EDIRECTIONAL_MOVE_MODE_Enum : uint8
{
	Forward                                  = 0,
	Backward                                 = 1,
	Left                                     = 2,
	Right                                    = 3,
	DIRECTIONAL_MOVE_MODE_MAX                = 4,
};

// Enum TresGame.ETresHateModifier
// NumValues: 0x0004
enum class ETresHateModifier : uint8
{
	Blackboard                               = 0,
	Everyone                                 = 1,
	EveryoneExcludeBlackboard                = 2,
	ETresHateModifier_MAX                    = 3,
};

// Enum TresGame.LEAVE_FROM_TARGET_MODE_Enum
// NumValues: 0x0004
enum class ELEAVE_FROM_TARGET_MODE_Enum : uint8
{
	Away                                     = 0,
	Forward                                  = 1,
	Random                                   = 2,
	LEAVE_FROM_TARGET_MODE_MAX               = 3,
};

// Enum TresGame.ETresRageSource
// NumValues: 0x0003
enum class ETresRageSource : uint8
{
	LiteralValue                             = 0,
	Blackboard                               = 1,
	ETresRageSource_MAX                      = 2,
};

// Enum TresGame.COMMON_RANDOMWALK_MODE_Enum
// NumValues: 0x0004
enum class ECOMMON_RANDOMWALK_MODE_Enum : uint8
{
	Forward                                  = 0,
	Backward                                 = 1,
	ToTarget                                 = 2,
	COMMON_RANDOMWALK_MODE_MAX               = 3,
};

// Enum TresGame.COMMON_SHADOWMOVE_MODE_Enum
// NumValues: 0x0005
enum class ECOMMON_SHADOWMOVE_MODE_Enum : uint8
{
	Approach                                 = 0,
	ApproachEnd                              = 1,
	Surround                                 = 2,
	LinkSurround                             = 3,
	COMMON_SHADOWMOVE_MODE_MAX               = 4,
};

// Enum TresGame.COMMON_SURROUNDTARGET_MODE_Enum
// NumValues: 0x0004
enum class ECOMMON_SURROUNDTARGET_MODE_Enum : uint8
{
	Right                                    = 0,
	Left                                     = 1,
	UnsteadyTwoway                           = 2,
	COMMON_SURROUNDTARGET_MODE_MAX           = 3,
};

// Enum TresGame.ETresCameraStick
// NumValues: 0x0004
enum class ETresCameraStick : uint8
{
	TRES_CAMERA_STICK_RIGHT                  = 0,
	TRES_CAMERA_STICK_LEFT                   = 1,
	TRES_CAMERA_STICK_RIGHTLEFT              = 2,
	TRES_CAMERA_STICK_MAX                    = 3,
};

// Enum TresGame.ECameraLensType
// NumValues: 0x0005
enum class ECameraLensType : uint8
{
	LENS_DOF_OFF                             = 0,
	LENS_DOF_ON                              = 1,
	MAX                                      = 2,
	LENS_FISHEYE                             = 3,
	ECameraLensType_MAX                      = 4,
};

// Enum TresGame.ETresCameraTargetWallCheckType
// NumValues: 0x0007
enum class ETresCameraTargetWallCheckType : uint8
{
	TCTWallCheckType_Normal                  = 0,
	TCTWallCheckType_BasePos                 = 1,
	TCTWallCheckType_TargetPos               = 2,
	TCTWallCheckType_TargetBoneName          = 3,
	TCTWallCheckType_AccompanyPawnSafetyPos  = 4,
	TCTWallCheckType_TargetRoot              = 5,
	TCTWallCheckType_MAX                     = 6,
};

// Enum TresGame.ETresAtkTeamCheckType
// NumValues: 0x0005
enum class ETresAtkTeamCheckType : uint8
{
	NORMAL                                   = 0,
	NO_CHECK                                 = 1,
	SAME_ZERO                                = 2,
	_MAX                                     = 3,
	ETresAtkTeamCheckType_MAX                = 4,
};

// Enum TresGame.ETresChrBiologicalType
// NumValues: 0x0006
enum class ETresChrBiologicalType : uint8
{
	Human                                    = 0,
	Heartless                                = 1,
	Nobody                                   = 2,
	Unverse                                  = 3,
	Unknown                                  = 4,
	ETresChrBiologicalType_MAX               = 5,
};

// Enum TresGame.ETresBodyPushPowerLevel
// NumValues: 0x000C
enum class ETresBodyPushPowerLevel : uint8
{
	PPL_10                                   = 0,
	PPL_20                                   = 1,
	PPL_30                                   = 2,
	PPL_40                                   = 3,
	PPL_50                                   = 4,
	PPL_60                                   = 5,
	PPL_70                                   = 6,
	PPL_80                                   = 7,
	PPL_90                                   = 8,
	PPL_MAX                                  = 9,
	_PPL_MAX                                 = 10,
	ETresBodyPushPowerLevel_MAX              = 11,
};

// Enum TresGame.ETresChrDataTableSetType
// NumValues: 0x0008
enum class ETresChrDataTableSetType : uint8
{
	CDTS_TYPE_PLAYER                         = 0,
	CDTS_TYPE_ENEMY                          = 1,
	CDTS_TYPE_GIMMICK                        = 2,
	PLAYER_GIGAS                             = 3,
	PLAYER_SHIP                              = 4,
	ENEMY_SHIP                               = 5,
	CDTS_TYPE_MAX                            = 6,
	ETresChrDataTableSetType_MAX             = 7,
};

// Enum TresGame.ETresChrLaunchType
// NumValues: 0x0003
enum class ETresChrLaunchType : uint8
{
	TCLT_NORMAL                              = 0,
	TCLT_AERO                                = 1,
	TCLT_MAX                                 = 2,
};

// Enum TresGame.ETresCommandCategory
// NumValues: 0x001E
enum class ETresCommandCategory : uint8
{
	TRES_CMD_CATEGORY_NONE                   = 0,
	TRES_CMD_CATEGORY_MOVE                   = 1,
	TRES_CMD_CATEGORY_FREERUN                = 2,
	TRES_CMD_CATEGORY_DODGE                  = 3,
	TRES_CMD_CATEGORY_GUARD                  = 4,
	TRES_CMD_CATEGORY_COUNTER                = 5,
	TRES_CMD_CATEGORY_FFMOVE                 = 6,
	TRES_CMD_CATEGORY_FFATTACK               = 7,
	TRES_CMD_CATEGORY_ATTACK                 = 8,
	TRES_CMD_CATEGORY_RUNATTACK              = 9,
	TRES_CMD_CATEGORY_JUMPCOMBO              = 10,
	TRES_CMD_CATEGORY_MAGIC                  = 11,
	TRES_CMD_CATEGORY_ITEM                   = 12,
	TRES_CMD_CATEGORY_ACCESS                 = 13,
	TRES_CMD_CATEGORY_STYLE                  = 14,
	TRES_CMD_CATEGORY_FINISH                 = 15,
	TRES_CMD_CATEGORY_EXTRA                  = 16,
	TRES_CMD_CATEGORY_ATTRACTION             = 17,
	TRES_CMD_CATEGORY_FRIEND                 = 18,
	TRES_CMD_CATEGORY_DMAGIC                 = 19,
	TRES_CMD_CATEGORY_SUMMON                 = 20,
	TRES_CMD_CATEGORY_SHOOTFLOW              = 21,
	TRES_CMD_CATEGORY_ATHLETIC               = 22,
	TRES_CMD_CATEGORY_ABILITY                = 23,
	TRES_CMD_CATEGORY_PRIZE                  = 24,
	TRES_CMD_CATEGORY_OTHER                  = 25,
	TRES_CMD_CATEGORY_DEBUG                  = 26,
	TRES_CMD_CATEGORY_SWITCH                 = 27,
	TRES_CMD_CATEGORY_END                    = 28,
	TRES_CMD_CATEGORY_MAX                    = 29,
};

// Enum TresGame.ETresCommandType
// NumValues: 0x000B
enum class ETresCommandType : uint8
{
	TRES_CMD_TYPE_NONE                       = 0,
	TRES_CMD_TYPE_ACTION                     = 1,
	TRES_CMD_TYPE_FREEFLOW                   = 2,
	TRES_CMD_TYPE_COMMAND                    = 3,
	TRES_CMD_TYPE_REACTION                   = 4,
	TRES_CMD_TYPE_SHOOTFLOW                  = 5,
	TRES_CMD_TYPE_ABILITY                    = 6,
	TRES_CMD_TYPE_PRIZE                      = 7,
	TRES_CMD_TYPE_OTHER                      = 8,
	TRES_CMD_TYPE_END                        = 9,
	TRES_CMD_TYPE_MAX                        = 10,
};

// Enum TresGame.ETresComNpcMoveType
// NumValues: 0x0003
enum class ETresComNpcMoveType : uint8
{
	CNPC_MOVE_NONE                           = 0,
	CNPC_MOVE_CONTROLLER                     = 1,
	CNPC_MOVE_MAX                            = 2,
};

// Enum TresGame.ETresRandomDistributionType
// NumValues: 0x0003
enum class ETresRandomDistributionType : uint8
{
	Uniform                                  = 0,
	Normal                                   = 1,
	ETresRandomDistributionType_MAX          = 2,
};

// Enum TresGame.ETresEnemy_e_ex761_CommonCoopFollowers
// NumValues: 0x0003
enum class ETresEnemy_e_ex761_CommonCoopFollowers : uint8
{
	NearDistance                             = 0,
	Max                                      = 1,
	ETresEnemy_e_ex761_MAX                   = 2,
};

// Enum TresGame.ETresEnemy_e_ex761_DarknessSpreadOut
// NumValues: 0x0005
enum class ETresEnemy_e_ex761_DarknessSpreadOut : uint8
{
	Near                                     = 0,
	Middle                                   = 1,
	Far                                      = 2,
	Max                                      = 3,
	ETresEnemy_e_ex761_MAX                   = 4,
};

// Enum TresGame.EEX355_AccelDir
// NumValues: 0x0003
enum class EEX355_AccelDir : uint8
{
	EEX355_AccelDir_Right                    = 0,
	EEX355_AccelDir_Left                     = 1,
	EEX355_AccelDir_Max                      = 2,
};

// Enum TresGame.EAccelVoice_e_ex359
// NumValues: 0x0003
enum class EAccelVoice_e_ex359 : uint8
{
	EAccelVoice_e_ex359_Left                 = 0,
	EAccelVoice_e_ex359_Right                = 1,
	EAccelVoice_e_ex359_MAX                  = 2,
};

// Enum TresGame.EEX359_CutDownYawType
// NumValues: 0x0003
enum class EEX359_CutDownYawType : uint8
{
	EEX359_CutDownYawType_Relative           = 0,
	EEX359_CutDownYawType_Camera             = 1,
	EEX359_CutDownYawType_MAX                = 2,
};

// Enum TresGame.ETresCoopRunningStatus
// NumValues: 0x0007
enum class ETresCoopRunningStatus : uint8
{
	Started                                  = 0,
	Waiting                                  = 1,
	Ready                                    = 2,
	Running                                  = 3,
	Finished                                 = 4,
	Invaild                                  = 5,
	ETresCoopRunningStatus_MAX               = 6,
};

// Enum TresGame.ETresCoopRole
// NumValues: 0x0004
enum class ETresCoopRole : uint8
{
	Unknown                                  = 0,
	Leader                                   = 1,
	Follower                                 = 2,
	ETresCoopRole_MAX                        = 3,
};

// Enum TresGame.CreateGummiShipState
// NumValues: 0x0005
enum class ECreateGummiShipState : uint8
{
	GummiShipPrepare                         = 0,
	GummiShipLoad                            = 1,
	GummiShipBulliding                       = 2,
	GummiShipError                           = 3,
	CreateGummiShipState_MAX                 = 4,
};

// Enum TresGame.ETresTornadoDebrisStateName
// NumValues: 0x000D
enum class ETresTornadoDebrisStateName : uint8
{
	ETresTornadoDebrisStateName_Idle         = 0,
	ETresTornadoDebrisStateName_BlowLand     = 1,
	ETresTornadoDebrisStateName_BlowAir      = 2,
	ETresTornadoDebrisStateName_DebrisLand   = 3,
	ETresTornadoDebrisStateName_DebrisAir    = 4,
	ETresTornadoDebrisStateName_MagmaTornado = 5,
	ETresTornadoDebrisStateName_IceTornado   = 6,
	ETresTornadoDebrisStateName_BigTornado   = 7,
	ETresTornadoDebrisStateName_Vacuum       = 8,
	ETresTornadoDebrisStateName_Wind         = 9,
	ETresTornadoDebrisStateName_MAX          = 10,
	ETresTornadoDebrisStateName_Hide         = 11,
	ETresTornadoDebrisStateName_IdleAlt      = 12,
};

// Enum TresGame.ETresDebugMenuBlendMode
// NumValues: 0x0003
enum class ETresDebugMenuBlendMode : uint8
{
	ETresDebugMenuBlendMode_normal           = 0,
	ETresDebugMenuBlendMode_add              = 1,
	ETresDebugMenuBlendMode_MAX              = 2,
};

// Enum TresGame.EDrawTextFilterType
// NumValues: 0x0004
enum class EDrawTextFilterType : uint8
{
	EDrawTextFilterType_Blur                 = 0,
	EDrawTextFilterType_Glow                 = 1,
	EDrawTextFilterType_DropShadow           = 2,
	EDrawTextFilterType_MAX                  = 3,
};

// Enum TresGame.ETresDebugMenuMotionObjectPropertyType
// NumValues: 0x0020
enum class ETresDebugMenuMotionObjectPropertyType : uint8
{
	ETresDebugMenuMotionObjectProperty_Motion_X = 0,
	ETresDebugMenuMotionObjectProperty_Motion_Y = 1,
	ETresDebugMenuMotionObjectProperty_Rotation_Z = 2,
	ETresDebugMenuMotionObjectProperty_Scale_X = 3,
	ETresDebugMenuMotionObjectProperty_Scale_Y = 4,
	ETresDebugMenuMotionObjectProperty_AdvClr_R_Pct = 5,
	ETresDebugMenuMotionObjectProperty_AdvClr_R_Offset = 6,
	ETresDebugMenuMotionObjectProperty_AdvClr_G_Pct = 7,
	ETresDebugMenuMotionObjectProperty_AdvClr_G_Offset = 8,
	ETresDebugMenuMotionObjectProperty_AdvClr_B_Pct = 9,
	ETresDebugMenuMotionObjectProperty_AdvClr_B_Offset = 10,
	ETresDebugMenuMotionObjectProperty_AdvClr_A_Pct = 11,
	ETresDebugMenuMotionObjectProperty_AdvClr_A_Offset = 12,
	ETresDebugMenuMotionObjectProperty_Blur_BlurX = 13,
	ETresDebugMenuMotionObjectProperty_Blur_BlurY = 14,
	ETresDebugMenuMotionObjectProperty_Glow_BlurX = 15,
	ETresDebugMenuMotionObjectProperty_Glow_BlurY = 16,
	ETresDebugMenuMotionObjectProperty_Glow_Strength = 17,
	ETresDebugMenuMotionObjectProperty_Glow_Color_R = 18,
	ETresDebugMenuMotionObjectProperty_Glow_Color_G = 19,
	ETresDebugMenuMotionObjectProperty_Glow_Color_B = 20,
	ETresDebugMenuMotionObjectProperty_Glow_Color_A = 21,
	ETresDebugMenuMotionObjectProperty_DropShadow_BlurX = 22,
	ETresDebugMenuMotionObjectProperty_DropShadow_BlurY = 23,
	ETresDebugMenuMotionObjectProperty_DropShadow_Strength = 24,
	ETresDebugMenuMotionObjectProperty_DropShadow_Angle = 25,
	ETresDebugMenuMotionObjectProperty_DropShadow_Distance = 26,
	ETresDebugMenuMotionObjectProperty_DropShadow_Color_R = 27,
	ETresDebugMenuMotionObjectProperty_DropShadow_Color_G = 28,
	ETresDebugMenuMotionObjectProperty_DropShadow_Color_B = 29,
	ETresDebugMenuMotionObjectProperty_DropShadow_Color_A = 30,
	ETresDebugMenuMotionObjectProperty_MAX   = 31,
};

// Enum TresGame.ETresDebugMenuTweenType
// NumValues: 0x0004
enum class ETresDebugMenuTweenType : uint8
{
	ETresDebugMenuTweenType_off              = 0,
	ETresDebugMenuTweenType_motion           = 1,
	ETresDebugMenuTweenType_motion_object    = 2,
	ETresDebugMenuTweenType_MAX              = 3,
};

// Enum TresGame.ETresDebugMenuTextVAlignment
// NumValues: 0x0004
enum class ETresDebugMenuTextVAlignment : uint8
{
	ETresDebugMenuTextVAlignment_top         = 0,
	ETresDebugMenuTextVAlignment_center      = 1,
	ETresDebugMenuTextVAlignment_bottom      = 2,
	ETresDebugMenuTextVAlignment_MAX         = 3,
};

// Enum TresGame.ETresDebugMenuTextAlignment
// NumValues: 0x0005
enum class ETresDebugMenuTextAlignment : uint8
{
	ETresDebugMenuTextAlignment_left         = 0,
	ETresDebugMenuTextAlignment_center       = 1,
	ETresDebugMenuTextAlignment_right        = 2,
	ETresDebugMenuTextAlignment_justify      = 3,
	ETresDebugMenuTextAlignment_MAX          = 4,
};

// Enum TresGame.ETresDebugMenuResourceType
// NumValues: 0x0005
enum class ETresDebugMenuResourceType : uint8
{
	ETresDebugMenuResourceType_Image         = 0,
	ETresDebugMenuResourceType_Text          = 1,
	ETresDebugMenuResourceType_MovieClip     = 2,
	ETresDebugMenuResourceType_Custom        = 3,
	ETresDebugMenuResourceType_MAX           = 4,
};

// Enum TresGame.ETresDebugMenuState
// NumValues: 0x0005
enum class ETresDebugMenuState : uint8
{
	ETresDebugMenuState_Opening              = 0,
	ETresDebugMenuState_Opened               = 1,
	ETresDebugMenuState_Closing              = 2,
	ETresDebugMenuState_Closed               = 3,
	ETresDebugMenuState_MAX                  = 4,
};

// Enum TresGame.ETresGameKey
// NumValues: 0x0005
enum class ETresGameKey : uint8
{
	Decide                                   = 0,
	Cancel                                   = 1,
	SituationCommand                         = 2,
	AfCancel                                 = 3,
	ETresGameKey_MAX                         = 4,
};

// Enum TresGame.ETresDecoPartsAttachPartIdx
// NumValues: 0x0005
enum class ETresDecoPartsAttachPartIdx : uint8
{
	TDPE_HEAD                                = 0,
	TDPE_BODY                                = 1,
	TDPE_ARM                                 = 2,
	TDPE_TEXPAT                              = 3,
	TDPE_MAX                                 = 4,
};

// Enum TresGame.ETresRalphBlockKind
// NumValues: 0x0009
enum class ETresRalphBlockKind : uint8
{
	RALPH_BLOCK_KIND_A                       = 0,
	RALPH_BLOCK_KIND_B                       = 1,
	RALPH_BLOCK_KIND_C                       = 2,
	RALPH_BLOCK_KIND_D                       = 3,
	RALPH_BLOCK_KIND_E                       = 4,
	RALPH_BLOCK_KIND_F                       = 5,
	RALPH_BLOCK_KIND_ONE                     = 6,
	RALPH_BLOCK_KIND_CANNON                  = 7,
	RALPH_BLOCK_KIND_MAX                     = 8,
};

// Enum TresGame.ETresEncountDisableVolumeType
// NumValues: 0x0003
enum class ETresEncountDisableVolumeType : uint8
{
	Type_Box                                 = 0,
	Type_Circle                              = 1,
	Type_MAX                                 = 2,
};

// Enum TresGame.ETresEncountVolumeSnapTarget
// NumValues: 0x0004
enum class ETresEncountVolumeSnapTarget : uint8
{
	Snap_Nothing                             = 0,
	Snap_Ground                              = 1,
	Snap_Ocean                               = 2,
	Snap_MAX                                 = 3,
};

// Enum TresGame.ETresEncountVolumeVehicleMode
// NumValues: 0x0004
enum class ETresEncountVolumeVehicleMode : uint8
{
	DoNotCare                                = 0,
	NoVehicle                                = 1,
	OnlyVehicle                              = 2,
	ETresEncountVolumeVehicleMode_MAX        = 3,
};

// Enum TresGame.EBX901_ActionTriggerType
// NumValues: 0x0003
enum class EBX901_ActionTriggerType : uint8
{
	EBX901_ActionTriggerType_DarkBaymax      = 0,
	EBX901_ActionTriggerType_Player          = 1,
	EBX901_ActionTriggerType_Max             = 2,
};

// Enum TresGame.ETresEnemyEx353CatchAfterSituation
// NumValues: 0x0005
enum class ETresEnemyEx353CatchAfterSituation : uint8
{
	ChangeSituation                          = 0,
	Continuation                             = 1,
	AbsoluteAir                              = 2,
	Max                                      = 3,
	ETresEnemyEx353CatchAfterSituation_MAX   = 4,
};

// Enum TresGame.ETresEnemy_e_ex307_DummyCardSpawn
// NumValues: 0x0003
enum class ETresEnemy_e_ex307_DummyCardSpawn : uint8
{
	Scatter                                  = 0,
	Collect                                  = 1,
	ETresEnemy_e_ex307_MAX                   = 2,
};

// Enum TresGame.ETresEnemy_e_ex307_Phase2CardAction
// NumValues: 0x0006
enum class ETresEnemy_e_ex307_Phase2CardAction : uint8
{
	Shake                                    = 0,
	VerticalSway                             = 1,
	HorizontalSway                           = 2,
	Shine                                    = 3,
	Max                                      = 4,
	ETresEnemy_e_ex307_MAX                   = 5,
};

// Enum TresGame.ETresEnemy_e_ex307_Phase2Card
// NumValues: 0x0005
enum class ETresEnemy_e_ex307_Phase2Card : uint8
{
	Correct                                  = 0,
	Dummy                                    = 1,
	Incorrect                                = 2,
	Max                                      = 3,
	ETresEnemy_e_ex307_MAX                   = 4,
};

// Enum TresGame.ETresEnemy_e_ex307_CardDesign
// NumValues: 0x0005
enum class ETresEnemy_e_ex307_CardDesign : uint8
{
	King                                     = 0,
	Luxord                                   = 1,
	Not                                      = 2,
	Plain                                    = 3,
	ETresEnemy_e_ex307_MAX                   = 4,
};

// Enum TresGame.ETresEnemyGigasCheckActionState
// NumValues: 0x0007
enum class ETresEnemyGigasCheckActionState : uint8
{
	ETresEnemyGigasCheckActionState_MachineGun = 0,
	ETresEnemyGigasCheckActionState_Punch    = 1,
	ETresEnemyGigasCheckActionState_BoosterTackle = 2,
	ETresEnemyGigasCheckActionState_Bomb     = 3,
	ETresEnemyGigasCheckActionState_Cannon   = 4,
	ETresEnemyGigasCheckActionState_Attack   = 5,
	ETresEnemyGigasCheckActionState_MAX      = 6,
};

// Enum TresGame.ETresEnemyGigasActionState
// NumValues: 0x0006
enum class ETresEnemyGigasActionState : uint8
{
	ETresEnemyGigasActionState_MachineGun    = 0,
	ETresEnemyGigasActionState_Punch         = 1,
	ETresEnemyGigasActionState_BoosterTackle = 2,
	ETresEnemyGigasActionState_Bomb          = 3,
	ETresEnemyGigasActionState_Cannon        = 4,
	ETresEnemyGigasActionState_MAX           = 5,
};

// Enum TresGame.EEnemyLargeShipBase
// NumValues: 0x0005
enum class EEnemyLargeShipBase : uint8
{
	TO_TARGET                                = 0,
	SELF_ROT                                 = 1,
	TARGET_ROT                               = 2,
	TO_TARGET_SIDE                           = 3,
	EEnemyLargeShipBase_MAX                  = 4,
};

// Enum TresGame.ETresEnemyXIIIELeaderChangeRule
// NumValues: 0x0007
enum class ETresEnemyXIIIELeaderChangeRule : uint8
{
	Alternate                                = 0,
	LessFrequent                             = 1,
	Random                                   = 2,
	LowerHitPoint                            = 3,
	HigherHitPoint                           = 4,
	MAX                                      = 5,
	ETresEnemyXIIIELeaderChangeRule_MAX      = 6,
};

// Enum TresGame.ETresEnemyXIIIEFirstAnnihilationRule
// NumValues: 0x0005
enum class ETresEnemyXIIIEFirstAnnihilationRule : uint8
{
	HpOrTime                                 = 0,
	Hp                                       = 1,
	Time                                     = 2,
	MAX                                      = 3,
	ETresEnemyXIIIEFirstAnnihilationRule_MAX = 4,
};

// Enum TresGame.EBX901_NoHitWallDamage
// NumValues: 0x0004
enum class EBX901_NoHitWallDamage : uint8
{
	EBX901_NoHitWallDamage_BLOW              = 0,
	EBX901_NoHitWallDamage_PARABOLA          = 1,
	EBX901_NoHitWallDamage_PARABOLA_NO_RECOVERY = 2,
	EBX901_NoHitWallDamage_MAX               = 3,
};

// Enum TresGame.EBX901_EffectGroupID
// NumValues: 0x000A
enum class EBX901_EffectGroupID : uint8
{
	EBX901_EffectGroupID_RunLeg              = 0,
	EBX901_EffectGroupID_WalkLeg             = 1,
	EBX901_EffectGroupID_HaltLeg             = 2,
	EBX901_EffectGroupID_WingJet             = 3,
	EBX901_EffectGroupID_WingJetLarge        = 4,
	EBX901_EffectGroupID_BodyBlock           = 5,
	EBX901_EffectGroupID_WingBlock           = 6,
	EBX901_EffectGroupID_WingDisp            = 7,
	EBX901_EffectGroupID_Aura                = 8,
	EBX901_EffectGroupID_Max                 = 9,
};

// Enum TresGame.ETresEnemyDarkBaymaxPhase
// NumValues: 0x0004
enum class ETresEnemyDarkBaymaxPhase : uint8
{
	PHASE1                                   = 0,
	PHASE2                                   = 1,
	_MAX                                     = 2,
	ETresEnemyDarkBaymaxPhase_MAX            = 3,
};

// Enum TresGame.ETresEnemyDw401CoreColor
// NumValues: 0x0006
enum class ETresEnemyDw401CoreColor : uint8
{
	ETresEnemyDw401CoreColor_A               = 0,
	ETresEnemyDw401CoreColor_B               = 1,
	ETresEnemyDw401CoreColor_C               = 2,
	ETresEnemyDw401CoreColor_D               = 3,
	ETresEnemyDw401CoreColor_None            = 4,
	ETresEnemyDw401CoreColor_MAX             = 5,
};

// Enum TresGame.ETresEnemyDw405BattleCount
// NumValues: 0x0005
enum class ETresEnemyDw405BattleCount : uint8
{
	TRES_ENEMY_DW405_BATTLECOUNT_ONE         = 0,
	TRES_ENEMY_DW405_BATTLECOUNT_SECOND      = 1,
	TRES_ENEMY_DW405_BATTLECOUNT_THIRD       = 2,
	TRES_ENEMY_DW405_BATTLECOUNT_FOURTH      = 3,
	TRES_ENEMY_DW405_BATTLECOUNT_MAX         = 4,
};

// Enum TresGame.ETresEnemyEx409Event
// NumValues: 0x0003
enum class ETresEnemyEx409Event : uint8
{
	DestroyEffect                            = 0,
	Max                                      = 1,
	ETresEnemyEx409Event_MAX                 = 2,
};

// Enum TresGame.ETresEnemy_e_ex002_GuardType
// NumValues: 0x0004
enum class ETresEnemy_e_ex002_GuardType : uint8
{
	ETresEnemy_e_ex002_GuardType_None        = 0,
	ETresEnemy_e_ex002_GuardType_State       = 1,
	ETresEnemy_e_ex002_GuardType_Air         = 2,
	ETresEnemy_e_ex002_GuardType_MAX         = 3,
};

// Enum TresGame.ETresFortressType_ex011
// NumValues: 0x0004
enum class ETresFortressType_ex011 : uint8
{
	TRES_ENEMY_EX011_FORTRESS_TYPE_LOWER     = 0,
	TRES_ENEMY_EX011_FORTRESS_TYPE_MIDDLE    = 1,
	TRES_ENEMY_EX011_FORTRESS_TYPE_UPPER     = 2,
	TRES_ENEMY_EX011_FORTRESS_TYPE_MAX       = 3,
};

// Enum TresGame.ETresVehicleType_e_ex011
// NumValues: 0x0004
enum class ETresVehicleType_e_ex011 : uint8
{
	TRES_ENEMY_EX011_VEHICLE_TYPE_TOP        = 0,
	TRES_ENEMY_EX011_VEHICLE_TYPE_SECOND     = 1,
	TRES_ENEMY_EX011_VEHICLE_TYPE_THIRD      = 2,
	TRES_ENEMY_EX011_VEHICLE_TYPE_MAX        = 3,
};

// Enum TresGame.ETresEnemy_e_ex012_State
// NumValues: 0x000E
enum class ETresEnemy_e_ex012_State : uint8
{
	None                                     = 0,
	Appear                                   = 1,
	Idle                                     = 2,
	BeginCooperation                         = 3,
	BeginMove                                = 4,
	DuringMove                               = 5,
	FinishMove                               = 6,
	Damage                                   = 7,
	BeginShowerNeedle                        = 8,
	DuringShowerNeedle                       = 9,
	FinishShowerNeedle                       = 10,
	Die                                      = 11,
	Other                                    = 12,
	ETresEnemy_e_ex012_MAX                   = 13,
};

// Enum TresGame.ETresEnemy_ex013_WatageMaterialType
// NumValues: 0x0006
enum class ETresEnemy_ex013_WatageMaterialType : uint8
{
	TRES_ENEMY_EX013_WATAGE_MATERIAL_TYPE_ALL = 0,
	TRES_ENEMY_EX013_WATAGE_MATERIAL_TYPE_HALF = 1,
	TRES_ENEMY_EX013_WATAGE_MATERIAL_TYPE_NONE = 2,
	TRES_ENEMY_EX013_WATAGE_MATERIAL_TYPE_NONE2 = 3,
	TRES_ENEMY_EX013_WATAGE_MATERIAL_TYPE_NONE3 = 4,
	TRES_ENEMY_EX013_WATAGE_MATERIAL_TYPE_MAX = 5,
};

// Enum TresGame.ETresEnemyEx021ActionMode
// NumValues: 0x0007
enum class ETresEnemyEx021ActionMode : uint8
{
	NORMAL                                   = 0,
	LONGSTUNNED                              = 1,
	BOARDED                                  = 2,
	BOARDED_TURNAROUND                       = 3,
	SMALLDAMAGE                              = 4,
	MAX                                      = 5,
	ETresEnemyEx021ActionMode_MAX            = 6,
};

// Enum TresGame.ETresCoopColorSmokeKind
// NumValues: 0x0006
enum class ETresCoopColorSmokeKind : uint8
{
	RED                                      = 0,
	BLUE                                     = 1,
	YELLOW                                   = 2,
	GREEN                                    = 3,
	MAX                                      = 4,
	ETresCoopColorSmokeKind_MAX              = 5,
};

// Enum TresGame.ETresEnemy_e_ex028_BodyColor
// NumValues: 0x0005
enum class ETresEnemy_e_ex028_BodyColor : uint8
{
	ETresEnemy_e_ex028_BodyColor_Rainbow     = 0,
	ETresEnemy_e_ex028_BodyColor_Blue        = 1,
	ETresEnemy_e_ex028_BodyColor_Red         = 2,
	ETresEnemy_e_ex028_BodyColor_Yellow      = 3,
	ETresEnemy_e_ex028_BodyColor_Max         = 4,
};

// Enum TresGame.e_ex035_DAMAGE_TYPE
// NumValues: 0x0004
enum class E_ex035_DAMAGE_TYPE : uint8
{
	BLOW                                     = 0,
	Finish                                   = 1,
	IMMOVABLE                                = 2,
	E_ex035_DAMAGE_TYPE_MAX                  = 3,
};

// Enum TresGame.ETresEnemyEx046Region
// NumValues: 0x0004
enum class ETresEnemyEx046Region : uint8
{
	TRES_ENEMY_EX046_REGION_RIGHTWING        = 0,
	TRES_ENEMY_EX046_REGION_LEFTWING         = 1,
	TRES_ENEMY_EX046_REGION_TAIL             = 2,
	TRES_ENEMY_EX046_REGION_MAX              = 3,
};

// Enum TresGame.ETrese_ex047WorldTypes
// NumValues: 0x0008
enum class ETrese_ex047WorldTypes : uint8
{
	TRES_ENEMY_EX047_WORLDTYPE_HE            = 1,
	TRES_ENEMY_EX047_WORLDTYPE_RA            = 2,
	TRES_ENEMY_EX047_WORLDTYPE_MI            = 3,
	TRES_ENEMY_EX047_WORLDTYPE_TS            = 4,
	TRES_ENEMY_EX047_WORLDTYPE_CA            = 5,
	TRES_ENEMY_EX047_WORLDTYPE_FZ            = 6,
	TRES_ENEMY_EX047_WORLDTYPE_BX            = 7,
	TRES_ENEMY_EX047_WORLDTYPE_MAX           = 8,
};

// Enum TresGame.ETresEnemyEx048Mode
// NumValues: 0x0003
enum class ETresEnemyEx048Mode : uint8
{
	TRES_ENEMY_EX048_FLYMODE                 = 0,
	TRES_ENEMY_EX048_LANDMODE                = 1,
	TRES_ENEMY_EX048_MAX                     = 2,
};

// Enum TresGame.ETresEx050PuddingType
// NumValues: 0x0005
enum class ETresEx050PuddingType : uint8
{
	SMALL                                    = 0,
	BIG                                      = 1,
	FLY                                      = 2,
	CHASE                                    = 3,
	ETresEx050PuddingType_MAX                = 4,
};

// Enum TresGame.ETresEnemy_e_ex054_BattleStyle
// NumValues: 0x0005
enum class ETresEnemy_e_ex054_BattleStyle : uint8
{
	ETresEnemy_e_ex054_BattleStyle_Dinosaur  = 0,
	ETresEnemy_e_ex054_BattleStyle_Volcano   = 1,
	ETresEnemy_e_ex054_BattleStyle_Thundercloud = 2,
	ETresEnemy_e_ex054_BattleStyle_Berserk   = 3,
	ETresEnemy_e_ex054_BattleStyle_MAX       = 4,
};

// Enum TresGame.ETresEnemyEx071DeckKind
// NumValues: 0x0005
enum class ETresEnemyEx071DeckKind : uint8
{
	DeckA                                    = 0,
	DeckB                                    = 1,
	DeckC                                    = 2,
	MAX                                      = 3,
	ETresEnemyEx071DeckKind_MAX              = 4,
};

// Enum TresGame.ETresEnemyEx082_SnowEffectLocationType
// NumValues: 0x0003
enum class ETresEnemyEx082_SnowEffectLocationType : uint8
{
	TRES_ENEMY_EX082_SNOWEFFECTLOCATIONTYPE_RIGHT = 0,
	TRES_ENEMY_EX082_SNOWEFFECTLOCATIONTYPE_LEFT = 1,
	TRES_ENEMY_EX082_SNOWEFFECTLOCATIONTYPE_MAX = 2,
};

// Enum TresGame.ETresEnemyEx202ActionMode
// NumValues: 0x0003
enum class ETresEnemyEx202ActionMode : uint8
{
	TRES_ENEMY_EX202_ACTIONMODE_SNAKE        = 0,
	TRES_ENEMY_EX202_ACTIONMODE_FLOWER       = 1,
	TRES_ENEMY_EX202_ACTIONMODE_MAX          = 2,
};

// Enum TresGame.ETresEnemyEx302WarpDirection
// NumValues: 0x0006
enum class ETresEnemyEx302WarpDirection : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Right                                    = 2,
	Left                                     = 3,
	Max                                      = 4,
	ETresEnemyEx302WarpDirection_MAX         = 5,
};

// Enum TresGame.ETresEnemyEx304HitEffectKind
// NumValues: 0x0004
enum class ETresEnemyEx304HitEffectKind : uint8
{
	LaserHit                                 = 0,
	SparkHit                                 = 1,
	Max                                      = 2,
	ETresEnemyEx304HitEffectKind_MAX         = 3,
};

// Enum TresGame.ETresEnemyEx304BeamSaberPlace
// NumValues: 0x0005
enum class ETresEnemyEx304BeamSaberPlace : uint8
{
	RightHand                                = 0,
	LeftHand                                 = 1,
	BothHand                                 = 2,
	Max                                      = 3,
	ETresEnemyEx304BeamSaberPlace_MAX        = 4,
};

// Enum TresGame.EVoiceType_e_ex306
// NumValues: 0x0004
enum class EVoiceType_e_ex306 : uint8
{
	EVoiceType_e_ex306_Attach                = 0,
	EVoiceType_e_ex306_Location              = 1,
	EVoiceType_e_ex306_2D                    = 2,
	EVoiceType_e_ex306_MAX                   = 3,
};

// Enum TresGame.EVoice_e_ex306
// NumValues: 0x0007
enum class EVoice_e_ex306 : uint8
{
	EVoice_e_ex306_RevengeRoxas              = 0,
	EVoice_e_ex306_RevengeLea                = 1,
	EVoice_e_ex306_BlueBurst                 = 2,
	EVoice_e_ex306_BlueBurstLea              = 3,
	EVoice_e_ex306_BlueBurstDash             = 4,
	EVoice_e_ex306_Revenge                   = 5,
	EVoice_e_ex306_MAX                       = 6,
};

// Enum TresGame.EBodyType_e_ex306
// NumValues: 0x0005
enum class EBodyType_e_ex306 : uint8
{
	EBodyType_e_ex306_Normal                 = 0,
	EBodyType_e_ex306_Berserk                = 1,
	EBodyType_e_ex306_Blue                   = 2,
	EBodyType_e_ex306_Stun                   = 3,
	EBodyType_e_ex306_MAX                    = 4,
};

// Enum TresGame.ETresEnemyEx351TimeRushEvent
// NumValues: 0x0004
enum class ETresEnemyEx351TimeRushEvent : uint8
{
	TimeRushFinishMoveCenter                 = 0,
	TimeRushFinishInvincible                 = 1,
	Max                                      = 2,
	ETresEnemyEx351TimeRushEvent_MAX         = 3,
};

// Enum TresGame.ETresEnemyEx351WarpDirection
// NumValues: 0x0007
enum class ETresEnemyEx351WarpDirection : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Right                                    = 2,
	Left                                     = 3,
	TimeRush                                 = 4,
	Max                                      = 5,
	ETresEnemyEx351WarpDirection_MAX         = 6,
};

// Enum TresGame.ETresEnemyEx353ThornWildDanceEvent
// NumValues: 0x0004
enum class ETresEnemyEx353ThornWildDanceEvent : uint8
{
	SpawnThornWildDanceEffect                = 0,
	EndThornWildDanceEvent                   = 1,
	Max                                      = 2,
	ETresEnemyEx353ThornWildDanceEvent_MAX   = 3,
};

// Enum TresGame.ETresEnemyEx353HitEffectKind
// NumValues: 0x0004
enum class ETresEnemyEx353HitEffectKind : uint8
{
	LaserHit                                 = 0,
	SparkHit                                 = 1,
	Max                                      = 2,
	ETresEnemyEx353HitEffectKind_MAX         = 3,
};

// Enum TresGame.ETresEnemyEx353BeamSaberPlace
// NumValues: 0x0005
enum class ETresEnemyEx353BeamSaberPlace : uint8
{
	RightHand                                = 0,
	LeftHand                                 = 1,
	BothHand                                 = 2,
	Max                                      = 3,
	ETresEnemyEx353BeamSaberPlace_MAX        = 4,
};

// Enum TresGame.EEX354_RemoteEventID
// NumValues: 0x0007
enum class EEX354_RemoteEventID : uint8
{
	EEX354_RemoteEventID_StartArtema         = 0,
	EEX354_RemoteEventID_EndArtema           = 1,
	EEX354_RemoteEventID_EndArtemaShooting   = 2,
	EEX354_RemoteEventID_QuickBattleSuccess  = 3,
	EEX354_RemoteEventID_QuickBattleFailure  = 4,
	EEX354_RemoteEventID_QuickBattleMognet   = 5,
	EEX354_RemoteEventID_Max                 = 6,
};

// Enum TresGame.EEX354_FieldID
// NumValues: 0x0004
enum class EEX354_FieldID : uint8
{
	EEX354_FieldID_Standard                  = 0,
	EEX354_FieldID_Narrow                    = 1,
	EEX354_FieldID_Doughnut                  = 2,
	EEX354_FieldID_Max                       = 3,
};

// Enum TresGame.EEX355_MoveVelocityType
// NumValues: 0x0005
enum class EEX355_MoveVelocityType : uint8
{
	EEX355_MoveVelocityType_Constant         = 0,
	EEX355_MoveVelocityType_EaseIn           = 1,
	EEX355_MoveVelocityType_EaseOut          = 2,
	EEX355_MoveVelocityType_EaseInOut        = 3,
	EEX355_MoveVelocityType_Max              = 4,
};

// Enum TresGame.EEX355_RemoteEventID
// NumValues: 0x0003
enum class EEX355_RemoteEventID : uint8
{
	EEX355_RemoteEventID_StartBlue           = 0,
	EEX355_RemoteEventID_EndBlue             = 1,
	EEX355_RemoteEventID_Max                 = 2,
};

// Enum TresGame.EEX355_EffectGroupID
// NumValues: 0x0006
enum class EEX355_EffectGroupID : uint8
{
	EEX355_EffectGroupID_WarpIn              = 0,
	EEX355_EffectGroupID_WarpOut             = 1,
	EEX355_EffectGroupID_BerserkAura         = 2,
	EEX355_EffectGroupID_BlueAura            = 3,
	EEX355_EffectGroupID_Disappear           = 4,
	EEX355_EffectGroupID_Max                 = 5,
};

// Enum TresGame.EVoiceType_e_ex355
// NumValues: 0x0004
enum class EVoiceType_e_ex355 : uint8
{
	EVoiceType_e_ex355_Attach                = 0,
	EVoiceType_e_ex355_Location              = 1,
	EVoiceType_e_ex355_2D                    = 2,
	EVoiceType_e_ex355_MAX                   = 3,
};

// Enum TresGame.EVoice_e_ex355
// NumValues: 0x000C
enum class EVoice_e_ex355 : uint8
{
	EVoice_e_ex355_RevengeRoxas              = 0,
	EVoice_e_ex355_RevengeLea                = 1,
	EVoice_e_ex355_BlueBurst                 = 2,
	EVoice_e_ex355_BlueBurstLea              = 3,
	EVoice_e_ex355_BlueBurstDash             = 4,
	EVoice_e_ex355_Revenge                   = 5,
	EVoice_e_ex355_RevengeBlue               = 6,
	EVoice_e_ex355_Throw                     = 7,
	EVoice_e_ex355_ThrowBlue                 = 8,
	EVoice_e_ex355_MagnaStride               = 9,
	EVoice_e_ex355_Accel                     = 10,
	EVoice_e_ex355_MAX                       = 11,
};

// Enum TresGame.EBodyType_e_ex355
// NumValues: 0x0006
enum class EBodyType_e_ex355 : uint8
{
	EBodyType_e_ex355_Normal                 = 0,
	EBodyType_e_ex355_Berserk                = 1,
	EBodyType_e_ex355_Blue                   = 2,
	EBodyType_e_ex355_Stun                   = 3,
	EBodyType_e_ex355_Charge                 = 4,
	EBodyType_e_ex355_MAX                    = 5,
};

// Enum TresGame.ETresTimeGauge_e_ex356
// NumValues: 0x0004
enum class ETresTimeGauge_e_ex356 : uint8
{
	Player                                   = 0,
	Luxord                                   = 1,
	Max                                      = 2,
	ETresTimeGauge_e_MAX                     = 3,
};

// Enum TresGame.ETresBigDealRemoteEvent_e_ex356
// NumValues: 0x0003
enum class ETresBigDealRemoteEvent_e_ex356 : uint8
{
	StartCinematicEnd                        = 0,
	EndCinematicEnd                          = 1,
	ETresBigDealRemoteEvent_e_MAX            = 2,
};

// Enum TresGame.ETresDeathSentenceRemoteEventType_e_ex357
// NumValues: 0x0005
enum class ETresDeathSentenceRemoteEventType_e_ex357 : uint8
{
	StartLongCinematicEnd                    = 0,
	StartShortCinematicEnd                   = 1,
	EndCinematicEnd                          = 2,
	CountVisible                             = 3,
	ETresDeathSentenceRemoteEventType_e_ex357_MAX = 4,
};

// Enum TresGame.EEX359_SplineMoveVelocityType
// NumValues: 0x0005
enum class EEX359_SplineMoveVelocityType : uint8
{
	EEX359_SplineMoveVelocityType_Constant   = 0,
	EEX359_SplineMoveVelocityType_EaseIn     = 1,
	EEX359_SplineMoveVelocityType_EaseOut    = 2,
	EEX359_SplineMoveVelocityType_EaseInOut  = 3,
	EEX359_SplineMoveVelocityType_Max        = 4,
};

// Enum TresGame.EEX359_EffectGroupID
// NumValues: 0x0008
enum class EEX359_EffectGroupID : uint8
{
	EEX359_EffectGroupID_WarpDisappear       = 0,
	EEX359_EffectGroupID_WarpAppear          = 1,
	EEX359_EffectGroupID_FastMoveStart       = 2,
	EEX359_EffectGroupID_FastMoveEnd         = 3,
	EEX359_EffectGroupID_FastMove            = 4,
	EEX359_EffectGroupID_LaserRainShot       = 5,
	EEX359_EffectGroupID_FinalBrakeAura      = 6,
	EEX359_EffectGroupID_Max                 = 7,
};

// Enum TresGame.EEX359_RemoteEventID
// NumValues: 0x0007
enum class EEX359_RemoteEventID : uint8
{
	EEX359_RemoteEventID_ChangeSceneStart    = 0,
	EEX359_RemoteEventID_ChangeSceneEnd      = 1,
	EEX359_RemoteEventID_FinalBrakeStart     = 2,
	EEX359_RemoteEventID_FinalBrakeEnd       = 3,
	EEX359_RemoteEventID_BerserkStart        = 4,
	EEX359_RemoteEventID_BerserkEnd          = 5,
	EEX359_RemoteEventID_Max                 = 6,
};

// Enum TresGame.EVoiceType_e_ex359
// NumValues: 0x0004
enum class EVoiceType_e_ex359 : uint8
{
	EVoiceType_e_ex359_Attach                = 0,
	EVoiceType_e_ex359_Location              = 1,
	EVoiceType_e_ex359_2D                    = 2,
	EVoiceType_e_ex359_MAX                   = 3,
};

// Enum TresGame.EVoice_e_ex359
// NumValues: 0x0006
enum class EVoice_e_ex359 : uint8
{
	EVoice_e_ex359_AccelLeft                 = 0,
	EVoice_e_ex359_AccelRight                = 1,
	EVoice_e_ex359_FinalBrakeAccelLeft       = 2,
	EVoice_e_ex359_FinalBrakeAccelRight      = 3,
	EVoice_e_ex359_Revenge                   = 4,
	EVoice_e_ex359_MAX                       = 5,
};

// Enum TresGame.ETresEnemyEx701BodyCollisionType
// NumValues: 0x0004
enum class ETresEnemyEx701BodyCollisionType : uint8
{
	TRES_ENEMY_EX701_BODYCOLLISIONTYPE_DFAULT = 0,
	TRES_ENEMY_EX701_BODYCOLLISIONTYPE_RUSH  = 1,
	TRES_ENEMY_EX701_BODYCOLLISIONTYPE_SHOT  = 2,
	TRES_ENEMY_EX701_BODYCOLLISIONTYPE_MAX   = 3,
};

// Enum TresGame.ETresEnemyEx711_BodyCollision
// NumValues: 0x0005
enum class ETresEnemyEx711_BodyCollision : uint8
{
	ETresEnemyEx711_BodyCollision_PlPushSphere = 0,
	ETresEnemyEx711_BodyCollision_PlPushTornado = 1,
	ETresEnemyEx711_BodyCollision_PlPushTornadoOverRun = 2,
	ETresEnemyEx711_BodyCollision_ShootingRide = 3,
	ETresEnemyEx711_BodyCollision_Max        = 4,
};

// Enum TresGame.ETresEnemyEx711_Hatch
// NumValues: 0x0007
enum class ETresEnemyEx711_Hatch : uint8
{
	ETresEnemyEx711_Hatch_LF                 = 0,
	ETresEnemyEx711_Hatch_LC                 = 1,
	ETresEnemyEx711_Hatch_LB                 = 2,
	ETresEnemyEx711_Hatch_RF                 = 3,
	ETresEnemyEx711_Hatch_RC                 = 4,
	ETresEnemyEx711_Hatch_RB                 = 5,
	ETresEnemyEx711_Hatch_Max                = 6,
};

// Enum TresGame.ETresEnemyEx721WoodsJailPattern
// NumValues: 0x0005
enum class ETresEnemyEx721WoodsJailPattern : uint8
{
	CAMERA_IN                                = 0,
	CAMERA_OUT                               = 1,
	TOWER                                    = 2,
	MAX                                      = 3,
	ETresEnemyEx721WoodsJailPattern_MAX      = 4,
};

// Enum TresGame.ETresEnemyEx721HandID
// NumValues: 0x0006
enum class ETresEnemyEx721HandID : uint8
{
	RIGHT_UP                                 = 0,
	RIGHT_DOWN                               = 1,
	LEFT_UP                                  = 2,
	LEFT_DOWN                                = 3,
	MAX                                      = 4,
	ETresEnemyEx721HandID_MAX                = 5,
};

// Enum TresGame.ETresEnemyEx721Mode
// NumValues: 0x0003
enum class ETresEnemyEx721Mode : uint8
{
	TRES_ENEMY_EX721_NORMAL_MODE             = 0,
	TRES_ENEMY_EX721_TOWER_MODE              = 1,
	TRES_ENEMY_EX721_MAX                     = 2,
};

// Enum TresGame.ETresEx725DieKind
// NumValues: 0x0004
enum class ETresEx725DieKind : uint8
{
	NORMAL                                   = 0,
	HOLE                                     = 1,
	NONE                                     = 2,
	ETresEx725DieKind_MAX                    = 3,
};

// Enum TresGame.ETresThornChainState
// NumValues: 0x0009
enum class ETresThornChainState : uint8
{
	APPEAR                                   = 0,
	NORMAL                                   = 1,
	AIMING                                   = 2,
	CAPTURED                                 = 3,
	AIMING_INTERVAL                          = 4,
	DRAG                                     = 5,
	SWING                                    = 6,
	DEAD                                     = 7,
	ETresThornChainState_MAX                 = 8,
};

// Enum TresGame.ETres_e_ex773_Direction
// NumValues: 0x0006
enum class ETres_e_ex773_Direction : uint32
{
	None                                     = 0,
	Front                                    = 1,
	Right                                    = 2,
	Left                                     = 3,
	Back                                     = 4,
	ETres_e_ex773_MAX                        = 5,
};

// Enum TresGame.ColorTypes_e_ex781Gigas
// NumValues: 0x0004
enum class EColorTypes_e_ex781Gigas : uint8
{
	TRES_ENEMY_EX781GIGAS_YELLOW             = 0,
	TRES_ENEMY_EX781GIGAS_BLUE               = 1,
	TRES_ENEMY_EX781GIGAS_RED                = 2,
	TRES_ENEMY_EX781GIGAS_MAX                = 3,
};

// Enum TresGame.TetraBitActionTypes_e_ex781
// NumValues: 0x0006
enum class ETetraBitActionTypes_e_ex781 : uint8
{
	TRES_ENEMY_EX781_BITACTION_WAIT          = 0,
	TRES_ENEMY_EX781_BITACTION_MOVE          = 1,
	TRES_ENEMY_EX781_BITACTION_ATTACK        = 2,
	TRES_ENEMY_EX781_BITACTION_FORMATION     = 3,
	TRES_ENEMY_EX781_BITACTION_FINISH        = 4,
	TRES_ENEMY_EX781_BITACTION_MAX           = 5,
};

// Enum TresGame.ETresEnemyEyeType_e_ex816
// NumValues: 0x0003
enum class ETresEnemyEyeType_e_ex816 : uint8
{
	TRES_ENEMY_EYE_TYPE_E_EX816_LEFT         = 0,
	TRES_ENEMY_EYE_TYPE_E_EX816_RIGHT        = 1,
	TRES_ENEMY_EYE_TYPE_E_EX816_MAX          = 2,
};

// Enum TresGame.ETresEnemyShip
// NumValues: 0x0005
enum class ETresEnemyShip : uint8
{
	FRONT                                    = 0,
	RIGHT                                    = 1,
	LEFT                                     = 2,
	BACK                                     = 3,
	ETresEnemyShip_MAX                       = 4,
};

// Enum TresGame.ETresEnemyShipSubType
// NumValues: 0x0005
enum class ETresEnemyShipSubType : uint8
{
	DEFAULT                                  = 0,
	BLACK                                    = 1,
	CRAB                                     = 2,
	PHANTOM                                  = 3,
	ETresEnemyShipSubType_MAX                = 4,
};

// Enum TresGame.ETresEnemyBigDealAction_e_ex356
// NumValues: 0x0004
enum class ETresEnemyBigDealAction_e_ex356 : uint8
{
	None                                     = 0,
	Move                                     = 1,
	SideCardAttack                           = 2,
	ETresEnemyBigDealAction_e_MAX            = 3,
};

// Enum TresGame.ETresEnemy_e_ex356_CardDesign
// NumValues: 0x0007
enum class ETresEnemy_e_ex356_CardDesign : uint8
{
	BackSide                                 = 0,
	Luxord                                   = 1,
	Not                                      = 2,
	Plain                                    = 3,
	Correct                                  = 4,
	Explode                                  = 5,
	ETresEnemy_e_ex356_MAX                   = 6,
};

// Enum TresGame.ETresEnemyFieldAttack_e_ex357
// NumValues: 0x0004
enum class ETresEnemyFieldAttack_e_ex357 : uint8
{
	Penetrate                                = 0,
	Time                                     = 1,
	Max                                      = 2,
	ETresEnemyFieldAttack_e_MAX              = 3,
};

// Enum TresGame.ETresEnemyFieldGenerateLocation_e_ex357
// NumValues: 0x0004
enum class ETresEnemyFieldGenerateLocation_e_ex357 : uint8
{
	Target                                   = 0,
	Map                                      = 1,
	Max                                      = 2,
	ETresEnemyFieldGenerateLocation_e_MAX    = 3,
};

// Enum TresGame.ETresEnemyFieldSize_e_ex357
// NumValues: 0x0004
enum class ETresEnemyFieldSize_e_ex357 : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	ETresEnemyFieldSize_e_MAX                = 3,
};

// Enum TresGame.ETresEnemyBitGenerateLocation_e_ex357
// NumValues: 0x0003
enum class ETresEnemyBitGenerateLocation_e_ex357 : uint8
{
	Target                                   = 0,
	Marluxia                                 = 1,
	ETresEnemyBitGenerateLocation_e_MAX      = 2,
};

// Enum TresGame.ETresEnemyAction_e_ex357
// NumValues: 0x0004
enum class ETresEnemyAction_e_ex357 : uint8
{
	Normal                                   = 0,
	Warp                                     = 1,
	None                                     = 2,
	ETresEnemyAction_e_MAX                   = 3,
};

// Enum TresGame.ETresEnemyAvatarAttackAppearLocation_e_ex358
// NumValues: 0x0004
enum class ETresEnemyAvatarAttackAppearLocation_e_ex358 : uint8
{
	Target                                   = 0,
	Center                                   = 1,
	Custom                                   = 2,
	ETresEnemyAvatarAttackAppearLocation_e_MAX = 3,
};

// Enum TresGame.ETresEnemyChangeManualLockonPriority_e_ex358
// NumValues: 0x0005
enum class ETresEnemyChangeManualLockonPriority_e_ex358 : uint8
{
	Low                                      = 0,
	Normal                                   = 1,
	High                                     = 2,
	Max                                      = 3,
	ETresEnemyChangeManualLockonPriority_e_MAX = 4,
};

// Enum TresGame.ETresEnemyWildDanceAppearLocation_e_ex358
// NumValues: 0x0003
enum class ETresEnemyWildDanceAppearLocation_e_ex358 : uint8
{
	Target                                   = 0,
	Center                                   = 1,
	ETresEnemyWildDanceAppearLocation_e_MAX  = 2,
};

// Enum TresGame.ETresEnemyWildDanceActionEnd_e_ex358
// NumValues: 0x0004
enum class ETresEnemyWildDanceActionEnd_e_ex358 : uint8
{
	Normal                                   = 0,
	Warp                                     = 1,
	ThunderStep                              = 2,
	ETresEnemyWildDanceActionEnd_e_MAX       = 3,
};

// Enum TresGame.ETresEnemyNaruikazuchi_e_ex358
// NumValues: 0x0003
enum class ETresEnemyNaruikazuchi_e_ex358 : uint8
{
	Fast                                     = 0,
	Slow                                     = 1,
	ETresEnemyNaruikazuchi_e_MAX             = 2,
};

// Enum TresGame.ETresEnemyJinraiPhaseType_e_ex358
// NumValues: 0x0005
enum class ETresEnemyJinraiPhaseType_e_ex358 : uint8
{
	TRES_ENEMY_JINRAI_PHASE_TYPE_E_EX358_FIRST = 0,
	TRES_ENEMY_JINRAI_PHASE_TYPE_E_EX358_SECOND = 1,
	TRES_ENEMY_JINRAI_PHASE_TYPE_E_EX358_THIRD = 2,
	TRES_ENEMY_JINRAI_PHASE_TYPE_E_EX358_NONE = 255,
	TRES_ENEMY_JINRAI_PHASE_TYPE_E_EX358_MAX = 256,
};

// Enum TresGame.ETresEnemyRunDirectionType_e_ex358
// NumValues: 0x0005
enum class ETresEnemyRunDirectionType_e_ex358 : uint8
{
	TRES_ENEMY_RUN_DIRECTION_TYPE_E_EX358_CAUTION_RIGHT = 0,
	TRES_ENEMY_RUN_DIRECTION_TYPE_E_EX358_CAUTION_LEFT = 1,
	TRES_ENEMY_RUN_DIRECTION_TYPE_E_EX358_CAUTION_VIEW_CENTER = 2,
	TRES_ENEMY_RUN_DIRECTION_TYPE_E_EX358_TARGET = 3,
	TRES_ENEMY_RUN_DIRECTION_TYPE_E_EX358_MAX = 4,
};

// Enum TresGame.ETresEnemyStepDirectionType_e_ex358
// NumValues: 0x0006
enum class ETresEnemyStepDirectionType_e_ex358 : uint8
{
	TRES_ENEMY_STEP_DIRECTION_TYPE_E_EX358_RIGHT = 0,
	TRES_ENEMY_STEP_DIRECTION_TYPE_E_EX358_LEFT = 1,
	TRES_ENEMY_STEP_DIRECTION_TYPE_E_EX358_BACK = 2,
	TRES_ENEMY_STEP_DIRECTION_TYPE_E_EX358_FRONT = 3,
	TRES_ENEMY_STEP_DIRECTION_TYPE_E_EX358_AUTO = 4,
	TRES_ENEMY_STEP_DIRECTION_TYPE_E_EX358_MAX = 5,
};

// Enum TresGame.ETresEnemyActionType_e_ex358
// NumValues: 0x0006
enum class ETresEnemyActionType_e_ex358 : uint8
{
	TRES_ENEMY_ACTION_TYPE_E_EX358_MOVE      = 0,
	TRES_ENEMY_ACTION_TYPE_E_EX358_WARP      = 1,
	TRES_ENEMY_ACTION_TYPE_E_EX358_ACTION    = 2,
	TRES_ENEMY_ACTION_TYPE_E_EX358_ATTACK    = 3,
	TRES_ENEMY_ACTION_TYPE_E_EX358_NONE      = 4,
	TRES_ENEMY_ACTION_TYPE_E_EX358_MAX       = 5,
};

// Enum TresGame.ETresEnemy_e_ex761_BattleAreaB_Camera
// NumValues: 0x0004
enum class ETresEnemy_e_ex761_BattleAreaB_Camera : uint8
{
	Normal                                   = 0,
	NotZoom                                  = 1,
	Max                                      = 2,
	ETresEnemy_e_ex761_BattleAreaB_MAX       = 3,
};

// Enum TresGame.ETresEnemy_e_ex761_BattleAreaAttack
// NumValues: 0x0009
enum class ETresEnemy_e_ex761_BattleAreaAttack : uint8
{
	TripleAttack                             = 0,
	WarpRushVanish                           = 1,
	WarpRushFinish                           = 2,
	RaiseCut                                 = 3,
	RotationCut                              = 4,
	Shot                                     = 5,
	ClusterShot                              = 6,
	Max                                      = 7,
	ETresEnemy_e_ex761_MAX                   = 8,
};

// Enum TresGame.ETresEnemy_e_ex761_BattleAreaAppearTiming
// NumValues: 0x0004
enum class ETresEnemy_e_ex761_BattleAreaAppearTiming : uint8
{
	BeginOverlap                             = 0,
	EndOverlap                               = 1,
	Max                                      = 2,
	ETresEnemy_e_ex761_MAX                   = 3,
};

// Enum TresGame.ETresEnemy_e_ex761_BattleAreaAppear
// NumValues: 0x0006
enum class ETresEnemy_e_ex761_BattleAreaAppear : uint8
{
	A                                        = 0,
	B                                        = 1,
	C                                        = 2,
	D                                        = 3,
	Max                                      = 4,
	ETresEnemy_e_ex761_MAX                   = 5,
};

// Enum TresGame.ETresEnemy_e_ex761_Weapon
// NumValues: 0x000E
enum class ETresEnemy_e_ex761_Weapon : uint8
{
	Weapon1                                  = 0,
	Weapon2                                  = 1,
	Weapon3                                  = 2,
	Weapon4                                  = 3,
	Weapon5                                  = 4,
	Weapon6                                  = 5,
	Weapon7                                  = 6,
	Weapon8                                  = 7,
	Weapon9                                  = 8,
	Weapon10                                 = 9,
	Weapon11                                 = 10,
	Weapon12                                 = 11,
	Max                                      = 12,
	ETresEnemy_e_ex761_MAX                   = 13,
};

// Enum TresGame.ETresEnemyXIIIEPlayVoiceKind
// NumValues: 0x0005
enum class ETresEnemyXIIIEPlayVoiceKind : uint8
{
	VoiceAttach                              = 0,
	Voice2D                                  = 1,
	VoiceAtLocation                          = 2,
	Max                                      = 3,
	ETresEnemyXIIIEPlayVoiceKind_MAX         = 4,
};

// Enum TresGame.ETresEnemyXIIILELineTraceKind
// NumValues: 0x0006
enum class ETresEnemyXIIILELineTraceKind : uint8
{
	None                                     = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	Both                                     = 3,
	Max                                      = 4,
	ETresEnemyXIIILELineTraceKind_MAX        = 5,
};

// Enum TresGame.ETresEnemyXIIILEPlayVoiceKind
// NumValues: 0x0005
enum class ETresEnemyXIIILEPlayVoiceKind : uint8
{
	VoiceAttach                              = 0,
	Voice2D                                  = 1,
	VoiceAtLocation                          = 2,
	Max                                      = 3,
	ETresEnemyXIIILEPlayVoiceKind_MAX        = 4,
};

// Enum TresGame.ETresEnemyXIIIPhaseType
// NumValues: 0x0007
enum class ETresEnemyXIIIPhaseType : uint8
{
	PHASE1                                   = 0,
	PHASE2                                   = 1,
	PHASE3                                   = 2,
	PHASE4                                   = 3,
	PHASE_EX1                                = 4,
	_MAX                                     = 5,
	ETresEnemyXIIIPhaseType_MAX              = 6,
};

// Enum TresGame.ETresEnemyXIIISettingPhase
// NumValues: 0x0007
enum class ETresEnemyXIIISettingPhase : uint8
{
	PHASE1                                   = 0,
	PHASE2                                   = 1,
	PHASE3                                   = 2,
	PHASE4                                   = 3,
	PHASE_EX1                                = 4,
	_MAX                                     = 5,
	ETresEnemyXIIISettingPhase_MAX           = 6,
};

// Enum TresGame.EEnvGeneratorOnRingRadiusMode
// NumValues: 0x0004
enum class EEnvGeneratorOnRingRadiusMode : uint8
{
	ContextCenter                            = 0,
	ContextRadius                            = 1,
	QuerierAndContextRadius                  = 2,
	EEnvGeneratorOnRingRadiusMode_MAX        = 3,
};

// Enum TresGame.ETresItemPathDirectionMode
// NumValues: 0x000A
enum class ETresItemPathDirectionMode : uint8
{
	ItemRotation                             = 0,
	ContextToItem                            = 1,
	ItemToContext                            = 2,
	ItemToPathStart                          = 3,
	PathStartToItem                          = 4,
	ItemToPathRelativeDirection              = 5,
	PathToItemRelativeDirection              = 6,
	PathRotationAtStart                      = 7,
	PathRotationAtClosestPointOnPath         = 8,
	ETresItemPathDirectionMode_MAX           = 9,
};

// Enum TresGame.ETresContextPathDirectionMode
// NumValues: 0x000A
enum class ETresContextPathDirectionMode : uint8
{
	ContextRotation                          = 0,
	ContextToItem                            = 1,
	ItemToContext                            = 2,
	ContextToPathStart                       = 3,
	PathStartToContext                       = 4,
	ContextToPathRelativeDirection           = 5,
	PathToContextRelativeDirection           = 6,
	PathRotationAtStart                      = 7,
	PathRotationAtClosestPointOnPath         = 8,
	ETresContextPathDirectionMode_MAX        = 9,
};

// Enum TresGame.ETresEnvQueryTestItemPropertySource
// NumValues: 0x0004
enum class ETresEnvQueryTestItemPropertySource : uint8
{
	BlackboardKey                            = 0,
	Property                                 = 1,
	Function                                 = 2,
	ETresEnvQueryTestItemPropertySource_MAX  = 3,
};

// Enum TresGame.ETresEnvQueryTest_MercunaWallDistanceDir
// NumValues: 0x0004
enum class ETresEnvQueryTest_MercunaWallDistanceDir : uint8
{
	Side                                     = 0,
	Bottom                                   = 1,
	Ceiling                                  = 2,
	ETresEnvQueryTest_MAX                    = 3,
};

// Enum TresGame.ETresAttributeHitEnd_e_ex357
// NumValues: 0x0004
enum class ETresAttributeHitEnd_e_ex357 : uint8
{
	AllLoopEnd                               = 0,
	ProjectileEndAfterLoopEnd                = 1,
	AllDestroy                               = 2,
	ETresAttributeHitEnd_e_MAX               = 3,
};

// Enum TresGame.ETresFieldVoiceLip
// NumValues: 0x0005
enum class ETresFieldVoiceLip : uint8
{
	Default                                  = 0,
	Joy                                      = 1,
	Angly                                    = 2,
	Sorrow                                   = 3,
	ETresFieldVoiceLip_MAX                   = 4,
};

// Enum TresGame.ETresFieldVoiceExecuteMode
// NumValues: 0x0005
enum class ETresFieldVoiceExecuteMode : uint8
{
	Tick                                     = 0,
	Begin                                    = 1,
	End                                      = 2,
	Auto                                     = 3,
	ETresFieldVoiceExecuteMode_MAX           = 4,
};

// Enum TresGame.ETresForceFeedbackKind
// NumValues: 0x0005
enum class ETresForceFeedbackKind : uint8
{
	TFFK_SMALL                               = 0,
	TFFK_MIDDLE                              = 1,
	LARGE                                    = 2,
	TFFK_MAX                                 = 3,
	ETresForceFeedbackKind_MAX               = 4,
};

// Enum TresGame.ETresFriendAreaID
// NumValues: 0x000A
enum class ETresFriendAreaID : uint8
{
	TRES_FR_AREA_ID_UNKNOWN                  = 0,
	TRES_FR_AREA_ID_A                        = 1,
	TRES_FR_AREA_ID_B                        = 2,
	TRES_FR_AREA_ID_C                        = 3,
	TRES_FR_AREA_ID_D                        = 4,
	TRES_FR_AREA_ID_E                        = 5,
	TRES_FR_AREA_ID_DW                       = 6,
	TRES_FR_AREA_ID_KG06                     = 7,
	TRES_FR_AREA_ID_EVENT                    = 8,
	TRES_FR_AREA_ID_MAX                      = 9,
};

// Enum TresGame.EIceRaileCameraType
// NumValues: 0x0004
enum class EIceRaileCameraType : uint8
{
	IRCT_Use_Rail                            = 0,
	IRCT_Use_Jump                            = 1,
	IRCT_Use_Move                            = 2,
	IRCT_Use_MAX                             = 3,
};

// Enum TresGame.ETresStartMapType
// NumValues: 0x0004
enum class ETresStartMapType : uint8
{
	Normal                                   = 0,
	RemindDLC                                = 1,
	Max                                      = 2,
	ETresStartMapType_MAX                    = 3,
};

// Enum TresGame.ETresGameOverHintSpecialType
// NumValues: 0x0009
enum class ETresGameOverHintSpecialType : uint8
{
	None                                     = 0,
	KilledByGimmick                          = 1,
	DieInUnderwater                          = 2,
	DieInSpecialRailSlide                    = 3,
	OutsideSetting                           = 4,
	RestrictWeapon                           = 5,
	DeathSentence                            = 6,
	Max                                      = 7,
	ETresGameOverHintSpecialType_MAX         = 8,
};

// Enum TresGame.ECardExplodeEffect_e_ex356
// NumValues: 0x0003
enum class ECardExplodeEffect_e_ex356 : uint8
{
	Normal                                   = 0,
	HideAndSeek                              = 1,
	ECardExplodeEffect_e_MAX                 = 2,
};

// Enum TresGame.EHideAndSeekAnim_e_ex356
// NumValues: 0x0005
enum class EHideAndSeekAnim_e_ex356 : uint8
{
	FallDown                                 = 0,
	GetUp                                    = 1,
	FallDownInverse                          = 2,
	Max                                      = 3,
	EHideAndSeekAnim_e_MAX                   = 4,
};

// Enum TresGame.ETresGimmick_e_ex711_PhysicsActorSizeKind
// NumValues: 0x0004
enum class ETresGimmick_e_ex711_PhysicsActorSizeKind : uint8
{
	SIZE_KIND_SMALL                          = 0,
	SIZE_KIND_MEDIUM                         = 1,
	SIZE_KIND_BIG                            = 2,
	SIZE_KIND_MAX                            = 3,
};

// Enum TresGame.ETresGimmick_e_ex711_PhysicsActorGimmickKind
// NumValues: 0x0007
enum class ETresGimmick_e_ex711_PhysicsActorGimmickKind : uint8
{
	GIMMICK_KIND_NONE                        = 0,
	GIMMICK_KIND_ATHLETIC_FLOW_ROOT          = 1,
	GIMMICK_KIND_ATHLETIC_FLOW_LAST          = 2,
	GIMMICK_KIND_ATHLETIC_FLOW               = 3,
	GIMMICK_KIND_HOP                         = 4,
	GIMMICK_KIND_SCAFFOLD                    = 5,
	GIMMICK_KIND_MAX                         = 6,
};

// Enum TresGame.ETresGimmickEx781GravitySphereGravityType
// NumValues: 0x0005
enum class ETresGimmickEx781GravitySphereGravityType : uint8
{
	NONE                                     = 0,
	UP                                       = 1,
	PULL                                     = 2,
	PUSH                                     = 3,
	ETresGimmickEx781GravitySphereGravityType_MAX = 4,
};

// Enum TresGame.ETresBxPuddingType
// NumValues: 0x0005
enum class ETresBxPuddingType : uint8
{
	NONE                                     = 0,
	NORMAL                                   = 1,
	CANNIBAL                                 = 2,
	AREA_JUMP                                = 3,
	ETresBxPuddingType_MAX                   = 4,
};

// Enum TresGame.ETresGimmickEwDirectionType
// NumValues: 0x0004
enum class ETresGimmickEwDirectionType : uint8
{
	Spline                                   = 0,
	Custom                                   = 1,
	Max                                      = 2,
	ETresGimmickEwDirectionType_MAX          = 3,
};

// Enum TresGame.EFollowActorSplineMoveRotateStyle
// NumValues: 0x0004
enum class EFollowActorSplineMoveRotateStyle : uint8
{
	SNAP_ALL                                 = 0,
	SNAP_YAW_ONLY                            = 1,
	SLERP_START_TO_END                       = 2,
	EFollowActorSplineMoveRotateStyle_MAX    = 3,
};

// Enum TresGame.EFollowActorMoveStyle
// NumValues: 0x0003
enum class EFollowActorMoveStyle : uint8
{
	LINEAR                                   = 0,
	EASE_INOUT_SINE                          = 1,
	EFollowActorMoveStyle_MAX                = 2,
};

// Enum TresGame.EFollowActorState
// NumValues: 0x0009
enum class EFollowActorState : uint8
{
	STATE_NONE                               = 0,
	STATE_WAIT                               = 1,
	STATE_FOLLOW                             = 2,
	STATE_TAKE_DISTANCE                      = 3,
	STATE_ESCAPE                             = 4,
	STATE_RETURN                             = 5,
	STATE_DESTINATION_MOVE                   = 6,
	STATE_SPLINE_MOVE                        = 7,
	STATE_MAX                                = 8,
};

// Enum TresGame.ETresGimmickBxCarTyreType
// NumValues: 0x0004
enum class ETresGimmickBxCarTyreType : uint8
{
	Basic                                    = 0,
	Side                                     = 1,
	Front                                    = 2,
	ETresGimmickBxCarTyreType_MAX            = 3,
};

// Enum TresGame.EGimmickBX_CarSplineBlinker
// NumValues: 0x0004
enum class EGimmickBX_CarSplineBlinker : uint8
{
	EGimmickBX_CarSplineBlinker_None         = 0,
	EGimmickBX_CarSplineBlinker_Left         = 1,
	EGimmickBX_CarSplineBlinker_Right        = 2,
	EGimmickBX_CarSplineBlinker_MAX          = 3,
};

// Enum TresGame.ETresGimmickBxFlashTracerCourse
// NumValues: 0x0003
enum class ETresGimmickBxFlashTracerCourse : uint8
{
	Course_1                                 = 0,
	Course_2                                 = 1,
	Course_Max                               = 2,
};

// Enum TresGame.ETresGimmickBxSingoukiColorType
// NumValues: 0x0006
enum class ETresGimmickBxSingoukiColorType : uint8
{
	Red                                      = 0,
	RedWait                                  = 1,
	Blue                                     = 2,
	BlueWait                                 = 3,
	NoSignal                                 = 4,
	ETresGimmickBxSingoukiColorType_MAX      = 5,
};

// Enum TresGame.ETresGimmickDitherFade_State
// NumValues: 0x0003
enum class ETresGimmickDitherFade_State : uint8
{
	FadeIn                                   = 0,
	FadeOut                                  = 1,
	ETresGimmickDitherFade_MAX               = 2,
};

// Enum TresGame.ETresGimmickDitherFade_Invoker
// NumValues: 0x0004
enum class ETresGimmickDitherFade_Invoker : uint8
{
	Clip                                     = 0,
	Gimmick                                  = 1,
	Max                                      = 2,
	ETresGimmickDitherFade_MAX               = 3,
};

// Enum TresGame.ETresGimmickHitCountComponentTeam
// NumValues: 0x0004
enum class ETresGimmickHitCountComponentTeam : uint8
{
	Player                                   = 0,
	Enemy                                    = 1,
	Neutrality                               = 2,
	ETresGimmickHitCountComponentTeam_MAX    = 3,
};

// Enum TresGame.ETresGimmickHitCountComponentDamageProfile
// NumValues: 0x001D
enum class ETresGimmickHitCountComponentDamageProfile : uint8
{
	NotUse                                   = 0,
	Gimmick                                  = 1,
	Gimmick2                                 = 2,
	Reaction                                 = 3,
	Reaction2                                = 4,
	ReactionHE                               = 5,
	ReactionHE2                              = 6,
	ReactionHE3                              = 7,
	ReactionTS                               = 8,
	ReactionMI                               = 9,
	ReactionBT                               = 10,
	ReactionBX                               = 11,
	ReactionBX2                              = 12,
	Prize                                    = 13,
	PrizeCA                                  = 14,
	PrizeTS                                  = 15,
	PrizeTS2                                 = 16,
	PrizeTS3                                 = 17,
	PrizeHE                                  = 18,
	PrizeHE2                                 = 19,
	PrizeBT                                  = 20,
	PrizeBX                                  = 21,
	GimmickEnemy                             = 22,
	DiveGim                                  = 23,
	PrizeBT2                                 = 24,
	ReactionBT2                              = 25,
	ReactionBT3                              = 26,
	ReactionBT4                              = 27,
	ETresGimmickHitCountComponentDamageProfile_MAX = 28,
};

// Enum TresGame.ETresGimmickHitCountComponentType
// NumValues: 0x0004
enum class ETresGimmickHitCountComponentType : uint8
{
	HitCount                                 = 0,
	Accumulation                             = 1,
	HitCheckOnly                             = 2,
	ETresGimmickHitCountComponentType_MAX    = 3,
};

// Enum TresGame.EGimmickKG_UnionCrossEnemy_MoveMode
// NumValues: 0x0005
enum class EGimmickKG_UnionCrossEnemy_MoveMode : uint8
{
	Progress                                 = 0,
	Direction                                = 1,
	Straight                                 = 2,
	BlowUp                                   = 3,
	EGimmickKG_UnionCrossEnemy_MAX           = 4,
};

// Enum TresGame.EGimmickKG_UnionCrossAnim
// NumValues: 0x0007
enum class EGimmickKG_UnionCrossAnim : uint8
{
	EGimmickKG_UnionCrossAnim_Invalid        = 0,
	EGimmickKG_UnionCrossAnim_Idle           = 1,
	EGimmickKG_UnionCrossAnim_Attack         = 2,
	EGimmickKG_UnionCrossAnim_Finish         = 3,
	EGimmickKG_UnionCrossAnim_DamageStart    = 4,
	EGimmickKG_UnionCrossAnim_DamageEnd      = 5,
	EGimmickKG_UnionCrossAnim_MAX            = 6,
};

// Enum TresGame.ETresGimmickMI_02_LaserArmAttackState
// NumValues: 0x0004
enum class ETresGimmickMI_02_LaserArmAttackState : uint8
{
	Idle                                     = 0,
	Charging                                 = 1,
	Fire                                     = 2,
	ETresGimmickMI_02_MAX                    = 3,
};

// Enum TresGame.ETresGimmickMI_02_LaserArmState
// NumValues: 0x0005
enum class ETresGimmickMI_02_LaserArmState : uint8
{
	Idle                                     = 0,
	StartUp                                  = 1,
	Attack                                   = 2,
	Destroy                                  = 3,
	ETresGimmickMI_02_MAX                    = 4,
};

// Enum TresGame.ETresGimmickMI_02_LaserArmActionType
// NumValues: 0x0006
enum class ETresGimmickMI_02_LaserArmActionType : uint8
{
	BarricadeY                               = 0,
	BarricadeX                               = 1,
	Work                                     = 2,
	Spline                                   = 3,
	Player                                   = 4,
	ETresGimmickMI_02_MAX                    = 5,
};

// Enum TresGame.ETresMI_04_DoorGeneratorMoveType
// NumValues: 0x0004
enum class ETresMI_04_DoorGeneratorMoveType : uint8
{
	Lv0                                      = 0,
	Lv1                                      = 1,
	Lv2                                      = 2,
	ETresMI_04_MAX                           = 3,
};

// Enum TresGame.EDanceDebugInfoType
// NumValues: 0x0006
enum class EDanceDebugInfoType : uint8
{
	DEBUG_INFO_MOVE                          = 0,
	DEBUG_INFO_SPLINE                        = 1,
	DEBUG_INFO_TARGET                        = 2,
	DEBUG_INFO_CLAPSPOT                      = 3,
	DEBUG_INFO_BGM                           = 4,
	DEBUG_INFO_MAX                           = 5,
};

// Enum TresGame.EDanceResultType
// NumValues: 0x0004
enum class EDanceResultType : uint8
{
	NORMAL                                   = 0,
	GREAT                                    = 1,
	BAD                                      = 2,
	EDanceResultType_MAX                     = 3,
};

// Enum TresGame.ERaPuddingStateType
// NumValues: 0x0006
enum class ERaPuddingStateType : uint8
{
	DEFAULT                                  = 0,
	DAMAGE                                   = 1,
	ANGRY                                    = 2,
	SHUTTER                                  = 3,
	HAPPY                                    = 4,
	ERaPuddingStateType_MAX                  = 5,
};

// Enum TresGame.ERaPuddingCommandType
// NumValues: 0x0025
enum class ERaPuddingCommandType : uint8
{
	IDLE                                     = 0,
	MOVEMENT                                 = 1,
	ANIMATION                                = 2,
	ANGRY_VANISH                             = 3,
	HAPPY_VANISH                             = 4,
	FAIR_VANISH                              = 5,
	PANCAKE_DIVE                             = 6,
	PANCAKE_HIDE                             = 7,
	PANCAKE_EFFECT                           = 8,
	PANCAKE_APPEAR                           = 9,
	PANCAKE_VANISH                           = 10,
	TTR_ESCAPE                               = 11,
	TTR_START                                = 12,
	TTR_KEEP                                 = 13,
	TTR_END                                  = 14,
	PUDFORCE_IDLE                            = 15,
	PUDFORCE_MOVE                            = 16,
	PUDFORCE_POSE_1                          = 17,
	PUDFORCE_POSE_2                          = 18,
	PUDFORCE_POSE_3                          = 19,
	UMA_MOVE                                 = 20,
	UMA_RISE                                 = 21,
	UMA_KEEP                                 = 22,
	UMA_FALL                                 = 23,
	ICARUS_RISE                              = 24,
	ICARUS_KEEP                              = 25,
	ICARUS_FALL                              = 26,
	ICARUS_FALL_WAIT                         = 27,
	SET_MARKER_VALID                         = 28,
	SET_HIGH_MARKER_VALID                    = 29,
	SET_HIGH_MARKER_ON                       = 30,
	SET_HIGH_MARKER_OFF                      = 31,
	SET_NORMAL_MARKER_VALID                  = 32,
	SET_NORMAL_MARKER_ON                     = 33,
	SET_NORMAL_MARKER_OFF                    = 34,
	MAX                                      = 35,
	ERaPuddingCommandType_MAX                = 36,
};

// Enum TresGame.ETresGimmickSimpleMovementDirAxis
// NumValues: 0x0004
enum class ETresGimmickSimpleMovementDirAxis : uint8
{
	Forward                                  = 0,
	Right                                    = 1,
	Up                                       = 2,
	ETresGimmickSimpleMovementDirAxis_MAX    = 3,
};

// Enum TresGame.ETresGimmickSimpleMovementAcclType
// NumValues: 0x0004
enum class ETresGimmickSimpleMovementAcclType : uint8
{
	Linear                                   = 0,
	Accelerator                              = 1,
	Curve                                    = 2,
	ETresGimmickSimpleMovementAcclType_MAX   = 3,
};

// Enum TresGame.ETresGimmickSimpleMovementMoveType
// NumValues: 0x0006
enum class ETresGimmickSimpleMovementMoveType : uint8
{
	Straight                                 = 0,
	Homing                                   = 1,
	TargetDir                                = 2,
	TargetPoint                              = 3,
	Parabola                                 = 4,
	ETresGimmickSimpleMovementMoveType_MAX   = 5,
};

// Enum TresGame.ETresGimmickSimpleMovementStateType
// NumValues: 0x0003
enum class ETresGimmickSimpleMovementStateType : uint8
{
	Idle                                     = 0,
	Fire                                     = 1,
	ETresGimmickSimpleMovementStateType_MAX  = 2,
};

// Enum TresGame.ETresGumiShipAtkHitTestType
// NumValues: 0x0005
enum class ETresGumiShipAtkHitTestType : uint8
{
	HT_NONE                                  = 0,
	HT_ENEMY_ONLY                            = 1,
	HT_PLAYER_ONLY                           = 2,
	HT_ALL                                   = 3,
	HT_MAX                                   = 4,
};

// Enum TresGame.ETresGumiShipObjectSize
// NumValues: 0x0005
enum class ETresGumiShipObjectSize : uint8
{
	SMALL_SIZE                               = 0,
	MIDDLE_SIZE                              = 1,
	BIG_SIZE                                 = 2,
	SIZE_TYPE_MAX                            = 3,
	ETresGumiShipObjectSize_MAX              = 4,
};

// Enum TresGame.ETresGumiShipGameBGM_ID
// NumValues: 0x0007
enum class ETresGumiShipGameBGM_ID : uint8
{
	FIELD_BGM                                = 0,
	NORMAL_BATTLE_BGM                        = 1,
	BOSS_BATTLE_BGM                          = 2,
	BATTLE_RESULT_BGM                        = 3,
	E_GM623_BATTLE_BGM                       = 4,
	E_GM628_BATTLE_BGM                       = 5,
	ETresGumiShipGameBGM_MAX                 = 6,
};

// Enum TresGame.ETresGumiShipDirectNotifyType
// NumValues: 0x0003
enum class ETresGumiShipDirectNotifyType : uint8
{
	DNT_FINISHED_BATTLE_MISSION              = 0,
	DNT_ENCOUNT_BATTLE_START_CAMERA_SIGNAL   = 1,
	DNT_MAX                                  = 2,
};

// Enum TresGame.ETresGumiShipCinematicModeEventFlag
// NumValues: 0x0003
enum class ETresGumiShipCinematicModeEventFlag : uint8
{
	NOTIFY_RUN_MATINEE                       = 1,
	BOSS_ENEMY_APPEAR_EVENT                  = 2,
	ETresGumiShipCinematicModeEventFlag_MAX  = 3,
};

// Enum TresGame.ETresGumiShipClusterGeneratorShape
// NumValues: 0x0005
enum class ETresGumiShipClusterGeneratorShape : uint8
{
	BOX                                      = 0,
	SPHERE                                   = 1,
	CAPSULE                                  = 2,
	MAX                                      = 3,
	ETresGumiShipClusterGeneratorShape_MAX   = 4,
};

// Enum TresGame.ETresGumiShipCureValueType
// NumValues: 0x0003
enum class ETresGumiShipCureValueType : uint8
{
	CVT_VALUE                                = 0,
	CVT_PERCENT                              = 1,
	CVT_MAX                                  = 2,
};

// Enum TresGame.ETresGumiShipAttackSubElemntType
// NumValues: 0x0003
enum class ETresGumiShipAttackSubElemntType : uint8
{
	ASET_NONE                                = 0,
	ASET_SPECIAL                             = 1,
	ASET_MAX                                 = 2,
};

// Enum TresGame.ETresGumiShipAttackElementType
// NumValues: 0x0005
enum class ETresGumiShipAttackElementType : uint8
{
	AET_NONE                                 = 0,
	AET_SHOT                                 = 1,
	AET_LASER                                = 2,
	AET_STRIKE                               = 3,
	AET_MAX                                  = 4,
};

// Enum TresGame.ETresGumiShipLimitType
// NumValues: 0x000A
enum class ETresGumiShipLimitType : uint8
{
	LIMIT_ENDOFWORLD                         = 0,
	LIMIT_NOENTRY                            = 1,
	LIMIT_HP                                 = 2,
	LIMIT_ATTACK                             = 3,
	LIMIT_POWER                              = 4,
	LIMIT_SPEED                              = 5,
	LIMIT_ROLL                               = 6,
	LIMIT_TURN                               = 7,
	LIMIT_NONE                               = 8,
	LIMIT_MAX                                = 9,
};

// Enum TresGame.GUMISHIP_ENEMY622_STATUS
// NumValues: 0x0004
enum class EGUMISHIP_ENEMY622_STATUS : uint8
{
	E_GM622_SHIELD_MODE                      = 0,
	E_GM622_INVINCIBLE_MODE                  = 1,
	E_GM622_CORE_MODE                        = 2,
	E_GM622_MAX                              = 3,
};

// Enum TresGame.GUMISHIP_ENEMY625_STATUS
// NumValues: 0x0003
enum class EGUMISHIP_ENEMY625_STATUS : uint8
{
	E_GM625_LATENT                           = 0,
	E_GM625_EMERGENCE                        = 1,
	E_GM625_MAX                              = 2,
};

// Enum TresGame.GUMISHIP_ENEMY625_METEORO_TARGET
// NumValues: 0x0004
enum class EGUMISHIP_ENEMY625_METEORO_TARGET : uint8
{
	E_GM625_TARGET_METEORO1                  = 0,
	E_GM625_TARGET_METEORO2                  = 1,
	E_GM625_TARGET_METEORO3                  = 2,
	E_GM625_TARGET_MAX                       = 3,
};

// Enum TresGame.GUMISHIP_ENEMY625_METEORO_BONE
// NumValues: 0x0009
enum class EGUMISHIP_ENEMY625_METEORO_BONE : uint8
{
	BACK_GM625_BONE                          = 0,
	BOTTOM_GM625_BONE                        = 1,
	CENTER_GM625_BONE                        = 2,
	FRONT_GM625_BONE                         = 3,
	LEFT_GM625_BONE                          = 4,
	RIGHT_GM625_BONE                         = 5,
	TOP_GM625_BONE                           = 6,
	NEAR_GM625_BONE                          = 7,
	GUMISHIP_ENEMY625_METEORO_MAX            = 8,
};

// Enum TresGame.GUMISHIP_ENEMY625_MOTIONS
// NumValues: 0x0011
enum class EGUMISHIP_ENEMY625_MOTIONS : uint8
{
	E_GM625_MOTION_COME                      = 0,
	E_GM625_MOTION_LATENT                    = 1,
	E_GM625_MOTION_COME_IDOL                 = 2,
	E_GM625_MOTION_IDOL1                     = 3,
	E_GM625_MOTION_IDOL2                     = 4,
	E_GM625_MOTION_IDOL3                     = 5,
	E_GM625_MOTION_MOVER                     = 6,
	E_GM625_MOTION_BODY_BLOW_1               = 7,
	E_GM625_MOTION_BODY_BLOW_2               = 8,
	E_GM625_MOTION_BODY_BLOW_3               = 9,
	E_GM625_MOTION_LASER_1                   = 10,
	E_GM625_MOTION_LASER_2                   = 11,
	E_GM625_MOTION_LASER_3                   = 12,
	E_GM625_MOTION_STAND_BEAM1               = 13,
	E_GM625_MOTION_STAND_BEAM2               = 14,
	E_GM625_MOTION_STAND_BEAM3               = 15,
	E_GM625_MOTION_MAX                       = 16,
};

// Enum TresGame.GUMI_SHIP_ENEMY_GM626_CANNON
// NumValues: 0x0003
enum class EGUMI_SHIP_ENEMY_GM626_CANNON : uint8
{
	_UPPER_CANNON_                           = 0,
	_UNDER_CANNON_                           = 1,
	_MAX                                     = 2,
};

// Enum TresGame.GUMI_SHIP_ENEMY_GM626_EYEMUZZLE
// NumValues: 0x0003
enum class EGUMI_SHIP_ENEMY_GM626_EYEMUZZLE : uint8
{
	_NOMAL_LASER_                            = 0,
	_ZOMBIE_LASER_                           = 1,
	_MAX                                     = 2,
};

// Enum TresGame.GUMI_SHIP_ENEMY_GM626_STATUS
// NumValues: 0x0006
enum class EGUMI_SHIP_ENEMY_GM626_STATUS : uint8
{
	_UPPER_MODE_                             = 0,
	_LOWER_MODE_                             = 1,
	_UPPER_MODE2_                            = 2,
	_CENTER_MODE_                            = 3,
	_INVINCIBLE_                             = 4,
	_MAX                                     = 5,
};

// Enum TresGame.GUMI_SHIP_ENEMY_GM626_SHIELD
// NumValues: 0x0005
enum class EGUMI_SHIP_ENEMY_GM626_SHIELD : uint8
{
	_SHIELD_NON_                             = 0,
	_SHIELD_UPPER_                           = 1,
	_SHIELD_LOWER_                           = 2,
	_SHIELD_ZOMBIE_                          = 3,
	_SHIELD_MAX                              = 4,
};

// Enum TresGame.ETresGumiShipEnemySpawnConditionType
// NumValues: 0x0007
enum class ETresGumiShipEnemySpawnConditionType : uint8
{
	TRIGGER_COLLISION_OVERLAP                = 0,
	OTHER_ENEMY_GROUPS_WIPE_OUT              = 1,
	OTHER_ENEMY_GROUPS_DISAPPEAR             = 2,
	OTHER_ENEMY_GROUPS_NON_EXISTS            = 3,
	EXTERNAL_NOTIFICATION                    = 4,
	SPAWN_CONDITION_TYPE_MAX                 = 5,
	ETresGumiShipEnemySpawnConditionType_MAX = 6,
};

// Enum TresGame.ETresGumiShipEnemyGroupDisappearType
// NumValues: 0x0006
enum class ETresGumiShipEnemyGroupDisappearType : uint8
{
	LIFE_TIME_OUT                            = 0,
	SPLINE_PATH_END_ARRIVED                  = 1,
	OTHER_ENEMY_GROUP_APPEAR                 = 2,
	NON_DISAPPEAR_TYPE                       = 3,
	DISAPPEAR_TYPE_MAX                       = 4,
	ETresGumiShipEnemyGroupDisappearType_MAX = 5,
};

// Enum TresGame.ETresGumiShipEnemyGroupMoveType
// NumValues: 0x0006
enum class ETresGumiShipEnemyGroupMoveType : uint8
{
	FIXED_LOCATION                           = 0,
	STATIC_SPLINE_PATH_MOVE                  = 1,
	ATTACHED_SPLINE_PATH_MOVE                = 2,
	UNIQUE_MOVE                              = 3,
	GROUP_MOVE_TYPE_MAX                      = 4,
	ETresGumiShipEnemyGroupMoveType_MAX      = 5,
};

// Enum TresGame.GUMI_SHIP_TREASURE_SE
// NumValues: 0x0006
enum class EGUMI_SHIP_TREASURE_SE : uint8
{
	TREASURE_SE_CORE_LOOP_START              = 0,
	TREASURE_SE_CORE_LOOP_ERROR              = 1,
	TREASURE_SE_CORE_LOOP_END                = 2,
	TREASURE_SE_LOOP_GEAR                    = 3,
	TREASURE_SE_GEAR_SUCCESS                 = 4,
	TREASURE_SE_MAX                          = 5,
};

// Enum TresGame.GUMI_SHIP_TREASURE_STATE
// NumValues: 0x0007
enum class EGUMI_SHIP_TREASURE_STATE : uint8
{
	TREASURE_STATE_IDLEING                   = 0,
	TREASURE_STATE_ST_EVENT                  = 1,
	TREASURE_STATE_ST_RAILSLID               = 2,
	TREASURE_STATE_ST_SUCCESS                = 3,
	TREASURE_STATE_ST_FAILURE                = 4,
	TREASURE_STATE_CLOSE                     = 5,
	TREASURE_STATE_MAX                       = 6,
};

// Enum TresGame.GUMI_SHIP_GIMMICK_PLAYER_MODE
// NumValues: 0x0003
enum class EGUMI_SHIP_GIMMICK_PLAYER_MODE : uint8
{
	_PLAYER_MODE_EVENT_                      = 0,
	_PLAYER_MODE_NOMAL_                      = 1,
	_PLAYER_MODE_MAX                         = 2,
};

// Enum TresGame.GUMI_SHIP_GIMMICK_TREASURE_STATE
// NumValues: 0x0004
enum class EGUMI_SHIP_GIMMICK_TREASURE_STATE : uint8
{
	_TREASURE_SUCCESS_                       = 0,
	_TREASURE_FAILURE_                       = 1,
	_TREASURE_NOW_                           = 2,
	_TREASURE_MAX                            = 3,
};

// Enum TresGame.GUMI_SHIP_GIMMICK_GM200_CORE
// NumValues: 0x0003
enum class EGUMI_SHIP_GIMMICK_GM200_CORE : uint8
{
	_CORE_A_                                 = 0,
	_CORE_B_                                 = 1,
	_CORE_MAX                                = 2,
};

// Enum TresGame.ETresGumiShipHudMode
// NumValues: 0x0003
enum class ETresGumiShipHudMode : uint8
{
	HUD_MODE_QUEST                           = 0,
	HUD_MODE_BATTLE                          = 1,
	HUD_MODE_MAX                             = 2,
};

// Enum TresGame.GUMI_SHIP_DROPITEM_RARITY
// NumValues: 0x0004
enum class EGUMI_SHIP_DROPITEM_RARITY : uint8
{
	RARITY_LOW                               = 0,
	RARITY_CENTER                            = 1,
	RARITY_HIGH                              = 2,
	RARITY_MAX                               = 3,
};

// Enum TresGame.ETresGummiSpaceDef
// NumValues: 0x0007
enum class ETresGummiSpaceDef : uint8
{
	SPACE_NON                                = 0,
	SPACE1                                   = 1,
	SPACE2                                   = 2,
	SPACE3                                   = 3,
	SPACE4                                   = 4,
	SPACE_MAX                                = 5,
	ETresGummiSpaceDef_MAX                   = 6,
};

// Enum TresGame.ETresGumiShipBattleMissionItemRankType
// NumValues: 0x0004
enum class ETresGumiShipBattleMissionItemRankType : uint8
{
	BMIRT_A                                  = 0,
	BMIRT_B                                  = 1,
	BMIRT_C                                  = 2,
	BMIRT_MAX                                = 3,
};

// Enum TresGame.ETresGumiShipBattleMissionDefeatedBonusRankType
// NumValues: 0x0004
enum class ETresGumiShipBattleMissionDefeatedBonusRankType : uint8
{
	BMDBRT_A                                 = 0,
	BMDBRT_B                                 = 1,
	BMDBRT_C                                 = 2,
	BMDBRT_MAX                               = 3,
};

// Enum TresGame.ETresGumiShipBattleMissionTimeBonusRankType
// NumValues: 0x0009
enum class ETresGumiShipBattleMissionTimeBonusRankType : uint8
{
	BMTBRT_A                                 = 0,
	BMTBRT_B                                 = 1,
	BMTBRT_C                                 = 2,
	BMTBRT_D                                 = 3,
	BMTBRT_E                                 = 4,
	BMTBRT_F                                 = 5,
	BMTBRT_G                                 = 6,
	BMTBRT_H                                 = 7,
	BMTBRT_MAX                               = 8,
};

// Enum TresGame.ETresGumiShipBattleMissionType
// NumValues: 0x0005
enum class ETresGumiShipBattleMissionType : uint8
{
	BMT_DEFEAT_TARGET                        = 0,
	BMT_SPRINE_END                           = 1,
	BMT_TIME_ATTACK                          = 2,
	BMT_DEFEAT_COUNT                         = 3,
	BMT_MAX                                  = 4,
};

// Enum TresGame.GUMISHIP_ENEMY703_PARTS_KIND
// NumValues: 0x0003
enum class EGUMISHIP_ENEMY703_PARTS_KIND : uint8
{
	E_GM703_PARTS_SHIELD                     = 0,
	E_GM703_PARTS_PETAL                      = 1,
	E_GM703_PARTS_MAX                        = 2,
};

// Enum TresGame.ETresGumiShipSpWeaponType
// NumValues: 0x0014
enum class ETresGumiShipSpWeaponType : uint8
{
	SPWT_REPAIR_KIT                          = 0,
	SPWT_FORCE_FIELD                         = 1,
	SPWT_HEAVY_ROCKET                        = 2,
	SPWT_TWIN_SHOT                           = 3,
	SPWT_FIRE_STORM                          = 4,
	SPWT_LASER_SQUALL                        = 5,
	SPWT_SUNLIGHT_LASER                      = 6,
	SPWT_TEMPEST_KNUCKLE                     = 7,
	SPWT_HAMMER_HURRICANE                    = 8,
	SPWT_BARRIER_WALL                        = 9,
	SPWT_HOMING_LASER                        = 10,
	SPWT_AUTO_ATTACKER                       = 11,
	SPWT_ELECTRO_SHOT                        = 12,
	SPWT_SONIC_SCREAM                        = 13,
	SPWT_PILE_BUNKER                         = 14,
	SPWT_KNIGHT_KIT                          = 15,
	SPWT_TRINITY_FIRE                        = 16,
	SPWT_DECOY_TRIO                          = 17,
	SPWT_NONE                                = 18,
	SPWT_MAX                                 = 19,
};

// Enum TresGame.ETresGumiShipPlayerLockonState
// NumValues: 0x0005
enum class ETresGumiShipPlayerLockonState : uint8
{
	LOS_NONE_TYPE                            = 0,
	LOS_AUTO_LOCKON_TYPE                     = 1,
	LOS_MANUAL_LOCKON_TYPE                   = 2,
	LOS_TYPE_MAX                             = 3,
	LOS_MAX                                  = 4,
};

// Enum TresGame.GUMI_SHIP_PRIZE_ITEM_KIND
// NumValues: 0x0012
enum class EGUMI_SHIP_PRIZE_ITEM_KIND : uint8
{
	GM_EX_PRIZE_MIN                          = 0,
	GM_EX_PRIZE_MID                          = 1,
	GM_EX_PRIZE_MAX                          = 2,
	GM_HP_PRIZE_MIN                          = 3,
	GM_HP_PRIZE_MID                          = 4,
	GM_HP_PRIZE_MAX                          = 5,
	GM_MUNNY_PRIZE_MIN                       = 6,
	GM_MUNNY_PRIZE_MID                       = 7,
	GM_MUNNY_PRIZE_MAX                       = 8,
	GM_NONE                                  = 9,
	GM_ITEM_DEFGUMI_PARTS                    = 10,
	GM_ITEM_DEFGUMI_MATERIAL                 = 11,
	GM_ITEM_DEFGUMI_PATTERN                  = 12,
	GM_ITEM_DEFGUMI_STICKER                  = 13,
	GM_ITEM_DEFGUMI_SHIPBP                   = 14,
	GM_ITEM_DEFGUMI_ETC                      = 15,
	GM_ITEM_TRES_MATERIAL                    = 16,
	GM_MAX                                   = 17,
};

// Enum TresGame.ETresGumiShipRaderEntityType
// NumValues: 0x0009
enum class ETresGumiShipRaderEntityType : uint8
{
	ICON_TYPE_MARKER                         = 0,
	ICON_TYPE_WORLD                          = 1,
	ICON_TYPE_ARENA                          = 2,
	ICON_TYPE_TRAVEL                         = 3,
	ICON_TYPE_TREASUER                       = 4,
	ICON_TYPE_CRYSTAL                        = 5,
	ICON_TYPE_PRIZEBOX                       = 6,
	ICON_TYPE_NONE                           = 7,
	ICON_TYPE_MAX                            = 8,
};

// Enum TresGame.FTresGumiShipRailSlideRailType
// NumValues: 0x0005
enum class EFTresGumiShipRailSlideRailType : uint8
{
	RSR_ROAD_TYPE                            = 0,
	RSR_BOSS_TRACKING_TYPE                   = 1,
	RSR_NORMAL_TRACKING_TYPE                 = 2,
	RSR_TREASURE_TYPE                        = 3,
	RSR_MAX                                  = 4,
};

// Enum TresGame.ETresGumiShipRailSlideSpeedAdjustmentType
// NumValues: 0x0004
enum class ETresGumiShipRailSlideSpeedAdjustmentType : uint8
{
	RSSA_NONE                                = 0,
	RSSA_ENEMY                               = 1,
	RSSA_PLAYER                              = 2,
	RSSA_MAX                                 = 3,
};

// Enum TresGame.ETresGumiShipTinyShipFormation
// NumValues: 0x0017
enum class ETresGumiShipTinyShipFormation : uint8
{
	FORWARD_SIDE                             = 0,
	FORWARD_FRONT                            = 1,
	FORWARD_UPDOWN                           = 2,
	FORWARD_BACK                             = 3,
	SIDEWAY_WIDE                             = 4,
	SIDEWAY_OUT                              = 5,
	BACKWARD_SIDE                            = 6,
	BACKWARD_BACK                            = 7,
	BACKWARD_UPDOWN                          = 8,
	BACKWARD_WIDE                            = 9,
	ROLL_Z                                   = 10,
	ROLL_Y                                   = 11,
	ROLL_X                                   = 12,
	ROLL_Z_OUT                               = 13,
	SWING_Y                                  = 14,
	SWING_Z                                  = 15,
	SWING_X                                  = 16,
	SWING_Y_BACK                             = 17,
	SP_OPTION                                = 18,
	SP_RANDOM                                = 19,
	SP_HOMING                                = 20,
	UNKNOWN                                  = 21,
	ETresGumiShipTinyShipFormation_MAX       = 22,
};

// Enum TresGame.ETresGumiShipMultiWeaponSetTargetType
// NumValues: 0x0004
enum class ETresGumiShipMultiWeaponSetTargetType : uint8
{
	MWSTT_NORMAL                             = 0,
	MWSTT_MOST_NEAR_DIST                     = 1,
	MWSTT_MOST_LOW_HP                        = 2,
	MWSTT_MAX                                = 3,
};

// Enum TresGame.ETresShipCreateKind
// NumValues: 0x0006
enum class ETresShipCreateKind : uint8
{
	TYPE_SAVE                                = 0,
	TYPE_PLAN                                = 1,
	TYPE_SPECIAL                             = 2,
	TYPE_NEW                                 = 3,
	TYPE_NON                                 = 4,
	TYPE_MAX                                 = 5,
};

// Enum TresGame.ETresGummiKind
// NumValues: 0x0005
enum class ETresGummiKind : uint8
{
	GUMMI_KIND_NULL                          = 0,
	GUMMI_KIND_BASE                          = 1,
	GUMMI_KIND_DECO                          = 2,
	GUMMI_KIND_TYPE_MAX                      = 3,
	GUMMI_KIND_MAX                           = 4,
};

// Enum TresGame.ETresStickerType
// NumValues: 0x0006
enum class ETresStickerType : uint8
{
	STICKER_TYPE_NULL                        = 0,
	STICKER_TYPE_NUMBER                      = 1,
	STICKER_TYPE_SYMBOL                      = 2,
	STICKER_TYPE_DESIGN                      = 3,
	STICKER_TYPE_CHARACTER                   = 4,
	STICKER_TYPE_MAX                         = 5,
};

// Enum TresGame.ETresGummiType
// NumValues: 0x0010
enum class ETresGummiType : uint8
{
	TYPE_NULL                                = 0,
	TYPE_EDGE                                = 1,
	TYPE_CURVE                               = 2,
	TYPE_PIPE                                = 3,
	TYPE_AERO                                = 4,
	TYPE_SHOOTING                            = 5,
	TYPE_LASER                               = 6,
	TYPE_STRIKE                              = 7,
	TYPE_ENGINE                              = 8,
	TYPE_WING                                = 9,
	TYPE_WHEEL                               = 10,
	TYPE_COCKPIT                             = 11,
	TYPE_SHIELD                              = 12,
	TYPE_OPTION                              = 13,
	TYPE_CHARACTER                           = 14,
	TYPE_MAX                                 = 15,
};

// Enum TresGame.GummiEditorState
// NumValues: 0x0008
enum class EGummiEditorState : uint8
{
	GummiEditorLoad                          = 0,
	GummiEditorPrepare                       = 1,
	GummiEditorTop                           = 2,
	GummiEditorPlanSelect                    = 3,
	GummiEditorMainEditSelect                = 4,
	GummiEditorMaterialGummiCategorySelect   = 5,
	GummiEditorMaterialGummiBlockSelect      = 6,
	GummiEditorState_MAX                     = 7,
};

// Enum TresGame.ETresGummiMissionReleaseCondition
// NumValues: 0x0018
enum class ETresGummiMissionReleaseCondition : uint8
{
	RELEASE_NON                              = 0,
	RELEASE_FIRST                            = 1,
	RELEASE_AFTER_TRAVELER                   = 2,
	RELEASE_AFTER_MASTER_TRAVELER            = 3,
	RELEASE_AFTER_WORLD_SEEKER               = 4,
	RELEASE_AFTER_MASTER_WORLD_SEEKER        = 5,
	RELEASE_CLEAR_TT                         = 6,
	RELEASE_CLEAR_TS_RA                      = 7,
	RELEASE_CLEAR_MI_FZ                      = 8,
	RELEASE_CLEAR_BX_CA                      = 9,
	RELEASE_AFTER_HEARTLESS_HUNT_BEGINNER    = 10,
	RELEASE_AFTER_HEARTLESS_HUNT_NOVIS       = 11,
	RELEASE_AFTER_HEARTLESS_HUNT_MIDDLE      = 12,
	RELEASE_AFTER_HEARTLESS_HUNT_EXPERT      = 13,
	RELEASE_AFTER_SWEAPON_COLLECT_BEGINNER   = 14,
	RELEASE_AFTER_SWEAPON_COLLECT_NOVIS      = 15,
	RELEASE_AFTER_SWEAPON_COLLECT_MIDDLE     = 16,
	RELEASE_AFTER_SWEAPON_COLLECT_EXPERT     = 17,
	RELEASE_AFTER_TREASURE_HUNT_BEGINNER     = 18,
	RELEASE_AFTER_TREASURE_HUNT_NOVIS        = 19,
	RELEASE_AFTER_TREASURE_HUNT_MIDDLE       = 20,
	RELEASE_AFTER_TREASURE_HUNT_EXPERT       = 21,
	RARITY_MAX                               = 22,
	ETresGummiMissionReleaseCondition_MAX    = 23,
};

// Enum TresGame.ETresGummiMissionRarity
// NumValues: 0x0005
enum class ETresGummiMissionRarity : uint8
{
	RARITY_NON                               = 0,
	RARITY_LOW                               = 1,
	RARITY_MIDDLE                            = 2,
	RARITY_HIGH                              = 3,
	RARITY_MAX                               = 4,
};

// Enum TresGame.ETresGumiShipJumpPointID
// NumValues: 0x0034
enum class ETresGumiShipJumpPointID : uint8
{
	E_GM01_JP_01                             = 0,
	E_GM01_JP_02                             = 1,
	E_GM01_JP_03                             = 2,
	E_GM01_JP_04                             = 3,
	E_GM01_JP_05                             = 4,
	E_GM01_JP_06                             = 5,
	E_GM01_JP_07                             = 6,
	E_GM01_JP_08                             = 7,
	E_GM01_JP_09                             = 8,
	E_GM01_JP_10                             = 9,
	E_GM02_JP_01                             = 10,
	E_GM02_JP_02                             = 11,
	E_GM02_JP_03                             = 12,
	E_GM02_JP_04                             = 13,
	E_GM02_JP_05                             = 14,
	E_GM02_JP_06                             = 15,
	E_GM02_JP_07                             = 16,
	E_GM02_JP_08                             = 17,
	E_GM02_JP_09                             = 18,
	E_GM02_JP_10                             = 19,
	E_GM03_JP_01                             = 20,
	E_GM03_JP_02                             = 21,
	E_GM03_JP_03                             = 22,
	E_GM03_JP_04                             = 23,
	E_GM03_JP_05                             = 24,
	E_GM03_JP_06                             = 25,
	E_GM03_JP_07                             = 26,
	E_GM03_JP_08                             = 27,
	E_GM03_JP_09                             = 28,
	E_GM03_JP_10                             = 29,
	E_RESERVE_JP_01                          = 30,
	E_RESERVE_JP_02                          = 31,
	E_RESERVE_JP_03                          = 32,
	E_RESERVE_JP_04                          = 33,
	E_RESERVE_JP_05                          = 34,
	E_RESERVE_JP_06                          = 35,
	E_RESERVE_JP_07                          = 36,
	E_RESERVE_JP_08                          = 37,
	E_RESERVE_JP_09                          = 38,
	E_RESERVE_JP_10                          = 39,
	E_RESERVE_JP_11                          = 40,
	E_RESERVE_JP_12                          = 41,
	E_RESERVE_JP_13                          = 42,
	E_RESERVE_JP_14                          = 43,
	E_RESERVE_JP_15                          = 44,
	E_RESERVE_JP_16                          = 45,
	E_RESERVE_JP_17                          = 46,
	E_RESERVE_JP_18                          = 47,
	E_RESERVE_JP_19                          = 48,
	E_RESERVE_JP_20                          = 49,
	JUMP_POINT_MAX                           = 50,
	ETresGumiShipJumpPointID_MAX             = 51,
};

// Enum TresGame.ETresGumiShipConstellationCode
// NumValues: 0x000B
enum class ETresGumiShipConstellationCode : uint8
{
	C01                                      = 0,
	C02                                      = 1,
	C03                                      = 2,
	C04                                      = 3,
	C05                                      = 4,
	C06                                      = 5,
	C07                                      = 6,
	C08                                      = 7,
	C09                                      = 8,
	Max                                      = 9,
	ETresGumiShipConstellationCode_MAX       = 10,
};

// Enum TresGame.ETresGumiShipGumiCrystalID
// NumValues: 0x0048
enum class ETresGumiShipGumiCrystalID : uint8
{
	E_GM01_GC_01                             = 0,
	E_GM01_GC_02                             = 1,
	E_GM01_GC_03                             = 2,
	E_GM01_GC_04                             = 3,
	E_GM01_GC_05                             = 4,
	E_GM01_GC_06                             = 5,
	E_GM01_GC_07                             = 6,
	E_GM01_GC_08                             = 7,
	E_GM01_GC_09                             = 8,
	E_GM01_GC_10                             = 9,
	E_GM01_GC_11                             = 10,
	E_GM01_GC_12                             = 11,
	E_GM01_GC_13                             = 12,
	E_GM01_GC_14                             = 13,
	E_GM01_GC_15                             = 14,
	E_GM01_GC_16                             = 15,
	E_GM01_GC_17                             = 16,
	E_GM01_GC_18                             = 17,
	E_GM01_GC_19                             = 18,
	E_GM01_GC_20                             = 19,
	E_GM02_GC_01                             = 20,
	E_GM02_GC_02                             = 21,
	E_GM02_GC_03                             = 22,
	E_GM02_GC_04                             = 23,
	E_GM02_GC_05                             = 24,
	E_GM02_GC_06                             = 25,
	E_GM02_GC_07                             = 26,
	E_GM02_GC_08                             = 27,
	E_GM02_GC_09                             = 28,
	E_GM02_GC_10                             = 29,
	E_GM02_GC_11                             = 30,
	E_GM02_GC_12                             = 31,
	E_GM02_GC_13                             = 32,
	E_GM02_GC_14                             = 33,
	E_GM02_GC_15                             = 34,
	E_GM02_GC_16                             = 35,
	E_GM02_GC_17                             = 36,
	E_GM02_GC_18                             = 37,
	E_GM02_GC_19                             = 38,
	E_GM02_GC_20                             = 39,
	E_GM03_GC_01                             = 40,
	E_GM03_GC_02                             = 41,
	E_GM03_GC_03                             = 42,
	E_GM03_GC_04                             = 43,
	E_GM03_GC_05                             = 44,
	E_GM03_GC_06                             = 45,
	E_GM03_GC_07                             = 46,
	E_GM03_GC_08                             = 47,
	E_GM03_GC_09                             = 48,
	E_GM03_GC_10                             = 49,
	E_GM03_GC_11                             = 50,
	E_GM03_GC_12                             = 51,
	E_GM03_GC_13                             = 52,
	E_GM03_GC_14                             = 53,
	E_GM03_GC_15                             = 54,
	E_GM03_GC_16                             = 55,
	E_GM03_GC_17                             = 56,
	E_GM03_GC_18                             = 57,
	E_GM03_GC_19                             = 58,
	E_GM03_GC_20                             = 59,
	E_GM04_GC_01                             = 60,
	E_GM04_GC_02                             = 61,
	E_GM04_GC_03                             = 62,
	E_GM04_GC_04                             = 63,
	E_GM04_GC_05                             = 64,
	E_GM04_GC_06                             = 65,
	E_GM04_GC_07                             = 66,
	E_GM04_GC_08                             = 67,
	E_GM04_GC_09                             = 68,
	E_GM04_GC_10                             = 69,
	GUMI_CRYSTAL_MAX                         = 70,
	ETresGumiShipGumiCrystalID_MAX           = 71,
};

// Enum TresGame.ETresGumiShipSpecialCrystalID
// NumValues: 0x003E
enum class ETresGumiShipSpecialCrystalID : uint8
{
	E_GM01_SC_01                             = 0,
	E_GM01_SC_02                             = 1,
	E_GM01_SC_03                             = 2,
	E_GM01_SC_04                             = 3,
	E_GM01_SC_05                             = 4,
	E_GM01_SC_06                             = 5,
	E_GM01_SC_07                             = 6,
	E_GM01_SC_08                             = 7,
	E_GM01_SC_09                             = 8,
	E_GM01_SC_10                             = 9,
	E_GM01_SC_11                             = 10,
	E_GM01_SC_12                             = 11,
	E_GM01_SC_13                             = 12,
	E_GM01_SC_14                             = 13,
	E_GM01_SC_15                             = 14,
	E_GM02_SC_01                             = 15,
	E_GM02_SC_02                             = 16,
	E_GM02_SC_03                             = 17,
	E_GM02_SC_04                             = 18,
	E_GM02_SC_05                             = 19,
	E_GM02_SC_06                             = 20,
	E_GM02_SC_07                             = 21,
	E_GM02_SC_08                             = 22,
	E_GM02_SC_09                             = 23,
	E_GM02_SC_10                             = 24,
	E_GM02_SC_11                             = 25,
	E_GM02_SC_12                             = 26,
	E_GM02_SC_13                             = 27,
	E_GM02_SC_14                             = 28,
	E_GM02_SC_15                             = 29,
	E_GM03_SC_01                             = 30,
	E_GM03_SC_02                             = 31,
	E_GM03_SC_03                             = 32,
	E_GM03_SC_04                             = 33,
	E_GM03_SC_05                             = 34,
	E_GM03_SC_06                             = 35,
	E_GM03_SC_07                             = 36,
	E_GM03_SC_08                             = 37,
	E_GM03_SC_09                             = 38,
	E_GM03_SC_10                             = 39,
	E_GM03_SC_11                             = 40,
	E_GM03_SC_12                             = 41,
	E_GM03_SC_13                             = 42,
	E_GM03_SC_14                             = 43,
	E_GM03_SC_15                             = 44,
	E_GM04_SC_01                             = 45,
	E_GM04_SC_02                             = 46,
	E_GM04_SC_03                             = 47,
	E_GM04_SC_04                             = 48,
	E_GM04_SC_05                             = 49,
	E_GM04_SC_06                             = 50,
	E_GM04_SC_07                             = 51,
	E_GM04_SC_08                             = 52,
	E_GM04_SC_09                             = 53,
	E_GM04_SC_10                             = 54,
	E_GM04_SC_11                             = 55,
	E_GM04_SC_12                             = 56,
	E_GM04_SC_13                             = 57,
	E_GM04_SC_14                             = 58,
	E_GM04_SC_15                             = 59,
	SPECIAL_CRYSTAL_MAX                      = 60,
	ETresGumiShipSpecialCrystalID_MAX        = 61,
};

// Enum TresGame.ETresGumiShipTreasureSphereID
// NumValues: 0x000E
enum class ETresGumiShipTreasureSphereID : uint8
{
	E_GM01_TR_01                             = 0,
	E_GM01_TR_02                             = 1,
	E_GM01_TR_03                             = 2,
	E_GM02_TR_01                             = 3,
	E_GM02_TR_02                             = 4,
	E_GM02_TR_03                             = 5,
	E_GM03_TR_01                             = 6,
	E_GM03_TR_02                             = 7,
	E_GM03_TR_03                             = 8,
	E_GM04_TR_01                             = 9,
	E_GM04_TR_02                             = 10,
	E_GM04_TR_03                             = 11,
	TREASURE_SPHERE_MAX                      = 12,
	ETresGumiShipTreasureSphereID_MAX        = 13,
};

// Enum TresGame.ETresGumiShipTravelPointID
// NumValues: 0x000E
enum class ETresGumiShipTravelPointID : uint8
{
	E_GM01_TP_01                             = 0,
	E_GM01_TP_02                             = 1,
	E_GM01_TP_03                             = 2,
	E_GM02_TP_01                             = 3,
	E_GM02_TP_02                             = 4,
	E_GM02_TP_03                             = 5,
	E_GM03_TP_01                             = 6,
	E_GM03_TP_02                             = 7,
	E_GM03_TP_03                             = 8,
	E_GM04_TP_01                             = 9,
	E_GM04_TP_02                             = 10,
	E_GM04_TP_03                             = 11,
	TRAVEL_POINT_MAX                         = 12,
	ETresGumiShipTravelPointID_MAX           = 13,
};

// Enum TresGame.ETresGumiShipWorldSymbolID
// NumValues: 0x0011
enum class ETresGumiShipWorldSymbolID : uint8
{
	E_GM01_WS_HE                             = 0,
	E_GM01_WS_TT                             = 1,
	E_GM01_WS_TS                             = 2,
	E_GM01_WS_RA                             = 3,
	E_GM02_WS_FZ                             = 4,
	E_GM02_WS_MI                             = 5,
	E_GM02_WS_BX                             = 6,
	E_GM02_WS_CA                             = 7,
	E_GM03_WS_KG                             = 8,
	E_GM03_WS_BT                             = 9,
	E_GM03_WS_01                             = 10,
	E_GM03_WS_02                             = 11,
	E_GM04_WS_CS                             = 12,
	E_GM04_WS_01                             = 13,
	E_GM04_WS_02                             = 14,
	WORLD_SYMBOL_MAX                         = 15,
	ETresGumiShipWorldSymbolID_MAX           = 16,
};

// Enum TresGame.ETresEnemyEx761_Location
// NumValues: 0x0004
enum class ETresEnemyEx761_Location : uint8
{
	Home                                     = 0,
	Center                                   = 1,
	Max                                      = 2,
	ETresEnemyEx761_MAX                      = 3,
};

// Enum TresGame.ETresUIControllerButtonType
// NumValues: 0x0006
enum class ETresUIControllerButtonType : uint8
{
	Circle                                   = 0,
	Triangle                                 = 1,
	Square                                   = 2,
	Cross                                    = 3,
	Max                                      = 4,
	ETresUIControllerButtonType_MAX          = 5,
};

// Enum TresGame.ETresInfluenceEmitterShape
// NumValues: 0x0005
enum class ETresInfluenceEmitterShape : uint8
{
	Box                                      = 0,
	Sphere                                   = 1,
	Cone                                     = 2,
	Ring                                     = 3,
	ETresInfluenceEmitterShape_MAX           = 4,
};

// Enum TresGame.ETresInfluenceMapLayer
// NumValues: 0x000A
enum class ETresInfluenceMapLayer : uint8
{
	PlayerAndFriendNpc                       = 0,
	Enemy                                    = 1,
	Wall                                     = 2,
	VectorField                              = 3,
	Extra1                                   = 4,
	Extra2                                   = 5,
	Extra3                                   = 6,
	Extra4                                   = 7,
	LayerMax                                 = 8,
	ETresInfluenceMapLayer_MAX               = 9,
};

// Enum TresGame.ESQEX_Bonamik_ControlType
// NumValues: 0x0004
enum class ESQEX_Bonamik_ControlType : uint8
{
	ESQEX_Bonamik_ControlType_DoNothing      = 0,
	ESQEX_Bonamik_ControlType_On             = 1,
	ESQEX_Bonamik_ControlType_Off            = 2,
	ESQEX_Bonamik_ControlType_MAX            = 3,
};

// Enum TresGame.ETresEffectAttachTrack_AttachType
// NumValues: 0x0008
enum class ETresEffectAttachTrack_AttachType : uint8
{
	ETresEffectAttachTrack_AttachType_Attach = 0,
	ETresEffectAttachTrack_AttachType_End    = 1,
	ETresEffectAttachTrack_AttachType_CommonSet_ENEMY_APPEAR0 = 2,
	ETresEffectAttachTrack_AttachType_CommonSet_ENEMY_APPEAR1 = 3,
	ETresEffectAttachTrack_AttachType_CommonSet_ENEMY_APPEAR2 = 4,
	ETresEffectAttachTrack_AttachType_CommonSet_ENEMY_DEATH0 = 5,
	ETresEffectAttachTrack_AttachType_CommonSet_ENEMYDISAPPEAR0 = 6,
	ETresEffectAttachTrack_AttachType_MAX    = 7,
};

// Enum TresGame.ETresEffectTriggerTrack_TriggerType
// NumValues: 0x0007
enum class ETresEffectTriggerTrack_TriggerType : uint8
{
	ETresEffectTriggerTrack_TriggerType_OnActive = 0,
	ETresEffectTriggerTrack_TriggerType_OnDective = 1,
	ETresEffectTriggerTrack_TriggerType_OnLoopEnd = 2,
	ETresEffectTriggerTrack_TriggerType_OnFadeOut = 3,
	ETresEffectTriggerTrack_TriggerType_OnFadeIn = 4,
	ETresEffectTriggerTrack_TriggerType_OnColorChange = 5,
	ETresEffectTriggerTrack_TriggerType_MAX  = 6,
};

// Enum TresGame.ETresFadeTrack_Color
// NumValues: 0x0004
enum class ETresFadeTrack_Color : uint8
{
	ETresFadeTrack_Color_Black               = 0,
	ETresFadeTrack_Color_White               = 1,
	ETresFadeTrack_Color_Custom              = 2,
	ETresFadeTrack_Color_MAX                 = 3,
};

// Enum TresGame.ETresSubtitleTrack_OptionVoice
// NumValues: 0x0004
enum class ETresSubtitleTrack_OptionVoice : uint8
{
	ETresSubtitleTrack_OptionVoice_DoNotCare = 0,
	ETresSubtitleTrack_OptionVoice_Original  = 1,
	ETresSubtitleTrack_OptionVoice_Changed   = 2,
	ETresSubtitleTrack_OptionVoice_MAX       = 3,
};

// Enum TresGame.ETresFoodstuffDropperID
// NumValues: 0x0017
enum class ETresFoodstuffDropperID : uint8
{
	NONE                                     = 0,
	HERBS01                                  = 1,
	HERBS02                                  = 2,
	HERBS03                                  = 3,
	HERBS04                                  = 4,
	FRUITS01                                 = 5,
	FRUITS02                                 = 6,
	FRUITS03                                 = 7,
	FRUITS04                                 = 8,
	SHELLFISH01                              = 9,
	SHELLFISH02                              = 10,
	SHELLFISH03                              = 11,
	SHELLFISH04                              = 12,
	FISH01                                   = 13,
	FISH02                                   = 14,
	FISH03                                   = 15,
	FISH04                                   = 16,
	GIMMICK01                                = 17,
	GIMMICK02                                = 18,
	GIMMICK03                                = 19,
	GIMMICK04                                = 20,
	_MAX                                     = 21,
	ETresFoodstuffDropperID_MAX              = 22,
};

// Enum TresGame.ETresDropItemID
// NumValues: 0x0092
enum class ETresDropItemID : uint8
{
	None                                     = 0,
	PRIZE_HpS                                = 1,
	PRIZE_HpL                                = 2,
	PRIZE_MpS                                = 3,
	PRIZE_MpL                                = 4,
	PRIZE_FpS                                = 5,
	PRIZE_FpL                                = 6,
	PRIZE_MunnyS                             = 7,
	PRIZE_MunnyM                             = 8,
	PRIZE_MunnyL                             = 9,
	ITEM_Potion                              = 10,
	ITEM_HighPotion                          = 11,
	ITEM_MegaPotion                          = 12,
	ITEM_Ether                               = 13,
	ITEM_MegaEther                           = 14,
	ITEM_Elixir                              = 15,
	ITEM_LastElixir                          = 16,
	ITEM_FocusSupply                         = 17,
	ITEM_HighFocusSupply                     = 18,
	ITEM_AllCure                             = 19,
	ITEM_Crab                                = 20,
	ITEM_MovableCrab                         = 21,
	ITEM_HighEther                           = 22,
	ITEM_Material01                          = 23,
	ITEM_Material02                          = 24,
	ITEM_Material03                          = 25,
	ITEM_Material04                          = 26,
	ITEM_Material05                          = 27,
	ITEM_Material06                          = 28,
	ITEM_Material07                          = 29,
	ITEM_Material08                          = 30,
	ITEM_Material09                          = 31,
	ITEM_Material10                          = 32,
	ITEM_Material11                          = 33,
	ITEM_Material12                          = 34,
	ITEM_Material13                          = 35,
	ITEM_Material14                          = 36,
	ITEM_Material15                          = 37,
	ITEM_Material16                          = 38,
	ITEM_Material17                          = 39,
	ITEM_Material18                          = 40,
	ITEM_Material19                          = 41,
	ITEM_Material20                          = 42,
	ITEM_Material21                          = 43,
	ITEM_Material22                          = 44,
	ITEM_Material23                          = 45,
	ITEM_Material24                          = 46,
	ITEM_Material25                          = 47,
	ITEM_Material26                          = 48,
	ITEM_Material27                          = 49,
	ITEM_Material28                          = 50,
	ITEM_Material29                          = 51,
	ITEM_Material30                          = 52,
	ITEM_Material31                          = 53,
	ITEM_Material32                          = 54,
	ITEM_Material33                          = 55,
	ITEM_Material34                          = 56,
	ITEM_Material35                          = 57,
	ITEM_Material36                          = 58,
	ITEM_Material37                          = 59,
	ITEM_Material38                          = 60,
	ITEM_Material39                          = 61,
	ITEM_Material40                          = 62,
	ITEM_Material41                          = 63,
	ITEM_Material42                          = 64,
	ITEM_Material43                          = 65,
	ITEM_Material44                          = 66,
	ITEM_Material45                          = 67,
	ITEM_Material46                          = 68,
	ITEM_Material47                          = 69,
	ITEM_Material48                          = 70,
	ITEM_Material49                          = 71,
	ITEM_Material50                          = 72,
	ITEM_Material51                          = 73,
	ITEM_Material52                          = 74,
	ITEM_Material53                          = 75,
	ITEM_Material54                          = 76,
	ITEM_Material55                          = 77,
	ITEM_Material56                          = 78,
	ITEM_Material57                          = 79,
	ITEM_Material58                          = 80,
	ITEM_Material59                          = 81,
	ITEM_Material60                          = 82,
	ITEM_Foodstuff01                         = 83,
	ITEM_Foodstuff02                         = 84,
	ITEM_Foodstuff03                         = 85,
	ITEM_Foodstuff04                         = 86,
	ITEM_Foodstuff05                         = 87,
	ITEM_Foodstuff06                         = 88,
	ITEM_Foodstuff07                         = 89,
	ITEM_Foodstuff08                         = 90,
	ITEM_Foodstuff09                         = 91,
	ITEM_Foodstuff10                         = 92,
	ITEM_Foodstuff11                         = 93,
	ITEM_Foodstuff12                         = 94,
	ITEM_Foodstuff13                         = 95,
	ITEM_Foodstuff14                         = 96,
	ITEM_Foodstuff15                         = 97,
	ITEM_Foodstuff16                         = 98,
	ITEM_Foodstuff17                         = 99,
	ITEM_Foodstuff18                         = 100,
	ITEM_Foodstuff19                         = 101,
	ITEM_Foodstuff20                         = 102,
	ITEM_Foodstuff21                         = 103,
	ITEM_Foodstuff22                         = 104,
	ITEM_Foodstuff23                         = 105,
	ITEM_Foodstuff24                         = 106,
	ITEM_Foodstuff25                         = 107,
	ITEM_Foodstuff26                         = 108,
	ITEM_Foodstuff27                         = 109,
	ITEM_Foodstuff28                         = 110,
	ITEM_Foodstuff29                         = 111,
	ITEM_Foodstuff30                         = 112,
	ITEM_Foodstuff31                         = 113,
	ITEM_Foodstuff32                         = 114,
	ITEM_Foodstuff33                         = 115,
	ITEM_Foodstuff34                         = 116,
	ITEM_Foodstuff35                         = 117,
	ITEM_Foodstuff36                         = 118,
	ITEM_Foodstuff37                         = 119,
	ITEM_Foodstuff38                         = 120,
	ITEM_Foodstuff39                         = 121,
	ITEM_Foodstuff40                         = 122,
	ITEM_Foodstuff41                         = 123,
	ITEM_Foodstuff42                         = 124,
	ITEM_Foodstuff43                         = 125,
	ITEM_Foodstuff44                         = 126,
	ITEM_Foodstuff45                         = 127,
	ITEM_Foodstuff46                         = 128,
	ITEM_Foodstuff47                         = 129,
	ITEM_Foodstuff48                         = 130,
	ITEM_Foodstuff49                         = 131,
	ITEM_Foodstuff50                         = 132,
	ITEM_Foodstuff51                         = 133,
	ITEM_Foodstuff52                         = 134,
	ITEM_Foodstuff53                         = 135,
	ITEM_Foodstuff54                         = 136,
	ITEM_Foodstuff55                         = 137,
	ITEM_Foodstuff56                         = 138,
	ITEM_Foodstuff57                         = 139,
	ITEM_Foodstuff58                         = 140,
	ITEM_Foodstuff59                         = 141,
	PRIZE_LightS                             = 142,
	PRIZE_LightL                             = 143,
	_DROP_ITEM_ID_MAX                        = 144,
	ETresDropItemID_MAX                      = 145,
};

// Enum TresGame.ETresItemDefGumiEtc
// NumValues: 0x004F
enum class ETresItemDefGumiEtc : uint8
{
	NOTHING                                  = 0,
	ITEM001                                  = 1,
	ITEM002                                  = 2,
	ITEM003                                  = 3,
	ITEM004                                  = 4,
	ITEM005                                  = 5,
	ITEM006                                  = 6,
	ITEM007                                  = 7,
	ITEM008                                  = 8,
	ITEM009                                  = 9,
	ITEM010                                  = 10,
	ITEM011                                  = 11,
	ITEM012                                  = 12,
	ITEM013                                  = 13,
	ITEM014                                  = 14,
	ITEM015                                  = 15,
	ITEM016                                  = 16,
	ITEM017                                  = 17,
	ITEM018                                  = 18,
	ITEM019                                  = 19,
	ITEM020                                  = 20,
	ITEM021                                  = 21,
	ITEM022                                  = 22,
	ITEM023                                  = 23,
	ITEM024                                  = 24,
	ITEM025                                  = 25,
	ITEM026                                  = 26,
	ITEM027                                  = 27,
	ITEM028                                  = 28,
	ITEM029                                  = 29,
	ITEM030                                  = 30,
	ITEM031                                  = 31,
	ITEM032                                  = 32,
	ITEM033                                  = 33,
	ITEM034                                  = 34,
	ITEM035                                  = 35,
	ITEM036                                  = 36,
	ITEM037                                  = 37,
	ITEM038                                  = 38,
	ITEM039                                  = 39,
	ITEM040                                  = 40,
	ITEM041                                  = 41,
	ITEM042                                  = 42,
	ITEM043                                  = 43,
	ITEM044                                  = 44,
	ITEM045                                  = 45,
	ITEM046                                  = 46,
	ITEM047                                  = 47,
	ITEM048                                  = 48,
	ITEM049                                  = 49,
	ITEM050                                  = 50,
	ITEM051                                  = 51,
	ITEM052                                  = 52,
	ITEM053                                  = 53,
	ITEM054                                  = 54,
	ITEM055                                  = 55,
	ITEM056                                  = 56,
	ITEM057                                  = 57,
	ITEM058                                  = 58,
	ITEM059                                  = 59,
	ITEM060                                  = 60,
	ITEM061                                  = 61,
	ITEM062                                  = 62,
	ITEM063                                  = 63,
	ITEM064                                  = 64,
	ITEM065                                  = 65,
	ITEM066                                  = 66,
	ITEM067                                  = 67,
	ITEM068                                  = 68,
	ITEM069                                  = 69,
	ITEM070                                  = 70,
	ITEM071                                  = 71,
	ITEM072                                  = 72,
	ITEM073                                  = 73,
	ITEM074                                  = 74,
	ITEM075                                  = 75,
	ITEM076                                  = 76,
	_MAX                                     = 128,
	ETresItemDefGumiEtc_MAX                  = 129,
};

// Enum TresGame.ETresItemDefGumiShipBP
// NumValues: 0x00C6
enum class ETresItemDefGumiShipBP : uint8
{
	NOTHING                                  = 0,
	ITEM001                                  = 1,
	ITEM002                                  = 2,
	ITEM003                                  = 3,
	ITEM004                                  = 4,
	ITEM005                                  = 5,
	ITEM006                                  = 6,
	ITEM007                                  = 7,
	ITEM008                                  = 8,
	ITEM009                                  = 9,
	ITEM010                                  = 10,
	ITEM011                                  = 11,
	ITEM012                                  = 12,
	ITEM013                                  = 13,
	ITEM014                                  = 14,
	ITEM015                                  = 15,
	ITEM016                                  = 16,
	ITEM017                                  = 17,
	ITEM018                                  = 18,
	ITEM019                                  = 19,
	ITEM020                                  = 20,
	ITEM021                                  = 21,
	ITEM022                                  = 22,
	ITEM023                                  = 23,
	ITEM024                                  = 24,
	ITEM025                                  = 25,
	ITEM026                                  = 26,
	ITEM027                                  = 27,
	ITEM028                                  = 28,
	ITEM029                                  = 29,
	ITEM030                                  = 30,
	ITEM031                                  = 31,
	ITEM032                                  = 32,
	ITEM033                                  = 33,
	ITEM034                                  = 34,
	ITEM035                                  = 35,
	ITEM036                                  = 36,
	ITEM037                                  = 37,
	ITEM038                                  = 38,
	ITEM039                                  = 39,
	ITEM040                                  = 40,
	ITEM041                                  = 41,
	ITEM042                                  = 42,
	ITEM043                                  = 43,
	ITEM044                                  = 44,
	ITEM045                                  = 45,
	ITEM046                                  = 46,
	ITEM047                                  = 47,
	ITEM048                                  = 48,
	ITEM049                                  = 49,
	ITEM050                                  = 50,
	ITEM051                                  = 51,
	ITEM052                                  = 52,
	ITEM053                                  = 53,
	ITEM054                                  = 54,
	ITEM055                                  = 55,
	ITEM056                                  = 56,
	ITEM057                                  = 57,
	ITEM058                                  = 58,
	ITEM059                                  = 59,
	ITEM060                                  = 60,
	ITEM061                                  = 61,
	ITEM062                                  = 62,
	ITEM063                                  = 63,
	ITEM064                                  = 64,
	ITEM065                                  = 65,
	ITEM066                                  = 66,
	ITEM067                                  = 67,
	ITEM068                                  = 68,
	ITEM069                                  = 69,
	ITEM070                                  = 70,
	ITEM071                                  = 71,
	ITEM072                                  = 72,
	ITEM073                                  = 73,
	ITEM074                                  = 74,
	ITEM075                                  = 75,
	ITEM076                                  = 76,
	ITEM077                                  = 77,
	ITEM078                                  = 78,
	ITEM079                                  = 79,
	ITEM080                                  = 80,
	ITEM081                                  = 81,
	ITEM082                                  = 82,
	ITEM083                                  = 83,
	ITEM084                                  = 84,
	ITEM085                                  = 85,
	ITEM086                                  = 86,
	ITEM087                                  = 87,
	ITEM088                                  = 88,
	ITEM089                                  = 89,
	ITEM090                                  = 90,
	ITEM091                                  = 91,
	ITEM092                                  = 92,
	ITEM093                                  = 93,
	ITEM094                                  = 94,
	ITEM095                                  = 95,
	ITEM096                                  = 96,
	ITEM097                                  = 97,
	ITEM098                                  = 98,
	ITEM099                                  = 99,
	ITEM100                                  = 100,
	ITEM101                                  = 101,
	ITEM102                                  = 102,
	ITEM103                                  = 103,
	ITEM104                                  = 104,
	ITEM105                                  = 105,
	ITEM106                                  = 106,
	ITEM107                                  = 107,
	ITEM108                                  = 108,
	ITEM109                                  = 109,
	ITEM110                                  = 110,
	ITEM111                                  = 111,
	ITEM112                                  = 112,
	ITEM113                                  = 113,
	ITEM114                                  = 114,
	ITEM115                                  = 115,
	ITEM116                                  = 116,
	ITEM117                                  = 117,
	ITEM118                                  = 118,
	ITEM119                                  = 119,
	ITEM120                                  = 120,
	ITEM121                                  = 121,
	ITEM122                                  = 122,
	ITEM123                                  = 123,
	ITEM124                                  = 124,
	ITEM125                                  = 125,
	ITEM126                                  = 126,
	ITEM127                                  = 127,
	ITEM128                                  = 128,
	ITEM129                                  = 129,
	ITEM130                                  = 130,
	ITEM131                                  = 131,
	ITEM132                                  = 132,
	ITEM133                                  = 133,
	ITEM134                                  = 134,
	ITEM135                                  = 135,
	ITEM136                                  = 136,
	ITEM137                                  = 137,
	ITEM138                                  = 138,
	ITEM139                                  = 139,
	ITEM140                                  = 140,
	ITEM141                                  = 141,
	ITEM142                                  = 142,
	ITEM143                                  = 143,
	ITEM144                                  = 144,
	ITEM145                                  = 145,
	ITEM146                                  = 146,
	ITEM147                                  = 147,
	ITEM148                                  = 148,
	ITEM149                                  = 149,
	ITEM150                                  = 150,
	ITEM151                                  = 151,
	ITEM152                                  = 152,
	ITEM153                                  = 153,
	ITEM154                                  = 154,
	ITEM155                                  = 155,
	ITEM156                                  = 156,
	ITEM157                                  = 157,
	ITEM158                                  = 158,
	ITEM159                                  = 159,
	ITEM160                                  = 160,
	ITEM161                                  = 161,
	ITEM162                                  = 162,
	ITEM163                                  = 163,
	ITEM164                                  = 164,
	ITEM165                                  = 165,
	ITEM166                                  = 166,
	ITEM167                                  = 167,
	ITEM168                                  = 168,
	ITEM169                                  = 169,
	ITEM170                                  = 170,
	ITEM171                                  = 171,
	ITEM172                                  = 172,
	ITEM173                                  = 173,
	ITEM174                                  = 174,
	ITEM175                                  = 175,
	ITEM176                                  = 176,
	ITEM177                                  = 177,
	ITEM178                                  = 178,
	ITEM179                                  = 179,
	ITEM180                                  = 180,
	ITEM181                                  = 181,
	ITEM182                                  = 182,
	ITEM183                                  = 183,
	ITEM184                                  = 184,
	ITEM185                                  = 185,
	ITEM186                                  = 186,
	ITEM187                                  = 187,
	ITEM188                                  = 188,
	ITEM189                                  = 189,
	ITEM190                                  = 190,
	ITEM191                                  = 191,
	ITEM192                                  = 192,
	ITEM193                                  = 193,
	ITEM194                                  = 194,
	ITEM195                                  = 195,
	_MAX                                     = 200,
	ETresItemDefGumiShipBP_MAX               = 201,
};

// Enum TresGame.ETresItemDefGumiSticker
// NumValues: 0x0058
enum class ETresItemDefGumiSticker : uint8
{
	NOTHING                                  = 0,
	ITEM001                                  = 1,
	ITEM002                                  = 2,
	ITEM003                                  = 3,
	ITEM004                                  = 4,
	ITEM005                                  = 5,
	ITEM006                                  = 6,
	ITEM007                                  = 7,
	ITEM008                                  = 8,
	ITEM009                                  = 9,
	ITEM010                                  = 10,
	ITEM011                                  = 11,
	ITEM012                                  = 12,
	ITEM013                                  = 13,
	ITEM014                                  = 14,
	ITEM015                                  = 15,
	ITEM016                                  = 16,
	ITEM017                                  = 17,
	ITEM018                                  = 18,
	ITEM019                                  = 19,
	ITEM020                                  = 20,
	ITEM021                                  = 21,
	ITEM022                                  = 22,
	ITEM023                                  = 23,
	ITEM024                                  = 24,
	ITEM025                                  = 25,
	ITEM026                                  = 26,
	ITEM027                                  = 27,
	ITEM028                                  = 28,
	ITEM029                                  = 29,
	ITEM030                                  = 30,
	ITEM031                                  = 31,
	ITEM032                                  = 32,
	ITEM033                                  = 33,
	ITEM034                                  = 34,
	ITEM035                                  = 35,
	ITEM036                                  = 36,
	ITEM037                                  = 37,
	ITEM038                                  = 38,
	ITEM039                                  = 39,
	ITEM040                                  = 40,
	ITEM041                                  = 41,
	ITEM042                                  = 42,
	ITEM043                                  = 43,
	ITEM044                                  = 44,
	ITEM045                                  = 45,
	ITEM046                                  = 46,
	ITEM047                                  = 47,
	ITEM048                                  = 48,
	ITEM049                                  = 49,
	ITEM050                                  = 50,
	ITEM051                                  = 51,
	ITEM052                                  = 52,
	ITEM053                                  = 53,
	ITEM054                                  = 54,
	ITEM055                                  = 55,
	ITEM056                                  = 56,
	ITEM057                                  = 57,
	ITEM058                                  = 58,
	ITEM059                                  = 59,
	ITEM060                                  = 60,
	ITEM061                                  = 61,
	ITEM062                                  = 62,
	ITEM063                                  = 63,
	ITEM064                                  = 64,
	ITEM065                                  = 65,
	ITEM066                                  = 66,
	ITEM067                                  = 67,
	ITEM068                                  = 68,
	ITEM069                                  = 69,
	ITEM070                                  = 70,
	ITEM071                                  = 71,
	ITEM072                                  = 72,
	ITEM073                                  = 73,
	ITEM074                                  = 74,
	ITEM075                                  = 75,
	ITEM076                                  = 76,
	ITEM077                                  = 77,
	ITEM078                                  = 78,
	ITEM079                                  = 79,
	ITEM080                                  = 80,
	ITEM081                                  = 81,
	ITEM082                                  = 82,
	ITEM083                                  = 83,
	ITEM084                                  = 84,
	ITEM085                                  = 85,
	_MAX                                     = 128,
	ETresItemDefGumiSticker_MAX              = 129,
};

// Enum TresGame.ETresItemDefGumiPattern
// NumValues: 0x006E
enum class ETresItemDefGumiPattern : uint8
{
	NOTHING                                  = 0,
	ITEM001                                  = 1,
	ITEM002                                  = 2,
	ITEM003                                  = 3,
	ITEM004                                  = 4,
	ITEM005                                  = 5,
	ITEM006                                  = 6,
	ITEM007                                  = 7,
	ITEM008                                  = 8,
	ITEM009                                  = 9,
	ITEM010                                  = 10,
	ITEM011                                  = 11,
	ITEM012                                  = 12,
	ITEM013                                  = 13,
	ITEM014                                  = 14,
	ITEM015                                  = 15,
	ITEM016                                  = 16,
	ITEM017                                  = 17,
	ITEM018                                  = 18,
	ITEM019                                  = 19,
	ITEM020                                  = 20,
	ITEM021                                  = 21,
	ITEM022                                  = 22,
	ITEM023                                  = 23,
	ITEM024                                  = 24,
	ITEM025                                  = 25,
	ITEM026                                  = 26,
	ITEM027                                  = 27,
	ITEM028                                  = 28,
	ITEM029                                  = 29,
	ITEM030                                  = 30,
	ITEM031                                  = 31,
	ITEM032                                  = 32,
	ITEM033                                  = 33,
	ITEM034                                  = 34,
	ITEM035                                  = 35,
	ITEM036                                  = 36,
	ITEM037                                  = 37,
	ITEM038                                  = 38,
	ITEM039                                  = 39,
	ITEM040                                  = 40,
	ITEM041                                  = 41,
	ITEM042                                  = 42,
	ITEM043                                  = 43,
	ITEM044                                  = 44,
	ITEM045                                  = 45,
	ITEM046                                  = 46,
	ITEM047                                  = 47,
	ITEM048                                  = 48,
	ITEM049                                  = 49,
	ITEM050                                  = 50,
	ITEM051                                  = 51,
	ITEM052                                  = 52,
	ITEM053                                  = 53,
	ITEM054                                  = 54,
	ITEM055                                  = 55,
	ITEM056                                  = 56,
	ITEM057                                  = 57,
	ITEM058                                  = 58,
	ITEM059                                  = 59,
	ITEM060                                  = 60,
	ITEM061                                  = 61,
	ITEM062                                  = 62,
	ITEM063                                  = 63,
	ITEM064                                  = 64,
	ITEM065                                  = 65,
	ITEM066                                  = 66,
	ITEM067                                  = 67,
	ITEM068                                  = 68,
	ITEM069                                  = 69,
	ITEM070                                  = 70,
	ITEM071                                  = 71,
	ITEM072                                  = 72,
	ITEM073                                  = 73,
	ITEM074                                  = 74,
	ITEM075                                  = 75,
	ITEM076                                  = 76,
	ITEM077                                  = 77,
	ITEM078                                  = 78,
	ITEM079                                  = 79,
	ITEM080                                  = 80,
	ITEM081                                  = 81,
	ITEM082                                  = 82,
	ITEM083                                  = 83,
	ITEM084                                  = 84,
	ITEM085                                  = 85,
	ITEM086                                  = 86,
	ITEM087                                  = 87,
	ITEM088                                  = 88,
	ITEM089                                  = 89,
	ITEM090                                  = 90,
	ITEM091                                  = 91,
	ITEM092                                  = 92,
	ITEM093                                  = 93,
	ITEM094                                  = 94,
	ITEM095                                  = 95,
	ITEM096                                  = 96,
	ITEM097                                  = 97,
	ITEM098                                  = 98,
	ITEM099                                  = 99,
	ITEM100                                  = 100,
	ITEM101                                  = 101,
	ITEM102                                  = 102,
	ITEM103                                  = 103,
	ITEM104                                  = 104,
	ITEM105                                  = 105,
	ITEM106                                  = 106,
	ITEM107                                  = 107,
	_MAX                                     = 128,
	ETresItemDefGumiPattern_MAX              = 129,
};

// Enum TresGame.ETresItemDefGumiMaterial
// NumValues: 0x0047
enum class ETresItemDefGumiMaterial : uint8
{
	NOTHING                                  = 0,
	ITEM001                                  = 1,
	ITEM002                                  = 2,
	ITEM003                                  = 3,
	ITEM004                                  = 4,
	ITEM005                                  = 5,
	ITEM006                                  = 6,
	ITEM007                                  = 7,
	ITEM008                                  = 8,
	ITEM009                                  = 9,
	ITEM010                                  = 10,
	ITEM011                                  = 11,
	ITEM012                                  = 12,
	ITEM013                                  = 13,
	ITEM014                                  = 14,
	ITEM015                                  = 15,
	ITEM016                                  = 16,
	ITEM017                                  = 17,
	ITEM018                                  = 18,
	ITEM019                                  = 19,
	ITEM020                                  = 20,
	ITEM021                                  = 21,
	ITEM022                                  = 22,
	ITEM023                                  = 23,
	ITEM024                                  = 24,
	ITEM025                                  = 25,
	ITEM026                                  = 26,
	ITEM027                                  = 27,
	ITEM028                                  = 28,
	ITEM029                                  = 29,
	ITEM030                                  = 30,
	ITEM031                                  = 31,
	ITEM032                                  = 32,
	ITEM033                                  = 33,
	ITEM034                                  = 34,
	ITEM035                                  = 35,
	ITEM036                                  = 36,
	ITEM037                                  = 37,
	ITEM038                                  = 38,
	ITEM039                                  = 39,
	ITEM040                                  = 40,
	ITEM041                                  = 41,
	ITEM042                                  = 42,
	ITEM043                                  = 43,
	ITEM044                                  = 44,
	ITEM045                                  = 45,
	ITEM046                                  = 46,
	ITEM047                                  = 47,
	ITEM048                                  = 48,
	ITEM049                                  = 49,
	ITEM050                                  = 50,
	ITEM051                                  = 51,
	ITEM052                                  = 52,
	ITEM053                                  = 53,
	ITEM054                                  = 54,
	ITEM055                                  = 55,
	ITEM056                                  = 56,
	ITEM057                                  = 57,
	ITEM058                                  = 58,
	ITEM059                                  = 59,
	ITEM060                                  = 60,
	ITEM061                                  = 61,
	ITEM062                                  = 62,
	ITEM063                                  = 63,
	ITEM064                                  = 64,
	ITEM065                                  = 65,
	ITEM066                                  = 66,
	ITEM067                                  = 67,
	ITEM068                                  = 68,
	_MAX                                     = 100,
	ETresItemDefGumiMaterial_MAX             = 101,
};

// Enum TresGame.ETresItemDefGumiParts
// NumValues: 0x00B9
enum class ETresItemDefGumiParts : uint8
{
	NOTHING                                  = 0,
	ITEM001                                  = 1,
	ITEM002                                  = 2,
	ITEM003                                  = 3,
	ITEM004                                  = 4,
	ITEM005                                  = 5,
	ITEM006                                  = 6,
	ITEM007                                  = 7,
	ITEM008                                  = 8,
	ITEM009                                  = 9,
	ITEM010                                  = 10,
	ITEM011                                  = 11,
	ITEM012                                  = 12,
	ITEM013                                  = 13,
	ITEM014                                  = 14,
	ITEM015                                  = 15,
	ITEM016                                  = 16,
	ITEM017                                  = 17,
	ITEM018                                  = 18,
	ITEM019                                  = 19,
	ITEM020                                  = 20,
	ITEM021                                  = 21,
	ITEM022                                  = 22,
	ITEM023                                  = 23,
	ITEM024                                  = 24,
	ITEM025                                  = 25,
	ITEM026                                  = 26,
	ITEM027                                  = 27,
	ITEM028                                  = 28,
	ITEM029                                  = 29,
	ITEM030                                  = 30,
	ITEM031                                  = 31,
	ITEM032                                  = 32,
	ITEM033                                  = 33,
	ITEM034                                  = 34,
	ITEM035                                  = 35,
	ITEM036                                  = 36,
	ITEM037                                  = 37,
	ITEM038                                  = 38,
	ITEM039                                  = 39,
	ITEM040                                  = 40,
	ITEM041                                  = 41,
	ITEM042                                  = 42,
	ITEM043                                  = 43,
	ITEM044                                  = 44,
	ITEM045                                  = 45,
	ITEM046                                  = 46,
	ITEM047                                  = 47,
	ITEM048                                  = 48,
	ITEM049                                  = 49,
	ITEM050                                  = 50,
	ITEM051                                  = 51,
	ITEM052                                  = 52,
	ITEM053                                  = 53,
	ITEM054                                  = 54,
	ITEM055                                  = 55,
	ITEM056                                  = 56,
	ITEM057                                  = 57,
	ITEM058                                  = 58,
	ITEM059                                  = 59,
	ITEM060                                  = 60,
	ITEM061                                  = 61,
	ITEM062                                  = 62,
	ITEM063                                  = 63,
	ITEM064                                  = 64,
	ITEM065                                  = 65,
	ITEM066                                  = 66,
	ITEM067                                  = 67,
	ITEM068                                  = 68,
	ITEM069                                  = 69,
	ITEM070                                  = 70,
	ITEM071                                  = 71,
	ITEM072                                  = 72,
	ITEM073                                  = 73,
	ITEM074                                  = 74,
	ITEM075                                  = 75,
	ITEM076                                  = 76,
	ITEM077                                  = 77,
	ITEM078                                  = 78,
	ITEM079                                  = 79,
	ITEM080                                  = 80,
	ITEM081                                  = 81,
	ITEM082                                  = 82,
	ITEM083                                  = 83,
	ITEM084                                  = 84,
	ITEM085                                  = 85,
	ITEM086                                  = 86,
	ITEM087                                  = 87,
	ITEM088                                  = 88,
	ITEM089                                  = 89,
	ITEM090                                  = 90,
	ITEM091                                  = 91,
	ITEM092                                  = 92,
	ITEM093                                  = 93,
	ITEM094                                  = 94,
	ITEM095                                  = 95,
	ITEM096                                  = 96,
	ITEM097                                  = 97,
	ITEM098                                  = 98,
	ITEM099                                  = 99,
	ITEM100                                  = 100,
	ITEM101                                  = 101,
	ITEM102                                  = 102,
	ITEM103                                  = 103,
	ITEM104                                  = 104,
	ITEM105                                  = 105,
	ITEM106                                  = 106,
	ITEM107                                  = 107,
	ITEM108                                  = 108,
	ITEM109                                  = 109,
	ITEM110                                  = 110,
	ITEM111                                  = 111,
	ITEM112                                  = 112,
	ITEM113                                  = 113,
	ITEM114                                  = 114,
	ITEM115                                  = 115,
	ITEM116                                  = 116,
	ITEM117                                  = 117,
	ITEM118                                  = 118,
	ITEM119                                  = 119,
	ITEM120                                  = 120,
	ITEM121                                  = 121,
	ITEM122                                  = 122,
	ITEM123                                  = 123,
	ITEM124                                  = 124,
	ITEM125                                  = 125,
	ITEM126                                  = 126,
	ITEM127                                  = 127,
	ITEM128                                  = 128,
	ITEM129                                  = 129,
	ITEM130                                  = 130,
	ITEM131                                  = 131,
	ITEM132                                  = 132,
	ITEM133                                  = 133,
	ITEM134                                  = 134,
	ITEM135                                  = 135,
	ITEM136                                  = 136,
	ITEM137                                  = 137,
	ITEM138                                  = 138,
	ITEM139                                  = 139,
	ITEM140                                  = 140,
	ITEM141                                  = 141,
	ITEM142                                  = 142,
	ITEM143                                  = 143,
	ITEM144                                  = 144,
	ITEM145                                  = 145,
	ITEM146                                  = 146,
	ITEM147                                  = 147,
	ITEM148                                  = 148,
	ITEM149                                  = 149,
	ITEM150                                  = 150,
	ITEM151                                  = 151,
	ITEM152                                  = 152,
	ITEM153                                  = 153,
	ITEM154                                  = 154,
	ITEM155                                  = 155,
	ITEM156                                  = 156,
	ITEM157                                  = 157,
	ITEM158                                  = 158,
	ITEM159                                  = 159,
	ITEM160                                  = 160,
	ITEM161                                  = 161,
	ITEM162                                  = 162,
	ITEM163                                  = 163,
	ITEM164                                  = 164,
	ITEM165                                  = 165,
	ITEM166                                  = 166,
	ITEM167                                  = 167,
	ITEM168                                  = 168,
	ITEM169                                  = 169,
	ITEM170                                  = 170,
	ITEM171                                  = 171,
	ITEM172                                  = 172,
	ITEM173                                  = 173,
	ITEM174                                  = 174,
	ITEM175                                  = 175,
	ITEM176                                  = 176,
	ITEM177                                  = 177,
	ITEM178                                  = 178,
	ITEM179                                  = 179,
	ITEM180                                  = 180,
	ITEM181                                  = 181,
	ITEM182                                  = 182,
	_MAX                                     = 200,
	ETresItemDefGumiParts_MAX                = 201,
};

// Enum TresGame.ETresItemDefReport
// NumValues: 0x0011
enum class ETresItemDefReport : uint8
{
	NOTHING                                  = 0,
	ITEM01                                   = 1,
	ITEM02                                   = 2,
	ITEM03                                   = 3,
	ITEM04                                   = 4,
	ITEM05                                   = 5,
	ITEM06                                   = 6,
	ITEM07                                   = 7,
	ITEM08                                   = 8,
	ITEM09                                   = 9,
	ITEM10                                   = 10,
	ITEM11                                   = 11,
	ITEM12                                   = 12,
	ITEM13                                   = 13,
	ITEM14                                   = 14,
	_MAX                                     = 20,
	ETresItemDefReport_MAX                   = 21,
};

// Enum TresGame.ETresItemDefNavimap
// NumValues: 0x0037
enum class ETresItemDefNavimap : uint8
{
	NM_WCID_DW01                             = 0,
	NM_WCID_DW02                             = 1,
	NM_WCID_DW03                             = 2,
	NM_WCID_DW04                             = 3,
	NM_WCID_MI01                             = 4,
	NM_WCID_MI02                             = 5,
	NM_WCID_MI03                             = 6,
	NM_WCID_MI04                             = 7,
	NM_WCID_TS01                             = 8,
	NM_WCID_TS02                             = 9,
	NM_WCID_TS03                             = 10,
	NM_WCID_TS04                             = 11,
	NM_WCID_FZ01                             = 12,
	NM_WCID_FZ02                             = 13,
	NM_WCID_FZ03                             = 14,
	NM_WCID_FZ04                             = 15,
	NM_WCID_RA01                             = 16,
	NM_WCID_RA02                             = 17,
	NM_WCID_RA03                             = 18,
	NM_WCID_RA04                             = 19,
	NM_WCID_CA01                             = 20,
	NM_WCID_CA02                             = 21,
	NM_WCID_CA03                             = 22,
	NM_WCID_CA04                             = 23,
	NM_WCID_HE01                             = 24,
	NM_WCID_HE02                             = 25,
	NM_WCID_HE03                             = 26,
	NM_WCID_HE04                             = 27,
	NM_WCID_BX01                             = 28,
	NM_WCID_BX02                             = 29,
	NM_WCID_BX03                             = 30,
	NM_WCID_BX04                             = 31,
	NM_WCID_TT01                             = 32,
	NM_WCID_TT02                             = 33,
	NM_WCID_TT03                             = 34,
	NM_WCID_TT04                             = 35,
	NM_WCID_PO01                             = 36,
	NM_WCID_PO02                             = 37,
	NM_WCID_PO03                             = 38,
	NM_WCID_PO04                             = 39,
	NM_WCID_KG01                             = 40,
	NM_WCID_KG02                             = 41,
	NM_WCID_KG03                             = 42,
	NM_WCID_KG04                             = 43,
	NM_WCID_EW01                             = 44,
	NM_WCID_EW02                             = 45,
	NM_WCID_EW03                             = 46,
	NM_WCID_EW04                             = 47,
	NM_WCID_BT01                             = 48,
	NM_WCID_BT02                             = 49,
	NM_WCID_BT03                             = 50,
	NM_WCID_BT04                             = 51,
	NM_WCID_CA05                             = 52,
	_MAX                                     = 100,
	ETresItemDefNavimap_MAX                  = 101,
};

// Enum TresGame.ETresItemDefLSIGameItem
// NumValues: 0x001A
enum class ETresItemDefLSIGameItem : uint8
{
	NOTHING                                  = 0,
	ITEM01                                   = 1,
	ITEM02                                   = 2,
	ITEM03                                   = 3,
	ITEM04                                   = 4,
	ITEM05                                   = 5,
	ITEM06                                   = 6,
	ITEM07                                   = 7,
	ITEM08                                   = 8,
	ITEM09                                   = 9,
	ITEM10                                   = 10,
	ITEM11                                   = 11,
	ITEM12                                   = 12,
	ITEM13                                   = 13,
	ITEM14                                   = 14,
	ITEM15                                   = 15,
	ITEM16                                   = 16,
	ITEM17                                   = 17,
	ITEM18                                   = 18,
	ITEM19                                   = 19,
	ITEM20                                   = 20,
	ITEM21                                   = 21,
	ITEM22                                   = 22,
	ITEM23                                   = 23,
	_MAX                                     = 32,
	ETresItemDefLSIGameItem_MAX              = 33,
};

// Enum TresGame.ETresItemDefMognetItem
// NumValues: 0x0004
enum class ETresItemDefMognetItem : uint8
{
	NOTHING                                  = 0,
	ITEM01                                   = 1,
	_MAX                                     = 4,
	ETresItemDefMognetItem_MAX               = 5,
};

// Enum TresGame.ETresItemDefKeyItem
// NumValues: 0x0010
enum class ETresItemDefKeyItem : uint8
{
	NOTHING                                  = 0,
	ITEM01                                   = 1,
	ITEM02                                   = 2,
	ITEM03                                   = 3,
	ITEM04                                   = 4,
	ITEM05                                   = 5,
	ITEM06                                   = 6,
	ITEM07                                   = 7,
	ITEM08                                   = 8,
	ITEM09                                   = 9,
	ITEM10                                   = 10,
	ITEM11                                   = 11,
	ITEM12                                   = 12,
	ITEM13                                   = 13,
	_MAX                                     = 24,
	ETresItemDefKeyItem_MAX                  = 25,
};

// Enum TresGame.ETresItemDefFoodstuff
// NumValues: 0x003E
enum class ETresItemDefFoodstuff : uint8
{
	NOTHING                                  = 0,
	ITEM01                                   = 1,
	ITEM02                                   = 2,
	ITEM03                                   = 3,
	ITEM04                                   = 4,
	ITEM05                                   = 5,
	ITEM06                                   = 6,
	ITEM07                                   = 7,
	ITEM08                                   = 8,
	ITEM09                                   = 9,
	ITEM10                                   = 10,
	ITEM11                                   = 11,
	ITEM12                                   = 12,
	ITEM13                                   = 13,
	ITEM14                                   = 14,
	ITEM15                                   = 15,
	ITEM16                                   = 16,
	ITEM17                                   = 17,
	ITEM18                                   = 18,
	ITEM19                                   = 19,
	ITEM20                                   = 20,
	ITEM21                                   = 21,
	ITEM22                                   = 22,
	ITEM23                                   = 23,
	ITEM24                                   = 24,
	ITEM25                                   = 25,
	ITEM26                                   = 26,
	ITEM27                                   = 27,
	ITEM28                                   = 28,
	ITEM29                                   = 29,
	ITEM30                                   = 30,
	ITEM31                                   = 31,
	ITEM32                                   = 32,
	ITEM33                                   = 33,
	ITEM34                                   = 34,
	ITEM35                                   = 35,
	ITEM36                                   = 36,
	ITEM37                                   = 37,
	ITEM38                                   = 38,
	ITEM39                                   = 39,
	ITEM40                                   = 40,
	ITEM41                                   = 41,
	ITEM42                                   = 42,
	ITEM43                                   = 43,
	ITEM44                                   = 44,
	ITEM45                                   = 45,
	ITEM46                                   = 46,
	ITEM47                                   = 47,
	ITEM48                                   = 48,
	ITEM49                                   = 49,
	ITEM50                                   = 50,
	ITEM51                                   = 51,
	ITEM52                                   = 52,
	ITEM53                                   = 53,
	ITEM54                                   = 54,
	ITEM55                                   = 55,
	ITEM56                                   = 56,
	ITEM57                                   = 57,
	ITEM58                                   = 58,
	ITEM59                                   = 59,
	_MAX                                     = 64,
	ETresItemDefFoodstuff_MAX                = 65,
};

// Enum TresGame.ETresItemDefMaterial
// NumValues: 0x003F
enum class ETresItemDefMaterial : uint8
{
	NOTHING                                  = 0,
	ITEM01                                   = 1,
	ITEM02                                   = 2,
	ITEM03                                   = 3,
	ITEM04                                   = 4,
	ITEM05                                   = 5,
	ITEM06                                   = 6,
	ITEM07                                   = 7,
	ITEM08                                   = 8,
	ITEM09                                   = 9,
	ITEM10                                   = 10,
	ITEM11                                   = 11,
	ITEM12                                   = 12,
	ITEM13                                   = 13,
	ITEM14                                   = 14,
	ITEM15                                   = 15,
	ITEM16                                   = 16,
	ITEM17                                   = 17,
	ITEM18                                   = 18,
	ITEM19                                   = 19,
	ITEM20                                   = 20,
	ITEM21                                   = 21,
	ITEM22                                   = 22,
	ITEM23                                   = 23,
	ITEM24                                   = 24,
	ITEM25                                   = 25,
	ITEM26                                   = 26,
	ITEM27                                   = 27,
	ITEM28                                   = 28,
	ITEM29                                   = 29,
	ITEM30                                   = 30,
	ITEM31                                   = 31,
	ITEM32                                   = 32,
	ITEM33                                   = 33,
	ITEM34                                   = 34,
	ITEM35                                   = 35,
	ITEM36                                   = 36,
	ITEM37                                   = 37,
	ITEM38                                   = 38,
	ITEM39                                   = 39,
	ITEM40                                   = 40,
	ITEM41                                   = 41,
	ITEM42                                   = 42,
	ITEM43                                   = 43,
	ITEM44                                   = 44,
	ITEM45                                   = 45,
	ITEM46                                   = 46,
	ITEM47                                   = 47,
	ITEM48                                   = 48,
	ITEM49                                   = 49,
	ITEM50                                   = 50,
	ITEM51                                   = 51,
	ITEM52                                   = 52,
	ITEM53                                   = 53,
	ITEM54                                   = 54,
	ITEM55                                   = 55,
	ITEM56                                   = 56,
	ITEM57                                   = 57,
	ITEM58                                   = 58,
	ITEM59                                   = 59,
	ITEM60                                   = 60,
	_MAX                                     = 100,
	ETresItemDefMaterial_MAX                 = 101,
};

// Enum TresGame.ETresItemRank
// NumValues: 0x0007
enum class ETresItemRank : uint8
{
	NOTHING                                  = 0,
	RANK00                                   = 1,
	RANK01                                   = 2,
	RANK02                                   = 3,
	RANK03                                   = 4,
	_MAX                                     = 5,
	ETresItemRank_MAX                        = 6,
};

// Enum TresGame.ETresItemDefFood
// NumValues: 0x003B
enum class ETresItemDefFood : uint8
{
	NOTHING                                  = 0,
	SOUP01                                   = 1,
	SOUP02                                   = 2,
	SOUP03                                   = 3,
	SOUP04                                   = 4,
	SOUP05                                   = 5,
	APPETIZER01                              = 6,
	APPETIZER02                              = 7,
	APPETIZER03                              = 8,
	APPETIZER04                              = 9,
	APPETIZER05                              = 10,
	FISHDISH01                               = 11,
	FISHDISH02                               = 12,
	FISHDISH03                               = 13,
	FISHDISH04                               = 14,
	FISHDISH05                               = 15,
	FISHDISH06                               = 16,
	MEETDISH01                               = 17,
	MEETDISH02                               = 18,
	MEETDISH03                               = 19,
	MEETDISH04                               = 20,
	MEETDISH05                               = 21,
	DESSERT01                                = 22,
	DESSERT02                                = 23,
	DESSERT03                                = 24,
	DESSERT04                                = 25,
	DESSERT05                                = 26,
	DESSERT06                                = 27,
	DESSERT07                                = 28,
	SOUP01P                                  = 29,
	SOUP02P                                  = 30,
	SOUP03P                                  = 31,
	SOUP04P                                  = 32,
	SOUP05P                                  = 33,
	APPETIZER01P                             = 34,
	APPETIZER02P                             = 35,
	APPETIZER03P                             = 36,
	APPETIZER04P                             = 37,
	APPETIZER05P                             = 38,
	FISHDISH01P                              = 39,
	FISHDISH02P                              = 40,
	FISHDISH03P                              = 41,
	FISHDISH04P                              = 42,
	FISHDISH05P                              = 43,
	FISHDISH06P                              = 44,
	MEETDISH01P                              = 45,
	MEETDISH02P                              = 46,
	MEETDISH03P                              = 47,
	MEETDISH04P                              = 48,
	MEETDISH05P                              = 49,
	DESSERT01P                               = 50,
	DESSERT02P                               = 51,
	DESSERT03P                               = 52,
	DESSERT04P                               = 53,
	DESSERT05P                               = 54,
	DESSERT06P                               = 55,
	DESSERT07P                               = 56,
	_MAX                                     = 64,
	ETresItemDefFood_MAX                     = 65,
};

// Enum TresGame.ETresItemDefAccessory
// NumValues: 0x0073
enum class ETresItemDefAccessory : uint8
{
	NOTHING                                  = 0,
	ITEM01                                   = 1,
	ITEM02                                   = 2,
	ITEM03                                   = 3,
	ITEM04                                   = 4,
	ITEM05                                   = 5,
	ITEM06                                   = 6,
	ITEM07                                   = 7,
	ITEM08                                   = 8,
	ITEM09                                   = 9,
	ITEM10                                   = 10,
	ITEM11                                   = 11,
	ITEM12                                   = 12,
	ITEM13                                   = 13,
	ITEM14                                   = 14,
	ITEM15                                   = 15,
	ITEM16                                   = 16,
	ITEM17                                   = 17,
	ITEM18                                   = 18,
	ITEM19                                   = 19,
	ITEM20                                   = 20,
	ITEM21                                   = 21,
	ITEM22                                   = 22,
	ITEM23                                   = 23,
	ITEM24                                   = 24,
	ITEM25                                   = 25,
	ITEM26                                   = 26,
	ITEM27                                   = 27,
	ITEM28                                   = 28,
	ITEM29                                   = 29,
	ITEM30                                   = 30,
	ITEM31                                   = 31,
	ITEM32                                   = 32,
	ITEM33                                   = 33,
	ITEM34                                   = 34,
	ITEM35                                   = 35,
	ITEM36                                   = 36,
	ITEM37                                   = 37,
	ITEM38                                   = 38,
	ITEM39                                   = 39,
	ITEM40                                   = 40,
	ITEM41                                   = 41,
	ITEM42                                   = 42,
	ITEM43                                   = 43,
	ITEM44                                   = 44,
	ITEM45                                   = 45,
	ITEM46                                   = 46,
	ITEM47                                   = 47,
	ITEM48                                   = 48,
	ITEM49                                   = 49,
	ITEM50                                   = 50,
	ITEM51                                   = 51,
	ITEM52                                   = 52,
	ITEM53                                   = 53,
	ITEM54                                   = 54,
	ITEM55                                   = 55,
	ITEM56                                   = 56,
	ITEM57                                   = 57,
	ITEM58                                   = 58,
	ITEM59                                   = 59,
	ITEM60                                   = 60,
	ITEM61                                   = 61,
	ITEM62                                   = 62,
	ITEM63                                   = 63,
	ITEM64                                   = 64,
	ITEM65                                   = 65,
	ITEM66                                   = 66,
	ITEM67                                   = 67,
	ITEM68                                   = 68,
	ITEM69                                   = 69,
	ITEM70                                   = 70,
	ITEM71                                   = 71,
	ITEM72                                   = 72,
	ITEM73                                   = 73,
	ITEM74                                   = 74,
	ITEM75                                   = 75,
	ITEM76                                   = 76,
	ITEM77                                   = 77,
	ITEM78                                   = 78,
	ITEM79                                   = 79,
	ITEM80                                   = 80,
	ITEM81                                   = 81,
	ITEM82                                   = 82,
	ITEM83                                   = 83,
	ITEM84                                   = 84,
	ITEM85                                   = 85,
	ITEM86                                   = 86,
	ITEM87                                   = 87,
	ITEM88                                   = 88,
	ITEM89                                   = 89,
	ITEM90                                   = 90,
	ITEM91                                   = 91,
	ITEM92                                   = 92,
	ITEM93                                   = 93,
	ITEM94                                   = 94,
	ITEM95                                   = 95,
	ITEM96                                   = 96,
	ITEM97                                   = 97,
	ITEM98                                   = 98,
	ITEM99                                   = 99,
	ITEM100                                  = 100,
	ITEM101                                  = 101,
	ITEM102                                  = 102,
	ITEM103                                  = 103,
	ITEM104                                  = 104,
	ITEM105                                  = 105,
	ITEM106                                  = 106,
	ITEM107                                  = 107,
	ITEM108                                  = 108,
	ITEM109                                  = 109,
	ITEM110                                  = 110,
	ITEM111                                  = 111,
	ITEM112                                  = 112,
	_MAX                                     = 200,
	ETresItemDefAccessory_MAX                = 201,
};

// Enum TresGame.ETresItemDefProtector
// NumValues: 0x0037
enum class ETresItemDefProtector : uint8
{
	NOTHING                                  = 0,
	ITEM01                                   = 1,
	ITEM02                                   = 2,
	ITEM03                                   = 3,
	ITEM04                                   = 4,
	ITEM05                                   = 5,
	ITEM06                                   = 6,
	ITEM07                                   = 7,
	ITEM08                                   = 8,
	ITEM09                                   = 9,
	ITEM10                                   = 10,
	ITEM11                                   = 11,
	ITEM12                                   = 12,
	ITEM13                                   = 13,
	ITEM14                                   = 14,
	ITEM15                                   = 15,
	ITEM16                                   = 16,
	ITEM17                                   = 17,
	ITEM18                                   = 18,
	ITEM19                                   = 19,
	ITEM20                                   = 20,
	ITEM21                                   = 21,
	ITEM22                                   = 22,
	ITEM23                                   = 23,
	ITEM24                                   = 24,
	ITEM25                                   = 25,
	ITEM26                                   = 26,
	ITEM27                                   = 27,
	ITEM28                                   = 28,
	ITEM29                                   = 29,
	ITEM30                                   = 30,
	ITEM31                                   = 31,
	ITEM32                                   = 32,
	ITEM33                                   = 33,
	ITEM34                                   = 34,
	ITEM35                                   = 35,
	ITEM36                                   = 36,
	ITEM37                                   = 37,
	ITEM38                                   = 38,
	ITEM39                                   = 39,
	ITEM40                                   = 40,
	ITEM41                                   = 41,
	ITEM42                                   = 42,
	ITEM43                                   = 43,
	ITEM44                                   = 44,
	ITEM45                                   = 45,
	ITEM46                                   = 46,
	ITEM47                                   = 47,
	ITEM48                                   = 48,
	ITEM49                                   = 49,
	ITEM50                                   = 50,
	ITEM51                                   = 51,
	ITEM52                                   = 52,
	_MAX                                     = 100,
	ETresItemDefProtector_MAX                = 101,
};

// Enum TresGame.ETresItemDefCampItem
// NumValues: 0x0008
enum class ETresItemDefCampItem : uint8
{
	NOTHING                                  = 0,
	TENT                                     = 1,
	POWERUP                                  = 2,
	MAGICUP                                  = 3,
	GUARDUP                                  = 4,
	APUP                                     = 5,
	_MAX                                     = 8,
	ETresItemDefCampItem_MAX                 = 9,
};

// Enum TresGame.ETresItemDefBattleItem
// NumValues: 0x000E
enum class ETresItemDefBattleItem : uint8
{
	NOTHING                                  = 0,
	BI_POTION                                = 1,
	BI_HIGHPOTION                            = 2,
	BI_MEGAPOTION                            = 3,
	BI_ETHER                                 = 4,
	BI_MEGAETHER                             = 5,
	BI_ELIXIR                                = 6,
	BI_LASTELIXIR                            = 7,
	BI_FOCUSSUPPLY                           = 8,
	BI_HIGHFOCUSSUPPLY                       = 9,
	BI_ALLCURE                               = 10,
	BI_HIGHETHER                             = 11,
	_MAX                                     = 16,
	ETresItemDefBattleItem_MAX               = 17,
};

// Enum TresGame.ETresItemSubCategoryKeyItem
// NumValues: 0x0005
enum class ETresItemSubCategoryKeyItem : uint8
{
	NONE                                     = 0,
	EVENT                                    = 1,
	SYNTHESIS_RECIPE                         = 2,
	_MAX                                     = 3,
	ETresItemSubCategoryKeyItem_MAX          = 4,
};

// Enum TresGame.ETresItemSubCategoryFoodStuff
// NumValues: 0x0009
enum class ETresItemSubCategoryFoodStuff : uint8
{
	SEAFOOD                                  = 0,
	VEGETABLE                                = 1,
	MUSHROOM                                 = 2,
	HERB                                     = 3,
	FRUIT                                    = 4,
	SEVENPUDDING                             = 5,
	MEAT                                     = 6,
	_MAX                                     = 7,
	ETresItemSubCategoryFoodStuff_MAX        = 8,
};

// Enum TresGame.ETresItemSubCategoryFood
// NumValues: 0x0007
enum class ETresItemSubCategoryFood : uint8
{
	SOUP                                     = 0,
	APPETIZER                                = 1,
	FISHDISH                                 = 2,
	MEETDISH                                 = 3,
	DESSERT                                  = 4,
	_MAX                                     = 5,
	ETresItemSubCategoryFood_MAX             = 6,
};

// Enum TresGame.ETresItemCategoryIcon
// NumValues: 0x0019
enum class ETresItemCategoryIcon : uint8
{
	NONE                                     = 0,
	WEAPON                                   = 1,
	WEAPON_D                                 = 2,
	WEAPON_G                                 = 3,
	WEAPON_F                                 = 4,
	BATTLEITEM                               = 5,
	CAMPITEM                                 = 6,
	PROTECTOR                                = 7,
	ACCESSORY                                = 8,
	FOODSTUFF                                = 9,
	KEYITEM                                  = 10,
	MATERIAL                                 = 11,
	MOGNET                                   = 12,
	FOOD                                     = 13,
	GUMI_BASE                                = 14,
	GUMI_DECO                                = 15,
	GUMI_MATERIAL                            = 16,
	GUMI_PATTERN                             = 17,
	GUMI_STICKER                             = 18,
	GUMI_SHIP_BP                             = 19,
	GUMI_SHIP_BP_PIECE                       = 20,
	GUMI_WEAPON_SP                           = 21,
	GUMI_TREASURE_MAP                        = 22,
	MAX                                      = 23,
	ETresItemCategoryIcon_MAX                = 24,
};

// Enum TresGame.ETresItemCategory
// NumValues: 0x0016
enum class ETresItemCategory : uint8
{
	CAT_NONE                                 = 0,
	BATTLEITEM                               = 1,
	CAMPITEM                                 = 2,
	WEAPON                                   = 3,
	PROTECTOR                                = 4,
	ACCESSORY                                = 5,
	FOOD                                     = 6,
	MATERIAL                                 = 7,
	FOODSTUFF                                = 8,
	KEYITEM                                  = 9,
	MOGNET                                   = 10,
	LSIGAME                                  = 11,
	NAVIMAP                                  = 12,
	REPORT                                   = 13,
	GUMI_PARTS                               = 14,
	GUMI_MATERIAL                            = 15,
	GUMI_PATTERN                             = 16,
	GUMI_STICKER                             = 17,
	GUMI_SHIP_BP                             = 18,
	GUMI_ETC                                 = 19,
	_CAT_MAX                                 = 20,
	ETresItemCategory_MAX                    = 21,
};

// Enum TresGame.ETresItemCollectRewardKind
// NumValues: 0x0004
enum class ETresItemCollectRewardKind : uint8
{
	TICR_GET_ITEM                            = 0,
	TICR_ENABLE_SYNTHESIS                    = 1,
	TICR_ENABLE_BUY                          = 2,
	TICR_MAX                                 = 3,
};

// Enum TresGame.ETresItemCollectCondition
// NumValues: 0x0006
enum class ETresItemCollectCondition : uint8
{
	TICC_MAT_KIND_NUM                        = 0,
	TICC_MAT_TOTAL_NUM                       = 1,
	TICC_MAT_KIND_ALL                        = 2,
	TICC_MAT_SPKIND_NUM                      = 3,
	TICC_MAT_GET_RANK                        = 4,
	TICC_MAT_MAX                             = 5,
};

// Enum TresGame.ETresItemSynthesisCondition
// NumValues: 0x0004
enum class ETresItemSynthesisCondition : uint8
{
	TISC_NONE                                = 0,
	TISC_COLLECT_LIST                        = 1,
	TISC_MOTIF_LIST                          = 2,
	TISC_MAX                                 = 3,
};

// Enum TresGame.ESqexCPPKHSWorldType
// NumValues: 0x0006
enum class ESqexCPPKHSWorldType : uint8
{
	SQEX_CPP_KHS_WORLD_DEFAULT               = 0,
	SQEX_CPP_KHS_WORLD_KH                    = 1,
	SQEX_CPP_KHS_WORLD_CG                    = 2,
	SQEX_CPP_KHS_WORLD_REAL                  = 3,
	SQEX_CPP_KHS_WORLD_POO                   = 4,
	SQEX_CPP_KHS_WORLD_MAX                   = 5,
};

// Enum TresGame.ETresLevelEntityRestartSequence
// NumValues: 0x0004
enum class ETresLevelEntityRestartSequence : uint8
{
	RESTART_ENTER_SEQUENCE                   = 0,
	RESTART_EXIT_SEQUENCE                    = 1,
	RESTART_BOTH_SEQUENCE                    = 2,
	RESTART_MAX                              = 3,
};

// Enum TresGame.ETresLevelEntitySequenceConditionDistanceSelector
// NumValues: 0x0003
enum class ETresLevelEntitySequenceConditionDistanceSelector : uint8
{
	ETresLevelEntitySequenceConditionDistanceSelector_Nearest = 0,
	ETresLevelEntitySequenceConditionDistanceSelector_Farthest = 1,
	ETresLevelEntitySequenceConditionDistanceSelector_MAX = 2,
};

// Enum TresGame.ETresLevelEntitySequenceConditionDistanceCompare
// NumValues: 0x0003
enum class ETresLevelEntitySequenceConditionDistanceCompare : uint8
{
	ETresLevelEntitySequenceConditionDistanceCompare_GraeterEqual = 0,
	ETresLevelEntitySequenceConditionDistanceCompare_LessEqual = 1,
	ETresLevelEntitySequenceConditionDistanceCompare_MAX = 2,
};

// Enum TresGame.ETresLevelEntitySequenceConditionBinOp
// NumValues: 0x0007
enum class ETresLevelEntitySequenceConditionBinOp : uint8
{
	ETresLevelEntitySequenceConditionBinOp_Less = 0,
	ETresLevelEntitySequenceConditionBinOp_Greater = 1,
	ETresLevelEntitySequenceConditionBinOp_LessEqual = 2,
	ETresLevelEntitySequenceConditionBinOp_GraeterEqual = 3,
	ETresLevelEntitySequenceConditionBinOp_EqualEqual = 4,
	ETresLevelEntitySequenceConditionBinOp_NotEqual = 5,
	ETresLevelEntitySequenceConditionBinOp_MAX = 6,
};

// Enum TresGame.ETresLevelLoadAndVisible
// NumValues: 0x0005
enum class ETresLevelLoadAndVisible : uint8
{
	None                                     = 0,
	LoadAndVisible                           = 1,
	LoadAndHidden                            = 2,
	Unload                                   = 3,
	ETresLevelLoadAndVisible_MAX             = 4,
};

// Enum TresGame.ETresLevelVisibility
// NumValues: 0x0005
enum class ETresLevelVisibility : uint8
{
	Default                                  = 0,
	Hidden                                   = 1,
	Hidden_Tick                              = 2,
	None                                     = 3,
	ETresLevelVisibility_MAX                 = 4,
};

// Enum TresGame.ETresLinkActorEx202Size
// NumValues: 0x0004
enum class ETresLinkActorEx202Size : uint8
{
	TRES_LINKACTOR_EX202_SIZE_25             = 0,
	TRES_LINKACTOR_EX202_SIZE_50             = 1,
	TRES_LINKACTOR_EX202_SIZE_75             = 2,
	TRES_LINKACTOR_EX202_SIZE_MAX            = 3,
};

// Enum TresGame.ETresNavLinkSegment_e_ex035_
// NumValues: 0x0003
enum class ETresNavLinkSegment_e_ex035_ : uint8
{
	NavLinkSegmentLeft_                      = 0,
	NavLinkSegmentRight_                     = 1,
	ETresNavLinkSegment_e_ex035__MAX         = 2,
};

// Enum TresGame.ETresLocomotionMode
// NumValues: 0x0003
enum class ETresLocomotionMode : uint8
{
	Forward                                  = 0,
	Omnidirectional                          = 1,
	ETresLocomotionMode_MAX                  = 2,
};

// Enum TresGame.ETresLSIBarnyardSportsMode
// NumValues: 0x0005
enum class ETresLSIBarnyardSportsMode : uint8
{
	The100m                                  = 0,
	Hurdle                                   = 1,
	Triplejump                               = 2,
	Multisports                              = 3,
	ETresLSIBarnyardSportsMode_MAX           = 4,
};

// Enum TresGame.ETresLSIHowtoPlayBaseballMode
// NumValues: 0x0005
enum class ETresLSIHowtoPlayBaseballMode : uint8
{
	The1Inning                               = 0,
	The3Inning                               = 1,
	The6Inning                               = 2,
	The9Inning                               = 3,
	ETresLSIHowtoPlayBaseballMode_MAX        = 4,
};

// Enum TresGame.ETresLSIHowtoPlayGolfMode
// NumValues: 0x0004
enum class ETresLSIHowtoPlayGolfMode : uint8
{
	The3HOLE                                 = 0,
	The9HOLE                                 = 1,
	The18HOLE                                = 2,
	ETresLSIHowtoPlayGolfMode_MAX            = 3,
};

// Enum TresGame.ETresLSIMusicFarmerMode
// NumValues: 0x0003
enum class ETresLSIMusicFarmerMode : uint8
{
	GAME_A                                   = 0,
	GAME_B                                   = 1,
	GAME_MAX                                 = 2,
};

// Enum TresGame.ETresMapSetObjType
// NumValues: 0x0003
enum class ETresMapSetObjType : uint8
{
	LevelPath                                = 0,
	StreamingVolume                          = 1,
	ETresMapSetObjType_MAX                   = 2,
};

// Enum TresGame.ETresMBCurveTrack
// NumValues: 0x000C
enum class ETresMBCurveTrack : uint8
{
	ETresMBCRVT_ScalingX                     = 0,
	ETresMBCRVT_ScalingY                     = 1,
	ETresMBCRVT_ScalingZ                     = 2,
	ETresMBCRVT_RotationX                    = 3,
	ETresMBCRVT_RotationY                    = 4,
	ETresMBCRVT_RotationZ                    = 5,
	ETresMBCRVT_TranslationX                 = 6,
	ETresMBCRVT_TranslationY                 = 7,
	ETresMBCRVT_TranslationZ                 = 8,
	ETresMBCRVT_Roll                         = 9,
	ETresMBCRVT_FieldOfView                  = 10,
	ETresMBCRVT_Max                          = 11,
};

// Enum TresGame.ETresMBCurveInterp
// NumValues: 0x0004
enum class ETresMBCurveInterp : uint8
{
	ETresMBCI_Constant                       = 0,
	ETresMBCI_Linear                         = 1,
	ETresMBCI_Cubic                          = 2,
	ETresMBCI_Max                            = 3,
};

// Enum TresGame.ETresMiRxHolySealType
// NumValues: 0x0004
enum class ETresMiRxHolySealType : uint8
{
	HOLY_SEAL_TYPE_NONE                      = 0,
	HOLY_SEAL_TYPE_SINGLE                    = 1,
	HOLY_SEAL_TYPE_FULL_FIRE                 = 2,
	HOLY_SEAL_TYPE_MAX                       = 3,
};

// Enum TresGame.ETresMiRxReplicaManagerStateKind
// NumValues: 0x0011
enum class ETresMiRxReplicaManagerStateKind : uint8
{
	STATE_KIND_IDLE                          = 0,
	STATE_KIND_LASER_OMEN                    = 1,
	STATE_KIND_SINGLE_LASER                  = 2,
	STATE_KIND_FULL_FIRE_LASER               = 3,
	STATE_KIND_WARP_ATTACK                   = 4,
	STATE_KIND_WARP_ATTACK_TWICE             = 5,
	STATE_KIND_WARP_ATTACK_THREE_TIMES       = 6,
	STATE_KIND_SLASER_AND_WARPATTACK_1       = 7,
	STATE_KIND_SLASER_AND_WARPATTACK_2       = 8,
	STATE_KIND_SLASER_AND_WARPATTACK_3       = 9,
	STATE_KIND_WARPATTACK_1_AND_SLASER       = 10,
	STATE_KIND_WARPATTACK_2_AND_SLASER       = 11,
	STATE_KIND_WARPATTACK_3_AND_SLASER       = 12,
	STATE_KIND_SIMULTANEOUT_WARPATTACK       = 13,
	STATE_KIND_WAIT                          = 14,
	STATE_KIND_WAIT_CHANGE_IDLE              = 15,
	STATE_KIND_MAX                           = 16,
};

// Enum TresGame.ETresGoalType_e_ex042_Hook
// NumValues: 0x0003
enum class ETresGoalType_e_ex042_Hook : uint8
{
	Destination                              = 0,
	Target                                   = 1,
	ETresGoalType_e_ex042_Hook_MAX           = 2,
};

// Enum TresGame.EEX731_DashEffectType
// NumValues: 0x0003
enum class EEX731_DashEffectType : uint8
{
	EEX731_DashEffectType_Loop               = 0,
	EEX731_DashEffectType_End                = 1,
	EEX731_DashEffectType_Max                = 2,
};

// Enum TresGame.ETresFNpcAIAttackFlowWaitPhase
// NumValues: 0x0003
enum class ETresFNpcAIAttackFlowWaitPhase : uint8
{
	FNPC_AI_ATK_FLOW_WAIT_PHASE_0            = 0,
	FNPC_AI_ATK_FLOW_WAIT_PHASE_1            = 1,
	FNPC_AI_ATK_FLOW_WAIT_PHASE_MAX          = 2,
};

// Enum TresGame.ETresFNPC_AI_LeadFinish
// NumValues: 0x0004
enum class ETresFNPC_AI_LeadFinish : uint8
{
	TRES_FNPC_AI_LEAD_FINISH_ALL_UP          = 0,
	TRES_FNPC_AI_LEAD_FINISH_GOAL            = 1,
	TRES_FNPC_AI_LEAD_FINISH_GOAL_TURN       = 2,
	TRES_FNPC_AI_LEAD_FINISH_MAX             = 3,
};

// Enum TresGame.ETresFNPC_AI_LeadGoalWaitRelease
// NumValues: 0x0004
enum class ETresFNPC_AI_LeadGoalWaitRelease : uint8
{
	TRES_FNPC_AI_LEAD_GOAL_WAIT_R_DIST       = 0,
	TRES_FNPC_AI_LEAD_GOAL_WAIT_R_TIME       = 1,
	TRES_FNPC_AI_LEAD_GOAL_WAIT_R_MANUAL     = 2,
	TRES_FNPC_AI_LEAD_GOAL_WAIT_R_MAX        = 3,
};

// Enum TresGame.ETresFNPC_AI_LeadGoalAction
// NumValues: 0x0005
enum class ETresFNPC_AI_LeadGoalAction : uint8
{
	TRES_FNPC_AI_LEAD_GOAL_WAIT              = 0,
	TRES_FNPC_AI_LEAD_GOAL_TALK              = 1,
	TRES_FNPC_AI_LEAD_GOAL_FREE_WALK         = 2,
	TRES_FNPC_AI_LEAD_GOAL_FREE_WALK_TALK    = 3,
	TRES_FNPC_AI_LEAD_GOAL_MAX               = 4,
};

// Enum TresGame.ETresFNPC_AI_LeadMoveType
// NumValues: 0x0003
enum class ETresFNPC_AI_LeadMoveType : uint8
{
	TRES_FNPC_AI_LEAD_MOVE_RUN               = 0,
	TRES_FNPC_AI_LEAD_MOVE_WALK              = 1,
	TRES_FNPC_AI_LEAD_MOVE_MAX               = 2,
};

// Enum TresGame.ETresFNPC_AI_LeadMode
// NumValues: 0x0004
enum class ETresFNPC_AI_LeadMode : uint8
{
	TRES_FNPC_AI_LEAD_MODE_LEAD              = 0,
	TRES_FNPC_AI_LEAD_MODE_LEAD_POINT        = 1,
	TRES_FNPC_AI_LEAD_MODE_ROUTE             = 2,
	TRES_FNPC_AI_LEAD_MODE_MAX               = 3,
};

// Enum TresGame.ETresFNpcAINpcMode
// NumValues: 0x0006
enum class ETresFNpcAINpcMode : uint8
{
	TRES_FNPC_AI_NPC_MODE_NONE               = 0,
	TRES_FNPC_AI_NPC_MODE_WAIT               = 1,
	TRES_FNPC_AI_NPC_MODE_TALK               = 2,
	TRES_FNPC_AI_NPC_MODE_FREE_WALK          = 3,
	TRES_FNPC_AI_NPC_MODE_FREE_WALK_TALK     = 4,
	TRES_FNPC_AI_NPC_MODE_MAX                = 5,
};

// Enum TresGame.ETresNpcGimmickTargetKind
// NumValues: 0x0005
enum class ETresNpcGimmickTargetKind : uint8
{
	TRES_NPC_GTK_RAND                        = 0,
	TRES_NPC_GTK_NEAR                        = 1,
	TRES_NPC_GTK_PLAYER_NEAR                 = 2,
	TRES_NPC_GTK_TIME                        = 3,
	TRES_NPC_GTK_MAX                         = 4,
};

// Enum TresGame.ETresFNpcAICombiRole
// NumValues: 0x0004
enum class ETresFNpcAICombiRole : uint8
{
	COMBI_ROLE_NONE                          = 0,
	COMBI_ROLE_MAIN                          = 1,
	COMBI_ROLE_PARTNER                       = 2,
	COMBI_ROLE_MAX                           = 3,
};

// Enum TresGame.ETresFNpcAICombiState
// NumValues: 0x0005
enum class ETresFNpcAICombiState : uint8
{
	STATE_COMBI_DISABLE                      = 0,
	STATE_COMBI_ENABLE                       = 1,
	STATE_COMBI_STANDBY                      = 2,
	STATE_COMBI_EXECUTE                      = 3,
	STATE_COMBI_MAX                          = 4,
};

// Enum TresGame.ETresFNpcAICombiID
// NumValues: 0x0003
enum class ETresFNpcAICombiID : uint8
{
	TRES_FNPC_AI_COMBI_NONE                  = 0,
	TRES_FNPC_AI_COMBI_MI201_EX001           = 1,
	TRES_FNPC_AI_COMBI_MAX                   = 2,
};

// Enum TresGame.ETresFNPCMat
// NumValues: 0x0003
enum class ETresFNPCMat : uint8
{
	TRES_FNPC_MAT_NORMAL                     = 0,
	TRES_FNPC_MAT_SCRIBBLE                   = 1,
	TRES_FNPC_MAT_MAX                        = 2,
};

// Enum TresGame.ETresNpcUseItemType
// NumValues: 0x0004
enum class ETresNpcUseItemType : uint8
{
	TRES_NPC_USE_ITEM_NONE                   = 0,
	TRES_NPC_USE_ITEM_HP                     = 1,
	TRES_NPC_USE_ITEM_MP                     = 2,
	TRES_NPC_USE_ITEM_MAX                    = 3,
};

// Enum TresGame.ETresNpcActionOnType
// NumValues: 0x000E
enum class ETresNpcActionOnType : uint8
{
	TRES_NPC_AOT_NONE                        = 0,
	TRES_NPC_AOT_APPEAL                      = 1,
	TRES_NPC_AOT_COMICAL_BTL                 = 2,
	TRES_NPC_AOT_ACTION_POINT_MOVE           = 3,
	TRES_NPC_AOT_ACTION_POINT_ARRIVAL        = 4,
	TRES_NPC_AOT_TALK_POINT_MOVE             = 5,
	TRES_NPC_AOT_TALK_POINT_WAIT             = 6,
	TRES_NPC_AOT_SNOWCOVERSWING_WAIT         = 7,
	TRES_NPC_AOT_GIMMICK_WAIT                = 8,
	TRES_NPC_AOT_MOTION_PLAY                 = 9,
	TRES_NPC_AOT_HAIR_ACTION                 = 10,
	TRES_NPC_AOT_HAIR_ACTION_END             = 11,
	TRES_NPC_AOT_PRECEDE_MOVEMENT            = 12,
	TRES_NPC_AOT_MAX                         = 13,
};

// Enum TresGame.ETresNpcSmartphoneCameraState
// NumValues: 0x0004
enum class ETresNpcSmartphoneCameraState : uint8
{
	TRES_NPC_SMARTPHONE_CAM_STATE_STANDBY    = 0,
	TRES_NPC_SMARTPHONE_CAM_STATE_READY      = 1,
	TRES_NPC_SMARTPHONE_CAM_STATE_EXECUT     = 2,
	TRES_NPC_SMARTPHONE_CAM_STATE_MAX        = 3,
};

// Enum TresGame.EHologramWorldInitParamValueType
// NumValues: 0x0005
enum class EHologramWorldInitParamValueType : uint8
{
	Float                                    = 0,
	Vector                                   = 1,
	Color                                    = 2,
	Max                                      = 3,
	EHologramWorldInitParamValueType_MAX     = 4,
};

// Enum TresGame.EHologramActorCategory
// NumValues: 0x0011
enum class EHologramActorCategory : uint8
{
	SORA                                     = 0,
	SORA_KH2                                 = 1,
	LIGHT                                    = 2,
	DARK                                     = 3,
	FRIEND                                   = 4,
	ENEMY                                    = 5,
	OBJ_SPIRIT                               = 6,
	OBJ_GUMIENEMY                            = 7,
	OBJ_GUMIPARTS                            = 8,
	OBJ_EFFECT                               = 9,
	OBJ_OTHERS                               = 10,
	PHOTOGRAPH_ASSIST                        = 11,
	PHOTOGRAPH_ASSIST_LIGHT                  = 12,
	EFF_CAMATTACH                            = 13,
	EFF_FILTER                               = 14,
	MAX                                      = 15,
	EHologramActorCategory_MAX               = 16,
};

// Enum TresGame.ETresSevenPrincessType
// NumValues: 0x000E
enum class ETresSevenPrincessType : uint8
{
	EX_Donald                                = 0,
	EX_Goofy                                 = 1,
	HE_Hercules                              = 2,
	TS_Woody                                 = 3,
	TS_Buzz                                  = 4,
	RA_Rapunzel                              = 5,
	RA_Flynn                                 = 6,
	FZ_Marshmallow                           = 7,
	MI_Sulley                                = 8,
	MI_Mike                                  = 9,
	CA_Jack                                  = 10,
	BX_Baymax                                = 11,
	MAX                                      = 12,
	ETresSevenPrincessType_MAX               = 13,
};

// Enum TresGame.ETresDetectCollShape2D
// NumValues: 0x0005
enum class ETresDetectCollShape2D : uint8
{
	CIRCLE                                   = 0,
	RECTANGLE                                = 1,
	POINT                                    = 2,
	MAX                                      = 3,
	ETresDetectCollShape2D_MAX               = 4,
};

// Enum TresGame.ETresOneActionType
// NumValues: 0x0005
enum class ETresOneActionType : uint8
{
	DEFAULT                                  = 0,
	SPECIAL_PERFORM                          = 1,
	IMPRESSION_BIRD                          = 2,
	MAX                                      = 3,
	ETresOneActionType_MAX                   = 4,
};

// Enum TresGame.PRIZE_KIND
// NumValues: 0x0012
enum class EPRIZE_KIND : uint8
{
	PRIZE_KIND_HpPrizeS                      = 0,
	PRIZE_KIND_HpPrizeL                      = 1,
	PRIZE_KIND_MpPrizeS                      = 2,
	PRIZE_KIND_MpPrizeL                      = 3,
	PRIZE_KIND_MunnyPrizeS                   = 4,
	PRIZE_KIND_MunnyPrizeM                   = 5,
	PRIZE_KIND_MunnyPrizeL                   = 6,
	PRIZE_KIND_FocusPrizeS                   = 7,
	PRIZE_KIND_FocusPrizeL                   = 8,
	PRIZE_KIND_CrabPrize                     = 9,
	PRIZE_KIND_MovableCrabPrize              = 10,
	PRIZE_KIND_LightPrizeS                   = 11,
	PRIZE_KIND_LightPrizeL                   = 12,
	PRIZE_KIND_HealPrizeBox                  = 13,
	PRIZE_KIND_MatePrizeBox                  = 14,
	PRIZE_KIND_FstfPrizeBox                  = 15,
	PRIZE_KIND_RarePrizeBox                  = 16,
	PRIZE_KIND_MAX                           = 17,
};

// Enum TresGame.ETresClaymoreState_e_ex306
// NumValues: 0x0005
enum class ETresClaymoreState_e_ex306 : uint8
{
	ETresClaymoreState_e_ex306_Appear        = 0,
	ETresClaymoreState_e_ex306_Idle          = 1,
	ETresClaymoreState_e_ex306_SwingDown     = 2,
	ETresClaymoreState_e_ex306_Free          = 3,
	ETresClaymoreState_e_ex306_MAX           = 4,
};

// Enum TresGame.ETres_e_ex352_DarkMineKind
// NumValues: 0x0003
enum class ETres_e_ex352_DarkMineKind : uint8
{
	DarkMineKind_Release                     = 0,
	DarkMineKind_Surround                    = 1,
	DarkMineKind_MAX                         = 2,
};

// Enum TresGame.ETres_e_ex352_LightBulbKind
// NumValues: 0x0004
enum class ETres_e_ex352_LightBulbKind : uint8
{
	LightBulbKind_Homing                     = 0,
	LightBulbKind_Rotation                   = 1,
	LightBulbKind_Scattering                 = 2,
	LightBulbKind_MAX                        = 3,
};

// Enum TresGame.ETresClaymoreState_e_ex355
// NumValues: 0x0005
enum class ETresClaymoreState_e_ex355 : uint8
{
	ETresClaymoreState_e_ex355_Appear        = 0,
	ETresClaymoreState_e_ex355_Idle          = 1,
	ETresClaymoreState_e_ex355_SwingDown     = 2,
	ETresClaymoreState_e_ex355_Free          = 3,
	ETresClaymoreState_e_ex355_MAX           = 4,
};

// Enum TresGame.EEX355_ClaymoreRoamCenterType
// NumValues: 0x0004
enum class EEX355_ClaymoreRoamCenterType : uint8
{
	EEX355_ClaymoreRoamCenterType_Owner      = 0,
	EEX355_ClaymoreRoamCenterType_Target     = 1,
	EEX355_ClaymoreRoamCenterType_Map        = 2,
	EEX355_ClaymoreRoamCenterType_Max        = 3,
};

// Enum TresGame.EEX359_SpawnDirType
// NumValues: 0x0006
enum class EEX359_SpawnDirType : uint8
{
	EEX359_SpawnDirType_Self                 = 0,
	EEX359_SpawnDirType_Target               = 1,
	EEX359_SpawnDirType_ToTarget             = 2,
	EEX359_SpawnDirType_Camera               = 3,
	EEX359_SpawnDirType_ProjToTarget         = 4,
	EEX359_SpawnDirType_Max                  = 5,
};

// Enum TresGame.EEX359_SpawnLocType
// NumValues: 0x0004
enum class EEX359_SpawnLocType : uint8
{
	EEX359_SpawnLocType_Self                 = 0,
	EEX359_SpawnLocType_Target               = 1,
	EEX359_SpawnLocType_Owner                = 2,
	EEX359_SpawnLocType_Max                  = 3,
};

// Enum TresGame.ETresEnemyEEX771_FLARE_SHOT_SPAWN_TYPE
// NumValues: 0x0004
enum class ETresEnemyEEX771_FLARE_SHOT_SPAWN_TYPE : uint8
{
	SPAWN_TYPE_LR                            = 0,
	SPAWN_TYPE_L                             = 1,
	SPAWN_TYPE_R                             = 2,
	SPAWN_TYPE_MAX                           = 3,
};

// Enum TresGame.ETresEnemyEEX773_FLARE_SHOT_SPAWN_TYPE
// NumValues: 0x0004
enum class ETresEnemyEEX773_FLARE_SHOT_SPAWN_TYPE : uint8
{
	SPAWN_TYPE_LR                            = 0,
	SPAWN_TYPE_L                             = 1,
	SPAWN_TYPE_R                             = 2,
	SPAWN_TYPE_MAX                           = 3,
};

// Enum TresGame.ETresPuddingResultRank
// NumValues: 0x0004
enum class ETresPuddingResultRank : uint8
{
	RANK_A                                   = 0,
	RANK_B                                   = 1,
	RANK_C                                   = 2,
	RANK_MAX                                 = 3,
};

// Enum TresGame.ETresPuddingTaskType
// NumValues: 0x0009
enum class ETresPuddingTaskType : uint8
{
	NONE                                     = 0,
	HE                                       = 1,
	BX                                       = 2,
	CA                                       = 3,
	TS                                       = 4,
	MI                                       = 5,
	FZ                                       = 6,
	RA                                       = 7,
	ETresPuddingTaskType_MAX                 = 8,
};

// Enum TresGame.CuttingMainState
// NumValues: 0x000B
enum class ECuttingMainState : uint8
{
	None                                     = 0,
	Prepare                                  = 1,
	Sloping                                  = 2,
	SubSloping                               = 3,
	Calculate                                = 4,
	PrepareReload                            = 5,
	CommandReload                            = 6,
	StickOnlyReload                          = 7,
	WaitReload                               = 8,
	ResultWait                               = 9,
	CuttingMainState_MAX                     = 10,
};

// Enum TresGame.CuttingReloadType
// NumValues: 0x0003
enum class ECuttingReloadType : uint8
{
	Command                                  = 0,
	StickOnly                                = 1,
	CuttingReloadType_MAX                    = 2,
};

// Enum TresGame.EggCrackingV2MainState
// NumValues: 0x0007
enum class EggCrackingV2MainState : uint8
{
	None                                     = 0,
	CrackPrepare                             = 1,
	CrackSloping                             = 2,
	PullPrepare                              = 3,
	PullSloping                              = 4,
	Finished                                 = 5,
	EggCrackingV2MainState_MAX               = 6,
};

// Enum TresGame.EggCrackingV2AnimationType
// NumValues: 0x0003
enum class EggCrackingV2AnimationType : uint8
{
	TypeA                                    = 0,
	TypeB                                    = 1,
	EggCrackingV2AnimationType_MAX           = 2,
};

// Enum TresGame.EggCrackingV2MaterialAmountIncreaseType
// NumValues: 0x0005
enum class EggCrackingV2MaterialAmountIncreaseType : uint8
{
	TypeA                                    = 0,
	TypeB                                    = 1,
	TypeC                                    = 2,
	TypeD                                    = 3,
	EggCrackingV2MaterialAmountIncreaseType_MAX = 4,
};

// Enum TresGame.SprinklePepperMainState
// NumValues: 0x0006
enum class ESprinklePepperMainState : uint8
{
	None                                     = 0,
	Prepare                                  = 1,
	Sloping                                  = 2,
	Calculate                                = 3,
	Finish                                   = 4,
	SprinklePepperMainState_MAX              = 5,
};

// Enum TresGame.SprinklePepperV2InputJudgementType
// NumValues: 0x0004
enum class ESprinklePepperV2InputJudgementType : uint8
{
	TypeA                                    = 0,
	TypeB                                    = 1,
	TypeC                                    = 2,
	SprinklePepperV2InputJudgementType_MAX   = 3,
};

// Enum TresGame.SprinklePepperV2InputType
// NumValues: 0x0006
enum class ESprinklePepperV2InputType : uint8
{
	InputTypeNone                            = 0,
	InputTypeA                               = 1,
	InputTypeB                               = 2,
	InputTypeC                               = 3,
	InputTypeD                               = 4,
	SprinklePepperV2InputType_MAX            = 5,
};

// Enum TresGame.SprinklePepperV2InputTimingEvalution
// NumValues: 0x0006
enum class ESprinklePepperV2InputTimingEvalution : uint8
{
	InputTimingEvalutionNone                 = 0,
	InputTimingEvalutionTooFast              = 1,
	InputTimingEvalutionSuccess              = 2,
	InputTimingEvalutionGreatSuccess         = 3,
	InputTimingEvalutionTooSlow              = 4,
	SprinklePepperV2InputTimingEvalution_MAX = 5,
};

// Enum TresGame.SprinklePepperV2MainState
// NumValues: 0x000E
enum class ESprinklePepperV2MainState : uint8
{
	None                                     = 0,
	TypeABPrepare                            = 1,
	TypeABSloping                            = 2,
	TypeABCalculate                          = 3,
	TypeCDPrepare                            = 4,
	TypeCDSloping                            = 5,
	TypeCDCalculate                          = 6,
	WaitThrowAnimation                       = 7,
	WaitAnimation                            = 8,
	TypeABWaitStickNeutral                   = 9,
	TypeCDWaitStickNeutral                   = 10,
	GameEndWaitThrowAnimation                = 11,
	GameEnd                                  = 12,
	SprinklePepperV2MainState_MAX            = 13,
};

// Enum TresGame.RemyFPSMode
// NumValues: 0x0004
enum class ERemyFPSMode : uint8
{
	FPS_Config                               = 0,
	FPS_30                                   = 1,
	FPS_60                                   = 2,
	FPS_MAX                                  = 3,
};

// Enum TresGame.RemyDishLevel
// NumValues: 0x0006
enum class ERemyDishLevel : uint8
{
	RemyDishLevel1                           = 0,
	RemyDishLevel2                           = 1,
	RemyDishLevel3                           = 2,
	RemyDishLevel4                           = 3,
	RemyDishLevel5                           = 4,
	RemyDishLevel_MAX                        = 5,
};

// Enum TresGame.RemyKitchenGrade
// NumValues: 0x0005
enum class ERemyKitchenGrade : uint8
{
	RemyKitchenGrade1                        = 0,
	RemyKitchenGrade2                        = 1,
	RemyKitchenGrade3                        = 2,
	RemyKitchenGrade4                        = 3,
	RemyKitchenGrade_MAX                     = 4,
};

// Enum TresGame.RemyMilestone
// NumValues: 0x0005
enum class ERemyMilestone : uint8
{
	RemyMilestone0                           = 0,
	RemyMilestone1                           = 1,
	RemyMilestone2                           = 2,
	RemyMilestone3                           = 3,
	RemyMilestone_MAX                        = 4,
};

// Enum TresGame.RemyRestaurantRank
// NumValues: 0x0007
enum class ERemyRestaurantRank : uint8
{
	RemyRestaurantRank0                      = 0,
	RemyRestaurantRank1                      = 1,
	RemyRestaurantRank2                      = 2,
	RemyRestaurantRank3                      = 3,
	RemyRestaurantRank4                      = 4,
	RemyRestaurantRank5                      = 5,
	RemyRestaurantRank_MAX                   = 6,
};

// Enum TresGame.RemyShowFinishOperationUITiming
// NumValues: 0x0004
enum class ERemyShowFinishOperationUITiming : uint8
{
	None                                     = 0,
	HaveMaterial                             = 1,
	OnSuccess                                = 2,
	RemyShowFinishOperationUITiming_MAX      = 3,
};

// Enum TresGame.RemyStickControlType
// NumValues: 0x0003
enum class ERemyStickControlType : uint8
{
	SoraViewpoint                            = 0,
	UserViewpoint                            = 1,
	RemyStickControlType_MAX                 = 2,
};

// Enum TresGame.RemyCookingCommand
// NumValues: 0x0005
enum class ERemyCookingCommand : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	RemyCookingCommand_MAX                   = 4,
};

// Enum TresGame.RemySprinklePepperContentsType
// NumValues: 0x0008
enum class ERemySprinklePepperContentsType : uint8
{
	RemySprinklePepperContentsA              = 0,
	RemySprinklePepperContentsB              = 1,
	RemySprinklePepperContentsC              = 2,
	RemySprinklePepperContentsD              = 3,
	RemySprinklePepperContentsE              = 4,
	RemySprinklePepperContentsF              = 5,
	RemySprinklePepperContentsG              = 6,
	RemySprinklePepperContentsType_MAX       = 7,
};

// Enum TresGame.RemySprinklePepperEquipmentType
// NumValues: 0x0005
enum class ERemySprinklePepperEquipmentType : uint8
{
	RemySprinklePepperNone                   = 0,
	RemySprinklePepperSaucepan               = 1,
	RemySprinklePepperPan                    = 2,
	RemySprinklePepperBowl                   = 3,
	RemySprinklePepperEquipmentType_MAX      = 4,
};

// Enum TresGame.RemyCuttingFoodType
// NumValues: 0x0007
enum class ERemyCuttingFoodType : uint8
{
	RemyCuttingOnion                         = 0,
	RemyCuttingZucchini                      = 1,
	RemyCuttingMushroom                      = 2,
	RemyCuttingApple                         = 3,
	RemyCuttingTomato                        = 4,
	RemyCuttingPear                          = 5,
	RemyCuttingFoodType_MAX                  = 6,
};

// Enum TresGame.RemyFlambeFoodType
// NumValues: 0x0008
enum class ERemyFlambeFoodType : uint8
{
	RemyFlambeCrab                           = 0,
	RemyFlambeScallops                       = 1,
	RemyFlambeEel                            = 2,
	RemyFlambeSweetbread                     = 3,
	RemyFlambeCrepe                          = 4,
	RemyFlambeSeaperch                       = 5,
	RemyFlambeFilletMeat                     = 6,
	RemyFlambeFoodType_MAX                   = 7,
};

// Enum TresGame.RemyCameraWorkTiming
// NumValues: 0x0037
enum class ERemyCameraWorkTiming : uint8
{
	RemyCameraFirstPlay                      = 0,
	RemyCameraGetReward1stMilestone          = 1,
	RemyCameraGetReward2ndMilestone          = 2,
	RemyCameraMenu                           = 3,
	FlambeCameraCountDown                    = 4,
	FlambeCameraStart                        = 5,
	FlambeCameraFlambe                       = 6,
	FlambeCameraNothingFlambe                = 7,
	FlambeCameraSuccessFire                  = 8,
	FlambeCameraGreatSuccessFire             = 9,
	FlambeCameraTooManyFire                  = 10,
	FlambeCameraTooLittleFire                = 11,
	FlambeCameraTimeOutThrowPan              = 12,
	FlambeCameraSuccess                      = 13,
	FlambeCameraGreatSuccess                 = 14,
	FlambeCameraTimeOut                      = 15,
	FlambeCameraTooMany                      = 16,
	FlambeCameraTooLittle                    = 17,
	FlambeCameraNothing                      = 18,
	FlambeCameraRetry                        = 19,
	FlambeCameraReturnToMenu                 = 20,
	CuttingCameraCountDown                   = 21,
	CuttingCameraStart                       = 22,
	CuttingCameraSuccess                     = 23,
	CuttingCameraGreatSuccess                = 24,
	CuttingCameraFail                        = 25,
	CuttingCameraResultSuccess               = 26,
	CuttingCameraResultGreatSuccess          = 27,
	CuttingCameraResultFail                  = 28,
	CuttingCameraRetry                       = 29,
	CuttingCameraReturnToMenu                = 30,
	EggCrackingCameraCountDown               = 31,
	EggCrackingCameraStart                   = 32,
	EggCrackingCameraGreatSuccessBowl        = 33,
	EggCrackingCameraFail                    = 34,
	EggCrackingCameraSuccess                 = 35,
	EggCrackingCameraGreatSuccess            = 36,
	EggCrackingCameraTooMany                 = 37,
	EggCrackingCameraTimeOut                 = 38,
	EggCrackingCameraResultSuccess           = 39,
	EggCrackingCameraResultGreatSuccess      = 40,
	EggCrackingCameraResultFail              = 41,
	EggCrackingCameraRetry                   = 42,
	EggCrackingCameraReturnToMenu            = 43,
	SprinklePepperCameraCountDown            = 44,
	SprinklePepperCameraStart                = 45,
	SprinklePepperCameraSuccess              = 46,
	SprinklePepperCameraGreatSuccess         = 47,
	SprinklePepperCameraFail                 = 48,
	SprinklePepperCameraResultSuccess        = 49,
	SprinklePepperCameraResultGreatSuccess   = 50,
	SprinklePepperCameraResultFail           = 51,
	SprinklePepperCameraRetry                = 52,
	SprinklePepperCameraReturnToMenu         = 53,
	RemyCameraWorkTiming_MAX                 = 54,
};

// Enum TresGame.RemyResultAnimationType
// NumValues: 0x0007
enum class ERemyResultAnimationType : uint8
{
	RemyResultAnimSuccess                    = 0,
	RemyResultAnimSuccessLoop                = 1,
	RemyResultAnimGreatSuccess               = 2,
	RemyResultAnimGreatSuccessLoop           = 3,
	RemyResultAnimFail                       = 4,
	RemyResultAnimFailLoop                   = 5,
	RemyResultAnimationType_MAX              = 6,
};

// Enum TresGame.RemyAnimationType
// NumValues: 0x002D
enum class ERemyAnimationType : uint8
{
	FlambeIdle                               = 0,
	FlambeTakeProp                           = 1,
	FlambeReadyIdle                          = 2,
	FlambeTiltBottle                         = 3,
	FlambeTurnBottleLoop                     = 4,
	FlambeTooMany                            = 5,
	FlambeTimeOut                            = 6,
	FlambeSuccess                            = 7,
	FlambeGreatSuccess                       = 8,
	FlambeFail                               = 9,
	CuttingIdle                              = 10,
	CuttingTakeProp                          = 11,
	CuttingReadyIdle                         = 12,
	CuttingCut                               = 13,
	CuttingReload                            = 14,
	CuttingSuccess                           = 15,
	CuttingGreatSuccess                      = 16,
	CuttingFail                              = 17,
	EggCrackingIdle                          = 18,
	EggCrackingTakeProp                      = 19,
	EggCrackingReadyIdle                     = 20,
	EggCrackingTooMany                       = 21,
	EggCrackingTimeOut                       = 22,
	EggCrackingSuccess                       = 23,
	EggCrackingGreatSuccess                  = 24,
	EggCrackingFail                          = 25,
	SprinklePepperIdle                       = 26,
	SprinklePepperTakeProp                   = 27,
	SprinklePepperReadyIdle                  = 28,
	SprinklePepperFirstThrow                 = 29,
	SprinklePepperLeftHandThrow              = 30,
	SprinklePepperRightHandThrow             = 31,
	SprinklePepperLeftHandMiss               = 32,
	SprinklePepperRightHandMiss              = 33,
	SprinklePepperLeftHandCatchFail          = 34,
	SprinklePepperRightHandCatchFail         = 35,
	SprinklePepperLeftHandSprinkleFail       = 36,
	SprinklePepperRightHandSprinkleFail      = 37,
	SprinklePepperLeftHandCatchSuccess       = 38,
	SprinklePepperRightHandCatchSuccess      = 39,
	SprinklePepperLeftHandSprinkleSuccess    = 40,
	SprinklePepperRightHandSprinkleSuccess   = 41,
	SprinklePepperLeftHandSprinkleGreatSuccess = 42,
	SprinklePepperRightHandSprinkleGreatSuccess = 43,
	RemyAnimationType_MAX                    = 44,
};

// Enum TresGame.RemyCookingEvaluationResult
// NumValues: 0x0009
enum class ERemyCookingEvaluationResult : uint8
{
	RemyCookingResultNothing                 = 0,
	RemyCookingResultTooLittle               = 1,
	RemyCookingResultSuccess                 = 2,
	RemyCookingResultGreatSuccess            = 3,
	RemyCookingResultTooMany                 = 4,
	RemyCookingResultTimeOut                 = 5,
	RemyCookingResultTooFast                 = 6,
	RemyCookingResultTooSlow                 = 7,
	RemyCookingEvaluationResult_MAX          = 8,
};

// Enum TresGame.RemyCookingEvalution
// NumValues: 0x0008
enum class ERemyCookingEvalution : uint8
{
	RemyCookingEvalutionNothing              = 0,
	RemyCookingEvalutionTooLittle            = 1,
	RemyCookingEvalutionSuccess              = 2,
	RemyCookingEvalutionGreatSuccess         = 3,
	RemyCookingEvalutionTooMany              = 4,
	RemyCookingEvalutionTooFast              = 5,
	RemyCookingEvalutionTooSlow              = 6,
	RemyCookingEvalution_MAX                 = 7,
};

// Enum TresGame.RemyCookingGameState
// NumValues: 0x000A
enum class ERemyCookingGameState : uint8
{
	RemyCookingPrepare                       = 0,
	RemyCookingTitle                         = 1,
	RemyCookingTutorial                      = 2,
	RemyCookingCountDown                     = 3,
	RemyCookingMain                          = 4,
	RemyCookingResult                        = 5,
	RemyCookingPerformance                   = 6,
	RemyCookingEnd                           = 7,
	RemyCookingRetry                         = 8,
	RemyCookingGameState_MAX                 = 9,
};

// Enum TresGame.RemyGameState
// NumValues: 0x000A
enum class ERemyGameState : uint8
{
	RemyPrepare                              = 0,
	RemyFirstPlay                            = 1,
	RemyMenu                                 = 2,
	RemyMain                                 = 3,
	RemyCircumductionReward                  = 4,
	RemyRankup                               = 5,
	RemyMilestoneReward                      = 6,
	RemyRetry                                = 7,
	RemyFinalize                             = 8,
	RemyGameState_MAX                        = 9,
};

// Enum TresGame.RemyCookingGameType
// NumValues: 0x0009
enum class ERemyCookingGameType : uint8
{
	Flambe                                   = 0,
	EggCracking                              = 1,
	SprinklePepper                           = 2,
	Cutting                                  = 3,
	FlambeV2                                 = 4,
	EggCrackingV2                            = 5,
	SprinklePepperV2                         = 6,
	RemyCookingGameTypeNum                   = 7,
	RemyCookingGameType_MAX                  = 8,
};

// Enum TresGame.RemyRecipeType
// NumValues: 0x001F
enum class ERemyRecipeType : uint8
{
	NOTHING                                  = 0,
	Recipe01                                 = 1,
	Recipe02                                 = 2,
	Recipe03                                 = 3,
	Recipe04                                 = 4,
	Recipe05                                 = 5,
	Recipe06                                 = 6,
	Recipe07                                 = 7,
	Recipe08                                 = 8,
	Recipe09                                 = 9,
	Recipe10                                 = 10,
	Recipe11                                 = 11,
	Recipe12                                 = 12,
	Recipe13                                 = 13,
	Recipe14                                 = 14,
	Recipe15                                 = 15,
	Recipe16                                 = 16,
	Recipe17                                 = 17,
	Recipe18                                 = 18,
	Recipe19                                 = 19,
	Recipe20                                 = 20,
	Recipe21                                 = 21,
	Recipe22                                 = 22,
	Recipe23                                 = 23,
	Recipe24                                 = 24,
	Recipe25                                 = 25,
	Recipe26                                 = 26,
	Recipe27                                 = 27,
	Recipe28                                 = 28,
	MAX                                      = 29,
	RemyRecipeType_MAX                       = 30,
};

// Enum TresGame.RemyMenuType
// NumValues: 0x0003
enum class ERemyMenuType : uint8
{
	Normal                                   = 0,
	Special                                  = 1,
	RemyMenuType_MAX                         = 2,
};

// Enum TresGame.RemyDishCategory
// NumValues: 0x0007
enum class ERemyDishCategory : uint8
{
	Appetizer                                = 0,
	Soup                                     = 1,
	Fish                                     = 2,
	Meat                                     = 3,
	Dessert                                  = 4,
	RemyDishCategoryNum                      = 5,
	RemyDishCategory_MAX                     = 6,
};

// Enum TresGame.RemyAccessMethod
// NumValues: 0x0005
enum class ERemyAccessMethod : uint8
{
	None                                     = 0,
	FromEntrance                             = 1,
	FromSaveMenu                             = 2,
	FromWorldMap                             = 3,
	RemyAccessMethod_MAX                     = 4,
};

// Enum TresGame.ETresShopChrID
// NumValues: 0x0006
enum class ETresShopChrID : uint8
{
	MOOGLE                                   = 0,
	HUEY                                     = 1,
	DEWEY                                    = 2,
	LOUIE                                    = 3,
	_MAX                                     = 4,
	ETresShopChrID_MAX                       = 5,
};

// Enum TresGame.ETresShopID
// NumValues: 0x0026
enum class ETresShopID : uint8
{
	NOTHING                                  = 0,
	COMMON                                   = 1,
	BT_MOOGLE1                               = 2,
	DB_MOOGLE1                               = 3,
	DW_MOOGLE1                               = 4,
	HE_MOOGLE1                               = 5,
	TS_MOOGLE1                               = 6,
	CS_MOOGLE1                               = 7,
	RA_MOOGLE1                               = 8,
	FZ_MOOGLE1                               = 9,
	CA_MOOGLE1                               = 10,
	PO_MOOGLE1                               = 11,
	MI_MOOGLE1                               = 12,
	TT_MOOGLE1                               = 13,
	YT_MOOGLE1                               = 14,
	KB_MOOGLE1                               = 15,
	FW_MOOGLE1                               = 16,
	DC_MOOGLE1                               = 17,
	WI_MOOGLE1                               = 18,
	IN_MOOGLE1                               = 19,
	BX_MOOGLE1                               = 20,
	SR_MOOGLE1                               = 21,
	CO_MOOGLE1                               = 22,
	EW_MOOGLE1                               = 23,
	DI_MOOGLE1                               = 24,
	RG_MOOGLE1                               = 25,
	DP_MOOGLE1                               = 26,
	SF_MOOGLE1                               = 27,
	GM_MOOGLE1                               = 28,
	WM_MOOGLE1                               = 29,
	GUMI_SHOP_L1                             = 30,
	GUMI_SHOP_L2                             = 31,
	GUMI_SHOP_L3                             = 32,
	GUMI_SHOP_L4                             = 33,
	GUMI_SHOP_L5                             = 34,
	GUMI_SHOP_L6                             = 35,
	_MAX                                     = 36,
	ETresShopID_MAX                          = 37,
};

// Enum TresGame.ETresSkeletalFootStampDir
// NumValues: 0x0005
enum class ETresSkeletalFootStampDir : uint8
{
	Normal                                   = 0,
	LR_Reverse                               = 1,
	FB_Reverse                               = 2,
	LRFB_Reverse                             = 3,
	ETresSkeletalFootStampDir_MAX            = 4,
};

// Enum TresGame.ETresSoundAliasLabel_Projectile
// NumValues: 0x0005
enum class ETresSoundAliasLabel_Projectile : uint8
{
	NOTHING                                  = 0,
	HIT1                                     = 1,
	HIT2                                     = 2,
	_MAX                                     = 3,
	ETresSoundAliasLabel_MAX                 = 4,
};

// Enum TresGame.ETresSoundAliasLabel_WeaponSwing
// NumValues: 0x0010
enum class ETresSoundAliasLabel_WeaponSwing : uint8
{
	NOTHING                                  = 0,
	SWING1                                   = 1,
	SWING2                                   = 2,
	SWING3                                   = 3,
	SWING4                                   = 4,
	SWING5                                   = 5,
	SWING6                                   = 6,
	SWING7                                   = 7,
	SWING8                                   = 8,
	SWING9                                   = 9,
	SWING10                                  = 10,
	SWING11                                  = 11,
	SWING12                                  = 12,
	SWING13                                  = 13,
	_MAX                                     = 14,
	ETresSoundAliasLabel_MAX                 = 15,
};

// Enum TresGame.ETresSoundAliasLabel_WeaponHit
// NumValues: 0x000E
enum class ETresSoundAliasLabel_WeaponHit : uint8
{
	NOTHING                                  = 0,
	HIT1                                     = 1,
	HIT2                                     = 2,
	HIT3                                     = 3,
	HIT4                                     = 4,
	HIT5                                     = 5,
	HIT6                                     = 6,
	HIT7                                     = 7,
	HIT8                                     = 8,
	HIT9                                     = 9,
	HIT10                                    = 10,
	HIT11                                    = 11,
	_MAX                                     = 12,
	ETresSoundAliasLabel_MAX                 = 13,
};

// Enum TresGame.ETresSoundAliasUnit
// NumValues: 0x0007
enum class ETresSoundAliasUnit : uint8
{
	NOTHING                                  = 0,
	RH_WEAPON                                = 1,
	LH_WEAPON                                = 2,
	RL_WEAPON                                = 3,
	LL_WEAPON                                = 4,
	_MAX                                     = 5,
	ETresSoundAliasUnit_MAX                  = 6,
};

// Enum TresGame.ETresSoundAliasLabel
// NumValues: 0x000E
enum class ETresSoundAliasLabel : uint8
{
	SEAL_NOTHING                             = 0,
	SEAL_HIT1                                = 1,
	SEAL_HIT2                                = 2,
	SEAL_HIT3                                = 3,
	SEAL_HIT4                                = 4,
	SEAL_HIT5                                = 5,
	SEAL_HIT6                                = 6,
	SEAL_HIT7                                = 7,
	SEAL_SWING1                              = 8,
	SEAL_SWING2                              = 9,
	SEAL_SWING3                              = 10,
	SEAL_SWING4                              = 11,
	_SEAL_MAX                                = 12,
	ETresSoundAliasLabel_MAX                 = 13,
};

// Enum TresGame.ETresCategoryVolumeLayers
// NumValues: 0x0003
enum class ETresCategoryVolumeLayers : uint8
{
	GAME                                     = 1,
	MATINEE                                  = 6,
	ETresCategoryVolumeLayers_MAX            = 7,
};

// Enum TresGame.ETresWorldStaticBGMTypes
// NumValues: 0x0005
enum class ETresWorldStaticBGMTypes : uint8
{
	FIELD                                    = 0,
	BATTLE                                   = 1,
	BOSS_BATTLE                              = 2,
	EVENT_01                                 = 3,
	ETresWorldStaticBGMTypes_MAX             = 4,
};

// Enum TresGame.ETresSoundModes
// NumValues: 0x0009
enum class ETresSoundModes : uint8
{
	BLACKOUT                                 = 0,
	PAUSE                                    = 1,
	SLOW                                     = 2,
	PLAYER_DEAD                              = 3,
	BOSS_DEAD                                = 4,
	THANKYOU_FOR_PLAYING                     = 5,
	EVENT_SKIP_FADING                        = 6,
	MOVIE                                    = 7,
	ETresSoundModes_MAX                      = 8,
};

// Enum TresGame.ETresSpawnPointSize
// NumValues: 0x0003
enum class ETresSpawnPointSize : uint8
{
	Small                                    = 0,
	Big                                      = 1,
	ETresSpawnPointSize_MAX                  = 2,
};

// Enum TresGame.ETresSpawnPointBuildMethod
// NumValues: 0x0003
enum class ETresSpawnPointBuildMethod : uint8
{
	Simple                                   = 0,
	PathFinding                              = 1,
	ETresSpawnPointBuildMethod_MAX           = 2,
};

// Enum TresGame.ETresSpawnPointHeightFilterType
// NumValues: 0x0007
enum class ETresSpawnPointHeightFilterType : uint8
{
	ETresSpawnPointHeightFilterType_DoNotCare = 0,
	ETresSpawnPointHeightFilterType_LessThan = 1,
	ETresSpawnPointHeightFilterType_LessEqual = 2,
	ETresSpawnPointHeightFilterType_Equal    = 3,
	ETresSpawnPointHeightFilterType_GraterEqual = 4,
	ETresSpawnPointHeightFilterType_GraterThan = 5,
	ETresSpawnPointHeightFilterType_MAX      = 6,
};

// Enum TresGame.ETresSpawnPointRadiusFilterType
// NumValues: 0x0007
enum class ETresSpawnPointRadiusFilterType : uint8
{
	ETresSpawnPointRadiusFilterType_DoNotCare = 0,
	ETresSpawnPointRadiusFilterType_LessThan = 1,
	ETresSpawnPointRadiusFilterType_LessEqual = 2,
	ETresSpawnPointRadiusFilterType_Equal    = 3,
	ETresSpawnPointRadiusFilterType_GraterEqual = 4,
	ETresSpawnPointRadiusFilterType_GraterThan = 5,
	ETresSpawnPointRadiusFilterType_MAX      = 6,
};

// Enum TresGame.ETresSplineMoverMove
// NumValues: 0x0006
enum class ETresSplineMoverMove : uint8
{
	Location                                 = 0,
	LocationAndRotation                      = 1,
	MI_02_BeltConveyor                       = 2,
	TS_02_UFO                                = 3,
	TT_Train                                 = 4,
	ETresSplineMoverMove_MAX                 = 5,
};

// Enum TresGame.ETresSplineLast
// NumValues: 0x0004
enum class ETresSplineLast : uint8
{
	None                                     = 0,
	End                                      = 1,
	Loop                                     = 2,
	ETresSplineLast_MAX                      = 3,
};

// Enum TresGame.ETresStaticSE
// NumValues: 0x002D
enum class ETresStaticSE : uint8
{
	Se00000_001                              = 0,
	Se00000_002                              = 1,
	Se00000_003                              = 2,
	Se00000_004                              = 3,
	Se00000_005                              = 4,
	Se00000_006                              = 5,
	Se00000_007                              = 6,
	Se00000_008                              = 7,
	Se00000_009                              = 8,
	Se00000_010                              = 9,
	Se00000_011                              = 10,
	Se00000_012                              = 11,
	Se00000_013                              = 12,
	Se00000_014                              = 13,
	Se00000_015                              = 14,
	Se00000_018                              = 15,
	Se00000_019                              = 16,
	Se00000_020                              = 17,
	Se00000_039                              = 18,
	Se00000_042                              = 19,
	Se00000_043                              = 20,
	Se00000_046                              = 21,
	Se00000_047                              = 22,
	Se00000_048                              = 23,
	Se00000_050                              = 24,
	Se00000_051                              = 25,
	Se00000_054                              = 26,
	Se00000_057                              = 27,
	Se00000_059                              = 28,
	Se00000_062                              = 29,
	Se00000_063                              = 30,
	Se00000_064                              = 31,
	Se00000_066                              = 32,
	Se00000_067                              = 33,
	Se00000_068                              = 34,
	Se00000_069                              = 35,
	Se00000_071                              = 36,
	Se00000_072                              = 37,
	Se00000_073                              = 38,
	Se00000_075                              = 39,
	Se00001_125                              = 40,
	Se00000_076                              = 41,
	Se00000_077                              = 42,
	_se00000_MAX                             = 43,
	ETresStaticSE_MAX                        = 44,
};

// Enum TresGame.ETresNavLinkSegment_e_ex035
// NumValues: 0x0003
enum class ETresNavLinkSegment_e_ex035 : uint8
{
	NavLinkSegmentLeft                       = 0,
	NavLinkSegmentRight                      = 1,
	ETresNavLinkSegment_e_ex035_MAX          = 2,
};

// Enum TresGame.ETresNotifyFriendNpc
// NumValues: 0x0003
enum class ETresNotifyFriendNpc : uint8
{
	MoveToActionPointStart                   = 0,
	MoveToActionPointEnd                     = 1,
	ETresNotifyFriendNpc_MAX                 = 2,
};

// Enum TresGame.ETresDetectMarkerType
// NumValues: 0x0007
enum class ETresDetectMarkerType : uint8
{
	Default                                  = 0,
	LuckyMark                                = 1,
	GumiConstellation                        = 2,
	RaPudding                                = 3,
	NpcSmartphoneReaction                    = 4,
	PhotoMission                             = 5,
	ETresDetectMarkerType_MAX                = 6,
};

// Enum TresGame.ETresPropertyTrackTermnation
// NumValues: 0x0004
enum class ETresPropertyTrackTermnation : uint8
{
	RestoreValue                             = 0,
	SetEndValue                              = 1,
	KeepValue                                = 2,
	ETresPropertyTrackTermnation_MAX         = 3,
};

// Enum TresGame.ETresEffectCustomAreaCode
// NumValues: 0x0020
enum class ETresEffectCustomAreaCode : uint8
{
	TRES_EFFECT_CUSTOM_AREA_100              = 100,
	TRES_EFFECT_CUSTOM_AREA_101              = 101,
	TRES_EFFECT_CUSTOM_AREA_102              = 102,
	TRES_EFFECT_CUSTOM_AREA_103              = 103,
	TRES_EFFECT_CUSTOM_AREA_104              = 104,
	TRES_EFFECT_CUSTOM_AREA_105              = 105,
	TRES_EFFECT_CUSTOM_AREA_106              = 106,
	TRES_EFFECT_CUSTOM_AREA_107              = 107,
	TRES_EFFECT_CUSTOM_AREA_108              = 108,
	TRES_EFFECT_CUSTOM_AREA_109              = 109,
	TRES_EFFECT_CUSTOM_AREA_110              = 110,
	TRES_EFFECT_CUSTOM_AREA_111              = 111,
	TRES_EFFECT_CUSTOM_AREA_112              = 112,
	TRES_EFFECT_CUSTOM_AREA_113              = 113,
	TRES_EFFECT_CUSTOM_AREA_114              = 114,
	TRES_EFFECT_CUSTOM_AREA_115              = 115,
	TRES_EFFECT_CUSTOM_AREA_116              = 116,
	TRES_EFFECT_CUSTOM_AREA_117              = 117,
	TRES_EFFECT_CUSTOM_AREA_118              = 118,
	TRES_EFFECT_CUSTOM_AREA_119              = 119,
	TRES_EFFECT_CUSTOM_AREA_120              = 120,
	TRES_EFFECT_CUSTOM_AREA_121              = 121,
	TRES_EFFECT_CUSTOM_AREA_122              = 122,
	TRES_EFFECT_CUSTOM_AREA_123              = 123,
	TRES_EFFECT_CUSTOM_AREA_124              = 124,
	TRES_EFFECT_CUSTOM_AREA_125              = 125,
	TRES_EFFECT_CUSTOM_AREA_126              = 126,
	TRES_EFFECT_CUSTOM_AREA_127              = 127,
	TRES_EFFECT_CUSTOM_AREA_128              = 128,
	TRES_EFFECT_CUSTOM_AREA_129              = 129,
	TRES_EFFECT_CUSTOM_AREA_130              = 130,
	TRES_EFFECT_CUSTOM_AREA_MAX              = 131,
};

// Enum TresGame.ETresEffectAreaCode
// NumValues: 0x0020
enum class ETresEffectAreaCode : uint8
{
	TRES_EFFECT_AREA_00                      = 0,
	TRES_EFFECT_AREA_01                      = 1,
	TRES_EFFECT_AREA_02                      = 2,
	TRES_EFFECT_AREA_03                      = 3,
	TRES_EFFECT_AREA_04                      = 4,
	TRES_EFFECT_AREA_05                      = 5,
	TRES_EFFECT_AREA_06                      = 6,
	TRES_EFFECT_AREA_07                      = 7,
	TRES_EFFECT_AREA_08                      = 8,
	TRES_EFFECT_AREA_09                      = 9,
	TRES_EFFECT_AREA_10                      = 10,
	TRES_EFFECT_AREA_11                      = 11,
	TRES_EFFECT_AREA_12                      = 12,
	TRES_EFFECT_AREA_13                      = 13,
	TRES_EFFECT_AREA_14                      = 14,
	TRES_EFFECT_AREA_15                      = 15,
	TRES_EFFECT_AREA_16                      = 16,
	TRES_EFFECT_AREA_17                      = 17,
	TRES_EFFECT_AREA_18                      = 18,
	TRES_EFFECT_AREA_19                      = 19,
	TRES_EFFECT_AREA_20                      = 20,
	TRES_EFFECT_AREA_21                      = 21,
	TRES_EFFECT_AREA_22                      = 22,
	TRES_EFFECT_AREA_23                      = 23,
	TRES_EFFECT_AREA_24                      = 24,
	TRES_EFFECT_AREA_25                      = 25,
	TRES_EFFECT_AREA_26                      = 26,
	TRES_EFFECT_AREA_27                      = 27,
	TRES_EFFECT_AREA_28                      = 28,
	TRES_EFFECT_AREA_29                      = 29,
	TRES_EFFECT_AREA_30                      = 30,
	TRES_EFFECT_AREA_MAX                     = 31,
};

// Enum TresGame.ETresCampPawnAnimTypeID
// NumValues: 0x0003
enum class ETresCampPawnAnimTypeID : uint8
{
	TCPAID_NORMAL                            = 0,
	TCPAID_IDLE                              = 1,
	TCPAID_MAX                               = 2,
};

// Enum TresGame.ETresDlcChallengeRank
// NumValues: 0x0010
enum class ETresDlcChallengeRank : uint8
{
	RANK_NONE                                = 0,
	RANK_1                                   = 1,
	RANK_2                                   = 2,
	RANK_3                                   = 3,
	RANK_4                                   = 4,
	RANK_5                                   = 5,
	RANK_6                                   = 6,
	RANK_7                                   = 7,
	RANK_8                                   = 8,
	RANK_9                                   = 9,
	RANK_10                                  = 10,
	RANK_11                                  = 11,
	RANK_12                                  = 12,
	RANK_13                                  = 13,
	_Max                                     = 14,
	ETresDlcChallengeRank_MAX                = 15,
};

// Enum TresGame.ETresDlcChallengeScoreID
// NumValues: 0x0024
enum class ETresDlcChallengeScoreID : uint8
{
	ID01                                     = 0,
	ID02                                     = 1,
	ID03                                     = 2,
	ID04                                     = 3,
	ID05                                     = 4,
	ID06                                     = 5,
	ID07                                     = 6,
	ID08                                     = 7,
	ID09                                     = 8,
	ID10                                     = 9,
	ID11                                     = 10,
	ID12                                     = 11,
	ID13                                     = 12,
	ID14                                     = 13,
	ID15                                     = 14,
	ID16                                     = 15,
	ID17                                     = 16,
	ID18                                     = 17,
	ID19                                     = 18,
	ID20                                     = 19,
	ID21                                     = 20,
	ID22                                     = 21,
	ID23                                     = 22,
	ID24                                     = 23,
	ID25                                     = 24,
	ID26                                     = 25,
	ID27                                     = 26,
	ID28                                     = 27,
	ID29                                     = 28,
	ID30                                     = 29,
	ID31                                     = 30,
	ID32                                     = 31,
	ID33                                     = 32,
	ID34                                     = 33,
	_Max                                     = 34,
	ETresDlcChallengeScoreID_MAX             = 35,
};

// Enum TresGame.ETresDlcChallengeRecordID
// NumValues: 0x002E
enum class ETresDlcChallengeRecordID : uint8
{
	REC0101                                  = 0,
	REC0201                                  = 1,
	REC0202                                  = 2,
	REC0301                                  = 3,
	REC0401                                  = 4,
	REC0501                                  = 5,
	REC0601                                  = 6,
	REC0701                                  = 7,
	REC0801                                  = 8,
	REC0901                                  = 9,
	REC1001                                  = 10,
	REC1101                                  = 11,
	REC1201                                  = 12,
	REC1301                                  = 13,
	REC1401                                  = 14,
	REC1402                                  = 15,
	REC1501                                  = 16,
	REC1502                                  = 17,
	REC1601                                  = 18,
	REC1602                                  = 19,
	REC1603                                  = 20,
	REC1701                                  = 21,
	REC1801                                  = 22,
	REC1802                                  = 23,
	REC1803                                  = 24,
	REC1901                                  = 25,
	REC1902                                  = 26,
	REC2001                                  = 27,
	REC2002                                  = 28,
	REC2101                                  = 29,
	REC2201                                  = 30,
	REC2301                                  = 31,
	REC2401                                  = 32,
	REC2501                                  = 33,
	REC2601                                  = 34,
	REC2701                                  = 35,
	REC2801                                  = 36,
	REC2901                                  = 37,
	REC3001                                  = 38,
	REC3101                                  = 39,
	REC3201                                  = 40,
	REC3301                                  = 41,
	REC3401                                  = 42,
	ScoreCheckMax                            = 43,
	_Max                                     = 100,
	ETresDlcChallengeRecordID_MAX            = 101,
};

// Enum TresGame.ETresDlcChallengeCode
// NumValues: 0x0010
enum class ETresDlcChallengeCode : uint8
{
	LevelOne                                 = 0,
	GuardZero                                = 1,
	APLimit                                  = 2,
	HPCurse                                  = 3,
	MPCurse                                  = 4,
	BanCure                                  = 5,
	BanBattleItem                            = 6,
	BanFormChange                            = 7,
	BanShootflow                             = 8,
	BanAttractionFlow                        = 9,
	BanFriendLink                            = 10,
	BanDisneyMagic                           = 11,
	BanMogMedal                              = 12,
	_CodeMax                                 = 13,
	_Max                                     = 24,
	ETresDlcChallengeCode_MAX                = 25,
};

// Enum TresGame.ETresDlcCheatAchievementID
// NumValues: 0x000C
enum class ETresDlcCheatAchievementID : uint8
{
	RiskeyChallenge                          = 0,
	GlideChallenge                           = 1,
	GumiSGeistChallenge                      = 2,
	AerialChallenge                          = 3,
	GigasChallenge                           = 4,
	BowlingChallenge                         = 5,
	FreezeChallenge                          = 6,
	RageChallenge                            = 7,
	LinkChallenge                            = 8,
	_AllClearCheck                           = 9,
	_Max                                     = 64,
	ETresDlcCheatAchievementID_MAX           = 65,
};

// Enum TresGame.ETresDlcCheatCode
// NumValues: 0x0012
enum class ETresDlcCheatCode : uint8
{
	PowerWorld                               = 0,
	APFree                                   = 1,
	AutoGuard                                = 2,
	HPRegenerate                             = 3,
	MPRegenerate                             = 4,
	FormRegenerate                           = 5,
	FocusRegenerate                          = 6,
	AttractionFever                          = 7,
	FriendLinkFever                          = 8,
	LinkExtend                               = 9,
	RageFever                                = 10,
	ShopDeflation                            = 11,
	BattleVictory                            = 12,
	PerfectCooking                           = 13,
	GumiCheat                                = 14,
	_CodeMax                                 = 15,
	_Max                                     = 32,
	ETresDlcCheatCode_MAX                    = 33,
};

// Enum TresGame.ETresFadeTrack_TheaterMode
// NumValues: 0x0004
enum class ETresFadeTrack_TheaterMode : uint8
{
	ETresFadeTrack_TheaterMode_Disable       = 0,
	ETresFadeTrack_TheaterMode_Only          = 1,
	ETresFadeTrack_TheaterMode_Regardless    = 2,
	ETresFadeTrack_TheaterMode_MAX           = 3,
};

// Enum TresGame.ETresPauseMenuType
// NumValues: 0x0007
enum class ETresPauseMenuType : uint8
{
	ETresPauseMenuType_Normal                = 0,
	ETresPauseMenuType_EventSkip             = 1,
	ETresPauseMenuType_EventSkipButDisallow  = 2,
	ETresPauseMenuType_MiniGame              = 3,
	ETresPauseMenuType_NoRetryMiniGame       = 4,
	ETresPauseMenuType_Tutorial              = 5,
	ETresPauseMenuType_MAX                   = 6,
};

// Enum TresGame.ETresGameHelpCategory
// NumValues: 0x000B
enum class ETresGameHelpCategory : uint8
{
	None                                     = 0,
	GameSystem                               = 1,
	PlayerAction                             = 2,
	Battle                                   = 3,
	World                                    = 4,
	LSI                                      = 5,
	GumiHelp                                 = 6,
	GumiEditHelp                             = 7,
	ReMind                                   = 8,
	Max                                      = 9,
	ETresGameHelpCategory_MAX                = 10,
};

// Enum TresGame.ETresLevelentityGroup_Selector
// NumValues: 0x0002
enum class ETresLevelentityGroup_Selector : uint8
{
	ETresLevelentityGroup_Selector_None      = 0,
	ETresLevelentityGroup_Selector_MAX       = 1,
};

// Enum TresGame.ETresLevelEntityDisappearMode
// NumValues: 0x0007
enum class ETresLevelEntityDisappearMode : uint8
{
	ETresLevelEntityDisappearMode_Immediate  = 0,
	ETresLevelEntityDisappearMode_Perform1   = 1,
	ETresLevelEntityDisappearMode_Perform2   = 2,
	ETresLevelEntityDisappearMode_Perform3   = 3,
	ETresLevelEntityDisappearMode_RunAway    = 4,
	ETresLevelEntityDisappearMode_Force      = 5,
	ETresLevelEntityDisappearMode_MAX        = 6,
};

// Enum TresGame.ETresLevelEntityAppearMode
// NumValues: 0x000A
enum class ETresLevelEntityAppearMode : uint8
{
	ETresLevelEntityAppearMode_Immediate     = 0,
	ETresLevelEntityAppearMode_Perform1      = 1,
	ETresLevelEntityAppearMode_Perform2      = 2,
	ETresLevelEntityAppearMode_Perform3      = 3,
	ETresLevelEntityAppearMode_Perform4      = 4,
	ETresLevelEntityAppearMode_Special1      = 5,
	ETresLevelEntityAppearMode_Special2      = 6,
	ETresLevelEntityAppearMode_Special3      = 7,
	ETresLevelEntityAppearMode_IdleWait      = 8,
	ETresLevelEntityAppearMode_MAX           = 9,
};

// Enum TresGame.ETresEnemySetVanishMode
// NumValues: 0x0005
enum class ETresEnemySetVanishMode : uint8
{
	ETresEnemySetVanishMode_Immediate        = 0,
	ETresEnemySetVanishMode_Perform1         = 1,
	ETresEnemySetVanishMode_Perform2         = 2,
	ETresEnemySetVanishMode_Perform3         = 3,
	ETresEnemySetVanishMode_MAX              = 4,
};

// Enum TresGame.ETresEnemySetAppearMode
// NumValues: 0x0009
enum class ETresEnemySetAppearMode : uint8
{
	ETresEnemySetAppearMode_Immediate        = 0,
	ETresEnemySetAppearMode_Perform1         = 1,
	ETresEnemySetAppearMode_Perform2         = 2,
	ETresEnemySetAppearMode_Perform3         = 3,
	ETresEnemySetAppearMode_Perform4         = 4,
	ETresEnemySetAppearMode_Special1         = 5,
	ETresEnemySetAppearMode_Special2         = 6,
	ETresEnemySetAppearMode_Special3         = 7,
	ETresEnemySetAppearMode_MAX              = 8,
};

// Enum TresGame.ETresFNpcAIAttackDefType
// NumValues: 0x0006
enum class ETresFNpcAIAttackDefType : uint8
{
	TRES_FNPC_AI_ATK_DEF_NONE                = 0,
	TRES_FNPC_AI_ATK_DEF_NORMAL_ATTACK       = 1,
	TRES_FNPC_AI_ATK_DEF_ABILITY_ATTACK      = 2,
	TRES_FNPC_AI_ATK_DEF_ABILITY_CURE        = 3,
	TRES_FNPC_AI_ATK_DEF_ABILITY_SUPPORT     = 4,
	TRES_FNPC_AI_ATK_DEF_MAX                 = 5,
};

// Enum TresGame.ETresFNpcAIModeLevelSetting
// NumValues: 0x0006
enum class ETresFNpcAIModeLevelSetting : uint8
{
	TRES_FNPC_AI_MODE_LV_SET_FOLLOW          = 0,
	TRES_FNPC_AI_MODE_LV_SET_NPC_WAIT        = 1,
	TRES_FNPC_AI_MODE_LV_SET_NPC_TALK        = 2,
	TRES_FNPC_AI_MODE_LV_SET_NPC_FREE_WALK   = 3,
	TRES_FNPC_AI_MODE_LV_SET_NPC_FREE_WALK_TALK = 4,
	TRES_FNPC_AI_MODE_LV_SET_MAX             = 5,
};

// Enum TresGame.ETresFNpcAIStyle_Cure
// NumValues: 0x0004
enum class ETresFNpcAIStyle_Cure : uint8
{
	TRES_FNPC_AI_STYLE_CURE_OFTEN            = 0,
	TRES_FNPC_AI_STYLE_CURE_PINCH            = 1,
	TRES_FNPC_AI_STYLE_CURE_ALWAYS           = 2,
	TRES_FNPC_AI_STYLE_CURE_MAX              = 3,
};

// Enum TresGame.ETresFNpcAIStyle_Ability
// NumValues: 0x0004
enum class ETresFNpcAIStyle_Ability : uint8
{
	TRES_FNPC_AI_STYLE_ABILITY_FREE          = 0,
	TRES_FNPC_AI_STYLE_ABILITY_BALANCE       = 1,
	TRES_FNPC_AI_STYLE_ABILITY_LESS          = 2,
	TRES_FNPC_AI_STYLE_ABILITY_MAX           = 3,
};

// Enum TresGame.ETresFNpcAIStyle_Battle
// NumValues: 0x0005
enum class ETresFNpcAIStyle_Battle : uint8
{
	TRES_FNPC_AI_STYLE_BATTLE_TOGETHER       = 0,
	TRES_FNPC_AI_STYLE_BATTLE_FREE           = 1,
	TRES_FNPC_AI_STYLE_BATTLE_SUPPORT        = 2,
	TRES_FNPC_AI_STYLE_BATTLE_FOCUS          = 3,
	TRES_FNPC_AI_STYLE_BATTLE_MAX            = 4,
};

// Enum TresGame.ETresCmnCureEffectGrpID
// NumValues: 0x0019
enum class ETresCmnCureEffectGrpID : uint8
{
	TRES_CURE_GRP_NONE                       = 0,
	TRES_CURE_GRP_SAVEPOINT                  = 1,
	TRES_CURE_GRP_PRIZE                      = 2,
	TRES_CURE_GRP_POTION                     = 3,
	TRES_CURE_GRP_HIGHPOTION                 = 4,
	TRES_CURE_GRP_ETHER                      = 5,
	TRES_CURE_GRP_ELIXIR                     = 6,
	TRES_CURE_GRP_CURE                       = 7,
	TRES_CURE_GRP_CURA                       = 8,
	TRES_CURE_GRP_CURAGA                     = 9,
	TRES_CURE_GRP_BONUS_CURE                 = 10,
	TRES_CURE_GRP_BONUS_CURA                 = 11,
	TRES_CURE_GRP_BONUS_CURAGA               = 12,
	TRES_CURE_GRP_DRAIN                      = 13,
	D_CURE                                   = 14,
	BONUS_D_CURE                             = 15,
	CURE_SPRAY                               = 16,
	BONUS_CURE_SPRAY                         = 17,
	TRES_CURE_GRP_HIGHETHER                  = 18,
	TRES_CURE_GRP_FOCUSSUPPLY                = 19,
	TRES_CURE_GRP_HIGHFOCUSSUPPLY            = 20,
	TRES_CURE_GRP_ALLCURE                    = 21,
	TRES_CURE_GRP_FOCUSASPIR                 = 22,
	TRES_CURE_GRP_MAX                        = 23,
	ETresCmnCureEffectGrpID_MAX              = 24,
};

// Enum TresGame.ETresPawnCmnChargeEffectCategory
// NumValues: 0x0003
enum class ETresPawnCmnChargeEffectCategory : uint8
{
	TRES_CMN_CEC_WEAPON                      = 0,
	TRES_CMN_CEC_STYLECHANGE                 = 1,
	TRES_CMN_CEC_MAX                         = 2,
};

// Enum TresGame.ETresPawnCmnEffectID
// NumValues: 0x0006
enum class ETresPawnCmnEffectID : uint8
{
	TRES_PAWN_CMN_EFFECT_FREEFLOW            = 0,
	TRES_PAWN_CMN_EFFECT_MAGIC_CAST          = 1,
	TRES_PAWN_CMN_EFFECT_BAD_STATES          = 2,
	TRES_PAWN_CMN_EFFECT_APPEAR              = 3,
	TRES_PAWN_CMN_EFFECT_CURE                = 4,
	TRES_PAWN_CMN_EFFECT_MAX                 = 5,
};

// Enum TresGame.ETresCharInputType
// NumValues: 0x0006
enum class ETresCharInputType : uint8
{
	TRES_CHAR_INPUT_AI                       = 0,
	TRES_CHAR_INPUT_PAD                      = 1,
	TRES_CHAR_INPUT_DEBUG_PAD                = 2,
	TRES_CHAR_INPUT_DONOTING                 = 3,
	TRES_CHAR_INPUT_OTHER                    = 4,
	TRES_CHAR_INPUT_MAX                      = 5,
};

// Enum TresGame.ETresCinematicPlayerStyleType
// NumValues: 0x0008
enum class ETresCinematicPlayerStyleType : uint8
{
	NONE                                     = 0,
	WEAR_L0_WEAPON_L1                        = 1,
	WEAR_L1_WEAPON_L0                        = 2,
	WEAR_L1_WEAPON_L1                        = 3,
	WEAR_L2_WEAPON_L0                        = 4,
	WEAR_L2_WEAPON_L1                        = 5,
	_MAX                                     = 6,
	ETresCinematicPlayerStyleType_MAX        = 7,
};

// Enum TresGame.ETresCinematicPlayerStateType
// NumValues: 0x0006
enum class ETresCinematicPlayerStateType : uint8
{
	TCPST_NONE                               = 0,
	TCPST_TPVIEW                             = 1,
	TCPST_CLEAR                              = 2,
	TCPST_FORCE_CLEAR                        = 3,
	_TCPST_MAX                               = 4,
	ETresCinematicPlayerStateType_MAX        = 5,
};

// Enum TresGame.ETresCinematicLayerChannel
// NumValues: 0x000A
enum class ETresCinematicLayerChannel : uint8
{
	TCLC_EVENT1                              = 0,
	TCLC_EVENT2                              = 1,
	TCLC_EVENT3                              = 2,
	TCLC_EVENT4                              = 3,
	TCLC_LEVEL1                              = 4,
	TCLC_LEVEL2                              = 5,
	TCLC_LEVEL3                              = 6,
	TCLC_LEVEL4                              = 7,
	_TCLC_MAX                                = 8,
	ETresCinematicLayerChannel_MAX           = 9,
};

// Enum TresGame.ETresObjTypeProcChannel
// NumValues: 0x0012
enum class ETresObjTypeProcChannel : uint8
{
	CH_COMMON                                = 0,
	CH_PLAYER                                = 1,
	CH_EVENT                                 = 2,
	CH_MENU                                  = 3,
	CH_ENEMY                                 = 4,
	CH_ENEMYBOSS                             = 5,
	_CH_RESERVE06                            = 6,
	_CH_RESERVE07                            = 7,
	CH_SYSTEM1                               = 8,
	_CH_RESERVE09                            = 9,
	_CH_RESERVE10                            = 10,
	_CH_RESERVE11                            = 11,
	CH_DEBUG1                                = 12,
	CH_DEBUG2                                = 13,
	CH_DEBUG3                                = 14,
	CH_PROFILING                             = 15,
	CH_MAX                                   = 16,
	ETresObjTypeProcChannel_MAX              = 17,
};

// Enum TresGame.ETresBadStatCloudWeatherType
// NumValues: 0x0005
enum class ETresBadStatCloudWeatherType : uint8
{
	TRES_BS_WEATHER_TYPE_NONE                = 0,
	TRES_BS_WEATHER_TYPE_CLOUD               = 1,
	TRES_BS_WEATHER_TYPE_LIGHT_RAIN          = 2,
	TRES_BS_WEATHER_TYPE_HEAVY_RAIN          = 3,
	TRES_BS_WEATHER_TYPE_MAX                 = 4,
};

// Enum TresGame.ETresAtkCollReflectReaction
// NumValues: 0x0006
enum class ETresAtkCollReflectReaction : uint8
{
	TRES_ATK_RR_DEFAULT                      = 0,
	TRES_ATK_RR_STAGGER                      = 1,
	TRES_ATK_RS_GUARD                        = 2,
	TRES_ATK_RR_NOREACTION                   = 3,
	_TRES_ATK_RR_MAX                         = 4,
	ETresAtkCollReflectReaction_MAX          = 5,
};

// Enum TresGame.ETresIkCollision
// NumValues: 0x0005
enum class ETresIkCollision : uint8
{
	SPHERE                                   = 0,
	CAPSULE                                  = 1,
	BOX                                      = 2,
	MAX                                      = 3,
	ETresIkCollision_MAX                     = 4,
};

// Enum TresGame.ETresAtkCollMapHitType
// NumValues: 0x0006
enum class ETresAtkCollMapHitType : uint8
{
	NOHIT                                    = 0,
	PHYSOBJ_NOHIT                            = 1,
	HITMAP                                   = 2,
	IGNORE_GROUND                            = 3,
	_MAX                                     = 4,
	ETresAtkCollMapHitType_MAX               = 5,
};

// Enum TresGame.ETresAtkCollLocationAttachType
// NumValues: 0x0004
enum class ETresAtkCollLocationAttachType : uint8
{
	NORMAL                                   = 0,
	OWNER_ATTACHED_MESH                      = 1,
	WORLD                                    = 2,
	ETresAtkCollLocationAttachType_MAX       = 3,
};

// Enum TresGame.ETresCollision
// NumValues: 0x000B
enum class ETresCollision : uint8
{
	SPHERE                                   = 0,
	CAPSULE1                                 = 1,
	CAPSULE2                                 = 2,
	CAPSULE_RING                             = 3,
	BOX                                      = 4,
	BOX_RING                                 = 5,
	CONVEX                                   = 6,
	LASER1                                   = 7,
	DCONVEX                                  = 8,
	MAX                                      = 9,
	ETresCollision_MAX                       = 10,
};

// Enum TresGame.ETresLockonPriority
// NumValues: 0x0003
enum class ETresLockonPriority : uint8
{
	LOW                                      = 0,
	HIGH                                     = 1,
	ETresLockonPriority_MAX                  = 2,
};

// Enum TresGame.ETresReactorCommandID
// NumValues: 0x0021
enum class ETresReactorCommandID : uint8
{
	TRES_RCID_UNKNOWN                        = 0,
	TRES_RCID_SAVE                           = 1,
	TRES_RCID_TALK                           = 2,
	TRES_RCID_OPEN                           = 3,
	TRES_RCID_CHECK                          = 4,
	TRES_RCID_SHOP                           = 5,
	TRES_RCID_RESCUE                         = 6,
	TRES_RCID_VEHICLE                        = 7,
	TRES_RCID_SHIP                           = 8,
	TRES_RCID_PLANE                          = 9,
	TRES_RCID_GETOFF                         = 10,
	TRES_RCID_GIGAS_ELECTRO                  = 11,
	TRES_RCID_RAILSLIDE                      = 12,
	TRES_RCID_PLANEBOSS                      = 13,
	TRES_RCID_ENEMYSHIP                      = 14,
	TRES_RCID_TRICK                          = 15,
	TRES_RCID_WATERPLAY                      = 16,
	TRES_RCID_EXTENDHAND                     = 17,
	TRES_RCID_PUDDING                        = 18,
	TRES_RCID_MAILINGTO                      = 19,
	TRES_RCID_ANS_ENDURE                     = 20,
	TRES_RCID_ANS_CHALLENGE                  = 21,
	TRES_RCID_ANS_MIXING                     = 22,
	TRES_RCID_ANS_BUMPING                    = 23,
	TRES_RCID_ANS_BELIEVE                    = 24,
	TRES_RCID_ANS_ACCEPT                     = 25,
	TRES_RCID_SWING                          = 26,
	TRES_RCID_ANS_USUAL                      = 27,
	TRES_RCID_ANS_EASY                       = 28,
	TRES_RCID_ANS_CHALLENGING                = 29,
	TRES_RCID_CARDDRAW                       = 30,
	_TRES_RCID_MAX                           = 31,
	ETresReactorCommandID_MAX                = 32,
};

// Enum TresGame.ETresAttackerPosition
// NumValues: 0x0006
enum class ETresAttackerPosition : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Right                                    = 2,
	Left                                     = 3,
	Max                                      = 4,
	ETresAttackerPosition_MAX                = 5,
};

// Enum TresGame.ETresGrass
// NumValues: 0x0005
enum class ETresGrass : uint8
{
	RADIAL                                   = 0,
	CLOCKWISE                                = 1,
	CCLOCKWISE                               = 2,
	MAX                                      = 3,
	ETresGrass_MAX                           = 4,
};

// Enum TresGame.ETresScalabilityType
// NumValues: 0x0004
enum class ETresScalabilityType : uint8
{
	SCALABILITY_TYPE_ENGINE                  = 0,
	SCALABILITY_TYPE_GAME                    = 1,
	SCALABILITY_TYPE_CUT_SCENE               = 2,
	SCALABILITY_TYPE_MAX                     = 3,
};

// Enum TresGame.ETresBoneSpacesType
// NumValues: 0x0004
enum class ETresBoneSpacesType : uint8
{
	TBST_WorldSpace                          = 0,
	TBST_LocalSpace                          = 1,
	TBST_ComponentSpace                      = 2,
	TBST_MAX                                 = 3,
};

// Enum TresGame.ETresSaveLevel
// NumValues: 0x0004
enum class ETresSaveLevel : uint8
{
	Visible                                  = 0,
	Load                                     = 1,
	Max                                      = 2,
	ETresSaveLevel_MAX                       = 3,
};

// Enum TresGame.ETresClimbingAnimPose
// NumValues: 0x0005
enum class ETresClimbingAnimPose : uint8
{
	TRES_CLIMBINGANIMPOSE_NONE               = 0,
	TRES_CLIMBINGANIMPOSE_LOW                = 1,
	TRES_CLIMBINGANIMPOSE_MIDDLE             = 2,
	TRES_CLIMBINGANIMPOSE_HIGH               = 3,
	TRES_CLIMBINGANIMPOSE_MAX                = 4,
};

// Enum TresGame.ETresLandAnimPose
// NumValues: 0x0006
enum class ETresLandAnimPose : uint8
{
	TRES_LANDANIMPOSE_NONE                   = 0,
	TRES_LANDANIMPOSE_LAND                   = 1,
	TRES_LANDANIMPOSE_LIGHT                  = 2,
	TRES_LANDANIMPOSE_LIGHT_R                = 3,
	TRES_LANDANIMPOSE_LIGHT_L                = 4,
	TRES_LANDANIMPOSE_MAX                    = 5,
};

// Enum TresGame.ETresLastAnimPose
// NumValues: 0x0003
enum class ETresLastAnimPose : uint8
{
	TRES_LASTANIMPOSE_NORMAL                 = 0,
	TRES_LASTANIMPOSE_BATTLE                 = 1,
	TRES_LASTANIMPOSE_MAX                    = 2,
};

// Enum TresGame.ETresCharRestrictActionID
// NumValues: 0x0013
enum class ETresCharRestrictActionID : uint8
{
	ATTACK                                   = 0,
	MAGIC                                    = 1,
	ITEM                                     = 2,
	LINK                                     = 3,
	FRIENDLINK                               = 4,
	ATTRACTIONFLOW                           = 5,
	STYLE                                    = 6,
	SITUATION                                = 7,
	GUARD                                    = 8,
	JUMP                                     = 9,
	SHOOTLOCK                                = 10,
	RUN                                      = 11,
	DIVEFALL                                 = 12,
	DEEPDIVING                               = 13,
	CANCELSITUATION                          = 14,
	ALWAYS_USESPAWNPOINT                     = 15,
	PHOTO_MODE                               = 16,
	_MAX                                     = 17,
	ETresCharRestrictActionID_MAX            = 18,
};

// Enum TresGame.ETresCoverIdlingDirID
// NumValues: 0x0005
enum class ETresCoverIdlingDirID : uint8
{
	TRES_CID_ID_NONE                         = 0,
	TRES_CID_ID_LEFT                         = 1,
	TRES_CID_ID_RIGHT                        = 2,
	_TRES_CID_ID_MAX                         = 3,
	ETresCoverIdlingDirID_MAX                = 4,
};

// Enum TresGame.ETresdirectionType
// NumValues: 0x0007
enum class ETresdirectionType : uint8
{
	TRES_DIR_FRONT                           = 0,
	TRES_DIR_BACK                            = 1,
	TRES_DIR_RIGHT                           = 2,
	TRES_DIR_LEFT                            = 3,
	TRES_DIR_UP                              = 4,
	TRES_DIR_DOWN                            = 5,
	TRES_DIR_MAX                             = 6,
};

// Enum TresGame.ETresRiskDodgeType
// NumValues: 0x0006
enum class ETresRiskDodgeType : uint8
{
	TRDT_NONE                                = 0,
	TRDT_UNDERSLIDE                          = 1,
	TRDT_OVERSLIDE                           = 2,
	TRDT_SLIDETURN                           = 3,
	TRDT_WARP                                = 4,
	TRDT_MAX                                 = 5,
};

// Enum TresGame.ETresHopMotionType
// NumValues: 0x000C
enum class ETresHopMotionType : uint8
{
	THIM_NONE                                = 0,
	THIM_HOPPING                             = 1,
	THIM_SURFING                             = 2,
	THIM_NORMAL                              = 3,
	THIM_BALANCE_BREAK                       = 4,
	THIM_ROLLING                             = 5,
	THIM_TRIPPING                            = 6,
	THIM_DANGLE                              = 7,
	THIM_HASSOU_JUMP                         = 8,
	THIM_HASSOU_JUMP_HIGH                    = 9,
	THIM_HASSOU_JUMP_FLIGHT                  = 10,
	THIM_MAX                                 = 11,
};

// Enum TresGame.ETresPlayerHoukouModes
// NumValues: 0x0005
enum class ETresPlayerHoukouModes : uint8
{
	TPH_FRONT                                = 0,
	TPH_BACK                                 = 1,
	TPH_RIGHT                                = 2,
	TPH_LEFT                                 = 3,
	TPH_MAX                                  = 4,
};

// Enum TresGame.ETresCharEquipPart
// NumValues: 0x000A
enum class ETresCharEquipPart : uint8
{
	UNKNOWN                                  = 0,
	RIGHT_HAND                               = 1,
	LEFT_HAND                                = 2,
	BOTH_HAND                                = 3,
	RIGHT_LEG                                = 4,
	LEFT_LEG                                 = 5,
	BOTH_LEG                                 = 6,
	ALL                                      = 7,
	_MAX                                     = 8,
	ETresCharEquipPart_MAX                   = 9,
};

// Enum TresGame.ETresWeaponGrowLvl
// NumValues: 0x0004
enum class ETresWeaponGrowLvl : uint8
{
	TRES_WEAPON_GROW_LVL01                   = 0,
	TRES_WEAPON_GROW_LVL02                   = 1,
	TRES_WEAPON_GROW_LVL03                   = 2,
	TRES_WEAPON_GROW_MAX                     = 3,
};

// Enum TresGame.ETresWeaponForm
// NumValues: 0x001A
enum class ETresWeaponForm : uint8
{
	TRES_WEAPON_FORM_NONE                    = 0,
	TRES_WEAPON_FORM_01                      = 1,
	TRES_WEAPON_FORM_02                      = 2,
	TRES_WEAPON_FORM_03                      = 3,
	TRES_WEAPON_FORM_04                      = 4,
	TRES_WEAPON_FORM_05                      = 5,
	TRES_WEAPON_FORM_06                      = 6,
	TRES_WEAPON_FORM_07                      = 7,
	TRES_WEAPON_FORM_08                      = 8,
	TRES_WEAPON_FORM_09                      = 9,
	TRES_WEAPON_FORM_0A                      = 10,
	TRES_WEAPON_FORM_0B                      = 11,
	TRES_WEAPON_FORM_0C                      = 12,
	TRES_WEAPON_FORM_0D                      = 13,
	TRES_WEAPON_FORM_0E                      = 14,
	TRES_WEAPON_FORM_0F                      = 15,
	TRES_WEAPON_FORM_10                      = 16,
	TRES_WEAPON_FORM_11                      = 17,
	TRES_WEAPON_FORM_12                      = 18,
	TRES_WEAPON_FORM_13                      = 19,
	TRES_WEAPON_FORM_14                      = 20,
	TRES_WEAPON_FORM_15                      = 21,
	TRES_WEAPON_FORM_16                      = 22,
	TRES_WEAPON_FORM_17                      = 23,
	TRES_WEAPON_FORM_18                      = 24,
	TRES_WEAPON_FORM_MAX                     = 25,
};

// Enum TresGame.ETresDamageLeaveOneType
// NumValues: 0x0007
enum class ETresDamageLeaveOneType : uint8
{
	NORMAL                                   = 0,
	ANYONE                                   = 1,
	PLAYER_ONLY                              = 2,
	PLAYERTEAM_ONLY                          = 3,
	ENEMY_ONLY                               = 4,
	_MAX                                     = 5,
	ETresDamageLeaveOneType_MAX              = 6,
};

// Enum TresGame.ETresDamageCalcType
// NumValues: 0x0006
enum class ETresDamageCalcType : uint8
{
	NORMAL                                   = 0,
	RATE_MAXHP                               = 1,
	RATE_HP                                  = 2,
	NO_OXYGEN                                = 3,
	_MAX                                     = 4,
	ETresDamageCalcType_MAX                  = 5,
};

// Enum TresGame.ETresMapJumpFadeKind
// NumValues: 0x0005
enum class ETresMapJumpFadeKind : uint8
{
	MAPJUMP_FADE_KIND_NONE                   = 0,
	MAPJUMP_FADE_KIND_FADEOUT                = 1,
	MAPJUMP_FADE_KIND_WHITEOUT               = 2,
	MAPJUMP_FADE_KIND_WIPEOUT                = 3,
	MAPJUMP_FADE_KIND_MAX                    = 4,
};

// Enum TresGame.ETresWorldAreaCode
// NumValues: 0x0011
enum class ETresWorldAreaCode : uint8
{
	TRES_WAID_AREA_00                        = 0,
	TRES_WAID_AREA_01                        = 1,
	TRES_WAID_AREA_02                        = 2,
	TRES_WAID_AREA_03                        = 3,
	TRES_WAID_AREA_04                        = 4,
	TRES_WAID_AREA_05                        = 5,
	TRES_WAID_AREA_06                        = 6,
	TRES_WAID_AREA_07                        = 7,
	TRES_WAID_AREA_08                        = 8,
	TRES_WAID_AREA_09                        = 9,
	TRES_WAID_AREA_10                        = 10,
	TRES_WAID_AREA_11                        = 11,
	TRES_WAID_AREA_12                        = 12,
	TRES_WAID_AREA_13                        = 13,
	TRES_WAID_AREA_14                        = 14,
	TRES_WAID_AREA_15                        = 15,
	TRES_WAID_AREA_MAX                       = 16,
};

// Enum TresGame.ETresWorldCode
// NumValues: 0x0021
enum class ETresWorldCode : uint8
{
	TRES_WCID_EX                             = 0,
	TRES_WCID_BT                             = 1,
	TRES_WCID_DB                             = 2,
	TRES_WCID_DW                             = 3,
	TRES_WCID_HE                             = 4,
	TRES_WCID_TS                             = 5,
	TRES_WCID_CS                             = 6,
	TRES_WCID_RA                             = 7,
	TRES_WCID_FZ                             = 8,
	TRES_WCID_CA                             = 9,
	TRES_WCID_PO                             = 10,
	TRES_WCID_MI                             = 11,
	TRES_WCID_TT                             = 12,
	TRES_WCID_YT                             = 13,
	TRES_WCID_KG                             = 14,
	TRES_WCID_RE                             = 15,
	TRES_WCID_DC                             = 16,
	TRES_WCID_WI                             = 17,
	TRES_WCID_IN                             = 18,
	TRES_WCID_BX                             = 19,
	TRES_WCID_SR                             = 20,
	TRES_WCID_CO                             = 21,
	TRES_WCID_EW                             = 22,
	TRES_WCID_DI                             = 23,
	TRES_WCID_RG                             = 24,
	TRES_WCID_DP                             = 25,
	TRES_WCID_SF                             = 26,
	TRES_WCID_GM                             = 27,
	TRES_WCID_WM                             = 28,
	TRES_WCID_SP                             = 29,
	TRES_WCID_00                             = 30,
	TRES_WCID_ZZ                             = 31,
	TRES_WCID_MAX                            = 32,
};

// Enum TresGame.ETresGameOverMenuType
// NumValues: 0x0004
enum class ETresGameOverMenuType : uint8
{
	NORMAL                                   = 0,
	BOSSBATTLE                               = 1,
	MISSION_FAILED                           = 2,
	ETresGameOverMenuType_MAX                = 3,
};

// Enum TresGame.ETresGameMiniGameType
// NumValues: 0x0014
enum class ETresGameMiniGameType : uint8
{
	NORMAL                                   = 0,
	TS_GIGAS_BATTLE                          = 1,
	TS_GIGAS_GAME                            = 2,
	RA_FESTIVAL_DANCE                        = 3,
	FZ_SNOWCURLING                           = 4,
	BX_FLASHTRACER                           = 5,
	BX_DARKBAYMAX_RAIL                       = 6,
	BX_DARKBAYMAX_NEAR                       = 7,
	CA_BP_TUTORIAL                           = 8,
	CA_BOARD_ENEMYSHIP                       = 9,
	CA_LUXORD_COMPE                          = 10,
	CA_FD_MAELSTROM                          = 11,
	HE_PUDDING                               = 12,
	TS_PUDDING                               = 13,
	RA_PUDDING                               = 14,
	MI_PUDDING                               = 15,
	FZ_PUDDING                               = 16,
	BX_PUDDING                               = 17,
	CA_PUDDING                               = 18,
	ETresGameMiniGameType_MAX                = 19,
};

// Enum TresGame.ETresGameOverKind
// NumValues: 0x0004
enum class ETresGameOverKind : uint8
{
	GAMEOVER_KIND_NORMAL                     = 0,
	GAMEOVER_KIND_MISSION_FAILED             = 1,
	GAMEOVER_KIND_GUMISHIP                   = 2,
	GAMEOVER_KIND_MAX                        = 3,
};

// Enum TresGame.ETresPlayerAbilityGrowthType
// NumValues: 0x0005
enum class ETresPlayerAbilityGrowthType : uint8
{
	TYPE_A                                   = 0,
	TYPE_B                                   = 1,
	TYPE_C                                   = 2,
	_MAX                                     = 3,
	ETresPlayerAbilityGrowthType_MAX         = 4,
};

// Enum TresGame.ETresPlayerGrowthType
// NumValues: 0x0005
enum class ETresPlayerGrowthType : uint8
{
	POWER                                    = 0,
	MAGIC                                    = 1,
	DEFENSE                                  = 2,
	_MAX                                     = 3,
	ETresPlayerGrowthType_MAX                = 4,
};

// Enum TresGame.ETresGameLevelID
// NumValues: 0x0005
enum class ETresGameLevelID : uint8
{
	TRES_GAME_LVID_BEGINNER                  = 0,
	TRES_GAME_LVID_STANDARD                  = 1,
	TRES_GAME_LVID_PROUD                     = 2,
	TRES_GAME_LVID_CRITICAL                  = 3,
	TRES_GAME_LVID_MAX                       = 4,
};

// Enum TresGame.ETresUIMainCommandTitleKind
// NumValues: 0x0006
enum class ETresUIMainCommandTitleKind : uint8
{
	None                                     = 0,
	Logo                                     = 1,
	Button                                   = 2,
	ShootLock                                = 3,
	Operation                                = 4,
	ETresUIMainCommandTitleKind_MAX          = 5,
};

// Enum TresGame.ETresUICheatCategory
// NumValues: 0x0005
enum class ETresUICheatCategory : uint8
{
	None                                     = 0,
	Battle                                   = 1,
	Support                                  = 2,
	Max                                      = 3,
	ETresUICheatCategory_MAX                 = 4,
};

// Enum TresGame.ETresUISlideShowDataType
// NumValues: 0x0004
enum class ETresUISlideShowDataType : uint32
{
	Simple                                   = 0,
	Gorgeous                                 = 1,
	Max                                      = 2,
	ETresUISlideShowDataType_MAX             = 3,
};

// Enum TresGame.EActionCommandSearchMethod
// NumValues: 0x0003
enum class EActionCommandSearchMethod : uint8
{
	Latest                                   = 0,
	Oldest                                   = 1,
	EActionCommandSearchMethod_MAX           = 2,
};

// Enum TresGame.EHudCommandActionCommandType
// NumValues: 0x0008
enum class EHudCommandActionCommandType : uint8
{
	ACTION_COMMAND_TYPE_HATENA               = 0,
	ACTION_COMMAND_TYPE_WEP                  = 1,
	ACTION_COMMAND_TYPE_ATF                  = 2,
	ACTION_COMMAND_TYPE_DMAGIC               = 3,
	ACTION_COMMAND_TYPE_FRIEND               = 4,
	ACTION_COMMAND_TYPE_LINK                 = 5,
	ACTION_COMMAND_TYPE_MAX                  = 6,
	ACTION_COMMAND_TYPE_STYLE_POINT_GAUGE    = 100,
};

// Enum TresGame.ETresCockpitActionSelectCategory
// NumValues: 0x0005
enum class ETresCockpitActionSelectCategory : uint8
{
	TCASC_NONE                               = 0,
	TCASC_COMMAND                            = 1,
	TCASC_MISSION                            = 2,
	TCASC_STYLE_POINT_GAUGE                  = 3,
	TCASC_MAX                                = 4,
};

// Enum TresGame.ETresCockpitCmdCategory
// NumValues: 0x0013
enum class ETresCockpitCmdCategory : uint8
{
	TCCC_NONE                                = 0,
	TCCC_BATTLE                              = 1,
	TCCC_ACTION                              = 2,
	TCCC_CHANGE                              = 3,
	TCCC_CHANGE_FINISH                       = 4,
	TCCC_AFLOW                               = 5,
	TCCC_AFLOW_FINISH                        = 6,
	TCCC_FRIEND                              = 7,
	TCCC_SFLOW                               = 8,
	TCCC_STYLE_POINT_GAUGE                   = 9,
	TCCC_DMAGIC                              = 10,
	TCCC_VEHICLE                             = 11,
	TCCC_SHIP                                = 12,
	TCCC_EVENT                               = 13,
	TCCC_EVENT2                              = 14,
	TCCC_EVENT3                              = 15,
	TCCC_RAILSP                              = 16,
	TCCC_OTHER                               = 17,
	TCCC_MAX                                 = 18,
};

// Enum TresGame.ETresUIMessageBGColor
// NumValues: 0x0005
enum class ETresUIMessageBGColor : uint8
{
	MESSAGE_BG_COLOR_BLACK                   = 0,
	MESSAGE_BG_COLOR_RED                     = 1,
	MESSAGE_BG_COLOR_BLUE                    = 2,
	MESSAGE_BG_COLOR_DEBUG                   = 3,
	MESSAGE_BG_COLOR_MAX                     = 4,
};

// Enum TresGame.ETresUIMessageTitleType
// NumValues: 0x0004
enum class ETresUIMessageTitleType : uint8
{
	MESSAGE_TITLE_TYPE_NONE                  = 0,
	MESSAGE_TITLE_TYPE_INFORMATION           = 1,
	MESSAGE_TITLE_TYPE_QUESTION              = 2,
	MESSAGE_TITLE_TYPE_MAX                   = 3,
};

// Enum TresGame.ETresUICommonAction
// NumValues: 0x0007
enum class ETresUICommonAction : uint8
{
	TUCA_Open                                = 0,
	TUCA_Close                               = 1,
	TUCA_Decide                              = 2,
	TUCA_DecideClose                         = 3,
	TUCA_Open2                               = 4,
	TUCA_DecideClose2                        = 5,
	TUCA_MAX                                 = 6,
};

// Enum TresGame.ETresUIPadButtonType
// NumValues: 0x0027
enum class ETresUIPadButtonType : uint8
{
	TUPBT_NONE                               = 0,
	TUPBT_RIGHT                              = 1,
	TUPBT_UP                                 = 2,
	TUPBT_LEFT                               = 3,
	TUPBT_DOWN                               = 4,
	TUPBT_R1                                 = 5,
	TUPBT_L1                                 = 6,
	TUPBT_R2                                 = 7,
	TUPBT_L2                                 = 8,
	TUPBT_TOUCH                              = 9,
	TUPBT_R2HOLD                             = 10,
	TUPBT_DECIDE                             = 11,
	TUPBT_CANCEL                             = 12,
	TUPBT_RIGHT_L                            = 13,
	TUPBT_UP_L                               = 14,
	TUPBT_LEFT_L                             = 15,
	TUPBT_DOWN_L                             = 16,
	TUPBT_KEYUP                              = 17,
	TUPBT_KEYLEFT                            = 18,
	TUPBT_KEYDOWN                            = 19,
	TUPBT_KEYRIGHT                           = 20,
	TUPBT_KEYUP_L                            = 21,
	TUPBT_KEYLEFT_L                          = 22,
	TUPBT_KEYDOWN_L                          = 23,
	TUPBT_KEYRIGHT_L                         = 24,
	TUPBT_TOUCH_L                            = 25,
	TUPBT_R2_L                               = 26,
	TUPBT_L2_L                               = 27,
	TUPBT_OPTION                             = 28,
	TUPBT_LSTICK                             = 29,
	TUPBT_RSTICK                             = 30,
	TUPBT_LSTICK_UP                          = 31,
	TUPBT_LSTICK_DOWN                        = 32,
	TUPBT_LSTICK_LEFT                        = 33,
	TUPBT_LSTICK_RIGHT                       = 34,
	TUPBT_L3                                 = 35,
	TUPBT_DECIDE_L                           = 36,
	TUPBT_CANCEL_L                           = 37,
	TUPBT_MAX                                = 38,
};

// Enum TresGame.ETresUIFaceUniqueID
// NumValues: 0x0006
enum class ETresUIFaceUniqueID : uint8
{
	TRES_FACE_UID_UNKNOWN                    = 0,
	TRES_FACE_UID_LEON                       = 150,
	TRES_FACE_UID_AERITH                     = 151,
	TRES_FACE_UID_YUFFIE                     = 152,
	TRES_FACE_UID_CID                        = 153,
	TRES_FACE_UID_MAX                        = 154,
};

// Enum TresGame.ETresUIDataVersion
// NumValues: 0x0004
enum class ETresUIDataVersion : uint8
{
	None                                     = 0,
	DLC                                      = 1,
	Max                                      = 2,
	ETresUIDataVersion_MAX                   = 3,
};

// Enum TresGame.ETresUIDialogColor
// NumValues: 0x0003
enum class ETresUIDialogColor : uint8
{
	World                                    = 0,
	DH                                       = 1,
	ETresUIDialogColor_MAX                   = 2,
};

// Enum TresGame.ETresUIGameDataInstallMessageType
// NumValues: 0x0003
enum class ETresUIGameDataInstallMessageType : uint8
{
	Block                                    = 0,
	Wait                                     = 1,
	ETresUIGameDataInstallMessageType_MAX    = 2,
};

// Enum TresGame.ETresUIDictionaryEnemyCategory
// NumValues: 0x0006
enum class ETresUIDictionaryEnemyCategory : uint8
{
	Heartless                                = 0,
	Nobody                                   = 1,
	Unversed                                 = 2,
	Other                                    = 3,
	Max                                      = 4,
	ETresUIDictionaryEnemyCategory_MAX       = 5,
};

// Enum TresGame.ETresUIValueCompareType
// NumValues: 0x0008
enum class ETresUIValueCompareType : uint8
{
	GreaterEq                                = 0,
	Grater                                   = 1,
	LessEq                                   = 2,
	Less                                     = 3,
	Equal                                    = 4,
	NotEqual                                 = 5,
	None                                     = 6,
	ETresUIValueCompareType_MAX              = 7,
};

// Enum TresGame.ETresUICharaID
// NumValues: 0x001B
enum class ETresUICharaID : uint8
{
	SORA                                     = 0,
	RIKU                                     = 1,
	KAIRI                                    = 2,
	MICKEY                                   = 3,
	DONALD                                   = 4,
	GOOFY                                    = 5,
	TERRA                                    = 6,
	VENTUS                                   = 7,
	AQUA                                     = 8,
	ROXAS                                    = 9,
	LEA                                      = 10,
	XION                                     = 11,
	JACK_SPARROW                             = 12,
	WOODY                                    = 13,
	BUZZ                                     = 14,
	HERCULES                                 = 15,
	RAPUNZEL                                 = 16,
	FLYNN                                    = 17,
	SULLEY                                   = 18,
	MIKE                                     = 19,
	BOO                                      = 20,
	MARSHMALLOW                              = 21,
	BAYMAX                                   = 22,
	IENZO                                    = 23,
	PENCE                                    = 24,
	UNKNOWN                                  = 25,
	ETresUICharaID_MAX                       = 26,
};

// Enum TresGame.ETresUILSIScoreType
// NumValues: 0x0008
enum class ETresUILSIScoreType : uint32
{
	Score                                    = 0,
	Stage                                    = 1,
	Win                                      = 2,
	BarnyardSports                           = 3,
	TheMusicalFarmer                         = 4,
	HowToPlayGolf                            = 5,
	HowToPlayBaseball                        = 6,
	ETresUILSIScoreType_MAX                  = 7,
};

// Enum TresGame.ETresUIShopType
// NumValues: 0x0006
enum class ETresUIShopType : uint8
{
	Normal                                   = 0,
	Gummi_Huey                               = 1,
	Gummi_Dewey                              = 2,
	Gummi_Louie                              = 3,
	Max                                      = 4,
	ETresUIShopType_MAX                      = 5,
};

// Enum TresGame.ETresUIActorAnimType
// NumValues: 0x0006
enum class ETresUIActorAnimType : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	IdleBreak1                               = 2,
	IdleBreak2                               = 3,
	Max                                      = 4,
	ETresUIActorAnimType_MAX                 = 5,
};

// Enum TresGame.ETresUIGradeTextValue
// NumValues: 0x0008
enum class ETresUIGradeTextValue : uint8
{
	TOOFAST                                  = 0,
	GOOD                                     = 1,
	EXCELLENT                                = 2,
	TOOSLOW                                  = 3,
	SUCCESSFUL                               = 4,
	Max                                      = 5,
	None                                     = 255,
	ETresUIGradeTextValue_MAX                = 256,
};

// Enum TresGame.ETresUICinematicCockpitID
// NumValues: 0x0004
enum class ETresUICinematicCockpitID : uint8
{
	None                                     = 0,
	HudOlaf                                  = 1,
	HudLeft                                  = 2,
	ETresUICinematicCockpitID_MAX            = 3,
};

// Enum TresGame.ETresUIHudPuddingCountDown
// NumValues: 0x0007
enum class ETresUIHudPuddingCountDown : uint8
{
	Three                                    = 0,
	Two                                      = 1,
	One                                      = 2,
	Start                                    = 3,
	Finish                                   = 4,
	MAX                                      = 5,
	ETresUIHudPuddingCountDown_MAX           = 6,
};

// Enum TresGame.ETresUIHudBaymaxHero
// NumValues: 0x0006
enum class ETresUIHudBaymaxHero : uint8
{
	Lemon                                    = 0,
	Tomago                                   = 1,
	Wasabi                                   = 2,
	Fred                                     = 3,
	MAX                                      = 4,
	ETresUIHudBaymaxHero_MAX                 = 5,
};

// Enum TresGame.ETresUIHudBaymaxResult
// NumValues: 0x0006
enum class ETresUIHudBaymaxResult : uint8
{
	RankA                                    = 0,
	RankB                                    = 1,
	RankC                                    = 2,
	RankD                                    = 3,
	MAX                                      = 4,
	ETresUIHudBaymaxResult_MAX               = 5,
};

// Enum TresGame.ETresUIHudBaymaxCountDown
// NumValues: 0x0009
enum class ETresUIHudBaymaxCountDown : uint8
{
	Ready                                    = 0,
	Three                                    = 1,
	Two                                      = 2,
	One                                      = 3,
	Go                                       = 4,
	Finish                                   = 5,
	Finish_End                               = 6,
	MAX                                      = 7,
	ETresUIHudBaymaxCountDown_MAX            = 8,
};

// Enum TresGame.ETresUIHudBaymaxKind
// NumValues: 0x0007
enum class ETresUIHudBaymaxKind : uint8
{
	None                                     = 0,
	FlashTracer                              = 1,
	FlashTracer_MiniGame                     = 2,
	HeroRescue                               = 3,
	DarkCube                                 = 4,
	MAX                                      = 5,
	ETresUIHudBaymaxKind_MAX                 = 6,
};

// Enum TresGame.ETresUINauticalChartPoint
// NumValues: 0x000F
enum class ETresUINauticalChartPoint : uint8
{
	No1                                      = 0,
	No2                                      = 1,
	No3                                      = 2,
	No4                                      = 3,
	No5                                      = 4,
	No6                                      = 5,
	No7                                      = 6,
	No8                                      = 7,
	No9                                      = 8,
	No10                                     = 9,
	No11                                     = 10,
	No12                                     = 11,
	No13                                     = 12,
	MAX                                      = 13,
	ETresUINauticalChartPoint_MAX            = 14,
};

// Enum TresGame.ETresUIHudBlackPearlAlert
// NumValues: 0x0005
enum class ETresUIHudBlackPearlAlert : uint8
{
	Normal                                   = 0,
	Blink1                                   = 1,
	Blink2                                   = 2,
	MAX                                      = 3,
	ETresUIHudBlackPearlAlert_MAX            = 4,
};

// Enum TresGame.ETresUIHudBlackPearlMarker
// NumValues: 0x0004
enum class ETresUIHudBlackPearlMarker : uint8
{
	Player                                   = 0,
	BlackPearl                               = 1,
	MAX                                      = 2,
	ETresUIHudBlackPearlMarker_MAX           = 3,
};

// Enum TresGame.ETresUIHudSpecialShipMarker
// NumValues: 0x0004
enum class ETresUIHudSpecialShipMarker : uint8
{
	Player                                   = 0,
	Enemy                                    = 1,
	MAX                                      = 2,
	ETresUIHudSpecialShipMarker_MAX          = 3,
};

// Enum TresGame.ETresUIHudSpecialShip
// NumValues: 0x0004
enum class ETresUIHudSpecialShip : uint8
{
	Normal                                   = 0,
	Marker                                   = 1,
	MAX                                      = 2,
	ETresUIHudSpecialShip_MAX                = 3,
};

// Enum TresGame.ETresUIHudScoreMode
// NumValues: 0x0005
enum class ETresUIHudScoreMode : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Pudding                                  = 2,
	MAX                                      = 3,
	ETresUIHudScoreMode_MAX                  = 4,
};

// Enum TresGame.ETresUIHudCommonIcon
// NumValues: 0x000E
enum class ETresUIHudCommonIcon : uint8
{
	Attraction                               = 0,
	Ralph                                    = 1,
	Ariel                                    = 2,
	RaDance                                  = 3,
	SnowSlide                                = 4,
	Pudding_Cherry                           = 5,
	Pudding_Strawberry                       = 6,
	Pudding_Orange                           = 7,
	Pudding_Banana                           = 8,
	Pudding_Grape                            = 9,
	Pudding_Melon                            = 10,
	Pudding_Watermelon                       = 11,
	MAX                                      = 12,
	ETresUIHudCommonIcon_MAX                 = 13,
};

// Enum TresGame.ETresUIHudCommonKind
// NumValues: 0x000B
enum class ETresUIHudCommonKind : uint8
{
	None                                     = 0,
	Score                                    = 1,
	Score_Chain                              = 2,
	Score5                                   = 3,
	Score5_Chain                             = 4,
	Score6                                   = 5,
	Score6_Chain                             = 6,
	Height                                   = 7,
	HitCount                                 = 8,
	MAX                                      = 9,
	ETresUIHudCommonKind_MAX                 = 10,
};

// Enum TresGame.ETresUIHudCommandExKind
// NumValues: 0x0017
enum class ETresUIHudCommandExKind : uint8
{
	None                                     = 0,
	Railscope1                               = 1,
	Railscope2                               = 2,
	RailChange                               = 3,
	HeWorkshop                               = 4,
	HeWorkshop_Finish                        = 5,
	TsToyGame                                = 6,
	RaDanceCommand                           = 7,
	RaDanceRapunzel                          = 8,
	RaDanceRapunzel_Finish                   = 9,
	BxCommand                                = 10,
	BxDarkBaymax                             = 11,
	BxDarkBaymax_Rail                        = 12,
	BxDarkBaymax_Finish                      = 13,
	CaSpecialShipCommand                     = 14,
	CaBlackPearlCommand                      = 15,
	ShootFlow_Rainbow                        = 16,
	ShootFlow_Burst                          = 17,
	ShootFlow_Shining                        = 18,
	ShootFlow_DarkVolley                     = 19,
	ShootFlow_BurstR                         = 20,
	MAX                                      = 21,
	ETresUIHudCommandExKind_MAX              = 22,
};

// Enum TresGame.ETresUISnowSlideRank
// NumValues: 0x0006
enum class ETresUISnowSlideRank : uint8
{
	A                                        = 0,
	B                                        = 1,
	C                                        = 2,
	D                                        = 3,
	Max                                      = 4,
	ETresUISnowSlideRank_MAX                 = 5,
};

// Enum TresGame.ETresUISnowSlideCountDownType
// NumValues: 0x0007
enum class ETresUISnowSlideCountDownType : uint8
{
	Three                                    = 0,
	Two                                      = 1,
	One                                      = 2,
	Start                                    = 3,
	Finish                                   = 4,
	Max                                      = 5,
	ETresUISnowSlideCountDownType_MAX        = 6,
};

// Enum TresGame.ETresUIOlafPartsType
// NumValues: 0x0005
enum class ETresUIOlafPartsType : uint8
{
	Head                                     = 0,
	Body                                     = 1,
	Leg                                      = 2,
	Max                                      = 3,
	ETresUIOlafPartsType_MAX                 = 4,
};

// Enum TresGame.ETresUIGigasGameResultRank
// NumValues: 0x0006
enum class ETresUIGigasGameResultRank : uint8
{
	A                                        = 0,
	B                                        = 1,
	C                                        = 2,
	D                                        = 3,
	Max                                      = 4,
	ETresUIGigasGameResultRank_MAX           = 5,
};

// Enum TresGame.ETresUIGigasGameStartSignalType
// NumValues: 0x0003
enum class ETresUIGigasGameStartSignalType : uint8
{
	Ready                                    = 0,
	Start                                    = 1,
	ETresUIGigasGameStartSignalType_MAX      = 2,
};

// Enum TresGame.ETresUIGigasGameGimmickType
// NumValues: 0x0004
enum class ETresUIGigasGameGimmickType : uint8
{
	SparkTrap                                = 0,
	HeatBlast                                = 1,
	CrystalSmash                             = 2,
	ETresUIGigasGameGimmickType_MAX          = 3,
};

// Enum TresGame.ETresUITimerType
// NumValues: 0x0003
enum class ETresUITimerType : uint8
{
	CountDown                                = 0,
	CountUp                                  = 1,
	ETresUITimerType_MAX                     = 2,
};

// Enum TresGame.ETresUITimerColor
// NumValues: 0x0004
enum class ETresUITimerColor : uint8
{
	Common                                   = 0,
	Red1                                     = 1,
	Red2                                     = 2,
	ETresUITimerColor_MAX                    = 3,
};

// Enum TresGame.ETresUISubtitleUsage
// NumValues: 0x0004
enum class ETresUISubtitleUsage : uint8
{
	Cutscene                                 = 0,
	FieldVoice                               = 1,
	Talk                                     = 2,
	ETresUISubtitleUsage_MAX                 = 3,
};

// Enum TresGame.ETresUIMissionGageIconType
// NumValues: 0x0005
enum class ETresUIMissionGageIconType : uint8
{
	ComicalBattle1                           = 0,
	ComicalBattle2                           = 1,
	ComicalBattle3                           = 2,
	Max                                      = 3,
	ETresUIMissionGageIconType_MAX           = 4,
};

// Enum TresGame.ETresUILoadingScreenType
// NumValues: 0x0004
enum class ETresUILoadingScreenType : uint8
{
	NORMAL                                   = 0,
	EXTRA                                    = 1,
	Max                                      = 2,
	ETresUILoadingScreenType_MAX             = 3,
};

// Enum TresGame.ETresUILoadingScreenBGColor
// NumValues: 0x0004
enum class ETresUILoadingScreenBGColor : uint8
{
	BLACK                                    = 0,
	WHITE                                    = 1,
	Max                                      = 2,
	ETresUILoadingScreenBGColor_MAX          = 3,
};

// Enum TresGame.EGameOverHintType
// NumValues: 0x0005
enum class EGameOverHintType : uint8
{
	CommonHint                               = 0,
	SpecialHint                              = 1,
	TopPriority                              = 2,
	FixedHit                                 = 3,
	EGameOverHintType_MAX                    = 4,
};

// Enum TresGame.ETresUIFullscreenVideoCallbackType
// NumValues: 0x0004
enum class ETresUIFullscreenVideoCallbackType : uint8
{
	PlayTimeOut                              = 0,
	PlayFinish                               = 1,
	Prepared                                 = 2,
	ETresUIFullscreenVideoCallbackType_MAX   = 3,
};

// Enum TresGame.ETresUIWindowPositionType
// NumValues: 0x0004
enum class ETresUIWindowPositionType : uint8
{
	WINDOW_POSITION_TYPE_NONE                = 0,
	WINDOW_POSITION_TYPE_RATE                = 1,
	WINDOW_POSITION_TYPE_FREE                = 2,
	WINDOW_POSITION_TYPE_MAX                 = 3,
};

// Enum TresGame.ETresUIWindowWaitType
// NumValues: 0x0003
enum class ETresUIWindowWaitType : uint8
{
	WINDOW_WAIT_TYPE_WAIT                    = 0,
	WINDOW_WAIT_TYPE_NO_WAIT                 = 1,
	WINDOW_WAIT_TYPE_MAX                     = 2,
};

// Enum TresGame.ETresUICutsceneTextHideMethod
// NumValues: 0x0003
enum class ETresUICutsceneTextHideMethod : uint8
{
	None                                     = 0,
	Fade                                     = 1,
	ETresUICutsceneTextHideMethod_MAX        = 2,
};

// Enum TresGame.ETresUICutsceneTextShowMethod
// NumValues: 0x0004
enum class ETresUICutsceneTextShowMethod : uint8
{
	None                                     = 0,
	Fade                                     = 1,
	LineFade                                 = 2,
	ETresUICutsceneTextShowMethod_MAX        = 3,
};

// Enum TresGame.ETresUITextAlignV
// NumValues: 0x0004
enum class ETresUITextAlignV : uint8
{
	Top                                      = 0,
	Center                                   = 1,
	Bottom                                   = 2,
	ETresUITextAlignV_MAX                    = 3,
};

// Enum TresGame.ETresUITextAlignH
// NumValues: 0x0004
enum class ETresUITextAlignH : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	ETresUITextAlignH_MAX                    = 3,
};

// Enum TresGame.ETresUIMissionGageColorType
// NumValues: 0x0005
enum class ETresUIMissionGageColorType : uint8
{
	Yellow                                   = 0,
	Red                                      = 1,
	Green                                    = 2,
	Max                                      = 3,
	ETresUIMissionGageColorType_MAX          = 4,
};

// Enum TresGame.ETresUIMapMarkerType
// NumValues: 0x000A
enum class ETresUIMapMarkerType : uint8
{
	SavePoint                                = 0,
	Shop                                     = 1,
	MapLine                                  = 2,
	EnemyGigas                               = 3,
	EnemyGigasAce                            = 4,
	Gigas                                    = 5,
	EnemySea                                 = 6,
	EnemySeaLuxord                           = 7,
	Max                                      = 8,
	ETresUIMapMarkerType_MAX                 = 9,
};

// Enum TresGame.ETresVBonusAbilityType
// NumValues: 0x0005
enum class ETresVBonusAbilityType : uint8
{
	NONE                                     = 0,
	EQUIP                                    = 1,
	HAVE                                     = 2,
	_MAX                                     = 3,
	ETresVBonusAbilityType_MAX               = 4,
};

// Enum TresGame.ETresVictoryBonusKind
// NumValues: 0x0022
enum class ETresVictoryBonusKind : uint8
{
	NONE                                     = 0,
	HP_UP3                                   = 1,
	HP_UP5                                   = 2,
	HP_UP10                                  = 3,
	HP_UP15                                  = 4,
	HP_UP30                                  = 5,
	_RESERVE6                                = 6,
	_RESERVE7                                = 7,
	MP_UP3                                   = 8,
	MP_UP5                                   = 9,
	MP_UP10                                  = 10,
	MP_UP20                                  = 11,
	_RESERVE12                               = 12,
	_RESERVE13                               = 13,
	_RESERVE14                               = 14,
	_RESERVE15                               = 15,
	DEF_SLOT_UP1                             = 16,
	ACC_SLOT_UP1                             = 17,
	ITEM_SLOT_UP1                            = 18,
	_RESERVE19                               = 19,
	_RESERVE20                               = 20,
	_RESERVE21                               = 21,
	_RESERVE22                               = 22,
	_RESERVE23                               = 23,
	MELEM_FIRE                               = 24,
	MELEM_BLIZZARD                           = 25,
	MELEM_THUNDER                            = 26,
	MELEM_WATER                              = 27,
	MELEM_AERO                               = 28,
	MELEM_CURE                               = 29,
	_RESERVE30                               = 30,
	_RESERVE31                               = 31,
	TYPE_MAX                                 = 32,
	ETresVictoryBonusKind_MAX                = 33,
};

// Enum TresGame.WinniePuzzleStopElapsedTimeTiming
// NumValues: 0x0003
enum class EWinniePuzzleStopElapsedTimeTiming : uint8
{
	WhenShoot                                = 0,
	PlayerUnitsMoved                         = 1,
	WinniePuzzleStopElapsedTimeTiming_MAX    = 2,
};

// Enum TresGame.WinniePuzzleSlopeActionRemoveFindingTarget
// NumValues: 0x0005
enum class EWinniePuzzleSlopeActionRemoveFindingTarget : uint8
{
	DontRemove                               = 0,
	SlopeDirection                           = 1,
	Around                                   = 2,
	All                                      = 3,
	WinniePuzzleSlopeActionRemoveFindingTarget_MAX = 4,
};

// Enum TresGame.WinniePuzzleUnitAppearColumnDependencyDirection
// NumValues: 0x0003
enum class EWinniePuzzleUnitAppearColumnDependencyDirection : uint8
{
	FrontToBack                              = 0,
	BackToFront                              = 1,
	WinniePuzzleUnitAppearColumnDependencyDirection_MAX = 2,
};

// Enum TresGame.WinniePuzzleUnitAppearDelayType
// NumValues: 0x0004
enum class EWinniePuzzleUnitAppearDelayType : uint8
{
	None                                     = 0,
	ColumnDependency                         = 1,
	Random                                   = 2,
	WinniePuzzleUnitAppearDelayType_MAX      = 3,
};

// Enum TresGame.WinniePuzzleVoicePriority
// NumValues: 0x0004
enum class EWinniePuzzleVoicePriority : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	WinniePuzzleVoicePriority_MAX            = 3,
};

// Enum TresGame.WinniePuzzleVoice
// NumValues: 0x0020
enum class EWinniePuzzleVoice : uint8
{
	PlayerGameStart                          = 0,
	PlayerShot                               = 1,
	PlayerStrike                             = 2,
	PlayerHarvestStart                       = 3,
	PlayerCharacterBonusReply                = 4,
	PlayerAdditionalInvocation               = 5,
	PlayerClearOrFinish                      = 6,
	RabbitStrike                             = 7,
	RabbitChainOccurred                      = 8,
	RabbitHarvestStart                       = 9,
	RabbitHarvestedNormal                    = 10,
	RabbitHarvestedGood                      = 11,
	RabbitHarvestHint                        = 12,
	RabbitBeforeHarvest                      = 13,
	PoohHungry                               = 14,
	PoohCatchHoneyPot                        = 15,
	PoohEatingHoney                          = 16,
	PoohIdle                                 = 17,
	PoohClearOrFinish                        = 18,
	PoohLevelUp                              = 19,
	TiggerInvokable                          = 20,
	TiggerInvoke                             = 21,
	TiggerInvokableRepeat                    = 22,
	LumpyInvokable                           = 23,
	LumpyInvoke                              = 24,
	LumpyInvokableRepeat                     = 25,
	GopherInvokable                          = 26,
	GopherInvoke                             = 27,
	GopherInvokableRepeat                    = 28,
	Num                                      = 29,
	None                                     = 255,
	WinniePuzzleVoice_MAX                    = 256,
};

// Enum TresGame.WinniePuzzleSoundEffect
// NumValues: 0x0012
enum class EWinniePuzzleSoundEffect : uint8
{
	Countdown                                = 0,
	GameStart                                = 1,
	GameClear                                = 2,
	GameOver                                 = 3,
	Match1st                                 = 4,
	Match2nd                                 = 5,
	Match3rd                                 = 6,
	Aiming                                   = 7,
	SwitchUnit                               = 8,
	FillBuckets                              = 9,
	DecreaseBucket                           = 10,
	PowerGauge                               = 11,
	UnitVibration                            = 12,
	AdditionalBonus                          = 13,
	ResultScore                              = 14,
	ResultNewRecord                          = 15,
	ResultEvalution                          = 16,
	WinniePuzzleSoundEffect_MAX              = 17,
};

// Enum TresGame.WinniePuzzleTotalScoreEvalution
// NumValues: 0x0006
enum class EWinniePuzzleTotalScoreEvalution : uint8
{
	None                                     = 0,
	LowerGood                                = 1,
	Good                                     = 2,
	Cool                                     = 3,
	Fantastic                                = 4,
	WinniePuzzleTotalScoreEvalution_MAX      = 5,
};

// Enum TresGame.WinniePuzzleRuleGameOverCondition
// NumValues: 0x0004
enum class EWinniePuzzleRuleGameOverCondition : uint8
{
	None                                     = 0,
	Increase                                 = 1,
	TimeLimit                                = 2,
	WinniePuzzleRuleGameOverCondition_MAX    = 3,
};

// Enum TresGame.WinniePuzzleRuleGameClearCondition
// NumValues: 0x0006
enum class EWinniePuzzleRuleGameClearCondition : uint8
{
	None                                     = 0,
	EarnUnitsNum                             = 1,
	Decrease                                 = 2,
	TimeLimit                                = 3,
	EarnHoneypotsNum                         = 4,
	WinniePuzzleRuleGameClearCondition_MAX   = 5,
};

// Enum TresGame.WinniePuzzlePowerGaugeLevel
// NumValues: 0x000E
enum class EWinniePuzzlePowerGaugeLevel : uint8
{
	Level1                                   = 0,
	Level2                                   = 1,
	Level3                                   = 2,
	Level4                                   = 3,
	Level5                                   = 4,
	Level6                                   = 5,
	Level7                                   = 6,
	Level8                                   = 7,
	Level9                                   = 8,
	Level10                                  = 9,
	Level11                                  = 10,
	Level12                                  = 11,
	Num                                      = 12,
	WinniePuzzlePowerGaugeLevel_MAX          = 13,
};

// Enum TresGame.WinniePuzzleWallVolumeType
// NumValues: 0x0004
enum class EWinniePuzzleWallVolumeType : uint8
{
	Bound                                    = 0,
	Snap                                     = 1,
	None                                     = 2,
	WinniePuzzleWallVolumeType_MAX           = 3,
};

// Enum TresGame.WinniePuzzleBucketFillMoveType
// NumValues: 0x0003
enum class EWinniePuzzleBucketFillMoveType : uint8
{
	InOrder                                  = 0,
	Random                                   = 1,
	WinniePuzzleBucketFillMoveType_MAX       = 2,
};

// Enum TresGame.WinniePuzzleBucketType
// NumValues: 0x0003
enum class EWinniePuzzleBucketType : uint8
{
	Normal                                   = 0,
	Special                                  = 1,
	WinniePuzzleBucketType_MAX               = 2,
};

// Enum TresGame.WinniePuzzleUnitFillType
// NumValues: 0x0003
enum class EWinniePuzzleUnitFillType : uint8
{
	RollOver                                 = 0,
	Growing                                  = 1,
	WinniePuzzleUnitFillType_MAX             = 2,
};

// Enum TresGame.WinniePuzzleUnitAnimationType
// NumValues: 0x0006
enum class EWinniePuzzleUnitAnimationType : uint8
{
	Idle                                     = 0,
	Roll                                     = 1,
	RollEnd                                  = 2,
	Grow                                     = 3,
	GrowWait                                 = 4,
	WinniePuzzleUnitAnimationType_MAX        = 5,
};

// Enum TresGame.WinniePuzzleUnitState
// NumValues: 0x0008
enum class EWinniePuzzleUnitState : uint8
{
	Unit_State_Idle                          = 0,
	Unit_State_Roll                          = 1,
	Unit_State_Roll_End                      = 2,
	Unit_State_Grow                          = 3,
	Unit_State_Pool                          = 4,
	Unit_State_Particle_Destroyed            = 5,
	Unit_State_None                          = 255,
	Unit_State_MAX                           = 256,
};

// Enum TresGame.WinniePuzzleUnitType
// NumValues: 0x0017
enum class EWinniePuzzleUnitType : uint8
{
	Carrot                                   = 0,
	Eggplant                                 = 1,
	Garlic                                   = 2,
	Pumpkin                                  = 3,
	Tomato                                   = 4,
	Zucchini                                 = 5,
	VegetableBoss                            = 6,
	VegetableBossCollision                   = 7,
	Apple                                    = 10,
	Blackberry                               = 11,
	GreenApple                               = 12,
	Lemon                                    = 13,
	Orange                                   = 14,
	Pear                                     = 15,
	Anemone                                  = 20,
	Daffodil                                 = 21,
	Dahlia                                   = 22,
	Gerbera                                  = 23,
	OrangePixie                              = 24,
	RoofFlower                               = 25,
	Honeypot                                 = 26,
	None                                     = 255,
	WinniePuzzleUnitType_MAX                 = 256,
};

// Enum TresGame.WinniePuzzleBoundStartMoveDirection
// NumValues: 0x0003
enum class EWinniePuzzleBoundStartMoveDirection : uint8
{
	UpLeft                                   = 0,
	UpRight                                  = 1,
	WinniePuzzleBoundStartMoveDirection_MAX  = 2,
};

// Enum TresGame.WinniePuzzleCharacterBonusGaugeType
// NumValues: 0x0004
enum class EWinniePuzzleCharacterBonusGaugeType : uint8
{
	Single                                   = 0,
	Dual                                     = 1,
	None                                     = 2,
	WinniePuzzleCharacterBonusGaugeType_MAX  = 3,
};

// Enum TresGame.WinniePuzzleCharacterBonusType
// NumValues: 0x0004
enum class EWinniePuzzleCharacterBonusType : uint8
{
	Tigger_Bound                             = 0,
	Lumpy_Decrease                           = 1,
	Gopher_Bomb                              = 2,
	WinniePuzzleCharacterBonusType_MAX       = 3,
};

// Enum TresGame.WinnieCharacterState
// NumValues: 0x0026
enum class EWinnieCharacterState : uint8
{
	Rabbit_State_Idle                        = 0,
	Rabbit_State_See_Player                  = 1,
	Rabbit_State_See_Unit                    = 2,
	Rabbit_State_Happy                       = 3,
	Rabbit_State_Happy_Landing               = 4,
	Rabbit_State_Move_In                     = 5,
	Rabbit_State_Well                        = 6,
	Rabbit_State_Harvest                     = 7,
	Rabbit_State_Harvest_End                 = 8,
	Rabbit_State_Landing                     = 9,
	Rabbit_State_Failure                     = 10,
	Tigger_State_Idle                        = 11,
	Tigger_State_Ready                       = 12,
	Tigger_State_Jump_Start                  = 13,
	Tigger_State_Entry                       = 14,
	Tigger_State_Bound_Ready                 = 15,
	Tigger_State_Bound_Moving                = 16,
	Tigger_State_Standby                     = 17,
	Lumpy_State_Idle                         = 18,
	Lumpy_State_Ready                        = 19,
	Lumpy_State_Decrease                     = 20,
	Lumpy_State_Standby                      = 21,
	Gopher_State_Idle                        = 22,
	Gopher_State_Ready                       = 23,
	Gopher_State_Entry                       = 24,
	Gopher_State_Dive                        = 25,
	Gopher_State_Jump                        = 26,
	Gopher_State_Standby                     = 27,
	Pooh_State_Entry                         = 28,
	Pooh_State_Idle                          = 29,
	Pooh_State_Hungry                        = 30,
	Pooh_State_Happy                         = 31,
	Pooh_State_Happy_End                     = 32,
	Pooh_State_Level_Up                      = 33,
	Pooh_State_Eat_Honey                     = 34,
	Pooh_State_Down                          = 35,
	State_None                               = 255,
	WinnieCharacterState_MAX                 = 256,
};

// Enum TresGame.WinnieCharacterAnimationType
// NumValues: 0x002F
enum class EWinnieCharacterAnimationType : uint8
{
	Idle                                     = 0,
	Walk                                     = 1,
	JumpStart                                = 2,
	JumpLoop                                 = 3,
	RabbitSeePlayer                          = 4,
	RabbitSeeUnit                            = 5,
	RabbitHappy                              = 6,
	RabbitHappyLanding                       = 7,
	RabbitWell                               = 8,
	RabbitHarvest                            = 9,
	RabbitHarvestEnd                         = 10,
	RabbitLanding                            = 11,
	RabbitFailureStart                       = 12,
	RabbitFailureLoop                        = 13,
	SuperJumpStart                           = 14,
	SuperJumpLoop                            = 15,
	SuperJumpBoundL                          = 16,
	SuperJumpBoundR                          = 17,
	TiggerLanding                            = 18,
	TiggerJumpStart                          = 19,
	LumpyIdle                                = 20,
	LumpyRunL                                = 21,
	LumpyRunR                                = 22,
	LumpyRunLoopL                            = 23,
	LumpyRunLoopR                            = 24,
	LumpyEntry                               = 25,
	LumpyStop                                = 26,
	LumpyRunStart                            = 27,
	LumpyRunLoop                             = 28,
	GopherEntry                              = 29,
	GopherOut                                = 30,
	GopherWait                               = 31,
	GopherLookAround                         = 32,
	GopherDive                               = 33,
	GopherJump                               = 34,
	PoohEntry                                = 35,
	PoohIdle                                 = 36,
	PoohHungry                               = 37,
	PoohHappy                                = 38,
	PoohHappyOnce                            = 39,
	PoohHappyEnd                             = 40,
	PoohEatHoneyStart                        = 41,
	PoohEatingHoney                          = 42,
	PoohEatHoneyEnd                          = 43,
	PoohDownStart                            = 44,
	PoohDownLoop                             = 45,
	WinnieCharacterAnimationType_MAX         = 46,
};

// Enum TresGame.WinnieWalkingControlType
// NumValues: 0x0003
enum class EWinnieWalkingControlType : uint8
{
	WalkingWithStick                         = 0,
	WalkingWithDPad                          = 1,
	WinnieWalkingControlType_MAX             = 2,
};

// Enum TresGame.WinniePuzzlePlayerState
// NumValues: 0x000E
enum class EWinniePuzzlePlayerState : uint8
{
	Player_State_Entry                       = 0,
	Player_State_Idle                        = 1,
	Player_State_Walk                        = 2,
	Player_State_Run                         = 3,
	Player_State_Turn                        = 4,
	Player_State_Prepare_Shot                = 5,
	Player_State_Shot                        = 6,
	Player_State_Roll                        = 7,
	Player_State_Wait_Harvest                = 8,
	Player_State_Greeting                    = 9,
	Player_State_Success                     = 10,
	Player_State_Failure                     = 11,
	Player_State_None                        = 255,
	Player_State_MAX                         = 256,
};

// Enum TresGame.WinniePuzzleResult
// NumValues: 0x0005
enum class EWinniePuzzleResult : uint8
{
	PuzzleResultSuccess                      = 0,
	PuzzleResultFailure                      = 1,
	PuzzleResultFinish                       = 2,
	PuzzleResultNone                         = 255,
	WinniePuzzleResult_MAX                   = 256,
};

// Enum TresGame.WinniePuzzleState
// NumValues: 0x0016
enum class EWinniePuzzleState : uint8
{
	PuzzlePrepare                            = 0,
	PuzzleHelp                               = 1,
	PuzzleUnitAppear                         = 2,
	PuzzleCountdown                          = 3,
	PuzzleStartWait                          = 4,
	PuzzleWait                               = 5,
	PuzzleShootWait                          = 6,
	PuzzlePlayerUnitMoving                   = 7,
	PuzzleUnitRemoving                       = 8,
	PuzzleNoRemovableUnits                   = 9,
	PuzzleSlopeAction                        = 10,
	PuzzleSameKindUnitsRemoving              = 11,
	PuzzleTurnEndProcess                     = 12,
	PuzzleAutoGrow                           = 13,
	PuzzleFillUnits                          = 14,
	PuzzleBound                              = 15,
	PuzzleIncrease                           = 16,
	PuzzleDecrease                           = 17,
	PuzzleBomb                               = 18,
	PuzzleResult                             = 19,
	PuzzleNone                               = 255,
	WinniePuzzleState_MAX                    = 256,
};

// Enum TresGame.WinniePuzzleManagerState
// NumValues: 0x0004
enum class EWinniePuzzleManagerState : uint8
{
	PuzzleManagerMain                        = 0,
	PuzzleManagerRetry                       = 1,
	PuzzleManagerFinalize                    = 2,
	WinniePuzzleManagerState_MAX             = 3,
};

// Enum TresGame.WinniePlayerSituation
// NumValues: 0x0006
enum class EWinniePlayerSituation : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Weapon                                   = 2,
	Battle                                   = 3,
	Fixed                                    = 4,
	WinniePlayerSituation_MAX                = 5,
};

// Enum TresGame.WinniePlayerAnimationType
// NumValues: 0x0029
enum class EWinniePlayerAnimationType : uint8
{
	IdleN                                    = 0,
	IdleB                                    = 1,
	IdleBreakN                               = 2,
	IdleBreakW                               = 3,
	WalkLoopN                                = 4,
	WalkLoopW                                = 5,
	WalkLoopB                                = 6,
	WalkEndL                                 = 7,
	WalkEndLW                                = 8,
	WalkEndLB                                = 9,
	WalkEndR                                 = 10,
	WalkEndRW                                = 11,
	WalkEndRB                                = 12,
	RunStartN                                = 13,
	RunStartW                                = 14,
	RunStartB                                = 15,
	RunLoopN                                 = 16,
	RunLoopW                                 = 17,
	RunLoopB                                 = 18,
	RunEndL                                  = 19,
	RunEndLW                                 = 20,
	RunEndLB                                 = 21,
	RunEndR                                  = 22,
	RunEndRW                                 = 23,
	RunEndRB                                 = 24,
	Turn                                     = 25,
	ShotPrepare                              = 26,
	Shot                                     = 27,
	Strike                                   = 28,
	RollLoop                                 = 29,
	RollEnd                                  = 30,
	Greeting                                 = 31,
	HarvestStart                             = 32,
	HarvestLoop                              = 33,
	HarvestEnd                               = 34,
	Entry                                    = 35,
	SuccessStart                             = 36,
	SuccessLoop                              = 37,
	FailureStart                             = 38,
	FailureLoop                              = 39,
	WinniePlayerAnimationType_MAX            = 40,
};

// Enum TresGame.WinniePuzzleVagetableUnitRoot
// NumValues: 0x0005
enum class EWinniePuzzleVagetableUnitRoot : uint8
{
	UnitRootNorth                            = 0,
	UnitRootSouth                            = 1,
	UnitRootWest                             = 2,
	UnitRootEast                             = 3,
	WinniePuzzleVagetableUnitRoot_MAX        = 4,
};

// Enum TresGame.WinniePuzzleVagetableSlopeDirection
// NumValues: 0x0005
enum class EWinniePuzzleVagetableSlopeDirection : uint8
{
	SlopeNorth                               = 0,
	SlopeSouth                               = 1,
	SlopeWest                                = 2,
	SlopeEast                                = 3,
	WinniePuzzleVagetableSlopeDirection_MAX  = 4,
};

// Enum TresGame.WinniePlayerStayDirection
// NumValues: 0x0005
enum class EWinniePlayerStayDirection : uint8
{
	StayNorth                                = 0,
	StaySouth                                = 1,
	StayWest                                 = 2,
	StayEast                                 = 3,
	WinniePlayerStayDirection_MAX            = 4,
};

// Enum TresGame.WinniePuzzleShootType
// NumValues: 0x0003
enum class EWinniePuzzleShootType : uint8
{
	Pressed                                  = 0,
	Released                                 = 1,
	WinniePuzzleShootType_MAX                = 2,
};

// Enum TresGame.WinniePuzzleType
// NumValues: 0x0006
enum class EWinniePuzzleType : uint8
{
	Vegetable                                = 0,
	Fruit                                    = 1,
	Flower                                   = 2,
	Num                                      = 3,
	None                                     = 255,
	WinniePuzzleType_MAX                     = 256,
};

// Enum TresGame.ETresWoldMapObjID
// NumValues: 0x000D
enum class ETresWoldMapObjID : uint8
{
	WM_OBJ_ID00                              = 0,
	WM_OBJ_SPACE_CENTER                      = 1,
	WM_OBJ_BG                                = 2,
	WM_OBJ_WORLD_SYMBOL                      = 3,
	WM_OBJ_ID_TRAVEL                         = 4,
	WM_OBJ_ID_TREASURE                       = 5,
	WM_OBJ_ID_TERRITORY                      = 6,
	WM_OBJ_WORLD_SYMBOL_DUMMY                = 7,
	WM_OBJ_WORLD_SYMBOL_PREVIEW              = 8,
	WM_OBJ_ID_JUMP_POINT                     = 9,
	WM_OBJ_KG_MIST                           = 10,
	WM_OBJ_TYPE_MAX                          = 11,
	WM_OBJ_MAX                               = 12,
};

// Enum TresGame.ETresWoldPlaceID
// NumValues: 0x0006
enum class ETresWoldPlaceID : uint8
{
	WM_PLACE_ID00                            = 0,
	WM_PLACE_ID01                            = 1,
	WM_PLACE_ID02                            = 2,
	WM_PLACE_ID03                            = 3,
	WM_PLACE_ID04                            = 4,
	WM_PLACE_MAX                             = 5,
};

// ScriptStruct TresGame.TresGummiBaseParam
// 0x114E3D40 (0x114E3D40 - 0x0000)
struct alignas(0x114E3D40) FTresGummiBaseParam final
{
public:
	int32                                         M_nCost;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nHP;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nSpeed;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nPower;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nRoll;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nAttack;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nTurn;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_CT1_PaletteTexture;                              // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT2_PaletteNum;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_CT3_MaskTexture_Base;                            // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_CT3_MaskTexture_Deco;                            // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT4_MaskTexUVIndex;                              // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT5_MaskTexUVTiling;                             // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_CT_CustomColor;                                  // 0x0048(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT_PaletteUse;                                   // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isFlip;                                          // 0x005C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isMaterial;                                      // 0x005D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isPattern;                                       // 0x005E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isSticker;                                       // 0x005F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isColorChange;                                   // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isAnim;                                          // 0x0061(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isUVAnim;                                        // 0x0062(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fPreviewScale;                                   // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiBaseParam) == 0x114E3D40, "Wrong alignment on FTresGummiBaseParam");
static_assert(sizeof(FTresGummiBaseParam) == 0x114E3D40, "Wrong size on FTresGummiBaseParam");
static_assert(offsetof(FTresGummiBaseParam, M_nCost) == 0x000000, "Member 'FTresGummiBaseParam::M_nCost' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_nHP) == 0x000004, "Member 'FTresGummiBaseParam::M_nHP' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_nSpeed) == 0x000008, "Member 'FTresGummiBaseParam::M_nSpeed' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_nPower) == 0x00000C, "Member 'FTresGummiBaseParam::M_nPower' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_nRoll) == 0x000010, "Member 'FTresGummiBaseParam::M_nRoll' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_nAttack) == 0x000014, "Member 'FTresGummiBaseParam::M_nAttack' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_nTurn) == 0x000018, "Member 'FTresGummiBaseParam::M_nTurn' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_CT1_PaletteTexture) == 0x000020, "Member 'FTresGummiBaseParam::M_CT1_PaletteTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_CT2_PaletteNum) == 0x000028, "Member 'FTresGummiBaseParam::M_CT2_PaletteNum' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_CT3_MaskTexture_Base) == 0x000030, "Member 'FTresGummiBaseParam::M_CT3_MaskTexture_Base' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_CT3_MaskTexture_Deco) == 0x000038, "Member 'FTresGummiBaseParam::M_CT3_MaskTexture_Deco' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_CT4_MaskTexUVIndex) == 0x000040, "Member 'FTresGummiBaseParam::M_CT4_MaskTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_CT5_MaskTexUVTiling) == 0x000044, "Member 'FTresGummiBaseParam::M_CT5_MaskTexUVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_CT_CustomColor) == 0x000048, "Member 'FTresGummiBaseParam::M_CT_CustomColor' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_CT_PaletteUse) == 0x000058, "Member 'FTresGummiBaseParam::M_CT_PaletteUse' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_isFlip) == 0x00005C, "Member 'FTresGummiBaseParam::M_isFlip' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_isMaterial) == 0x00005D, "Member 'FTresGummiBaseParam::M_isMaterial' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_isPattern) == 0x00005E, "Member 'FTresGummiBaseParam::M_isPattern' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_isSticker) == 0x00005F, "Member 'FTresGummiBaseParam::M_isSticker' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_isColorChange) == 0x000060, "Member 'FTresGummiBaseParam::M_isColorChange' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_isAnim) == 0x000061, "Member 'FTresGummiBaseParam::M_isAnim' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_isUVAnim) == 0x000062, "Member 'FTresGummiBaseParam::M_isUVAnim' has a wrong offset!");
static_assert(offsetof(FTresGummiBaseParam, M_fPreviewScale) == 0x000064, "Member 'FTresGummiBaseParam::M_fPreviewScale' has a wrong offset!");

// ScriptStruct TresGame.TresDecalData
// 0x11377D20 (0x11377D20 - 0x0000)
struct alignas(0x11377D20) FTresDecalData final
{
public:
	class UMaterial*                              M_DecalMaterial;                                   // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DecalSize;                                       // 0x0008(0x0004)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LifeSpan;                                        // 0x000C(0x0004)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_FadeinTime;                                      // 0x0010(0x0004)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_FadeoutTime;                                     // 0x0014(0x0004)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDecalData) == 0x11377D20, "Wrong alignment on FTresDecalData");
static_assert(sizeof(FTresDecalData) == 0x11377D20, "Wrong size on FTresDecalData");
static_assert(offsetof(FTresDecalData, M_DecalMaterial) == 0x000000, "Member 'FTresDecalData::M_DecalMaterial' has a wrong offset!");
static_assert(offsetof(FTresDecalData, M_DecalSize) == 0x000008, "Member 'FTresDecalData::M_DecalSize' has a wrong offset!");
static_assert(offsetof(FTresDecalData, M_LifeSpan) == 0x00000C, "Member 'FTresDecalData::M_LifeSpan' has a wrong offset!");
static_assert(offsetof(FTresDecalData, M_FadeinTime) == 0x000010, "Member 'FTresDecalData::M_FadeinTime' has a wrong offset!");
static_assert(offsetof(FTresDecalData, M_FadeoutTime) == 0x000014, "Member 'FTresDecalData::M_FadeoutTime' has a wrong offset!");

// ScriptStruct TresGame.TresEffectUnit
// 0x11377D20 (0x11377D20 - 0x0000)
struct FTresEffectUnit final
{
public:
	class UParticleSystem*                        MyParticleSystem;                                  // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             MySoundCue;                                        // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresDecalData                         MyTresDecal;                                       // 0x0010(0x11377D20)(Edit, ExportObject, NoClear, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEffectUnit) == 0x11377D20, "Wrong alignment on FTresEffectUnit");
static_assert(sizeof(FTresEffectUnit) == 0x11377D20, "Wrong size on FTresEffectUnit");
static_assert(offsetof(FTresEffectUnit, MyParticleSystem) == 0x000000, "Member 'FTresEffectUnit::MyParticleSystem' has a wrong offset!");
static_assert(offsetof(FTresEffectUnit, MySoundCue) == 0x000008, "Member 'FTresEffectUnit::MySoundCue' has a wrong offset!");
static_assert(offsetof(FTresEffectUnit, MyTresDecal) == 0x000010, "Member 'FTresEffectUnit::MyTresDecal' has a wrong offset!");

// ScriptStruct TresGame.TresVectorAnim
// 0x0050 (0x0050 - 0x0000)
struct FTresVectorAnim
{
public:
	struct FVector                                M_SrcValue;                                        // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_UpdatedValue;                                    // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_LimitMin;                                        // 0x0018(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_LimitMax;                                        // 0x0024(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           M_pCurveVectorAsset;                               // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bLoopCurveAsset : 1;                             // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bLimitMinValue : 1;                              // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bLimitMaxValue : 1;                              // 0x0038(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x17];                                      // 0x0039(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresVectorAnim) == 0x000008, "Wrong alignment on FTresVectorAnim");
static_assert(sizeof(FTresVectorAnim) == 0x000050, "Wrong size on FTresVectorAnim");
static_assert(offsetof(FTresVectorAnim, M_SrcValue) == 0x000000, "Member 'FTresVectorAnim::M_SrcValue' has a wrong offset!");
static_assert(offsetof(FTresVectorAnim, M_UpdatedValue) == 0x00000C, "Member 'FTresVectorAnim::M_UpdatedValue' has a wrong offset!");
static_assert(offsetof(FTresVectorAnim, M_LimitMin) == 0x000018, "Member 'FTresVectorAnim::M_LimitMin' has a wrong offset!");
static_assert(offsetof(FTresVectorAnim, M_LimitMax) == 0x000024, "Member 'FTresVectorAnim::M_LimitMax' has a wrong offset!");
static_assert(offsetof(FTresVectorAnim, M_pCurveVectorAsset) == 0x000030, "Member 'FTresVectorAnim::M_pCurveVectorAsset' has a wrong offset!");

// ScriptStruct TresGame.TresScaleVectorAnim
// 0xD4F8 (0xD548 - 0x0050)
struct alignas(0xD548) FTresScaleVectorAnim final : public FTresVectorAnim
{
};
static_assert(alignof(FTresScaleVectorAnim) == 0x00D548, "Wrong alignment on FTresScaleVectorAnim");
static_assert(sizeof(FTresScaleVectorAnim) == 0x00D548, "Wrong size on FTresScaleVectorAnim");

// ScriptStruct TresGame.TresComNpcScaleData
// 0x114DBAC0 (0x114DBAC0 - 0x0000)
struct alignas(0x114DBAC0) FTresComNpcScaleData final
{
public:
	float                                         M_fWidthBase;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fWidthMax;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPriortyRangeScale;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcScaleData) == 0x114DBAC0, "Wrong alignment on FTresComNpcScaleData");
static_assert(sizeof(FTresComNpcScaleData) == 0x114DBAC0, "Wrong size on FTresComNpcScaleData");
static_assert(offsetof(FTresComNpcScaleData, M_fWidthBase) == 0x000000, "Member 'FTresComNpcScaleData::M_fWidthBase' has a wrong offset!");
static_assert(offsetof(FTresComNpcScaleData, M_fWidthMax) == 0x000004, "Member 'FTresComNpcScaleData::M_fWidthMax' has a wrong offset!");
static_assert(offsetof(FTresComNpcScaleData, M_fPriortyRangeScale) == 0x000008, "Member 'FTresComNpcScaleData::M_fPriortyRangeScale' has a wrong offset!");

// ScriptStruct TresGame.TresSoKcKeyHoleConnectNode
// 0x0008 (0x0008 - 0x0000)
struct FTresSoKcKeyHoleConnectNode final
{
public:
	TWeakObjectPtr<class ATresSoKcKeyHoleGimmickActor> ConnectableKeyHole;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSoKcKeyHoleConnectNode) == 0x000004, "Wrong alignment on FTresSoKcKeyHoleConnectNode");
static_assert(sizeof(FTresSoKcKeyHoleConnectNode) == 0x000008, "Wrong size on FTresSoKcKeyHoleConnectNode");
static_assert(offsetof(FTresSoKcKeyHoleConnectNode, ConnectableKeyHole) == 0x000000, "Member 'FTresSoKcKeyHoleConnectNode::ConnectableKeyHole' has a wrong offset!");

// ScriptStruct TresGame.TresStateLogInfo
// 0xD23D (0xD23D - 0x0000)
struct alignas(0xD23D) FTresStateLogInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresStateLogInfo) == 0x00D23D, "Wrong alignment on FTresStateLogInfo");
static_assert(sizeof(FTresStateLogInfo) == 0x00D23D, "Wrong size on FTresStateLogInfo");

// ScriptStruct TresGame.BX901_RailSlideProjectileInfo
// 0x114C1910 (0x114C1910 - 0x0000)
struct alignas(0x114C1910) FBX901_RailSlideProjectileInfo final
{
public:
	bool                                          M_bRailSlide;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fWaitTime;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fVelocity;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bRelativeVelocityToOwner;                        // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_vInitOffset;                                     // 0x0010(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bOwnerAsInitOffsetAxis;                          // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bHoming;                                         // 0x001D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_vHomingOffset;                                   // 0x0020(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bTargetAsHomingAxis;                             // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fMinHomingDistance;                              // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingAccel;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingVelocity;                              // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMinHomingDistance_Reflect;                      // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingAccel_Reflect;                            // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingVelocity_Reflect;                      // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_ReflectAttackIDArray;                            // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint32                                        M_bBoolArray[0xA];                                 // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBX901_RailSlideProjectileInfo) == 0x114C1910, "Wrong alignment on FBX901_RailSlideProjectileInfo");
static_assert(sizeof(FBX901_RailSlideProjectileInfo) == 0x114C1910, "Wrong size on FBX901_RailSlideProjectileInfo");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_bRailSlide) == 0x000000, "Member 'FBX901_RailSlideProjectileInfo::M_bRailSlide' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_fWaitTime) == 0x000004, "Member 'FBX901_RailSlideProjectileInfo::M_fWaitTime' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_fVelocity) == 0x000008, "Member 'FBX901_RailSlideProjectileInfo::M_fVelocity' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_bRelativeVelocityToOwner) == 0x00000C, "Member 'FBX901_RailSlideProjectileInfo::M_bRelativeVelocityToOwner' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_vInitOffset) == 0x000010, "Member 'FBX901_RailSlideProjectileInfo::M_vInitOffset' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_bOwnerAsInitOffsetAxis) == 0x00001C, "Member 'FBX901_RailSlideProjectileInfo::M_bOwnerAsInitOffsetAxis' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_bHoming) == 0x00001D, "Member 'FBX901_RailSlideProjectileInfo::M_bHoming' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_vHomingOffset) == 0x000020, "Member 'FBX901_RailSlideProjectileInfo::M_vHomingOffset' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_bTargetAsHomingAxis) == 0x00002C, "Member 'FBX901_RailSlideProjectileInfo::M_bTargetAsHomingAxis' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_fMinHomingDistance) == 0x000030, "Member 'FBX901_RailSlideProjectileInfo::M_fMinHomingDistance' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_fHomingAccel) == 0x000034, "Member 'FBX901_RailSlideProjectileInfo::M_fHomingAccel' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_fMaxHomingVelocity) == 0x000038, "Member 'FBX901_RailSlideProjectileInfo::M_fMaxHomingVelocity' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_fMinHomingDistance_Reflect) == 0x00003C, "Member 'FBX901_RailSlideProjectileInfo::M_fMinHomingDistance_Reflect' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_fHomingAccel_Reflect) == 0x000040, "Member 'FBX901_RailSlideProjectileInfo::M_fHomingAccel_Reflect' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_fMaxHomingVelocity_Reflect) == 0x000044, "Member 'FBX901_RailSlideProjectileInfo::M_fMaxHomingVelocity_Reflect' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_ReflectAttackIDArray) == 0x000048, "Member 'FBX901_RailSlideProjectileInfo::M_ReflectAttackIDArray' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjectileInfo, M_bBoolArray) == 0x000058, "Member 'FBX901_RailSlideProjectileInfo::M_bBoolArray' has a wrong offset!");

// ScriptStruct TresGame.BX901_DarkCubeMineInfo
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FBX901_DarkCubeMineInfo final
{
public:
	struct FVector                                M_vLocationOffset;                                 // 0x0000(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_rRotationOffset;                                 // 0x000C(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bMoveOnFinish;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x37];                                      // 0x0019(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBX901_DarkCubeMineInfo) == 0x112E9AF0, "Wrong alignment on FBX901_DarkCubeMineInfo");
static_assert(sizeof(FBX901_DarkCubeMineInfo) == 0x112E9AF0, "Wrong size on FBX901_DarkCubeMineInfo");
static_assert(offsetof(FBX901_DarkCubeMineInfo, M_vLocationOffset) == 0x000000, "Member 'FBX901_DarkCubeMineInfo::M_vLocationOffset' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineInfo, M_rRotationOffset) == 0x00000C, "Member 'FBX901_DarkCubeMineInfo::M_rRotationOffset' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineInfo, M_bMoveOnFinish) == 0x000018, "Member 'FBX901_DarkCubeMineInfo::M_bMoveOnFinish' has a wrong offset!");

// ScriptStruct TresGame.BX901_DarkCubeMineProjInfo
// 0x114C1910 (0x114C1910 - 0x0000)
struct FBX901_DarkCubeMineProjInfo final
{
public:
	bool                                          M_bNormal;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBX901_RailSlideProjectileInfo         M_RailSlideProjInfo;                               // 0x0008(0x114C1910)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FBX901_DarkCubeMineInfo                M_ProjInfo;                                        // 0x0090(0x112E9AF0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_fSpawnDelayTime;                                 // 0x00E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x2C];                                      // 0x00E4(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBX901_DarkCubeMineProjInfo) == 0x114C1910, "Wrong alignment on FBX901_DarkCubeMineProjInfo");
static_assert(sizeof(FBX901_DarkCubeMineProjInfo) == 0x114C1910, "Wrong size on FBX901_DarkCubeMineProjInfo");
static_assert(offsetof(FBX901_DarkCubeMineProjInfo, M_bNormal) == 0x000000, "Member 'FBX901_DarkCubeMineProjInfo::M_bNormal' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineProjInfo, M_RailSlideProjInfo) == 0x000008, "Member 'FBX901_DarkCubeMineProjInfo::M_RailSlideProjInfo' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineProjInfo, M_ProjInfo) == 0x000090, "Member 'FBX901_DarkCubeMineProjInfo::M_ProjInfo' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineProjInfo, M_fSpawnDelayTime) == 0x0000E0, "Member 'FBX901_DarkCubeMineProjInfo::M_fSpawnDelayTime' has a wrong offset!");

// ScriptStruct TresGame.TresStartAttackLogInfo
// 0x1F5FEC10 (0x1F5FEC10 - 0x0000)
struct alignas(0x1F5FEC10) FTresStartAttackLogInfo final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresStartAttackLogInfo) == 0x1F5FEC10, "Wrong alignment on FTresStartAttackLogInfo");
static_assert(sizeof(FTresStartAttackLogInfo) == 0x1F5FEC10, "Wrong size on FTresStartAttackLogInfo");

// ScriptStruct TresGame.TresGumiShipProjectileSequenceData
// 0x0014 (0x0014 - 0x0000)
struct FTresGumiShipProjectileSequenceData final
{
public:
	float                                         M_fExecuteSec;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingAngle;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMovementSpeed;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTargetDotCheckRotation;                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bTargetLocationPredictable;                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bTargetDotCheckable;                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bReleaseAttach;                                  // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipProjectileSequenceData) == 0x000004, "Wrong alignment on FTresGumiShipProjectileSequenceData");
static_assert(sizeof(FTresGumiShipProjectileSequenceData) == 0x000014, "Wrong size on FTresGumiShipProjectileSequenceData");
static_assert(offsetof(FTresGumiShipProjectileSequenceData, M_fExecuteSec) == 0x000000, "Member 'FTresGumiShipProjectileSequenceData::M_fExecuteSec' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileSequenceData, M_fHomingAngle) == 0x000004, "Member 'FTresGumiShipProjectileSequenceData::M_fHomingAngle' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileSequenceData, M_fMovementSpeed) == 0x000008, "Member 'FTresGumiShipProjectileSequenceData::M_fMovementSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileSequenceData, M_fTargetDotCheckRotation) == 0x00000C, "Member 'FTresGumiShipProjectileSequenceData::M_fTargetDotCheckRotation' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileSequenceData, M_bTargetLocationPredictable) == 0x000010, "Member 'FTresGumiShipProjectileSequenceData::M_bTargetLocationPredictable' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileSequenceData, M_bTargetDotCheckable) == 0x000011, "Member 'FTresGumiShipProjectileSequenceData::M_bTargetDotCheckable' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileSequenceData, M_bReleaseAttach) == 0x000012, "Member 'FTresGumiShipProjectileSequenceData::M_bReleaseAttach' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcVoiceSetDatas
// 0x0020 (0x0020 - 0x0000)
struct FTresComNpcVoiceSetDatas final
{
public:
	class FName                                   M_VoiceName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_ActionName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTresFieldVoice*>                M_VoiceLists;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcVoiceSetDatas) == 0x000008, "Wrong alignment on FTresComNpcVoiceSetDatas");
static_assert(sizeof(FTresComNpcVoiceSetDatas) == 0x000020, "Wrong size on FTresComNpcVoiceSetDatas");
static_assert(offsetof(FTresComNpcVoiceSetDatas, M_VoiceName) == 0x000000, "Member 'FTresComNpcVoiceSetDatas::M_VoiceName' has a wrong offset!");
static_assert(offsetof(FTresComNpcVoiceSetDatas, M_ActionName) == 0x000008, "Member 'FTresComNpcVoiceSetDatas::M_ActionName' has a wrong offset!");
static_assert(offsetof(FTresComNpcVoiceSetDatas, M_VoiceLists) == 0x000010, "Member 'FTresComNpcVoiceSetDatas::M_VoiceLists' has a wrong offset!");

// ScriptStruct TresGame.TresPairCardParam_e_ex356
// 0x0010 (0x0010 - 0x0000)
struct FTresPairCardParam_e_ex356 final
{
public:
	float                                         IntervalTime;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PressStartTargetDistance;                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackStartDelayTime;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresEnemyPressCardAttribute_e_ex356          AttributeType;                                     // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPairCardParam_e_ex356) == 0x000004, "Wrong alignment on FTresPairCardParam_e_ex356");
static_assert(sizeof(FTresPairCardParam_e_ex356) == 0x000010, "Wrong size on FTresPairCardParam_e_ex356");
static_assert(offsetof(FTresPairCardParam_e_ex356, IntervalTime) == 0x000000, "Member 'FTresPairCardParam_e_ex356::IntervalTime' has a wrong offset!");
static_assert(offsetof(FTresPairCardParam_e_ex356, PressStartTargetDistance) == 0x000004, "Member 'FTresPairCardParam_e_ex356::PressStartTargetDistance' has a wrong offset!");
static_assert(offsetof(FTresPairCardParam_e_ex356, AttackStartDelayTime) == 0x000008, "Member 'FTresPairCardParam_e_ex356::AttackStartDelayTime' has a wrong offset!");
static_assert(offsetof(FTresPairCardParam_e_ex356, AttributeType) == 0x00000C, "Member 'FTresPairCardParam_e_ex356::AttributeType' has a wrong offset!");

// ScriptStruct TresGame.TresUIPreloadInfo
// 0x0048 (0x0048 - 0x0000)
struct FTresUIPreloadInfo final
{
public:
	uint32                                        Handle;                                            // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PackageName;                                       // 0x0008(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PreloadQueue;                                      // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        LoadedObjectsHolder;                               // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIPreloadInfo) == 0x000008, "Wrong alignment on FTresUIPreloadInfo");
static_assert(sizeof(FTresUIPreloadInfo) == 0x000048, "Wrong size on FTresUIPreloadInfo");
static_assert(offsetof(FTresUIPreloadInfo, Handle) == 0x000000, "Member 'FTresUIPreloadInfo::Handle' has a wrong offset!");
static_assert(offsetof(FTresUIPreloadInfo, PackageName) == 0x000008, "Member 'FTresUIPreloadInfo::PackageName' has a wrong offset!");
static_assert(offsetof(FTresUIPreloadInfo, Name) == 0x000018, "Member 'FTresUIPreloadInfo::Name' has a wrong offset!");
static_assert(offsetof(FTresUIPreloadInfo, PreloadQueue) == 0x000028, "Member 'FTresUIPreloadInfo::PreloadQueue' has a wrong offset!");
static_assert(offsetof(FTresUIPreloadInfo, LoadedObjectsHolder) == 0x000038, "Member 'FTresUIPreloadInfo::LoadedObjectsHolder' has a wrong offset!");

// ScriptStruct TresGame.TresFollowParams_e_ex107
// 0x114B9670 (0x114B9670 - 0x0000)
struct alignas(0x114B9670) FTresFollowParams_e_ex107 final
{
public:
	float                                         FollowSpeed;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FollowAngle;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFollowParams_e_ex107) == 0x114B9670, "Wrong alignment on FTresFollowParams_e_ex107");
static_assert(sizeof(FTresFollowParams_e_ex107) == 0x114B9670, "Wrong size on FTresFollowParams_e_ex107");
static_assert(offsetof(FTresFollowParams_e_ex107, FollowSpeed) == 0x000000, "Member 'FTresFollowParams_e_ex107::FollowSpeed' has a wrong offset!");
static_assert(offsetof(FTresFollowParams_e_ex107, FollowAngle) == 0x000004, "Member 'FTresFollowParams_e_ex107::FollowAngle' has a wrong offset!");

// ScriptStruct TresGame.EX355_CutDownTractionInfo
// 0x0030 (0x0030 - 0x0000)
struct FEX355_CutDownTractionInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VTractionOffset;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxHorizontalTractionDistance;                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxVerticalTractionDistance;                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaxVerticalTractionDistance;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_CutDownTractionInfo) == 0x000008, "Wrong alignment on FEX355_CutDownTractionInfo");
static_assert(sizeof(FEX355_CutDownTractionInfo) == 0x000030, "Wrong size on FEX355_CutDownTractionInfo");
static_assert(offsetof(FEX355_CutDownTractionInfo, INotifyID) == 0x000000, "Member 'FEX355_CutDownTractionInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX355_CutDownTractionInfo, Comment) == 0x000008, "Member 'FEX355_CutDownTractionInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX355_CutDownTractionInfo, VTractionOffset) == 0x000018, "Member 'FEX355_CutDownTractionInfo::VTractionOffset' has a wrong offset!");
static_assert(offsetof(FEX355_CutDownTractionInfo, FMaxHorizontalTractionDistance) == 0x000024, "Member 'FEX355_CutDownTractionInfo::FMaxHorizontalTractionDistance' has a wrong offset!");
static_assert(offsetof(FEX355_CutDownTractionInfo, FMaxVerticalTractionDistance) == 0x000028, "Member 'FEX355_CutDownTractionInfo::FMaxVerticalTractionDistance' has a wrong offset!");
static_assert(offsetof(FEX355_CutDownTractionInfo, bMaxVerticalTractionDistance) == 0x00002C, "Member 'FEX355_CutDownTractionInfo::bMaxVerticalTractionDistance' has a wrong offset!");

// ScriptStruct TresGame.TresTakeDamageLogInfo
// 0x1F5FEC10 (0x1F5FEC10 - 0x0000)
struct alignas(0x1F5FEC10) FTresTakeDamageLogInfo final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTakeDamageLogInfo) == 0x1F5FEC10, "Wrong alignment on FTresTakeDamageLogInfo");
static_assert(sizeof(FTresTakeDamageLogInfo) == 0x1F5FEC10, "Wrong size on FTresTakeDamageLogInfo");

// ScriptStruct TresGame.TresDamageInfo
// 0x0068 (0x0068 - 0x0000)
struct FTresDamageInfo final
{
public:
	class FName                                   M_AttackDataIDName;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCommandKind                              M_CommandKind;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresShootFlowKind                            M_ShootFlowKind;                                   // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDamageKind                               M_DamageKind;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDamageAttribute                          M_DamageAttribute;                                 // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AttackSrcPower;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamagePowerScale;                                // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamageParabolaAngle;                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamageMoveLength;                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamageBrakeParam;                                // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamageEffectTime;                                // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAtkHitKnockbackType                      M_KnockbackType;                                   // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_KnockbackDir;                                    // 0x0028(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresBadStatusType                            M_BadStatusKind;                                   // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_BadStatusEffectTime;                             // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BadStatusEffectParam;                            // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x4];                                       // 0x0040(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ReactionPower;                                   // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ArmorAttackPower;                                // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_FormPoint;                                       // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsMagicAttack : 1;                              // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsFinishAttack : 1;                             // 0x0050(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsKillerAttack : 1;                             // 0x0050(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsIgnoreGuard : 1;                              // 0x0050(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsRapidFireAttack : 1;                          // 0x0050(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsCriticalHit : 1;                              // 0x0050(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsArmorDamage : 1;                              // 0x0050(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsAerialAttack : 1;                             // 0x0050(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsAttractionDamage : 1;                         // 0x0051(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsCounterAttack : 1;                            // 0x0051(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsJustGuardAttack : 1;                          // 0x0051(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsEnableWeakGuardAttack : 1;                    // 0x0051(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsEnableFullMpBurst : 1;                        // 0x0051(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsEnableMagicDraw : 1;                          // 0x0051(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsEnableNoReactBodyCorrection : 1;              // 0x0051(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_52[0x12];                                      // 0x0052(0x0012)(Fixing Size After Last Property [ Dumper-7 ])
	ETresPhysDamageForceLevel                     M_PhysForceLv;                                     // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresDamageInfo) == 0x000004, "Wrong alignment on FTresDamageInfo");
static_assert(sizeof(FTresDamageInfo) == 0x000068, "Wrong size on FTresDamageInfo");
static_assert(offsetof(FTresDamageInfo, M_AttackDataIDName) == 0x000000, "Member 'FTresDamageInfo::M_AttackDataIDName' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_CommandKind) == 0x000008, "Member 'FTresDamageInfo::M_CommandKind' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_ShootFlowKind) == 0x000009, "Member 'FTresDamageInfo::M_ShootFlowKind' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_DamageKind) == 0x00000A, "Member 'FTresDamageInfo::M_DamageKind' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_DamageAttribute) == 0x00000B, "Member 'FTresDamageInfo::M_DamageAttribute' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_AttackSrcPower) == 0x00000C, "Member 'FTresDamageInfo::M_AttackSrcPower' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_DamagePowerScale) == 0x000010, "Member 'FTresDamageInfo::M_DamagePowerScale' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_DamageParabolaAngle) == 0x000014, "Member 'FTresDamageInfo::M_DamageParabolaAngle' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_DamageMoveLength) == 0x000018, "Member 'FTresDamageInfo::M_DamageMoveLength' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_DamageBrakeParam) == 0x00001C, "Member 'FTresDamageInfo::M_DamageBrakeParam' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_DamageEffectTime) == 0x000020, "Member 'FTresDamageInfo::M_DamageEffectTime' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_KnockbackType) == 0x000024, "Member 'FTresDamageInfo::M_KnockbackType' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_KnockbackDir) == 0x000028, "Member 'FTresDamageInfo::M_KnockbackDir' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_BadStatusKind) == 0x000034, "Member 'FTresDamageInfo::M_BadStatusKind' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_BadStatusEffectTime) == 0x000038, "Member 'FTresDamageInfo::M_BadStatusEffectTime' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_BadStatusEffectParam) == 0x00003C, "Member 'FTresDamageInfo::M_BadStatusEffectParam' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_ReactionPower) == 0x000044, "Member 'FTresDamageInfo::M_ReactionPower' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_ArmorAttackPower) == 0x000048, "Member 'FTresDamageInfo::M_ArmorAttackPower' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_FormPoint) == 0x00004C, "Member 'FTresDamageInfo::M_FormPoint' has a wrong offset!");
static_assert(offsetof(FTresDamageInfo, M_PhysForceLv) == 0x000064, "Member 'FTresDamageInfo::M_PhysForceLv' has a wrong offset!");

// ScriptStruct TresGame.TresAchievementParam
// 0x0000 (0x11413080 - 0x11413080)
struct FTresAchievementParam final : public FTableRowBase
{
public:
	int32                                         Param;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAchievementParam) == 0x11413080, "Wrong alignment on FTresAchievementParam");
static_assert(sizeof(FTresAchievementParam) == 0x11413080, "Wrong size on FTresAchievementParam");
static_assert(offsetof(FTresAchievementParam, Param) == 0x000008, "Member 'FTresAchievementParam::Param' has a wrong offset!");

// ScriptStruct TresGame.SaveInfo_e_ex082
// 0x114F9070 (0x114F9070 - 0x0000)
struct alignas(0x114F9070) FSaveInfo_e_ex082 final
{
public:
	uint8                                         bInheritParam : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsModeChangeRegionBreak : 1;                      // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ModeChangePawnSpawnLocation;                       // 0x0004(0x000C)(SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ModeChangePawnSpawnRotation;                       // 0x0010(0x112E9AF0)(SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ModeChangePawnAppearMode;                          // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveInfo_e_ex082) == 0x114F9070, "Wrong alignment on FSaveInfo_e_ex082");
static_assert(sizeof(FSaveInfo_e_ex082) == 0x114F9070, "Wrong size on FSaveInfo_e_ex082");
static_assert(offsetof(FSaveInfo_e_ex082, ModeChangePawnSpawnLocation) == 0x000004, "Member 'FSaveInfo_e_ex082::ModeChangePawnSpawnLocation' has a wrong offset!");
static_assert(offsetof(FSaveInfo_e_ex082, ModeChangePawnSpawnRotation) == 0x000010, "Member 'FSaveInfo_e_ex082::ModeChangePawnSpawnRotation' has a wrong offset!");
static_assert(offsetof(FSaveInfo_e_ex082, ModeChangePawnAppearMode) == 0x00001C, "Member 'FSaveInfo_e_ex082::ModeChangePawnAppearMode' has a wrong offset!");

// ScriptStruct TresGame.TresAttackHitInvincibleCharLogInfo
// 0x1F5FEC10 (0x1F5FEC10 - 0x0000)
struct alignas(0x1F5FEC10) FTresAttackHitInvincibleCharLogInfo final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAttackHitInvincibleCharLogInfo) == 0x1F5FEC10, "Wrong alignment on FTresAttackHitInvincibleCharLogInfo");
static_assert(sizeof(FTresAttackHitInvincibleCharLogInfo) == 0x1F5FEC10, "Wrong size on FTresAttackHitInvincibleCharLogInfo");

// ScriptStruct TresGame.TresHopNavLinkExtendedInfo
// 0x0EAD (0x0EAD - 0x0000)
struct alignas(0xEAD) FTresHopNavLinkExtendedInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHopNavLinkExtendedInfo) == 0x000EAD, "Wrong alignment on FTresHopNavLinkExtendedInfo");
static_assert(sizeof(FTresHopNavLinkExtendedInfo) == 0x000EAD, "Wrong size on FTresHopNavLinkExtendedInfo");

// ScriptStruct TresGame.TresE_dw405SoundData
// 0x0010 (0x0010 - 0x0000)
struct FTresE_dw405SoundData final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_dw405SoundData) == 0x000008, "Wrong alignment on FTresE_dw405SoundData");
static_assert(sizeof(FTresE_dw405SoundData) == 0x000010, "Wrong size on FTresE_dw405SoundData");
static_assert(offsetof(FTresE_dw405SoundData, Sound) == 0x000000, "Member 'FTresE_dw405SoundData::Sound' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405SoundInfo
// 0x11492C80 (0x11492C80 - 0x0000)
struct alignas(0x11492C80) FTresE_dw405SoundInfo final
{
public:
	TArray<struct FTresE_dw405SoundData>          SoundDatas;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         PlaySoundReamingTimeAtLastSound;                   // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_dw405SoundInfo) == 0x11492C80, "Wrong alignment on FTresE_dw405SoundInfo");
static_assert(sizeof(FTresE_dw405SoundInfo) == 0x11492C80, "Wrong size on FTresE_dw405SoundInfo");
static_assert(offsetof(FTresE_dw405SoundInfo, SoundDatas) == 0x000000, "Member 'FTresE_dw405SoundInfo::SoundDatas' has a wrong offset!");
static_assert(offsetof(FTresE_dw405SoundInfo, PlaySoundReamingTimeAtLastSound) == 0x000010, "Member 'FTresE_dw405SoundInfo::PlaySoundReamingTimeAtLastSound' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipAttackElementResistance
// 0x113F5190 (0x113F5190 - 0x0000)
struct alignas(0x113F5190) FTresGumiShipAttackElementResistance final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fShot;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLaser;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStrike;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpecial;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipAttackElementResistance) == 0x113F5190, "Wrong alignment on FTresGumiShipAttackElementResistance");
static_assert(sizeof(FTresGumiShipAttackElementResistance) == 0x113F5190, "Wrong size on FTresGumiShipAttackElementResistance");
static_assert(offsetof(FTresGumiShipAttackElementResistance, M_fShot) == 0x000008, "Member 'FTresGumiShipAttackElementResistance::M_fShot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAttackElementResistance, M_fLaser) == 0x00000C, "Member 'FTresGumiShipAttackElementResistance::M_fLaser' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAttackElementResistance, M_fStrike) == 0x000010, "Member 'FTresGumiShipAttackElementResistance::M_fStrike' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAttackElementResistance, M_fSpecial) == 0x000014, "Member 'FTresGumiShipAttackElementResistance::M_fSpecial' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipHitEffectInfo
// 0x0010 (0x0010 - 0x0000)
struct FTresGumiShipHitEffectInfo final
{
public:
	class UParticleSystem*                        M_pHitEffect;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsAttach;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipHitEffectInfo) == 0x000008, "Wrong alignment on FTresGumiShipHitEffectInfo");
static_assert(sizeof(FTresGumiShipHitEffectInfo) == 0x000010, "Wrong size on FTresGumiShipHitEffectInfo");
static_assert(offsetof(FTresGumiShipHitEffectInfo, M_pHitEffect) == 0x000000, "Member 'FTresGumiShipHitEffectInfo::M_pHitEffect' has a wrong offset!");
static_assert(offsetof(FTresGumiShipHitEffectInfo, M_bIsAttach) == 0x000008, "Member 'FTresGumiShipHitEffectInfo::M_bIsAttach' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBodyCollisionParam
// 0x113F5190 (0x113F5190 - 0x0000)
struct FTresGumiShipBodyCollisionParam final
{
public:
	float                                         M_fDamageScale;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresGumiShipAttackElementResistance   M_ElementResistance;                               // 0x0008(0x113F5190)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTresGumiShipHitEffectInfo             M_EffectInfo;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bDontUseGrazeCollision;                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipBodyCollisionParam) == 0x113F5190, "Wrong alignment on FTresGumiShipBodyCollisionParam");
static_assert(sizeof(FTresGumiShipBodyCollisionParam) == 0x113F5190, "Wrong size on FTresGumiShipBodyCollisionParam");
static_assert(offsetof(FTresGumiShipBodyCollisionParam, M_fDamageScale) == 0x000000, "Member 'FTresGumiShipBodyCollisionParam::M_fDamageScale' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBodyCollisionParam, M_ElementResistance) == 0x000008, "Member 'FTresGumiShipBodyCollisionParam::M_ElementResistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBodyCollisionParam, M_EffectInfo) == 0x000020, "Member 'FTresGumiShipBodyCollisionParam::M_EffectInfo' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBodyCollisionParam, M_bDontUseGrazeCollision) == 0x000030, "Member 'FTresGumiShipBodyCollisionParam::M_bDontUseGrazeCollision' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActSelectBranch
// 0x114D87A0 (0x114D87A0 - 0x0000)
struct alignas(0x114D87A0) FTresComNpcActSelectBranch final
{
public:
	int32                                         M_Id;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_SeqIndex;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcActSelectBranch) == 0x114D87A0, "Wrong alignment on FTresComNpcActSelectBranch");
static_assert(sizeof(FTresComNpcActSelectBranch) == 0x114D87A0, "Wrong size on FTresComNpcActSelectBranch");
static_assert(offsetof(FTresComNpcActSelectBranch, M_Id) == 0x000000, "Member 'FTresComNpcActSelectBranch::M_Id' has a wrong offset!");
static_assert(offsetof(FTresComNpcActSelectBranch, M_SeqIndex) == 0x000004, "Member 'FTresComNpcActSelectBranch::M_SeqIndex' has a wrong offset!");

// ScriptStruct TresGame.TresAttractionFlowAssetInfo
// 0x0030 (0x0030 - 0x0000)
struct FTresAttractionFlowAssetInfo final
{
public:
	TSoftClassPtr<class UClass>                   M_AssetPtr;                                        // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATresAccompanyPawnBase>     M_pAsset;                                          // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAttractionFlowAssetInfo) == 0x000008, "Wrong alignment on FTresAttractionFlowAssetInfo");
static_assert(sizeof(FTresAttractionFlowAssetInfo) == 0x000030, "Wrong size on FTresAttractionFlowAssetInfo");
static_assert(offsetof(FTresAttractionFlowAssetInfo, M_AssetPtr) == 0x000000, "Member 'FTresAttractionFlowAssetInfo::M_AssetPtr' has a wrong offset!");
static_assert(offsetof(FTresAttractionFlowAssetInfo, M_pAsset) == 0x000020, "Member 'FTresAttractionFlowAssetInfo::M_pAsset' has a wrong offset!");

// ScriptStruct TresGame.EX355_ThrowRoamMoveInfo
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FEX355_ThrowRoamMoveInfo final
{
public:
	bool                                          M_bRoamMove;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fRoamMoveTime;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRoamMoveVelocity;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRoamRotateYawVelocity;                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRoamRotatePitchVelocity;                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_ClaymoreRoamCenterType                 M_RoamCenterType;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fRoamRadius;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRoamHeight;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_rInitRotOffset_Roam;                             // 0x0020(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bEnableAttackCollision;                          // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_ThrowRoamMoveInfo) == 0x112E9AF0, "Wrong alignment on FEX355_ThrowRoamMoveInfo");
static_assert(sizeof(FEX355_ThrowRoamMoveInfo) == 0x112E9AF0, "Wrong size on FEX355_ThrowRoamMoveInfo");
static_assert(offsetof(FEX355_ThrowRoamMoveInfo, M_bRoamMove) == 0x000000, "Member 'FEX355_ThrowRoamMoveInfo::M_bRoamMove' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowRoamMoveInfo, M_fRoamMoveTime) == 0x000004, "Member 'FEX355_ThrowRoamMoveInfo::M_fRoamMoveTime' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowRoamMoveInfo, M_fRoamMoveVelocity) == 0x000008, "Member 'FEX355_ThrowRoamMoveInfo::M_fRoamMoveVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowRoamMoveInfo, M_fRoamRotateYawVelocity) == 0x00000C, "Member 'FEX355_ThrowRoamMoveInfo::M_fRoamRotateYawVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowRoamMoveInfo, M_fRoamRotatePitchVelocity) == 0x000010, "Member 'FEX355_ThrowRoamMoveInfo::M_fRoamRotatePitchVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowRoamMoveInfo, M_RoamCenterType) == 0x000014, "Member 'FEX355_ThrowRoamMoveInfo::M_RoamCenterType' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowRoamMoveInfo, M_fRoamRadius) == 0x000018, "Member 'FEX355_ThrowRoamMoveInfo::M_fRoamRadius' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowRoamMoveInfo, M_fRoamHeight) == 0x00001C, "Member 'FEX355_ThrowRoamMoveInfo::M_fRoamHeight' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowRoamMoveInfo, M_rInitRotOffset_Roam) == 0x000020, "Member 'FEX355_ThrowRoamMoveInfo::M_rInitRotOffset_Roam' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowRoamMoveInfo, M_bEnableAttackCollision) == 0x00002C, "Member 'FEX355_ThrowRoamMoveInfo::M_bEnableAttackCollision' has a wrong offset!");

// ScriptStruct TresGame.TresOverwriteAllowedMips
// 0x1157C7E0 (0x1157C7E0 - 0x0000)
struct alignas(0x1157C7E0) FTresOverwriteAllowedMips final
{
public:
	ETextureGroup                                 M_TextureGroup;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_MaxAllowedMips;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresOverwriteAllowedMips) == 0x1157C7E0, "Wrong alignment on FTresOverwriteAllowedMips");
static_assert(sizeof(FTresOverwriteAllowedMips) == 0x1157C7E0, "Wrong size on FTresOverwriteAllowedMips");
static_assert(offsetof(FTresOverwriteAllowedMips, M_TextureGroup) == 0x000000, "Member 'FTresOverwriteAllowedMips::M_TextureGroup' has a wrong offset!");
static_assert(offsetof(FTresOverwriteAllowedMips, M_MaxAllowedMips) == 0x000004, "Member 'FTresOverwriteAllowedMips::M_MaxAllowedMips' has a wrong offset!");

// ScriptStruct TresGame.TresRecoveryHpMpFpLogInfo
// 0x1F5FEC10 (0x1F5FEC10 - 0x0000)
struct alignas(0x1F5FEC10) FTresRecoveryHpMpFpLogInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRecoveryHpMpFpLogInfo) == 0x1F5FEC10, "Wrong alignment on FTresRecoveryHpMpFpLogInfo");
static_assert(sizeof(FTresRecoveryHpMpFpLogInfo) == 0x1F5FEC10, "Wrong size on FTresRecoveryHpMpFpLogInfo");

// ScriptStruct TresGame.TresEnemyEx353ProjectileSpawnInfo
// 0x114B9BE0 (0x114B9BE0 - 0x0000)
struct alignas(0x114B9BE0) FTresEnemyEx353ProjectileSpawnInfo final
{
public:
	float                                         SpawnAngleYaw;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnAnglePitch;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx353ProjectileSpawnInfo) == 0x114B9BE0, "Wrong alignment on FTresEnemyEx353ProjectileSpawnInfo");
static_assert(sizeof(FTresEnemyEx353ProjectileSpawnInfo) == 0x114B9BE0, "Wrong size on FTresEnemyEx353ProjectileSpawnInfo");
static_assert(offsetof(FTresEnemyEx353ProjectileSpawnInfo, SpawnAngleYaw) == 0x000000, "Member 'FTresEnemyEx353ProjectileSpawnInfo::SpawnAngleYaw' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ProjectileSpawnInfo, SpawnAnglePitch) == 0x000004, "Member 'FTresEnemyEx353ProjectileSpawnInfo::SpawnAnglePitch' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ProjectileSpawnInfo, LifeTime) == 0x000008, "Member 'FTresEnemyEx353ProjectileSpawnInfo::LifeTime' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_FlareShotHvnParam
// 0x00B0 (0x00B0 - 0x0000)
struct FTresEnemy_e_ex771_FlareShotHvnParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresProjectile_e_ex771_FlareShotTornado* M_FlareShot;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0xA0];                                      // 0x0010(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_FlareShotHvnParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex771_FlareShotHvnParam");
static_assert(sizeof(FTresEnemy_e_ex771_FlareShotHvnParam) == 0x0000B0, "Wrong size on FTresEnemy_e_ex771_FlareShotHvnParam");
static_assert(offsetof(FTresEnemy_e_ex771_FlareShotHvnParam, M_FlareShot) == 0x000008, "Member 'FTresEnemy_e_ex771_FlareShotHvnParam::M_FlareShot' has a wrong offset!");

// ScriptStruct TresGame.TresMBCameraDataTrackKey
// 0x0010 (0x0010 - 0x0000)
struct FTresMBCameraDataTrackKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTresMBCameraData*                      M_CameraData;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMBCameraDataTrackKey) == 0x000008, "Wrong alignment on FTresMBCameraDataTrackKey");
static_assert(sizeof(FTresMBCameraDataTrackKey) == 0x000010, "Wrong size on FTresMBCameraDataTrackKey");
static_assert(offsetof(FTresMBCameraDataTrackKey, M_Time) == 0x000000, "Member 'FTresMBCameraDataTrackKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresMBCameraDataTrackKey, M_CameraData) == 0x000008, "Member 'FTresMBCameraDataTrackKey::M_CameraData' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcReaction
// 0x0048 (0x0048 - 0x0000)
struct FTresComNpcReaction final
{
public:
	float                                         M_fMinRange;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxRange;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLimitDir;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInRange;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInDir;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCoolDownTime;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        M_IgnorePoints;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcReaction) == 0x000008, "Wrong alignment on FTresComNpcReaction");
static_assert(sizeof(FTresComNpcReaction) == 0x000048, "Wrong size on FTresComNpcReaction");
static_assert(offsetof(FTresComNpcReaction, M_fMinRange) == 0x000000, "Member 'FTresComNpcReaction::M_fMinRange' has a wrong offset!");
static_assert(offsetof(FTresComNpcReaction, M_fMaxRange) == 0x000004, "Member 'FTresComNpcReaction::M_fMaxRange' has a wrong offset!");
static_assert(offsetof(FTresComNpcReaction, M_fLimitDir) == 0x000008, "Member 'FTresComNpcReaction::M_fLimitDir' has a wrong offset!");
static_assert(offsetof(FTresComNpcReaction, M_fInRange) == 0x00000C, "Member 'FTresComNpcReaction::M_fInRange' has a wrong offset!");
static_assert(offsetof(FTresComNpcReaction, M_fInDir) == 0x000010, "Member 'FTresComNpcReaction::M_fInDir' has a wrong offset!");
static_assert(offsetof(FTresComNpcReaction, M_fCoolDownTime) == 0x000014, "Member 'FTresComNpcReaction::M_fCoolDownTime' has a wrong offset!");
static_assert(offsetof(FTresComNpcReaction, M_IgnorePoints) == 0x000018, "Member 'FTresComNpcReaction::M_IgnorePoints' has a wrong offset!");

// ScriptStruct TresGame.TresCommandKindData
// 0xC3CE0 (0x114D6D60 - 0x11413080)
struct alignas(0x114D6D60) FTresCommandKindData final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Type;                                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Cate;                                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Old;                                               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attr;                                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Local;                                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Flag;                                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Sp;                                                // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Mp;                                                // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Fp;                                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param0;                                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param1;                                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param2;                                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param3;                                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocKey;                                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCommandKindData) == 0x114D6D60, "Wrong alignment on FTresCommandKindData");
static_assert(sizeof(FTresCommandKindData) == 0x114D6D60, "Wrong size on FTresCommandKindData");
static_assert(offsetof(FTresCommandKindData, Name) == 0x000008, "Member 'FTresCommandKindData::Name' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Type) == 0x000018, "Member 'FTresCommandKindData::Type' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Cate) == 0x000019, "Member 'FTresCommandKindData::Cate' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Old) == 0x00001A, "Member 'FTresCommandKindData::Old' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Attr) == 0x00001B, "Member 'FTresCommandKindData::Attr' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Local) == 0x00001C, "Member 'FTresCommandKindData::Local' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Flag) == 0x00001D, "Member 'FTresCommandKindData::Flag' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Sp) == 0x00001E, "Member 'FTresCommandKindData::Sp' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Mp) == 0x00001F, "Member 'FTresCommandKindData::Mp' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Fp) == 0x000020, "Member 'FTresCommandKindData::Fp' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Param0) == 0x000024, "Member 'FTresCommandKindData::Param0' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Param1) == 0x000028, "Member 'FTresCommandKindData::Param1' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Param2) == 0x00002C, "Member 'FTresCommandKindData::Param2' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, Param3) == 0x000030, "Member 'FTresCommandKindData::Param3' has a wrong offset!");
static_assert(offsetof(FTresCommandKindData, LocKey) == 0x000038, "Member 'FTresCommandKindData::LocKey' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackBonamikWorldWindKey
// 0x0004 (0x0004 - 0x0000)
struct FTresInterpTrackBonamikWorldWindKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresInterpTrackBonamikWorldWindKey) == 0x000004, "Wrong alignment on FTresInterpTrackBonamikWorldWindKey");
static_assert(sizeof(FTresInterpTrackBonamikWorldWindKey) == 0x000004, "Wrong size on FTresInterpTrackBonamikWorldWindKey");
static_assert(offsetof(FTresInterpTrackBonamikWorldWindKey, M_Time) == 0x000000, "Member 'FTresInterpTrackBonamikWorldWindKey::M_Time' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyShipCoreSpawnData
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyShipCoreSpawnData final
{
public:
	class FName                                   M_SocketName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresEnemyShip                                M_LocType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyShipCoreSpawnData) == 0x000004, "Wrong alignment on FTresEnemyShipCoreSpawnData");
static_assert(sizeof(FTresEnemyShipCoreSpawnData) == 0x000010, "Wrong size on FTresEnemyShipCoreSpawnData");
static_assert(offsetof(FTresEnemyShipCoreSpawnData, M_SocketName) == 0x000000, "Member 'FTresEnemyShipCoreSpawnData::M_SocketName' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipCoreSpawnData, M_LocType) == 0x000008, "Member 'FTresEnemyShipCoreSpawnData::M_LocType' has a wrong offset!");

// ScriptStruct TresGame.TresProjectileSpawnData
// 0x0018 (0x0018 - 0x0000)
struct FTresProjectileSpawnData final
{
public:
	TSubclassOf<class ATresProjectileBase>        M_GenerateClass;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresProjectileRespawnType                    M_CheckType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresProjectileRespawnRotType                 M_RotInheritType;                                  // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_CheckRange;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bOnGroundOnly : 1;                               // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bBlockByWaterSurface : 1;                        // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTakeOverAtkTarget : 1;                          // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTakeOverAtkCollHitList : 1;                     // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTakeOverAtkCollFinishFlag : 1;                  // 0x0010(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIgnoreSendShutdownMsgToOwner : 1;               // 0x0010(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTakeOverEffectColorParam : 1;                   // 0x0010(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTakeOverEffectAlphaParam : 1;                   // 0x0010(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresProjectileSpawnData) == 0x000008, "Wrong alignment on FTresProjectileSpawnData");
static_assert(sizeof(FTresProjectileSpawnData) == 0x000018, "Wrong size on FTresProjectileSpawnData");
static_assert(offsetof(FTresProjectileSpawnData, M_GenerateClass) == 0x000000, "Member 'FTresProjectileSpawnData::M_GenerateClass' has a wrong offset!");
static_assert(offsetof(FTresProjectileSpawnData, M_CheckType) == 0x000008, "Member 'FTresProjectileSpawnData::M_CheckType' has a wrong offset!");
static_assert(offsetof(FTresProjectileSpawnData, M_RotInheritType) == 0x000009, "Member 'FTresProjectileSpawnData::M_RotInheritType' has a wrong offset!");
static_assert(offsetof(FTresProjectileSpawnData, M_CheckRange) == 0x00000C, "Member 'FTresProjectileSpawnData::M_CheckRange' has a wrong offset!");

// ScriptStruct TresGame.TresBodyTakeDamageEffect
// 0x0008 (0x0008 - 0x0000)
struct FTresBodyTakeDamageEffect final
{
public:
	class UParticleSystem*                        M_DamageEffect;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBodyTakeDamageEffect) == 0x000008, "Wrong alignment on FTresBodyTakeDamageEffect");
static_assert(sizeof(FTresBodyTakeDamageEffect) == 0x000008, "Wrong size on FTresBodyTakeDamageEffect");
static_assert(offsetof(FTresBodyTakeDamageEffect, M_DamageEffect) == 0x000000, "Member 'FTresBodyTakeDamageEffect::M_DamageEffect' has a wrong offset!");

// ScriptStruct TresGame.PairChangeActionParam
// 0x113C2EE0 (0x113C2EE0 - 0x0000)
struct alignas(0x113C2EE0) FPairChangeActionParam final
{
public:
	class FName                                   SpinMotion;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StepMotion;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeDirectionTime;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PcSpinMotion;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PcSpinChangeTime;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PcSpinWaitTime;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PcStepMotion;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PcStepChangeTime;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PcStepWaitTime;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectGroupID;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPairChangeActionParam) == 0x113C2EE0, "Wrong alignment on FPairChangeActionParam");
static_assert(sizeof(FPairChangeActionParam) == 0x113C2EE0, "Wrong size on FPairChangeActionParam");
static_assert(offsetof(FPairChangeActionParam, SpinMotion) == 0x000000, "Member 'FPairChangeActionParam::SpinMotion' has a wrong offset!");
static_assert(offsetof(FPairChangeActionParam, StepMotion) == 0x000008, "Member 'FPairChangeActionParam::StepMotion' has a wrong offset!");
static_assert(offsetof(FPairChangeActionParam, ChangeDirectionTime) == 0x000010, "Member 'FPairChangeActionParam::ChangeDirectionTime' has a wrong offset!");
static_assert(offsetof(FPairChangeActionParam, PcSpinMotion) == 0x000018, "Member 'FPairChangeActionParam::PcSpinMotion' has a wrong offset!");
static_assert(offsetof(FPairChangeActionParam, PcSpinChangeTime) == 0x000020, "Member 'FPairChangeActionParam::PcSpinChangeTime' has a wrong offset!");
static_assert(offsetof(FPairChangeActionParam, PcSpinWaitTime) == 0x000024, "Member 'FPairChangeActionParam::PcSpinWaitTime' has a wrong offset!");
static_assert(offsetof(FPairChangeActionParam, PcStepMotion) == 0x000028, "Member 'FPairChangeActionParam::PcStepMotion' has a wrong offset!");
static_assert(offsetof(FPairChangeActionParam, PcStepChangeTime) == 0x000030, "Member 'FPairChangeActionParam::PcStepChangeTime' has a wrong offset!");
static_assert(offsetof(FPairChangeActionParam, PcStepWaitTime) == 0x000034, "Member 'FPairChangeActionParam::PcStepWaitTime' has a wrong offset!");
static_assert(offsetof(FPairChangeActionParam, EffectGroupID) == 0x000038, "Member 'FPairChangeActionParam::EffectGroupID' has a wrong offset!");

// ScriptStruct TresGame.TresBehaviorTreeInjectionData
// 0x0010 (0x0010 - 0x0000)
struct FTresBehaviorTreeInjectionData final
{
public:
	struct FGameplayTag                           InjectionTag;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          BehaviorTree;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBehaviorTreeInjectionData) == 0x000008, "Wrong alignment on FTresBehaviorTreeInjectionData");
static_assert(sizeof(FTresBehaviorTreeInjectionData) == 0x000010, "Wrong size on FTresBehaviorTreeInjectionData");
static_assert(offsetof(FTresBehaviorTreeInjectionData, InjectionTag) == 0x000000, "Member 'FTresBehaviorTreeInjectionData::InjectionTag' has a wrong offset!");
static_assert(offsetof(FTresBehaviorTreeInjectionData, BehaviorTree) == 0x000008, "Member 'FTresBehaviorTreeInjectionData::BehaviorTree' has a wrong offset!");

// ScriptStruct TresGame.TresEx353HitEffectInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresEx353HitEffectInfo final
{
public:
	class UParticleSystem*                        M_EffectAsset;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_AtkGrpNames;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEx353HitEffectInfo) == 0x000008, "Wrong alignment on FTresEx353HitEffectInfo");
static_assert(sizeof(FTresEx353HitEffectInfo) == 0x000018, "Wrong size on FTresEx353HitEffectInfo");
static_assert(offsetof(FTresEx353HitEffectInfo, M_EffectAsset) == 0x000000, "Member 'FTresEx353HitEffectInfo::M_EffectAsset' has a wrong offset!");
static_assert(offsetof(FTresEx353HitEffectInfo, M_AtkGrpNames) == 0x000008, "Member 'FTresEx353HitEffectInfo::M_AtkGrpNames' has a wrong offset!");

// ScriptStruct TresGame.TresDanceEffectColorParam
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct FTresDanceEffectColorParam final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color_PS4;                                         // 0x0008(0x112EAE80)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color_XB1;                                         // 0x0018(0x112EAE80)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDanceEffectColorParam) == 0x112EAE80, "Wrong alignment on FTresDanceEffectColorParam");
static_assert(sizeof(FTresDanceEffectColorParam) == 0x112EAE80, "Wrong size on FTresDanceEffectColorParam");
static_assert(offsetof(FTresDanceEffectColorParam, Key) == 0x000000, "Member 'FTresDanceEffectColorParam::Key' has a wrong offset!");
static_assert(offsetof(FTresDanceEffectColorParam, Color_PS4) == 0x000008, "Member 'FTresDanceEffectColorParam::Color_PS4' has a wrong offset!");
static_assert(offsetof(FTresDanceEffectColorParam, Color_XB1) == 0x000018, "Member 'FTresDanceEffectColorParam::Color_XB1' has a wrong offset!");

// ScriptStruct TresGame.TresInfluenceMapLayer
// 0x1153DB50 (0x1153DB50 - 0x0000)
struct alignas(0x1153DB50) FTresInfluenceMapLayer final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Decay;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Flow;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateInterval;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x5C];                                      // 0x0014(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresInfluenceMapLayer) == 0x1153DB50, "Wrong alignment on FTresInfluenceMapLayer");
static_assert(sizeof(FTresInfluenceMapLayer) == 0x1153DB50, "Wrong size on FTresInfluenceMapLayer");
static_assert(offsetof(FTresInfluenceMapLayer, bEnabled) == 0x000000, "Member 'FTresInfluenceMapLayer::bEnabled' has a wrong offset!");
static_assert(offsetof(FTresInfluenceMapLayer, Decay) == 0x000004, "Member 'FTresInfluenceMapLayer::Decay' has a wrong offset!");
static_assert(offsetof(FTresInfluenceMapLayer, Flow) == 0x000008, "Member 'FTresInfluenceMapLayer::Flow' has a wrong offset!");
static_assert(offsetof(FTresInfluenceMapLayer, bUpdate) == 0x00000C, "Member 'FTresInfluenceMapLayer::bUpdate' has a wrong offset!");
static_assert(offsetof(FTresInfluenceMapLayer, UpdateInterval) == 0x000010, "Member 'FTresInfluenceMapLayer::UpdateInterval' has a wrong offset!");

// ScriptStruct TresGame.TresEquipmentAssetUnit
// 0x0028 (0x0028 - 0x0000)
struct FTresEquipmentAssetUnit final
{
public:
	class FName                                   UnitName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCharEquipPart                            M_AttachPart;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachBoneName;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bApplyParentScale : 1;                           // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresWeaponBase>            RsrcData;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEquipmentAssetUnit) == 0x000008, "Wrong alignment on FTresEquipmentAssetUnit");
static_assert(sizeof(FTresEquipmentAssetUnit) == 0x000028, "Wrong size on FTresEquipmentAssetUnit");
static_assert(offsetof(FTresEquipmentAssetUnit, UnitName) == 0x000000, "Member 'FTresEquipmentAssetUnit::UnitName' has a wrong offset!");
static_assert(offsetof(FTresEquipmentAssetUnit, M_AttachPart) == 0x000008, "Member 'FTresEquipmentAssetUnit::M_AttachPart' has a wrong offset!");
static_assert(offsetof(FTresEquipmentAssetUnit, AttachBoneName) == 0x000010, "Member 'FTresEquipmentAssetUnit::AttachBoneName' has a wrong offset!");
static_assert(offsetof(FTresEquipmentAssetUnit, RsrcData) == 0x000020, "Member 'FTresEquipmentAssetUnit::RsrcData' has a wrong offset!");

// ScriptStruct TresGame.TresEquipmentAccompanyPawnAssetUnit
// 0x0010 (0x0010 - 0x0000)
struct FTresEquipmentAccompanyPawnAssetUnit final
{
public:
	ETresCommandKind                              M_Command;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresAccompanyPawnBase>     M_AssetData;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEquipmentAccompanyPawnAssetUnit) == 0x000008, "Wrong alignment on FTresEquipmentAccompanyPawnAssetUnit");
static_assert(sizeof(FTresEquipmentAccompanyPawnAssetUnit) == 0x000010, "Wrong size on FTresEquipmentAccompanyPawnAssetUnit");
static_assert(offsetof(FTresEquipmentAccompanyPawnAssetUnit, M_Command) == 0x000000, "Member 'FTresEquipmentAccompanyPawnAssetUnit::M_Command' has a wrong offset!");
static_assert(offsetof(FTresEquipmentAccompanyPawnAssetUnit, M_AssetData) == 0x000008, "Member 'FTresEquipmentAccompanyPawnAssetUnit::M_AssetData' has a wrong offset!");

// ScriptStruct TresGame.TresEquipmentSetAssetUnit
// 0x0078 (0x0078 - 0x0000)
struct FTresEquipmentSetAssetUnit final
{
public:
	class FName                                   SetName;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresEquipmentAssetUnit>        SetData;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresEquipmentAssetUnit>        TransformSetData;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          M_ReplaceSkinAsset;                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCharWearForm                             M_OwnerWearForm;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTresAnimSet*>                   ReplaceAnimSets;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTresPlayerMagicSet*                    M_ReplaceMagicSet;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresProjectileSet*                     M_ReplaceProjectileSet;                            // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_ReplaceIKOffset;                                 // 0x0058(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresEquipmentAccompanyPawnAssetUnit> M_AccompanyPawnAssets;                             // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEquipmentSetAssetUnit) == 0x000008, "Wrong alignment on FTresEquipmentSetAssetUnit");
static_assert(sizeof(FTresEquipmentSetAssetUnit) == 0x000078, "Wrong size on FTresEquipmentSetAssetUnit");
static_assert(offsetof(FTresEquipmentSetAssetUnit, SetName) == 0x000000, "Member 'FTresEquipmentSetAssetUnit::SetName' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetAssetUnit, SetData) == 0x000008, "Member 'FTresEquipmentSetAssetUnit::SetData' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetAssetUnit, TransformSetData) == 0x000018, "Member 'FTresEquipmentSetAssetUnit::TransformSetData' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetAssetUnit, M_ReplaceSkinAsset) == 0x000028, "Member 'FTresEquipmentSetAssetUnit::M_ReplaceSkinAsset' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetAssetUnit, M_OwnerWearForm) == 0x000030, "Member 'FTresEquipmentSetAssetUnit::M_OwnerWearForm' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetAssetUnit, ReplaceAnimSets) == 0x000038, "Member 'FTresEquipmentSetAssetUnit::ReplaceAnimSets' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetAssetUnit, M_ReplaceMagicSet) == 0x000048, "Member 'FTresEquipmentSetAssetUnit::M_ReplaceMagicSet' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetAssetUnit, M_ReplaceProjectileSet) == 0x000050, "Member 'FTresEquipmentSetAssetUnit::M_ReplaceProjectileSet' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetAssetUnit, M_ReplaceIKOffset) == 0x000058, "Member 'FTresEquipmentSetAssetUnit::M_ReplaceIKOffset' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetAssetUnit, M_AccompanyPawnAssets) == 0x000068, "Member 'FTresEquipmentSetAssetUnit::M_AccompanyPawnAssets' has a wrong offset!");

// ScriptStruct TresGame.ca404aSplineParam
// 0x114F1BA0 (0x114F1BA0 - 0x0000)
struct alignas(0x114F1BA0) FCa404aSplineParam final
{
public:
	float                                         M_DefaultOffsetDistance;                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxApproachAngle;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxApproachDistance;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OffsetCorrectionAddRateOnForward;                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OffsetCorrectionMaxDist;                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OffsetCorrectionMaxSpeed;                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCa404aSplineParam) == 0x114F1BA0, "Wrong alignment on FCa404aSplineParam");
static_assert(sizeof(FCa404aSplineParam) == 0x114F1BA0, "Wrong size on FCa404aSplineParam");
static_assert(offsetof(FCa404aSplineParam, M_DefaultOffsetDistance) == 0x000000, "Member 'FCa404aSplineParam::M_DefaultOffsetDistance' has a wrong offset!");
static_assert(offsetof(FCa404aSplineParam, M_MaxApproachAngle) == 0x000004, "Member 'FCa404aSplineParam::M_MaxApproachAngle' has a wrong offset!");
static_assert(offsetof(FCa404aSplineParam, M_MaxApproachDistance) == 0x000008, "Member 'FCa404aSplineParam::M_MaxApproachDistance' has a wrong offset!");
static_assert(offsetof(FCa404aSplineParam, M_OffsetCorrectionAddRateOnForward) == 0x00000C, "Member 'FCa404aSplineParam::M_OffsetCorrectionAddRateOnForward' has a wrong offset!");
static_assert(offsetof(FCa404aSplineParam, M_OffsetCorrectionMaxDist) == 0x000010, "Member 'FCa404aSplineParam::M_OffsetCorrectionMaxDist' has a wrong offset!");
static_assert(offsetof(FCa404aSplineParam, M_OffsetCorrectionMaxSpeed) == 0x000014, "Member 'FCa404aSplineParam::M_OffsetCorrectionMaxSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresBlackboardFloatValueModifierInOutParam
// 0x0090 (0x0090 - 0x0000)
struct FTresBlackboardFloatValueModifierInOutParam final
{
public:
	uint8                                         bEnableCheck : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 CheckBlackboardKey;                                // 0x0008(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 BlackboardKeyValueA;                               // 0x0030(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseBlackboardKey : 1;                             // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETresBlackboardValueModifierInOutMethod       MethodType;                                        // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 BlackboardKeyValueB;                               // 0x0068(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBlackboardFloatValueModifierInOutParam) == 0x000004, "Wrong alignment on FTresBlackboardFloatValueModifierInOutParam");
static_assert(sizeof(FTresBlackboardFloatValueModifierInOutParam) == 0x000090, "Wrong size on FTresBlackboardFloatValueModifierInOutParam");
static_assert(offsetof(FTresBlackboardFloatValueModifierInOutParam, CheckBlackboardKey) == 0x000008, "Member 'FTresBlackboardFloatValueModifierInOutParam::CheckBlackboardKey' has a wrong offset!");
static_assert(offsetof(FTresBlackboardFloatValueModifierInOutParam, BlackboardKeyValueA) == 0x000030, "Member 'FTresBlackboardFloatValueModifierInOutParam::BlackboardKeyValueA' has a wrong offset!");
static_assert(offsetof(FTresBlackboardFloatValueModifierInOutParam, MethodType) == 0x00005C, "Member 'FTresBlackboardFloatValueModifierInOutParam::MethodType' has a wrong offset!");
static_assert(offsetof(FTresBlackboardFloatValueModifierInOutParam, Value) == 0x000060, "Member 'FTresBlackboardFloatValueModifierInOutParam::Value' has a wrong offset!");
static_assert(offsetof(FTresBlackboardFloatValueModifierInOutParam, BlackboardKeyValueB) == 0x000068, "Member 'FTresBlackboardFloatValueModifierInOutParam::BlackboardKeyValueB' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyRetryVoiceData
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyRetryVoiceData final
{
public:
	class FName                                   FaceAnimName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             VOICE;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyRetryVoiceData) == 0x000008, "Wrong alignment on FTresEnemyRetryVoiceData");
static_assert(sizeof(FTresEnemyRetryVoiceData) == 0x000010, "Wrong size on FTresEnemyRetryVoiceData");
static_assert(offsetof(FTresEnemyRetryVoiceData, FaceAnimName) == 0x000000, "Member 'FTresEnemyRetryVoiceData::FaceAnimName' has a wrong offset!");
static_assert(offsetof(FTresEnemyRetryVoiceData, VOICE) == 0x000008, "Member 'FTresEnemyRetryVoiceData::VOICE' has a wrong offset!");

// ScriptStruct TresGame.TresAbilityDataTable
// 0x7DA10 (0x11490A90 - 0x11413080)
struct alignas(0x11490A90) FTresAbilityDataTable final : public FTableRowBase
{
public:
	class FName                                   M_KeyName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityCategory                          M_Category;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityEquipType                         M_EquipType;                                       // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_UseAP;                                           // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_UseMP;                                           // 0x0013(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_MaxEquip;                                        // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_Comment;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_UIPriority;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_NameTextID;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_HelpTextID;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAbilityDataTable) == 0x11490A90, "Wrong alignment on FTresAbilityDataTable");
static_assert(sizeof(FTresAbilityDataTable) == 0x11490A90, "Wrong size on FTresAbilityDataTable");
static_assert(offsetof(FTresAbilityDataTable, M_KeyName) == 0x000008, "Member 'FTresAbilityDataTable::M_KeyName' has a wrong offset!");
static_assert(offsetof(FTresAbilityDataTable, M_Category) == 0x000010, "Member 'FTresAbilityDataTable::M_Category' has a wrong offset!");
static_assert(offsetof(FTresAbilityDataTable, M_EquipType) == 0x000011, "Member 'FTresAbilityDataTable::M_EquipType' has a wrong offset!");
static_assert(offsetof(FTresAbilityDataTable, M_UseAP) == 0x000012, "Member 'FTresAbilityDataTable::M_UseAP' has a wrong offset!");
static_assert(offsetof(FTresAbilityDataTable, M_UseMP) == 0x000013, "Member 'FTresAbilityDataTable::M_UseMP' has a wrong offset!");
static_assert(offsetof(FTresAbilityDataTable, M_MaxEquip) == 0x000014, "Member 'FTresAbilityDataTable::M_MaxEquip' has a wrong offset!");
static_assert(offsetof(FTresAbilityDataTable, M_Comment) == 0x000018, "Member 'FTresAbilityDataTable::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresAbilityDataTable, M_UIPriority) == 0x000028, "Member 'FTresAbilityDataTable::M_UIPriority' has a wrong offset!");
static_assert(offsetof(FTresAbilityDataTable, M_NameTextID) == 0x000030, "Member 'FTresAbilityDataTable::M_NameTextID' has a wrong offset!");
static_assert(offsetof(FTresAbilityDataTable, M_HelpTextID) == 0x000040, "Member 'FTresAbilityDataTable::M_HelpTextID' has a wrong offset!");

// ScriptStruct TresGame.EX355_RushAwayTractionInfo
// 0x0020 (0x0020 - 0x0000)
struct FEX355_RushAwayTractionInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fFinalVelocity;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bUsePawnDir;                                     // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_RushAwayTractionInfo) == 0x000008, "Wrong alignment on FEX355_RushAwayTractionInfo");
static_assert(sizeof(FEX355_RushAwayTractionInfo) == 0x000020, "Wrong size on FEX355_RushAwayTractionInfo");
static_assert(offsetof(FEX355_RushAwayTractionInfo, INotifyID) == 0x000000, "Member 'FEX355_RushAwayTractionInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX355_RushAwayTractionInfo, Comment) == 0x000008, "Member 'FEX355_RushAwayTractionInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX355_RushAwayTractionInfo, M_fFinalVelocity) == 0x000018, "Member 'FEX355_RushAwayTractionInfo::M_fFinalVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_RushAwayTractionInfo, M_bUsePawnDir) == 0x00001C, "Member 'FEX355_RushAwayTractionInfo::M_bUsePawnDir' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipCollisionAttachParam
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresGumiShipCollisionAttachParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_SocketNameBase;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vOffsetBase;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_SocketNameDest;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vOffsetDest;                                     // 0x0028(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_Rotate;                                          // 0x0034(0x112E9AF0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipCollisionAttachParam) == 0x112E9AF0, "Wrong alignment on FTresGumiShipCollisionAttachParam");
static_assert(sizeof(FTresGumiShipCollisionAttachParam) == 0x112E9AF0, "Wrong size on FTresGumiShipCollisionAttachParam");
static_assert(offsetof(FTresGumiShipCollisionAttachParam, M_SocketNameBase) == 0x000008, "Member 'FTresGumiShipCollisionAttachParam::M_SocketNameBase' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCollisionAttachParam, M_vOffsetBase) == 0x000010, "Member 'FTresGumiShipCollisionAttachParam::M_vOffsetBase' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCollisionAttachParam, M_SocketNameDest) == 0x000020, "Member 'FTresGumiShipCollisionAttachParam::M_SocketNameDest' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCollisionAttachParam, M_vOffsetDest) == 0x000028, "Member 'FTresGumiShipCollisionAttachParam::M_vOffsetDest' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCollisionAttachParam, M_Rotate) == 0x000034, "Member 'FTresGumiShipCollisionAttachParam::M_Rotate' has a wrong offset!");

// ScriptStruct TresGame.DebrisDetails_e_he903_DebrisAir
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FDebrisDetails_e_he903_DebrisAir final
{
public:
	TSubclassOf<class ATresProjectileBase>        M_Projectile;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_rShotAngleOffset;                                // 0x0008(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bHoming;                                         // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebrisDetails_e_he903_DebrisAir) == 0x112E9AF0, "Wrong alignment on FDebrisDetails_e_he903_DebrisAir");
static_assert(sizeof(FDebrisDetails_e_he903_DebrisAir) == 0x112E9AF0, "Wrong size on FDebrisDetails_e_he903_DebrisAir");
static_assert(offsetof(FDebrisDetails_e_he903_DebrisAir, M_Projectile) == 0x000000, "Member 'FDebrisDetails_e_he903_DebrisAir::M_Projectile' has a wrong offset!");
static_assert(offsetof(FDebrisDetails_e_he903_DebrisAir, M_rShotAngleOffset) == 0x000008, "Member 'FDebrisDetails_e_he903_DebrisAir::M_rShotAngleOffset' has a wrong offset!");
static_assert(offsetof(FDebrisDetails_e_he903_DebrisAir, M_bHoming) == 0x000014, "Member 'FDebrisDetails_e_he903_DebrisAir::M_bHoming' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_CrushingParam
// 0x112E95F0 (0x112E95F0 - 0x0000)
struct FTresEnemy_e_ex773_CrushingParam final
{
public:
	class FName                                   M_Comment;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     M_Material;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_Size;                                            // 0x0010(0x112E95F0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AnimTime;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_BreakBlendMode                          M_Mode;                                            // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_CrushingParam) == 0x112E95F0, "Wrong alignment on FTresEnemy_e_ex773_CrushingParam");
static_assert(sizeof(FTresEnemy_e_ex773_CrushingParam) == 0x112E95F0, "Wrong size on FTresEnemy_e_ex773_CrushingParam");
static_assert(offsetof(FTresEnemy_e_ex773_CrushingParam, M_Comment) == 0x000000, "Member 'FTresEnemy_e_ex773_CrushingParam::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex773_CrushingParam, M_Material) == 0x000008, "Member 'FTresEnemy_e_ex773_CrushingParam::M_Material' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex773_CrushingParam, M_Size) == 0x000010, "Member 'FTresEnemy_e_ex773_CrushingParam::M_Size' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex773_CrushingParam, M_AnimTime) == 0x000018, "Member 'FTresEnemy_e_ex773_CrushingParam::M_AnimTime' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex773_CrushingParam, M_Mode) == 0x00001C, "Member 'FTresEnemy_e_ex773_CrushingParam::M_Mode' has a wrong offset!");

// ScriptStruct TresGame.RevengeAttacks
// 0x0010 (0x0010 - 0x0000)
struct FRevengeAttacks final
{
public:
	TSubclassOf<class UTresActionDefinitionBase>  RevengeAttackDefinition;                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAir : 1;                                          // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRevengeAttacks) == 0x000008, "Wrong alignment on FRevengeAttacks");
static_assert(sizeof(FRevengeAttacks) == 0x000010, "Wrong size on FRevengeAttacks");
static_assert(offsetof(FRevengeAttacks, RevengeAttackDefinition) == 0x000000, "Member 'FRevengeAttacks::RevengeAttackDefinition' has a wrong offset!");

// ScriptStruct TresGame.EX354_CreateArmWarpInfo
// 0x114B6390 (0x114B6390 - 0x0000)
struct alignas(0x114B6390) FEX354_CreateArmWarpInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ETresEnemy_e_ex354_ArmWarpType                M_ArmWarpType;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresEnemy_e_ex354_ArmWarpPos                 M_PosType;                                         // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX354_ArmSpawnDirType                        M_DirType;                                         // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDistance;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPitch;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fYaw;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bPitchAdjustToCamera;                            // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fPitchAdjustToCamera_MaxPitchDiff;               // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bReverseCameraPitch;                             // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fPitchAdjustToCamera_MaxPitch;                   // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPitchAdjustToCamera_MinPitch;                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bPitchAdjustToCamera_DebugDisp;                  // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX354_ArmSpawnPosAdjustType                  M_SpawnPosAdjustType;                              // 0x0025(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_SpawnPosAdjustMaxAngle;                          // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTargetVelocityAdjust_MaxVelocity;               // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTargetVelocityAdjustRate;                       // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bTargetVelocityAdjustDirectional;                // 0x0034(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fTargetVelocityAdjustDirectionalYaw;             // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTargetVelocityAdjustDirectionalYawWidth;        // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTargetVelocityAdjustDirectionalScale;           // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMinHeight;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX354_ArmAimDirType                          M_AimDirType;                                      // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fTargetVelocityRotAdjust_MaxVelocity;            // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTargetVelocityRotAdjustRate;                    // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTargetVelocityRotAdjust_MaxPitch;               // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTargetVelocityRotAdjust_MaxYaw;                 // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_CreateArmWarpInfo) == 0x114B6390, "Wrong alignment on FEX354_CreateArmWarpInfo");
static_assert(sizeof(FEX354_CreateArmWarpInfo) == 0x114B6390, "Wrong size on FEX354_CreateArmWarpInfo");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_ArmWarpType) == 0x000001, "Member 'FEX354_CreateArmWarpInfo::M_ArmWarpType' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_PosType) == 0x000002, "Member 'FEX354_CreateArmWarpInfo::M_PosType' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_DirType) == 0x000003, "Member 'FEX354_CreateArmWarpInfo::M_DirType' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fDistance) == 0x000004, "Member 'FEX354_CreateArmWarpInfo::M_fDistance' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fPitch) == 0x000008, "Member 'FEX354_CreateArmWarpInfo::M_fPitch' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fYaw) == 0x00000C, "Member 'FEX354_CreateArmWarpInfo::M_fYaw' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_bPitchAdjustToCamera) == 0x000010, "Member 'FEX354_CreateArmWarpInfo::M_bPitchAdjustToCamera' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fPitchAdjustToCamera_MaxPitchDiff) == 0x000014, "Member 'FEX354_CreateArmWarpInfo::M_fPitchAdjustToCamera_MaxPitchDiff' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_bReverseCameraPitch) == 0x000018, "Member 'FEX354_CreateArmWarpInfo::M_bReverseCameraPitch' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fPitchAdjustToCamera_MaxPitch) == 0x00001C, "Member 'FEX354_CreateArmWarpInfo::M_fPitchAdjustToCamera_MaxPitch' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fPitchAdjustToCamera_MinPitch) == 0x000020, "Member 'FEX354_CreateArmWarpInfo::M_fPitchAdjustToCamera_MinPitch' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_bPitchAdjustToCamera_DebugDisp) == 0x000024, "Member 'FEX354_CreateArmWarpInfo::M_bPitchAdjustToCamera_DebugDisp' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_SpawnPosAdjustType) == 0x000025, "Member 'FEX354_CreateArmWarpInfo::M_SpawnPosAdjustType' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_SpawnPosAdjustMaxAngle) == 0x000028, "Member 'FEX354_CreateArmWarpInfo::M_SpawnPosAdjustMaxAngle' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fTargetVelocityAdjust_MaxVelocity) == 0x00002C, "Member 'FEX354_CreateArmWarpInfo::M_fTargetVelocityAdjust_MaxVelocity' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fTargetVelocityAdjustRate) == 0x000030, "Member 'FEX354_CreateArmWarpInfo::M_fTargetVelocityAdjustRate' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_bTargetVelocityAdjustDirectional) == 0x000034, "Member 'FEX354_CreateArmWarpInfo::M_bTargetVelocityAdjustDirectional' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fTargetVelocityAdjustDirectionalYaw) == 0x000038, "Member 'FEX354_CreateArmWarpInfo::M_fTargetVelocityAdjustDirectionalYaw' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fTargetVelocityAdjustDirectionalYawWidth) == 0x00003C, "Member 'FEX354_CreateArmWarpInfo::M_fTargetVelocityAdjustDirectionalYawWidth' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fTargetVelocityAdjustDirectionalScale) == 0x000040, "Member 'FEX354_CreateArmWarpInfo::M_fTargetVelocityAdjustDirectionalScale' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fMinHeight) == 0x000044, "Member 'FEX354_CreateArmWarpInfo::M_fMinHeight' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_AimDirType) == 0x000048, "Member 'FEX354_CreateArmWarpInfo::M_AimDirType' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fTargetVelocityRotAdjust_MaxVelocity) == 0x00004C, "Member 'FEX354_CreateArmWarpInfo::M_fTargetVelocityRotAdjust_MaxVelocity' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fTargetVelocityRotAdjustRate) == 0x000050, "Member 'FEX354_CreateArmWarpInfo::M_fTargetVelocityRotAdjustRate' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fTargetVelocityRotAdjust_MaxPitch) == 0x000054, "Member 'FEX354_CreateArmWarpInfo::M_fTargetVelocityRotAdjust_MaxPitch' has a wrong offset!");
static_assert(offsetof(FEX354_CreateArmWarpInfo, M_fTargetVelocityRotAdjust_MaxYaw) == 0x000058, "Member 'FEX354_CreateArmWarpInfo::M_fTargetVelocityRotAdjust_MaxYaw' has a wrong offset!");

// ScriptStruct TresGame.EX354_CreateArmWarpInfoSet
// 0x114B6390 (0x114B6390 - 0x0000)
struct FEX354_CreateArmWarpInfoSet final
{
public:
	struct FEX354_CreateArmWarpInfo               M_ArmWarpInfoArray[0x2];                           // 0x0000(0x114B6390)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_CreateArmWarpInfoSet) == 0x114B6390, "Wrong alignment on FEX354_CreateArmWarpInfoSet");
static_assert(sizeof(FEX354_CreateArmWarpInfoSet) == 0x114B6390, "Wrong size on FEX354_CreateArmWarpInfoSet");
static_assert(offsetof(FEX354_CreateArmWarpInfoSet, M_ArmWarpInfoArray) == 0x000000, "Member 'FEX354_CreateArmWarpInfoSet::M_ArmWarpInfoArray' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyDarkSidePawnBase_LockOnParam
// 0x113B9B70 (0x113B9B70 - 0x0000)
struct alignas(0x113B9B70) FTresEnemyDarkSidePawnBase_LockOnParam final
{
public:
	ETresEnemydw407Region                         Region;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneOffset;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyDarkSidePawnBase_LockOnParam) == 0x113B9B70, "Wrong alignment on FTresEnemyDarkSidePawnBase_LockOnParam");
static_assert(sizeof(FTresEnemyDarkSidePawnBase_LockOnParam) == 0x113B9B70, "Wrong size on FTresEnemyDarkSidePawnBase_LockOnParam");
static_assert(offsetof(FTresEnemyDarkSidePawnBase_LockOnParam, Region) == 0x000000, "Member 'FTresEnemyDarkSidePawnBase_LockOnParam::Region' has a wrong offset!");
static_assert(offsetof(FTresEnemyDarkSidePawnBase_LockOnParam, BoneName) == 0x000008, "Member 'FTresEnemyDarkSidePawnBase_LockOnParam::BoneName' has a wrong offset!");
static_assert(offsetof(FTresEnemyDarkSidePawnBase_LockOnParam, BoneOffset) == 0x000010, "Member 'FTresEnemyDarkSidePawnBase_LockOnParam::BoneOffset' has a wrong offset!");

// ScriptStruct TresGame.TresAccessory_e_ex036_WaterBall
// 0x0018 (0x0018 - 0x0000)
struct FTresAccessory_e_ex036_WaterBall final
{
public:
	class UParticleSystemComponent*               M_WaterBallEff;                                    // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAccessory_e_ex036_WaterBall) == 0x000008, "Wrong alignment on FTresAccessory_e_ex036_WaterBall");
static_assert(sizeof(FTresAccessory_e_ex036_WaterBall) == 0x000018, "Wrong size on FTresAccessory_e_ex036_WaterBall");
static_assert(offsetof(FTresAccessory_e_ex036_WaterBall, M_WaterBallEff) == 0x000000, "Member 'FTresAccessory_e_ex036_WaterBall::M_WaterBallEff' has a wrong offset!");

// ScriptStruct TresGame.TresShortcutCommandPageData
// 0x0004 (0x0004 - 0x0000)
struct FTresShortcutCommandPageData final
{
public:
	ETresCommandKind                              Commands[0x4];                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresShortcutCommandPageData) == 0x000001, "Wrong alignment on FTresShortcutCommandPageData");
static_assert(sizeof(FTresShortcutCommandPageData) == 0x000004, "Wrong size on FTresShortcutCommandPageData");
static_assert(offsetof(FTresShortcutCommandPageData, Commands) == 0x000000, "Member 'FTresShortcutCommandPageData::Commands' has a wrong offset!");

// ScriptStruct TresGame.TresShortcutCommandData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresShortcutCommandData final : public FTableRowBase
{
public:
	struct FTresShortcutCommandPageData           Page1;                                             // 0x0008(0x0004)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresShortcutCommandPageData           Page2;                                             // 0x000C(0x0004)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresShortcutCommandPageData           Page3;                                             // 0x0010(0x0004)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x1C];                                      // 0x0014(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresShortcutCommandData) == 0x11413080, "Wrong alignment on FTresShortcutCommandData");
static_assert(sizeof(FTresShortcutCommandData) == 0x11413080, "Wrong size on FTresShortcutCommandData");
static_assert(offsetof(FTresShortcutCommandData, Page1) == 0x000008, "Member 'FTresShortcutCommandData::Page1' has a wrong offset!");
static_assert(offsetof(FTresShortcutCommandData, Page2) == 0x00000C, "Member 'FTresShortcutCommandData::Page2' has a wrong offset!");
static_assert(offsetof(FTresShortcutCommandData, Page3) == 0x000010, "Member 'FTresShortcutCommandData::Page3' has a wrong offset!");

// ScriptStruct TresGame.TresMotion_e_ex011_Bombardment
// 0x0018 (0x0018 - 0x0000)
struct FTresMotion_e_ex011_Bombardment final
{
public:
	class UAnimSequenceBase*                      StartAnimData;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      LoopAnimData;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      EndAnimData;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMotion_e_ex011_Bombardment) == 0x000008, "Wrong alignment on FTresMotion_e_ex011_Bombardment");
static_assert(sizeof(FTresMotion_e_ex011_Bombardment) == 0x000018, "Wrong size on FTresMotion_e_ex011_Bombardment");
static_assert(offsetof(FTresMotion_e_ex011_Bombardment, StartAnimData) == 0x000000, "Member 'FTresMotion_e_ex011_Bombardment::StartAnimData' has a wrong offset!");
static_assert(offsetof(FTresMotion_e_ex011_Bombardment, LoopAnimData) == 0x000008, "Member 'FTresMotion_e_ex011_Bombardment::LoopAnimData' has a wrong offset!");
static_assert(offsetof(FTresMotion_e_ex011_Bombardment, EndAnimData) == 0x000010, "Member 'FTresMotion_e_ex011_Bombardment::EndAnimData' has a wrong offset!");

// ScriptStruct TresGame.TresHologramActorPoseTableInfo
// 0x000C (0x000C - 0x0000)
struct FTresHologramActorPoseTableInfo final
{
public:
	TWeakObjectPtr<class UDataTable>              M_pTable;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHologramActorPoseTableInfo) == 0x000004, "Wrong alignment on FTresHologramActorPoseTableInfo");
static_assert(sizeof(FTresHologramActorPoseTableInfo) == 0x00000C, "Wrong size on FTresHologramActorPoseTableInfo");
static_assert(offsetof(FTresHologramActorPoseTableInfo, M_pTable) == 0x000000, "Member 'FTresHologramActorPoseTableInfo::M_pTable' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipItemGetObjects
// 0x0020 (0x0020 - 0x0000)
struct FTresGumiShipItemGetObjects final
{
public:
	class UGFxObject*                             M_pRoot;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pMaxIcon;                                        // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pItemName;                                       // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pItemNum;                                        // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipItemGetObjects) == 0x000008, "Wrong alignment on FTresGumiShipItemGetObjects");
static_assert(sizeof(FTresGumiShipItemGetObjects) == 0x000020, "Wrong size on FTresGumiShipItemGetObjects");
static_assert(offsetof(FTresGumiShipItemGetObjects, M_pRoot) == 0x000000, "Member 'FTresGumiShipItemGetObjects::M_pRoot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipItemGetObjects, M_pMaxIcon) == 0x000008, "Member 'FTresGumiShipItemGetObjects::M_pMaxIcon' has a wrong offset!");
static_assert(offsetof(FTresGumiShipItemGetObjects, M_pItemName) == 0x000010, "Member 'FTresGumiShipItemGetObjects::M_pItemName' has a wrong offset!");
static_assert(offsetof(FTresGumiShipItemGetObjects, M_pItemNum) == 0x000018, "Member 'FTresGumiShipItemGetObjects::M_pItemNum' has a wrong offset!");

// ScriptStruct TresGame.EX359_LaserRainTriangleGuardInfo
// 0x0018 (0x0018 - 0x0000)
struct FEX359_LaserRainTriangleGuardInfo final
{
public:
	class ATresProjectileBase*                    M_Proj;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_LaserRainTriangleGuardInfo) == 0x000008, "Wrong alignment on FEX359_LaserRainTriangleGuardInfo");
static_assert(sizeof(FEX359_LaserRainTriangleGuardInfo) == 0x000018, "Wrong size on FEX359_LaserRainTriangleGuardInfo");
static_assert(offsetof(FEX359_LaserRainTriangleGuardInfo, M_Proj) == 0x000000, "Member 'FEX359_LaserRainTriangleGuardInfo::M_Proj' has a wrong offset!");

// ScriptStruct TresGame.EX359_LaserRainTriangleGuardInfoSet
// 0x0010 (0x0010 - 0x0000)
struct FEX359_LaserRainTriangleGuardInfoSet final
{
public:
	TArray<struct FEX359_LaserRainTriangleGuardInfo> M_InfoArray;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_LaserRainTriangleGuardInfoSet) == 0x000008, "Wrong alignment on FEX359_LaserRainTriangleGuardInfoSet");
static_assert(sizeof(FEX359_LaserRainTriangleGuardInfoSet) == 0x000010, "Wrong size on FEX359_LaserRainTriangleGuardInfoSet");
static_assert(offsetof(FEX359_LaserRainTriangleGuardInfoSet, M_InfoArray) == 0x000000, "Member 'FEX359_LaserRainTriangleGuardInfoSet::M_InfoArray' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBadStateResistance
// 0x0001 (0x0001 - 0x0000)
struct FTresGumiShipBadStateResistance final
{
public:
	bool                                          M_bStun;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipBadStateResistance) == 0x000001, "Wrong alignment on FTresGumiShipBadStateResistance");
static_assert(sizeof(FTresGumiShipBadStateResistance) == 0x000001, "Wrong size on FTresGumiShipBadStateResistance");
static_assert(offsetof(FTresGumiShipBadStateResistance, M_bStun) == 0x000000, "Member 'FTresGumiShipBadStateResistance::M_bStun' has a wrong offset!");

// ScriptStruct TresGame.WarpSet_e_ex306
// 0x0030 (0x0030 - 0x0000)
struct FWarpSet_e_ex306 final
{
public:
	class FName                                   M_GoalBBKeyName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WarpTime;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresCharPawnBase*                      M_pOwner;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18[0x18];                                      // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWarpSet_e_ex306) == 0x000008, "Wrong alignment on FWarpSet_e_ex306");
static_assert(sizeof(FWarpSet_e_ex306) == 0x000030, "Wrong size on FWarpSet_e_ex306");
static_assert(offsetof(FWarpSet_e_ex306, M_GoalBBKeyName) == 0x000000, "Member 'FWarpSet_e_ex306::M_GoalBBKeyName' has a wrong offset!");
static_assert(offsetof(FWarpSet_e_ex306, M_WarpTime) == 0x000008, "Member 'FWarpSet_e_ex306::M_WarpTime' has a wrong offset!");
static_assert(offsetof(FWarpSet_e_ex306, M_pOwner) == 0x000010, "Member 'FWarpSet_e_ex306::M_pOwner' has a wrong offset!");

// ScriptStruct TresGame.MagmaTornadoSpawnerInfo
// 0x1156F6E0 (0x1156F6E0 - 0x0000)
struct alignas(0x1156F6E0) FMagmaTornadoSpawnerInfo final
{
public:
	struct FVector                                M_vSpawnOffset;                                    // 0x0000(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLifeTime;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxVelocity;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAccel;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingRotVelocity;                              // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingMinDistance2D;                            // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingMaxYaw;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fProjectileSpawnWidth;                           // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fProjectileSpawnDepth;                           // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fProjectileSpawnInterval;                        // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMagmaTornadoSpawnerInfo) == 0x1156F6E0, "Wrong alignment on FMagmaTornadoSpawnerInfo");
static_assert(sizeof(FMagmaTornadoSpawnerInfo) == 0x1156F6E0, "Wrong size on FMagmaTornadoSpawnerInfo");
static_assert(offsetof(FMagmaTornadoSpawnerInfo, M_vSpawnOffset) == 0x000000, "Member 'FMagmaTornadoSpawnerInfo::M_vSpawnOffset' has a wrong offset!");
static_assert(offsetof(FMagmaTornadoSpawnerInfo, M_fLifeTime) == 0x00000C, "Member 'FMagmaTornadoSpawnerInfo::M_fLifeTime' has a wrong offset!");
static_assert(offsetof(FMagmaTornadoSpawnerInfo, M_fMaxVelocity) == 0x000010, "Member 'FMagmaTornadoSpawnerInfo::M_fMaxVelocity' has a wrong offset!");
static_assert(offsetof(FMagmaTornadoSpawnerInfo, M_fAccel) == 0x000014, "Member 'FMagmaTornadoSpawnerInfo::M_fAccel' has a wrong offset!");
static_assert(offsetof(FMagmaTornadoSpawnerInfo, M_fHomingRotVelocity) == 0x000018, "Member 'FMagmaTornadoSpawnerInfo::M_fHomingRotVelocity' has a wrong offset!");
static_assert(offsetof(FMagmaTornadoSpawnerInfo, M_fHomingMinDistance2D) == 0x00001C, "Member 'FMagmaTornadoSpawnerInfo::M_fHomingMinDistance2D' has a wrong offset!");
static_assert(offsetof(FMagmaTornadoSpawnerInfo, M_fHomingMaxYaw) == 0x000020, "Member 'FMagmaTornadoSpawnerInfo::M_fHomingMaxYaw' has a wrong offset!");
static_assert(offsetof(FMagmaTornadoSpawnerInfo, M_fProjectileSpawnWidth) == 0x000024, "Member 'FMagmaTornadoSpawnerInfo::M_fProjectileSpawnWidth' has a wrong offset!");
static_assert(offsetof(FMagmaTornadoSpawnerInfo, M_fProjectileSpawnDepth) == 0x000028, "Member 'FMagmaTornadoSpawnerInfo::M_fProjectileSpawnDepth' has a wrong offset!");
static_assert(offsetof(FMagmaTornadoSpawnerInfo, M_fProjectileSpawnInterval) == 0x00002C, "Member 'FMagmaTornadoSpawnerInfo::M_fProjectileSpawnInterval' has a wrong offset!");

// ScriptStruct TresGame.TresHologramSubAnimReplaceDef
// 0x113BF0F0 (0x113BF0F0 - 0x0000)
struct alignas(0x113BF0F0) FTresHologramSubAnimReplaceDef final
{
public:
	ETresHologramSubAnimReplaceType               M_Type;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Slot;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AnimName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresHologramSubAnimReplaceDef) == 0x113BF0F0, "Wrong alignment on FTresHologramSubAnimReplaceDef");
static_assert(sizeof(FTresHologramSubAnimReplaceDef) == 0x113BF0F0, "Wrong size on FTresHologramSubAnimReplaceDef");
static_assert(offsetof(FTresHologramSubAnimReplaceDef, M_Type) == 0x000000, "Member 'FTresHologramSubAnimReplaceDef::M_Type' has a wrong offset!");
static_assert(offsetof(FTresHologramSubAnimReplaceDef, M_Slot) == 0x000008, "Member 'FTresHologramSubAnimReplaceDef::M_Slot' has a wrong offset!");
static_assert(offsetof(FTresHologramSubAnimReplaceDef, M_AnimName) == 0x000010, "Member 'FTresHologramSubAnimReplaceDef::M_AnimName' has a wrong offset!");

// ScriptStruct TresGame.TresHologramSubAnimReplaceInfo
// 0x0020 (0x0020 - 0x0000)
struct FTresHologramSubAnimReplaceInfo final
{
public:
	TArray<class FName>                           M_ValidSlotList;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresHologramSubAnimReplaceDef> M_ReplaceDefList;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresHologramSubAnimReplaceInfo) == 0x000008, "Wrong alignment on FTresHologramSubAnimReplaceInfo");
static_assert(sizeof(FTresHologramSubAnimReplaceInfo) == 0x000020, "Wrong size on FTresHologramSubAnimReplaceInfo");
static_assert(offsetof(FTresHologramSubAnimReplaceInfo, M_ValidSlotList) == 0x000000, "Member 'FTresHologramSubAnimReplaceInfo::M_ValidSlotList' has a wrong offset!");
static_assert(offsetof(FTresHologramSubAnimReplaceInfo, M_ReplaceDefList) == 0x000010, "Member 'FTresHologramSubAnimReplaceInfo::M_ReplaceDefList' has a wrong offset!");

// ScriptStruct TresGame.Tres_EQS_ParamName
// 0x0014 (0x0014 - 0x0000)
struct FTres_EQS_ParamName final
{
public:
	EQS_PARAM_NAME_Enum                           M_Name;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Value;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RandomValue;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQS_PARAM_VALUE_Enum                          M_EnumValue;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x7];                                        // 0x000D(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTres_EQS_ParamName) == 0x000004, "Wrong alignment on FTres_EQS_ParamName");
static_assert(sizeof(FTres_EQS_ParamName) == 0x000014, "Wrong size on FTres_EQS_ParamName");
static_assert(offsetof(FTres_EQS_ParamName, M_Name) == 0x000000, "Member 'FTres_EQS_ParamName::M_Name' has a wrong offset!");
static_assert(offsetof(FTres_EQS_ParamName, M_Value) == 0x000004, "Member 'FTres_EQS_ParamName::M_Value' has a wrong offset!");
static_assert(offsetof(FTres_EQS_ParamName, M_RandomValue) == 0x000008, "Member 'FTres_EQS_ParamName::M_RandomValue' has a wrong offset!");
static_assert(offsetof(FTres_EQS_ParamName, M_EnumValue) == 0x00000C, "Member 'FTres_EQS_ParamName::M_EnumValue' has a wrong offset!");

// ScriptStruct TresGame.TresNameEntryTextData
// 0x0640 (0x0640 - 0x0000)
struct FTresNameEntryTextData final
{
public:
	class FString                                 Text[0x64];                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresNameEntryTextData) == 0x000008, "Wrong alignment on FTresNameEntryTextData");
static_assert(sizeof(FTresNameEntryTextData) == 0x000640, "Wrong size on FTresNameEntryTextData");
static_assert(offsetof(FTresNameEntryTextData, Text) == 0x000000, "Member 'FTresNameEntryTextData::Text' has a wrong offset!");

// ScriptStruct TresGame.TresNameEntryTextDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresNameEntryTextDataTable final : public FTableRowBase
{
public:
	struct FTresNameEntryTextData                 TextList[0x9];                                     // 0x0008(0x0640)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresNameEntryTextDataTable) == 0x11413080, "Wrong alignment on FTresNameEntryTextDataTable");
static_assert(sizeof(FTresNameEntryTextDataTable) == 0x11413080, "Wrong size on FTresNameEntryTextDataTable");
static_assert(offsetof(FTresNameEntryTextDataTable, TextList) == 0x000008, "Member 'FTresNameEntryTextDataTable::TextList' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBattleMisisonBonusWithConditionI
// 0x11520B60 (0x11520B60 - 0x0000)
struct alignas(0x11520B60) FTresGumiShipBattleMisisonBonusWithConditionI final
{
public:
	uint32                                        M_udBonusPoint;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_dConditionValue;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipBattleMisisonBonusWithConditionI) == 0x11520B60, "Wrong alignment on FTresGumiShipBattleMisisonBonusWithConditionI");
static_assert(sizeof(FTresGumiShipBattleMisisonBonusWithConditionI) == 0x11520B60, "Wrong size on FTresGumiShipBattleMisisonBonusWithConditionI");
static_assert(offsetof(FTresGumiShipBattleMisisonBonusWithConditionI, M_udBonusPoint) == 0x000000, "Member 'FTresGumiShipBattleMisisonBonusWithConditionI::M_udBonusPoint' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMisisonBonusWithConditionI, M_dConditionValue) == 0x000004, "Member 'FTresGumiShipBattleMisisonBonusWithConditionI::M_dConditionValue' has a wrong offset!");

// ScriptStruct TresGame.TresPhotoHologramFacialDef
// 0x113BF830 (0x113BF830 - 0x0000)
struct alignas(0x113BF830) FTresPhotoHologramFacialDef final
{
public:
	class FName                                   FacialType;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyeAnimName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipAnimName;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextId;                                            // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextIndex;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PreEvent;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PostEvent;                                         // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPhotoHologramFacialDef) == 0x113BF830, "Wrong alignment on FTresPhotoHologramFacialDef");
static_assert(sizeof(FTresPhotoHologramFacialDef) == 0x113BF830, "Wrong size on FTresPhotoHologramFacialDef");
static_assert(offsetof(FTresPhotoHologramFacialDef, FacialType) == 0x000000, "Member 'FTresPhotoHologramFacialDef::FacialType' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramFacialDef, EyeAnimName) == 0x000008, "Member 'FTresPhotoHologramFacialDef::EyeAnimName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramFacialDef, LipAnimName) == 0x000010, "Member 'FTresPhotoHologramFacialDef::LipAnimName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramFacialDef, TextId) == 0x000018, "Member 'FTresPhotoHologramFacialDef::TextId' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramFacialDef, TextIndex) == 0x000028, "Member 'FTresPhotoHologramFacialDef::TextIndex' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramFacialDef, PreEvent) == 0x000030, "Member 'FTresPhotoHologramFacialDef::PreEvent' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramFacialDef, PostEvent) == 0x000038, "Member 'FTresPhotoHologramFacialDef::PostEvent' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_ExFlareTornadoParam
// 0x49BD (0x49BD - 0x0000)
struct alignas(0x49BD) FTresEnemy_e_ex771_ExFlareTornadoParam final
{
public:
	uint8                                         Pad_0[0x130];                                      // 0x0000(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_ExFlareTornadoParam) == 0x0049BD, "Wrong alignment on FTresEnemy_e_ex771_ExFlareTornadoParam");
static_assert(sizeof(FTresEnemy_e_ex771_ExFlareTornadoParam) == 0x0049BD, "Wrong size on FTresEnemy_e_ex771_ExFlareTornadoParam");

// ScriptStruct TresGame.SQEX_EffectCurveData
// 0x0050 (0x0050 - 0x0000)
struct FSQEX_EffectCurveData final
{
public:
	EFSQEX_EFFCT_CURVE_DATA_AXIS                  ParamAxis;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CurveData;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCurveAsset;                                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   XCurveName;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseParameterX;                                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   YCurveName;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseParameterY;                                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ZCurveName;                                        // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseParameterZ;                                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_EffectCurveData) == 0x000008, "Wrong alignment on FSQEX_EffectCurveData");
static_assert(sizeof(FSQEX_EffectCurveData) == 0x000050, "Wrong size on FSQEX_EffectCurveData");
static_assert(offsetof(FSQEX_EffectCurveData, ParamAxis) == 0x000000, "Member 'FSQEX_EffectCurveData::ParamAxis' has a wrong offset!");
static_assert(offsetof(FSQEX_EffectCurveData, ParameterName) == 0x000008, "Member 'FSQEX_EffectCurveData::ParameterName' has a wrong offset!");
static_assert(offsetof(FSQEX_EffectCurveData, CurveData) == 0x000010, "Member 'FSQEX_EffectCurveData::CurveData' has a wrong offset!");
static_assert(offsetof(FSQEX_EffectCurveData, bUseCurveAsset) == 0x000018, "Member 'FSQEX_EffectCurveData::bUseCurveAsset' has a wrong offset!");
static_assert(offsetof(FSQEX_EffectCurveData, XCurveName) == 0x000020, "Member 'FSQEX_EffectCurveData::XCurveName' has a wrong offset!");
static_assert(offsetof(FSQEX_EffectCurveData, bUseParameterX) == 0x000028, "Member 'FSQEX_EffectCurveData::bUseParameterX' has a wrong offset!");
static_assert(offsetof(FSQEX_EffectCurveData, YCurveName) == 0x000030, "Member 'FSQEX_EffectCurveData::YCurveName' has a wrong offset!");
static_assert(offsetof(FSQEX_EffectCurveData, bUseParameterY) == 0x000038, "Member 'FSQEX_EffectCurveData::bUseParameterY' has a wrong offset!");
static_assert(offsetof(FSQEX_EffectCurveData, ZCurveName) == 0x000040, "Member 'FSQEX_EffectCurveData::ZCurveName' has a wrong offset!");
static_assert(offsetof(FSQEX_EffectCurveData, bUseParameterZ) == 0x000048, "Member 'FSQEX_EffectCurveData::bUseParameterZ' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipEnemyGroupWipeOutData
// 0x1EF72A70 (0x1EF72A70 - 0x0000)
struct alignas(0x1EF72A70) FTresGumiShipEnemyGroupWipeOutData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipEnemyGroupWipeOutData) == 0x1EF72A70, "Wrong alignment on FTresGumiShipEnemyGroupWipeOutData");
static_assert(sizeof(FTresGumiShipEnemyGroupWipeOutData) == 0x1EF72A70, "Wrong size on FTresGumiShipEnemyGroupWipeOutData");

// ScriptStruct TresGame.TresEnemyEx351AfterImageEffect
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx351AfterImageEffect final
{
public:
	class UParticleSystem*                        WarpEffectData;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        VisibleEffectData;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx351AfterImageEffect) == 0x000008, "Wrong alignment on FTresEnemyEx351AfterImageEffect");
static_assert(sizeof(FTresEnemyEx351AfterImageEffect) == 0x000010, "Wrong size on FTresEnemyEx351AfterImageEffect");
static_assert(offsetof(FTresEnemyEx351AfterImageEffect, WarpEffectData) == 0x000000, "Member 'FTresEnemyEx351AfterImageEffect::WarpEffectData' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351AfterImageEffect, VisibleEffectData) == 0x000008, "Member 'FTresEnemyEx351AfterImageEffect::VisibleEffectData' has a wrong offset!");

// ScriptStruct TresGame.TresDanceNpcActionSet
// 0x0010 (0x0010 - 0x0000)
struct FTresDanceNpcActionSet final
{
public:
	TArray<EDanceActorAction>                     ActionList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDanceNpcActionSet) == 0x000008, "Wrong alignment on FTresDanceNpcActionSet");
static_assert(sizeof(FTresDanceNpcActionSet) == 0x000010, "Wrong size on FTresDanceNpcActionSet");
static_assert(offsetof(FTresDanceNpcActionSet, ActionList) == 0x000000, "Member 'FTresDanceNpcActionSet::ActionList' has a wrong offset!");

// ScriptStruct TresGame.TresCollMgrSubTickFunction
// 0x215E (0x21B6 - 0x0058)
struct alignas(0x21B6) FTresCollMgrSubTickFunction : public FTickFunction
{
};
static_assert(alignof(FTresCollMgrSubTickFunction) == 0x0021B6, "Wrong alignment on FTresCollMgrSubTickFunction");
static_assert(sizeof(FTresCollMgrSubTickFunction) == 0x0021B6, "Wrong size on FTresCollMgrSubTickFunction");

// ScriptStruct TresGame.SpecialMoveMissionParam
// 0x0002 (0x0002 - 0x0000)
struct FSpecialMoveMissionParam final
{
public:
	EDancePerformType                             Perform;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDanceActorType                               ActorType;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialMoveMissionParam) == 0x000001, "Wrong alignment on FSpecialMoveMissionParam");
static_assert(sizeof(FSpecialMoveMissionParam) == 0x000002, "Wrong size on FSpecialMoveMissionParam");
static_assert(offsetof(FSpecialMoveMissionParam, Perform) == 0x000000, "Member 'FSpecialMoveMissionParam::Perform' has a wrong offset!");
static_assert(offsetof(FSpecialMoveMissionParam, ActorType) == 0x000001, "Member 'FSpecialMoveMissionParam::ActorType' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuMotionObjectKeyFrame
// 0x114E9890 (0x114E9890 - 0x0000)
struct alignas(0x114E9890) FTresDebugMenuMotionObjectKeyFrame final
{
public:
	struct FVector2D                              M_Anchor;                                          // 0x0000(0x112E95F0)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_Next;                                            // 0x0008(0x112E95F0)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_Previous;                                        // 0x0010(0x112E95F0)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Time;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuMotionObjectKeyFrame) == 0x114E9890, "Wrong alignment on FTresDebugMenuMotionObjectKeyFrame");
static_assert(sizeof(FTresDebugMenuMotionObjectKeyFrame) == 0x114E9890, "Wrong size on FTresDebugMenuMotionObjectKeyFrame");
static_assert(offsetof(FTresDebugMenuMotionObjectKeyFrame, M_Anchor) == 0x000000, "Member 'FTresDebugMenuMotionObjectKeyFrame::M_Anchor' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMotionObjectKeyFrame, M_Next) == 0x000008, "Member 'FTresDebugMenuMotionObjectKeyFrame::M_Next' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMotionObjectKeyFrame, M_Previous) == 0x000010, "Member 'FTresDebugMenuMotionObjectKeyFrame::M_Previous' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMotionObjectKeyFrame, M_Time) == 0x000018, "Member 'FTresDebugMenuMotionObjectKeyFrame::M_Time' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuMotionObjectProperty
// 0x0018 (0x0018 - 0x0000)
struct FTresDebugMenuMotionObjectProperty final
{
public:
	ETresDebugMenuMotionObjectPropertyType        M_PropertyType;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresDebugMenuMotionObjectKeyFrame> M_KeyFrames;                                       // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuMotionObjectProperty) == 0x000008, "Wrong alignment on FTresDebugMenuMotionObjectProperty");
static_assert(sizeof(FTresDebugMenuMotionObjectProperty) == 0x000018, "Wrong size on FTresDebugMenuMotionObjectProperty");
static_assert(offsetof(FTresDebugMenuMotionObjectProperty, M_PropertyType) == 0x000000, "Member 'FTresDebugMenuMotionObjectProperty::M_PropertyType' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMotionObjectProperty, M_KeyFrames) == 0x000008, "Member 'FTresDebugMenuMotionObjectProperty::M_KeyFrames' has a wrong offset!");

// ScriptStruct TresGame.TresGMInputResult
// 0x1F5DC7E8 (0x1F5DC7E8 - 0x0000)
struct alignas(0x1F5DC7E8) FTresGMInputResult final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGMInputResult) == 0x1F5DC7E8, "Wrong alignment on FTresGMInputResult");
static_assert(sizeof(FTresGMInputResult) == 0x1F5DC7E8, "Wrong size on FTresGMInputResult");

// ScriptStruct TresGame.TresNauticalChartData
// 0x13EB80 (0x11551C00 - 0x11413080)
struct alignas(0x11551C00) FTresNauticalChartData final : public FTableRowBase
{
public:
	ETresUINauticalChartPoint                     NO;                                                // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextId;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Point;                                             // 0x0020(0x112E95F0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Range;                                             // 0x0028(0x112E95F0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoal;                                             // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSavePoint;                                        // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisitedMarker;                                    // 0x0032(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MapName;                                           // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartTag;                                          // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VisitedMarkerFlag;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresNauticalChartData) == 0x11551C00, "Wrong alignment on FTresNauticalChartData");
static_assert(sizeof(FTresNauticalChartData) == 0x11551C00, "Wrong size on FTresNauticalChartData");
static_assert(offsetof(FTresNauticalChartData, NO) == 0x000008, "Member 'FTresNauticalChartData::NO' has a wrong offset!");
static_assert(offsetof(FTresNauticalChartData, TextId) == 0x000010, "Member 'FTresNauticalChartData::TextId' has a wrong offset!");
static_assert(offsetof(FTresNauticalChartData, Point) == 0x000020, "Member 'FTresNauticalChartData::Point' has a wrong offset!");
static_assert(offsetof(FTresNauticalChartData, Range) == 0x000028, "Member 'FTresNauticalChartData::Range' has a wrong offset!");
static_assert(offsetof(FTresNauticalChartData, bGoal) == 0x000030, "Member 'FTresNauticalChartData::bGoal' has a wrong offset!");
static_assert(offsetof(FTresNauticalChartData, bSavePoint) == 0x000031, "Member 'FTresNauticalChartData::bSavePoint' has a wrong offset!");
static_assert(offsetof(FTresNauticalChartData, bVisitedMarker) == 0x000032, "Member 'FTresNauticalChartData::bVisitedMarker' has a wrong offset!");
static_assert(offsetof(FTresNauticalChartData, MapName) == 0x000038, "Member 'FTresNauticalChartData::MapName' has a wrong offset!");
static_assert(offsetof(FTresNauticalChartData, StartTag) == 0x000040, "Member 'FTresNauticalChartData::StartTag' has a wrong offset!");
static_assert(offsetof(FTresNauticalChartData, VisitedMarkerFlag) == 0x000048, "Member 'FTresNauticalChartData::VisitedMarkerFlag' has a wrong offset!");

// ScriptStruct TresGame.TresRaFestivalReplaceMeshData
// 0x0010 (0x0010 - 0x0000)
struct FTresRaFestivalReplaceMeshData final
{
public:
	class USkeletalMesh*                          M_MeshData;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     M_MatData;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRaFestivalReplaceMeshData) == 0x000008, "Wrong alignment on FTresRaFestivalReplaceMeshData");
static_assert(sizeof(FTresRaFestivalReplaceMeshData) == 0x000010, "Wrong size on FTresRaFestivalReplaceMeshData");
static_assert(offsetof(FTresRaFestivalReplaceMeshData, M_MeshData) == 0x000000, "Member 'FTresRaFestivalReplaceMeshData::M_MeshData' has a wrong offset!");
static_assert(offsetof(FTresRaFestivalReplaceMeshData, M_MatData) == 0x000008, "Member 'FTresRaFestivalReplaceMeshData::M_MatData' has a wrong offset!");

// ScriptStruct TresGame.TresRaFestivalReplaceMesh
// 0x0018 (0x0018 - 0x0000)
struct FTresRaFestivalReplaceMesh final
{
public:
	class FName                                   M_MeshName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresRaFestivalReplaceMeshData> M_MeshLists;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRaFestivalReplaceMesh) == 0x000008, "Wrong alignment on FTresRaFestivalReplaceMesh");
static_assert(sizeof(FTresRaFestivalReplaceMesh) == 0x000018, "Wrong size on FTresRaFestivalReplaceMesh");
static_assert(offsetof(FTresRaFestivalReplaceMesh, M_MeshName) == 0x000000, "Member 'FTresRaFestivalReplaceMesh::M_MeshName' has a wrong offset!");
static_assert(offsetof(FTresRaFestivalReplaceMesh, M_MeshLists) == 0x000008, "Member 'FTresRaFestivalReplaceMesh::M_MeshLists' has a wrong offset!");

// ScriptStruct TresGame.MashRotatorDataTable
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FMashRotatorDataTable final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _Rotater;                                          // 0x0008(0x112E9AF0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMashRotatorDataTable) == 0x112E9AF0, "Wrong alignment on FMashRotatorDataTable");
static_assert(sizeof(FMashRotatorDataTable) == 0x112E9AF0, "Wrong size on FMashRotatorDataTable");
static_assert(offsetof(FMashRotatorDataTable, _Name) == 0x000000, "Member 'FMashRotatorDataTable::_Name' has a wrong offset!");
static_assert(offsetof(FMashRotatorDataTable, _Rotater) == 0x000008, "Member 'FMashRotatorDataTable::_Rotater' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleComboEvalution
// 0x000C (0x000C - 0x0000)
struct FTresWinniePuzzleComboEvalution final
{
public:
	int32                                         ComboNum;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusScore;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWinniePuzzleComboEvalution                   Evalution;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleComboEvalution) == 0x000004, "Wrong alignment on FTresWinniePuzzleComboEvalution");
static_assert(sizeof(FTresWinniePuzzleComboEvalution) == 0x00000C, "Wrong size on FTresWinniePuzzleComboEvalution");
static_assert(offsetof(FTresWinniePuzzleComboEvalution, ComboNum) == 0x000000, "Member 'FTresWinniePuzzleComboEvalution::ComboNum' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleComboEvalution, BonusScore) == 0x000004, "Member 'FTresWinniePuzzleComboEvalution::BonusScore' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleComboEvalution, Evalution) == 0x000008, "Member 'FTresWinniePuzzleComboEvalution::Evalution' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleComboEvalutionParam
// 0x1142F440 (0x1142F440 - 0x0000)
struct alignas(0x1142F440) FTresWinniePuzzleComboEvalutionParam final
{
public:
	TArray<struct FTresWinniePuzzleComboEvalution> ComboEvalution;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         BreakthroughLimitBonusScorePerCombo;               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleComboEvalutionParam) == 0x1142F440, "Wrong alignment on FTresWinniePuzzleComboEvalutionParam");
static_assert(sizeof(FTresWinniePuzzleComboEvalutionParam) == 0x1142F440, "Wrong size on FTresWinniePuzzleComboEvalutionParam");
static_assert(offsetof(FTresWinniePuzzleComboEvalutionParam, ComboEvalution) == 0x000000, "Member 'FTresWinniePuzzleComboEvalutionParam::ComboEvalution' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleComboEvalutionParam, BreakthroughLimitBonusScorePerCombo) == 0x000010, "Member 'FTresWinniePuzzleComboEvalutionParam::BreakthroughLimitBonusScorePerCombo' has a wrong offset!");

// ScriptStruct TresGame.EnemyShipCoreData
// 0x0038 (0x0038 - 0x0000)
struct FEnemyShipCoreData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_CoreParticleComponent;                           // 0x0018(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               M_CoreThonParticleComponent;                       // 0x0020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresLockonTargetComponent*             M_CoreLockOnComponent;                             // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresBodyCollPrimitive*                 M_CoreBodyCollPrim;                                // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnemyShipCoreData) == 0x000008, "Wrong alignment on FEnemyShipCoreData");
static_assert(sizeof(FEnemyShipCoreData) == 0x000038, "Wrong size on FEnemyShipCoreData");
static_assert(offsetof(FEnemyShipCoreData, M_CoreParticleComponent) == 0x000018, "Member 'FEnemyShipCoreData::M_CoreParticleComponent' has a wrong offset!");
static_assert(offsetof(FEnemyShipCoreData, M_CoreThonParticleComponent) == 0x000020, "Member 'FEnemyShipCoreData::M_CoreThonParticleComponent' has a wrong offset!");
static_assert(offsetof(FEnemyShipCoreData, M_CoreLockOnComponent) == 0x000028, "Member 'FEnemyShipCoreData::M_CoreLockOnComponent' has a wrong offset!");
static_assert(offsetof(FEnemyShipCoreData, M_CoreBodyCollPrim) == 0x000030, "Member 'FEnemyShipCoreData::M_CoreBodyCollPrim' has a wrong offset!");

// ScriptStruct TresGame.EX355_AccelTractionInfo
// 0x114DEEC0 (0x114DEEC0 - 0x0000)
struct alignas(0x114DEEC0) FEX355_AccelTractionInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVerticalTractionOffset;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxVerticalTractionDistance;                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_AccelTractionInfo) == 0x114DEEC0, "Wrong alignment on FEX355_AccelTractionInfo");
static_assert(sizeof(FEX355_AccelTractionInfo) == 0x114DEEC0, "Wrong size on FEX355_AccelTractionInfo");
static_assert(offsetof(FEX355_AccelTractionInfo, INotifyID) == 0x000000, "Member 'FEX355_AccelTractionInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX355_AccelTractionInfo, Comment) == 0x000008, "Member 'FEX355_AccelTractionInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX355_AccelTractionInfo, FVerticalTractionOffset) == 0x000018, "Member 'FEX355_AccelTractionInfo::FVerticalTractionOffset' has a wrong offset!");
static_assert(offsetof(FEX355_AccelTractionInfo, FMaxVerticalTractionDistance) == 0x00001C, "Member 'FEX355_AccelTractionInfo::FMaxVerticalTractionDistance' has a wrong offset!");

// ScriptStruct TresGame.DeviationShotInfo_e_ex355
// 0x000C (0x000C - 0x0000)
struct FDeviationShotInfo_e_ex355 final
{
public:
	float                                         FDeviationRate;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxDeviationTargetVelocity;                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoVerticalDiviation;                              // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeviationShotInfo_e_ex355) == 0x000004, "Wrong alignment on FDeviationShotInfo_e_ex355");
static_assert(sizeof(FDeviationShotInfo_e_ex355) == 0x00000C, "Wrong size on FDeviationShotInfo_e_ex355");
static_assert(offsetof(FDeviationShotInfo_e_ex355, FDeviationRate) == 0x000000, "Member 'FDeviationShotInfo_e_ex355::FDeviationRate' has a wrong offset!");
static_assert(offsetof(FDeviationShotInfo_e_ex355, FMaxDeviationTargetVelocity) == 0x000004, "Member 'FDeviationShotInfo_e_ex355::FMaxDeviationTargetVelocity' has a wrong offset!");
static_assert(offsetof(FDeviationShotInfo_e_ex355, bNoVerticalDiviation) == 0x000008, "Member 'FDeviationShotInfo_e_ex355::bNoVerticalDiviation' has a wrong offset!");

// ScriptStruct TresGame.TresWearformTextureReplaceData
// 0x0030 (0x0030 - 0x0000)
struct FTresWearformTextureReplaceData final
{
public:
	int32                                         M_ReplaceIndex;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_ReplaceMaterialName;                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_ImageTexture;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_NormalTexture;                                   // 0x0018(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_MaskTexture;                                     // 0x0020(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_PointTexture;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWearformTextureReplaceData) == 0x000008, "Wrong alignment on FTresWearformTextureReplaceData");
static_assert(sizeof(FTresWearformTextureReplaceData) == 0x000030, "Wrong size on FTresWearformTextureReplaceData");
static_assert(offsetof(FTresWearformTextureReplaceData, M_ReplaceIndex) == 0x000000, "Member 'FTresWearformTextureReplaceData::M_ReplaceIndex' has a wrong offset!");
static_assert(offsetof(FTresWearformTextureReplaceData, M_ReplaceMaterialName) == 0x000008, "Member 'FTresWearformTextureReplaceData::M_ReplaceMaterialName' has a wrong offset!");
static_assert(offsetof(FTresWearformTextureReplaceData, M_ImageTexture) == 0x000010, "Member 'FTresWearformTextureReplaceData::M_ImageTexture' has a wrong offset!");
static_assert(offsetof(FTresWearformTextureReplaceData, M_NormalTexture) == 0x000018, "Member 'FTresWearformTextureReplaceData::M_NormalTexture' has a wrong offset!");
static_assert(offsetof(FTresWearformTextureReplaceData, M_MaskTexture) == 0x000020, "Member 'FTresWearformTextureReplaceData::M_MaskTexture' has a wrong offset!");
static_assert(offsetof(FTresWearformTextureReplaceData, M_PointTexture) == 0x000028, "Member 'FTresWearformTextureReplaceData::M_PointTexture' has a wrong offset!");

// ScriptStruct TresGame.TresWearformSetUnit
// 0x11591B60 (0x11591B60 - 0x0000)
struct alignas(0x11591B60) FTresWearformSetUnit final
{
public:
	class FName                                   M_FormName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bTextureReplace : 1;                             // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresWearformTextureReplaceData> M_TextureReplaceData;                              // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UTresAnimSet*>                   M_ReplaceAnimSets;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         M_bPlayFaceAnim : 1;                               // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_PlayFaceAnimName;                                // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWearformSetUnit) == 0x11591B60, "Wrong alignment on FTresWearformSetUnit");
static_assert(sizeof(FTresWearformSetUnit) == 0x11591B60, "Wrong size on FTresWearformSetUnit");
static_assert(offsetof(FTresWearformSetUnit, M_FormName) == 0x000000, "Member 'FTresWearformSetUnit::M_FormName' has a wrong offset!");
static_assert(offsetof(FTresWearformSetUnit, M_TextureReplaceData) == 0x000010, "Member 'FTresWearformSetUnit::M_TextureReplaceData' has a wrong offset!");
static_assert(offsetof(FTresWearformSetUnit, M_ReplaceAnimSets) == 0x000020, "Member 'FTresWearformSetUnit::M_ReplaceAnimSets' has a wrong offset!");
static_assert(offsetof(FTresWearformSetUnit, M_PlayFaceAnimName) == 0x000038, "Member 'FTresWearformSetUnit::M_PlayFaceAnimName' has a wrong offset!");

// ScriptStruct TresGame.SQEX_SplineMoverExecutor
// 0x11516D40 (0x11516D40 - 0x0000)
struct alignas(0x11516D40) FSQEX_SplineMoverExecutor final
{
public:
	uint8                                         M_IsReverse : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         M_IsLoop : 1;                                      // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          M_IsStraightSpline;                                // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQEX_SplineActor*                      M_pCurrentSplineActor;                             // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQEX_SplineActor*                      M_pSplineActorFirst;                               // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQEX_SplineActor*                      M_pSplineActorLast;                                // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineComponent*                       M_pUnrealSplineComponent;                          // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Speed;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x14];                                      // 0x0044(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_SplineMoverExecutor) == 0x11516D40, "Wrong alignment on FSQEX_SplineMoverExecutor");
static_assert(sizeof(FSQEX_SplineMoverExecutor) == 0x11516D40, "Wrong size on FSQEX_SplineMoverExecutor");
static_assert(offsetof(FSQEX_SplineMoverExecutor, M_IsStraightSpline) == 0x000004, "Member 'FSQEX_SplineMoverExecutor::M_IsStraightSpline' has a wrong offset!");
static_assert(offsetof(FSQEX_SplineMoverExecutor, M_pCurrentSplineActor) == 0x000010, "Member 'FSQEX_SplineMoverExecutor::M_pCurrentSplineActor' has a wrong offset!");
static_assert(offsetof(FSQEX_SplineMoverExecutor, M_pSplineActorFirst) == 0x000018, "Member 'FSQEX_SplineMoverExecutor::M_pSplineActorFirst' has a wrong offset!");
static_assert(offsetof(FSQEX_SplineMoverExecutor, M_pSplineActorLast) == 0x000020, "Member 'FSQEX_SplineMoverExecutor::M_pSplineActorLast' has a wrong offset!");
static_assert(offsetof(FSQEX_SplineMoverExecutor, M_pUnrealSplineComponent) == 0x000028, "Member 'FSQEX_SplineMoverExecutor::M_pUnrealSplineComponent' has a wrong offset!");
static_assert(offsetof(FSQEX_SplineMoverExecutor, M_Speed) == 0x000040, "Member 'FSQEX_SplineMoverExecutor::M_Speed' has a wrong offset!");

// ScriptStruct TresGame.TresGimmickMI_04_EventDoor
// 0x11516D40 (0x11516D40 - 0x0000)
struct FTresGimmickMI_04_EventDoor final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_SplineMoverExecutor              SplineMover;                                       // 0x0008(0x11516D40)(Transient, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGimmickMI_04_EventDoor) == 0x11516D40, "Wrong alignment on FTresGimmickMI_04_EventDoor");
static_assert(sizeof(FTresGimmickMI_04_EventDoor) == 0x11516D40, "Wrong size on FTresGimmickMI_04_EventDoor");
static_assert(offsetof(FTresGimmickMI_04_EventDoor, SplineMover) == 0x000008, "Member 'FTresGimmickMI_04_EventDoor::SplineMover' has a wrong offset!");

// ScriptStruct TresGame.TresUICampCharacterParam
// 0x00A0 (0x00A0 - 0x0000)
struct FTresUICampCharacterParam final
{
public:
	uint8                                         Pad_0[0x88];                                       // 0x0000(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresUIActor*                           UIActor;                                           // 0x0088(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresUIDataAssetStatus*                 UIStatusData;                                      // 0x0090(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUICampCharacterParam) == 0x000008, "Wrong alignment on FTresUICampCharacterParam");
static_assert(sizeof(FTresUICampCharacterParam) == 0x0000A0, "Wrong size on FTresUICampCharacterParam");
static_assert(offsetof(FTresUICampCharacterParam, UIActor) == 0x000088, "Member 'FTresUICampCharacterParam::UIActor' has a wrong offset!");
static_assert(offsetof(FTresUICampCharacterParam, UIStatusData) == 0x000090, "Member 'FTresUICampCharacterParam::UIStatusData' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcPrizeInfo
// 0x0010 (0x0010 - 0x0000)
struct FTresComNpcPrizeInfo final
{
public:
	int32                                         M_Num;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTresGimmickDropPrizeSet*               M_pPrizeDataAsset;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcPrizeInfo) == 0x000008, "Wrong alignment on FTresComNpcPrizeInfo");
static_assert(sizeof(FTresComNpcPrizeInfo) == 0x000010, "Wrong size on FTresComNpcPrizeInfo");
static_assert(offsetof(FTresComNpcPrizeInfo, M_Num) == 0x000000, "Member 'FTresComNpcPrizeInfo::M_Num' has a wrong offset!");
static_assert(offsetof(FTresComNpcPrizeInfo, M_pPrizeDataAsset) == 0x000008, "Member 'FTresComNpcPrizeInfo::M_pPrizeDataAsset' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx771_AttractBT04Param
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx771_AttractBT04Param final
{
public:
	class ATresActor_e_ex771_Attract*             M_pAttract;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_pTarget;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx771_AttractBT04Param) == 0x000008, "Wrong alignment on FTresEnemyEx771_AttractBT04Param");
static_assert(sizeof(FTresEnemyEx771_AttractBT04Param) == 0x000010, "Wrong size on FTresEnemyEx771_AttractBT04Param");
static_assert(offsetof(FTresEnemyEx771_AttractBT04Param, M_pAttract) == 0x000000, "Member 'FTresEnemyEx771_AttractBT04Param::M_pAttract' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx771_AttractBT04Param, M_pTarget) == 0x000008, "Member 'FTresEnemyEx771_AttractBT04Param::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.DancePlayerAction
// 0x113DB100 (0x113DB100 - 0x0000)
struct alignas(0x113DB100) FDancePlayerAction final
{
public:
	class FName                                   NormalMotion;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GreatMotion;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BadMotion;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDancePlayerAction) == 0x113DB100, "Wrong alignment on FDancePlayerAction");
static_assert(sizeof(FDancePlayerAction) == 0x113DB100, "Wrong size on FDancePlayerAction");
static_assert(offsetof(FDancePlayerAction, NormalMotion) == 0x000000, "Member 'FDancePlayerAction::NormalMotion' has a wrong offset!");
static_assert(offsetof(FDancePlayerAction, GreatMotion) == 0x000008, "Member 'FDancePlayerAction::GreatMotion' has a wrong offset!");
static_assert(offsetof(FDancePlayerAction, BadMotion) == 0x000010, "Member 'FDancePlayerAction::BadMotion' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActMotion
// 0x0010 (0x0010 - 0x0000)
struct FTresComNpcActMotion final
{
public:
	class FName                                   M_AnimName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fBlendInTime;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bLoop : 1;                                       // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bEnableRootMotion : 1;                           // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bWaitMotion : 1;                                 // 0x000C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bWaitTurn : 1;                                   // 0x000C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bSetIdle : 1;                                    // 0x000C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcActMotion) == 0x000004, "Wrong alignment on FTresComNpcActMotion");
static_assert(sizeof(FTresComNpcActMotion) == 0x000010, "Wrong size on FTresComNpcActMotion");
static_assert(offsetof(FTresComNpcActMotion, M_AnimName) == 0x000000, "Member 'FTresComNpcActMotion::M_AnimName' has a wrong offset!");
static_assert(offsetof(FTresComNpcActMotion, M_fBlendInTime) == 0x000008, "Member 'FTresComNpcActMotion::M_fBlendInTime' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActGreet
// 0x114D7CC0 (0x114D7CC0 - 0x0000)
struct alignas(0x114D7CC0) FTresComNpcActGreet final
{
public:
	class FName                                   M_AnimName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_ActionName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_Rate;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcActGreet) == 0x114D7CC0, "Wrong alignment on FTresComNpcActGreet");
static_assert(sizeof(FTresComNpcActGreet) == 0x114D7CC0, "Wrong size on FTresComNpcActGreet");
static_assert(offsetof(FTresComNpcActGreet, M_AnimName) == 0x000000, "Member 'FTresComNpcActGreet::M_AnimName' has a wrong offset!");
static_assert(offsetof(FTresComNpcActGreet, M_ActionName) == 0x000008, "Member 'FTresComNpcActGreet::M_ActionName' has a wrong offset!");
static_assert(offsetof(FTresComNpcActGreet, M_Rate) == 0x000010, "Member 'FTresComNpcActGreet::M_Rate' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActTarget
// 0x114D9460 (0x114D9460 - 0x0000)
struct alignas(0x114D9460) FTresComNpcActTarget final
{
public:
	class FName                                   M_TargetName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMinLength;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxLength;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLimitDir;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_RequiredNum;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPriorty;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcActTarget) == 0x114D9460, "Wrong alignment on FTresComNpcActTarget");
static_assert(sizeof(FTresComNpcActTarget) == 0x114D9460, "Wrong size on FTresComNpcActTarget");
static_assert(offsetof(FTresComNpcActTarget, M_TargetName) == 0x000000, "Member 'FTresComNpcActTarget::M_TargetName' has a wrong offset!");
static_assert(offsetof(FTresComNpcActTarget, M_fMinLength) == 0x000008, "Member 'FTresComNpcActTarget::M_fMinLength' has a wrong offset!");
static_assert(offsetof(FTresComNpcActTarget, M_fMaxLength) == 0x00000C, "Member 'FTresComNpcActTarget::M_fMaxLength' has a wrong offset!");
static_assert(offsetof(FTresComNpcActTarget, M_fLimitDir) == 0x000010, "Member 'FTresComNpcActTarget::M_fLimitDir' has a wrong offset!");
static_assert(offsetof(FTresComNpcActTarget, M_RequiredNum) == 0x000014, "Member 'FTresComNpcActTarget::M_RequiredNum' has a wrong offset!");
static_assert(offsetof(FTresComNpcActTarget, M_fPriorty) == 0x000018, "Member 'FTresComNpcActTarget::M_fPriorty' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActRandomValue
// 0x114D8AB0 (0x114D8AB0 - 0x0000)
struct alignas(0x114D8AB0) FTresComNpcActRandomValue final
{
public:
	float                                         M_fBase;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_Random;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fScale;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcActRandomValue) == 0x114D8AB0, "Wrong alignment on FTresComNpcActRandomValue");
static_assert(sizeof(FTresComNpcActRandomValue) == 0x114D8AB0, "Wrong size on FTresComNpcActRandomValue");
static_assert(offsetof(FTresComNpcActRandomValue, M_fBase) == 0x000000, "Member 'FTresComNpcActRandomValue::M_fBase' has a wrong offset!");
static_assert(offsetof(FTresComNpcActRandomValue, M_Random) == 0x000004, "Member 'FTresComNpcActRandomValue::M_Random' has a wrong offset!");
static_assert(offsetof(FTresComNpcActRandomValue, M_fScale) == 0x000008, "Member 'FTresComNpcActRandomValue::M_fScale' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActMoveNormal
// 0x114D8E50 (0x114D8E50 - 0x0000)
struct alignas(0x114D8E50) FTresComNpcActMoveNormal final
{
public:
	class FName                                   M_TargetName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLimitTimer;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nWalkMode;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bNextMove : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bDisableAvoid : 1;                               // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bLoopMode : 1;                                   // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fPriorty;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcActMoveNormal) == 0x114D8E50, "Wrong alignment on FTresComNpcActMoveNormal");
static_assert(sizeof(FTresComNpcActMoveNormal) == 0x114D8E50, "Wrong size on FTresComNpcActMoveNormal");
static_assert(offsetof(FTresComNpcActMoveNormal, M_TargetName) == 0x000000, "Member 'FTresComNpcActMoveNormal::M_TargetName' has a wrong offset!");
static_assert(offsetof(FTresComNpcActMoveNormal, M_fLimitTimer) == 0x000008, "Member 'FTresComNpcActMoveNormal::M_fLimitTimer' has a wrong offset!");
static_assert(offsetof(FTresComNpcActMoveNormal, M_nWalkMode) == 0x00000C, "Member 'FTresComNpcActMoveNormal::M_nWalkMode' has a wrong offset!");
static_assert(offsetof(FTresComNpcActMoveNormal, M_fPriorty) == 0x000014, "Member 'FTresComNpcActMoveNormal::M_fPriorty' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActLookTarget
// 0x114D8370 (0x114D8370 - 0x0000)
struct alignas(0x114D8370) FTresComNpcActLookTarget final
{
public:
	class FName                                   M_TargetName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPriorty;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLookAtBlendTime;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMinDegree;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcActLookTarget) == 0x114D8370, "Wrong alignment on FTresComNpcActLookTarget");
static_assert(sizeof(FTresComNpcActLookTarget) == 0x114D8370, "Wrong size on FTresComNpcActLookTarget");
static_assert(offsetof(FTresComNpcActLookTarget, M_TargetName) == 0x000000, "Member 'FTresComNpcActLookTarget::M_TargetName' has a wrong offset!");
static_assert(offsetof(FTresComNpcActLookTarget, M_fPriorty) == 0x000008, "Member 'FTresComNpcActLookTarget::M_fPriorty' has a wrong offset!");
static_assert(offsetof(FTresComNpcActLookTarget, M_fLookAtBlendTime) == 0x00000C, "Member 'FTresComNpcActLookTarget::M_fLookAtBlendTime' has a wrong offset!");
static_assert(offsetof(FTresComNpcActLookTarget, M_fMinDegree) == 0x000010, "Member 'FTresComNpcActLookTarget::M_fMinDegree' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcFaceMotion
// 0x114D8060 (0x114D8060 - 0x0000)
struct alignas(0x114D8060) FTresComNpcFaceMotion final
{
public:
	class FName                                   M_EyeAnimName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEyeBlendInTime;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcFaceMotion) == 0x114D8060, "Wrong alignment on FTresComNpcFaceMotion");
static_assert(sizeof(FTresComNpcFaceMotion) == 0x114D8060, "Wrong size on FTresComNpcFaceMotion");
static_assert(offsetof(FTresComNpcFaceMotion, M_EyeAnimName) == 0x000000, "Member 'FTresComNpcFaceMotion::M_EyeAnimName' has a wrong offset!");
static_assert(offsetof(FTresComNpcFaceMotion, M_fEyeBlendInTime) == 0x000008, "Member 'FTresComNpcFaceMotion::M_fEyeBlendInTime' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActionSeqDatas
// 0x00A0 (0x00A0 - 0x0000)
struct FTresComNpcActionSeqDatas final
{
public:
	class FName                                   M_SeqName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_LinkActorMax;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_LookAtMax;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32>                                M_Commands;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresComNpcActMotion>           M_Motions;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresComNpcActTarget>           M_Targets;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresComNpcActMoveNormal>       M_MoveNormals;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresComNpcActRandomValue>      M_RandomValues;                                    // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresComNpcActSelectBranch>     M_Branchs;                                         // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresComNpcActLookTarget>       M_LookTargets;                                     // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresComNpcFaceMotion>          M_FaceMotions;                                     // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresComNpcActGreet>            M_GreetActions;                                    // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcActionSeqDatas) == 0x000008, "Wrong alignment on FTresComNpcActionSeqDatas");
static_assert(sizeof(FTresComNpcActionSeqDatas) == 0x0000A0, "Wrong size on FTresComNpcActionSeqDatas");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_SeqName) == 0x000000, "Member 'FTresComNpcActionSeqDatas::M_SeqName' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_LinkActorMax) == 0x000008, "Member 'FTresComNpcActionSeqDatas::M_LinkActorMax' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_LookAtMax) == 0x00000C, "Member 'FTresComNpcActionSeqDatas::M_LookAtMax' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_Commands) == 0x000010, "Member 'FTresComNpcActionSeqDatas::M_Commands' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_Motions) == 0x000020, "Member 'FTresComNpcActionSeqDatas::M_Motions' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_Targets) == 0x000030, "Member 'FTresComNpcActionSeqDatas::M_Targets' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_MoveNormals) == 0x000040, "Member 'FTresComNpcActionSeqDatas::M_MoveNormals' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_RandomValues) == 0x000050, "Member 'FTresComNpcActionSeqDatas::M_RandomValues' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_Branchs) == 0x000060, "Member 'FTresComNpcActionSeqDatas::M_Branchs' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_LookTargets) == 0x000070, "Member 'FTresComNpcActionSeqDatas::M_LookTargets' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_FaceMotions) == 0x000080, "Member 'FTresComNpcActionSeqDatas::M_FaceMotions' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSeqDatas, M_GreetActions) == 0x000090, "Member 'FTresComNpcActionSeqDatas::M_GreetActions' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipCollisionSizeParam
// 0x113F4330 (0x113F4330 - 0x0000)
struct alignas(0x113F4330) FTresGumiShipCollisionSizeParam final
{
public:
	struct FVector                                M_vSize;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vMaxOfIncreaseSize;                              // 0x000C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fIncreaseTime;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipCollisionSizeParam) == 0x113F4330, "Wrong alignment on FTresGumiShipCollisionSizeParam");
static_assert(sizeof(FTresGumiShipCollisionSizeParam) == 0x113F4330, "Wrong size on FTresGumiShipCollisionSizeParam");
static_assert(offsetof(FTresGumiShipCollisionSizeParam, M_vSize) == 0x000000, "Member 'FTresGumiShipCollisionSizeParam::M_vSize' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCollisionSizeParam, M_vMaxOfIncreaseSize) == 0x00000C, "Member 'FTresGumiShipCollisionSizeParam::M_vMaxOfIncreaseSize' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCollisionSizeParam, M_fIncreaseTime) == 0x000018, "Member 'FTresGumiShipCollisionSizeParam::M_fIncreaseTime' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipCollisionParam
// 0x113F4330 (0x113F4330 - 0x0000)
struct FTresGumiShipCollisionParam final
{
public:
	class FName                                   M_GroupName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipCollisionShape                   M_eShapeType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_vScale;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresGumiShipCollisionSizeParam        M_SizeParam;                                       // 0x0018(0x113F4330)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresGumiShipCollisionAttachParam      M_AttachParam;                                     // 0x0038(0x112E9AF0)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipCollisionParam) == 0x113F4330, "Wrong alignment on FTresGumiShipCollisionParam");
static_assert(sizeof(FTresGumiShipCollisionParam) == 0x113F4330, "Wrong size on FTresGumiShipCollisionParam");
static_assert(offsetof(FTresGumiShipCollisionParam, M_GroupName) == 0x000000, "Member 'FTresGumiShipCollisionParam::M_GroupName' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCollisionParam, M_eShapeType) == 0x000008, "Member 'FTresGumiShipCollisionParam::M_eShapeType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCollisionParam, M_vScale) == 0x00000C, "Member 'FTresGumiShipCollisionParam::M_vScale' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCollisionParam, M_SizeParam) == 0x000018, "Member 'FTresGumiShipCollisionParam::M_SizeParam' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCollisionParam, M_AttachParam) == 0x000038, "Member 'FTresGumiShipCollisionParam::M_AttachParam' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx353RootMotionScaleParam
// 0x114AA910 (0x114AA910 - 0x0000)
struct alignas(0x114AA910) FTresEnemyEx353RootMotionScaleParam final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx353RootMotionScaleParam) == 0x114AA910, "Wrong alignment on FTresEnemyEx353RootMotionScaleParam");
static_assert(sizeof(FTresEnemyEx353RootMotionScaleParam) == 0x114AA910, "Wrong size on FTresEnemyEx353RootMotionScaleParam");
static_assert(offsetof(FTresEnemyEx353RootMotionScaleParam, Distance) == 0x000000, "Member 'FTresEnemyEx353RootMotionScaleParam::Distance' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353RootMotionScaleParam, RootMotionScale) == 0x000004, "Member 'FTresEnemyEx353RootMotionScaleParam::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx353RootMotionScaleInfo
// 0x114AA910 (0x114AA910 - 0x0000)
struct FTresEnemyEx353RootMotionScaleInfo final
{
public:
	ETresEnemyEx353RootMotionCorrectionKind       RootMotionCorrectionKind;                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RootMotionScaleCurveData;                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresEnemyEx353RootMotionScaleParam    MinRootMotionScaleParam;                           // 0x0010(0x114AA910)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresEnemyEx353RootMotionScaleParam    MaxRootMotionScaleParam;                           // 0x0018(0x114AA910)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ChangeCorrectionKindDistance;                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRootMotionScale;                                // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimTargetBackDistance;                             // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx353RootMotionScaleInfo) == 0x114AA910, "Wrong alignment on FTresEnemyEx353RootMotionScaleInfo");
static_assert(sizeof(FTresEnemyEx353RootMotionScaleInfo) == 0x114AA910, "Wrong size on FTresEnemyEx353RootMotionScaleInfo");
static_assert(offsetof(FTresEnemyEx353RootMotionScaleInfo, RootMotionCorrectionKind) == 0x000000, "Member 'FTresEnemyEx353RootMotionScaleInfo::RootMotionCorrectionKind' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353RootMotionScaleInfo, RootMotionScaleCurveData) == 0x000008, "Member 'FTresEnemyEx353RootMotionScaleInfo::RootMotionScaleCurveData' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353RootMotionScaleInfo, MinRootMotionScaleParam) == 0x000010, "Member 'FTresEnemyEx353RootMotionScaleInfo::MinRootMotionScaleParam' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353RootMotionScaleInfo, MaxRootMotionScaleParam) == 0x000018, "Member 'FTresEnemyEx353RootMotionScaleInfo::MaxRootMotionScaleParam' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353RootMotionScaleInfo, ChangeCorrectionKindDistance) == 0x000020, "Member 'FTresEnemyEx353RootMotionScaleInfo::ChangeCorrectionKindDistance' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353RootMotionScaleInfo, MaxRootMotionScale) == 0x000024, "Member 'FTresEnemyEx353RootMotionScaleInfo::MaxRootMotionScale' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353RootMotionScaleInfo, AimTargetBackDistance) == 0x000028, "Member 'FTresEnemyEx353RootMotionScaleInfo::AimTargetBackDistance' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex027_ThundagaParam
// 0x0018 (0x0018 - 0x0000)
struct FTresEnemy_e_ex027_ThundagaParam final
{
public:
	class UParticleSystemComponent*               M_ThundagaEff;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex027_ThundagaParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex027_ThundagaParam");
static_assert(sizeof(FTresEnemy_e_ex027_ThundagaParam) == 0x000018, "Wrong size on FTresEnemy_e_ex027_ThundagaParam");
static_assert(offsetof(FTresEnemy_e_ex027_ThundagaParam, M_ThundagaEff) == 0x000000, "Member 'FTresEnemy_e_ex027_ThundagaParam::M_ThundagaEff' has a wrong offset!");

// ScriptStruct TresGame.TornadoCutWindParam_e_ex357
// 0x114B8150 (0x114B8150 - 0x0000)
struct alignas(0x114B8150) FTornadoCutWindParam_e_ex357 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindForce;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTornadoCutWindParam_e_ex357) == 0x114B8150, "Wrong alignment on FTornadoCutWindParam_e_ex357");
static_assert(sizeof(FTornadoCutWindParam_e_ex357) == 0x114B8150, "Wrong size on FTornadoCutWindParam_e_ex357");
static_assert(offsetof(FTornadoCutWindParam_e_ex357, Distance) == 0x000000, "Member 'FTornadoCutWindParam_e_ex357::Distance' has a wrong offset!");
static_assert(offsetof(FTornadoCutWindParam_e_ex357, WindForce) == 0x000004, "Member 'FTornadoCutWindParam_e_ex357::WindForce' has a wrong offset!");

// ScriptStruct TresGame.AttackIntervalParam_e_ex082
// 0x112F06E0 (0x112F06E0 - 0x0000)
struct FAttackIntervalParam_e_ex082 final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDisableAttack : 1;                                // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         IntervalTimeRange;                                 // 0x0008(0x112F06E0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackIntervalParam_e_ex082) == 0x112F06E0, "Wrong alignment on FAttackIntervalParam_e_ex082");
static_assert(sizeof(FAttackIntervalParam_e_ex082) == 0x112F06E0, "Wrong size on FAttackIntervalParam_e_ex082");
static_assert(offsetof(FAttackIntervalParam_e_ex082, ElapsedTime) == 0x000000, "Member 'FAttackIntervalParam_e_ex082::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FAttackIntervalParam_e_ex082, IntervalTimeRange) == 0x000008, "Member 'FAttackIntervalParam_e_ex082::IntervalTimeRange' has a wrong offset!");

// ScriptStruct TresGame.TresCockpitFriendInfo
// 0x4F9F (0x4F9F - 0x0000)
struct alignas(0x4F9F) FTresCockpitFriendInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCockpitFriendInfo) == 0x004F9F, "Wrong alignment on FTresCockpitFriendInfo");
static_assert(sizeof(FTresCockpitFriendInfo) == 0x004F9F, "Wrong size on FTresCockpitFriendInfo");

// ScriptStruct TresGame.TresBlackboardBoolValueModifierInOutParam
// 0x0088 (0x0088 - 0x0000)
struct FTresBlackboardBoolValueModifierInOutParam final
{
public:
	uint8                                         bEnableCheck : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 CheckBlackboardKey;                                // 0x0008(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 BlackboardKeyValueA;                               // 0x0030(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseBlackboardKey : 1;                             // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bValue : 1;                                        // 0x0058(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 BlackboardKeyValueB;                               // 0x0060(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBlackboardBoolValueModifierInOutParam) == 0x000001, "Wrong alignment on FTresBlackboardBoolValueModifierInOutParam");
static_assert(sizeof(FTresBlackboardBoolValueModifierInOutParam) == 0x000088, "Wrong size on FTresBlackboardBoolValueModifierInOutParam");
static_assert(offsetof(FTresBlackboardBoolValueModifierInOutParam, CheckBlackboardKey) == 0x000008, "Member 'FTresBlackboardBoolValueModifierInOutParam::CheckBlackboardKey' has a wrong offset!");
static_assert(offsetof(FTresBlackboardBoolValueModifierInOutParam, BlackboardKeyValueA) == 0x000030, "Member 'FTresBlackboardBoolValueModifierInOutParam::BlackboardKeyValueA' has a wrong offset!");
static_assert(offsetof(FTresBlackboardBoolValueModifierInOutParam, BlackboardKeyValueB) == 0x000060, "Member 'FTresBlackboardBoolValueModifierInOutParam::BlackboardKeyValueB' has a wrong offset!");

// ScriptStruct TresGame.TresCockpitActionCmdInfo
// 0x0058 (0x0058 - 0x0000)
struct FTresCockpitActionCmdInfo final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UTresUICommandInfoBase*                 M_pUICommandInfo;                                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCockpitActionCmdInfo) == 0x000008, "Wrong alignment on FTresCockpitActionCmdInfo");
static_assert(sizeof(FTresCockpitActionCmdInfo) == 0x000058, "Wrong size on FTresCockpitActionCmdInfo");
static_assert(offsetof(FTresCockpitActionCmdInfo, M_pUICommandInfo) == 0x000050, "Member 'FTresCockpitActionCmdInfo::M_pUICommandInfo' has a wrong offset!");

// ScriptStruct TresGame.CAMovableBarrelPrizeParam
// 0x11514000 (0x11514000 - 0x0000)
struct alignas(0x11514000) FCAMovableBarrelPrizeParam final
{
public:
	float                                         M_InitSpeed;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_InitSpeedRand;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_PitchRange;                                      // 0x0008(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AirResistance;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PrizeLivingTime;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAMovableBarrelPrizeParam) == 0x11514000, "Wrong alignment on FCAMovableBarrelPrizeParam");
static_assert(sizeof(FCAMovableBarrelPrizeParam) == 0x11514000, "Wrong size on FCAMovableBarrelPrizeParam");
static_assert(offsetof(FCAMovableBarrelPrizeParam, M_InitSpeed) == 0x000000, "Member 'FCAMovableBarrelPrizeParam::M_InitSpeed' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelPrizeParam, M_InitSpeedRand) == 0x000004, "Member 'FCAMovableBarrelPrizeParam::M_InitSpeedRand' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelPrizeParam, M_PitchRange) == 0x000008, "Member 'FCAMovableBarrelPrizeParam::M_PitchRange' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelPrizeParam, M_AirResistance) == 0x000010, "Member 'FCAMovableBarrelPrizeParam::M_AirResistance' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelPrizeParam, M_PrizeLivingTime) == 0x000014, "Member 'FCAMovableBarrelPrizeParam::M_PrizeLivingTime' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipDefCollisionParam
// 0x0038 (0x0038 - 0x0000)
struct FTresGumiShipDefCollisionParam final
{
public:
	float                                         M_fHitPoint;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDefenseDegree;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_pBarrierEffect;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vEffectScale;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x1C];                                      // 0x001C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipDefCollisionParam) == 0x000008, "Wrong alignment on FTresGumiShipDefCollisionParam");
static_assert(sizeof(FTresGumiShipDefCollisionParam) == 0x000038, "Wrong size on FTresGumiShipDefCollisionParam");
static_assert(offsetof(FTresGumiShipDefCollisionParam, M_fHitPoint) == 0x000000, "Member 'FTresGumiShipDefCollisionParam::M_fHitPoint' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDefCollisionParam, M_fDefenseDegree) == 0x000004, "Member 'FTresGumiShipDefCollisionParam::M_fDefenseDegree' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDefCollisionParam, M_pBarrierEffect) == 0x000008, "Member 'FTresGumiShipDefCollisionParam::M_pBarrierEffect' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDefCollisionParam, M_vEffectScale) == 0x000010, "Member 'FTresGumiShipDefCollisionParam::M_vEffectScale' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNotifyState_PlayVoice_PlayedInfo
// 0x1130A (0x1130A - 0x0000)
struct alignas(0x1130A) FTresAnimNotifyState_PlayVoice_PlayedInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAnimNotifyState_PlayVoice_PlayedInfo) == 0x01130A, "Wrong alignment on FTresAnimNotifyState_PlayVoice_PlayedInfo");
static_assert(sizeof(FTresAnimNotifyState_PlayVoice_PlayedInfo) == 0x01130A, "Wrong size on FTresAnimNotifyState_PlayVoice_PlayedInfo");

// ScriptStruct TresGame.TresGumiShipRailShootingRouteSplineDataGetter
// 0x0008 (0x0008 - 0x0000)
struct FTresGumiShipRailShootingRouteSplineDataGetter final
{
public:
	float                                         M_fSplineDistanceRate;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bReverseSpline : 1;                              // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipRailShootingRouteSplineDataGetter) == 0x000004, "Wrong alignment on FTresGumiShipRailShootingRouteSplineDataGetter");
static_assert(sizeof(FTresGumiShipRailShootingRouteSplineDataGetter) == 0x000008, "Wrong size on FTresGumiShipRailShootingRouteSplineDataGetter");
static_assert(offsetof(FTresGumiShipRailShootingRouteSplineDataGetter, M_fSplineDistanceRate) == 0x000000, "Member 'FTresGumiShipRailShootingRouteSplineDataGetter::M_fSplineDistanceRate' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipRailShootingBattleSetData
// 0x0020 (0x0020 - 0x0000)
struct FTresGumiShipRailShootingBattleSetData final
{
public:
	class ATriggerBase*                           M_pEnemySpawnTrigger;                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATresGumiShipEnemyGenerator*>    M_EnemyGeneratorList;                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTresGumiShipRailShootingRouteSplineDataGetter M_TriggerPointAttachData;                          // 0x0018(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipRailShootingBattleSetData) == 0x000008, "Wrong alignment on FTresGumiShipRailShootingBattleSetData");
static_assert(sizeof(FTresGumiShipRailShootingBattleSetData) == 0x000020, "Wrong size on FTresGumiShipRailShootingBattleSetData");
static_assert(offsetof(FTresGumiShipRailShootingBattleSetData, M_pEnemySpawnTrigger) == 0x000000, "Member 'FTresGumiShipRailShootingBattleSetData::M_pEnemySpawnTrigger' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRailShootingBattleSetData, M_EnemyGeneratorList) == 0x000008, "Member 'FTresGumiShipRailShootingBattleSetData::M_EnemyGeneratorList' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRailShootingBattleSetData, M_TriggerPointAttachData) == 0x000018, "Member 'FTresGumiShipRailShootingBattleSetData::M_TriggerPointAttachData' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBonusParameterDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipBonusParameterDataTable final : public FTableRowBase
{
public:
	ETresGumiShipBonusKind                        M_eBonusKind;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fBonusValue;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTimeLimit;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_dArgs1;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipBonusParameterDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipBonusParameterDataTable");
static_assert(sizeof(FTresGumiShipBonusParameterDataTable) == 0x11413080, "Wrong size on FTresGumiShipBonusParameterDataTable");
static_assert(offsetof(FTresGumiShipBonusParameterDataTable, M_eBonusKind) == 0x000008, "Member 'FTresGumiShipBonusParameterDataTable::M_eBonusKind' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBonusParameterDataTable, M_fBonusValue) == 0x00000C, "Member 'FTresGumiShipBonusParameterDataTable::M_fBonusValue' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBonusParameterDataTable, M_fTimeLimit) == 0x000010, "Member 'FTresGumiShipBonusParameterDataTable::M_fTimeLimit' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBonusParameterDataTable, M_dArgs1) == 0x000014, "Member 'FTresGumiShipBonusParameterDataTable::M_dArgs1' has a wrong offset!");

// ScriptStruct TresGame.TresGumiGameOverHintData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiGameOverHintData final : public FTableRowBase
{
public:
	class FString                                 HintNameLocSpaceKey;                               // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiGameOverHintData) == 0x11413080, "Wrong alignment on FTresGumiGameOverHintData");
static_assert(sizeof(FTresGumiGameOverHintData) == 0x11413080, "Wrong size on FTresGumiGameOverHintData");
static_assert(offsetof(FTresGumiGameOverHintData, HintNameLocSpaceKey) == 0x000008, "Member 'FTresGumiGameOverHintData::HintNameLocSpaceKey' has a wrong offset!");

// ScriptStruct TresGame.TresWeaponControlTrackKey
// 0x11544EF0 (0x11544EF0 - 0x0000)
struct alignas(0x11544EF0) FTresWeaponControlTrackKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_Visible;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_AppearEffect;                                    // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_AppearEffectPlayRate;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWeaponControlTrackKey) == 0x11544EF0, "Wrong alignment on FTresWeaponControlTrackKey");
static_assert(sizeof(FTresWeaponControlTrackKey) == 0x11544EF0, "Wrong size on FTresWeaponControlTrackKey");
static_assert(offsetof(FTresWeaponControlTrackKey, M_Time) == 0x000000, "Member 'FTresWeaponControlTrackKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresWeaponControlTrackKey, M_Visible) == 0x000004, "Member 'FTresWeaponControlTrackKey::M_Visible' has a wrong offset!");
static_assert(offsetof(FTresWeaponControlTrackKey, M_AppearEffect) == 0x000005, "Member 'FTresWeaponControlTrackKey::M_AppearEffect' has a wrong offset!");
static_assert(offsetof(FTresWeaponControlTrackKey, M_AppearEffectPlayRate) == 0x000008, "Member 'FTresWeaponControlTrackKey::M_AppearEffectPlayRate' has a wrong offset!");

// ScriptStruct TresGame.EX359_ThrowEffectInfo
// 0x0008 (0x0008 - 0x0000)
struct FEX359_ThrowEffectInfo final
{
public:
	float                                         M_fNotifyTime;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bSetToTimeOnHit;                                 // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_ThrowEffectInfo) == 0x000004, "Wrong alignment on FEX359_ThrowEffectInfo");
static_assert(sizeof(FEX359_ThrowEffectInfo) == 0x000008, "Wrong size on FEX359_ThrowEffectInfo");
static_assert(offsetof(FEX359_ThrowEffectInfo, M_fNotifyTime) == 0x000000, "Member 'FEX359_ThrowEffectInfo::M_fNotifyTime' has a wrong offset!");
static_assert(offsetof(FEX359_ThrowEffectInfo, M_bSetToTimeOnHit) == 0x000004, "Member 'FEX359_ThrowEffectInfo::M_bSetToTimeOnHit' has a wrong offset!");

// ScriptStruct TresGame.EX359_ThrowEffectInfoSet
// 0x0028 (0x0028 - 0x0000)
struct FEX359_ThrowEffectInfoSet final
{
public:
	TArray<struct FEX359_ThrowEffectInfo>         M_ThrowEffectInfoArray;                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_ParticleClass;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bAttach;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresProjectileBase*                    M_OwnerProj;                                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEX359_ThrowEffectInfoSet) == 0x000008, "Wrong alignment on FEX359_ThrowEffectInfoSet");
static_assert(sizeof(FEX359_ThrowEffectInfoSet) == 0x000028, "Wrong size on FEX359_ThrowEffectInfoSet");
static_assert(offsetof(FEX359_ThrowEffectInfoSet, M_ThrowEffectInfoArray) == 0x000000, "Member 'FEX359_ThrowEffectInfoSet::M_ThrowEffectInfoArray' has a wrong offset!");
static_assert(offsetof(FEX359_ThrowEffectInfoSet, M_ParticleClass) == 0x000010, "Member 'FEX359_ThrowEffectInfoSet::M_ParticleClass' has a wrong offset!");
static_assert(offsetof(FEX359_ThrowEffectInfoSet, M_bAttach) == 0x000018, "Member 'FEX359_ThrowEffectInfoSet::M_bAttach' has a wrong offset!");
static_assert(offsetof(FEX359_ThrowEffectInfoSet, M_OwnerProj) == 0x000020, "Member 'FEX359_ThrowEffectInfoSet::M_OwnerProj' has a wrong offset!");

// ScriptStruct TresGame.ex064Parameter
// 0x112F06E0 (0x112F06E0 - 0x0000)
struct FEx064Parameter final
{
public:
	float                                         M_AnimDamageWaitTime;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_WallPartsSpawnTimeRange;                         // 0x0004(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEx064Parameter) == 0x112F06E0, "Wrong alignment on FEx064Parameter");
static_assert(sizeof(FEx064Parameter) == 0x112F06E0, "Wrong size on FEx064Parameter");
static_assert(offsetof(FEx064Parameter, M_AnimDamageWaitTime) == 0x000000, "Member 'FEx064Parameter::M_AnimDamageWaitTime' has a wrong offset!");
static_assert(offsetof(FEx064Parameter, M_WallPartsSpawnTimeRange) == 0x000004, "Member 'FEx064Parameter::M_WallPartsSpawnTimeRange' has a wrong offset!");

// ScriptStruct TresGame.TresChrInitEquip
// 0x00B8 (0x00B8 - 0x0000)
struct FTresChrInitEquip final
{
public:
	TArray<ETresItemDefWeapon>                    M_Weapons;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         M_bWeaponFixed : 1;                                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_InitProtectorSlot;                               // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETresItemDefProtector>                 M_Protectors;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         M_InitAccessorySlot;                               // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETresItemDefAccessory>                 M_Accessorys;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         M_InitItemSlot;                                    // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETresItemDefBattleItem>                M_Items;                                           // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresAbilityKind>                      M_EquipAbility;                                    // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresAbilityKind>                      M_HaveAbility;                                     // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresAbilityKind>                      M_CriticalEquipAbility;                            // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresAbilityKind>                      M_CriticalHaveAbility;                             // 0x0088(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UDataTable*                             M_BaseParamData;                                   // 0x0098(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_CriticalUseAPUpNum;                              // 0x00A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             M_LevelData;                                       // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresFormAbilitySet*                    M_FormAbilityAsset;                                // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresChrInitEquip) == 0x000008, "Wrong alignment on FTresChrInitEquip");
static_assert(sizeof(FTresChrInitEquip) == 0x0000B8, "Wrong size on FTresChrInitEquip");
static_assert(offsetof(FTresChrInitEquip, M_Weapons) == 0x000000, "Member 'FTresChrInitEquip::M_Weapons' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_InitProtectorSlot) == 0x000011, "Member 'FTresChrInitEquip::M_InitProtectorSlot' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_Protectors) == 0x000018, "Member 'FTresChrInitEquip::M_Protectors' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_InitAccessorySlot) == 0x000028, "Member 'FTresChrInitEquip::M_InitAccessorySlot' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_Accessorys) == 0x000030, "Member 'FTresChrInitEquip::M_Accessorys' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_InitItemSlot) == 0x000040, "Member 'FTresChrInitEquip::M_InitItemSlot' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_Items) == 0x000048, "Member 'FTresChrInitEquip::M_Items' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_EquipAbility) == 0x000058, "Member 'FTresChrInitEquip::M_EquipAbility' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_HaveAbility) == 0x000068, "Member 'FTresChrInitEquip::M_HaveAbility' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_CriticalEquipAbility) == 0x000078, "Member 'FTresChrInitEquip::M_CriticalEquipAbility' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_CriticalHaveAbility) == 0x000088, "Member 'FTresChrInitEquip::M_CriticalHaveAbility' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_BaseParamData) == 0x000098, "Member 'FTresChrInitEquip::M_BaseParamData' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_CriticalUseAPUpNum) == 0x0000A0, "Member 'FTresChrInitEquip::M_CriticalUseAPUpNum' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_LevelData) == 0x0000A8, "Member 'FTresChrInitEquip::M_LevelData' has a wrong offset!");
static_assert(offsetof(FTresChrInitEquip, M_FormAbilityAsset) == 0x0000B0, "Member 'FTresChrInitEquip::M_FormAbilityAsset' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipMuzzleParam
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresGumiShipMuzzleParam final
{
public:
	struct FVector                                M_vOffset;                                         // 0x0000(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_Rotate;                                          // 0x000C(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipMuzzleParam) == 0x112E9AF0, "Wrong alignment on FTresGumiShipMuzzleParam");
static_assert(sizeof(FTresGumiShipMuzzleParam) == 0x112E9AF0, "Wrong size on FTresGumiShipMuzzleParam");
static_assert(offsetof(FTresGumiShipMuzzleParam, M_vOffset) == 0x000000, "Member 'FTresGumiShipMuzzleParam::M_vOffset' has a wrong offset!");
static_assert(offsetof(FTresGumiShipMuzzleParam, M_Rotate) == 0x00000C, "Member 'FTresGumiShipMuzzleParam::M_Rotate' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_UseCachedPose
// 0x0008 (0x0038 - 0x0030)
struct FTresAnimNode_UseCachedPose final : public FAnimNode_Base
{
public:
	uint8                                         M_bSetRefferedFlag : 1;                            // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bAlwaysRefferPrevPose : 1;                       // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAnimNode_UseCachedPose) == 0x000001, "Wrong alignment on FTresAnimNode_UseCachedPose");
static_assert(sizeof(FTresAnimNode_UseCachedPose) == 0x000038, "Wrong size on FTresAnimNode_UseCachedPose");

// ScriptStruct TresGame.TresWinniePuzzleScoreEvalutionInOneTurnParam
// 0x0008 (0x0008 - 0x0000)
struct FTresWinniePuzzleScoreEvalutionInOneTurnParam final
{
public:
	int32                                         ScoreInOneTurn;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWinniePuzzleComboEvalution                   ScoreEvalution;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleScoreEvalutionInOneTurnParam) == 0x000004, "Wrong alignment on FTresWinniePuzzleScoreEvalutionInOneTurnParam");
static_assert(sizeof(FTresWinniePuzzleScoreEvalutionInOneTurnParam) == 0x000008, "Wrong size on FTresWinniePuzzleScoreEvalutionInOneTurnParam");
static_assert(offsetof(FTresWinniePuzzleScoreEvalutionInOneTurnParam, ScoreInOneTurn) == 0x000000, "Member 'FTresWinniePuzzleScoreEvalutionInOneTurnParam::ScoreInOneTurn' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleScoreEvalutionInOneTurnParam, ScoreEvalution) == 0x000004, "Member 'FTresWinniePuzzleScoreEvalutionInOneTurnParam::ScoreEvalution' has a wrong offset!");

// ScriptStruct TresGame.WaveHitWork_e_ex359
// 0x0210 (0x0210 - 0x0000)
struct FWaveHitWork_e_ex359 final
{
public:
	class ATresCharPawnBase*                      POwner;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x208];                                      // 0x0008(0x0208)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaveHitWork_e_ex359) == 0x000008, "Wrong alignment on FWaveHitWork_e_ex359");
static_assert(sizeof(FWaveHitWork_e_ex359) == 0x000210, "Wrong size on FWaveHitWork_e_ex359");
static_assert(offsetof(FWaveHitWork_e_ex359, POwner) == 0x000000, "Member 'FWaveHitWork_e_ex359::POwner' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleAdditionalBonusParam
// 0x1142E8C0 (0x1142E8C0 - 0x0000)
struct alignas(0x1142E8C0) FTresWinniePuzzleAdditionalBonusParam final
{
public:
	int32                                         SingleInvocationScore;                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalInvocationScore;                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SingleInvocationAdditionalScore;                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalInvocationAdditionalScore;               // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleAdditionalBonusParam) == 0x1142E8C0, "Wrong alignment on FTresWinniePuzzleAdditionalBonusParam");
static_assert(sizeof(FTresWinniePuzzleAdditionalBonusParam) == 0x1142E8C0, "Wrong size on FTresWinniePuzzleAdditionalBonusParam");
static_assert(offsetof(FTresWinniePuzzleAdditionalBonusParam, SingleInvocationScore) == 0x000000, "Member 'FTresWinniePuzzleAdditionalBonusParam::SingleInvocationScore' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleAdditionalBonusParam, AdditionalInvocationScore) == 0x000004, "Member 'FTresWinniePuzzleAdditionalBonusParam::AdditionalInvocationScore' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleAdditionalBonusParam, SingleInvocationAdditionalScore) == 0x000008, "Member 'FTresWinniePuzzleAdditionalBonusParam::SingleInvocationAdditionalScore' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleAdditionalBonusParam, AdditionalInvocationAdditionalScore) == 0x00000C, "Member 'FTresWinniePuzzleAdditionalBonusParam::AdditionalInvocationAdditionalScore' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleUnitScore
// 0x1142F090 (0x1142F090 - 0x0000)
struct alignas(0x1142F090) FTresWinniePuzzleUnitScore final
{
public:
	int32                                         UnitNum;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleUnitScore) == 0x1142F090, "Wrong alignment on FTresWinniePuzzleUnitScore");
static_assert(sizeof(FTresWinniePuzzleUnitScore) == 0x1142F090, "Wrong size on FTresWinniePuzzleUnitScore");
static_assert(offsetof(FTresWinniePuzzleUnitScore, UnitNum) == 0x000000, "Member 'FTresWinniePuzzleUnitScore::UnitNum' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleUnitScore, Score) == 0x000004, "Member 'FTresWinniePuzzleUnitScore::Score' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleUnitScoreParam
// 0x1142EC50 (0x1142EC50 - 0x0000)
struct alignas(0x1142EC50) FTresWinniePuzzleUnitScoreParam final
{
public:
	TArray<struct FTresWinniePuzzleUnitScore>     UnitScores;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresWinniePuzzleUnitScore>     UnitScoresForCharacterBonus;                       // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EWinniePuzzleUnitScoreSizeJudgementMethod     UnitScoreSizeJudgementMethod;                      // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnitScoreSizeJudgementNum;                         // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleUnitScoreParam) == 0x1142EC50, "Wrong alignment on FTresWinniePuzzleUnitScoreParam");
static_assert(sizeof(FTresWinniePuzzleUnitScoreParam) == 0x1142EC50, "Wrong size on FTresWinniePuzzleUnitScoreParam");
static_assert(offsetof(FTresWinniePuzzleUnitScoreParam, UnitScores) == 0x000000, "Member 'FTresWinniePuzzleUnitScoreParam::UnitScores' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleUnitScoreParam, UnitScoresForCharacterBonus) == 0x000010, "Member 'FTresWinniePuzzleUnitScoreParam::UnitScoresForCharacterBonus' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleUnitScoreParam, UnitScoreSizeJudgementMethod) == 0x000020, "Member 'FTresWinniePuzzleUnitScoreParam::UnitScoreSizeJudgementMethod' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleUnitScoreParam, UnitScoreSizeJudgementNum) == 0x000024, "Member 'FTresWinniePuzzleUnitScoreParam::UnitScoreSizeJudgementNum' has a wrong offset!");

// ScriptStruct TresGame.TresUIGameFlagData
// 0x0018 (0x0018 - 0x0000)
struct FTresUIGameFlagData final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagLabelName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGameCleared;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReMindCleared;                                    // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIGameFlagData) == 0x000004, "Wrong alignment on FTresUIGameFlagData");
static_assert(sizeof(FTresUIGameFlagData) == 0x000018, "Wrong size on FTresUIGameFlagData");
static_assert(offsetof(FTresUIGameFlagData, FlagName) == 0x000000, "Member 'FTresUIGameFlagData::FlagName' has a wrong offset!");
static_assert(offsetof(FTresUIGameFlagData, FlagLabelName) == 0x000008, "Member 'FTresUIGameFlagData::FlagLabelName' has a wrong offset!");
static_assert(offsetof(FTresUIGameFlagData, bGameCleared) == 0x000010, "Member 'FTresUIGameFlagData::bGameCleared' has a wrong offset!");
static_assert(offsetof(FTresUIGameFlagData, bReMindCleared) == 0x000011, "Member 'FTresUIGameFlagData::bReMindCleared' has a wrong offset!");

// ScriptStruct TresGame.TresUISaveMenuFaceIconLotteryData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresUISaveMenuFaceIconLotteryData final : public FTableRowBase
{
public:
	ETresWorldCode                                WorldCode;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresUIGameFlagData                    GameFlag;                                          // 0x0010(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<ETresChrUniqueID>                      CharaIDs;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresUIFaceUniqueID>                   FaceIDs;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUISaveMenuFaceIconLotteryData) == 0x11413080, "Wrong alignment on FTresUISaveMenuFaceIconLotteryData");
static_assert(sizeof(FTresUISaveMenuFaceIconLotteryData) == 0x11413080, "Wrong size on FTresUISaveMenuFaceIconLotteryData");
static_assert(offsetof(FTresUISaveMenuFaceIconLotteryData, WorldCode) == 0x000008, "Member 'FTresUISaveMenuFaceIconLotteryData::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresUISaveMenuFaceIconLotteryData, GameFlag) == 0x000010, "Member 'FTresUISaveMenuFaceIconLotteryData::GameFlag' has a wrong offset!");
static_assert(offsetof(FTresUISaveMenuFaceIconLotteryData, CharaIDs) == 0x000028, "Member 'FTresUISaveMenuFaceIconLotteryData::CharaIDs' has a wrong offset!");
static_assert(offsetof(FTresUISaveMenuFaceIconLotteryData, FaceIDs) == 0x000038, "Member 'FTresUISaveMenuFaceIconLotteryData::FaceIDs' has a wrong offset!");
static_assert(offsetof(FTresUISaveMenuFaceIconLotteryData, Version) == 0x000048, "Member 'FTresUISaveMenuFaceIconLotteryData::Version' has a wrong offset!");

// ScriptStruct TresGame.Tres_LocomotionDefinition_SnowChaseParam
// 0x1148F140 (0x1148F140 - 0x0000)
struct alignas(0x1148F140) FTres_LocomotionDefinition_SnowChaseParam final
{
public:
	float                                         M_DashDistance;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_DashMaxSpeed;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_DashAcceleration;                                // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_SlowTargetDistance;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_SlowMaxSpeed;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_SuperSlowTargetDistance;                         // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_SuperSlowMaxSpeed;                               // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_SlowAcceleration;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_20[0x4];                                       // 0x0020(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTres_LocomotionDefinition_SnowChaseParam) == 0x1148F140, "Wrong alignment on FTres_LocomotionDefinition_SnowChaseParam");
static_assert(sizeof(FTres_LocomotionDefinition_SnowChaseParam) == 0x1148F140, "Wrong size on FTres_LocomotionDefinition_SnowChaseParam");
static_assert(offsetof(FTres_LocomotionDefinition_SnowChaseParam, M_DashDistance) == 0x000000, "Member 'FTres_LocomotionDefinition_SnowChaseParam::M_DashDistance' has a wrong offset!");
static_assert(offsetof(FTres_LocomotionDefinition_SnowChaseParam, M_DashMaxSpeed) == 0x000004, "Member 'FTres_LocomotionDefinition_SnowChaseParam::M_DashMaxSpeed' has a wrong offset!");
static_assert(offsetof(FTres_LocomotionDefinition_SnowChaseParam, M_DashAcceleration) == 0x000008, "Member 'FTres_LocomotionDefinition_SnowChaseParam::M_DashAcceleration' has a wrong offset!");
static_assert(offsetof(FTres_LocomotionDefinition_SnowChaseParam, M_SlowTargetDistance) == 0x00000C, "Member 'FTres_LocomotionDefinition_SnowChaseParam::M_SlowTargetDistance' has a wrong offset!");
static_assert(offsetof(FTres_LocomotionDefinition_SnowChaseParam, M_SlowMaxSpeed) == 0x000010, "Member 'FTres_LocomotionDefinition_SnowChaseParam::M_SlowMaxSpeed' has a wrong offset!");
static_assert(offsetof(FTres_LocomotionDefinition_SnowChaseParam, M_SuperSlowTargetDistance) == 0x000014, "Member 'FTres_LocomotionDefinition_SnowChaseParam::M_SuperSlowTargetDistance' has a wrong offset!");
static_assert(offsetof(FTres_LocomotionDefinition_SnowChaseParam, M_SuperSlowMaxSpeed) == 0x000018, "Member 'FTres_LocomotionDefinition_SnowChaseParam::M_SuperSlowMaxSpeed' has a wrong offset!");
static_assert(offsetof(FTres_LocomotionDefinition_SnowChaseParam, M_SlowAcceleration) == 0x00001C, "Member 'FTres_LocomotionDefinition_SnowChaseParam::M_SlowAcceleration' has a wrong offset!");

// ScriptStruct TresGame.BX901_DarkCubeMine_DarkWingInfo
// 0x1155F000 (0x1155F000 - 0x0000)
struct alignas(0x1155F000) FBX901_DarkCubeMine_DarkWingInfo final
{
public:
	float                                         M_fMaxMoveDistance;                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMinMoveDistance;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBX901_DarkCubeMine_DarkWingInfo) == 0x1155F000, "Wrong alignment on FBX901_DarkCubeMine_DarkWingInfo");
static_assert(sizeof(FBX901_DarkCubeMine_DarkWingInfo) == 0x1155F000, "Wrong size on FBX901_DarkCubeMine_DarkWingInfo");
static_assert(offsetof(FBX901_DarkCubeMine_DarkWingInfo, M_fMaxMoveDistance) == 0x000000, "Member 'FBX901_DarkCubeMine_DarkWingInfo::M_fMaxMoveDistance' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMine_DarkWingInfo, M_fMinMoveDistance) == 0x000004, "Member 'FBX901_DarkCubeMine_DarkWingInfo::M_fMinMoveDistance' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnActorData
// 0x0038 (0x0038 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x08) FTresSpawnActorData
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x112E9D50)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     GeneratedClass;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
#pragma pack(pop)
static_assert(alignof(FTresSpawnActorData) == 0x000008, "Wrong alignment on FTresSpawnActorData");
static_assert(sizeof(FTresSpawnActorData) == 0x000038, "Wrong size on FTresSpawnActorData");
static_assert(offsetof(FTresSpawnActorData, Transform) == 0x000000, "Member 'FTresSpawnActorData::Transform' has a wrong offset!");
static_assert(offsetof(FTresSpawnActorData, GeneratedClass) == 0x000030, "Member 'FTresSpawnActorData::GeneratedClass' has a wrong offset!");

// ScriptStruct TresGame.TresE_ex011ConnectEffectParam
// 0x114F4AC0 (0x114F4AC0 - 0x0000)
struct alignas(0x114F4AC0) FTresE_ex011ConnectEffectParam final
{
public:
	class UParticleSystem*                        ConnectParticleSystem;                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        AppearParticleSystem;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        GlowParticleSystem;                                // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnDistance;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetDistance;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_ex011ConnectEffectParam) == 0x114F4AC0, "Wrong alignment on FTresE_ex011ConnectEffectParam");
static_assert(sizeof(FTresE_ex011ConnectEffectParam) == 0x114F4AC0, "Wrong size on FTresE_ex011ConnectEffectParam");
static_assert(offsetof(FTresE_ex011ConnectEffectParam, ConnectParticleSystem) == 0x000000, "Member 'FTresE_ex011ConnectEffectParam::ConnectParticleSystem' has a wrong offset!");
static_assert(offsetof(FTresE_ex011ConnectEffectParam, AppearParticleSystem) == 0x000008, "Member 'FTresE_ex011ConnectEffectParam::AppearParticleSystem' has a wrong offset!");
static_assert(offsetof(FTresE_ex011ConnectEffectParam, GlowParticleSystem) == 0x000010, "Member 'FTresE_ex011ConnectEffectParam::GlowParticleSystem' has a wrong offset!");
static_assert(offsetof(FTresE_ex011ConnectEffectParam, RespawnDistance) == 0x000018, "Member 'FTresE_ex011ConnectEffectParam::RespawnDistance' has a wrong offset!");
static_assert(offsetof(FTresE_ex011ConnectEffectParam, FadeInTime) == 0x00001C, "Member 'FTresE_ex011ConnectEffectParam::FadeInTime' has a wrong offset!");
static_assert(offsetof(FTresE_ex011ConnectEffectParam, FadeOutTime) == 0x000020, "Member 'FTresE_ex011ConnectEffectParam::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FTresE_ex011ConnectEffectParam, OffsetDistance) == 0x000024, "Member 'FTresE_ex011ConnectEffectParam::OffsetDistance' has a wrong offset!");

// ScriptStruct TresGame.TresUIP_HudTarget_UltimaLock
// 0x0028 (0x0028 - 0x0000)
struct FTresUIP_HudTarget_UltimaLock final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UGFxObject*                             Root;                                              // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             UltimaLockSet;                                     // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             UltimaLockGauge;                                   // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIP_HudTarget_UltimaLock) == 0x000008, "Wrong alignment on FTresUIP_HudTarget_UltimaLock");
static_assert(sizeof(FTresUIP_HudTarget_UltimaLock) == 0x000028, "Wrong size on FTresUIP_HudTarget_UltimaLock");
static_assert(offsetof(FTresUIP_HudTarget_UltimaLock, Root) == 0x000010, "Member 'FTresUIP_HudTarget_UltimaLock::Root' has a wrong offset!");
static_assert(offsetof(FTresUIP_HudTarget_UltimaLock, UltimaLockSet) == 0x000018, "Member 'FTresUIP_HudTarget_UltimaLock::UltimaLockSet' has a wrong offset!");
static_assert(offsetof(FTresUIP_HudTarget_UltimaLock, UltimaLockGauge) == 0x000020, "Member 'FTresUIP_HudTarget_UltimaLock::UltimaLockGauge' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_FlareShotSphereEntryParam
// 0x49EC (0x49EC - 0x0000)
struct alignas(0x49EC) FTresEnemy_e_ex773_FlareShotSphereEntryParam final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_FlareShotSphereEntryParam) == 0x0049EC, "Wrong alignment on FTresEnemy_e_ex773_FlareShotSphereEntryParam");
static_assert(sizeof(FTresEnemy_e_ex773_FlareShotSphereEntryParam) == 0x0049EC, "Wrong size on FTresEnemy_e_ex773_FlareShotSphereEntryParam");

// ScriptStruct TresGame.TresComNpcLookInfo
// 0x0020 (0x0020 - 0x0000)
struct FTresComNpcLookInfo final
{
public:
	TArray<class FName>                           M_AnimTypes;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_LookAtAnims;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcLookInfo) == 0x000008, "Wrong alignment on FTresComNpcLookInfo");
static_assert(sizeof(FTresComNpcLookInfo) == 0x000020, "Wrong size on FTresComNpcLookInfo");
static_assert(offsetof(FTresComNpcLookInfo, M_AnimTypes) == 0x000000, "Member 'FTresComNpcLookInfo::M_AnimTypes' has a wrong offset!");
static_assert(offsetof(FTresComNpcLookInfo, M_LookAtAnims) == 0x000010, "Member 'FTresComNpcLookInfo::M_LookAtAnims' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActorInfo
// 0x114320A0 (0x114320A0 - 0x0000)
struct alignas(0x114320A0) FTresComNpcActorInfo final
{
public:
	class FName                                   M_ActorType;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_BodyType;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     M_ActorClass;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxActorNum;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x24];                                      // 0x001C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcActorInfo) == 0x114320A0, "Wrong alignment on FTresComNpcActorInfo");
static_assert(sizeof(FTresComNpcActorInfo) == 0x114320A0, "Wrong size on FTresComNpcActorInfo");
static_assert(offsetof(FTresComNpcActorInfo, M_ActorType) == 0x000000, "Member 'FTresComNpcActorInfo::M_ActorType' has a wrong offset!");
static_assert(offsetof(FTresComNpcActorInfo, M_BodyType) == 0x000008, "Member 'FTresComNpcActorInfo::M_BodyType' has a wrong offset!");
static_assert(offsetof(FTresComNpcActorInfo, M_ActorClass) == 0x000010, "Member 'FTresComNpcActorInfo::M_ActorClass' has a wrong offset!");
static_assert(offsetof(FTresComNpcActorInfo, M_MaxActorNum) == 0x000018, "Member 'FTresComNpcActorInfo::M_MaxActorNum' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuImageResource
// 0x114E7FA0 (0x114E7FA0 - 0x0000)
struct alignas(0x114E7FA0) FTresDebugMenuImageResource final
{
public:
	int32                                         M_TextureIndex;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_U;                                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_V;                                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_UL;                                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_VL;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_UseScaleGrid;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_ScaleGridLeft;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ScaleGridRight;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ScaleGridTop;                                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ScaleGridBottom;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ScaleGridWidth;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ScaleGridHeight;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuImageResource) == 0x114E7FA0, "Wrong alignment on FTresDebugMenuImageResource");
static_assert(sizeof(FTresDebugMenuImageResource) == 0x114E7FA0, "Wrong size on FTresDebugMenuImageResource");
static_assert(offsetof(FTresDebugMenuImageResource, M_TextureIndex) == 0x000000, "Member 'FTresDebugMenuImageResource::M_TextureIndex' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_U) == 0x000004, "Member 'FTresDebugMenuImageResource::M_U' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_V) == 0x000008, "Member 'FTresDebugMenuImageResource::M_V' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_UL) == 0x00000C, "Member 'FTresDebugMenuImageResource::M_UL' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_VL) == 0x000010, "Member 'FTresDebugMenuImageResource::M_VL' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_UseScaleGrid) == 0x000014, "Member 'FTresDebugMenuImageResource::M_UseScaleGrid' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_ScaleGridLeft) == 0x000018, "Member 'FTresDebugMenuImageResource::M_ScaleGridLeft' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_ScaleGridRight) == 0x00001C, "Member 'FTresDebugMenuImageResource::M_ScaleGridRight' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_ScaleGridTop) == 0x000020, "Member 'FTresDebugMenuImageResource::M_ScaleGridTop' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_ScaleGridBottom) == 0x000024, "Member 'FTresDebugMenuImageResource::M_ScaleGridBottom' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_ScaleGridWidth) == 0x000028, "Member 'FTresDebugMenuImageResource::M_ScaleGridWidth' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuImageResource, M_ScaleGridHeight) == 0x00002C, "Member 'FTresDebugMenuImageResource::M_ScaleGridHeight' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipEnemyAttackMethodDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipEnemyAttackMethodDataTable final : public FTableRowBase
{
public:
	class FName                                   M_AttackName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAttackMinRange;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAttackMaxRange;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAttackRangeAngle;                               // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAttackingTime;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCoolDownTime;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipEnemyStateID                     M_eAttackStateID;                                  // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_UsableEnemyID;                                   // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bUsableDefaultValue;                             // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipEnemyAttackMethodDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipEnemyAttackMethodDataTable");
static_assert(sizeof(FTresGumiShipEnemyAttackMethodDataTable) == 0x11413080, "Wrong size on FTresGumiShipEnemyAttackMethodDataTable");
static_assert(offsetof(FTresGumiShipEnemyAttackMethodDataTable, M_AttackName) == 0x000008, "Member 'FTresGumiShipEnemyAttackMethodDataTable::M_AttackName' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyAttackMethodDataTable, M_fAttackMinRange) == 0x000010, "Member 'FTresGumiShipEnemyAttackMethodDataTable::M_fAttackMinRange' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyAttackMethodDataTable, M_fAttackMaxRange) == 0x000014, "Member 'FTresGumiShipEnemyAttackMethodDataTable::M_fAttackMaxRange' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyAttackMethodDataTable, M_fAttackRangeAngle) == 0x000018, "Member 'FTresGumiShipEnemyAttackMethodDataTable::M_fAttackRangeAngle' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyAttackMethodDataTable, M_fAttackingTime) == 0x00001C, "Member 'FTresGumiShipEnemyAttackMethodDataTable::M_fAttackingTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyAttackMethodDataTable, M_fCoolDownTime) == 0x000020, "Member 'FTresGumiShipEnemyAttackMethodDataTable::M_fCoolDownTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyAttackMethodDataTable, M_eAttackStateID) == 0x000024, "Member 'FTresGumiShipEnemyAttackMethodDataTable::M_eAttackStateID' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyAttackMethodDataTable, M_UsableEnemyID) == 0x000028, "Member 'FTresGumiShipEnemyAttackMethodDataTable::M_UsableEnemyID' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyAttackMethodDataTable, M_bUsableDefaultValue) == 0x000030, "Member 'FTresGumiShipEnemyAttackMethodDataTable::M_bUsableDefaultValue' has a wrong offset!");

// ScriptStruct TresGame.VoiceAndLipParameter
// 0x11438A40 (0x11438A40 - 0x0000)
struct alignas(0x11438A40) FVoiceAndLipParameter final
{
public:
	class FName                                   GroupID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             PAsset;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipName;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoiceAndLipParameter) == 0x11438A40, "Wrong alignment on FVoiceAndLipParameter");
static_assert(sizeof(FVoiceAndLipParameter) == 0x11438A40, "Wrong size on FVoiceAndLipParameter");
static_assert(offsetof(FVoiceAndLipParameter, GroupID) == 0x000000, "Member 'FVoiceAndLipParameter::GroupID' has a wrong offset!");
static_assert(offsetof(FVoiceAndLipParameter, PAsset) == 0x000008, "Member 'FVoiceAndLipParameter::PAsset' has a wrong offset!");
static_assert(offsetof(FVoiceAndLipParameter, LipName) == 0x000010, "Member 'FVoiceAndLipParameter::LipName' has a wrong offset!");

// ScriptStruct TresGame.TresRootComponentPostPhysicsTickFunction
// 0x11EAC (0x11F04 - 0x0058)
struct alignas(0x11F04) FTresRootComponentPostPhysicsTickFunction final : public FTickFunction
{
};
static_assert(alignof(FTresRootComponentPostPhysicsTickFunction) == 0x011F04, "Wrong alignment on FTresRootComponentPostPhysicsTickFunction");
static_assert(sizeof(FTresRootComponentPostPhysicsTickFunction) == 0x011F04, "Wrong size on FTresRootComponentPostPhysicsTickFunction");

// ScriptStruct TresGame.TresNavLinkSet_Common
// 0x0010 (0x0010 - 0x0000)
struct FTresNavLinkSet_Common final
{
public:
	class ANavLinkProxy*                          NavLinkProxy;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresNavLinkSegment_Common                    NavLinkSegment;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresNavLinkSet_Common) == 0x000008, "Wrong alignment on FTresNavLinkSet_Common");
static_assert(sizeof(FTresNavLinkSet_Common) == 0x000010, "Wrong size on FTresNavLinkSet_Common");
static_assert(offsetof(FTresNavLinkSet_Common, NavLinkProxy) == 0x000000, "Member 'FTresNavLinkSet_Common::NavLinkProxy' has a wrong offset!");
static_assert(offsetof(FTresNavLinkSet_Common, NavLinkSegment) == 0x000008, "Member 'FTresNavLinkSet_Common::NavLinkSegment' has a wrong offset!");

// ScriptStruct TresGame.TresLevelEntitySequenceConditionalAction
// 0x0020 (0x0020 - 0x0000)
struct FTresLevelEntitySequenceConditionalAction final
{
public:
	class UTresLevelEntitySequenceCondition*      M_Condition;                                       // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresLevelEntitySequenceAction*         M_Action;                                          // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_Abandonable;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTresLevelEntitySequenceCondition*      M_AbandonCondition;                                // 0x0018(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLevelEntitySequenceConditionalAction) == 0x000008, "Wrong alignment on FTresLevelEntitySequenceConditionalAction");
static_assert(sizeof(FTresLevelEntitySequenceConditionalAction) == 0x000020, "Wrong size on FTresLevelEntitySequenceConditionalAction");
static_assert(offsetof(FTresLevelEntitySequenceConditionalAction, M_Condition) == 0x000000, "Member 'FTresLevelEntitySequenceConditionalAction::M_Condition' has a wrong offset!");
static_assert(offsetof(FTresLevelEntitySequenceConditionalAction, M_Action) == 0x000008, "Member 'FTresLevelEntitySequenceConditionalAction::M_Action' has a wrong offset!");
static_assert(offsetof(FTresLevelEntitySequenceConditionalAction, M_Abandonable) == 0x000010, "Member 'FTresLevelEntitySequenceConditionalAction::M_Abandonable' has a wrong offset!");
static_assert(offsetof(FTresLevelEntitySequenceConditionalAction, M_AbandonCondition) == 0x000018, "Member 'FTresLevelEntitySequenceConditionalAction::M_AbandonCondition' has a wrong offset!");

// ScriptStruct TresGame.TresAnimAssetUnit
// 0x0010 (0x0010 - 0x0000)
struct FTresAnimAssetUnit final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimData;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAnimAssetUnit) == 0x000008, "Wrong alignment on FTresAnimAssetUnit");
static_assert(sizeof(FTresAnimAssetUnit) == 0x000010, "Wrong size on FTresAnimAssetUnit");
static_assert(offsetof(FTresAnimAssetUnit, AnimName) == 0x000000, "Member 'FTresAnimAssetUnit::AnimName' has a wrong offset!");
static_assert(offsetof(FTresAnimAssetUnit, AnimData) == 0x000008, "Member 'FTresAnimAssetUnit::AnimData' has a wrong offset!");

// ScriptStruct TresGame.DebrisStatePattern_e_he903
// 0x0018 (0x0018 - 0x0000)
struct FDebrisStatePattern_e_he903 final
{
public:
	float                                         FValidHpPer;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 FStateChangeRateArray;                             // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebrisStatePattern_e_he903) == 0x000008, "Wrong alignment on FDebrisStatePattern_e_he903");
static_assert(sizeof(FDebrisStatePattern_e_he903) == 0x000018, "Wrong size on FDebrisStatePattern_e_he903");
static_assert(offsetof(FDebrisStatePattern_e_he903, FValidHpPer) == 0x000000, "Member 'FDebrisStatePattern_e_he903::FValidHpPer' has a wrong offset!");
static_assert(offsetof(FDebrisStatePattern_e_he903, FStateChangeRateArray) == 0x000008, "Member 'FDebrisStatePattern_e_he903::FStateChangeRateArray' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipMultiItemMovieClip
// 0x0018 (0x0018 - 0x0000)
struct FTresGumiShipMultiItemMovieClip final
{
public:
	class UGFxObject*                             M_pRoot;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pItemName;                                       // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pItemNum;                                        // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipMultiItemMovieClip) == 0x000008, "Wrong alignment on FTresGumiShipMultiItemMovieClip");
static_assert(sizeof(FTresGumiShipMultiItemMovieClip) == 0x000018, "Wrong size on FTresGumiShipMultiItemMovieClip");
static_assert(offsetof(FTresGumiShipMultiItemMovieClip, M_pRoot) == 0x000000, "Member 'FTresGumiShipMultiItemMovieClip::M_pRoot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipMultiItemMovieClip, M_pItemName) == 0x000008, "Member 'FTresGumiShipMultiItemMovieClip::M_pItemName' has a wrong offset!");
static_assert(offsetof(FTresGumiShipMultiItemMovieClip, M_pItemNum) == 0x000010, "Member 'FTresGumiShipMultiItemMovieClip::M_pItemNum' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipEnemyStateWork
// 0x11B21 (0x11B21 - 0x0000)
struct alignas(0x11B21) FTresGumiShipEnemyStateWork final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipEnemyStateWork) == 0x011B21, "Wrong alignment on FTresGumiShipEnemyStateWork");
static_assert(sizeof(FTresGumiShipEnemyStateWork) == 0x011B21, "Wrong size on FTresGumiShipEnemyStateWork");

// ScriptStruct TresGame.AITestTractionParam
// 0x1148E940 (0x1148E940 - 0x0000)
struct alignas(0x1148E940) FAITestTractionParam final
{
public:
	uint8                                         M_bTractionXY : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTractionZUp : 1;                                // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTractionZDown : 1;                              // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTractionNear : 1;                               // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTractionFar : 1;                                // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_TractionDisMin;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TractionDisMax;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TractionMaxSpeed;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TractionAcc;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAITestTractionParam) == 0x1148E940, "Wrong alignment on FAITestTractionParam");
static_assert(sizeof(FAITestTractionParam) == 0x1148E940, "Wrong size on FAITestTractionParam");
static_assert(offsetof(FAITestTractionParam, M_TractionDisMin) == 0x000004, "Member 'FAITestTractionParam::M_TractionDisMin' has a wrong offset!");
static_assert(offsetof(FAITestTractionParam, M_TractionDisMax) == 0x000008, "Member 'FAITestTractionParam::M_TractionDisMax' has a wrong offset!");
static_assert(offsetof(FAITestTractionParam, M_TractionMaxSpeed) == 0x00000C, "Member 'FAITestTractionParam::M_TractionMaxSpeed' has a wrong offset!");
static_assert(offsetof(FAITestTractionParam, M_TractionAcc) == 0x000010, "Member 'FAITestTractionParam::M_TractionAcc' has a wrong offset!");

// ScriptStruct TresGame.TresDarkHomingProjectileParam_e_dw407
// 0x114B3CD0 (0x114B3CD0 - 0x0000)
struct alignas(0x114B3CD0) FTresDarkHomingProjectileParam_e_dw407 final
{
public:
	float                                         M_StartHomingTime;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HomingSpeedXY;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HomingAccelSpeedXY;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HomingMaxSpeedXY;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HomingSpeedZ;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HomingAccelSpeedZ;                               // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HomingMaxSpeedZ;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bDistance3D : 1;                                 // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_HomigMinDist;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDarkHomingProjectileParam_e_dw407) == 0x114B3CD0, "Wrong alignment on FTresDarkHomingProjectileParam_e_dw407");
static_assert(sizeof(FTresDarkHomingProjectileParam_e_dw407) == 0x114B3CD0, "Wrong size on FTresDarkHomingProjectileParam_e_dw407");
static_assert(offsetof(FTresDarkHomingProjectileParam_e_dw407, M_StartHomingTime) == 0x000000, "Member 'FTresDarkHomingProjectileParam_e_dw407::M_StartHomingTime' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingProjectileParam_e_dw407, M_HomingSpeedXY) == 0x000004, "Member 'FTresDarkHomingProjectileParam_e_dw407::M_HomingSpeedXY' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingProjectileParam_e_dw407, M_HomingAccelSpeedXY) == 0x000008, "Member 'FTresDarkHomingProjectileParam_e_dw407::M_HomingAccelSpeedXY' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingProjectileParam_e_dw407, M_HomingMaxSpeedXY) == 0x00000C, "Member 'FTresDarkHomingProjectileParam_e_dw407::M_HomingMaxSpeedXY' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingProjectileParam_e_dw407, M_HomingSpeedZ) == 0x000010, "Member 'FTresDarkHomingProjectileParam_e_dw407::M_HomingSpeedZ' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingProjectileParam_e_dw407, M_HomingAccelSpeedZ) == 0x000014, "Member 'FTresDarkHomingProjectileParam_e_dw407::M_HomingAccelSpeedZ' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingProjectileParam_e_dw407, M_HomingMaxSpeedZ) == 0x000018, "Member 'FTresDarkHomingProjectileParam_e_dw407::M_HomingMaxSpeedZ' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingProjectileParam_e_dw407, M_HomigMinDist) == 0x000020, "Member 'FTresDarkHomingProjectileParam_e_dw407::M_HomigMinDist' has a wrong offset!");

// ScriptStruct TresGame.TresTheaterChapterData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresTheaterChapterData final : public FTableRowBase
{
public:
	class FString                                 ChapterNameNamespaceKey;                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                IconAsset;                                         // 0x0018(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTheaterChapterData) == 0x11413080, "Wrong alignment on FTresTheaterChapterData");
static_assert(sizeof(FTresTheaterChapterData) == 0x11413080, "Wrong size on FTresTheaterChapterData");
static_assert(offsetof(FTresTheaterChapterData, ChapterNameNamespaceKey) == 0x000008, "Member 'FTresTheaterChapterData::ChapterNameNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresTheaterChapterData, IconAsset) == 0x000018, "Member 'FTresTheaterChapterData::IconAsset' has a wrong offset!");
static_assert(offsetof(FTresTheaterChapterData, Version) == 0x000038, "Member 'FTresTheaterChapterData::Version' has a wrong offset!");

// ScriptStruct TresGame.Tres_InterfaceDecorator
// 0x11490790 (0x11490790 - 0x0000)
struct alignas(0x11490790) FTres_InterfaceDecorator final
{
public:
	TSubclassOf<class AActor>                     M_pActor;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_valueA;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_valueB;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTres_InterfaceDecorator) == 0x11490790, "Wrong alignment on FTres_InterfaceDecorator");
static_assert(sizeof(FTres_InterfaceDecorator) == 0x11490790, "Wrong size on FTres_InterfaceDecorator");
static_assert(offsetof(FTres_InterfaceDecorator, M_pActor) == 0x000000, "Member 'FTres_InterfaceDecorator::M_pActor' has a wrong offset!");
static_assert(offsetof(FTres_InterfaceDecorator, M_valueA) == 0x000008, "Member 'FTres_InterfaceDecorator::M_valueA' has a wrong offset!");
static_assert(offsetof(FTres_InterfaceDecorator, M_valueB) == 0x00000C, "Member 'FTres_InterfaceDecorator::M_valueB' has a wrong offset!");

// ScriptStruct TresGame.TresSequentialExecDataTable
// 0x7C5F0 (0x1148F670 - 0x11413080)
struct alignas(0x1148F670) FTresSequentialExecDataTable final : public FTableRowBase
{
public:
	class FName                                   M_OutlineComment;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTres_InterfaceDecorator>       M_DecoratorArray;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESEQUENTIAL_EXEC_TASK_MODE                    M_taskMode;                                        // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_skipSequence;                                    // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQuery*                              M_QueryInstance;                                   // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bQueryFirstRun;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_TimeLimit;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvQueryRunMode                              M_RunMode;                                         // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_UpdateTime;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_UpdateTimeRandomDeviation;                       // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTres_EQS_ParamName>            M_ParamName;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UTresLocomotionDefinitionBase> M_LocomotionDefinition;                            // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AcceptanceRadius;                                // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AvoidanceWeight;                                 // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bPreciseArrival : 1;                             // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bFastAbort : 1;                                  // 0x0068(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bFailOnDamageReaction : 1;                       // 0x0068(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_Memo;                                            // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSequentialExecDataTable) == 0x1148F670, "Wrong alignment on FTresSequentialExecDataTable");
static_assert(sizeof(FTresSequentialExecDataTable) == 0x1148F670, "Wrong size on FTresSequentialExecDataTable");
static_assert(offsetof(FTresSequentialExecDataTable, M_OutlineComment) == 0x000008, "Member 'FTresSequentialExecDataTable::M_OutlineComment' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_DecoratorArray) == 0x000010, "Member 'FTresSequentialExecDataTable::M_DecoratorArray' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_taskMode) == 0x000020, "Member 'FTresSequentialExecDataTable::M_taskMode' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_skipSequence) == 0x000021, "Member 'FTresSequentialExecDataTable::M_skipSequence' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_QueryInstance) == 0x000028, "Member 'FTresSequentialExecDataTable::M_QueryInstance' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_bQueryFirstRun) == 0x000030, "Member 'FTresSequentialExecDataTable::M_bQueryFirstRun' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_TimeLimit) == 0x000034, "Member 'FTresSequentialExecDataTable::M_TimeLimit' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_RunMode) == 0x000038, "Member 'FTresSequentialExecDataTable::M_RunMode' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_UpdateTime) == 0x00003C, "Member 'FTresSequentialExecDataTable::M_UpdateTime' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_UpdateTimeRandomDeviation) == 0x000040, "Member 'FTresSequentialExecDataTable::M_UpdateTimeRandomDeviation' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_ParamName) == 0x000048, "Member 'FTresSequentialExecDataTable::M_ParamName' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_LocomotionDefinition) == 0x000058, "Member 'FTresSequentialExecDataTable::M_LocomotionDefinition' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_AcceptanceRadius) == 0x000060, "Member 'FTresSequentialExecDataTable::M_AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_AvoidanceWeight) == 0x000064, "Member 'FTresSequentialExecDataTable::M_AvoidanceWeight' has a wrong offset!");
static_assert(offsetof(FTresSequentialExecDataTable, M_Memo) == 0x000070, "Member 'FTresSequentialExecDataTable::M_Memo' has a wrong offset!");

// ScriptStruct TresGame.VoiceSet_e_ex355
// 0x0018 (0x0018 - 0x0000)
struct FVoiceSet_e_ex355 final
{
public:
	TArray<class USoundBase*>                     VoiceDataArray;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EVoiceType_e_ex355                            VoiceType;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoiceSet_e_ex355) == 0x000008, "Wrong alignment on FVoiceSet_e_ex355");
static_assert(sizeof(FVoiceSet_e_ex355) == 0x000018, "Wrong size on FVoiceSet_e_ex355");
static_assert(offsetof(FVoiceSet_e_ex355, VoiceDataArray) == 0x000000, "Member 'FVoiceSet_e_ex355::VoiceDataArray' has a wrong offset!");
static_assert(offsetof(FVoiceSet_e_ex355, VoiceType) == 0x000010, "Member 'FVoiceSet_e_ex355::VoiceType' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405ChainActionParam
// 0x11491770 (0x11491770 - 0x0000)
struct alignas(0x11491770) FTresE_dw405ChainActionParam final
{
public:
	TSubclassOf<class UTresAction_e_dw405_Base>   ActionDefinition;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionIdx;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAngle;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_dw405ChainActionParam) == 0x11491770, "Wrong alignment on FTresE_dw405ChainActionParam");
static_assert(sizeof(FTresE_dw405ChainActionParam) == 0x11491770, "Wrong size on FTresE_dw405ChainActionParam");
static_assert(offsetof(FTresE_dw405ChainActionParam, ActionDefinition) == 0x000000, "Member 'FTresE_dw405ChainActionParam::ActionDefinition' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ChainActionParam, ActionIdx) == 0x000008, "Member 'FTresE_dw405ChainActionParam::ActionIdx' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ChainActionParam, MoveAngle) == 0x00000C, "Member 'FTresE_dw405ChainActionParam::MoveAngle' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405ChainActionParams
// 0x0010 (0x0010 - 0x0000)
struct FTresE_dw405ChainActionParams final
{
public:
	TArray<struct FTresE_dw405ChainActionParam>   Params;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_dw405ChainActionParams) == 0x000008, "Wrong alignment on FTresE_dw405ChainActionParams");
static_assert(sizeof(FTresE_dw405ChainActionParams) == 0x000010, "Wrong size on FTresE_dw405ChainActionParams");
static_assert(offsetof(FTresE_dw405ChainActionParams, Params) == 0x000000, "Member 'FTresE_dw405ChainActionParams::Params' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamWaitMoveInfo
// 0x0050 (0x0050 - 0x0000)
struct FEX359_BeamWaitMoveInfo final
{
public:
	bool                                          M_bNotEndOnTime;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fMaxWaitTime;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x1];                                        // 0x0008(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          M_bUpdateMoveDir;                                  // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x46];                                       // 0x000A(0x0046)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_BeamWaitMoveInfo) == 0x000004, "Wrong alignment on FEX359_BeamWaitMoveInfo");
static_assert(sizeof(FEX359_BeamWaitMoveInfo) == 0x000050, "Wrong size on FEX359_BeamWaitMoveInfo");
static_assert(offsetof(FEX359_BeamWaitMoveInfo, M_bNotEndOnTime) == 0x000000, "Member 'FEX359_BeamWaitMoveInfo::M_bNotEndOnTime' has a wrong offset!");
static_assert(offsetof(FEX359_BeamWaitMoveInfo, M_fMaxWaitTime) == 0x000004, "Member 'FEX359_BeamWaitMoveInfo::M_fMaxWaitTime' has a wrong offset!");
static_assert(offsetof(FEX359_BeamWaitMoveInfo, M_bUpdateMoveDir) == 0x000009, "Member 'FEX359_BeamWaitMoveInfo::M_bUpdateMoveDir' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamSpinMoveInfo
// 0x0040 (0x0040 - 0x0000)
struct FEX359_BeamSpinMoveInfo final
{
public:
	float                                         M_fMaxSpinTime;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bSpinInversed;                                   // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fInitSpinVelocity;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bSpinAccel;                                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fSpinAccel;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxSpinVelocity;                                // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATresProjectileBase*                    M_Projectile;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_20[0x20];                                      // 0x0020(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_BeamSpinMoveInfo) == 0x000008, "Wrong alignment on FEX359_BeamSpinMoveInfo");
static_assert(sizeof(FEX359_BeamSpinMoveInfo) == 0x000040, "Wrong size on FEX359_BeamSpinMoveInfo");
static_assert(offsetof(FEX359_BeamSpinMoveInfo, M_fMaxSpinTime) == 0x000000, "Member 'FEX359_BeamSpinMoveInfo::M_fMaxSpinTime' has a wrong offset!");
static_assert(offsetof(FEX359_BeamSpinMoveInfo, M_bSpinInversed) == 0x000004, "Member 'FEX359_BeamSpinMoveInfo::M_bSpinInversed' has a wrong offset!");
static_assert(offsetof(FEX359_BeamSpinMoveInfo, M_fInitSpinVelocity) == 0x000008, "Member 'FEX359_BeamSpinMoveInfo::M_fInitSpinVelocity' has a wrong offset!");
static_assert(offsetof(FEX359_BeamSpinMoveInfo, M_bSpinAccel) == 0x00000C, "Member 'FEX359_BeamSpinMoveInfo::M_bSpinAccel' has a wrong offset!");
static_assert(offsetof(FEX359_BeamSpinMoveInfo, M_fSpinAccel) == 0x000010, "Member 'FEX359_BeamSpinMoveInfo::M_fSpinAccel' has a wrong offset!");
static_assert(offsetof(FEX359_BeamSpinMoveInfo, M_fMaxSpinVelocity) == 0x000014, "Member 'FEX359_BeamSpinMoveInfo::M_fMaxSpinVelocity' has a wrong offset!");
static_assert(offsetof(FEX359_BeamSpinMoveInfo, M_Projectile) == 0x000018, "Member 'FEX359_BeamSpinMoveInfo::M_Projectile' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamHomingMoveInfo
// 0x0058 (0x0058 - 0x0000)
struct FEX359_BeamHomingMoveInfo final
{
public:
	float                                         M_fInitVelocity;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bResetInitVelocity;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bAccel;                                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fAccel;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxVelocity;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxMoveDistance;                                // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bMaxMoveDistance;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bHoming;                                         // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fHomingAccel;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingMaxVelocity;                              // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingMaxAngle;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingMinDistance;                              // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingIgnoreMaxAngleTime;                       // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresProjectileBase*                    M_Projectile;                                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_Target;                                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_BeamHomingMoveInfo) == 0x000008, "Wrong alignment on FEX359_BeamHomingMoveInfo");
static_assert(sizeof(FEX359_BeamHomingMoveInfo) == 0x000058, "Wrong size on FEX359_BeamHomingMoveInfo");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_fInitVelocity) == 0x000000, "Member 'FEX359_BeamHomingMoveInfo::M_fInitVelocity' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_bResetInitVelocity) == 0x000004, "Member 'FEX359_BeamHomingMoveInfo::M_bResetInitVelocity' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_bAccel) == 0x000005, "Member 'FEX359_BeamHomingMoveInfo::M_bAccel' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_fAccel) == 0x000008, "Member 'FEX359_BeamHomingMoveInfo::M_fAccel' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_fMaxVelocity) == 0x00000C, "Member 'FEX359_BeamHomingMoveInfo::M_fMaxVelocity' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_fMaxMoveDistance) == 0x000010, "Member 'FEX359_BeamHomingMoveInfo::M_fMaxMoveDistance' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_bMaxMoveDistance) == 0x000014, "Member 'FEX359_BeamHomingMoveInfo::M_bMaxMoveDistance' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_bHoming) == 0x000015, "Member 'FEX359_BeamHomingMoveInfo::M_bHoming' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_fHomingAccel) == 0x000018, "Member 'FEX359_BeamHomingMoveInfo::M_fHomingAccel' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_fHomingMaxVelocity) == 0x00001C, "Member 'FEX359_BeamHomingMoveInfo::M_fHomingMaxVelocity' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_fHomingMaxAngle) == 0x000020, "Member 'FEX359_BeamHomingMoveInfo::M_fHomingMaxAngle' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_fHomingMinDistance) == 0x000024, "Member 'FEX359_BeamHomingMoveInfo::M_fHomingMinDistance' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_fHomingIgnoreMaxAngleTime) == 0x000028, "Member 'FEX359_BeamHomingMoveInfo::M_fHomingIgnoreMaxAngleTime' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_Projectile) == 0x000030, "Member 'FEX359_BeamHomingMoveInfo::M_Projectile' has a wrong offset!");
static_assert(offsetof(FEX359_BeamHomingMoveInfo, M_Target) == 0x000038, "Member 'FEX359_BeamHomingMoveInfo::M_Target' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamMoveInfoSet
// 0x0100 (0x0100 - 0x0000)
struct FEX359_BeamMoveInfoSet final
{
public:
	struct FEX359_BeamWaitMoveInfo                M_WaitMoveInfo;                                    // 0x0000(0x0050)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bMoveWait;                                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEX359_BeamSpinMoveInfo                M_SpinMoveInfo;                                    // 0x0058(0x0040)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bSpinMove;                                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEX359_BeamHomingMoveInfo              M_HomingMoveInfo;                                  // 0x00A0(0x0058)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_BeamMoveInfoSet) == 0x000001, "Wrong alignment on FEX359_BeamMoveInfoSet");
static_assert(sizeof(FEX359_BeamMoveInfoSet) == 0x000100, "Wrong size on FEX359_BeamMoveInfoSet");
static_assert(offsetof(FEX359_BeamMoveInfoSet, M_WaitMoveInfo) == 0x000000, "Member 'FEX359_BeamMoveInfoSet::M_WaitMoveInfo' has a wrong offset!");
static_assert(offsetof(FEX359_BeamMoveInfoSet, M_bMoveWait) == 0x000050, "Member 'FEX359_BeamMoveInfoSet::M_bMoveWait' has a wrong offset!");
static_assert(offsetof(FEX359_BeamMoveInfoSet, M_SpinMoveInfo) == 0x000058, "Member 'FEX359_BeamMoveInfoSet::M_SpinMoveInfo' has a wrong offset!");
static_assert(offsetof(FEX359_BeamMoveInfoSet, M_bSpinMove) == 0x000098, "Member 'FEX359_BeamMoveInfoSet::M_bSpinMove' has a wrong offset!");
static_assert(offsetof(FEX359_BeamMoveInfoSet, M_HomingMoveInfo) == 0x0000A0, "Member 'FEX359_BeamMoveInfoSet::M_HomingMoveInfo' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamInfo
// 0x0140 (0x0140 - 0x0000)
struct FEX359_BeamInfo final
{
public:
	int32                                         M_iNotify;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresProjectile_e_ex359_BeamBase> M_pProjClass;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATresProjectile_e_ex359_BeamBase> M_pProjClass_FinalBrake;                           // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vSpawnLocOffset;                                 // 0x0018(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bPolarSpawnLocOffset;                            // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fSpawnLocPolarYawOffset;                         // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX359_SpawnLocType                           M_SpawnLocType;                                    // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX359_SpawnDirType                           M_SpawnDirType;                                    // 0x002D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fSpawnDirYawOffset;                              // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLifeTime;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bLifeTime;                                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIgnoreSameIndexHit;                             // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEX359_BeamMoveInfoSet                 M_MoveInfoSet;                                     // 0x0040(0x0100)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_BeamInfo) == 0x000008, "Wrong alignment on FEX359_BeamInfo");
static_assert(sizeof(FEX359_BeamInfo) == 0x000140, "Wrong size on FEX359_BeamInfo");
static_assert(offsetof(FEX359_BeamInfo, M_iNotify) == 0x000000, "Member 'FEX359_BeamInfo::M_iNotify' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_pProjClass) == 0x000008, "Member 'FEX359_BeamInfo::M_pProjClass' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_pProjClass_FinalBrake) == 0x000010, "Member 'FEX359_BeamInfo::M_pProjClass_FinalBrake' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_vSpawnLocOffset) == 0x000018, "Member 'FEX359_BeamInfo::M_vSpawnLocOffset' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_bPolarSpawnLocOffset) == 0x000024, "Member 'FEX359_BeamInfo::M_bPolarSpawnLocOffset' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_fSpawnLocPolarYawOffset) == 0x000028, "Member 'FEX359_BeamInfo::M_fSpawnLocPolarYawOffset' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_SpawnLocType) == 0x00002C, "Member 'FEX359_BeamInfo::M_SpawnLocType' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_SpawnDirType) == 0x00002D, "Member 'FEX359_BeamInfo::M_SpawnDirType' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_fSpawnDirYawOffset) == 0x000030, "Member 'FEX359_BeamInfo::M_fSpawnDirYawOffset' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_fLifeTime) == 0x000034, "Member 'FEX359_BeamInfo::M_fLifeTime' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_bLifeTime) == 0x000038, "Member 'FEX359_BeamInfo::M_bLifeTime' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_bIgnoreSameIndexHit) == 0x000039, "Member 'FEX359_BeamInfo::M_bIgnoreSameIndexHit' has a wrong offset!");
static_assert(offsetof(FEX359_BeamInfo, M_MoveInfoSet) == 0x000040, "Member 'FEX359_BeamInfo::M_MoveInfoSet' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamInfoSet
// 0x0010 (0x0010 - 0x0000)
struct FEX359_BeamInfoSet final
{
public:
	TArray<struct FEX359_BeamInfo>                M_BeamInfoArray;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_BeamInfoSet) == 0x000008, "Wrong alignment on FEX359_BeamInfoSet");
static_assert(sizeof(FEX359_BeamInfoSet) == 0x000010, "Wrong size on FEX359_BeamInfoSet");
static_assert(offsetof(FEX359_BeamInfoSet, M_BeamInfoArray) == 0x000000, "Member 'FEX359_BeamInfoSet::M_BeamInfoArray' has a wrong offset!");

// ScriptStruct TresGame.TresTaggedActorPropertyValueBase
// 0x4CD6 (0x4CD6 - 0x0000)
struct alignas(0x4CD6) FTresTaggedActorPropertyValueBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTaggedActorPropertyValueBase) == 0x004CD6, "Wrong alignment on FTresTaggedActorPropertyValueBase");
static_assert(sizeof(FTresTaggedActorPropertyValueBase) == 0x004CD6, "Wrong size on FTresTaggedActorPropertyValueBase");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanWorldMinX
// 0x0018 (0x4CEE - 0x4CD6)
struct alignas(0x4CEE) FTresTaggedActorPropertyValue_OceanWorldMinX final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanWorldMinX) == 0x004CEE, "Wrong alignment on FTresTaggedActorPropertyValue_OceanWorldMinX");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanWorldMinX) == 0x004CEE, "Wrong size on FTresTaggedActorPropertyValue_OceanWorldMinX");

// ScriptStruct TresGame.TresEncountVolumeEntry
// 0x114ECA10 (0x114ECA10 - 0x0000)
struct alignas(0x114ECA10) FTresEncountVolumeEntry final
{
public:
	TArray<class FName>                           M_GroupNames;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                M_StartOffset;                                     // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_EndOffset;                                       // 0x001C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_WorldOffsetZ;                                    // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_TryCount;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EscapeDistance;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_LotteryWeight;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bSkipNextTime;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresEncountTroops>         M_Troops;                                          // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_InternalGroupName;                               // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEncountVolumeEntry) == 0x114ECA10, "Wrong alignment on FTresEncountVolumeEntry");
static_assert(sizeof(FTresEncountVolumeEntry) == 0x114ECA10, "Wrong size on FTresEncountVolumeEntry");
static_assert(offsetof(FTresEncountVolumeEntry, M_GroupNames) == 0x000000, "Member 'FTresEncountVolumeEntry::M_GroupNames' has a wrong offset!");
static_assert(offsetof(FTresEncountVolumeEntry, M_StartOffset) == 0x000010, "Member 'FTresEncountVolumeEntry::M_StartOffset' has a wrong offset!");
static_assert(offsetof(FTresEncountVolumeEntry, M_EndOffset) == 0x00001C, "Member 'FTresEncountVolumeEntry::M_EndOffset' has a wrong offset!");
static_assert(offsetof(FTresEncountVolumeEntry, M_WorldOffsetZ) == 0x000028, "Member 'FTresEncountVolumeEntry::M_WorldOffsetZ' has a wrong offset!");
static_assert(offsetof(FTresEncountVolumeEntry, M_TryCount) == 0x00002C, "Member 'FTresEncountVolumeEntry::M_TryCount' has a wrong offset!");
static_assert(offsetof(FTresEncountVolumeEntry, M_EscapeDistance) == 0x000030, "Member 'FTresEncountVolumeEntry::M_EscapeDistance' has a wrong offset!");
static_assert(offsetof(FTresEncountVolumeEntry, M_LotteryWeight) == 0x000034, "Member 'FTresEncountVolumeEntry::M_LotteryWeight' has a wrong offset!");
static_assert(offsetof(FTresEncountVolumeEntry, M_bSkipNextTime) == 0x000038, "Member 'FTresEncountVolumeEntry::M_bSkipNextTime' has a wrong offset!");
static_assert(offsetof(FTresEncountVolumeEntry, M_Troops) == 0x000040, "Member 'FTresEncountVolumeEntry::M_Troops' has a wrong offset!");
static_assert(offsetof(FTresEncountVolumeEntry, M_InternalGroupName) == 0x000048, "Member 'FTresEncountVolumeEntry::M_InternalGroupName' has a wrong offset!");

// ScriptStruct TresGame.TresTornadoDebrisDestinationEffectInfo
// 0x000C (0x000C - 0x0000)
struct FTresTornadoDebrisDestinationEffectInfo final
{
public:
	float                                         FDisableDistance;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FScale;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetachOnDisappear;                                // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTornadoDebrisDestinationEffectInfo) == 0x000004, "Wrong alignment on FTresTornadoDebrisDestinationEffectInfo");
static_assert(sizeof(FTresTornadoDebrisDestinationEffectInfo) == 0x00000C, "Wrong size on FTresTornadoDebrisDestinationEffectInfo");
static_assert(offsetof(FTresTornadoDebrisDestinationEffectInfo, FDisableDistance) == 0x000000, "Member 'FTresTornadoDebrisDestinationEffectInfo::FDisableDistance' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisDestinationEffectInfo, FScale) == 0x000004, "Member 'FTresTornadoDebrisDestinationEffectInfo::FScale' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisDestinationEffectInfo, bDetachOnDisappear) == 0x000008, "Member 'FTresTornadoDebrisDestinationEffectInfo::bDetachOnDisappear' has a wrong offset!");

// ScriptStruct TresGame.EX355_SwingTractionInfo
// 0x114BAF30 (0x114BAF30 - 0x0000)
struct alignas(0x114BAF30) FEX355_SwingTractionInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_SwingTractionHorizontalDir             TractionDir;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VTractionOffset;                                   // 0x001C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPawnRotAsDir;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FMaxHorizontalTractionDistance;                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_MoveVelocityType                       TractionVelocityType;                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FTractionInterpExp;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoTractionOnLand;                                 // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FHeightFromLand;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_SwingTractionInfo) == 0x114BAF30, "Wrong alignment on FEX355_SwingTractionInfo");
static_assert(sizeof(FEX355_SwingTractionInfo) == 0x114BAF30, "Wrong size on FEX355_SwingTractionInfo");
static_assert(offsetof(FEX355_SwingTractionInfo, INotifyID) == 0x000000, "Member 'FEX355_SwingTractionInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionInfo, Comment) == 0x000008, "Member 'FEX355_SwingTractionInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionInfo, TractionDir) == 0x000018, "Member 'FEX355_SwingTractionInfo::TractionDir' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionInfo, VTractionOffset) == 0x00001C, "Member 'FEX355_SwingTractionInfo::VTractionOffset' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionInfo, bPawnRotAsDir) == 0x000028, "Member 'FEX355_SwingTractionInfo::bPawnRotAsDir' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionInfo, FMaxHorizontalTractionDistance) == 0x00002C, "Member 'FEX355_SwingTractionInfo::FMaxHorizontalTractionDistance' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionInfo, TractionVelocityType) == 0x000030, "Member 'FEX355_SwingTractionInfo::TractionVelocityType' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionInfo, FTractionInterpExp) == 0x000034, "Member 'FEX355_SwingTractionInfo::FTractionInterpExp' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionInfo, bNoTractionOnLand) == 0x000038, "Member 'FEX355_SwingTractionInfo::bNoTractionOnLand' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionInfo, FHeightFromLand) == 0x00003C, "Member 'FEX355_SwingTractionInfo::FHeightFromLand' has a wrong offset!");

// ScriptStruct TresGame.ArtilleryOptimizeParam
// 0x114919E0 (0x114919E0 - 0x0000)
struct alignas(0x114919E0) FArtilleryOptimizeParam final
{
public:
	int32                                         M_OffsetIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_AttackName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArtilleryOptimizeParam) == 0x114919E0, "Wrong alignment on FArtilleryOptimizeParam");
static_assert(sizeof(FArtilleryOptimizeParam) == 0x114919E0, "Wrong size on FArtilleryOptimizeParam");
static_assert(offsetof(FArtilleryOptimizeParam, M_OffsetIndex) == 0x000000, "Member 'FArtilleryOptimizeParam::M_OffsetIndex' has a wrong offset!");
static_assert(offsetof(FArtilleryOptimizeParam, M_AttackName) == 0x000008, "Member 'FArtilleryOptimizeParam::M_AttackName' has a wrong offset!");

// ScriptStruct TresGame.StoleTrapWorkData
// 0x0020 (0x0020 - 0x0000)
struct FStoleTrapWorkData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_PointEffectComp;                                 // 0x0018(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoleTrapWorkData) == 0x000008, "Wrong alignment on FStoleTrapWorkData");
static_assert(sizeof(FStoleTrapWorkData) == 0x000020, "Wrong size on FStoleTrapWorkData");
static_assert(offsetof(FStoleTrapWorkData, M_PointEffectComp) == 0x000018, "Member 'FStoleTrapWorkData::M_PointEffectComp' has a wrong offset!");

// ScriptStruct TresGame.TresActionBindParams
// 0x11232 (0x11232 - 0x0000)
struct alignas(0x11232) FTresActionBindParams final
{
public:
	uint8                                         Pad_0[0xF8];                                       // 0x0000(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresActionBindParams) == 0x011232, "Wrong alignment on FTresActionBindParams");
static_assert(sizeof(FTresActionBindParams) == 0x011232, "Wrong size on FTresActionBindParams");

// ScriptStruct TresGame.TresActionTaskParam
// 0x0010 (0x0010 - 0x0000)
struct FTresActionTaskParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamValue;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresActionTaskParamType                      ParamType;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bValueEditable;                                  // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresActionTaskParam) == 0x000004, "Wrong alignment on FTresActionTaskParam");
static_assert(sizeof(FTresActionTaskParam) == 0x000010, "Wrong size on FTresActionTaskParam");
static_assert(offsetof(FTresActionTaskParam, ParamName) == 0x000000, "Member 'FTresActionTaskParam::ParamName' has a wrong offset!");
static_assert(offsetof(FTresActionTaskParam, ParamValue) == 0x000008, "Member 'FTresActionTaskParam::ParamValue' has a wrong offset!");
static_assert(offsetof(FTresActionTaskParam, ParamType) == 0x00000C, "Member 'FTresActionTaskParam::ParamType' has a wrong offset!");
static_assert(offsetof(FTresActionTaskParam, M_bValueEditable) == 0x00000D, "Member 'FTresActionTaskParam::M_bValueEditable' has a wrong offset!");

// ScriptStruct TresGame.TresWildDanceOneActionParam_e_ex358
// 0x114C0000 (0x114C0000 - 0x0000)
struct alignas(0x114C0000) FTresWildDanceOneActionParam_e_ex358 final
{
public:
	class UWildDanceActionParamBase_e_ex358*      ActionData;                                        // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWildDanceActionParamBase_e_ex358*      AirActionData;                                     // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirActionExecuteTargetHeight;                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWildDanceOneActionParam_e_ex358) == 0x114C0000, "Wrong alignment on FTresWildDanceOneActionParam_e_ex358");
static_assert(sizeof(FTresWildDanceOneActionParam_e_ex358) == 0x114C0000, "Wrong size on FTresWildDanceOneActionParam_e_ex358");
static_assert(offsetof(FTresWildDanceOneActionParam_e_ex358, ActionData) == 0x000000, "Member 'FTresWildDanceOneActionParam_e_ex358::ActionData' has a wrong offset!");
static_assert(offsetof(FTresWildDanceOneActionParam_e_ex358, AirActionData) == 0x000008, "Member 'FTresWildDanceOneActionParam_e_ex358::AirActionData' has a wrong offset!");
static_assert(offsetof(FTresWildDanceOneActionParam_e_ex358, AirActionExecuteTargetHeight) == 0x000010, "Member 'FTresWildDanceOneActionParam_e_ex358::AirActionExecuteTargetHeight' has a wrong offset!");

// ScriptStruct TresGame.TresGummiPieceDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGummiPieceDataTable final : public FTableRowBase
{
public:
	TArray<ETresItemDefGumiShipBP>                M_pSpace1GummiPieceData;                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiShipBP>                M_pSpace2GummiPieceData;                           // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiShipBP>                M_pSpace3GummiPieceData;                           // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiShipBP>                M_pSpace4GummiPieceData;                           // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiPieceDataTable) == 0x11413080, "Wrong alignment on FTresGummiPieceDataTable");
static_assert(sizeof(FTresGummiPieceDataTable) == 0x11413080, "Wrong size on FTresGummiPieceDataTable");
static_assert(offsetof(FTresGummiPieceDataTable, M_pSpace1GummiPieceData) == 0x000008, "Member 'FTresGummiPieceDataTable::M_pSpace1GummiPieceData' has a wrong offset!");
static_assert(offsetof(FTresGummiPieceDataTable, M_pSpace2GummiPieceData) == 0x000018, "Member 'FTresGummiPieceDataTable::M_pSpace2GummiPieceData' has a wrong offset!");
static_assert(offsetof(FTresGummiPieceDataTable, M_pSpace3GummiPieceData) == 0x000028, "Member 'FTresGummiPieceDataTable::M_pSpace3GummiPieceData' has a wrong offset!");
static_assert(offsetof(FTresGummiPieceDataTable, M_pSpace4GummiPieceData) == 0x000038, "Member 'FTresGummiPieceDataTable::M_pSpace4GummiPieceData' has a wrong offset!");

// ScriptStruct TresGame.TresGimmickDropPrizeDataUnit
// 0x1155E540 (0x1155E540 - 0x0000)
struct alignas(0x1155E540) FTresGimmickDropPrizeDataUnit final
{
public:
	ETresDropItemID                               M_Prize;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_SpawnNum;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_SpawnPlusNum;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGimmickDropPrizeDataUnit) == 0x1155E540, "Wrong alignment on FTresGimmickDropPrizeDataUnit");
static_assert(sizeof(FTresGimmickDropPrizeDataUnit) == 0x1155E540, "Wrong size on FTresGimmickDropPrizeDataUnit");
static_assert(offsetof(FTresGimmickDropPrizeDataUnit, M_Prize) == 0x000000, "Member 'FTresGimmickDropPrizeDataUnit::M_Prize' has a wrong offset!");
static_assert(offsetof(FTresGimmickDropPrizeDataUnit, M_SpawnNum) == 0x000004, "Member 'FTresGimmickDropPrizeDataUnit::M_SpawnNum' has a wrong offset!");
static_assert(offsetof(FTresGimmickDropPrizeDataUnit, M_SpawnPlusNum) == 0x000008, "Member 'FTresGimmickDropPrizeDataUnit::M_SpawnPlusNum' has a wrong offset!");

// ScriptStruct TresGame.TresGimmickDropPrizeTable
// 0x1155E2C0 (0x1155E2C0 - 0x0000)
struct alignas(0x1155E2C0) FTresGimmickDropPrizeTable final
{
public:
	TArray<struct FTresGimmickDropPrizeDataUnit>  M_Prizes;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         M_SpawnRate;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGimmickDropPrizeTable) == 0x1155E2C0, "Wrong alignment on FTresGimmickDropPrizeTable");
static_assert(sizeof(FTresGimmickDropPrizeTable) == 0x1155E2C0, "Wrong size on FTresGimmickDropPrizeTable");
static_assert(offsetof(FTresGimmickDropPrizeTable, M_Prizes) == 0x000000, "Member 'FTresGimmickDropPrizeTable::M_Prizes' has a wrong offset!");
static_assert(offsetof(FTresGimmickDropPrizeTable, M_SpawnRate) == 0x000010, "Member 'FTresGimmickDropPrizeTable::M_SpawnRate' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipTargetMarkerObject
// 0x0020 (0x0020 - 0x0000)
struct FTresGumiShipTargetMarkerObject final
{
public:
	class UGFxObject*                             M_pRoot;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pLockAnm;                                        // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipTargetMarkerObject) == 0x000008, "Wrong alignment on FTresGumiShipTargetMarkerObject");
static_assert(sizeof(FTresGumiShipTargetMarkerObject) == 0x000020, "Wrong size on FTresGumiShipTargetMarkerObject");
static_assert(offsetof(FTresGumiShipTargetMarkerObject, M_pRoot) == 0x000000, "Member 'FTresGumiShipTargetMarkerObject::M_pRoot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipTargetMarkerObject, M_pLockAnm) == 0x000008, "Member 'FTresGumiShipTargetMarkerObject::M_pLockAnm' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx361CounterAfterActionInfo
// 0x0002 (0x0002 - 0x0000)
struct FTresEnemyEx361CounterAfterActionInfo final
{
public:
	ETresEnemyEx361CounterAfterActionKind         ActionKind;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAIActionAbortTimingID                    AbortActionID;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx361CounterAfterActionInfo) == 0x000001, "Wrong alignment on FTresEnemyEx361CounterAfterActionInfo");
static_assert(sizeof(FTresEnemyEx361CounterAfterActionInfo) == 0x000002, "Wrong size on FTresEnemyEx361CounterAfterActionInfo");
static_assert(offsetof(FTresEnemyEx361CounterAfterActionInfo, ActionKind) == 0x000000, "Member 'FTresEnemyEx361CounterAfterActionInfo::ActionKind' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx361CounterAfterActionInfo, AbortActionID) == 0x000001, "Member 'FTresEnemyEx361CounterAfterActionInfo::AbortActionID' has a wrong offset!");

// ScriptStruct TresGame.GameHelpItemPage
// 0x1F5FE5D0 (0x1F5FE5D0 - 0x0000)
struct alignas(0x1F5FE5D0) FGameHelpItemPage final
{
public:
	TSoftObjectPtr<class UTexture>                Image;                                             // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextNamespaceKey;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              TextNamespaceKeyPlatform;                          // 0x0030(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameHelpItemPage) == 0x1F5FE5D0, "Wrong alignment on FGameHelpItemPage");
static_assert(sizeof(FGameHelpItemPage) == 0x1F5FE5D0, "Wrong size on FGameHelpItemPage");
static_assert(offsetof(FGameHelpItemPage, Image) == 0x000000, "Member 'FGameHelpItemPage::Image' has a wrong offset!");
static_assert(offsetof(FGameHelpItemPage, TextNamespaceKey) == 0x000020, "Member 'FGameHelpItemPage::TextNamespaceKey' has a wrong offset!");
static_assert(offsetof(FGameHelpItemPage, TextNamespaceKeyPlatform) == 0x000030, "Member 'FGameHelpItemPage::TextNamespaceKeyPlatform' has a wrong offset!");

// ScriptStruct TresGame.TresGameHelpDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGameHelpDataTable final : public FTableRowBase
{
public:
	ETresGameHelp                                 ID;                                                // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGameHelpCategory                         Category;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameHelpItemPage>              Pages;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         UIPriority;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TitleNamespaceKey;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WinImageUseKeyboardMouse;                          // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WinKeyboardHighlights;                             // 0x003A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGameHelpDataTable) == 0x11413080, "Wrong alignment on FTresGameHelpDataTable");
static_assert(sizeof(FTresGameHelpDataTable) == 0x11413080, "Wrong size on FTresGameHelpDataTable");
static_assert(offsetof(FTresGameHelpDataTable, ID) == 0x000008, "Member 'FTresGameHelpDataTable::ID' has a wrong offset!");
static_assert(offsetof(FTresGameHelpDataTable, Category) == 0x000009, "Member 'FTresGameHelpDataTable::Category' has a wrong offset!");
static_assert(offsetof(FTresGameHelpDataTable, Pages) == 0x000010, "Member 'FTresGameHelpDataTable::Pages' has a wrong offset!");
static_assert(offsetof(FTresGameHelpDataTable, UIPriority) == 0x000020, "Member 'FTresGameHelpDataTable::UIPriority' has a wrong offset!");
static_assert(offsetof(FTresGameHelpDataTable, TitleNamespaceKey) == 0x000028, "Member 'FTresGameHelpDataTable::TitleNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresGameHelpDataTable, Version) == 0x000038, "Member 'FTresGameHelpDataTable::Version' has a wrong offset!");
static_assert(offsetof(FTresGameHelpDataTable, WinImageUseKeyboardMouse) == 0x000039, "Member 'FTresGameHelpDataTable::WinImageUseKeyboardMouse' has a wrong offset!");
static_assert(offsetof(FTresGameHelpDataTable, WinKeyboardHighlights) == 0x00003A, "Member 'FTresGameHelpDataTable::WinKeyboardHighlights' has a wrong offset!");

// ScriptStruct TresGame.EX359_AccelWaveTimingInfo
// 0x116B9 (0x116B9 - 0x0000)
struct alignas(0x116B9) FEX359_AccelWaveTimingInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_AccelWaveTimingInfo) == 0x0116B9, "Wrong alignment on FEX359_AccelWaveTimingInfo");
static_assert(sizeof(FEX359_AccelWaveTimingInfo) == 0x0116B9, "Wrong size on FEX359_AccelWaveTimingInfo");

// ScriptStruct TresGame.EX359_LaserRainShotEffectTimeSet
// 0x0008 (0x0008 - 0x0000)
struct FEX359_LaserRainShotEffectTimeSet final
{
public:
	float                                         M_fTime;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_LaserRainShotEffectTimeSet) == 0x000004, "Wrong alignment on FEX359_LaserRainShotEffectTimeSet");
static_assert(sizeof(FEX359_LaserRainShotEffectTimeSet) == 0x000008, "Wrong size on FEX359_LaserRainShotEffectTimeSet");
static_assert(offsetof(FEX359_LaserRainShotEffectTimeSet, M_fTime) == 0x000000, "Member 'FEX359_LaserRainShotEffectTimeSet::M_fTime' has a wrong offset!");

// ScriptStruct TresGame.TresTarHandParam_e_ex701
// 0x114ACA90 (0x114ACA90 - 0x0000)
struct alignas(0x114ACA90) FTresTarHandParam_e_ex701 final
{
public:
	TSubclassOf<class UTresAttack_e_ex701_SpawnTarHandBase> TarHandActionClass;                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnablelifeTimeOverride : 1;                       // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideLifeTime;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTarHandParam_e_ex701) == 0x114ACA90, "Wrong alignment on FTresTarHandParam_e_ex701");
static_assert(sizeof(FTresTarHandParam_e_ex701) == 0x114ACA90, "Wrong size on FTresTarHandParam_e_ex701");
static_assert(offsetof(FTresTarHandParam_e_ex701, TarHandActionClass) == 0x000000, "Member 'FTresTarHandParam_e_ex701::TarHandActionClass' has a wrong offset!");
static_assert(offsetof(FTresTarHandParam_e_ex701, OverrideLifeTime) == 0x00000C, "Member 'FTresTarHandParam_e_ex701::OverrideLifeTime' has a wrong offset!");

// ScriptStruct TresGame.EX354_ClusterShotInfo
// 0x0038 (0x0038 - 0x0000)
struct FEX354_ClusterShotInfo final
{
public:
	int32                                         M_iMaxHitNum;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bMaxHitNum;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_iMaxGuardNum;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bMaxGuardNum;                                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bStartMoveAll;                                   // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fMinMoveWaitTime;                                // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxMoveWaitTime;                                // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMoveWaitTimeSingle;                             // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpreadAngle;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxMoveAngle;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_fMoveStraightOnTargetOut;                        // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bDebugDisp;                                      // 0x0025(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_TargetActor;                                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX354_ClusterShotInfo) == 0x000008, "Wrong alignment on FEX354_ClusterShotInfo");
static_assert(sizeof(FEX354_ClusterShotInfo) == 0x000038, "Wrong size on FEX354_ClusterShotInfo");
static_assert(offsetof(FEX354_ClusterShotInfo, M_iMaxHitNum) == 0x000000, "Member 'FEX354_ClusterShotInfo::M_iMaxHitNum' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_bMaxHitNum) == 0x000004, "Member 'FEX354_ClusterShotInfo::M_bMaxHitNum' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_iMaxGuardNum) == 0x000008, "Member 'FEX354_ClusterShotInfo::M_iMaxGuardNum' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_bMaxGuardNum) == 0x00000C, "Member 'FEX354_ClusterShotInfo::M_bMaxGuardNum' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_bStartMoveAll) == 0x00000D, "Member 'FEX354_ClusterShotInfo::M_bStartMoveAll' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_fMinMoveWaitTime) == 0x000010, "Member 'FEX354_ClusterShotInfo::M_fMinMoveWaitTime' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_fMaxMoveWaitTime) == 0x000014, "Member 'FEX354_ClusterShotInfo::M_fMaxMoveWaitTime' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_fMoveWaitTimeSingle) == 0x000018, "Member 'FEX354_ClusterShotInfo::M_fMoveWaitTimeSingle' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_fSpreadAngle) == 0x00001C, "Member 'FEX354_ClusterShotInfo::M_fSpreadAngle' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_fMaxMoveAngle) == 0x000020, "Member 'FEX354_ClusterShotInfo::M_fMaxMoveAngle' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_fMoveStraightOnTargetOut) == 0x000024, "Member 'FEX354_ClusterShotInfo::M_fMoveStraightOnTargetOut' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_bDebugDisp) == 0x000025, "Member 'FEX354_ClusterShotInfo::M_bDebugDisp' has a wrong offset!");
static_assert(offsetof(FEX354_ClusterShotInfo, M_TargetActor) == 0x000028, "Member 'FEX354_ClusterShotInfo::M_TargetActor' has a wrong offset!");

// ScriptStruct TresGame.EX734_FallInfo
// 0x11492490 (0x11492490 - 0x0000)
struct alignas(0x11492490) FEX734_FallInfo final
{
public:
	float                                         M_fWorldGroundHeight;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fFallBeginRelativeHeight;                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fFallEndRelativeHeight;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fFallTime;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x28];                                      // 0x0010(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX734_FallInfo) == 0x11492490, "Wrong alignment on FEX734_FallInfo");
static_assert(sizeof(FEX734_FallInfo) == 0x11492490, "Wrong size on FEX734_FallInfo");
static_assert(offsetof(FEX734_FallInfo, M_fWorldGroundHeight) == 0x000000, "Member 'FEX734_FallInfo::M_fWorldGroundHeight' has a wrong offset!");
static_assert(offsetof(FEX734_FallInfo, M_fFallBeginRelativeHeight) == 0x000004, "Member 'FEX734_FallInfo::M_fFallBeginRelativeHeight' has a wrong offset!");
static_assert(offsetof(FEX734_FallInfo, M_fFallEndRelativeHeight) == 0x000008, "Member 'FEX734_FallInfo::M_fFallEndRelativeHeight' has a wrong offset!");
static_assert(offsetof(FEX734_FallInfo, M_fFallTime) == 0x00000C, "Member 'FEX734_FallInfo::M_fFallTime' has a wrong offset!");

// ScriptStruct TresGame.TresEwOpacityData
// 0x115125C0 (0x115125C0 - 0x0000)
struct alignas(0x115125C0) FTresEwOpacityData final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Opacity;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEwOpacityData) == 0x115125C0, "Wrong alignment on FTresEwOpacityData");
static_assert(sizeof(FTresEwOpacityData) == 0x115125C0, "Wrong size on FTresEwOpacityData");
static_assert(offsetof(FTresEwOpacityData, Num) == 0x000000, "Member 'FTresEwOpacityData::Num' has a wrong offset!");
static_assert(offsetof(FTresEwOpacityData, Opacity) == 0x000004, "Member 'FTresEwOpacityData::Opacity' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405AvatarActionParam
// 0x11493480 (0x11493480 - 0x0000)
struct alignas(0x11493480) FTresE_dw405AvatarActionParam final
{
public:
	float                                         AppearDelayTime;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearOffsetAngle;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      AnimData;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundData;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearDistance;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearHeight;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAnimPlayFallEnd : 1;                              // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeed;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableVigilanceMove : 1;                          // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MoveAngles;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETresE_dw405VigilanceMoveVec                  VigilanceMoveVec;                                  // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableSettingDisappearTime : 1;                   // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisappearTime;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0xC];                                       // 0x004C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_dw405AvatarActionParam) == 0x11493480, "Wrong alignment on FTresE_dw405AvatarActionParam");
static_assert(sizeof(FTresE_dw405AvatarActionParam) == 0x11493480, "Wrong size on FTresE_dw405AvatarActionParam");
static_assert(offsetof(FTresE_dw405AvatarActionParam, AppearDelayTime) == 0x000000, "Member 'FTresE_dw405AvatarActionParam::AppearDelayTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405AvatarActionParam, AppearOffsetAngle) == 0x000004, "Member 'FTresE_dw405AvatarActionParam::AppearOffsetAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405AvatarActionParam, AnimData) == 0x000008, "Member 'FTresE_dw405AvatarActionParam::AnimData' has a wrong offset!");
static_assert(offsetof(FTresE_dw405AvatarActionParam, SoundData) == 0x000010, "Member 'FTresE_dw405AvatarActionParam::SoundData' has a wrong offset!");
static_assert(offsetof(FTresE_dw405AvatarActionParam, AppearDistance) == 0x000018, "Member 'FTresE_dw405AvatarActionParam::AppearDistance' has a wrong offset!");
static_assert(offsetof(FTresE_dw405AvatarActionParam, AppearHeight) == 0x00001C, "Member 'FTresE_dw405AvatarActionParam::AppearHeight' has a wrong offset!");
static_assert(offsetof(FTresE_dw405AvatarActionParam, MoveSpeed) == 0x000024, "Member 'FTresE_dw405AvatarActionParam::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresE_dw405AvatarActionParam, MoveAngles) == 0x000030, "Member 'FTresE_dw405AvatarActionParam::MoveAngles' has a wrong offset!");
static_assert(offsetof(FTresE_dw405AvatarActionParam, VigilanceMoveVec) == 0x000040, "Member 'FTresE_dw405AvatarActionParam::VigilanceMoveVec' has a wrong offset!");
static_assert(offsetof(FTresE_dw405AvatarActionParam, DisappearTime) == 0x000048, "Member 'FTresE_dw405AvatarActionParam::DisappearTime' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405CounterAttackParam
// 0x11492A00 (0x11492A00 - 0x0000)
struct alignas(0x11492A00) FTresE_dw405CounterAttackParam final
{
public:
	TSubclassOf<class UTresAttackDefinitionBase>  AttackDefinitionClass;                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_dw405CounterAttackParam) == 0x11492A00, "Wrong alignment on FTresE_dw405CounterAttackParam");
static_assert(sizeof(FTresE_dw405CounterAttackParam) == 0x11492A00, "Wrong size on FTresE_dw405CounterAttackParam");
static_assert(offsetof(FTresE_dw405CounterAttackParam, AttackDefinitionClass) == 0x000000, "Member 'FTresE_dw405CounterAttackParam::AttackDefinitionClass' has a wrong offset!");
static_assert(offsetof(FTresE_dw405CounterAttackParam, ActionIndex) == 0x000008, "Member 'FTresE_dw405CounterAttackParam::ActionIndex' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405RespawnParam
// 0x11493480 (0x11493480 - 0x0000)
struct FTresE_dw405RespawnParam final
{
public:
	uint8                                         bEnableRespawn : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearMaxAngle;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresE_dw405AvatarActionParam          ActionParam;                                       // 0x0008(0x11493480)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DisappearRange;                                    // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearDelayTime;                                // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveHomingAngle;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_dw405RespawnParam) == 0x11493480, "Wrong alignment on FTresE_dw405RespawnParam");
static_assert(sizeof(FTresE_dw405RespawnParam) == 0x11493480, "Wrong size on FTresE_dw405RespawnParam");
static_assert(offsetof(FTresE_dw405RespawnParam, AppearMaxAngle) == 0x000004, "Member 'FTresE_dw405RespawnParam::AppearMaxAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405RespawnParam, ActionParam) == 0x000008, "Member 'FTresE_dw405RespawnParam::ActionParam' has a wrong offset!");
static_assert(offsetof(FTresE_dw405RespawnParam, DisappearRange) == 0x000060, "Member 'FTresE_dw405RespawnParam::DisappearRange' has a wrong offset!");
static_assert(offsetof(FTresE_dw405RespawnParam, DisappearDelayTime) == 0x000064, "Member 'FTresE_dw405RespawnParam::DisappearDelayTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405RespawnParam, MoveHomingAngle) == 0x000068, "Member 'FTresE_dw405RespawnParam::MoveHomingAngle' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405ActionParam
// 0x11493180 (0x11493180 - 0x0000)
struct FTresE_dw405ActionParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoLockOnRange;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableInvincible : 1;                             // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GameLevelLimitTime[0x4];                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitOverDisappearRandomTIme;                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableAppear : 1;                                 // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndActionOffsetTime;                               // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        StartAnimData;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      AnimData;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundData;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearDistance;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableFixingAppearAngle : 1;                      // 0x004C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixingAppearAngle;                                 // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearMaxAngle;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearHeight;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAnimPlayFallEnd : 1;                              // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeed;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableVigilanceMove : 1;                          // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MoveAngles;                                        // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         MoveHomingAngle;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresE_dw405VigilanceMoveVec                  VigilanceMoveVec;                                  // 0x007C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableSettingDisappearTime : 1;                   // 0x0080(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisappearTime;                                     // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableSettingDisappearRange : 1;                  // 0x0088(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisappearRange;                                    // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearDelayTime;                                // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableSettingAvatarDisappearRange : 1;            // 0x0094(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AvatarDisappearRange;                              // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresE_dw405AvatarActionParam>  AvatarAppearParam;                                 // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TurnToTargetAngle;                                 // 0x00B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnToTargetHeight;                                // 0x00B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnToTargetDistance;                              // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresE_dw405RespawnParam               RespawnParam;                                      // 0x00C0(0x11493480)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SoundPlayStartTime;                                // 0x0130(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresE_dw405SoundInfo                  SoundInfo;                                         // 0x0138(0x11492C80)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresE_dw405CounterAttackParam> CounterAttackParam;                                // 0x0150(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         CounterRate;                                       // 0x0160(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_dw405ActionParam) == 0x11493180, "Wrong alignment on FTresE_dw405ActionParam");
static_assert(sizeof(FTresE_dw405ActionParam) == 0x11493180, "Wrong size on FTresE_dw405ActionParam");
static_assert(offsetof(FTresE_dw405ActionParam, Name) == 0x000000, "Member 'FTresE_dw405ActionParam::Name' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, AutoLockOnRange) == 0x000008, "Member 'FTresE_dw405ActionParam::AutoLockOnRange' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, GameLevelLimitTime) == 0x000010, "Member 'FTresE_dw405ActionParam::GameLevelLimitTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, LimitOverDisappearRandomTIme) == 0x000020, "Member 'FTresE_dw405ActionParam::LimitOverDisappearRandomTIme' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, EndActionOffsetTime) == 0x000028, "Member 'FTresE_dw405ActionParam::EndActionOffsetTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, StartAnimData) == 0x000030, "Member 'FTresE_dw405ActionParam::StartAnimData' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, AnimData) == 0x000038, "Member 'FTresE_dw405ActionParam::AnimData' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, SoundData) == 0x000040, "Member 'FTresE_dw405ActionParam::SoundData' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, AppearDistance) == 0x000048, "Member 'FTresE_dw405ActionParam::AppearDistance' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, FixingAppearAngle) == 0x000050, "Member 'FTresE_dw405ActionParam::FixingAppearAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, AppearMaxAngle) == 0x000054, "Member 'FTresE_dw405ActionParam::AppearMaxAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, AppearHeight) == 0x000058, "Member 'FTresE_dw405ActionParam::AppearHeight' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, MoveSpeed) == 0x000060, "Member 'FTresE_dw405ActionParam::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, MoveAngles) == 0x000068, "Member 'FTresE_dw405ActionParam::MoveAngles' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, MoveHomingAngle) == 0x000078, "Member 'FTresE_dw405ActionParam::MoveHomingAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, VigilanceMoveVec) == 0x00007C, "Member 'FTresE_dw405ActionParam::VigilanceMoveVec' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, DisappearTime) == 0x000084, "Member 'FTresE_dw405ActionParam::DisappearTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, DisappearRange) == 0x00008C, "Member 'FTresE_dw405ActionParam::DisappearRange' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, DisappearDelayTime) == 0x000090, "Member 'FTresE_dw405ActionParam::DisappearDelayTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, AvatarDisappearRange) == 0x000098, "Member 'FTresE_dw405ActionParam::AvatarDisappearRange' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, AvatarAppearParam) == 0x0000A0, "Member 'FTresE_dw405ActionParam::AvatarAppearParam' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, TurnToTargetAngle) == 0x0000B0, "Member 'FTresE_dw405ActionParam::TurnToTargetAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, TurnToTargetHeight) == 0x0000B4, "Member 'FTresE_dw405ActionParam::TurnToTargetHeight' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, TurnToTargetDistance) == 0x0000B8, "Member 'FTresE_dw405ActionParam::TurnToTargetDistance' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, RespawnParam) == 0x0000C0, "Member 'FTresE_dw405ActionParam::RespawnParam' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, SoundPlayStartTime) == 0x000130, "Member 'FTresE_dw405ActionParam::SoundPlayStartTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, SoundInfo) == 0x000138, "Member 'FTresE_dw405ActionParam::SoundInfo' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, CounterAttackParam) == 0x000150, "Member 'FTresE_dw405ActionParam::CounterAttackParam' has a wrong offset!");
static_assert(offsetof(FTresE_dw405ActionParam, CounterRate) == 0x000160, "Member 'FTresE_dw405ActionParam::CounterRate' has a wrong offset!");

// ScriptStruct TresGame.PoleFireGroundStabEffectParam_e_ex043
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FPoleFireGroundStabEffectParam_e_ex043 final
{
public:
	int32                                         M_iNotifyParam;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_GroundStabEffectParticleSystem;                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fWorldGroundHeight;                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fGroundStabEffectSpawnHeight;                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_GroundStabEffectLocationOffset;                  // 0x0018(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_GroundStabEffectRotationOffset;                  // 0x0024(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bGroundStabEffectLoopSpawn;                      // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fGroundStabEffectSpawnInterval;                  // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATresCharPawnBase*                      MyCharPawn;                                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoleFireGroundStabEffectParam_e_ex043) == 0x112E9AF0, "Wrong alignment on FPoleFireGroundStabEffectParam_e_ex043");
static_assert(sizeof(FPoleFireGroundStabEffectParam_e_ex043) == 0x112E9AF0, "Wrong size on FPoleFireGroundStabEffectParam_e_ex043");
static_assert(offsetof(FPoleFireGroundStabEffectParam_e_ex043, M_iNotifyParam) == 0x000000, "Member 'FPoleFireGroundStabEffectParam_e_ex043::M_iNotifyParam' has a wrong offset!");
static_assert(offsetof(FPoleFireGroundStabEffectParam_e_ex043, M_GroundStabEffectParticleSystem) == 0x000008, "Member 'FPoleFireGroundStabEffectParam_e_ex043::M_GroundStabEffectParticleSystem' has a wrong offset!");
static_assert(offsetof(FPoleFireGroundStabEffectParam_e_ex043, M_fWorldGroundHeight) == 0x000010, "Member 'FPoleFireGroundStabEffectParam_e_ex043::M_fWorldGroundHeight' has a wrong offset!");
static_assert(offsetof(FPoleFireGroundStabEffectParam_e_ex043, M_fGroundStabEffectSpawnHeight) == 0x000014, "Member 'FPoleFireGroundStabEffectParam_e_ex043::M_fGroundStabEffectSpawnHeight' has a wrong offset!");
static_assert(offsetof(FPoleFireGroundStabEffectParam_e_ex043, M_GroundStabEffectLocationOffset) == 0x000018, "Member 'FPoleFireGroundStabEffectParam_e_ex043::M_GroundStabEffectLocationOffset' has a wrong offset!");
static_assert(offsetof(FPoleFireGroundStabEffectParam_e_ex043, M_GroundStabEffectRotationOffset) == 0x000024, "Member 'FPoleFireGroundStabEffectParam_e_ex043::M_GroundStabEffectRotationOffset' has a wrong offset!");
static_assert(offsetof(FPoleFireGroundStabEffectParam_e_ex043, M_bGroundStabEffectLoopSpawn) == 0x000030, "Member 'FPoleFireGroundStabEffectParam_e_ex043::M_bGroundStabEffectLoopSpawn' has a wrong offset!");
static_assert(offsetof(FPoleFireGroundStabEffectParam_e_ex043, M_fGroundStabEffectSpawnInterval) == 0x000034, "Member 'FPoleFireGroundStabEffectParam_e_ex043::M_fGroundStabEffectSpawnInterval' has a wrong offset!");
static_assert(offsetof(FPoleFireGroundStabEffectParam_e_ex043, MyCharPawn) == 0x000038, "Member 'FPoleFireGroundStabEffectParam_e_ex043::MyCharPawn' has a wrong offset!");

// ScriptStruct TresGame.TresHologramLocationResetInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresHologramLocationResetInfo final
{
public:
	class ATresPhotoHologramActor*                M_pTargetActor;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHologramLocationResetInfo) == 0x000008, "Wrong alignment on FTresHologramLocationResetInfo");
static_assert(sizeof(FTresHologramLocationResetInfo) == 0x000018, "Wrong size on FTresHologramLocationResetInfo");
static_assert(offsetof(FTresHologramLocationResetInfo, M_pTargetActor) == 0x000000, "Member 'FTresHologramLocationResetInfo::M_pTargetActor' has a wrong offset!");

// ScriptStruct TresGame.TresRemyCuttingFoodParam
// 0x0040 (0x0040 - 0x0000)
struct FTresRemyCuttingFoodParam final
{
public:
	ERemyCuttingFoodType                          FoodType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresRemyPawnBase>          FoodPawn;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AStaticMeshActor>           FoodMassStaticMeshActor;                           // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoodSliceBending;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoodSliceJumpWaitTime;                             // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoodSliceJumpWaitTimeLagRangeStart;                // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoodSliceJumpWaitTimeLagRangeEnd;                  // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoodSliceJumpSpeedCoefficient;                     // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        FoodClusterParticle;                               // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           FoodClusterParticleCurveVector;                    // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRemyCuttingFoodParam) == 0x000008, "Wrong alignment on FTresRemyCuttingFoodParam");
static_assert(sizeof(FTresRemyCuttingFoodParam) == 0x000040, "Wrong size on FTresRemyCuttingFoodParam");
static_assert(offsetof(FTresRemyCuttingFoodParam, FoodType) == 0x000000, "Member 'FTresRemyCuttingFoodParam::FoodType' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingFoodParam, FoodPawn) == 0x000008, "Member 'FTresRemyCuttingFoodParam::FoodPawn' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingFoodParam, FoodMassStaticMeshActor) == 0x000010, "Member 'FTresRemyCuttingFoodParam::FoodMassStaticMeshActor' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingFoodParam, FoodSliceBending) == 0x000018, "Member 'FTresRemyCuttingFoodParam::FoodSliceBending' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingFoodParam, FoodSliceJumpWaitTime) == 0x00001C, "Member 'FTresRemyCuttingFoodParam::FoodSliceJumpWaitTime' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingFoodParam, FoodSliceJumpWaitTimeLagRangeStart) == 0x000020, "Member 'FTresRemyCuttingFoodParam::FoodSliceJumpWaitTimeLagRangeStart' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingFoodParam, FoodSliceJumpWaitTimeLagRangeEnd) == 0x000024, "Member 'FTresRemyCuttingFoodParam::FoodSliceJumpWaitTimeLagRangeEnd' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingFoodParam, FoodSliceJumpSpeedCoefficient) == 0x000028, "Member 'FTresRemyCuttingFoodParam::FoodSliceJumpSpeedCoefficient' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingFoodParam, FoodClusterParticle) == 0x000030, "Member 'FTresRemyCuttingFoodParam::FoodClusterParticle' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingFoodParam, FoodClusterParticleCurveVector) == 0x000038, "Member 'FTresRemyCuttingFoodParam::FoodClusterParticleCurveVector' has a wrong offset!");

// ScriptStruct TresGame.TresRemyRecipeDataTable
// 0xE1D5F98 (0x1F5E9018 - 0x11413080)
struct alignas(0x1F5E9018) FTresRemyRecipeDataTable final : public FTableRowBase
{
public:
	ERemyDishCategory                             Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemyMenuType                                 MenuType;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemyRecipeType                               RecipeType;                                        // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RecipeNameTextID;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecipeHelpTextID;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemyCookingGameType                          GameType;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemyDishLevel                                DishLevel;                                         // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PawnDataID;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                IconAsset;                                         // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFood                              CommonItemId;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFood                              GoodItemId;                                        // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETresItemDefFoodstuff, int32>            FoodList;                                          // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRemyRecipeDataTable) == 0x1F5E9018, "Wrong alignment on FTresRemyRecipeDataTable");
static_assert(sizeof(FTresRemyRecipeDataTable) == 0x1F5E9018, "Wrong size on FTresRemyRecipeDataTable");
static_assert(offsetof(FTresRemyRecipeDataTable, Category) == 0x000008, "Member 'FTresRemyRecipeDataTable::Category' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, MenuType) == 0x000009, "Member 'FTresRemyRecipeDataTable::MenuType' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, RecipeType) == 0x00000A, "Member 'FTresRemyRecipeDataTable::RecipeType' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, RecipeNameTextID) == 0x000010, "Member 'FTresRemyRecipeDataTable::RecipeNameTextID' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, RecipeHelpTextID) == 0x000020, "Member 'FTresRemyRecipeDataTable::RecipeHelpTextID' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, GameType) == 0x000030, "Member 'FTresRemyRecipeDataTable::GameType' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, DishLevel) == 0x000031, "Member 'FTresRemyRecipeDataTable::DishLevel' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, PawnDataID) == 0x000038, "Member 'FTresRemyRecipeDataTable::PawnDataID' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, IconAsset) == 0x000040, "Member 'FTresRemyRecipeDataTable::IconAsset' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, CommonItemId) == 0x000060, "Member 'FTresRemyRecipeDataTable::CommonItemId' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, GoodItemId) == 0x000061, "Member 'FTresRemyRecipeDataTable::GoodItemId' has a wrong offset!");
static_assert(offsetof(FTresRemyRecipeDataTable, FoodList) == 0x000068, "Member 'FTresRemyRecipeDataTable::FoodList' has a wrong offset!");

// ScriptStruct TresGame.TresAreaNameDataTable
// 0x8F280 (0x114A2300 - 0x11413080)
struct alignas(0x114A2300) FTresAreaNameDataTable final : public FTableRowBase
{
public:
	class FString                                 AreaNameKey;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubAreaNameKey;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapNameKey;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NavMapNameKey;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAreaNameDataTable) == 0x114A2300, "Wrong alignment on FTresAreaNameDataTable");
static_assert(sizeof(FTresAreaNameDataTable) == 0x114A2300, "Wrong size on FTresAreaNameDataTable");
static_assert(offsetof(FTresAreaNameDataTable, AreaNameKey) == 0x000008, "Member 'FTresAreaNameDataTable::AreaNameKey' has a wrong offset!");
static_assert(offsetof(FTresAreaNameDataTable, SubAreaNameKey) == 0x000018, "Member 'FTresAreaNameDataTable::SubAreaNameKey' has a wrong offset!");
static_assert(offsetof(FTresAreaNameDataTable, MapNameKey) == 0x000028, "Member 'FTresAreaNameDataTable::MapNameKey' has a wrong offset!");
static_assert(offsetof(FTresAreaNameDataTable, NavMapNameKey) == 0x000030, "Member 'FTresAreaNameDataTable::NavMapNameKey' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleFirstPlayReward
// 0x11595800 (0x11595800 - 0x0000)
struct alignas(0x11595800) FTresWinniePuzzleFirstPlayReward final
{
public:
	ETresItemDefFoodstuff                         FoodStuff;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EarnNum;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleFirstPlayReward) == 0x11595800, "Wrong alignment on FTresWinniePuzzleFirstPlayReward");
static_assert(sizeof(FTresWinniePuzzleFirstPlayReward) == 0x11595800, "Wrong size on FTresWinniePuzzleFirstPlayReward");
static_assert(offsetof(FTresWinniePuzzleFirstPlayReward, FoodStuff) == 0x000000, "Member 'FTresWinniePuzzleFirstPlayReward::FoodStuff' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleFirstPlayReward, EarnNum) == 0x000004, "Member 'FTresWinniePuzzleFirstPlayReward::EarnNum' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_dw401_AirBlowParam
// 0x0028 (0x0028 - 0x0000)
struct FTresEnemy_e_dw401_AirBlowParam final
{
public:
	class ATresCharPawnBase*                      M_pTgtPawn;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_dw401_AirBlowParam) == 0x000008, "Wrong alignment on FTresEnemy_e_dw401_AirBlowParam");
static_assert(sizeof(FTresEnemy_e_dw401_AirBlowParam) == 0x000028, "Wrong size on FTresEnemy_e_dw401_AirBlowParam");
static_assert(offsetof(FTresEnemy_e_dw401_AirBlowParam, M_pTgtPawn) == 0x000000, "Member 'FTresEnemy_e_dw401_AirBlowParam::M_pTgtPawn' has a wrong offset!");

// ScriptStruct TresGame.TresEquipValiableSet
// 0x0078 (0x0078 - 0x0000)
struct FTresEquipValiableSet final
{
public:
	ETresWeaponGrowLvl                            M_GrowLevel;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresEquipmentAssetUnit>        M_Equips;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresEquipmentAssetUnit>        M_TransformSetData;                                // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETresCharWearForm                             M_OwnerWearForm;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTresAnimSet*>                   M_ReplaceAnimSets;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTresPlayerMagicSet*                    M_ReplaceMagicSet;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresProjectileSet*                     M_ReplaceProjectileSet;                            // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_ReplaceIKOffset;                                 // 0x0050(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresEquipmentAccompanyPawnAssetUnit> M_AccompanyPawnAssets;                             // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTresUIDataAsset*                       M_UIDataAsset;                                     // 0x0070(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEquipValiableSet) == 0x000008, "Wrong alignment on FTresEquipValiableSet");
static_assert(sizeof(FTresEquipValiableSet) == 0x000078, "Wrong size on FTresEquipValiableSet");
static_assert(offsetof(FTresEquipValiableSet, M_GrowLevel) == 0x000000, "Member 'FTresEquipValiableSet::M_GrowLevel' has a wrong offset!");
static_assert(offsetof(FTresEquipValiableSet, M_Equips) == 0x000008, "Member 'FTresEquipValiableSet::M_Equips' has a wrong offset!");
static_assert(offsetof(FTresEquipValiableSet, M_TransformSetData) == 0x000018, "Member 'FTresEquipValiableSet::M_TransformSetData' has a wrong offset!");
static_assert(offsetof(FTresEquipValiableSet, M_OwnerWearForm) == 0x000028, "Member 'FTresEquipValiableSet::M_OwnerWearForm' has a wrong offset!");
static_assert(offsetof(FTresEquipValiableSet, M_ReplaceAnimSets) == 0x000030, "Member 'FTresEquipValiableSet::M_ReplaceAnimSets' has a wrong offset!");
static_assert(offsetof(FTresEquipValiableSet, M_ReplaceMagicSet) == 0x000040, "Member 'FTresEquipValiableSet::M_ReplaceMagicSet' has a wrong offset!");
static_assert(offsetof(FTresEquipValiableSet, M_ReplaceProjectileSet) == 0x000048, "Member 'FTresEquipValiableSet::M_ReplaceProjectileSet' has a wrong offset!");
static_assert(offsetof(FTresEquipValiableSet, M_ReplaceIKOffset) == 0x000050, "Member 'FTresEquipValiableSet::M_ReplaceIKOffset' has a wrong offset!");
static_assert(offsetof(FTresEquipValiableSet, M_AccompanyPawnAssets) == 0x000060, "Member 'FTresEquipValiableSet::M_AccompanyPawnAssets' has a wrong offset!");
static_assert(offsetof(FTresEquipValiableSet, M_UIDataAsset) == 0x000070, "Member 'FTresEquipValiableSet::M_UIDataAsset' has a wrong offset!");

// ScriptStruct TresGame.TresEquipValiableSetList
// 0x0010 (0x0010 - 0x0000)
struct FTresEquipValiableSetList final
{
public:
	TArray<struct FTresEquipValiableSet>          M_List;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTresEquipValiableSetList) == 0x000008, "Wrong alignment on FTresEquipValiableSetList");
static_assert(sizeof(FTresEquipValiableSetList) == 0x000010, "Wrong size on FTresEquipValiableSetList");
static_assert(offsetof(FTresEquipValiableSetList, M_List) == 0x000000, "Member 'FTresEquipValiableSetList::M_List' has a wrong offset!");

// ScriptStruct TresGame.EX354_ArtemaWarpShotGrid
// 0x114AE240 (0x114AE240 - 0x0000)
struct alignas(0x114AE240) FEX354_ArtemaWarpShotGrid final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX354_ArtemaWarpShotGrid) == 0x114AE240, "Wrong alignment on FEX354_ArtemaWarpShotGrid");
static_assert(sizeof(FEX354_ArtemaWarpShotGrid) == 0x114AE240, "Wrong size on FEX354_ArtemaWarpShotGrid");

// ScriptStruct TresGame.TresEnemyHideAndSeekTurnParam_e_ex356
// 0x114952C0 (0x114952C0 - 0x0000)
struct alignas(0x114952C0) FTresEnemyHideAndSeekTurnParam_e_ex356 final
{
public:
	ETresEnemyHideAndSeekLocation_e_ex356         TurnLocationType;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialTurnSpeed;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnDecelerationStartDelayTime;                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnDeceleration;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTurnSpeed;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllPlaneCardDestroySubTurnSpeed;                   // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyHideAndSeekTurnParam_e_ex356) == 0x114952C0, "Wrong alignment on FTresEnemyHideAndSeekTurnParam_e_ex356");
static_assert(sizeof(FTresEnemyHideAndSeekTurnParam_e_ex356) == 0x114952C0, "Wrong size on FTresEnemyHideAndSeekTurnParam_e_ex356");
static_assert(offsetof(FTresEnemyHideAndSeekTurnParam_e_ex356, TurnLocationType) == 0x000000, "Member 'FTresEnemyHideAndSeekTurnParam_e_ex356::TurnLocationType' has a wrong offset!");
static_assert(offsetof(FTresEnemyHideAndSeekTurnParam_e_ex356, InitialTurnSpeed) == 0x000004, "Member 'FTresEnemyHideAndSeekTurnParam_e_ex356::InitialTurnSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyHideAndSeekTurnParam_e_ex356, TurnDecelerationStartDelayTime) == 0x000008, "Member 'FTresEnemyHideAndSeekTurnParam_e_ex356::TurnDecelerationStartDelayTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyHideAndSeekTurnParam_e_ex356, TurnDeceleration) == 0x00000C, "Member 'FTresEnemyHideAndSeekTurnParam_e_ex356::TurnDeceleration' has a wrong offset!");
static_assert(offsetof(FTresEnemyHideAndSeekTurnParam_e_ex356, MinTurnSpeed) == 0x000010, "Member 'FTresEnemyHideAndSeekTurnParam_e_ex356::MinTurnSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyHideAndSeekTurnParam_e_ex356, AllPlaneCardDestroySubTurnSpeed) == 0x000014, "Member 'FTresEnemyHideAndSeekTurnParam_e_ex356::AllPlaneCardDestroySubTurnSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresNpcAICombiData
// 0x11553A10 (0x11553A10 - 0x0000)
struct alignas(0x11553A10) FTresNpcAICombiData final
{
public:
	ETresFNpcAICombiID                            M_CombiID;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresChrUniqueID                              M_MainChrUID;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresChrUniqueID                              M_PartnerChrUID;                                   // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bUseMP;                                          // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_StandbyLimitTime;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ExecLength_PtoM;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresNpcAICombiData) == 0x11553A10, "Wrong alignment on FTresNpcAICombiData");
static_assert(sizeof(FTresNpcAICombiData) == 0x11553A10, "Wrong size on FTresNpcAICombiData");
static_assert(offsetof(FTresNpcAICombiData, M_CombiID) == 0x000000, "Member 'FTresNpcAICombiData::M_CombiID' has a wrong offset!");
static_assert(offsetof(FTresNpcAICombiData, M_MainChrUID) == 0x000001, "Member 'FTresNpcAICombiData::M_MainChrUID' has a wrong offset!");
static_assert(offsetof(FTresNpcAICombiData, M_PartnerChrUID) == 0x000002, "Member 'FTresNpcAICombiData::M_PartnerChrUID' has a wrong offset!");
static_assert(offsetof(FTresNpcAICombiData, M_bUseMP) == 0x000003, "Member 'FTresNpcAICombiData::M_bUseMP' has a wrong offset!");
static_assert(offsetof(FTresNpcAICombiData, M_StandbyLimitTime) == 0x000004, "Member 'FTresNpcAICombiData::M_StandbyLimitTime' has a wrong offset!");
static_assert(offsetof(FTresNpcAICombiData, M_ExecLength_PtoM) == 0x000008, "Member 'FTresNpcAICombiData::M_ExecLength_PtoM' has a wrong offset!");

// ScriptStruct TresGame.WolfSpawnInfo_e_ex731
// 0x114956E0 (0x114956E0 - 0x0000)
struct alignas(0x114956E0) FWolfSpawnInfo_e_ex731 final
{
public:
	int32                                         M_NotifyParam;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_BoneName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_SpawnRot;                                        // 0x0010(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bSpawnOnBoneRot;                                 // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fAppearMoveVelocity;                             // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAppearMoveDistance;                             // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWolfSpawnInfo_e_ex731) == 0x114956E0, "Wrong alignment on FWolfSpawnInfo_e_ex731");
static_assert(sizeof(FWolfSpawnInfo_e_ex731) == 0x114956E0, "Wrong size on FWolfSpawnInfo_e_ex731");
static_assert(offsetof(FWolfSpawnInfo_e_ex731, M_NotifyParam) == 0x000000, "Member 'FWolfSpawnInfo_e_ex731::M_NotifyParam' has a wrong offset!");
static_assert(offsetof(FWolfSpawnInfo_e_ex731, M_BoneName) == 0x000008, "Member 'FWolfSpawnInfo_e_ex731::M_BoneName' has a wrong offset!");
static_assert(offsetof(FWolfSpawnInfo_e_ex731, M_SpawnRot) == 0x000010, "Member 'FWolfSpawnInfo_e_ex731::M_SpawnRot' has a wrong offset!");
static_assert(offsetof(FWolfSpawnInfo_e_ex731, M_bSpawnOnBoneRot) == 0x00001C, "Member 'FWolfSpawnInfo_e_ex731::M_bSpawnOnBoneRot' has a wrong offset!");
static_assert(offsetof(FWolfSpawnInfo_e_ex731, M_fAppearMoveVelocity) == 0x000020, "Member 'FWolfSpawnInfo_e_ex731::M_fAppearMoveVelocity' has a wrong offset!");
static_assert(offsetof(FWolfSpawnInfo_e_ex731, M_fAppearMoveDistance) == 0x000024, "Member 'FWolfSpawnInfo_e_ex731::M_fAppearMoveDistance' has a wrong offset!");

// ScriptStruct TresGame.WolfSpawnInfo_e_ex734
// 0x11495B10 (0x11495B10 - 0x0000)
struct alignas(0x11495B10) FWolfSpawnInfo_e_ex734 final
{
public:
	float                                         M_fAppearMoveVelocity;                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAppearRadius;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAppearMoveGoalHeight_Min;                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAppearMoveGoalHeight_Max;                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWolfSpawnInfo_e_ex734) == 0x11495B10, "Wrong alignment on FWolfSpawnInfo_e_ex734");
static_assert(sizeof(FWolfSpawnInfo_e_ex734) == 0x11495B10, "Wrong size on FWolfSpawnInfo_e_ex734");
static_assert(offsetof(FWolfSpawnInfo_e_ex734, M_fAppearMoveVelocity) == 0x000000, "Member 'FWolfSpawnInfo_e_ex734::M_fAppearMoveVelocity' has a wrong offset!");
static_assert(offsetof(FWolfSpawnInfo_e_ex734, M_fAppearRadius) == 0x000004, "Member 'FWolfSpawnInfo_e_ex734::M_fAppearRadius' has a wrong offset!");
static_assert(offsetof(FWolfSpawnInfo_e_ex734, M_fAppearMoveGoalHeight_Min) == 0x000008, "Member 'FWolfSpawnInfo_e_ex734::M_fAppearMoveGoalHeight_Min' has a wrong offset!");
static_assert(offsetof(FWolfSpawnInfo_e_ex734, M_fAppearMoveGoalHeight_Max) == 0x00000C, "Member 'FWolfSpawnInfo_e_ex734::M_fAppearMoveGoalHeight_Max' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyCardThrowCardMoveParam_e_ex356
// 0x001C (0x001C - 0x0000)
struct FTresEnemyCardThrowCardMoveParam_e_ex356 final
{
public:
	float                                         ThrowAngleYaw;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrowAnglePitch;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accel;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelStartDelayTime;                               // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableHomingPitch : 1;                             // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyCardThrowCardMoveParam_e_ex356) == 0x000004, "Wrong alignment on FTresEnemyCardThrowCardMoveParam_e_ex356");
static_assert(sizeof(FTresEnemyCardThrowCardMoveParam_e_ex356) == 0x00001C, "Wrong size on FTresEnemyCardThrowCardMoveParam_e_ex356");
static_assert(offsetof(FTresEnemyCardThrowCardMoveParam_e_ex356, ThrowAngleYaw) == 0x000000, "Member 'FTresEnemyCardThrowCardMoveParam_e_ex356::ThrowAngleYaw' has a wrong offset!");
static_assert(offsetof(FTresEnemyCardThrowCardMoveParam_e_ex356, ThrowAnglePitch) == 0x000004, "Member 'FTresEnemyCardThrowCardMoveParam_e_ex356::ThrowAnglePitch' has a wrong offset!");
static_assert(offsetof(FTresEnemyCardThrowCardMoveParam_e_ex356, InitialSpeed) == 0x000008, "Member 'FTresEnemyCardThrowCardMoveParam_e_ex356::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyCardThrowCardMoveParam_e_ex356, Accel) == 0x00000C, "Member 'FTresEnemyCardThrowCardMoveParam_e_ex356::Accel' has a wrong offset!");
static_assert(offsetof(FTresEnemyCardThrowCardMoveParam_e_ex356, MaxSpeed) == 0x000010, "Member 'FTresEnemyCardThrowCardMoveParam_e_ex356::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyCardThrowCardMoveParam_e_ex356, AccelStartDelayTime) == 0x000014, "Member 'FTresEnemyCardThrowCardMoveParam_e_ex356::AccelStartDelayTime' has a wrong offset!");

// ScriptStruct TresGame.TresGameplayTagDebugColor
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct FTresGameplayTagDebugColor final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGameplayTagDebugColor) == 0x112EAE80, "Wrong alignment on FTresGameplayTagDebugColor");
static_assert(sizeof(FTresGameplayTagDebugColor) == 0x112EAE80, "Wrong size on FTresGameplayTagDebugColor");
static_assert(offsetof(FTresGameplayTagDebugColor, GameplayTag) == 0x000000, "Member 'FTresGameplayTagDebugColor::GameplayTag' has a wrong offset!");
static_assert(offsetof(FTresGameplayTagDebugColor, Color) == 0x000008, "Member 'FTresGameplayTagDebugColor::Color' has a wrong offset!");

// ScriptStruct TresGame.ca405MovementParam
// 0x112F06E0 (0x112F06E0 - 0x0000)
struct FCa405MovementParam final
{
public:
	struct FVector                                M_Param_MaelstromBaseCenter;                       // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AngularAccel;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AngularBrake;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AngularFriction;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_AngularSpeedRange;                               // 0x0018(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCa405MovementParam) == 0x112F06E0, "Wrong alignment on FCa405MovementParam");
static_assert(sizeof(FCa405MovementParam) == 0x112F06E0, "Wrong size on FCa405MovementParam");
static_assert(offsetof(FCa405MovementParam, M_Param_MaelstromBaseCenter) == 0x000000, "Member 'FCa405MovementParam::M_Param_MaelstromBaseCenter' has a wrong offset!");
static_assert(offsetof(FCa405MovementParam, M_AngularAccel) == 0x00000C, "Member 'FCa405MovementParam::M_AngularAccel' has a wrong offset!");
static_assert(offsetof(FCa405MovementParam, M_AngularBrake) == 0x000010, "Member 'FCa405MovementParam::M_AngularBrake' has a wrong offset!");
static_assert(offsetof(FCa405MovementParam, M_AngularFriction) == 0x000014, "Member 'FCa405MovementParam::M_AngularFriction' has a wrong offset!");
static_assert(offsetof(FCa405MovementParam, M_AngularSpeedRange) == 0x000018, "Member 'FCa405MovementParam::M_AngularSpeedRange' has a wrong offset!");

// ScriptStruct TresGame.TresTeamDebugColor
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct FTresTeamDebugColor final
{
public:
	ETresTeam                                     TeamID;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTeamDebugColor) == 0x112EAE80, "Wrong alignment on FTresTeamDebugColor");
static_assert(sizeof(FTresTeamDebugColor) == 0x112EAE80, "Wrong size on FTresTeamDebugColor");
static_assert(offsetof(FTresTeamDebugColor, TeamID) == 0x000000, "Member 'FTresTeamDebugColor::TeamID' has a wrong offset!");
static_assert(offsetof(FTresTeamDebugColor, Color) == 0x000004, "Member 'FTresTeamDebugColor::Color' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyBigDealContractionSpeedParam_e_ex356
// 0x11502B00 (0x11502B00 - 0x0000)
struct alignas(0x11502B00) FTresEnemyBigDealContractionSpeedParam_e_ex356 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyBigDealContractionSpeedParam_e_ex356) == 0x11502B00, "Wrong alignment on FTresEnemyBigDealContractionSpeedParam_e_ex356");
static_assert(sizeof(FTresEnemyBigDealContractionSpeedParam_e_ex356) == 0x11502B00, "Wrong size on FTresEnemyBigDealContractionSpeedParam_e_ex356");
static_assert(offsetof(FTresEnemyBigDealContractionSpeedParam_e_ex356, Distance) == 0x000000, "Member 'FTresEnemyBigDealContractionSpeedParam_e_ex356::Distance' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealContractionSpeedParam_e_ex356, Speed) == 0x000004, "Member 'FTresEnemyBigDealContractionSpeedParam_e_ex356::Speed' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyBigDealParam_e_ex356
// 0x11502350 (0x11502350 - 0x0000)
struct alignas(0x11502350) FTresEnemyBigDealParam_e_ex356 final
{
public:
	class FName                                   FailedDamageAttackDataIDName;                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShuffleTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackBeforeDeceleration;                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndRotationAcceleration;                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndRotationAccelerationTime;                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndRotationMaxSpeed;                               // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstSecondNotCardDesignNum;                       // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresEnemyBigDealContractionSpeedParam_e_ex356> FirstSecondContractionSpeedParamList;              // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         FirstSecondEndRadius;                              // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstSecondCardRotationSpeed;                      // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstSecondCardShaffleIntervalTime;                // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastNotCardDesignNum;                              // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastContractionStartDelayTime;                     // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresEnemyBigDealContractionSpeedParam_e_ex356> LastContractionSpeedParamList;                     // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         LastEndRadius;                                     // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastCardRotationSpeed;                             // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastCardShaffleIntervalTime;                       // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 FirstSecondAttackStartRadiusList;                  // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 LastAttackStartRadiusList;                         // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         AttackTargetFollowSpeed;                           // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackStartDelayTime;                              // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterLocationCheckPlayerRadius;                   // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyBigDealParam_e_ex356) == 0x11502350, "Wrong alignment on FTresEnemyBigDealParam_e_ex356");
static_assert(sizeof(FTresEnemyBigDealParam_e_ex356) == 0x11502350, "Wrong size on FTresEnemyBigDealParam_e_ex356");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, FailedDamageAttackDataIDName) == 0x000000, "Member 'FTresEnemyBigDealParam_e_ex356::FailedDamageAttackDataIDName' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, ShuffleTime) == 0x000008, "Member 'FTresEnemyBigDealParam_e_ex356::ShuffleTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, AttackBeforeDeceleration) == 0x00000C, "Member 'FTresEnemyBigDealParam_e_ex356::AttackBeforeDeceleration' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, EndRotationAcceleration) == 0x000010, "Member 'FTresEnemyBigDealParam_e_ex356::EndRotationAcceleration' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, EndRotationAccelerationTime) == 0x000014, "Member 'FTresEnemyBigDealParam_e_ex356::EndRotationAccelerationTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, EndRotationMaxSpeed) == 0x000018, "Member 'FTresEnemyBigDealParam_e_ex356::EndRotationMaxSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, FirstSecondNotCardDesignNum) == 0x00001C, "Member 'FTresEnemyBigDealParam_e_ex356::FirstSecondNotCardDesignNum' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, FirstSecondContractionSpeedParamList) == 0x000020, "Member 'FTresEnemyBigDealParam_e_ex356::FirstSecondContractionSpeedParamList' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, FirstSecondEndRadius) == 0x000030, "Member 'FTresEnemyBigDealParam_e_ex356::FirstSecondEndRadius' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, FirstSecondCardRotationSpeed) == 0x000034, "Member 'FTresEnemyBigDealParam_e_ex356::FirstSecondCardRotationSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, FirstSecondCardShaffleIntervalTime) == 0x000038, "Member 'FTresEnemyBigDealParam_e_ex356::FirstSecondCardShaffleIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, LastNotCardDesignNum) == 0x00003C, "Member 'FTresEnemyBigDealParam_e_ex356::LastNotCardDesignNum' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, LastContractionStartDelayTime) == 0x000040, "Member 'FTresEnemyBigDealParam_e_ex356::LastContractionStartDelayTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, LastContractionSpeedParamList) == 0x000048, "Member 'FTresEnemyBigDealParam_e_ex356::LastContractionSpeedParamList' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, LastEndRadius) == 0x000058, "Member 'FTresEnemyBigDealParam_e_ex356::LastEndRadius' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, LastCardRotationSpeed) == 0x00005C, "Member 'FTresEnemyBigDealParam_e_ex356::LastCardRotationSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, LastCardShaffleIntervalTime) == 0x000060, "Member 'FTresEnemyBigDealParam_e_ex356::LastCardShaffleIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, FirstSecondAttackStartRadiusList) == 0x000068, "Member 'FTresEnemyBigDealParam_e_ex356::FirstSecondAttackStartRadiusList' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, LastAttackStartRadiusList) == 0x000078, "Member 'FTresEnemyBigDealParam_e_ex356::LastAttackStartRadiusList' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, AttackTargetFollowSpeed) == 0x000088, "Member 'FTresEnemyBigDealParam_e_ex356::AttackTargetFollowSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, AttackStartDelayTime) == 0x00008C, "Member 'FTresEnemyBigDealParam_e_ex356::AttackStartDelayTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParam_e_ex356, CenterLocationCheckPlayerRadius) == 0x000090, "Member 'FTresEnemyBigDealParam_e_ex356::CenterLocationCheckPlayerRadius' has a wrong offset!");

// ScriptStruct TresGame.TresWorldObjectPreviewTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresWorldObjectPreviewTable final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             M_nTransform_he;                                   // 0x0010(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_tt;                                   // 0x0040(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_ts;                                   // 0x0070(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_ra;                                   // 0x00A0(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_fz;                                   // 0x00D0(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_mi;                                   // 0x0100(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_bx;                                   // 0x0130(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_ca;                                   // 0x0160(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_kg;                                   // 0x0190(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_cs;                                   // 0x01C0(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_travel;                               // 0x01F0(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             M_nTransform_jump;                                 // 0x0220(0x112E9D50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWorldObjectPreviewTable) == 0x11413080, "Wrong alignment on FTresWorldObjectPreviewTable");
static_assert(sizeof(FTresWorldObjectPreviewTable) == 0x11413080, "Wrong size on FTresWorldObjectPreviewTable");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_he) == 0x000010, "Member 'FTresWorldObjectPreviewTable::M_nTransform_he' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_tt) == 0x000040, "Member 'FTresWorldObjectPreviewTable::M_nTransform_tt' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_ts) == 0x000070, "Member 'FTresWorldObjectPreviewTable::M_nTransform_ts' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_ra) == 0x0000A0, "Member 'FTresWorldObjectPreviewTable::M_nTransform_ra' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_fz) == 0x0000D0, "Member 'FTresWorldObjectPreviewTable::M_nTransform_fz' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_mi) == 0x000100, "Member 'FTresWorldObjectPreviewTable::M_nTransform_mi' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_bx) == 0x000130, "Member 'FTresWorldObjectPreviewTable::M_nTransform_bx' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_ca) == 0x000160, "Member 'FTresWorldObjectPreviewTable::M_nTransform_ca' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_kg) == 0x000190, "Member 'FTresWorldObjectPreviewTable::M_nTransform_kg' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_cs) == 0x0001C0, "Member 'FTresWorldObjectPreviewTable::M_nTransform_cs' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_travel) == 0x0001F0, "Member 'FTresWorldObjectPreviewTable::M_nTransform_travel' has a wrong offset!");
static_assert(offsetof(FTresWorldObjectPreviewTable, M_nTransform_jump) == 0x000220, "Member 'FTresWorldObjectPreviewTable::M_nTransform_jump' has a wrong offset!");

// ScriptStruct TresGame.TresLowJumpNavLinkExtendedInfo
// 0x0EB7 (0x0EB7 - 0x0000)
struct alignas(0xEB7) FTresLowJumpNavLinkExtendedInfo final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLowJumpNavLinkExtendedInfo) == 0x000EB7, "Wrong alignment on FTresLowJumpNavLinkExtendedInfo");
static_assert(sizeof(FTresLowJumpNavLinkExtendedInfo) == 0x000EB7, "Wrong size on FTresLowJumpNavLinkExtendedInfo");

// ScriptStruct TresGame.TresGummiGraphicData
// 0x1152E940 (0x1152E940 - 0x0000)
struct alignas(0x1152E940) FTresGummiGraphicData final
{
public:
	class USkeletalMesh*                          M_pSkeltalMesh;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_BaseColorTexture;                                // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BaseColorTexUVIndex;                             // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_EmissiveColor;                                   // 0x0014(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_EmissiveMaskChannel;                             // 0x0024(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_EmissiveMaskTexture;                             // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EmissiveMaskTexUVIndex;                          // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EMS_AdjustColor;                                 // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EMS_SineMax;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EMS_SineMin;                                     // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EMS_SineSpeed;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EMS_UseColorTable;                               // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_NormalTexture;                                   // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_NormalTexUVIndex;                                // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_AOTexture;                                       // 0x0068(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AOTexUVIndex;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_CT1_PaletteTexture;                              // 0x0078(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT2_PaletteNum;                                  // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_CT3_MaskTexture;                                 // 0x0088(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT4_MaskTexUVIndex;                              // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT5_MaskTexUVTiling;                             // 0x0094(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_CT_CustomColor;                                  // 0x0098(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT_PaletteUse;                                   // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_PTN1_MaskTexture;                                // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture1_R_Color;                       // 0x00B8(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture2_G_Color;                       // 0x00C8(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture3_B_Color;                       // 0x00D8(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture4_A_Color;                       // 0x00E8(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_PTN2_NormalTexture;                              // 0x00F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_PTN3_SetTexture;                                 // 0x0100(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PTN4_TexUVIndex;                                 // 0x0108(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PTN5_TexUVTiling;                                // 0x010C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PTN_MetalicToSpecular;                           // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_MaskTexture;                                     // 0x0118(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaskTexUVIndex;                                  // 0x0120(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_R1_ColorMulti;                                   // 0x0124(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R2_Metallic;                                     // 0x0134(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R3_Specular;                                     // 0x0138(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R4_Roughness;                                    // 0x013C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_R5_Emissive;                                     // 0x0140(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_R_MaskChannel_1;                                 // 0x0150(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R_NormalStrength;                                // 0x0160(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R_PatternID;                                     // 0x0164(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R_UVTiling;                                      // 0x0168(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R_UVIndex;                                       // 0x016C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_G1_ColorMulti;                                   // 0x0170(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G2_Metallic;                                     // 0x0180(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G3_Specular;                                     // 0x0184(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G4_Roughness;                                    // 0x0188(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_G5_Emissive;                                     // 0x018C(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_G_MaskChannel_1;                                 // 0x019C(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G_NormalStrength;                                // 0x01AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G_PatternID;                                     // 0x01B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G_UVTiling;                                      // 0x01B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G_UVIndex;                                       // 0x01B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_B1_ColorMulti;                                   // 0x01BC(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B2_Metallic;                                     // 0x01CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B3_Specular;                                     // 0x01D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B4_Roughness;                                    // 0x01D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_B5_Emissive;                                     // 0x01D8(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_B_MaskChannel_1;                                 // 0x01E8(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B_NormalStrength;                                // 0x01F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B_PatternID;                                     // 0x01FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B_UVTiling;                                      // 0x0200(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B_UVIndex;                                       // 0x0204(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_A1_ColorMulti;                                   // 0x0208(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A2_Metallic;                                     // 0x0218(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A3_Specular;                                     // 0x021C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A4_Roughness;                                    // 0x0220(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_A5_Emissive;                                     // 0x0224(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_A_MaskChannel_1;                                 // 0x0234(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A_NormalStrength;                                // 0x0244(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A_PatternID;                                     // 0x0248(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A_UVTiling;                                      // 0x024C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A_UVIndex;                                       // 0x0250(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_LightAttenuationChannel;                         // 0x0254(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_LightAttenuationTexture;                         // 0x0268(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LightAttenuationTexUVIndex;                      // 0x0270(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateAxisX;                                     // 0x0274(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateAxisY;                                     // 0x0278(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateAxisZ;                                     // 0x027C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateSpeed;                                     // 0x0280(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_UVScrollSpeedU;                                  // 0x0284(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_UVScrollSpeedV;                                  // 0x0288(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGummiGraphicData) == 0x1152E940, "Wrong alignment on FTresGummiGraphicData");
static_assert(sizeof(FTresGummiGraphicData) == 0x1152E940, "Wrong size on FTresGummiGraphicData");
static_assert(offsetof(FTresGummiGraphicData, M_pSkeltalMesh) == 0x000000, "Member 'FTresGummiGraphicData::M_pSkeltalMesh' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_BaseColorTexture) == 0x000008, "Member 'FTresGummiGraphicData::M_BaseColorTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_BaseColorTexUVIndex) == 0x000010, "Member 'FTresGummiGraphicData::M_BaseColorTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_EmissiveColor) == 0x000014, "Member 'FTresGummiGraphicData::M_EmissiveColor' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_EmissiveMaskChannel) == 0x000024, "Member 'FTresGummiGraphicData::M_EmissiveMaskChannel' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_EmissiveMaskTexture) == 0x000038, "Member 'FTresGummiGraphicData::M_EmissiveMaskTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_EmissiveMaskTexUVIndex) == 0x000040, "Member 'FTresGummiGraphicData::M_EmissiveMaskTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_EMS_AdjustColor) == 0x000044, "Member 'FTresGummiGraphicData::M_EMS_AdjustColor' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_EMS_SineMax) == 0x000048, "Member 'FTresGummiGraphicData::M_EMS_SineMax' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_EMS_SineMin) == 0x00004C, "Member 'FTresGummiGraphicData::M_EMS_SineMin' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_EMS_SineSpeed) == 0x000050, "Member 'FTresGummiGraphicData::M_EMS_SineSpeed' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_EMS_UseColorTable) == 0x000054, "Member 'FTresGummiGraphicData::M_EMS_UseColorTable' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_NormalTexture) == 0x000058, "Member 'FTresGummiGraphicData::M_NormalTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_NormalTexUVIndex) == 0x000060, "Member 'FTresGummiGraphicData::M_NormalTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_AOTexture) == 0x000068, "Member 'FTresGummiGraphicData::M_AOTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_AOTexUVIndex) == 0x000070, "Member 'FTresGummiGraphicData::M_AOTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_CT1_PaletteTexture) == 0x000078, "Member 'FTresGummiGraphicData::M_CT1_PaletteTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_CT2_PaletteNum) == 0x000080, "Member 'FTresGummiGraphicData::M_CT2_PaletteNum' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_CT3_MaskTexture) == 0x000088, "Member 'FTresGummiGraphicData::M_CT3_MaskTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_CT4_MaskTexUVIndex) == 0x000090, "Member 'FTresGummiGraphicData::M_CT4_MaskTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_CT5_MaskTexUVTiling) == 0x000094, "Member 'FTresGummiGraphicData::M_CT5_MaskTexUVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_CT_CustomColor) == 0x000098, "Member 'FTresGummiGraphicData::M_CT_CustomColor' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_CT_PaletteUse) == 0x0000A8, "Member 'FTresGummiGraphicData::M_CT_PaletteUse' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_PTN1_MaskTexture) == 0x0000B0, "Member 'FTresGummiGraphicData::M_PTN1_MaskTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_PTN1_MaskTexture1_R_Color) == 0x0000B8, "Member 'FTresGummiGraphicData::M_PTN1_MaskTexture1_R_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_PTN1_MaskTexture2_G_Color) == 0x0000C8, "Member 'FTresGummiGraphicData::M_PTN1_MaskTexture2_G_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_PTN1_MaskTexture3_B_Color) == 0x0000D8, "Member 'FTresGummiGraphicData::M_PTN1_MaskTexture3_B_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_PTN1_MaskTexture4_A_Color) == 0x0000E8, "Member 'FTresGummiGraphicData::M_PTN1_MaskTexture4_A_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_PTN2_NormalTexture) == 0x0000F8, "Member 'FTresGummiGraphicData::M_PTN2_NormalTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_PTN3_SetTexture) == 0x000100, "Member 'FTresGummiGraphicData::M_PTN3_SetTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_PTN4_TexUVIndex) == 0x000108, "Member 'FTresGummiGraphicData::M_PTN4_TexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_PTN5_TexUVTiling) == 0x00010C, "Member 'FTresGummiGraphicData::M_PTN5_TexUVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_PTN_MetalicToSpecular) == 0x000110, "Member 'FTresGummiGraphicData::M_PTN_MetalicToSpecular' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_MaskTexture) == 0x000118, "Member 'FTresGummiGraphicData::M_MaskTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_MaskTexUVIndex) == 0x000120, "Member 'FTresGummiGraphicData::M_MaskTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_R1_ColorMulti) == 0x000124, "Member 'FTresGummiGraphicData::M_R1_ColorMulti' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_R2_Metallic) == 0x000134, "Member 'FTresGummiGraphicData::M_R2_Metallic' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_R3_Specular) == 0x000138, "Member 'FTresGummiGraphicData::M_R3_Specular' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_R4_Roughness) == 0x00013C, "Member 'FTresGummiGraphicData::M_R4_Roughness' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_R5_Emissive) == 0x000140, "Member 'FTresGummiGraphicData::M_R5_Emissive' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_R_MaskChannel_1) == 0x000150, "Member 'FTresGummiGraphicData::M_R_MaskChannel_1' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_R_NormalStrength) == 0x000160, "Member 'FTresGummiGraphicData::M_R_NormalStrength' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_R_PatternID) == 0x000164, "Member 'FTresGummiGraphicData::M_R_PatternID' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_R_UVTiling) == 0x000168, "Member 'FTresGummiGraphicData::M_R_UVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_R_UVIndex) == 0x00016C, "Member 'FTresGummiGraphicData::M_R_UVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_G1_ColorMulti) == 0x000170, "Member 'FTresGummiGraphicData::M_G1_ColorMulti' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_G2_Metallic) == 0x000180, "Member 'FTresGummiGraphicData::M_G2_Metallic' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_G3_Specular) == 0x000184, "Member 'FTresGummiGraphicData::M_G3_Specular' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_G4_Roughness) == 0x000188, "Member 'FTresGummiGraphicData::M_G4_Roughness' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_G5_Emissive) == 0x00018C, "Member 'FTresGummiGraphicData::M_G5_Emissive' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_G_MaskChannel_1) == 0x00019C, "Member 'FTresGummiGraphicData::M_G_MaskChannel_1' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_G_NormalStrength) == 0x0001AC, "Member 'FTresGummiGraphicData::M_G_NormalStrength' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_G_PatternID) == 0x0001B0, "Member 'FTresGummiGraphicData::M_G_PatternID' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_G_UVTiling) == 0x0001B4, "Member 'FTresGummiGraphicData::M_G_UVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_G_UVIndex) == 0x0001B8, "Member 'FTresGummiGraphicData::M_G_UVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_B1_ColorMulti) == 0x0001BC, "Member 'FTresGummiGraphicData::M_B1_ColorMulti' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_B2_Metallic) == 0x0001CC, "Member 'FTresGummiGraphicData::M_B2_Metallic' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_B3_Specular) == 0x0001D0, "Member 'FTresGummiGraphicData::M_B3_Specular' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_B4_Roughness) == 0x0001D4, "Member 'FTresGummiGraphicData::M_B4_Roughness' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_B5_Emissive) == 0x0001D8, "Member 'FTresGummiGraphicData::M_B5_Emissive' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_B_MaskChannel_1) == 0x0001E8, "Member 'FTresGummiGraphicData::M_B_MaskChannel_1' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_B_NormalStrength) == 0x0001F8, "Member 'FTresGummiGraphicData::M_B_NormalStrength' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_B_PatternID) == 0x0001FC, "Member 'FTresGummiGraphicData::M_B_PatternID' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_B_UVTiling) == 0x000200, "Member 'FTresGummiGraphicData::M_B_UVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_B_UVIndex) == 0x000204, "Member 'FTresGummiGraphicData::M_B_UVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_A1_ColorMulti) == 0x000208, "Member 'FTresGummiGraphicData::M_A1_ColorMulti' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_A2_Metallic) == 0x000218, "Member 'FTresGummiGraphicData::M_A2_Metallic' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_A3_Specular) == 0x00021C, "Member 'FTresGummiGraphicData::M_A3_Specular' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_A4_Roughness) == 0x000220, "Member 'FTresGummiGraphicData::M_A4_Roughness' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_A5_Emissive) == 0x000224, "Member 'FTresGummiGraphicData::M_A5_Emissive' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_A_MaskChannel_1) == 0x000234, "Member 'FTresGummiGraphicData::M_A_MaskChannel_1' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_A_NormalStrength) == 0x000244, "Member 'FTresGummiGraphicData::M_A_NormalStrength' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_A_PatternID) == 0x000248, "Member 'FTresGummiGraphicData::M_A_PatternID' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_A_UVTiling) == 0x00024C, "Member 'FTresGummiGraphicData::M_A_UVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_A_UVIndex) == 0x000250, "Member 'FTresGummiGraphicData::M_A_UVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_LightAttenuationChannel) == 0x000254, "Member 'FTresGummiGraphicData::M_LightAttenuationChannel' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_LightAttenuationTexture) == 0x000268, "Member 'FTresGummiGraphicData::M_LightAttenuationTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_LightAttenuationTexUVIndex) == 0x000270, "Member 'FTresGummiGraphicData::M_LightAttenuationTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_RotateAxisX) == 0x000274, "Member 'FTresGummiGraphicData::M_RotateAxisX' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_RotateAxisY) == 0x000278, "Member 'FTresGummiGraphicData::M_RotateAxisY' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_RotateAxisZ) == 0x00027C, "Member 'FTresGummiGraphicData::M_RotateAxisZ' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_RotateSpeed) == 0x000280, "Member 'FTresGummiGraphicData::M_RotateSpeed' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_UVScrollSpeedU) == 0x000284, "Member 'FTresGummiGraphicData::M_UVScrollSpeedU' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicData, M_UVScrollSpeedV) == 0x000288, "Member 'FTresGummiGraphicData::M_UVScrollSpeedV' has a wrong offset!");

// ScriptStruct TresGame.TresUIMissionCounterTable
// 0x170A70 (0x11583AF0 - 0x11413080)
struct alignas(0x11583AF0) FTresUIMissionCounterTable final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture>                IconAsset;                                         // 0x0008(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CounterTextLocNameSpaceKey;                        // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIMissionCounterTable) == 0x11583AF0, "Wrong alignment on FTresUIMissionCounterTable");
static_assert(sizeof(FTresUIMissionCounterTable) == 0x11583AF0, "Wrong size on FTresUIMissionCounterTable");
static_assert(offsetof(FTresUIMissionCounterTable, IconAsset) == 0x000008, "Member 'FTresUIMissionCounterTable::IconAsset' has a wrong offset!");
static_assert(offsetof(FTresUIMissionCounterTable, MaxValue) == 0x000028, "Member 'FTresUIMissionCounterTable::MaxValue' has a wrong offset!");
static_assert(offsetof(FTresUIMissionCounterTable, CounterTextLocNameSpaceKey) == 0x000030, "Member 'FTresUIMissionCounterTable::CounterTextLocNameSpaceKey' has a wrong offset!");

// ScriptStruct TresGame.BX901_NeedleRainInfo
// 0x0038 (0x0038 - 0x0000)
struct FBX901_NeedleRainInfo final
{
public:
	TSubclassOf<class ATresProjectileBase>        M_Projectile_Needle_Up;                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATresProjectileBase>        M_Projectile_Needle_Fall;                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fUpDistance;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fFallHeight;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fFallRangeRadius;                                // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_EffectClass;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEffectHeight;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  M_Target;                                          // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBX901_NeedleRainInfo) == 0x000008, "Wrong alignment on FBX901_NeedleRainInfo");
static_assert(sizeof(FBX901_NeedleRainInfo) == 0x000038, "Wrong size on FBX901_NeedleRainInfo");
static_assert(offsetof(FBX901_NeedleRainInfo, M_Projectile_Needle_Up) == 0x000000, "Member 'FBX901_NeedleRainInfo::M_Projectile_Needle_Up' has a wrong offset!");
static_assert(offsetof(FBX901_NeedleRainInfo, M_Projectile_Needle_Fall) == 0x000008, "Member 'FBX901_NeedleRainInfo::M_Projectile_Needle_Fall' has a wrong offset!");
static_assert(offsetof(FBX901_NeedleRainInfo, M_fUpDistance) == 0x000010, "Member 'FBX901_NeedleRainInfo::M_fUpDistance' has a wrong offset!");
static_assert(offsetof(FBX901_NeedleRainInfo, M_fFallHeight) == 0x000014, "Member 'FBX901_NeedleRainInfo::M_fFallHeight' has a wrong offset!");
static_assert(offsetof(FBX901_NeedleRainInfo, M_fFallRangeRadius) == 0x000018, "Member 'FBX901_NeedleRainInfo::M_fFallRangeRadius' has a wrong offset!");
static_assert(offsetof(FBX901_NeedleRainInfo, M_EffectClass) == 0x000020, "Member 'FBX901_NeedleRainInfo::M_EffectClass' has a wrong offset!");
static_assert(offsetof(FBX901_NeedleRainInfo, M_fEffectHeight) == 0x000028, "Member 'FBX901_NeedleRainInfo::M_fEffectHeight' has a wrong offset!");
static_assert(offsetof(FBX901_NeedleRainInfo, M_Target) == 0x00002C, "Member 'FBX901_NeedleRainInfo::M_Target' has a wrong offset!");

// ScriptStruct TresGame.EX355_RushAwayTurnInfo
// 0x114B7990 (0x114B7990 - 0x0000)
struct alignas(0x114B7990) FEX355_RushAwayTurnInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FTurnVelocity;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_RushAwayTurnType                       M_TurnType;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_RushAwayTurnDir                        M_TurnDir;                                         // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fTurnOffset;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTurnDirDivideAngle;                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_RushAwayTurnInfo) == 0x114B7990, "Wrong alignment on FEX355_RushAwayTurnInfo");
static_assert(sizeof(FEX355_RushAwayTurnInfo) == 0x114B7990, "Wrong size on FEX355_RushAwayTurnInfo");
static_assert(offsetof(FEX355_RushAwayTurnInfo, INotifyID) == 0x000000, "Member 'FEX355_RushAwayTurnInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX355_RushAwayTurnInfo, Comment) == 0x000008, "Member 'FEX355_RushAwayTurnInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX355_RushAwayTurnInfo, FTurnVelocity) == 0x000018, "Member 'FEX355_RushAwayTurnInfo::FTurnVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_RushAwayTurnInfo, M_TurnType) == 0x00001C, "Member 'FEX355_RushAwayTurnInfo::M_TurnType' has a wrong offset!");
static_assert(offsetof(FEX355_RushAwayTurnInfo, M_TurnDir) == 0x00001D, "Member 'FEX355_RushAwayTurnInfo::M_TurnDir' has a wrong offset!");
static_assert(offsetof(FEX355_RushAwayTurnInfo, M_fTurnOffset) == 0x000020, "Member 'FEX355_RushAwayTurnInfo::M_fTurnOffset' has a wrong offset!");
static_assert(offsetof(FEX355_RushAwayTurnInfo, M_fTurnDirDivideAngle) == 0x000024, "Member 'FEX355_RushAwayTurnInfo::M_fTurnDirDivideAngle' has a wrong offset!");

// ScriptStruct TresGame.TresJumpNavLinkExtendedInfo
// 0x11277 (0x11277 - 0x0000)
struct alignas(0x11277) FTresJumpNavLinkExtendedInfo final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresJumpNavLinkExtendedInfo) == 0x011277, "Wrong alignment on FTresJumpNavLinkExtendedInfo");
static_assert(sizeof(FTresJumpNavLinkExtendedInfo) == 0x011277, "Wrong size on FTresJumpNavLinkExtendedInfo");

// ScriptStruct TresGame.TresPhotoLoadWork
// 0x0010 (0x0010 - 0x0000)
struct FTresPhotoLoadWork final
{
public:
	class UTexture2D*                             M_pTexture;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPhotoLoadWork) == 0x000008, "Wrong alignment on FTresPhotoLoadWork");
static_assert(sizeof(FTresPhotoLoadWork) == 0x000010, "Wrong size on FTresPhotoLoadWork");
static_assert(offsetof(FTresPhotoLoadWork, M_pTexture) == 0x000000, "Member 'FTresPhotoLoadWork::M_pTexture' has a wrong offset!");

// ScriptStruct TresGame.TresPointDamageEvent
// 0x0000 (0x112F5920 - 0x112F5920)
struct FTresPointDamageEvent final : public FPointDamageEvent
{
};
static_assert(alignof(FTresPointDamageEvent) == 0x112F5920, "Wrong alignment on FTresPointDamageEvent");
static_assert(sizeof(FTresPointDamageEvent) == 0x112F5920, "Wrong size on FTresPointDamageEvent");

// ScriptStruct TresGame.LastPlayedInfo
// 0x0020 (0x0020 - 0x0000)
struct FLastPlayedInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        M_pAsset;                                          // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLastPlayedInfo) == 0x000008, "Wrong alignment on FLastPlayedInfo");
static_assert(sizeof(FLastPlayedInfo) == 0x000020, "Wrong size on FLastPlayedInfo");
static_assert(offsetof(FLastPlayedInfo, M_pAsset) == 0x000010, "Member 'FLastPlayedInfo::M_pAsset' has a wrong offset!");

// ScriptStruct TresGame.TresAnimInstanceProxy
// 0x10DA0 (0x11278 - 0x04D8)
struct alignas(0x11278) FTresAnimInstanceProxy : public FAnimInstanceProxy
{
public:
	struct FA2Pose                                MySavedPose;                                       // 0x04D8(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E8[0x48];                                     // 0x04E8(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      M_pInitialPoseSeq;                                 // 0x0530(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_538[0x18];                                     // 0x0538(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAnimInstanceProxy) == 0x011278, "Wrong alignment on FTresAnimInstanceProxy");
static_assert(sizeof(FTresAnimInstanceProxy) == 0x011278, "Wrong size on FTresAnimInstanceProxy");
static_assert(offsetof(FTresAnimInstanceProxy, MySavedPose) == 0x0004D8, "Member 'FTresAnimInstanceProxy::MySavedPose' has a wrong offset!");
static_assert(offsetof(FTresAnimInstanceProxy, M_pInitialPoseSeq) == 0x000530, "Member 'FTresAnimInstanceProxy::M_pInitialPoseSeq' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickMineTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipGimmickMineTable final : public FTableRowBase
{
public:
	float                                         RespawnTime;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnDistance;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHP;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Fragile;                                           // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipGimmickMineTable) == 0x11413080, "Wrong alignment on FTresGumiShipGimmickMineTable");
static_assert(sizeof(FTresGumiShipGimmickMineTable) == 0x11413080, "Wrong size on FTresGumiShipGimmickMineTable");
static_assert(offsetof(FTresGumiShipGimmickMineTable, RespawnTime) == 0x000008, "Member 'FTresGumiShipGimmickMineTable::RespawnTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMineTable, RespawnDistance) == 0x00000C, "Member 'FTresGumiShipGimmickMineTable::RespawnDistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMineTable, MaxHP) == 0x000010, "Member 'FTresGumiShipGimmickMineTable::MaxHP' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMineTable, Fragile) == 0x000014, "Member 'FTresGumiShipGimmickMineTable::Fragile' has a wrong offset!");

// ScriptStruct TresGame.TresTornadoDebrisObject
// 0x2387 (0x2387 - 0x0000)
struct alignas(0x2387) FTresTornadoDebrisObject final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTornadoDebrisObject) == 0x002387, "Wrong alignment on FTresTornadoDebrisObject");
static_assert(sizeof(FTresTornadoDebrisObject) == 0x002387, "Wrong size on FTresTornadoDebrisObject");

// ScriptStruct TresGame.TresWildDanceAppearParam_e_ex358
// 0x0018 (0x0018 - 0x0000)
struct FTresWildDanceAppearParam_e_ex358 final
{
public:
	ETresEnemyWildDanceAppearLocation_e_ex358     LocationType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetAngle;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCalcAppearLocationDelayAfter : 1;                 // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETresEnemyChangeManualLockonPriority_e_ex358  ChangeManualLockonPriority;                        // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWildDanceAppearParam_e_ex358) == 0x000004, "Wrong alignment on FTresWildDanceAppearParam_e_ex358");
static_assert(sizeof(FTresWildDanceAppearParam_e_ex358) == 0x000018, "Wrong size on FTresWildDanceAppearParam_e_ex358");
static_assert(offsetof(FTresWildDanceAppearParam_e_ex358, LocationType) == 0x000000, "Member 'FTresWildDanceAppearParam_e_ex358::LocationType' has a wrong offset!");
static_assert(offsetof(FTresWildDanceAppearParam_e_ex358, OffsetAngle) == 0x000004, "Member 'FTresWildDanceAppearParam_e_ex358::OffsetAngle' has a wrong offset!");
static_assert(offsetof(FTresWildDanceAppearParam_e_ex358, Distance) == 0x000008, "Member 'FTresWildDanceAppearParam_e_ex358::Distance' has a wrong offset!");
static_assert(offsetof(FTresWildDanceAppearParam_e_ex358, DelayTime) == 0x00000C, "Member 'FTresWildDanceAppearParam_e_ex358::DelayTime' has a wrong offset!");
static_assert(offsetof(FTresWildDanceAppearParam_e_ex358, ChangeManualLockonPriority) == 0x000014, "Member 'FTresWildDanceAppearParam_e_ex358::ChangeManualLockonPriority' has a wrong offset!");

// ScriptStruct TresGame.TresMapSetData
// 0x0003 (0x0003 - 0x0000)
struct FTresMapSetData final
{
public:
	bool                                          Load;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore;                                            // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMapSetData) == 0x000001, "Wrong alignment on FTresMapSetData");
static_assert(sizeof(FTresMapSetData) == 0x000003, "Wrong size on FTresMapSetData");
static_assert(offsetof(FTresMapSetData, Load) == 0x000000, "Member 'FTresMapSetData::Load' has a wrong offset!");
static_assert(offsetof(FTresMapSetData, Visible) == 0x000001, "Member 'FTresMapSetData::Visible' has a wrong offset!");
static_assert(offsetof(FTresMapSetData, Ignore) == 0x000002, "Member 'FTresMapSetData::Ignore' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcReplaceMeshData
// 0x114DC4A0 (0x114DC4A0 - 0x0000)
struct alignas(0x114DC4A0) FTresComNpcReplaceMeshData final
{
public:
	class USkeletalMesh*                          M_MeshData;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     M_MatData;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_VoiceType;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcReplaceMeshData) == 0x114DC4A0, "Wrong alignment on FTresComNpcReplaceMeshData");
static_assert(sizeof(FTresComNpcReplaceMeshData) == 0x114DC4A0, "Wrong size on FTresComNpcReplaceMeshData");
static_assert(offsetof(FTresComNpcReplaceMeshData, M_MeshData) == 0x000000, "Member 'FTresComNpcReplaceMeshData::M_MeshData' has a wrong offset!");
static_assert(offsetof(FTresComNpcReplaceMeshData, M_MatData) == 0x000008, "Member 'FTresComNpcReplaceMeshData::M_MatData' has a wrong offset!");
static_assert(offsetof(FTresComNpcReplaceMeshData, M_VoiceType) == 0x000010, "Member 'FTresComNpcReplaceMeshData::M_VoiceType' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcMeshSetDatas
// 0x0018 (0x0018 - 0x0000)
struct FTresComNpcMeshSetDatas final
{
public:
	class FName                                   M_MeshName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresComNpcReplaceMeshData>     M_MeshLists;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcMeshSetDatas) == 0x000008, "Wrong alignment on FTresComNpcMeshSetDatas");
static_assert(sizeof(FTresComNpcMeshSetDatas) == 0x000018, "Wrong size on FTresComNpcMeshSetDatas");
static_assert(offsetof(FTresComNpcMeshSetDatas, M_MeshName) == 0x000000, "Member 'FTresComNpcMeshSetDatas::M_MeshName' has a wrong offset!");
static_assert(offsetof(FTresComNpcMeshSetDatas, M_MeshLists) == 0x000008, "Member 'FTresComNpcMeshSetDatas::M_MeshLists' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_AnimSetEvaluator
// 0x1124B (0x1127B - 0x0030)
struct alignas(0x1127B) FTresAnimNode_AnimSetEvaluator final : public FAnimNode_Base
{
public:
	class FName                                   M_AnimName;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ExplicitTime;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_X;                                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Y;                                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Z;                                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      M_Sequence;                                        // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        M_BlendSpace;                                      // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresAnimInstance*                      M_Instance;                                        // 0x0058(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlendFilter                           M_BlendFilter;                                     // 0x0060(0x0090)(Protected, NativeAccessSpecifierProtected)
	TArray<struct FBlendSampleData>               M_BlendSampleDataCache;                            // 0x00F0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAnimNode_AnimSetEvaluator) == 0x01127B, "Wrong alignment on FTresAnimNode_AnimSetEvaluator");
static_assert(sizeof(FTresAnimNode_AnimSetEvaluator) == 0x01127B, "Wrong size on FTresAnimNode_AnimSetEvaluator");
static_assert(offsetof(FTresAnimNode_AnimSetEvaluator, M_AnimName) == 0x000030, "Member 'FTresAnimNode_AnimSetEvaluator::M_AnimName' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetEvaluator, M_ExplicitTime) == 0x000038, "Member 'FTresAnimNode_AnimSetEvaluator::M_ExplicitTime' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetEvaluator, M_X) == 0x00003C, "Member 'FTresAnimNode_AnimSetEvaluator::M_X' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetEvaluator, M_Y) == 0x000040, "Member 'FTresAnimNode_AnimSetEvaluator::M_Y' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetEvaluator, M_Z) == 0x000044, "Member 'FTresAnimNode_AnimSetEvaluator::M_Z' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetEvaluator, M_Sequence) == 0x000048, "Member 'FTresAnimNode_AnimSetEvaluator::M_Sequence' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetEvaluator, M_BlendSpace) == 0x000050, "Member 'FTresAnimNode_AnimSetEvaluator::M_BlendSpace' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetEvaluator, M_Instance) == 0x000058, "Member 'FTresAnimNode_AnimSetEvaluator::M_Instance' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetEvaluator, M_BlendFilter) == 0x000060, "Member 'FTresAnimNode_AnimSetEvaluator::M_BlendFilter' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetEvaluator, M_BlendSampleDataCache) == 0x0000F0, "Member 'FTresAnimNode_AnimSetEvaluator::M_BlendSampleDataCache' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_AnimSetPlayer
// 0x00F8 (0x0128 - 0x0030)
struct FTresAnimNode_AnimSetPlayer final : public FAnimNode_Base
{
public:
	class FName                                   M_AnimName;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_X;                                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Y;                                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Z;                                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bLoopAnimation;                                  // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_PlayRate;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_GroupIndex;                                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimGroupRole                                M_GroupRole;                                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      M_Sequence;                                        // 0x0058(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        M_BlendSpace;                                      // 0x0060(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresAnimInstance*                      M_Instance;                                        // 0x0068(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_InternalTimeAccumulator;                         // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendFilter                           M_BlendFilter;                                     // 0x0078(0x0090)(Protected, NativeAccessSpecifierProtected)
	TArray<struct FBlendSampleData>               M_BlendSampleDataCache;                            // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAnimNode_AnimSetPlayer) == 0x000008, "Wrong alignment on FTresAnimNode_AnimSetPlayer");
static_assert(sizeof(FTresAnimNode_AnimSetPlayer) == 0x000128, "Wrong size on FTresAnimNode_AnimSetPlayer");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_AnimName) == 0x000030, "Member 'FTresAnimNode_AnimSetPlayer::M_AnimName' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_X) == 0x000038, "Member 'FTresAnimNode_AnimSetPlayer::M_X' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_Y) == 0x00003C, "Member 'FTresAnimNode_AnimSetPlayer::M_Y' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_Z) == 0x000040, "Member 'FTresAnimNode_AnimSetPlayer::M_Z' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_bLoopAnimation) == 0x000044, "Member 'FTresAnimNode_AnimSetPlayer::M_bLoopAnimation' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_PlayRate) == 0x000048, "Member 'FTresAnimNode_AnimSetPlayer::M_PlayRate' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_GroupIndex) == 0x00004C, "Member 'FTresAnimNode_AnimSetPlayer::M_GroupIndex' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_GroupRole) == 0x000050, "Member 'FTresAnimNode_AnimSetPlayer::M_GroupRole' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_Sequence) == 0x000058, "Member 'FTresAnimNode_AnimSetPlayer::M_Sequence' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_BlendSpace) == 0x000060, "Member 'FTresAnimNode_AnimSetPlayer::M_BlendSpace' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_Instance) == 0x000068, "Member 'FTresAnimNode_AnimSetPlayer::M_Instance' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_InternalTimeAccumulator) == 0x000070, "Member 'FTresAnimNode_AnimSetPlayer::M_InternalTimeAccumulator' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_BlendFilter) == 0x000078, "Member 'FTresAnimNode_AnimSetPlayer::M_BlendFilter' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_AnimSetPlayer, M_BlendSampleDataCache) == 0x000108, "Member 'FTresAnimNode_AnimSetPlayer::M_BlendSampleDataCache' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_FlareShotEntryParam
// 0x11E7C (0x11E7C - 0x0000)
struct alignas(0x11E7C) FTresEnemy_e_ex771_FlareShotEntryParam final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_FlareShotEntryParam) == 0x011E7C, "Wrong alignment on FTresEnemy_e_ex771_FlareShotEntryParam");
static_assert(sizeof(FTresEnemy_e_ex771_FlareShotEntryParam) == 0x011E7C, "Wrong size on FTresEnemy_e_ex771_FlareShotEntryParam");

// ScriptStruct TresGame.TresAnimNode_CollTwoBoneIK
// 0x0000 (0x11498FB0 - 0x11498FB0)
struct FTresAnimNode_CollTwoBoneIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         IKBone;                                            // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocation;                                  // 0x0088(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JointTargetLocation;                               // 0x0094(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectorSpaceBoneName;                             // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTakeRotationFromEffectorSpace : 1;                // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMaintainEffectorRelRot : 1;                       // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowStretching : 1;                              // 0x00A8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              StretchLimits;                                     // 0x00AC(0x112E95F0)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartStretchRatio;                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStretchScale;                                   // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             JointTargetLocationSpace;                          // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   JointTargetSpaceBoneName;                          // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bMaintainEffectorHitNormal : 1;                  // 0x00C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_MaintainEffectorLimitRot;                        // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaintainEffectorStartInterpTime;                 // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaintainEffectorEndInterpTime;                   // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresIkCollision                              CollisionShape;                                    // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CollisionOffset;                                   // 0x00DC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CollisionRotation;                                 // 0x00E8(0x112E9AF0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CollisionSize;                                     // 0x00F4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckMin;                                          // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckMax;                                          // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IkOffset;                                          // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x34];                                     // 0x010C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAnimNode_CollTwoBoneIK) == 0x11498FB0, "Wrong alignment on FTresAnimNode_CollTwoBoneIK");
static_assert(sizeof(FTresAnimNode_CollTwoBoneIK) == 0x11498FB0, "Wrong size on FTresAnimNode_CollTwoBoneIK");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, IKBone) == 0x000070, "Member 'FTresAnimNode_CollTwoBoneIK::IKBone' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, EffectorLocation) == 0x000088, "Member 'FTresAnimNode_CollTwoBoneIK::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, JointTargetLocation) == 0x000094, "Member 'FTresAnimNode_CollTwoBoneIK::JointTargetLocation' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, EffectorSpaceBoneName) == 0x0000A0, "Member 'FTresAnimNode_CollTwoBoneIK::EffectorSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, StretchLimits) == 0x0000AC, "Member 'FTresAnimNode_CollTwoBoneIK::StretchLimits' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, StartStretchRatio) == 0x0000B4, "Member 'FTresAnimNode_CollTwoBoneIK::StartStretchRatio' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, MaxStretchScale) == 0x0000B8, "Member 'FTresAnimNode_CollTwoBoneIK::MaxStretchScale' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, EffectorLocationSpace) == 0x0000BC, "Member 'FTresAnimNode_CollTwoBoneIK::EffectorLocationSpace' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, JointTargetLocationSpace) == 0x0000BD, "Member 'FTresAnimNode_CollTwoBoneIK::JointTargetLocationSpace' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, JointTargetSpaceBoneName) == 0x0000C0, "Member 'FTresAnimNode_CollTwoBoneIK::JointTargetSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, M_MaintainEffectorLimitRot) == 0x0000CC, "Member 'FTresAnimNode_CollTwoBoneIK::M_MaintainEffectorLimitRot' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, M_MaintainEffectorStartInterpTime) == 0x0000D0, "Member 'FTresAnimNode_CollTwoBoneIK::M_MaintainEffectorStartInterpTime' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, M_MaintainEffectorEndInterpTime) == 0x0000D4, "Member 'FTresAnimNode_CollTwoBoneIK::M_MaintainEffectorEndInterpTime' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, CollisionShape) == 0x0000D8, "Member 'FTresAnimNode_CollTwoBoneIK::CollisionShape' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, CollisionOffset) == 0x0000DC, "Member 'FTresAnimNode_CollTwoBoneIK::CollisionOffset' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, CollisionRotation) == 0x0000E8, "Member 'FTresAnimNode_CollTwoBoneIK::CollisionRotation' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, CollisionSize) == 0x0000F4, "Member 'FTresAnimNode_CollTwoBoneIK::CollisionSize' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, CheckMin) == 0x000100, "Member 'FTresAnimNode_CollTwoBoneIK::CheckMin' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, CheckMax) == 0x000104, "Member 'FTresAnimNode_CollTwoBoneIK::CheckMax' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_CollTwoBoneIK, IkOffset) == 0x000108, "Member 'FTresAnimNode_CollTwoBoneIK::IkOffset' has a wrong offset!");

// ScriptStruct TresGame.TresFeatherShotProjectileParam_e_ex081
// 0x114A86F0 (0x114A86F0 - 0x0000)
struct alignas(0x114A86F0) FTresFeatherShotProjectileParam_e_ex081 final
{
public:
	float                                         M_ProjectileInterval;                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShootPitchAngle;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFeatherShotProjectileParam_e_ex081) == 0x114A86F0, "Wrong alignment on FTresFeatherShotProjectileParam_e_ex081");
static_assert(sizeof(FTresFeatherShotProjectileParam_e_ex081) == 0x114A86F0, "Wrong size on FTresFeatherShotProjectileParam_e_ex081");
static_assert(offsetof(FTresFeatherShotProjectileParam_e_ex081, M_ProjectileInterval) == 0x000000, "Member 'FTresFeatherShotProjectileParam_e_ex081::M_ProjectileInterval' has a wrong offset!");
static_assert(offsetof(FTresFeatherShotProjectileParam_e_ex081, M_ShootPitchAngle) == 0x000004, "Member 'FTresFeatherShotProjectileParam_e_ex081::M_ShootPitchAngle' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_ExDropWaist
// 0x11498F80 (0x11498FB0 - 0x0030)
struct FTresAnimNode_ExDropWaist final : public FAnimNode_Base
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0030(0x112BD)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x004C(0x11498FB0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         M_EffectBone;                                      // 0x0058(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_DropSpeed;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DropDetectHeightMax;                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DropDetectHeightMin;                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 M_IKBones;                                         // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x10];                                      // 0x0090(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAnimNode_ExDropWaist) == 0x11498FB0, "Wrong alignment on FTresAnimNode_ExDropWaist");
static_assert(sizeof(FTresAnimNode_ExDropWaist) == 0x11498FB0, "Wrong size on FTresAnimNode_ExDropWaist");
static_assert(offsetof(FTresAnimNode_ExDropWaist, SourcePose) == 0x000030, "Member 'FTresAnimNode_ExDropWaist::SourcePose' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExDropWaist, Alpha) == 0x000048, "Member 'FTresAnimNode_ExDropWaist::Alpha' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExDropWaist, AlphaScaleBias) == 0x00004C, "Member 'FTresAnimNode_ExDropWaist::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExDropWaist, M_EffectBone) == 0x000058, "Member 'FTresAnimNode_ExDropWaist::M_EffectBone' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExDropWaist, M_DropSpeed) == 0x000070, "Member 'FTresAnimNode_ExDropWaist::M_DropSpeed' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExDropWaist, M_DropDetectHeightMax) == 0x000074, "Member 'FTresAnimNode_ExDropWaist::M_DropDetectHeightMax' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExDropWaist, M_DropDetectHeightMin) == 0x000078, "Member 'FTresAnimNode_ExDropWaist::M_DropDetectHeightMin' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExDropWaist, M_IKBones) == 0x000080, "Member 'FTresAnimNode_ExDropWaist::M_IKBones' has a wrong offset!");

// ScriptStruct TresGame.TresLookAtRotBoneParam
// 0x1149B150 (0x1149B150 - 0x0000)
struct alignas(0x1149B150) FTresLookAtRotBoneParam final
{
public:
	struct FBoneReference                         M_Bone;                                            // 0x0000(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_YawCoefficientData;                              // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PitchCoefficientData;                            // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ParamACoefficientData;                           // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLookAtRotBoneParam) == 0x1149B150, "Wrong alignment on FTresLookAtRotBoneParam");
static_assert(sizeof(FTresLookAtRotBoneParam) == 0x1149B150, "Wrong size on FTresLookAtRotBoneParam");
static_assert(offsetof(FTresLookAtRotBoneParam, M_Bone) == 0x000000, "Member 'FTresLookAtRotBoneParam::M_Bone' has a wrong offset!");
static_assert(offsetof(FTresLookAtRotBoneParam, M_YawCoefficientData) == 0x000018, "Member 'FTresLookAtRotBoneParam::M_YawCoefficientData' has a wrong offset!");
static_assert(offsetof(FTresLookAtRotBoneParam, M_PitchCoefficientData) == 0x00001C, "Member 'FTresLookAtRotBoneParam::M_PitchCoefficientData' has a wrong offset!");
static_assert(offsetof(FTresLookAtRotBoneParam, M_ParamACoefficientData) == 0x000020, "Member 'FTresLookAtRotBoneParam::M_ParamACoefficientData' has a wrong offset!");

// ScriptStruct TresGame.TresLookAtEyeBoneParam
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresLookAtEyeBoneParam final
{
public:
	struct FBoneReference                         M_Bone;                                            // 0x0000(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               M_RotLimitMin;                                     // 0x0018(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               M_RotLimitMax;                                     // 0x0024(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLookAtEyeBoneParam) == 0x112E9AF0, "Wrong alignment on FTresLookAtEyeBoneParam");
static_assert(sizeof(FTresLookAtEyeBoneParam) == 0x112E9AF0, "Wrong size on FTresLookAtEyeBoneParam");
static_assert(offsetof(FTresLookAtEyeBoneParam, M_Bone) == 0x000000, "Member 'FTresLookAtEyeBoneParam::M_Bone' has a wrong offset!");
static_assert(offsetof(FTresLookAtEyeBoneParam, M_RotLimitMin) == 0x000018, "Member 'FTresLookAtEyeBoneParam::M_RotLimitMin' has a wrong offset!");
static_assert(offsetof(FTresLookAtEyeBoneParam, M_RotLimitMax) == 0x000024, "Member 'FTresLookAtEyeBoneParam::M_RotLimitMax' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_ExLookAt
// 0x1B50 (0x1149AB00 - 0x11498FB0)
struct alignas(0x1149AB00) FTresAnimNode_ExLookAt final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         M_LookAtBaseBone;                                  // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                M_LookAtBaseOffset;                                // 0x0088(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookAtLocation;                                    // 0x0094(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtParamA;                                      // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsDirectLook : 1;                               // 0x00A4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               M_RotationLimitDegMin;                             // 0x00A8(0x112E9AF0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               M_RotationLimitDegMax;                             // 0x00B4(0x112E9AF0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_RotationBackMarginDeg;                           // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotationSpeedDeg;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresLookAtRotBoneParam>        M_RotBones;                                        // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresLookAtEyeBoneParam>        M_EyeBones;                                        // 0x00D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         M_LodLimit;                                        // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x6C];                                      // 0x00EC(0x006C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAnimNode_ExLookAt) == 0x1149AB00, "Wrong alignment on FTresAnimNode_ExLookAt");
static_assert(sizeof(FTresAnimNode_ExLookAt) == 0x1149AB00, "Wrong size on FTresAnimNode_ExLookAt");
static_assert(offsetof(FTresAnimNode_ExLookAt, M_LookAtBaseBone) == 0x000070, "Member 'FTresAnimNode_ExLookAt::M_LookAtBaseBone' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExLookAt, M_LookAtBaseOffset) == 0x000088, "Member 'FTresAnimNode_ExLookAt::M_LookAtBaseOffset' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExLookAt, LookAtLocation) == 0x000094, "Member 'FTresAnimNode_ExLookAt::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExLookAt, LookAtParamA) == 0x0000A0, "Member 'FTresAnimNode_ExLookAt::LookAtParamA' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExLookAt, M_RotationLimitDegMin) == 0x0000A8, "Member 'FTresAnimNode_ExLookAt::M_RotationLimitDegMin' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExLookAt, M_RotationLimitDegMax) == 0x0000B4, "Member 'FTresAnimNode_ExLookAt::M_RotationLimitDegMax' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExLookAt, M_RotationBackMarginDeg) == 0x0000C0, "Member 'FTresAnimNode_ExLookAt::M_RotationBackMarginDeg' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExLookAt, M_RotationSpeedDeg) == 0x0000C4, "Member 'FTresAnimNode_ExLookAt::M_RotationSpeedDeg' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExLookAt, M_RotBones) == 0x0000C8, "Member 'FTresAnimNode_ExLookAt::M_RotBones' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExLookAt, M_EyeBones) == 0x0000D8, "Member 'FTresAnimNode_ExLookAt::M_EyeBones' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ExLookAt, M_LodLimit) == 0x0000E8, "Member 'FTresAnimNode_ExLookAt::M_LodLimit' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipEnemyGeneratorDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipEnemyGeneratorDataTable final : public FTableRowBase
{
public:
	TSubclassOf<class ATresGumiShipEnemyPawnBase> M_SpawnEnemyClass;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fOffsetX;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fOffsetY;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fOffsetZ;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nAttackPriority;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpawnDelayTime;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  M_EnemyGUID;                                       // 0x0024(0x112E8D20)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipEnemyGeneratorDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipEnemyGeneratorDataTable");
static_assert(sizeof(FTresGumiShipEnemyGeneratorDataTable) == 0x11413080, "Wrong size on FTresGumiShipEnemyGeneratorDataTable");
static_assert(offsetof(FTresGumiShipEnemyGeneratorDataTable, M_SpawnEnemyClass) == 0x000008, "Member 'FTresGumiShipEnemyGeneratorDataTable::M_SpawnEnemyClass' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyGeneratorDataTable, M_fOffsetX) == 0x000010, "Member 'FTresGumiShipEnemyGeneratorDataTable::M_fOffsetX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyGeneratorDataTable, M_fOffsetY) == 0x000014, "Member 'FTresGumiShipEnemyGeneratorDataTable::M_fOffsetY' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyGeneratorDataTable, M_fOffsetZ) == 0x000018, "Member 'FTresGumiShipEnemyGeneratorDataTable::M_fOffsetZ' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyGeneratorDataTable, M_nAttackPriority) == 0x00001C, "Member 'FTresGumiShipEnemyGeneratorDataTable::M_nAttackPriority' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyGeneratorDataTable, M_fSpawnDelayTime) == 0x000020, "Member 'FTresGumiShipEnemyGeneratorDataTable::M_fSpawnDelayTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyGeneratorDataTable, M_EnemyGUID) == 0x000024, "Member 'FTresGumiShipEnemyGeneratorDataTable::M_EnemyGUID' has a wrong offset!");

// ScriptStruct TresGame.TresSkeletalFootStepUnit
// 0x11577080 (0x11577080 - 0x0000)
struct alignas(0x11577080) FTresSkeletalFootStepUnit final
{
public:
	struct FBoneReference                         M_Bone;                                            // 0x0000(0x0018)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   M_BoneName;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_BoneIndex;                                       // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresIkCollision                              M_ShapeType;                                       // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_OffsetLocation;                                  // 0x0028(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_OffsetRotation;                                  // 0x0034(0x112E9AF0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                M_Size;                                            // 0x0040(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_CheckDist;                                       // 0x004C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TouchedCheckDist;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_EffectScale;                                     // 0x005C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresFootStepSet*                       M_FootStepSet;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_FootStepSize;                                    // 0x0070(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresSkeletalFootStampDir                     M_FootStampDir;                                    // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_StampCheckDist;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x31C];                                     // 0x0084(0x031C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSkeletalFootStepUnit) == 0x11577080, "Wrong alignment on FTresSkeletalFootStepUnit");
static_assert(sizeof(FTresSkeletalFootStepUnit) == 0x11577080, "Wrong size on FTresSkeletalFootStepUnit");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_Bone) == 0x000000, "Member 'FTresSkeletalFootStepUnit::M_Bone' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_BoneName) == 0x000018, "Member 'FTresSkeletalFootStepUnit::M_BoneName' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_BoneIndex) == 0x000020, "Member 'FTresSkeletalFootStepUnit::M_BoneIndex' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_ShapeType) == 0x000024, "Member 'FTresSkeletalFootStepUnit::M_ShapeType' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_OffsetLocation) == 0x000028, "Member 'FTresSkeletalFootStepUnit::M_OffsetLocation' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_OffsetRotation) == 0x000034, "Member 'FTresSkeletalFootStepUnit::M_OffsetRotation' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_Size) == 0x000040, "Member 'FTresSkeletalFootStepUnit::M_Size' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_CheckDist) == 0x00004C, "Member 'FTresSkeletalFootStepUnit::M_CheckDist' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_TouchedCheckDist) == 0x000058, "Member 'FTresSkeletalFootStepUnit::M_TouchedCheckDist' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_EffectScale) == 0x00005C, "Member 'FTresSkeletalFootStepUnit::M_EffectScale' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_FootStepSet) == 0x000068, "Member 'FTresSkeletalFootStepUnit::M_FootStepSet' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_FootStepSize) == 0x000070, "Member 'FTresSkeletalFootStepUnit::M_FootStepSize' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_FootStampDir) == 0x00007C, "Member 'FTresSkeletalFootStepUnit::M_FootStampDir' has a wrong offset!");
static_assert(offsetof(FTresSkeletalFootStepUnit, M_StampCheckDist) == 0x000080, "Member 'FTresSkeletalFootStepUnit::M_StampCheckDist' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipPlayerBaseCommonParameter
// 0x1151D3D0 (0x1151D3D0 - 0x0000)
struct alignas(0x1151D3D0) FTresGumiShipPlayerBaseCommonParameter final
{
public:
	float                                         M_fHitPoint;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAttackPoint;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipPlayerBaseCommonParameter) == 0x1151D3D0, "Wrong alignment on FTresGumiShipPlayerBaseCommonParameter");
static_assert(sizeof(FTresGumiShipPlayerBaseCommonParameter) == 0x1151D3D0, "Wrong size on FTresGumiShipPlayerBaseCommonParameter");
static_assert(offsetof(FTresGumiShipPlayerBaseCommonParameter, M_fHitPoint) == 0x000000, "Member 'FTresGumiShipPlayerBaseCommonParameter::M_fHitPoint' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseCommonParameter, M_fAttackPoint) == 0x000004, "Member 'FTresGumiShipPlayerBaseCommonParameter::M_fAttackPoint' has a wrong offset!");

// ScriptStruct TresGame.TresWildDanceAllActionParam_e_ex358
// 0x0028 (0x0028 - 0x0000)
struct FTresWildDanceAllActionParam_e_ex358 final
{
public:
	struct FTresWildDanceAppearParam_e_ex358      AppearParam;                                       // 0x0000(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTresWildDanceOneActionParam_e_ex358> ActionList;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWildDanceAllActionParam_e_ex358) == 0x000008, "Wrong alignment on FTresWildDanceAllActionParam_e_ex358");
static_assert(sizeof(FTresWildDanceAllActionParam_e_ex358) == 0x000028, "Wrong size on FTresWildDanceAllActionParam_e_ex358");
static_assert(offsetof(FTresWildDanceAllActionParam_e_ex358, AppearParam) == 0x000000, "Member 'FTresWildDanceAllActionParam_e_ex358::AppearParam' has a wrong offset!");
static_assert(offsetof(FTresWildDanceAllActionParam_e_ex358, ActionList) == 0x000018, "Member 'FTresWildDanceAllActionParam_e_ex358::ActionList' has a wrong offset!");

// ScriptStruct TresGame.TresTextureReference
// 0x0010 (0x0010 - 0x0000)
struct FTresTextureReference final
{
public:
	struct FStringAssetReference                  M_TexturePath;                                     // 0x0000(0x0010)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTextureReference) == 0x000001, "Wrong alignment on FTresTextureReference");
static_assert(sizeof(FTresTextureReference) == 0x000010, "Wrong size on FTresTextureReference");
static_assert(offsetof(FTresTextureReference, M_TexturePath) == 0x000000, "Member 'FTresTextureReference::M_TexturePath' has a wrong offset!");

// ScriptStruct TresGame.TresLookAtSubBoneParam
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresLookAtSubBoneParam final
{
public:
	struct FBoneReference                         M_Bone;                                            // 0x0000(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               M_RotLimitMin;                                     // 0x0018(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               M_RotLimitMax;                                     // 0x0024(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLookAtSubBoneParam) == 0x112E9AF0, "Wrong alignment on FTresLookAtSubBoneParam");
static_assert(sizeof(FTresLookAtSubBoneParam) == 0x112E9AF0, "Wrong size on FTresLookAtSubBoneParam");
static_assert(offsetof(FTresLookAtSubBoneParam, M_Bone) == 0x000000, "Member 'FTresLookAtSubBoneParam::M_Bone' has a wrong offset!");
static_assert(offsetof(FTresLookAtSubBoneParam, M_RotLimitMin) == 0x000018, "Member 'FTresLookAtSubBoneParam::M_RotLimitMin' has a wrong offset!");
static_assert(offsetof(FTresLookAtSubBoneParam, M_RotLimitMax) == 0x000024, "Member 'FTresLookAtSubBoneParam::M_RotLimitMax' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_LookAt
// 0x0000 (0x11498FB0 - 0x11498FB0)
struct FTresAnimNode_LookAt final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LookAtLocation;                                    // 0x0088(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationLimitMin;                                  // 0x0094(0x112E9AF0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationLimitMax;                                  // 0x00A0(0x112E9AF0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotationSpeed;                                     // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresLookAtSubBoneParam>        M_SubBones;                                        // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x50];                                      // 0x00C0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAnimNode_LookAt) == 0x11498FB0, "Wrong alignment on FTresAnimNode_LookAt");
static_assert(sizeof(FTresAnimNode_LookAt) == 0x11498FB0, "Wrong size on FTresAnimNode_LookAt");
static_assert(offsetof(FTresAnimNode_LookAt, BoneToModify) == 0x000070, "Member 'FTresAnimNode_LookAt::BoneToModify' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_LookAt, LookAtLocation) == 0x000088, "Member 'FTresAnimNode_LookAt::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_LookAt, RotationLimitMin) == 0x000094, "Member 'FTresAnimNode_LookAt::RotationLimitMin' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_LookAt, RotationLimitMax) == 0x0000A0, "Member 'FTresAnimNode_LookAt::RotationLimitMax' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_LookAt, RotationSpeed) == 0x0000AC, "Member 'FTresAnimNode_LookAt::RotationSpeed' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_LookAt, M_SubBones) == 0x0000B0, "Member 'FTresAnimNode_LookAt::M_SubBones' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickTreasureDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipGimmickTreasureDataTable final : public FTableRowBase
{
public:
	class FString                                 M_Labels;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Dir;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Dirtime;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_InitalRot;                                       // 0x0020(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               M_AnswerRot;                                       // 0x002C(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_PrizeOutPos;                                     // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_DummyMesh;                                       // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_PrizeOutOffset;                                  // 0x003C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         M_ImpactMash;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipGimmickTreasureDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipGimmickTreasureDataTable");
static_assert(sizeof(FTresGumiShipGimmickTreasureDataTable) == 0x11413080, "Wrong size on FTresGumiShipGimmickTreasureDataTable");
static_assert(offsetof(FTresGumiShipGimmickTreasureDataTable, M_Labels) == 0x000008, "Member 'FTresGumiShipGimmickTreasureDataTable::M_Labels' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureDataTable, M_Dir) == 0x000018, "Member 'FTresGumiShipGimmickTreasureDataTable::M_Dir' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureDataTable, M_Dirtime) == 0x00001C, "Member 'FTresGumiShipGimmickTreasureDataTable::M_Dirtime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureDataTable, M_InitalRot) == 0x000020, "Member 'FTresGumiShipGimmickTreasureDataTable::M_InitalRot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureDataTable, M_AnswerRot) == 0x00002C, "Member 'FTresGumiShipGimmickTreasureDataTable::M_AnswerRot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureDataTable, M_PrizeOutPos) == 0x000038, "Member 'FTresGumiShipGimmickTreasureDataTable::M_PrizeOutPos' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureDataTable, M_DummyMesh) == 0x000039, "Member 'FTresGumiShipGimmickTreasureDataTable::M_DummyMesh' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureDataTable, M_PrizeOutOffset) == 0x00003C, "Member 'FTresGumiShipGimmickTreasureDataTable::M_PrizeOutOffset' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureDataTable, M_ImpactMash) == 0x000048, "Member 'FTresGumiShipGimmickTreasureDataTable::M_ImpactMash' has a wrong offset!");

// ScriptStruct TresGame.MaskedJoint
// 0x1149DBF0 (0x1149DBF0 - 0x0000)
struct alignas(0x1149DBF0) FMaskedJoint final
{
public:
	struct FBoneReference                         Joint;                                             // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Percentage;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x64];                                      // 0x001C(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaskedJoint) == 0x1149DBF0, "Wrong alignment on FMaskedJoint");
static_assert(sizeof(FMaskedJoint) == 0x1149DBF0, "Wrong size on FMaskedJoint");
static_assert(offsetof(FMaskedJoint, Joint) == 0x000000, "Member 'FMaskedJoint::Joint' has a wrong offset!");
static_assert(offsetof(FMaskedJoint, Percentage) == 0x000018, "Member 'FMaskedJoint::Percentage' has a wrong offset!");

// ScriptStruct TresGame.MaskedJointChain
// 0x0010 (0x0010 - 0x0000)
struct FMaskedJointChain final
{
public:
	TArray<struct FMaskedJoint>                   MaskedJoints;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaskedJointChain) == 0x000008, "Wrong alignment on FMaskedJointChain");
static_assert(sizeof(FMaskedJointChain) == 0x000010, "Wrong size on FMaskedJointChain");
static_assert(offsetof(FMaskedJointChain, MaskedJoints) == 0x000000, "Member 'FMaskedJointChain::MaskedJoints' has a wrong offset!");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanWindAngle
// 0x0008 (0x4CDE - 0x4CD6)
struct alignas(0x4CDE) FTresTaggedActorPropertyValue_OceanWindAngle final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanWindAngle) == 0x004CDE, "Wrong alignment on FTresTaggedActorPropertyValue_OceanWindAngle");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanWindAngle) == 0x004CDE, "Wrong size on FTresTaggedActorPropertyValue_OceanWindAngle");

// ScriptStruct TresGame.SQEX_DesignatedAttachData
// 0x0010 (0x0010 - 0x0000)
struct FSQEX_DesignatedAttachData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_ParticleAttachDataAsset*          DesignatedAttachData;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_DesignatedAttachData) == 0x000008, "Wrong alignment on FSQEX_DesignatedAttachData");
static_assert(sizeof(FSQEX_DesignatedAttachData) == 0x000010, "Wrong size on FSQEX_DesignatedAttachData");
static_assert(offsetof(FSQEX_DesignatedAttachData, Key) == 0x000000, "Member 'FSQEX_DesignatedAttachData::Key' has a wrong offset!");
static_assert(offsetof(FSQEX_DesignatedAttachData, DesignatedAttachData) == 0x000008, "Member 'FSQEX_DesignatedAttachData::DesignatedAttachData' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleBombInterferedParam
// 0x000C (0x000C - 0x0000)
struct FTresWinniePuzzleBombInterferedParam final
{
public:
	bool                                          IsInterfereUnits;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceWithInterferedUnitOnSimulate;              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInterfereUnitsFloat;                             // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleBombInterferedParam) == 0x000004, "Wrong alignment on FTresWinniePuzzleBombInterferedParam");
static_assert(sizeof(FTresWinniePuzzleBombInterferedParam) == 0x00000C, "Wrong size on FTresWinniePuzzleBombInterferedParam");
static_assert(offsetof(FTresWinniePuzzleBombInterferedParam, IsInterfereUnits) == 0x000000, "Member 'FTresWinniePuzzleBombInterferedParam::IsInterfereUnits' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBombInterferedParam, DistanceWithInterferedUnitOnSimulate) == 0x000004, "Member 'FTresWinniePuzzleBombInterferedParam::DistanceWithInterferedUnitOnSimulate' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBombInterferedParam, IsInterfereUnitsFloat) == 0x000008, "Member 'FTresWinniePuzzleBombInterferedParam::IsInterfereUnitsFloat' has a wrong offset!");

// ScriptStruct TresGame.TresRemyCookingGameDataTableBase
// 0x15FB10 (0x11572B90 - 0x11413080)
#pragma pack(push, 0x1)
struct alignas(0x11572B90) FTresRemyCookingGameDataTableBase : public FTableRowBase
{
public:
	float                                         GameDuration;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialMaxAmount;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialIncreasingCorrect;                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuccessPercent;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GreatSuccessPercent;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TooManyPercent;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
#pragma pack(pop)
static_assert(alignof(FTresRemyCookingGameDataTableBase) == 0x11572B90, "Wrong alignment on FTresRemyCookingGameDataTableBase");
static_assert(sizeof(FTresRemyCookingGameDataTableBase) == 0x11572B90, "Wrong size on FTresRemyCookingGameDataTableBase");
static_assert(offsetof(FTresRemyCookingGameDataTableBase, GameDuration) == 0x000008, "Member 'FTresRemyCookingGameDataTableBase::GameDuration' has a wrong offset!");
static_assert(offsetof(FTresRemyCookingGameDataTableBase, MaterialMaxAmount) == 0x00000C, "Member 'FTresRemyCookingGameDataTableBase::MaterialMaxAmount' has a wrong offset!");
static_assert(offsetof(FTresRemyCookingGameDataTableBase, MaterialIncreasingCorrect) == 0x000010, "Member 'FTresRemyCookingGameDataTableBase::MaterialIncreasingCorrect' has a wrong offset!");
static_assert(offsetof(FTresRemyCookingGameDataTableBase, SuccessPercent) == 0x000014, "Member 'FTresRemyCookingGameDataTableBase::SuccessPercent' has a wrong offset!");
static_assert(offsetof(FTresRemyCookingGameDataTableBase, GreatSuccessPercent) == 0x000018, "Member 'FTresRemyCookingGameDataTableBase::GreatSuccessPercent' has a wrong offset!");
static_assert(offsetof(FTresRemyCookingGameDataTableBase, TooManyPercent) == 0x00001C, "Member 'FTresRemyCookingGameDataTableBase::TooManyPercent' has a wrong offset!");

// ScriptStruct TresGame.TresRemyEggCrackingV2DataTable
// 0x09F0 (0x11573580 - 0x11572B90)
struct alignas(0x11573580) FTresRemyEggCrackingV2DataTable final : public FTresRemyCookingGameDataTableBase
{
public:
	float                                         RightStickEggCrackingValue;                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TooInclinedPercent;                                // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRemyEggCrackingV2DataTable) == 0x11573580, "Wrong alignment on FTresRemyEggCrackingV2DataTable");
static_assert(sizeof(FTresRemyEggCrackingV2DataTable) == 0x11573580, "Wrong size on FTresRemyEggCrackingV2DataTable");
static_assert(offsetof(FTresRemyEggCrackingV2DataTable, RightStickEggCrackingValue) == 0x000020, "Member 'FTresRemyEggCrackingV2DataTable::RightStickEggCrackingValue' has a wrong offset!");
static_assert(offsetof(FTresRemyEggCrackingV2DataTable, TooInclinedPercent) == 0x000024, "Member 'FTresRemyEggCrackingV2DataTable::TooInclinedPercent' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_ModifyBoneCurveParam
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresAnimNode_ModifyBoneCurveParam final
{
public:
	struct FBoneReference                         M_BoneToModify;                                    // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneModificationMode                         M_RotationMode;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           M_InterpRotationCurve;                             // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_InterpRotationOffset;                            // 0x0028(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAnimNode_ModifyBoneCurveParam) == 0x112E9AF0, "Wrong alignment on FTresAnimNode_ModifyBoneCurveParam");
static_assert(sizeof(FTresAnimNode_ModifyBoneCurveParam) == 0x112E9AF0, "Wrong size on FTresAnimNode_ModifyBoneCurveParam");
static_assert(offsetof(FTresAnimNode_ModifyBoneCurveParam, M_BoneToModify) == 0x000000, "Member 'FTresAnimNode_ModifyBoneCurveParam::M_BoneToModify' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ModifyBoneCurveParam, M_RotationMode) == 0x000018, "Member 'FTresAnimNode_ModifyBoneCurveParam::M_RotationMode' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ModifyBoneCurveParam, M_InterpRotationCurve) == 0x000020, "Member 'FTresAnimNode_ModifyBoneCurveParam::M_InterpRotationCurve' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ModifyBoneCurveParam, M_InterpRotationOffset) == 0x000028, "Member 'FTresAnimNode_ModifyBoneCurveParam::M_InterpRotationOffset' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_ModifyBoneCurve
// 0x1128D (0x112BD - 0x0030)
struct FTresAnimNode_ModifyBoneCurve final : public FAnimNode_Base
{
public:
	uint8                                         Pad_30[0x90];                                      // 0x0030(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              SourcePose;                                        // 0x00C0(0x112BD)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_CurvePosition;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresAnimNode_ModifyBoneCurveParam> M_InterpParams;                                    // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAnimNode_ModifyBoneCurve) == 0x0112BD, "Wrong alignment on FTresAnimNode_ModifyBoneCurve");
static_assert(sizeof(FTresAnimNode_ModifyBoneCurve) == 0x0112BD, "Wrong size on FTresAnimNode_ModifyBoneCurve");
static_assert(offsetof(FTresAnimNode_ModifyBoneCurve, SourcePose) == 0x0000C0, "Member 'FTresAnimNode_ModifyBoneCurve::SourcePose' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ModifyBoneCurve, M_CurvePosition) == 0x0000D8, "Member 'FTresAnimNode_ModifyBoneCurve::M_CurvePosition' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_ModifyBoneCurve, M_InterpParams) == 0x0000E0, "Member 'FTresAnimNode_ModifyBoneCurve::M_InterpParams' has a wrong offset!");

// ScriptStruct TresGame.TresCodeMenuChallengeScoreInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresCodeMenuChallengeScoreInfo final
{
public:
	ETresDlcChallengeScoreID                      M_Code;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         M_NameIds;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCodeMenuChallengeScoreInfo) == 0x000008, "Wrong alignment on FTresCodeMenuChallengeScoreInfo");
static_assert(sizeof(FTresCodeMenuChallengeScoreInfo) == 0x000018, "Wrong size on FTresCodeMenuChallengeScoreInfo");
static_assert(offsetof(FTresCodeMenuChallengeScoreInfo, M_Code) == 0x000000, "Member 'FTresCodeMenuChallengeScoreInfo::M_Code' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuChallengeScoreInfo, M_NameIds) == 0x000008, "Member 'FTresCodeMenuChallengeScoreInfo::M_NameIds' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuCustomPart
// 0x0010 (0x0010 - 0x0000)
struct FTresDebugMenuCustomPart final
{
public:
	ETresDebugMenuResourceType                    M_ResourceType;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ResourceIndex;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTresDebugMenuObject>       CustomClass;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuCustomPart) == 0x000008, "Wrong alignment on FTresDebugMenuCustomPart");
static_assert(sizeof(FTresDebugMenuCustomPart) == 0x000010, "Wrong size on FTresDebugMenuCustomPart");
static_assert(offsetof(FTresDebugMenuCustomPart, M_ResourceType) == 0x000000, "Member 'FTresDebugMenuCustomPart::M_ResourceType' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuCustomPart, M_ResourceIndex) == 0x000004, "Member 'FTresDebugMenuCustomPart::M_ResourceIndex' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuCustomPart, CustomClass) == 0x000008, "Member 'FTresDebugMenuCustomPart::CustomClass' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_SaveCachedPose
// 0x1128D (0x112BD - 0x0030)
struct FTresAnimNode_SaveCachedPose final : public FAnimNode_Base
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0030(0x112BD)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAnimNode_SaveCachedPose) == 0x0112BD, "Wrong alignment on FTresAnimNode_SaveCachedPose");
static_assert(sizeof(FTresAnimNode_SaveCachedPose) == 0x0112BD, "Wrong size on FTresAnimNode_SaveCachedPose");
static_assert(offsetof(FTresAnimNode_SaveCachedPose, SourcePose) == 0x000030, "Member 'FTresAnimNode_SaveCachedPose::SourcePose' has a wrong offset!");

// ScriptStruct TresGame.DebrisStatePatternSet_e_he903
// 0x0018 (0x0018 - 0x0000)
struct FDebrisStatePatternSet_e_he903 final
{
public:
	TArray<struct FDebrisStatePattern_e_he903>    M_DebrisStatePatternArray;                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebrisStatePatternSet_e_he903) == 0x000008, "Wrong alignment on FDebrisStatePatternSet_e_he903");
static_assert(sizeof(FDebrisStatePatternSet_e_he903) == 0x000018, "Wrong size on FDebrisStatePatternSet_e_he903");
static_assert(offsetof(FDebrisStatePatternSet_e_he903, M_DebrisStatePatternArray) == 0x000000, "Member 'FDebrisStatePatternSet_e_he903::M_DebrisStatePatternArray' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_SplineAnchor
// 0x11498F80 (0x11498FB0 - 0x0030)
struct FTresAnimNode_SplineAnchor final : public FAnimNode_Base
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0030(0x112BD)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x004C(0x11498FB0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_IsAnchorMode;                                    // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_TargetLocation;                                  // 0x0058(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         M_EffectNode;                                      // 0x0068(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         M_BaseNode;                                        // 0x0080(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	ETresSplineAnchorInterpType                   M_InterpType;                                      // 0x0098(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInterpCurveVector                     M_InterpLocationInfo;                              // 0x00A0(0x112ED410)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAnimNode_SplineAnchor) == 0x11498FB0, "Wrong alignment on FTresAnimNode_SplineAnchor");
static_assert(sizeof(FTresAnimNode_SplineAnchor) == 0x11498FB0, "Wrong size on FTresAnimNode_SplineAnchor");
static_assert(offsetof(FTresAnimNode_SplineAnchor, SourcePose) == 0x000030, "Member 'FTresAnimNode_SplineAnchor::SourcePose' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_SplineAnchor, Alpha) == 0x000048, "Member 'FTresAnimNode_SplineAnchor::Alpha' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_SplineAnchor, AlphaScaleBias) == 0x00004C, "Member 'FTresAnimNode_SplineAnchor::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_SplineAnchor, M_IsAnchorMode) == 0x000054, "Member 'FTresAnimNode_SplineAnchor::M_IsAnchorMode' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_SplineAnchor, M_TargetLocation) == 0x000058, "Member 'FTresAnimNode_SplineAnchor::M_TargetLocation' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_SplineAnchor, M_EffectNode) == 0x000068, "Member 'FTresAnimNode_SplineAnchor::M_EffectNode' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_SplineAnchor, M_BaseNode) == 0x000080, "Member 'FTresAnimNode_SplineAnchor::M_BaseNode' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_SplineAnchor, M_InterpType) == 0x000098, "Member 'FTresAnimNode_SplineAnchor::M_InterpType' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_SplineAnchor, M_InterpLocationInfo) == 0x0000A0, "Member 'FTresAnimNode_SplineAnchor::M_InterpLocationInfo' has a wrong offset!");

// ScriptStruct TresGame.TresFoodItemEffectDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresFoodItemEffectDataTable final : public FTableRowBase
{
public:
	class FString                                 M_Comment;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxHPPlus;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxMPPlus;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttackPlus;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MagicPlus;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_DefensePlus;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_FoodItemLevel;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bPlusFoodItem;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresFoodItemEffectDataTable) == 0x11413080, "Wrong alignment on FTresFoodItemEffectDataTable");
static_assert(sizeof(FTresFoodItemEffectDataTable) == 0x11413080, "Wrong size on FTresFoodItemEffectDataTable");
static_assert(offsetof(FTresFoodItemEffectDataTable, M_Comment) == 0x000008, "Member 'FTresFoodItemEffectDataTable::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresFoodItemEffectDataTable, M_MaxHPPlus) == 0x000018, "Member 'FTresFoodItemEffectDataTable::M_MaxHPPlus' has a wrong offset!");
static_assert(offsetof(FTresFoodItemEffectDataTable, M_MaxMPPlus) == 0x00001C, "Member 'FTresFoodItemEffectDataTable::M_MaxMPPlus' has a wrong offset!");
static_assert(offsetof(FTresFoodItemEffectDataTable, M_AttackPlus) == 0x000020, "Member 'FTresFoodItemEffectDataTable::M_AttackPlus' has a wrong offset!");
static_assert(offsetof(FTresFoodItemEffectDataTable, M_MagicPlus) == 0x000024, "Member 'FTresFoodItemEffectDataTable::M_MagicPlus' has a wrong offset!");
static_assert(offsetof(FTresFoodItemEffectDataTable, M_DefensePlus) == 0x000028, "Member 'FTresFoodItemEffectDataTable::M_DefensePlus' has a wrong offset!");
static_assert(offsetof(FTresFoodItemEffectDataTable, M_FoodItemLevel) == 0x00002C, "Member 'FTresFoodItemEffectDataTable::M_FoodItemLevel' has a wrong offset!");
static_assert(offsetof(FTresFoodItemEffectDataTable, M_bPlusFoodItem) == 0x000030, "Member 'FTresFoodItemEffectDataTable::M_bPlusFoodItem' has a wrong offset!");

// ScriptStruct TresGame.EX354_ArtemaWarpShotProjInfo
// 0x114AEA70 (0x114AEA70 - 0x0000)
struct alignas(0x114AEA70) FEX354_ArtemaWarpShotProjInfo final
{
public:
	float                                         M_fShotWaitTime;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTargetPastDestroyDistance;                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCenterPastDestroyDistance;                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_ArtemaWarpShotProjInfo) == 0x114AEA70, "Wrong alignment on FEX354_ArtemaWarpShotProjInfo");
static_assert(sizeof(FEX354_ArtemaWarpShotProjInfo) == 0x114AEA70, "Wrong size on FEX354_ArtemaWarpShotProjInfo");
static_assert(offsetof(FEX354_ArtemaWarpShotProjInfo, M_fShotWaitTime) == 0x000000, "Member 'FEX354_ArtemaWarpShotProjInfo::M_fShotWaitTime' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotProjInfo, M_fTargetPastDestroyDistance) == 0x000004, "Member 'FEX354_ArtemaWarpShotProjInfo::M_fTargetPastDestroyDistance' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotProjInfo, M_fCenterPastDestroyDistance) == 0x000008, "Member 'FEX354_ArtemaWarpShotProjInfo::M_fCenterPastDestroyDistance' has a wrong offset!");

// ScriptStruct TresGame.EX354_ArtemaWarpShotGridSet
// 0x0020 (0x0020 - 0x0000)
struct FEX354_ArtemaWarpShotGridSet final
{
public:
	int32                                         M_iGridNumX;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iGridNumY;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AvoidOverrapScale;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEX354_ArtemaWarpShotGrid>      M_GridArray;                                       // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEX354_ArtemaWarpShotGridSet) == 0x000008, "Wrong alignment on FEX354_ArtemaWarpShotGridSet");
static_assert(sizeof(FEX354_ArtemaWarpShotGridSet) == 0x000020, "Wrong size on FEX354_ArtemaWarpShotGridSet");
static_assert(offsetof(FEX354_ArtemaWarpShotGridSet, M_iGridNumX) == 0x000000, "Member 'FEX354_ArtemaWarpShotGridSet::M_iGridNumX' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotGridSet, M_iGridNumY) == 0x000004, "Member 'FEX354_ArtemaWarpShotGridSet::M_iGridNumY' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotGridSet, M_AvoidOverrapScale) == 0x000008, "Member 'FEX354_ArtemaWarpShotGridSet::M_AvoidOverrapScale' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotGridSet, M_GridArray) == 0x000010, "Member 'FEX354_ArtemaWarpShotGridSet::M_GridArray' has a wrong offset!");

// ScriptStruct TresGame.EX354_ArtemaWarpShotInfo
// 0x114AEA70 (0x114AEA70 - 0x0000)
struct FEX354_ArtemaWarpShotInfo final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fMaxShotTime;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fShotInterval;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fWaitTime;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEX354_ArtemaWarpShotProjInfo          M_ProjInfo;                                        // 0x0010(0x114AEA70)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bSpawnInRectangle;                               // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fSpawnLocDeviationXY;                            // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpawnLocDeviationX;                             // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpawnLocDeviationY;                             // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpawnLocDeviationZ;                             // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bAimInRectangle;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fAimLocDeviationRadius;                          // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAimLocDeviationX;                               // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAimLocDeviationY;                               // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEX354_ArtemaWarpShotGridSet           M_GridSet;                                         // 0x0040(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          M_bUseGrid;                                        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               M_rAimLocOffsetRot;                                // 0x0064(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_fAimLocMaxTargetVelocity;                        // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAimLocTargetVelocityRate;                       // 0x0074(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bAimLocTargetVelocity2D;                         // 0x0078(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bAimLocEachShot;                                 // 0x0079(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_EqsIndex;                                        // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bRefreshEQS;                                     // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX354_ArtemaWarpShotInfo) == 0x114AEA70, "Wrong alignment on FEX354_ArtemaWarpShotInfo");
static_assert(sizeof(FEX354_ArtemaWarpShotInfo) == 0x114AEA70, "Wrong size on FEX354_ArtemaWarpShotInfo");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fMaxShotTime) == 0x000004, "Member 'FEX354_ArtemaWarpShotInfo::M_fMaxShotTime' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fShotInterval) == 0x000008, "Member 'FEX354_ArtemaWarpShotInfo::M_fShotInterval' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fWaitTime) == 0x00000C, "Member 'FEX354_ArtemaWarpShotInfo::M_fWaitTime' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_ProjInfo) == 0x000010, "Member 'FEX354_ArtemaWarpShotInfo::M_ProjInfo' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_bSpawnInRectangle) == 0x00001C, "Member 'FEX354_ArtemaWarpShotInfo::M_bSpawnInRectangle' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fSpawnLocDeviationXY) == 0x000020, "Member 'FEX354_ArtemaWarpShotInfo::M_fSpawnLocDeviationXY' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fSpawnLocDeviationX) == 0x000024, "Member 'FEX354_ArtemaWarpShotInfo::M_fSpawnLocDeviationX' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fSpawnLocDeviationY) == 0x000028, "Member 'FEX354_ArtemaWarpShotInfo::M_fSpawnLocDeviationY' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fSpawnLocDeviationZ) == 0x00002C, "Member 'FEX354_ArtemaWarpShotInfo::M_fSpawnLocDeviationZ' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_bAimInRectangle) == 0x000030, "Member 'FEX354_ArtemaWarpShotInfo::M_bAimInRectangle' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fAimLocDeviationRadius) == 0x000034, "Member 'FEX354_ArtemaWarpShotInfo::M_fAimLocDeviationRadius' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fAimLocDeviationX) == 0x000038, "Member 'FEX354_ArtemaWarpShotInfo::M_fAimLocDeviationX' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fAimLocDeviationY) == 0x00003C, "Member 'FEX354_ArtemaWarpShotInfo::M_fAimLocDeviationY' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_GridSet) == 0x000040, "Member 'FEX354_ArtemaWarpShotInfo::M_GridSet' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_bUseGrid) == 0x000060, "Member 'FEX354_ArtemaWarpShotInfo::M_bUseGrid' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_rAimLocOffsetRot) == 0x000064, "Member 'FEX354_ArtemaWarpShotInfo::M_rAimLocOffsetRot' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fAimLocMaxTargetVelocity) == 0x000070, "Member 'FEX354_ArtemaWarpShotInfo::M_fAimLocMaxTargetVelocity' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_fAimLocTargetVelocityRate) == 0x000074, "Member 'FEX354_ArtemaWarpShotInfo::M_fAimLocTargetVelocityRate' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_bAimLocTargetVelocity2D) == 0x000078, "Member 'FEX354_ArtemaWarpShotInfo::M_bAimLocTargetVelocity2D' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_bAimLocEachShot) == 0x000079, "Member 'FEX354_ArtemaWarpShotInfo::M_bAimLocEachShot' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_EqsIndex) == 0x00007C, "Member 'FEX354_ArtemaWarpShotInfo::M_EqsIndex' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotInfo, M_bRefreshEQS) == 0x000080, "Member 'FEX354_ArtemaWarpShotInfo::M_bRefreshEQS' has a wrong offset!");

// ScriptStruct TresGame.EX354_ArtemaWarpShotSet
// 0x0068 (0x0068 - 0x0000)
struct FEX354_ArtemaWarpShotSet final
{
public:
	TArray<struct FEX354_ArtemaWarpShotInfo>      M_ArtemaWarpShotInfoArray;                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          M_bSendEventOnEnd;                                 // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIgnoreTargetModify;                             // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_Target;                                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x40];                                      // 0x0028(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX354_ArtemaWarpShotSet) == 0x000008, "Wrong alignment on FEX354_ArtemaWarpShotSet");
static_assert(sizeof(FEX354_ArtemaWarpShotSet) == 0x000068, "Wrong size on FEX354_ArtemaWarpShotSet");
static_assert(offsetof(FEX354_ArtemaWarpShotSet, M_ArtemaWarpShotInfoArray) == 0x000000, "Member 'FEX354_ArtemaWarpShotSet::M_ArtemaWarpShotInfoArray' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSet, M_bSendEventOnEnd) == 0x000010, "Member 'FEX354_ArtemaWarpShotSet::M_bSendEventOnEnd' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSet, M_bIgnoreTargetModify) == 0x000011, "Member 'FEX354_ArtemaWarpShotSet::M_bIgnoreTargetModify' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSet, M_Owner) == 0x000018, "Member 'FEX354_ArtemaWarpShotSet::M_Owner' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSet, M_Target) == 0x000020, "Member 'FEX354_ArtemaWarpShotSet::M_Target' has a wrong offset!");

// ScriptStruct TresGame.TresTwoBoneLegIKDefinition
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresTwoBoneLegIKDefinition final
{
public:
	bool                                          bUseMayaSolver;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKBone;                                            // 0x0008(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocation;                                  // 0x0020(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0xC];                                       // 0x002C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                JointTargetLocation;                               // 0x0038(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EffectorSpaceBoneName;                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTakeRotationFromEffectorSpace;                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainEffectorRelRot;                           // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowStretching;                                  // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartStretchRatio;                                 // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStretchScale;                                   // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             JointTargetLocationSpace;                          // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   JointTargetSpaceBoneName;                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTwist;                                       // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAxis                                  TwistAxis;                                         // 0x006C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMaintainEffectorHitNormal;                        // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaintainEffectorLimitRotX;                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaintainEffectorLimitRotY;                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaintainEffectorLimitRotZ;                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresIkCollision                              CollisionShape;                                    // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CollisionOffset;                                   // 0x0090(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CollisionRotation;                                 // 0x009C(0x112E9AF0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CollisionSize;                                     // 0x00A8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckMin;                                          // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckMax;                                          // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0xC];                                       // 0x00BC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         ShouldMimicOtherLimbWhenNoCollision : 1;           // 0x00C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 LimbsToMimicWhenNoCollision;                       // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x10];                                      // 0x00E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitTwoBoneIkInternalAngle;                       // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         ReturnEffectLocatonIfCollisionNoHit : 1;           // 0x00F8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTwoBoneLegIKDefinition) == 0x112E9AF0, "Wrong alignment on FTresTwoBoneLegIKDefinition");
static_assert(sizeof(FTresTwoBoneLegIKDefinition) == 0x112E9AF0, "Wrong size on FTresTwoBoneLegIKDefinition");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, bUseMayaSolver) == 0x000000, "Member 'FTresTwoBoneLegIKDefinition::bUseMayaSolver' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, IKBone) == 0x000008, "Member 'FTresTwoBoneLegIKDefinition::IKBone' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, EffectorLocation) == 0x000020, "Member 'FTresTwoBoneLegIKDefinition::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, JointTargetLocation) == 0x000038, "Member 'FTresTwoBoneLegIKDefinition::JointTargetLocation' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, EffectorSpaceBoneName) == 0x000048, "Member 'FTresTwoBoneLegIKDefinition::EffectorSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, bTakeRotationFromEffectorSpace) == 0x000050, "Member 'FTresTwoBoneLegIKDefinition::bTakeRotationFromEffectorSpace' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, bMaintainEffectorRelRot) == 0x000051, "Member 'FTresTwoBoneLegIKDefinition::bMaintainEffectorRelRot' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, bAllowStretching) == 0x000052, "Member 'FTresTwoBoneLegIKDefinition::bAllowStretching' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, StartStretchRatio) == 0x000054, "Member 'FTresTwoBoneLegIKDefinition::StartStretchRatio' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, MaxStretchScale) == 0x000058, "Member 'FTresTwoBoneLegIKDefinition::MaxStretchScale' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, EffectorLocationSpace) == 0x00005C, "Member 'FTresTwoBoneLegIKDefinition::EffectorLocationSpace' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, JointTargetLocationSpace) == 0x00005D, "Member 'FTresTwoBoneLegIKDefinition::JointTargetLocationSpace' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, JointTargetSpaceBoneName) == 0x000060, "Member 'FTresTwoBoneLegIKDefinition::JointTargetSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, bAllowTwist) == 0x000068, "Member 'FTresTwoBoneLegIKDefinition::bAllowTwist' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, TwistAxis) == 0x00006C, "Member 'FTresTwoBoneLegIKDefinition::TwistAxis' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, bMaintainEffectorHitNormal) == 0x00007C, "Member 'FTresTwoBoneLegIKDefinition::bMaintainEffectorHitNormal' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, MaintainEffectorLimitRotX) == 0x000080, "Member 'FTresTwoBoneLegIKDefinition::MaintainEffectorLimitRotX' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, MaintainEffectorLimitRotY) == 0x000084, "Member 'FTresTwoBoneLegIKDefinition::MaintainEffectorLimitRotY' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, MaintainEffectorLimitRotZ) == 0x000088, "Member 'FTresTwoBoneLegIKDefinition::MaintainEffectorLimitRotZ' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, CollisionShape) == 0x00008C, "Member 'FTresTwoBoneLegIKDefinition::CollisionShape' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, CollisionOffset) == 0x000090, "Member 'FTresTwoBoneLegIKDefinition::CollisionOffset' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, CollisionRotation) == 0x00009C, "Member 'FTresTwoBoneLegIKDefinition::CollisionRotation' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, CollisionSize) == 0x0000A8, "Member 'FTresTwoBoneLegIKDefinition::CollisionSize' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, CheckMin) == 0x0000B4, "Member 'FTresTwoBoneLegIKDefinition::CheckMin' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, CheckMax) == 0x0000B8, "Member 'FTresTwoBoneLegIKDefinition::CheckMax' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, LimbsToMimicWhenNoCollision) == 0x0000D0, "Member 'FTresTwoBoneLegIKDefinition::LimbsToMimicWhenNoCollision' has a wrong offset!");
static_assert(offsetof(FTresTwoBoneLegIKDefinition, LimitTwoBoneIkInternalAngle) == 0x0000F0, "Member 'FTresTwoBoneLegIKDefinition::LimitTwoBoneIkInternalAngle' has a wrong offset!");

// ScriptStruct TresGame.PDControllerScalar
// 0x1149CFD0 (0x1149CFD0 - 0x0000)
struct alignas(0x1149CFD0) FPDControllerScalar final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Gain;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x8];                                        // 0x000C(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPDControllerScalar) == 0x1149CFD0, "Wrong alignment on FPDControllerScalar");
static_assert(sizeof(FPDControllerScalar) == 0x1149CFD0, "Wrong size on FPDControllerScalar");
static_assert(offsetof(FPDControllerScalar, Gain) == 0x000008, "Member 'FPDControllerScalar::Gain' has a wrong offset!");

// ScriptStruct TresGame.TresAnimNode_TwoBoneIKMultiped
// 0x4020 (0x1149CFD0 - 0x11498FB0)
struct FTresAnimNode_TwoBoneIKMultiped final : public FAnimNode_SkeletalControlBase
{
public:
	bool                                          bUseMayaSolver;                                    // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         HipsTransform;                                     // 0x0078(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HipsOffsetPercentage;                              // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipsRotationLimit;                                 // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipsRotationResetLimit;                            // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLimitHipsTransHeight : 1;                         // 0x009C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExHitpsRotateDetect : 1;                          // 0x009C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExHitpsRotateDetectSampleNum;                      // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExHitpsRotateDetectRadius;                         // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExHitpsRotateDetectCheckMax;                       // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExHitpsRotateDetectCheckMin;                       // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresTwoBoneLegIKDefinition>    IKDefs;                                            // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaskedJointChain>              MaskedJointChains;                                 // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MyDeltaTime;                                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaycastCacheMaximumTranslation;                    // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaycastCacheMaximumRotation;                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaycastForceFrameRate;                             // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_RaycastCacheRootDisplacement;                    // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_KeepHighestRaycastHitInSmallRadius;              // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_KeepHighest_XY_MaxRadius;                        // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x4];                                       // 0x00E8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_KeepHighest_Z_Displacement;                      // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x4];                                       // 0x00F0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootSmoothingVelocity;                             // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeStartSmoothing;                                // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebug;                                         // 0x00FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x33];                                      // 0x00FD(0x0033)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPDControllerScalar                    HipsController;                                    // 0x0130(0x1149CFD0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAnimNode_TwoBoneIKMultiped) == 0x1149CFD0, "Wrong alignment on FTresAnimNode_TwoBoneIKMultiped");
static_assert(sizeof(FTresAnimNode_TwoBoneIKMultiped) == 0x1149CFD0, "Wrong size on FTresAnimNode_TwoBoneIKMultiped");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, bUseMayaSolver) == 0x000070, "Member 'FTresAnimNode_TwoBoneIKMultiped::bUseMayaSolver' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, HipsTransform) == 0x000078, "Member 'FTresAnimNode_TwoBoneIKMultiped::HipsTransform' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, HipsOffsetPercentage) == 0x000090, "Member 'FTresAnimNode_TwoBoneIKMultiped::HipsOffsetPercentage' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, HipsRotationLimit) == 0x000094, "Member 'FTresAnimNode_TwoBoneIKMultiped::HipsRotationLimit' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, HipsRotationResetLimit) == 0x000098, "Member 'FTresAnimNode_TwoBoneIKMultiped::HipsRotationResetLimit' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, ExHitpsRotateDetectSampleNum) == 0x0000A0, "Member 'FTresAnimNode_TwoBoneIKMultiped::ExHitpsRotateDetectSampleNum' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, ExHitpsRotateDetectRadius) == 0x0000A4, "Member 'FTresAnimNode_TwoBoneIKMultiped::ExHitpsRotateDetectRadius' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, ExHitpsRotateDetectCheckMax) == 0x0000A8, "Member 'FTresAnimNode_TwoBoneIKMultiped::ExHitpsRotateDetectCheckMax' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, ExHitpsRotateDetectCheckMin) == 0x0000AC, "Member 'FTresAnimNode_TwoBoneIKMultiped::ExHitpsRotateDetectCheckMin' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, IKDefs) == 0x0000B0, "Member 'FTresAnimNode_TwoBoneIKMultiped::IKDefs' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, MaskedJointChains) == 0x0000C0, "Member 'FTresAnimNode_TwoBoneIKMultiped::MaskedJointChains' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, MyDeltaTime) == 0x0000D0, "Member 'FTresAnimNode_TwoBoneIKMultiped::MyDeltaTime' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, RaycastCacheMaximumTranslation) == 0x0000D4, "Member 'FTresAnimNode_TwoBoneIKMultiped::RaycastCacheMaximumTranslation' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, RaycastCacheMaximumRotation) == 0x0000D8, "Member 'FTresAnimNode_TwoBoneIKMultiped::RaycastCacheMaximumRotation' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, RaycastForceFrameRate) == 0x0000DC, "Member 'FTresAnimNode_TwoBoneIKMultiped::RaycastForceFrameRate' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, M_RaycastCacheRootDisplacement) == 0x0000E0, "Member 'FTresAnimNode_TwoBoneIKMultiped::M_RaycastCacheRootDisplacement' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, M_KeepHighestRaycastHitInSmallRadius) == 0x0000E1, "Member 'FTresAnimNode_TwoBoneIKMultiped::M_KeepHighestRaycastHitInSmallRadius' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, M_KeepHighest_XY_MaxRadius) == 0x0000E4, "Member 'FTresAnimNode_TwoBoneIKMultiped::M_KeepHighest_XY_MaxRadius' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, M_KeepHighest_Z_Displacement) == 0x0000EC, "Member 'FTresAnimNode_TwoBoneIKMultiped::M_KeepHighest_Z_Displacement' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, FootSmoothingVelocity) == 0x0000F4, "Member 'FTresAnimNode_TwoBoneIKMultiped::FootSmoothingVelocity' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, TimeStartSmoothing) == 0x0000F8, "Member 'FTresAnimNode_TwoBoneIKMultiped::TimeStartSmoothing' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, DrawDebug) == 0x0000FC, "Member 'FTresAnimNode_TwoBoneIKMultiped::DrawDebug' has a wrong offset!");
static_assert(offsetof(FTresAnimNode_TwoBoneIKMultiped, HipsController) == 0x000130, "Member 'FTresAnimNode_TwoBoneIKMultiped::HipsController' has a wrong offset!");

// ScriptStruct TresGame.BX901_DarkCubeMineSpawnInfo
// 0x0050 (0x0050 - 0x0000)
struct FBX901_DarkCubeMineSpawnInfo final
{
public:
	TSubclassOf<class ATresProjectileBase>        M_Projectile;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBX901_DarkCubeMineProjInfo>    M_ProjeInfoArray;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class ATresProjectileBase>        M_JointActorClass;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_JointInfo;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iMaxDestroyComboNum;                             // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDestroyComboTime;                               // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_Target;                                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBX901_DarkCubeMineSpawnInfo) == 0x000008, "Wrong alignment on FBX901_DarkCubeMineSpawnInfo");
static_assert(sizeof(FBX901_DarkCubeMineSpawnInfo) == 0x000050, "Wrong size on FBX901_DarkCubeMineSpawnInfo");
static_assert(offsetof(FBX901_DarkCubeMineSpawnInfo, M_Projectile) == 0x000000, "Member 'FBX901_DarkCubeMineSpawnInfo::M_Projectile' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineSpawnInfo, M_ProjeInfoArray) == 0x000008, "Member 'FBX901_DarkCubeMineSpawnInfo::M_ProjeInfoArray' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineSpawnInfo, M_JointActorClass) == 0x000018, "Member 'FBX901_DarkCubeMineSpawnInfo::M_JointActorClass' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineSpawnInfo, M_JointInfo) == 0x000020, "Member 'FBX901_DarkCubeMineSpawnInfo::M_JointInfo' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineSpawnInfo, M_iMaxDestroyComboNum) == 0x000030, "Member 'FBX901_DarkCubeMineSpawnInfo::M_iMaxDestroyComboNum' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineSpawnInfo, M_fDestroyComboTime) == 0x000034, "Member 'FBX901_DarkCubeMineSpawnInfo::M_fDestroyComboTime' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineSpawnInfo, M_Owner) == 0x000038, "Member 'FBX901_DarkCubeMineSpawnInfo::M_Owner' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineSpawnInfo, M_Target) == 0x000040, "Member 'FBX901_DarkCubeMineSpawnInfo::M_Target' has a wrong offset!");

// ScriptStruct TresGame.BX901_DarkCubeMineGroupSpawnInfo
// 0x0078 (0x0078 - 0x0000)
struct FBX901_DarkCubeMineGroupSpawnInfo final
{
public:
	struct FBX901_DarkCubeMineSpawnInfo           M_ProjSpawnInfo;                                   // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         M_fWaitTimeAfterFinish;                            // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_Target;                                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68[0x10];                                      // 0x0068(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBX901_DarkCubeMineGroupSpawnInfo) == 0x000008, "Wrong alignment on FBX901_DarkCubeMineGroupSpawnInfo");
static_assert(sizeof(FBX901_DarkCubeMineGroupSpawnInfo) == 0x000078, "Wrong size on FBX901_DarkCubeMineGroupSpawnInfo");
static_assert(offsetof(FBX901_DarkCubeMineGroupSpawnInfo, M_ProjSpawnInfo) == 0x000000, "Member 'FBX901_DarkCubeMineGroupSpawnInfo::M_ProjSpawnInfo' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineGroupSpawnInfo, M_fWaitTimeAfterFinish) == 0x000050, "Member 'FBX901_DarkCubeMineGroupSpawnInfo::M_fWaitTimeAfterFinish' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineGroupSpawnInfo, M_Owner) == 0x000058, "Member 'FBX901_DarkCubeMineGroupSpawnInfo::M_Owner' has a wrong offset!");
static_assert(offsetof(FBX901_DarkCubeMineGroupSpawnInfo, M_Target) == 0x000060, "Member 'FBX901_DarkCubeMineGroupSpawnInfo::M_Target' has a wrong offset!");

// ScriptStruct TresGame.TresRandomVoiceForTable
// 0x1149FED0 (0x1149FED0 - 0x0000)
struct alignas(0x1149FED0) FTresRandomVoiceForTable final
{
public:
	class USoundBase*                             M_pVoice;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_dRandomWeights;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_MouthMotionName;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRandomVoiceForTable) == 0x1149FED0, "Wrong alignment on FTresRandomVoiceForTable");
static_assert(sizeof(FTresRandomVoiceForTable) == 0x1149FED0, "Wrong size on FTresRandomVoiceForTable");
static_assert(offsetof(FTresRandomVoiceForTable, M_pVoice) == 0x000000, "Member 'FTresRandomVoiceForTable::M_pVoice' has a wrong offset!");
static_assert(offsetof(FTresRandomVoiceForTable, M_dRandomWeights) == 0x000008, "Member 'FTresRandomVoiceForTable::M_dRandomWeights' has a wrong offset!");
static_assert(offsetof(FTresRandomVoiceForTable, M_MouthMotionName) == 0x000010, "Member 'FTresRandomVoiceForTable::M_MouthMotionName' has a wrong offset!");

// ScriptStruct TresGame.RandomTableParameter
// 0x0020 (0x0020 - 0x0000)
struct FRandomTableParameter final
{
public:
	class FName                                   M_GroupName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresRandomVoiceForTable>       M_RandomVoiceAssets;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRandomTableParameter) == 0x000008, "Wrong alignment on FRandomTableParameter");
static_assert(sizeof(FRandomTableParameter) == 0x000020, "Wrong size on FRandomTableParameter");
static_assert(offsetof(FRandomTableParameter, M_GroupName) == 0x000000, "Member 'FRandomTableParameter::M_GroupName' has a wrong offset!");
static_assert(offsetof(FRandomTableParameter, M_RandomVoiceAssets) == 0x000008, "Member 'FRandomTableParameter::M_RandomVoiceAssets' has a wrong offset!");

// ScriptStruct TresGame.TresFriendIdDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresFriendIdDataTable final : public FTableRowBase
{
public:
	class FName                                   M_Name;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresChrUniqueID                              M_UniqueID;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresFriendIdDataTable) == 0x11413080, "Wrong alignment on FTresFriendIdDataTable");
static_assert(sizeof(FTresFriendIdDataTable) == 0x11413080, "Wrong size on FTresFriendIdDataTable");
static_assert(offsetof(FTresFriendIdDataTable, M_Name) == 0x000008, "Member 'FTresFriendIdDataTable::M_Name' has a wrong offset!");
static_assert(offsetof(FTresFriendIdDataTable, M_UniqueID) == 0x000010, "Member 'FTresFriendIdDataTable::M_UniqueID' has a wrong offset!");

// ScriptStruct TresGame.SQEX_AttachEffectTrackDataToDataAsset
// 0x0018 (0x0018 - 0x0000)
struct FSQEX_AttachEffectTrackDataToDataAsset final
{
public:
	uint8                                         bUseCommonAttachData : 1;                          // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQEX_ParticleAttachDataAsset*>  AttachDatas;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_AttachEffectTrackDataToDataAsset) == 0x000008, "Wrong alignment on FSQEX_AttachEffectTrackDataToDataAsset");
static_assert(sizeof(FSQEX_AttachEffectTrackDataToDataAsset) == 0x000018, "Wrong size on FSQEX_AttachEffectTrackDataToDataAsset");
static_assert(offsetof(FSQEX_AttachEffectTrackDataToDataAsset, AttachDatas) == 0x000008, "Member 'FSQEX_AttachEffectTrackDataToDataAsset::AttachDatas' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyPawn_e_ca901_JointParam
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyPawn_e_ca901_JointParam final
{
public:
	class FName                                   M_JointName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         M_OppositeAttachIndex;                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ETresEnemyEx071DeckKind                       M_Kind;                                            // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyPawn_e_ca901_JointParam) == 0x000004, "Wrong alignment on FTresEnemyPawn_e_ca901_JointParam");
static_assert(sizeof(FTresEnemyPawn_e_ca901_JointParam) == 0x000010, "Wrong size on FTresEnemyPawn_e_ca901_JointParam");
static_assert(offsetof(FTresEnemyPawn_e_ca901_JointParam, M_JointName) == 0x000000, "Member 'FTresEnemyPawn_e_ca901_JointParam::M_JointName' has a wrong offset!");
static_assert(offsetof(FTresEnemyPawn_e_ca901_JointParam, M_OppositeAttachIndex) == 0x000008, "Member 'FTresEnemyPawn_e_ca901_JointParam::M_OppositeAttachIndex' has a wrong offset!");
static_assert(offsetof(FTresEnemyPawn_e_ca901_JointParam, M_Kind) == 0x00000C, "Member 'FTresEnemyPawn_e_ca901_JointParam::M_Kind' has a wrong offset!");

// ScriptStruct TresGame.TresRandomVoice
// 0x114A01D0 (0x114A01D0 - 0x0000)
struct alignas(0x114A01D0) FTresRandomVoice final
{
public:
	class USoundBase*                             VOICE;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomWeights;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRandomVoice) == 0x114A01D0, "Wrong alignment on FTresRandomVoice");
static_assert(sizeof(FTresRandomVoice) == 0x114A01D0, "Wrong size on FTresRandomVoice");
static_assert(offsetof(FTresRandomVoice, VOICE) == 0x000000, "Member 'FTresRandomVoice::VOICE' has a wrong offset!");
static_assert(offsetof(FTresRandomVoice, RandomWeights) == 0x000008, "Member 'FTresRandomVoice::RandomWeights' has a wrong offset!");

// ScriptStruct TresGame.TresPlayerSpecialActionLogRecord
// 0x1BF1 (0x1BF1 - 0x0000)
struct alignas(0x1BF1) FTresPlayerSpecialActionLogRecord final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPlayerSpecialActionLogRecord) == 0x001BF1, "Wrong alignment on FTresPlayerSpecialActionLogRecord");
static_assert(sizeof(FTresPlayerSpecialActionLogRecord) == 0x001BF1, "Wrong size on FTresPlayerSpecialActionLogRecord");

// ScriptStruct TresGame.e_ex064_AnimParam
// 0x112F08B0 (0x112F08B0 - 0x0000)
struct FE_ex064_AnimParam final
{
public:
	class FName                                   M_AnimName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Interval                         M_NumRange;                                        // 0x0008(0x112F08B0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FE_ex064_AnimParam) == 0x112F08B0, "Wrong alignment on FE_ex064_AnimParam");
static_assert(sizeof(FE_ex064_AnimParam) == 0x112F08B0, "Wrong size on FE_ex064_AnimParam");
static_assert(offsetof(FE_ex064_AnimParam, M_AnimName) == 0x000000, "Member 'FE_ex064_AnimParam::M_AnimName' has a wrong offset!");
static_assert(offsetof(FE_ex064_AnimParam, M_NumRange) == 0x000008, "Member 'FE_ex064_AnimParam::M_NumRange' has a wrong offset!");

// ScriptStruct TresGame.TresPlayerMagicAssetUnit
// 0x0028 (0x0028 - 0x0000)
struct FTresPlayerMagicAssetUnit final
{
public:
	ETresCommandKind                              M_Command;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         M_bIsCastType : 1;                                 // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsTurnType : 1;                                 // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsDirectPos : 1;                                // 0x0004(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_EffectGroup;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_VoiceGroup;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_VoiceGroupFinish;                                // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresProjectileBase>        M_AssetData00;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATresProjectileBase>        M_AssetData01;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPlayerMagicAssetUnit) == 0x000008, "Wrong alignment on FTresPlayerMagicAssetUnit");
static_assert(sizeof(FTresPlayerMagicAssetUnit) == 0x000028, "Wrong size on FTresPlayerMagicAssetUnit");
static_assert(offsetof(FTresPlayerMagicAssetUnit, M_Command) == 0x000000, "Member 'FTresPlayerMagicAssetUnit::M_Command' has a wrong offset!");
static_assert(offsetof(FTresPlayerMagicAssetUnit, M_EffectGroup) == 0x000008, "Member 'FTresPlayerMagicAssetUnit::M_EffectGroup' has a wrong offset!");
static_assert(offsetof(FTresPlayerMagicAssetUnit, M_VoiceGroup) == 0x00000C, "Member 'FTresPlayerMagicAssetUnit::M_VoiceGroup' has a wrong offset!");
static_assert(offsetof(FTresPlayerMagicAssetUnit, M_VoiceGroupFinish) == 0x000010, "Member 'FTresPlayerMagicAssetUnit::M_VoiceGroupFinish' has a wrong offset!");
static_assert(offsetof(FTresPlayerMagicAssetUnit, M_AssetData00) == 0x000018, "Member 'FTresPlayerMagicAssetUnit::M_AssetData00' has a wrong offset!");
static_assert(offsetof(FTresPlayerMagicAssetUnit, M_AssetData01) == 0x000020, "Member 'FTresPlayerMagicAssetUnit::M_AssetData01' has a wrong offset!");

// ScriptStruct TresGame.TresUInt8_Range
// 0x0002 (0x0002 - 0x0000)
struct FTresUInt8_Range final
{
public:
	uint8                                         M_uMinValue;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_uMaxValue;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUInt8_Range) == 0x000001, "Wrong alignment on FTresUInt8_Range");
static_assert(sizeof(FTresUInt8_Range) == 0x000002, "Wrong size on FTresUInt8_Range");
static_assert(offsetof(FTresUInt8_Range, M_uMinValue) == 0x000000, "Member 'FTresUInt8_Range::M_uMinValue' has a wrong offset!");
static_assert(offsetof(FTresUInt8_Range, M_uMaxValue) == 0x000001, "Member 'FTresUInt8_Range::M_uMaxValue' has a wrong offset!");

// ScriptStruct TresGame.TresPoppingHolyProjectileOverrideParameters
// 0x114A05A0 (0x114A05A0 - 0x0000)
struct alignas(0x114A05A0) FTresPoppingHolyProjectileOverrideParameters final
{
public:
	float                                         M_fRisingThresholdHeight;                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fGravityScaleWhenFalling;                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vBrakingVelocityScaleWhenFallingStarted;         // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAcceleration;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInitialSpeed;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxSpeed;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPoppingHolyProjectileOverrideParameters) == 0x114A05A0, "Wrong alignment on FTresPoppingHolyProjectileOverrideParameters");
static_assert(sizeof(FTresPoppingHolyProjectileOverrideParameters) == 0x114A05A0, "Wrong size on FTresPoppingHolyProjectileOverrideParameters");
static_assert(offsetof(FTresPoppingHolyProjectileOverrideParameters, M_fRisingThresholdHeight) == 0x000000, "Member 'FTresPoppingHolyProjectileOverrideParameters::M_fRisingThresholdHeight' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyProjectileOverrideParameters, M_fGravityScaleWhenFalling) == 0x000004, "Member 'FTresPoppingHolyProjectileOverrideParameters::M_fGravityScaleWhenFalling' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyProjectileOverrideParameters, M_vBrakingVelocityScaleWhenFallingStarted) == 0x000008, "Member 'FTresPoppingHolyProjectileOverrideParameters::M_vBrakingVelocityScaleWhenFallingStarted' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyProjectileOverrideParameters, M_fAcceleration) == 0x000014, "Member 'FTresPoppingHolyProjectileOverrideParameters::M_fAcceleration' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyProjectileOverrideParameters, M_fInitialSpeed) == 0x000018, "Member 'FTresPoppingHolyProjectileOverrideParameters::M_fInitialSpeed' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyProjectileOverrideParameters, M_fMaxSpeed) == 0x00001C, "Member 'FTresPoppingHolyProjectileOverrideParameters::M_fMaxSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresFloat32_RangeDegree
// 0x114A0B00 (0x114A0B00 - 0x0000)
struct alignas(0x114A0B00) FTresFloat32_RangeDegree final
{
public:
	float                                         M_fMinAngle;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxAngle;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFloat32_RangeDegree) == 0x114A0B00, "Wrong alignment on FTresFloat32_RangeDegree");
static_assert(sizeof(FTresFloat32_RangeDegree) == 0x114A0B00, "Wrong size on FTresFloat32_RangeDegree");
static_assert(offsetof(FTresFloat32_RangeDegree, M_fMinAngle) == 0x000000, "Member 'FTresFloat32_RangeDegree::M_fMinAngle' has a wrong offset!");
static_assert(offsetof(FTresFloat32_RangeDegree, M_fMaxAngle) == 0x000004, "Member 'FTresFloat32_RangeDegree::M_fMaxAngle' has a wrong offset!");

// ScriptStruct TresGame.TresPoppingHolyBulletShootParameter
// 0x114A0B00 (0x114A0B00 - 0x0000)
struct FTresPoppingHolyBulletShootParameter final
{
public:
	struct FTresUInt8_Range                       M_HolyBulletShootNum;                              // 0x0000(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresFloat32_RangeDegree               M_HolyBulletSpreadRangeAngle;                      // 0x0004(0x114A0B00)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_fHolyBulletShootYawAngleRandomOffset;            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsIgnoreKeyBladePitch;                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresFloat32_RangeDegree               M_HolyBulletShootRandomPitchRange;                 // 0x0014(0x114A0B00)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bIsOverrideHolyProjectileParameter;              // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresPoppingHolyProjectileOverrideParameters> M_HolyProjectileOverrideParameterList;             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPoppingHolyBulletShootParameter) == 0x114A0B00, "Wrong alignment on FTresPoppingHolyBulletShootParameter");
static_assert(sizeof(FTresPoppingHolyBulletShootParameter) == 0x114A0B00, "Wrong size on FTresPoppingHolyBulletShootParameter");
static_assert(offsetof(FTresPoppingHolyBulletShootParameter, M_HolyBulletShootNum) == 0x000000, "Member 'FTresPoppingHolyBulletShootParameter::M_HolyBulletShootNum' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyBulletShootParameter, M_HolyBulletSpreadRangeAngle) == 0x000004, "Member 'FTresPoppingHolyBulletShootParameter::M_HolyBulletSpreadRangeAngle' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyBulletShootParameter, M_fHolyBulletShootYawAngleRandomOffset) == 0x00000C, "Member 'FTresPoppingHolyBulletShootParameter::M_fHolyBulletShootYawAngleRandomOffset' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyBulletShootParameter, M_bIsIgnoreKeyBladePitch) == 0x000010, "Member 'FTresPoppingHolyBulletShootParameter::M_bIsIgnoreKeyBladePitch' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyBulletShootParameter, M_HolyBulletShootRandomPitchRange) == 0x000014, "Member 'FTresPoppingHolyBulletShootParameter::M_HolyBulletShootRandomPitchRange' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyBulletShootParameter, M_bIsOverrideHolyProjectileParameter) == 0x00001C, "Member 'FTresPoppingHolyBulletShootParameter::M_bIsOverrideHolyProjectileParameter' has a wrong offset!");
static_assert(offsetof(FTresPoppingHolyBulletShootParameter, M_HolyProjectileOverrideParameterList) == 0x000020, "Member 'FTresPoppingHolyBulletShootParameter::M_HolyProjectileOverrideParameterList' has a wrong offset!");

// ScriptStruct TresGame.TresFaceAnimationTrackKey
// 0x11540DF0 (0x11540DF0 - 0x0000)
struct alignas(0x11540DF0) FTresFaceAnimationTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimName;                                          // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimAsset;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimStartOffset;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimEndOffset;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulateMotionBuilderClip;                         // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotionBuilderClipFirstLoop;                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionBuilderClipStop;                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFaceAnimationTrackKey) == 0x11540DF0, "Wrong alignment on FTresFaceAnimationTrackKey");
static_assert(sizeof(FTresFaceAnimationTrackKey) == 0x11540DF0, "Wrong size on FTresFaceAnimationTrackKey");
static_assert(offsetof(FTresFaceAnimationTrackKey, Time) == 0x000000, "Member 'FTresFaceAnimationTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FTresFaceAnimationTrackKey, AnimName) == 0x000008, "Member 'FTresFaceAnimationTrackKey::AnimName' has a wrong offset!");
static_assert(offsetof(FTresFaceAnimationTrackKey, AnimAsset) == 0x000010, "Member 'FTresFaceAnimationTrackKey::AnimAsset' has a wrong offset!");
static_assert(offsetof(FTresFaceAnimationTrackKey, BlendInTime) == 0x000018, "Member 'FTresFaceAnimationTrackKey::BlendInTime' has a wrong offset!");
static_assert(offsetof(FTresFaceAnimationTrackKey, Loop) == 0x00001C, "Member 'FTresFaceAnimationTrackKey::Loop' has a wrong offset!");
static_assert(offsetof(FTresFaceAnimationTrackKey, PlayRate) == 0x000020, "Member 'FTresFaceAnimationTrackKey::PlayRate' has a wrong offset!");
static_assert(offsetof(FTresFaceAnimationTrackKey, AnimStartOffset) == 0x000024, "Member 'FTresFaceAnimationTrackKey::AnimStartOffset' has a wrong offset!");
static_assert(offsetof(FTresFaceAnimationTrackKey, AnimEndOffset) == 0x000028, "Member 'FTresFaceAnimationTrackKey::AnimEndOffset' has a wrong offset!");
static_assert(offsetof(FTresFaceAnimationTrackKey, SimulateMotionBuilderClip) == 0x00002C, "Member 'FTresFaceAnimationTrackKey::SimulateMotionBuilderClip' has a wrong offset!");
static_assert(offsetof(FTresFaceAnimationTrackKey, MotionBuilderClipFirstLoop) == 0x000030, "Member 'FTresFaceAnimationTrackKey::MotionBuilderClipFirstLoop' has a wrong offset!");
static_assert(offsetof(FTresFaceAnimationTrackKey, MotionBuilderClipStop) == 0x000034, "Member 'FTresFaceAnimationTrackKey::MotionBuilderClipStop' has a wrong offset!");

// ScriptStruct TresGame.TresUIGameFlagText
// 0x0028 (0x0028 - 0x0000)
struct FTresUIGameFlagText final
{
public:
	class FString                                 TextId;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    GameFlag;                                          // 0x0010(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIGameFlagText) == 0x000008, "Wrong alignment on FTresUIGameFlagText");
static_assert(sizeof(FTresUIGameFlagText) == 0x000028, "Wrong size on FTresUIGameFlagText");
static_assert(offsetof(FTresUIGameFlagText, TextId) == 0x000000, "Member 'FTresUIGameFlagText::TextId' has a wrong offset!");
static_assert(offsetof(FTresUIGameFlagText, GameFlag) == 0x000010, "Member 'FTresUIGameFlagText::GameFlag' has a wrong offset!");

// ScriptStruct TresGame.TresUIActorSetting
// 0x114EAFB0 (0x114EAFB0 - 0x0000)
struct alignas(0x114EAFB0) FTresUIActorSetting final
{
public:
	int32                                         LightSetIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostProcessSetIndex;                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIActorSetting) == 0x114EAFB0, "Wrong alignment on FTresUIActorSetting");
static_assert(sizeof(FTresUIActorSetting) == 0x114EAFB0, "Wrong size on FTresUIActorSetting");
static_assert(offsetof(FTresUIActorSetting, LightSetIndex) == 0x000000, "Member 'FTresUIActorSetting::LightSetIndex' has a wrong offset!");
static_assert(offsetof(FTresUIActorSetting, PostProcessSetIndex) == 0x000004, "Member 'FTresUIActorSetting::PostProcessSetIndex' has a wrong offset!");

// ScriptStruct TresGame.TresUIGameFlagActor
// 0x114EAFB0 (0x114EAFB0 - 0x0000)
struct FTresUIGameFlagActor final
{
public:
	TSoftClassPtr<class UClass>                   ActorAsset;                                        // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresUIActorSetting                    ActorSetting;                                      // 0x0020(0x114EAFB0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    GameFlag;                                          // 0x0028(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIGameFlagActor) == 0x114EAFB0, "Wrong alignment on FTresUIGameFlagActor");
static_assert(sizeof(FTresUIGameFlagActor) == 0x114EAFB0, "Wrong size on FTresUIGameFlagActor");
static_assert(offsetof(FTresUIGameFlagActor, ActorAsset) == 0x000000, "Member 'FTresUIGameFlagActor::ActorAsset' has a wrong offset!");
static_assert(offsetof(FTresUIGameFlagActor, ActorSetting) == 0x000020, "Member 'FTresUIGameFlagActor::ActorSetting' has a wrong offset!");
static_assert(offsetof(FTresUIGameFlagActor, GameFlag) == 0x000028, "Member 'FTresUIGameFlagActor::GameFlag' has a wrong offset!");

// ScriptStruct TresGame.TresDictionaryCharacterData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresDictionaryCharacterData final : public FTableRowBase
{
public:
	ETresWorldCode                                WorldCode;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UIPriority;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresUIGameFlagText>            Texts;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresUIGameFlagActor>           Actors;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 NameTextID;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceTextID;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefKeyItem                           KeyItemID;                                         // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESqexCPPKHSWorldType                          KHSWorldType;                                      // 0x0051(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x0052(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresDictionaryCharacterData) == 0x11413080, "Wrong alignment on FTresDictionaryCharacterData");
static_assert(sizeof(FTresDictionaryCharacterData) == 0x11413080, "Wrong size on FTresDictionaryCharacterData");
static_assert(offsetof(FTresDictionaryCharacterData, WorldCode) == 0x000008, "Member 'FTresDictionaryCharacterData::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresDictionaryCharacterData, UIPriority) == 0x00000C, "Member 'FTresDictionaryCharacterData::UIPriority' has a wrong offset!");
static_assert(offsetof(FTresDictionaryCharacterData, Texts) == 0x000010, "Member 'FTresDictionaryCharacterData::Texts' has a wrong offset!");
static_assert(offsetof(FTresDictionaryCharacterData, Actors) == 0x000020, "Member 'FTresDictionaryCharacterData::Actors' has a wrong offset!");
static_assert(offsetof(FTresDictionaryCharacterData, NameTextID) == 0x000030, "Member 'FTresDictionaryCharacterData::NameTextID' has a wrong offset!");
static_assert(offsetof(FTresDictionaryCharacterData, SourceTextID) == 0x000040, "Member 'FTresDictionaryCharacterData::SourceTextID' has a wrong offset!");
static_assert(offsetof(FTresDictionaryCharacterData, KeyItemID) == 0x000050, "Member 'FTresDictionaryCharacterData::KeyItemID' has a wrong offset!");
static_assert(offsetof(FTresDictionaryCharacterData, KHSWorldType) == 0x000051, "Member 'FTresDictionaryCharacterData::KHSWorldType' has a wrong offset!");
static_assert(offsetof(FTresDictionaryCharacterData, Version) == 0x000052, "Member 'FTresDictionaryCharacterData::Version' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuElement
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct FTresDebugMenuElement final
{
public:
	class FName                                   M_ElementName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_X;                                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Y;                                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Width;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Height;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDebugMenuBlendMode                       M_BlendMode;                                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           M_ColorMultiplier;                                 // 0x001C(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_ColorOffset;                                     // 0x002C(0x112EAE80)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDebugMenuResourceType                    M_ResourceType;                                    // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ResourceIndex;                                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_LayoutFactor;                                    // 0x0044(0x112E95F0)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuElement) == 0x112EAE80, "Wrong alignment on FTresDebugMenuElement");
static_assert(sizeof(FTresDebugMenuElement) == 0x112EAE80, "Wrong size on FTresDebugMenuElement");
static_assert(offsetof(FTresDebugMenuElement, M_ElementName) == 0x000000, "Member 'FTresDebugMenuElement::M_ElementName' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuElement, M_X) == 0x000008, "Member 'FTresDebugMenuElement::M_X' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuElement, M_Y) == 0x00000C, "Member 'FTresDebugMenuElement::M_Y' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuElement, M_Width) == 0x000010, "Member 'FTresDebugMenuElement::M_Width' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuElement, M_Height) == 0x000014, "Member 'FTresDebugMenuElement::M_Height' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuElement, M_BlendMode) == 0x000018, "Member 'FTresDebugMenuElement::M_BlendMode' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuElement, M_ColorMultiplier) == 0x00001C, "Member 'FTresDebugMenuElement::M_ColorMultiplier' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuElement, M_ColorOffset) == 0x00002C, "Member 'FTresDebugMenuElement::M_ColorOffset' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuElement, M_ResourceType) == 0x00003C, "Member 'FTresDebugMenuElement::M_ResourceType' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuElement, M_ResourceIndex) == 0x000040, "Member 'FTresDebugMenuElement::M_ResourceIndex' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuElement, M_LayoutFactor) == 0x000044, "Member 'FTresDebugMenuElement::M_LayoutFactor' has a wrong offset!");

// ScriptStruct TresGame.OneCollInfo_e_ex359
// 0x0010 (0x0010 - 0x0000)
struct FOneCollInfo_e_ex359 final
{
public:
	int32                                         INotifyParam;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresProjectile_e_ex359_Wave_OneCollision> POneCollision;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOneCollInfo_e_ex359) == 0x000008, "Wrong alignment on FOneCollInfo_e_ex359");
static_assert(sizeof(FOneCollInfo_e_ex359) == 0x000010, "Wrong size on FOneCollInfo_e_ex359");
static_assert(offsetof(FOneCollInfo_e_ex359, INotifyParam) == 0x000000, "Member 'FOneCollInfo_e_ex359::INotifyParam' has a wrong offset!");
static_assert(offsetof(FOneCollInfo_e_ex359, POneCollision) == 0x000008, "Member 'FOneCollInfo_e_ex359::POneCollision' has a wrong offset!");

// ScriptStruct TresGame.WaveOneCollInfo_e_ex359
// 0x0010 (0x0010 - 0x0000)
struct FWaveOneCollInfo_e_ex359 final
{
public:
	TArray<struct FOneCollInfo_e_ex359>           OneCollInfoArray;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaveOneCollInfo_e_ex359) == 0x000008, "Wrong alignment on FWaveOneCollInfo_e_ex359");
static_assert(sizeof(FWaveOneCollInfo_e_ex359) == 0x000010, "Wrong size on FWaveOneCollInfo_e_ex359");
static_assert(offsetof(FWaveOneCollInfo_e_ex359, OneCollInfoArray) == 0x000000, "Member 'FWaveOneCollInfo_e_ex359::OneCollInfoArray' has a wrong offset!");

// ScriptStruct TresGame.EX355_DashClaymoreInfo
// 0x0060 (0x0060 - 0x0000)
struct FEX355_DashClaymoreInfo final
{
public:
	float                                         M_fRevolveRadius;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            M_RevolveRadiusCurve;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevolveSpeed;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            M_RevolvePhaseCurve;                               // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevolveHeight;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            M_RevolveHeightCurve;                              // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           M_RotationCurve;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWaveOneCollInfo_e_ex359               M_OneCollInfo;                                     // 0x0038(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                M_WaveSpawnLocOffset;                              // 0x0048(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fWaveWaitTime;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_GroundHitEffectClass;                            // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_DashClaymoreInfo) == 0x000008, "Wrong alignment on FEX355_DashClaymoreInfo");
static_assert(sizeof(FEX355_DashClaymoreInfo) == 0x000060, "Wrong size on FEX355_DashClaymoreInfo");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_fRevolveRadius) == 0x000000, "Member 'FEX355_DashClaymoreInfo::M_fRevolveRadius' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_RevolveRadiusCurve) == 0x000008, "Member 'FEX355_DashClaymoreInfo::M_RevolveRadiusCurve' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_fRevolveSpeed) == 0x000010, "Member 'FEX355_DashClaymoreInfo::M_fRevolveSpeed' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_RevolvePhaseCurve) == 0x000018, "Member 'FEX355_DashClaymoreInfo::M_RevolvePhaseCurve' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_fRevolveHeight) == 0x000020, "Member 'FEX355_DashClaymoreInfo::M_fRevolveHeight' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_RevolveHeightCurve) == 0x000028, "Member 'FEX355_DashClaymoreInfo::M_RevolveHeightCurve' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_RotationCurve) == 0x000030, "Member 'FEX355_DashClaymoreInfo::M_RotationCurve' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_OneCollInfo) == 0x000038, "Member 'FEX355_DashClaymoreInfo::M_OneCollInfo' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_WaveSpawnLocOffset) == 0x000048, "Member 'FEX355_DashClaymoreInfo::M_WaveSpawnLocOffset' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_fWaveWaitTime) == 0x000054, "Member 'FEX355_DashClaymoreInfo::M_fWaveWaitTime' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreInfo, M_GroundHitEffectClass) == 0x000058, "Member 'FEX355_DashClaymoreInfo::M_GroundHitEffectClass' has a wrong offset!");

// ScriptStruct TresGame.TresChangeMeshMaterialParamData
// 0x0040 (0x0040 - 0x0000)
struct FTresChangeMeshMaterialParamData final
{
public:
	class FName                                   M_MaterialParamName;                               // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_MaterialInstanceList;                            // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESqEX_BonePoseToMaterialSetParamType          M_MaterialParamSetType;                            // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_StartScalarParam;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EndScalarParam;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_StartVectorParam;                                // 0x0024(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_EndVectorParam;                                  // 0x0030(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresChangeMeshMaterialParamData) == 0x000008, "Wrong alignment on FTresChangeMeshMaterialParamData");
static_assert(sizeof(FTresChangeMeshMaterialParamData) == 0x000040, "Wrong size on FTresChangeMeshMaterialParamData");
static_assert(offsetof(FTresChangeMeshMaterialParamData, M_MaterialParamName) == 0x000000, "Member 'FTresChangeMeshMaterialParamData::M_MaterialParamName' has a wrong offset!");
static_assert(offsetof(FTresChangeMeshMaterialParamData, M_MaterialInstanceList) == 0x000008, "Member 'FTresChangeMeshMaterialParamData::M_MaterialInstanceList' has a wrong offset!");
static_assert(offsetof(FTresChangeMeshMaterialParamData, M_MaterialParamSetType) == 0x000018, "Member 'FTresChangeMeshMaterialParamData::M_MaterialParamSetType' has a wrong offset!");
static_assert(offsetof(FTresChangeMeshMaterialParamData, M_StartScalarParam) == 0x00001C, "Member 'FTresChangeMeshMaterialParamData::M_StartScalarParam' has a wrong offset!");
static_assert(offsetof(FTresChangeMeshMaterialParamData, M_EndScalarParam) == 0x000020, "Member 'FTresChangeMeshMaterialParamData::M_EndScalarParam' has a wrong offset!");
static_assert(offsetof(FTresChangeMeshMaterialParamData, M_StartVectorParam) == 0x000024, "Member 'FTresChangeMeshMaterialParamData::M_StartVectorParam' has a wrong offset!");
static_assert(offsetof(FTresChangeMeshMaterialParamData, M_EndVectorParam) == 0x000030, "Member 'FTresChangeMeshMaterialParamData::M_EndVectorParam' has a wrong offset!");

// ScriptStruct TresGame.TresStartAttackLogRecord
// 0x11591 (0x11591 - 0x0000)
struct alignas(0x11591) FTresStartAttackLogRecord final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresStartAttackLogRecord) == 0x011591, "Wrong alignment on FTresStartAttackLogRecord");
static_assert(sizeof(FTresStartAttackLogRecord) == 0x011591, "Wrong size on FTresStartAttackLogRecord");

// ScriptStruct TresGame.TresClaymoreSwingDownInfo_e_ex306
// 0x1155FB30 (0x1155FB30 - 0x0000)
struct alignas(0x1155FB30) FTresClaymoreSwingDownInfo_e_ex306 final
{
public:
	float                                         M_fRevolveRadius;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevolveHeight;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresClaymoreSwingDownInfo_e_ex306) == 0x1155FB30, "Wrong alignment on FTresClaymoreSwingDownInfo_e_ex306");
static_assert(sizeof(FTresClaymoreSwingDownInfo_e_ex306) == 0x1155FB30, "Wrong size on FTresClaymoreSwingDownInfo_e_ex306");
static_assert(offsetof(FTresClaymoreSwingDownInfo_e_ex306, M_fRevolveRadius) == 0x000000, "Member 'FTresClaymoreSwingDownInfo_e_ex306::M_fRevolveRadius' has a wrong offset!");
static_assert(offsetof(FTresClaymoreSwingDownInfo_e_ex306, M_fRevolveHeight) == 0x000004, "Member 'FTresClaymoreSwingDownInfo_e_ex306::M_fRevolveHeight' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipSkeletalMeshCtrl
// 0x11B04 (0x11B04 - 0x0000)
struct alignas(0x11B04) FTresGumiShipSkeletalMeshCtrl final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipSkeletalMeshCtrl) == 0x011B04, "Wrong alignment on FTresGumiShipSkeletalMeshCtrl");
static_assert(sizeof(FTresGumiShipSkeletalMeshCtrl) == 0x011B04, "Wrong size on FTresGumiShipSkeletalMeshCtrl");

// ScriptStruct TresGame.WeaponSwingSEAttachedInfo
// 0x11252 (0x11252 - 0x0000)
struct alignas(0x11252) FWeaponSwingSEAttachedInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponSwingSEAttachedInfo) == 0x011252, "Wrong alignment on FWeaponSwingSEAttachedInfo");
static_assert(sizeof(FWeaponSwingSEAttachedInfo) == 0x011252, "Wrong size on FWeaponSwingSEAttachedInfo");

// ScriptStruct TresGame.EX354_RemoteEventID
// 0x0010 (0x0010 - 0x0000)
struct FEX354_RemoteEventID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_RemoteEventName;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_RemoteEventID) == 0x000004, "Wrong alignment on FEX354_RemoteEventID");
static_assert(sizeof(FEX354_RemoteEventID) == 0x000010, "Wrong size on FEX354_RemoteEventID");
static_assert(offsetof(FEX354_RemoteEventID, M_RemoteEventName) == 0x000008, "Member 'FEX354_RemoteEventID::M_RemoteEventName' has a wrong offset!");

// ScriptStruct TresGame.TresAnsemCodeData
// 0x8F000 (0x114A2080 - 0x11413080)
struct alignas(0x114A2080) FTresAnsemCodeData final : public FTableRowBase
{
public:
	ETresItemDefReport                            ItemID;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DetailTextID;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAnsemCodeData) == 0x114A2080, "Wrong alignment on FTresAnsemCodeData");
static_assert(sizeof(FTresAnsemCodeData) == 0x114A2080, "Wrong size on FTresAnsemCodeData");
static_assert(offsetof(FTresAnsemCodeData, ItemID) == 0x000008, "Member 'FTresAnsemCodeData::ItemID' has a wrong offset!");
static_assert(offsetof(FTresAnsemCodeData, DetailTextID) == 0x000010, "Member 'FTresAnsemCodeData::DetailTextID' has a wrong offset!");

// ScriptStruct TresGame.RootMotionScaleParam_e_ex358
// 0x114A7C50 (0x114A7C50 - 0x0000)
struct alignas(0x114A7C50) FRootMotionScaleParam_e_ex358 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootMotionScaleParam_e_ex358) == 0x114A7C50, "Wrong alignment on FRootMotionScaleParam_e_ex358");
static_assert(sizeof(FRootMotionScaleParam_e_ex358) == 0x114A7C50, "Wrong size on FRootMotionScaleParam_e_ex358");
static_assert(offsetof(FRootMotionScaleParam_e_ex358, Distance) == 0x000000, "Member 'FRootMotionScaleParam_e_ex358::Distance' has a wrong offset!");
static_assert(offsetof(FRootMotionScaleParam_e_ex358, RootMotionScale) == 0x000004, "Member 'FRootMotionScaleParam_e_ex358::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.TresMapNameDataTable
// 0x8F570 (0x114A25F0 - 0x11413080)
struct alignas(0x114A25F0) FTresMapNameDataTable final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture>                IconAsset;                                         // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameKey;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMapNameDataTable) == 0x114A25F0, "Wrong alignment on FTresMapNameDataTable");
static_assert(sizeof(FTresMapNameDataTable) == 0x114A25F0, "Wrong size on FTresMapNameDataTable");
static_assert(offsetof(FTresMapNameDataTable, IconAsset) == 0x000008, "Member 'FTresMapNameDataTable::IconAsset' has a wrong offset!");
static_assert(offsetof(FTresMapNameDataTable, NameKey) == 0x000028, "Member 'FTresMapNameDataTable::NameKey' has a wrong offset!");

// ScriptStruct TresGame.EX359_RemoteEventID
// 0x0010 (0x0010 - 0x0000)
struct FEX359_RemoteEventID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_RemoteEventName;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_RemoteEventID) == 0x000004, "Wrong alignment on FEX359_RemoteEventID");
static_assert(sizeof(FEX359_RemoteEventID) == 0x000010, "Wrong size on FEX359_RemoteEventID");
static_assert(offsetof(FEX359_RemoteEventID, M_RemoteEventName) == 0x000008, "Member 'FEX359_RemoteEventID::M_RemoteEventName' has a wrong offset!");

// ScriptStruct TresGame.TresAreaSelectData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresAreaSelectData final : public FTableRowBase
{
public:
	ETresWorldCode                                WorldCode;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SavePointName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapNameNamespaceKey;                               // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AreaNameNamespaceKey;                              // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                IconAsset;                                         // 0x0040(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UIPriority;                                        // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresUIGameFlagData                    EnableGameFlag;                                    // 0x0068(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    ForceOpenGameFlag;                                 // 0x0080(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    DisableGameFlag;                                   // 0x0098(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTresUIGameFlagData>            RestrictionStartGameFlag;                          // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresUIGameFlagData>            RestrictionEndGameFlag;                            // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          EnableLanding;                                     // 0x00D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAreaSelectData) == 0x11413080, "Wrong alignment on FTresAreaSelectData");
static_assert(sizeof(FTresAreaSelectData) == 0x11413080, "Wrong size on FTresAreaSelectData");
static_assert(offsetof(FTresAreaSelectData, WorldCode) == 0x000008, "Member 'FTresAreaSelectData::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, SavePointName) == 0x000010, "Member 'FTresAreaSelectData::SavePointName' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, MapName) == 0x000018, "Member 'FTresAreaSelectData::MapName' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, MapNameNamespaceKey) == 0x000020, "Member 'FTresAreaSelectData::MapNameNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, AreaNameNamespaceKey) == 0x000030, "Member 'FTresAreaSelectData::AreaNameNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, IconAsset) == 0x000040, "Member 'FTresAreaSelectData::IconAsset' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, UIPriority) == 0x000060, "Member 'FTresAreaSelectData::UIPriority' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, EnableGameFlag) == 0x000068, "Member 'FTresAreaSelectData::EnableGameFlag' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, ForceOpenGameFlag) == 0x000080, "Member 'FTresAreaSelectData::ForceOpenGameFlag' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, DisableGameFlag) == 0x000098, "Member 'FTresAreaSelectData::DisableGameFlag' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, RestrictionStartGameFlag) == 0x0000B0, "Member 'FTresAreaSelectData::RestrictionStartGameFlag' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, RestrictionEndGameFlag) == 0x0000C0, "Member 'FTresAreaSelectData::RestrictionEndGameFlag' has a wrong offset!");
static_assert(offsetof(FTresAreaSelectData, EnableLanding) == 0x0000D0, "Member 'FTresAreaSelectData::EnableLanding' has a wrong offset!");

// ScriptStruct TresGame.TresCardActionParam_e_ex307
// 0x114F11C0 (0x114F11C0 - 0x0000)
struct alignas(0x114F11C0) FTresCardActionParam_e_ex307 final
{
public:
	float                                         MoveScale;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCardActionParam_e_ex307) == 0x114F11C0, "Wrong alignment on FTresCardActionParam_e_ex307");
static_assert(sizeof(FTresCardActionParam_e_ex307) == 0x114F11C0, "Wrong size on FTresCardActionParam_e_ex307");
static_assert(offsetof(FTresCardActionParam_e_ex307, MoveScale) == 0x000000, "Member 'FTresCardActionParam_e_ex307::MoveScale' has a wrong offset!");

// ScriptStruct TresGame.TresCardAction_e_ex307
// 0x114F11C0 (0x114F11C0 - 0x0000)
struct FTresCardAction_e_ex307 final
{
public:
	int8                                          ActionType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresCardActionParam_e_ex307           ActionParam[0x4];                                  // 0x0004(0x114F11C0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCardAction_e_ex307) == 0x114F11C0, "Wrong alignment on FTresCardAction_e_ex307");
static_assert(sizeof(FTresCardAction_e_ex307) == 0x114F11C0, "Wrong size on FTresCardAction_e_ex307");
static_assert(offsetof(FTresCardAction_e_ex307, ActionType) == 0x000000, "Member 'FTresCardAction_e_ex307::ActionType' has a wrong offset!");
static_assert(offsetof(FTresCardAction_e_ex307, ActionParam) == 0x000004, "Member 'FTresCardAction_e_ex307::ActionParam' has a wrong offset!");

// ScriptStruct TresGame.TresCardSpawnInfo_e_ex307
// 0x0050 (0x0050 - 0x0000)
struct FTresCardSpawnInfo_e_ex307 final
{
public:
	float                                         HitPointRate;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num[0x3];                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresEnemy_e_ex307_DummyCardSpawn             DummyCardsSpawnType;                               // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresCardAction_e_ex307                CardAction[0x3];                                   // 0x0014(0x114F11C0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCardSpawnInfo_e_ex307) == 0x000004, "Wrong alignment on FTresCardSpawnInfo_e_ex307");
static_assert(sizeof(FTresCardSpawnInfo_e_ex307) == 0x000050, "Wrong size on FTresCardSpawnInfo_e_ex307");
static_assert(offsetof(FTresCardSpawnInfo_e_ex307, HitPointRate) == 0x000000, "Member 'FTresCardSpawnInfo_e_ex307::HitPointRate' has a wrong offset!");
static_assert(offsetof(FTresCardSpawnInfo_e_ex307, Num) == 0x000004, "Member 'FTresCardSpawnInfo_e_ex307::Num' has a wrong offset!");
static_assert(offsetof(FTresCardSpawnInfo_e_ex307, DummyCardsSpawnType) == 0x000010, "Member 'FTresCardSpawnInfo_e_ex307::DummyCardsSpawnType' has a wrong offset!");
static_assert(offsetof(FTresCardSpawnInfo_e_ex307, CardAction) == 0x000014, "Member 'FTresCardSpawnInfo_e_ex307::CardAction' has a wrong offset!");

// ScriptStruct TresGame.TresThornWavingDummyMeshAttachInfo
// 0x114FF1B0 (0x114FF1B0 - 0x0000)
struct alignas(0x114FF1B0) FTresThornWavingDummyMeshAttachInfo final
{
public:
	ETresEnemyEx721HandID                         M_HandID;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_AttachName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresThornWavingDummyMeshAttachInfo) == 0x114FF1B0, "Wrong alignment on FTresThornWavingDummyMeshAttachInfo");
static_assert(sizeof(FTresThornWavingDummyMeshAttachInfo) == 0x114FF1B0, "Wrong size on FTresThornWavingDummyMeshAttachInfo");
static_assert(offsetof(FTresThornWavingDummyMeshAttachInfo, M_HandID) == 0x000000, "Member 'FTresThornWavingDummyMeshAttachInfo::M_HandID' has a wrong offset!");
static_assert(offsetof(FTresThornWavingDummyMeshAttachInfo, M_AttachName) == 0x000008, "Member 'FTresThornWavingDummyMeshAttachInfo::M_AttachName' has a wrong offset!");

// ScriptStruct TresGame.TresBlackboardVectorValueModifierInOutParam
// 0x0068 (0x0068 - 0x0000)
struct FTresBlackboardVectorValueModifierInOutParam final
{
public:
	struct FBlackboardKeySelector                 BlackboardKeyValueA;                               // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseBlackboardKey : 1;                             // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETresBlackboardValueModifierInOutMethod       MethodType;                                        // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0030(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 BlackboardKeyValueB;                               // 0x0040(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBlackboardVectorValueModifierInOutParam) == 0x000001, "Wrong alignment on FTresBlackboardVectorValueModifierInOutParam");
static_assert(sizeof(FTresBlackboardVectorValueModifierInOutParam) == 0x000068, "Wrong size on FTresBlackboardVectorValueModifierInOutParam");
static_assert(offsetof(FTresBlackboardVectorValueModifierInOutParam, BlackboardKeyValueA) == 0x000000, "Member 'FTresBlackboardVectorValueModifierInOutParam::BlackboardKeyValueA' has a wrong offset!");
static_assert(offsetof(FTresBlackboardVectorValueModifierInOutParam, MethodType) == 0x00002C, "Member 'FTresBlackboardVectorValueModifierInOutParam::MethodType' has a wrong offset!");
static_assert(offsetof(FTresBlackboardVectorValueModifierInOutParam, Value) == 0x000030, "Member 'FTresBlackboardVectorValueModifierInOutParam::Value' has a wrong offset!");
static_assert(offsetof(FTresBlackboardVectorValueModifierInOutParam, BlackboardKeyValueB) == 0x000040, "Member 'FTresBlackboardVectorValueModifierInOutParam::BlackboardKeyValueB' has a wrong offset!");

// ScriptStruct TresGame.TornadoBlowPawnInfo
// 0x1159C (0x1159C - 0x0000)
struct alignas(0x1159C) FTornadoBlowPawnInfo final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTornadoBlowPawnInfo) == 0x01159C, "Wrong alignment on FTornadoBlowPawnInfo");
static_assert(sizeof(FTornadoBlowPawnInfo) == 0x01159C, "Wrong size on FTornadoBlowPawnInfo");

// ScriptStruct TresGame.TresClaymoreSwingDownInfo_e_ex355
// 0x11562A00 (0x11562A00 - 0x0000)
struct alignas(0x11562A00) FTresClaymoreSwingDownInfo_e_ex355 final
{
public:
	float                                         M_fRevolveRadius;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevolveHeight;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresClaymoreSwingDownInfo_e_ex355) == 0x11562A00, "Wrong alignment on FTresClaymoreSwingDownInfo_e_ex355");
static_assert(sizeof(FTresClaymoreSwingDownInfo_e_ex355) == 0x11562A00, "Wrong size on FTresClaymoreSwingDownInfo_e_ex355");
static_assert(offsetof(FTresClaymoreSwingDownInfo_e_ex355, M_fRevolveRadius) == 0x000000, "Member 'FTresClaymoreSwingDownInfo_e_ex355::M_fRevolveRadius' has a wrong offset!");
static_assert(offsetof(FTresClaymoreSwingDownInfo_e_ex355, M_fRevolveHeight) == 0x000004, "Member 'FTresClaymoreSwingDownInfo_e_ex355::M_fRevolveHeight' has a wrong offset!");

// ScriptStruct TresGame.TresAtkCollAutoActivate
// 0x114A34A0 (0x114A34A0 - 0x0000)
struct alignas(0x114A34A0) FTresAtkCollAutoActivate final
{
public:
	class FName                                   M_GrpName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AttackDataIDName;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AttackInterval;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAtkCollAutoActivate) == 0x114A34A0, "Wrong alignment on FTresAtkCollAutoActivate");
static_assert(sizeof(FTresAtkCollAutoActivate) == 0x114A34A0, "Wrong size on FTresAtkCollAutoActivate");
static_assert(offsetof(FTresAtkCollAutoActivate, M_GrpName) == 0x000000, "Member 'FTresAtkCollAutoActivate::M_GrpName' has a wrong offset!");
static_assert(offsetof(FTresAtkCollAutoActivate, M_AttackDataIDName) == 0x000008, "Member 'FTresAtkCollAutoActivate::M_AttackDataIDName' has a wrong offset!");
static_assert(offsetof(FTresAtkCollAutoActivate, M_AttackInterval) == 0x000010, "Member 'FTresAtkCollAutoActivate::M_AttackInterval' has a wrong offset!");

// ScriptStruct TresGame.TresAtkCollHitEffUnit
// 0x11377D20 (0x11377D20 - 0x0000)
struct FTresAtkCollHitEffUnit final
{
public:
	class UParticleSystem*                        M_PawnHitEffect;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             M_PawnHitSEAsset;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_PawnHitEffectPerAttr[0x8];                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             M_PawnHitSEAssetPerAttr[0x8];                      // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_DirectHitEffect;                                 // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bChangeMapHit : 1;                               // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_MapHitEffect;                                    // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bChangeSEMapHit : 1;                             // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             M_MapHitSEAsset;                                   // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bEnableDecal : 1;                                // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresDecalData                         M_DecalData;                                       // 0x00C0(0x11377D20)(Edit, ExportObject, NoClear, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAtkCollHitEffUnit) == 0x11377D20, "Wrong alignment on FTresAtkCollHitEffUnit");
static_assert(sizeof(FTresAtkCollHitEffUnit) == 0x11377D20, "Wrong size on FTresAtkCollHitEffUnit");
static_assert(offsetof(FTresAtkCollHitEffUnit, M_PawnHitEffect) == 0x000000, "Member 'FTresAtkCollHitEffUnit::M_PawnHitEffect' has a wrong offset!");
static_assert(offsetof(FTresAtkCollHitEffUnit, M_PawnHitSEAsset) == 0x000008, "Member 'FTresAtkCollHitEffUnit::M_PawnHitSEAsset' has a wrong offset!");
static_assert(offsetof(FTresAtkCollHitEffUnit, M_PawnHitEffectPerAttr) == 0x000010, "Member 'FTresAtkCollHitEffUnit::M_PawnHitEffectPerAttr' has a wrong offset!");
static_assert(offsetof(FTresAtkCollHitEffUnit, M_PawnHitSEAssetPerAttr) == 0x000050, "Member 'FTresAtkCollHitEffUnit::M_PawnHitSEAssetPerAttr' has a wrong offset!");
static_assert(offsetof(FTresAtkCollHitEffUnit, M_DirectHitEffect) == 0x000090, "Member 'FTresAtkCollHitEffUnit::M_DirectHitEffect' has a wrong offset!");
static_assert(offsetof(FTresAtkCollHitEffUnit, M_MapHitEffect) == 0x0000A0, "Member 'FTresAtkCollHitEffUnit::M_MapHitEffect' has a wrong offset!");
static_assert(offsetof(FTresAtkCollHitEffUnit, M_MapHitSEAsset) == 0x0000B0, "Member 'FTresAtkCollHitEffUnit::M_MapHitSEAsset' has a wrong offset!");
static_assert(offsetof(FTresAtkCollHitEffUnit, M_DecalData) == 0x0000C0, "Member 'FTresAtkCollHitEffUnit::M_DecalData' has a wrong offset!");

// ScriptStruct TresGame.TresAtkColHitEffect
// 0x11377D20 (0x11377D20 - 0x0000)
struct FTresAtkColHitEffect final
{
public:
	class FName                                   M_GrpName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_PawnHitEffect;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             M_PawnHitSEAsset;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_PawnHitEffectPerAttr[0x8];                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             M_PawnHitSEAssetPerAttr[0x8];                      // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_DirectHitEffect;                                 // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bChangeMapHit : 1;                               // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_MapHitEffect;                                    // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bChangeSEMapHit : 1;                             // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             M_MapHitSEAsset;                                   // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bEnableDecal : 1;                                // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresDecalData                         M_DecalData;                                       // 0x00C8(0x11377D20)(Edit, ExportObject, NoClear, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTresAtkCollHitEffUnit>         M_HitEffSet;                                       // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAtkColHitEffect) == 0x11377D20, "Wrong alignment on FTresAtkColHitEffect");
static_assert(sizeof(FTresAtkColHitEffect) == 0x11377D20, "Wrong size on FTresAtkColHitEffect");
static_assert(offsetof(FTresAtkColHitEffect, M_GrpName) == 0x000000, "Member 'FTresAtkColHitEffect::M_GrpName' has a wrong offset!");
static_assert(offsetof(FTresAtkColHitEffect, M_PawnHitEffect) == 0x000008, "Member 'FTresAtkColHitEffect::M_PawnHitEffect' has a wrong offset!");
static_assert(offsetof(FTresAtkColHitEffect, M_PawnHitSEAsset) == 0x000010, "Member 'FTresAtkColHitEffect::M_PawnHitSEAsset' has a wrong offset!");
static_assert(offsetof(FTresAtkColHitEffect, M_PawnHitEffectPerAttr) == 0x000018, "Member 'FTresAtkColHitEffect::M_PawnHitEffectPerAttr' has a wrong offset!");
static_assert(offsetof(FTresAtkColHitEffect, M_PawnHitSEAssetPerAttr) == 0x000058, "Member 'FTresAtkColHitEffect::M_PawnHitSEAssetPerAttr' has a wrong offset!");
static_assert(offsetof(FTresAtkColHitEffect, M_DirectHitEffect) == 0x000098, "Member 'FTresAtkColHitEffect::M_DirectHitEffect' has a wrong offset!");
static_assert(offsetof(FTresAtkColHitEffect, M_MapHitEffect) == 0x0000A8, "Member 'FTresAtkColHitEffect::M_MapHitEffect' has a wrong offset!");
static_assert(offsetof(FTresAtkColHitEffect, M_MapHitSEAsset) == 0x0000B8, "Member 'FTresAtkColHitEffect::M_MapHitSEAsset' has a wrong offset!");
static_assert(offsetof(FTresAtkColHitEffect, M_DecalData) == 0x0000C8, "Member 'FTresAtkColHitEffect::M_DecalData' has a wrong offset!");
static_assert(offsetof(FTresAtkColHitEffect, M_HitEffSet) == 0x0000E0, "Member 'FTresAtkColHitEffect::M_HitEffSet' has a wrong offset!");

// ScriptStruct TresGame.HiddenMickeyBoundingAreaCircles
// 0x1153B840 (0x1153B840 - 0x0000)
struct alignas(0x1153B840) FHiddenMickeyBoundingAreaCircles final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x112E95F0)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHiddenMickeyBoundingAreaCircles) == 0x1153B840, "Wrong alignment on FHiddenMickeyBoundingAreaCircles");
static_assert(sizeof(FHiddenMickeyBoundingAreaCircles) == 0x1153B840, "Wrong size on FHiddenMickeyBoundingAreaCircles");
static_assert(offsetof(FHiddenMickeyBoundingAreaCircles, Offset) == 0x000000, "Member 'FHiddenMickeyBoundingAreaCircles::Offset' has a wrong offset!");
static_assert(offsetof(FHiddenMickeyBoundingAreaCircles, Size) == 0x000008, "Member 'FHiddenMickeyBoundingAreaCircles::Size' has a wrong offset!");

// ScriptStruct TresGame.TresAfterImageVisibleWorker
// 0x0020 (0x0020 - 0x0000)
struct FTresAfterImageVisibleWorker final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_VisibleEffectCmp;                                // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTresAfterImageVisibleWorker) == 0x000008, "Wrong alignment on FTresAfterImageVisibleWorker");
static_assert(sizeof(FTresAfterImageVisibleWorker) == 0x000020, "Wrong size on FTresAfterImageVisibleWorker");
static_assert(offsetof(FTresAfterImageVisibleWorker, M_VisibleEffectCmp) == 0x000018, "Member 'FTresAfterImageVisibleWorker::M_VisibleEffectCmp' has a wrong offset!");

// ScriptStruct TresGame.TresLuckyMarkMilestoneRewardDataTable
// 0x1289A0 (0x1153BA20 - 0x11413080)
struct alignas(0x1153BA20) FTresLuckyMarkMilestoneRewardDataTable final : public FTableRowBase
{
public:
	int32                                         RewardIndex;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarkCount;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CompleteRewardFlag : 1;                            // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RewardTreasureName;                                // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLuckyMarkMilestoneRewardDataTable) == 0x1153BA20, "Wrong alignment on FTresLuckyMarkMilestoneRewardDataTable");
static_assert(sizeof(FTresLuckyMarkMilestoneRewardDataTable) == 0x1153BA20, "Wrong size on FTresLuckyMarkMilestoneRewardDataTable");
static_assert(offsetof(FTresLuckyMarkMilestoneRewardDataTable, RewardIndex) == 0x000008, "Member 'FTresLuckyMarkMilestoneRewardDataTable::RewardIndex' has a wrong offset!");
static_assert(offsetof(FTresLuckyMarkMilestoneRewardDataTable, MarkCount) == 0x00000C, "Member 'FTresLuckyMarkMilestoneRewardDataTable::MarkCount' has a wrong offset!");
static_assert(offsetof(FTresLuckyMarkMilestoneRewardDataTable, RewardTreasureName) == 0x000018, "Member 'FTresLuckyMarkMilestoneRewardDataTable::RewardTreasureName' has a wrong offset!");

// ScriptStruct TresGame.TresAtkCollShapeAssetUnit
// 0x11332F30 (0x11332F30 - 0x0000)
struct FTresAtkCollShapeAssetUnit final
{
public:
	class FName                                   M_GrpName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_DefaultAttackDataIDName;                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCollision                                M_ShapeType;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            M_Mesh;                                            // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionProfileName                  M_CollisionProfileName;                            // 0x0020(0x11332F30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ETresAtkCollLocationAttachType                M_AttachType1;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_SocketName1;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bSocketName1UseParentSkeleton : 1;               // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_RelativeLocation1;                               // 0x003C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bAbsoluteOffset1 : 1;                            // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bDisableLocation1Attach : 1;                     // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETresAtkCollLocationAttachType                M_AttachType2;                                     // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_SocketName2;                                     // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bSocketName2UseParentSkeleton : 1;               // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_RelativeLocation2;                               // 0x005C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bAbsoluteOffset2 : 1;                            // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bDisableLocation2Attach : 1;                     // 0x0068(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_Size;                                            // 0x006C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_IncSize;                                         // 0x0078(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_IncMaxSize;                                      // 0x0084(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           M_SizeVectorCurve;                                 // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bSizeVectorCurveLoop : 1;                        // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               M_RelativeRocation;                                // 0x009C(0x112E9AF0)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETresAtkCollRotAttachType                     M_RotAttachType;                                   // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_Scale;                                           // 0x00AC(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_IncScale;                                        // 0x00B8(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_IncMaxScale;                                     // 0x00C4(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           M_ScaleVectorCurve;                                // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bScaleVectorCurveLoop : 1;                       // 0x00D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bDisableSweep : 1;                               // 0x00D8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bEnablePawnRootCollision : 1;                    // 0x00D8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsPhysAttackCollision : 1;                      // 0x00D8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETresAtkCollMapHitType                        M_MapHitType;                                      // 0x00DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         M_bEnableMapHit : 1;                               // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bDisableGround : 1;                              // 0x00E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bDisableTakeDamage : 1;                          // 0x00E0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bDisableTeamCheck : 1;                           // 0x00E0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bZeroDamageIfSameTeam : 1;                       // 0x00E0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bDisableCharHit : 1;                             // 0x00E0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIgnoreParentScale : 1;                          // 0x00E0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_EffectGrpName;                                   // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             M_HitSEAsset;                                      // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresSoundAliasLabel                          M_HitSEID;                                         // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAtkCollShapeAssetUnit) == 0x11332F30, "Wrong alignment on FTresAtkCollShapeAssetUnit");
static_assert(sizeof(FTresAtkCollShapeAssetUnit) == 0x11332F30, "Wrong size on FTresAtkCollShapeAssetUnit");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_GrpName) == 0x000000, "Member 'FTresAtkCollShapeAssetUnit::M_GrpName' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_DefaultAttackDataIDName) == 0x000008, "Member 'FTresAtkCollShapeAssetUnit::M_DefaultAttackDataIDName' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_ShapeType) == 0x000010, "Member 'FTresAtkCollShapeAssetUnit::M_ShapeType' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_Mesh) == 0x000018, "Member 'FTresAtkCollShapeAssetUnit::M_Mesh' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_CollisionProfileName) == 0x000020, "Member 'FTresAtkCollShapeAssetUnit::M_CollisionProfileName' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_AttachType1) == 0x000028, "Member 'FTresAtkCollShapeAssetUnit::M_AttachType1' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_SocketName1) == 0x000030, "Member 'FTresAtkCollShapeAssetUnit::M_SocketName1' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_RelativeLocation1) == 0x00003C, "Member 'FTresAtkCollShapeAssetUnit::M_RelativeLocation1' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_AttachType2) == 0x00004C, "Member 'FTresAtkCollShapeAssetUnit::M_AttachType2' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_SocketName2) == 0x000050, "Member 'FTresAtkCollShapeAssetUnit::M_SocketName2' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_RelativeLocation2) == 0x00005C, "Member 'FTresAtkCollShapeAssetUnit::M_RelativeLocation2' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_Size) == 0x00006C, "Member 'FTresAtkCollShapeAssetUnit::M_Size' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_IncSize) == 0x000078, "Member 'FTresAtkCollShapeAssetUnit::M_IncSize' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_IncMaxSize) == 0x000084, "Member 'FTresAtkCollShapeAssetUnit::M_IncMaxSize' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_SizeVectorCurve) == 0x000090, "Member 'FTresAtkCollShapeAssetUnit::M_SizeVectorCurve' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_RelativeRocation) == 0x00009C, "Member 'FTresAtkCollShapeAssetUnit::M_RelativeRocation' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_RotAttachType) == 0x0000A8, "Member 'FTresAtkCollShapeAssetUnit::M_RotAttachType' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_Scale) == 0x0000AC, "Member 'FTresAtkCollShapeAssetUnit::M_Scale' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_IncScale) == 0x0000B8, "Member 'FTresAtkCollShapeAssetUnit::M_IncScale' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_IncMaxScale) == 0x0000C4, "Member 'FTresAtkCollShapeAssetUnit::M_IncMaxScale' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_ScaleVectorCurve) == 0x0000D0, "Member 'FTresAtkCollShapeAssetUnit::M_ScaleVectorCurve' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_MapHitType) == 0x0000DC, "Member 'FTresAtkCollShapeAssetUnit::M_MapHitType' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_EffectGrpName) == 0x0000E8, "Member 'FTresAtkCollShapeAssetUnit::M_EffectGrpName' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_HitSEAsset) == 0x0000F0, "Member 'FTresAtkCollShapeAssetUnit::M_HitSEAsset' has a wrong offset!");
static_assert(offsetof(FTresAtkCollShapeAssetUnit, M_HitSEID) == 0x0000F8, "Member 'FTresAtkCollShapeAssetUnit::M_HitSEID' has a wrong offset!");

// ScriptStruct TresGame.TresCockpitCmd
// 0x000C (0x000C - 0x0000)
struct FTresCockpitCmd final
{
public:
	ETresCommandKind                              M_cmdKind;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xB];                                        // 0x0001(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCockpitCmd) == 0x000001, "Wrong alignment on FTresCockpitCmd");
static_assert(sizeof(FTresCockpitCmd) == 0x00000C, "Wrong size on FTresCockpitCmd");
static_assert(offsetof(FTresCockpitCmd, M_cmdKind) == 0x000000, "Member 'FTresCockpitCmd::M_cmdKind' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuFrame
// 0x0028 (0x0028 - 0x0000)
struct FTresDebugMenuFrame final
{
public:
	int32                                         M_Start;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_End;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_TweenIndex;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Script;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 M_Elements;                                        // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuFrame) == 0x000008, "Wrong alignment on FTresDebugMenuFrame");
static_assert(sizeof(FTresDebugMenuFrame) == 0x000028, "Wrong size on FTresDebugMenuFrame");
static_assert(offsetof(FTresDebugMenuFrame, M_Start) == 0x000000, "Member 'FTresDebugMenuFrame::M_Start' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuFrame, M_End) == 0x000004, "Member 'FTresDebugMenuFrame::M_End' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuFrame, M_TweenIndex) == 0x000008, "Member 'FTresDebugMenuFrame::M_TweenIndex' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuFrame, M_Script) == 0x000010, "Member 'FTresDebugMenuFrame::M_Script' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuFrame, M_Elements) == 0x000018, "Member 'FTresDebugMenuFrame::M_Elements' has a wrong offset!");

// ScriptStruct TresGame.TresE_EX367_DarkShootingPatternParam
// 0x0010 (0x0010 - 0x0000)
struct FTresE_EX367_DarkShootingPatternParam final
{
public:
	float                                         M_ShotWaitTime;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Offset;                                          // 0x0004(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_EX367_DarkShootingPatternParam) == 0x000004, "Wrong alignment on FTresE_EX367_DarkShootingPatternParam");
static_assert(sizeof(FTresE_EX367_DarkShootingPatternParam) == 0x000010, "Wrong size on FTresE_EX367_DarkShootingPatternParam");
static_assert(offsetof(FTresE_EX367_DarkShootingPatternParam, M_ShotWaitTime) == 0x000000, "Member 'FTresE_EX367_DarkShootingPatternParam::M_ShotWaitTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX367_DarkShootingPatternParam, M_Offset) == 0x000004, "Member 'FTresE_EX367_DarkShootingPatternParam::M_Offset' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405AttackParam
// 0x114A67A0 (0x114A67A0 - 0x0000)
struct alignas(0x114A67A0) FTresE_dw405AttackParam final
{
public:
	TSubclassOf<class UTresAttack_e_dw405_Base>   AttackDefinition;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableOverrideAppearOffsetAngle : 1;              // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearOffsetAngle;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_dw405AttackParam) == 0x114A67A0, "Wrong alignment on FTresE_dw405AttackParam");
static_assert(sizeof(FTresE_dw405AttackParam) == 0x114A67A0, "Wrong size on FTresE_dw405AttackParam");
static_assert(offsetof(FTresE_dw405AttackParam, AttackDefinition) == 0x000000, "Member 'FTresE_dw405AttackParam::AttackDefinition' has a wrong offset!");
static_assert(offsetof(FTresE_dw405AttackParam, AppearOffsetAngle) == 0x00000C, "Member 'FTresE_dw405AttackParam::AppearOffsetAngle' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405ComboParam
// 0x0010 (0x0010 - 0x0000)
struct FTresE_dw405ComboParam final
{
public:
	TArray<struct FTresE_dw405AttackParam>        AttackParams;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_dw405ComboParam) == 0x000008, "Wrong alignment on FTresE_dw405ComboParam");
static_assert(sizeof(FTresE_dw405ComboParam) == 0x000010, "Wrong size on FTresE_dw405ComboParam");
static_assert(offsetof(FTresE_dw405ComboParam, AttackParams) == 0x000000, "Member 'FTresE_dw405ComboParam::AttackParams' has a wrong offset!");

// ScriptStruct TresGame.TresBladeTornadoInfo_e_ex301a
// 0x114A6A20 (0x114A6A20 - 0x0000)
struct alignas(0x114A6A20) FTresBladeTornadoInfo_e_ex301a final
{
public:
	float                                         Interval;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDistance;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnHeight;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearExcludeAngle;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearAngle;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnExcludeAngleYaw;                              // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnAngleYaw;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnAngleMaxPitch;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnAngleMinPitch;                                // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AimNum;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMissDistance;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMissDistance;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBladeTornadoInfo_e_ex301a) == 0x114A6A20, "Wrong alignment on FTresBladeTornadoInfo_e_ex301a");
static_assert(sizeof(FTresBladeTornadoInfo_e_ex301a) == 0x114A6A20, "Wrong size on FTresBladeTornadoInfo_e_ex301a");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, Interval) == 0x000000, "Member 'FTresBladeTornadoInfo_e_ex301a::Interval' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, SpawnDistance) == 0x000004, "Member 'FTresBladeTornadoInfo_e_ex301a::SpawnDistance' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, SpawnHeight) == 0x000008, "Member 'FTresBladeTornadoInfo_e_ex301a::SpawnHeight' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, AppearExcludeAngle) == 0x00000C, "Member 'FTresBladeTornadoInfo_e_ex301a::AppearExcludeAngle' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, AppearAngle) == 0x000010, "Member 'FTresBladeTornadoInfo_e_ex301a::AppearAngle' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, SpawnExcludeAngleYaw) == 0x000014, "Member 'FTresBladeTornadoInfo_e_ex301a::SpawnExcludeAngleYaw' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, SpawnAngleYaw) == 0x000018, "Member 'FTresBladeTornadoInfo_e_ex301a::SpawnAngleYaw' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, SpawnAngleMaxPitch) == 0x00001C, "Member 'FTresBladeTornadoInfo_e_ex301a::SpawnAngleMaxPitch' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, SpawnAngleMinPitch) == 0x000020, "Member 'FTresBladeTornadoInfo_e_ex301a::SpawnAngleMinPitch' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, AimNum) == 0x000024, "Member 'FTresBladeTornadoInfo_e_ex301a::AimNum' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, MinMissDistance) == 0x000028, "Member 'FTresBladeTornadoInfo_e_ex301a::MinMissDistance' has a wrong offset!");
static_assert(offsetof(FTresBladeTornadoInfo_e_ex301a, MaxMissDistance) == 0x00002C, "Member 'FTresBladeTornadoInfo_e_ex301a::MaxMissDistance' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBattleMissionIndividalParam
// 0x11520B60 (0x11520B60 - 0x0000)
struct FTresGumiShipBattleMissionIndividalParam final
{
public:
	ETresGumiShipBattleMissionType                M_eBattleType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        M_udScoreOfRanks[0x5];                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_dTimeBonus[0x8];                                 // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresGumiShipBattleMisisonBonusWithConditionI M_DefeatedBonus[0x3];                              // 0x0038(0x11520B60)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        M_udTimeLimitSeconds;                              // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_udNumbetOfDefeated;                              // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_ItemDataName;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_InfoMesLabel;                                    // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipBattleMissionIndividalParam) == 0x11520B60, "Wrong alignment on FTresGumiShipBattleMissionIndividalParam");
static_assert(sizeof(FTresGumiShipBattleMissionIndividalParam) == 0x11520B60, "Wrong size on FTresGumiShipBattleMissionIndividalParam");
static_assert(offsetof(FTresGumiShipBattleMissionIndividalParam, M_eBattleType) == 0x000000, "Member 'FTresGumiShipBattleMissionIndividalParam::M_eBattleType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionIndividalParam, M_udScoreOfRanks) == 0x000004, "Member 'FTresGumiShipBattleMissionIndividalParam::M_udScoreOfRanks' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionIndividalParam, M_dTimeBonus) == 0x000018, "Member 'FTresGumiShipBattleMissionIndividalParam::M_dTimeBonus' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionIndividalParam, M_DefeatedBonus) == 0x000038, "Member 'FTresGumiShipBattleMissionIndividalParam::M_DefeatedBonus' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionIndividalParam, M_udTimeLimitSeconds) == 0x000050, "Member 'FTresGumiShipBattleMissionIndividalParam::M_udTimeLimitSeconds' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionIndividalParam, M_udNumbetOfDefeated) == 0x000054, "Member 'FTresGumiShipBattleMissionIndividalParam::M_udNumbetOfDefeated' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionIndividalParam, M_ItemDataName) == 0x000058, "Member 'FTresGumiShipBattleMissionIndividalParam::M_ItemDataName' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionIndividalParam, M_InfoMesLabel) == 0x000060, "Member 'FTresGumiShipBattleMissionIndividalParam::M_InfoMesLabel' has a wrong offset!");

// ScriptStruct TresGame.TresAnims_e_he001a
// 0x114FFFE0 (0x114FFFE0 - 0x0000)
struct alignas(0x114FFFE0) FTresAnims_e_he001a final
{
public:
	class FName                                   AttackName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReactionName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAnims_e_he001a) == 0x114FFFE0, "Wrong alignment on FTresAnims_e_he001a");
static_assert(sizeof(FTresAnims_e_he001a) == 0x114FFFE0, "Wrong size on FTresAnims_e_he001a");
static_assert(offsetof(FTresAnims_e_he001a, AttackName) == 0x000000, "Member 'FTresAnims_e_he001a::AttackName' has a wrong offset!");
static_assert(offsetof(FTresAnims_e_he001a, ReactionName) == 0x000008, "Member 'FTresAnims_e_he001a::ReactionName' has a wrong offset!");

// ScriptStruct TresGame.TresChaosFiragaShotInterval_e_ex352
// 0x0008 (0x0008 - 0x0000)
struct FTresChaosFiragaShotInterval_e_ex352 final
{
public:
	float                                         M_Interval;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bHomingEnabled;                                  // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresChaosFiragaShotInterval_e_ex352) == 0x000004, "Wrong alignment on FTresChaosFiragaShotInterval_e_ex352");
static_assert(sizeof(FTresChaosFiragaShotInterval_e_ex352) == 0x000008, "Wrong size on FTresChaosFiragaShotInterval_e_ex352");
static_assert(offsetof(FTresChaosFiragaShotInterval_e_ex352, M_Interval) == 0x000000, "Member 'FTresChaosFiragaShotInterval_e_ex352::M_Interval' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaShotInterval_e_ex352, M_bHomingEnabled) == 0x000004, "Member 'FTresChaosFiragaShotInterval_e_ex352::M_bHomingEnabled' has a wrong offset!");

// ScriptStruct TresGame.TresChaosFiragaParams_e_ex352
// 0x0050 (0x0050 - 0x0000)
struct FTresChaosFiragaParams_e_ex352 final
{
public:
	bool                                          M_bSingleShot;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_DisengageRange;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fProjectileFiringRadius;                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShotSpeed;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AimOffsetHeight;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fProjectileSpreadRadius;                         // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMinAngle;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxAngle;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fProjectileSpreadMargin;                         // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 M_AttackIntervals;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresChaosFiragaShotInterval_e_ex352> M_ShotIntervalArray;                               // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          M_bShot3D;                                         // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresChaosFiragaParams_e_ex352) == 0x000008, "Wrong alignment on FTresChaosFiragaParams_e_ex352");
static_assert(sizeof(FTresChaosFiragaParams_e_ex352) == 0x000050, "Wrong size on FTresChaosFiragaParams_e_ex352");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_bSingleShot) == 0x000000, "Member 'FTresChaosFiragaParams_e_ex352::M_bSingleShot' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_DisengageRange) == 0x000004, "Member 'FTresChaosFiragaParams_e_ex352::M_DisengageRange' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_fProjectileFiringRadius) == 0x000008, "Member 'FTresChaosFiragaParams_e_ex352::M_fProjectileFiringRadius' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_ShotSpeed) == 0x00000C, "Member 'FTresChaosFiragaParams_e_ex352::M_ShotSpeed' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_AimOffsetHeight) == 0x000010, "Member 'FTresChaosFiragaParams_e_ex352::M_AimOffsetHeight' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_fProjectileSpreadRadius) == 0x000014, "Member 'FTresChaosFiragaParams_e_ex352::M_fProjectileSpreadRadius' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_fMinAngle) == 0x000018, "Member 'FTresChaosFiragaParams_e_ex352::M_fMinAngle' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_fMaxAngle) == 0x00001C, "Member 'FTresChaosFiragaParams_e_ex352::M_fMaxAngle' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_fProjectileSpreadMargin) == 0x000020, "Member 'FTresChaosFiragaParams_e_ex352::M_fProjectileSpreadMargin' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_AttackIntervals) == 0x000028, "Member 'FTresChaosFiragaParams_e_ex352::M_AttackIntervals' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_ShotIntervalArray) == 0x000038, "Member 'FTresChaosFiragaParams_e_ex352::M_ShotIntervalArray' has a wrong offset!");
static_assert(offsetof(FTresChaosFiragaParams_e_ex352, M_bShot3D) == 0x000048, "Member 'FTresChaosFiragaParams_e_ex352::M_bShot3D' has a wrong offset!");

// ScriptStruct TresGame.TresBattleLevelAutoData
// 0x114C99A0 (0x114C99A0 - 0x0000)
struct alignas(0x114C99A0) FTresBattleLevelAutoData final
{
public:
	ETresWorldCode                                WorldCode;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresWorldAreaCode                            AreaCode;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LabelStart;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LabelEnd;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleLevel;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleLevelDLC;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBattleLevelAutoData) == 0x114C99A0, "Wrong alignment on FTresBattleLevelAutoData");
static_assert(sizeof(FTresBattleLevelAutoData) == 0x114C99A0, "Wrong size on FTresBattleLevelAutoData");
static_assert(offsetof(FTresBattleLevelAutoData, WorldCode) == 0x000000, "Member 'FTresBattleLevelAutoData::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresBattleLevelAutoData, AreaCode) == 0x000001, "Member 'FTresBattleLevelAutoData::AreaCode' has a wrong offset!");
static_assert(offsetof(FTresBattleLevelAutoData, LabelStart) == 0x000008, "Member 'FTresBattleLevelAutoData::LabelStart' has a wrong offset!");
static_assert(offsetof(FTresBattleLevelAutoData, LabelEnd) == 0x000010, "Member 'FTresBattleLevelAutoData::LabelEnd' has a wrong offset!");
static_assert(offsetof(FTresBattleLevelAutoData, BattleLevel) == 0x000018, "Member 'FTresBattleLevelAutoData::BattleLevel' has a wrong offset!");
static_assert(offsetof(FTresBattleLevelAutoData, BattleLevelDLC) == 0x00001C, "Member 'FTresBattleLevelAutoData::BattleLevelDLC' has a wrong offset!");

// ScriptStruct TresGame.TresE_EX781_CallGigasPatternParam
// 0x115107B0 (0x115107B0 - 0x0000)
struct alignas(0x115107B0) FTresE_EX781_CallGigasPatternParam final
{
public:
	EColorTypes_e_ex781Gigas                      M_GigasType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         M_LandAfterAttack : 1;                             // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_CraftWaitTime;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_IsTargetPos : 1;                                 // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_IsWarldPos : 1;                                  // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_WarldPos;                                        // 0x0010(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TargetDist;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_TargetDir;                                       // 0x0020(0x112E95F0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Offset;                                          // 0x0028(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MoveDir;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_PitchMoveDir;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ActionID;                                        // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_EX781_CallGigasPatternParam) == 0x115107B0, "Wrong alignment on FTresE_EX781_CallGigasPatternParam");
static_assert(sizeof(FTresE_EX781_CallGigasPatternParam) == 0x115107B0, "Wrong size on FTresE_EX781_CallGigasPatternParam");
static_assert(offsetof(FTresE_EX781_CallGigasPatternParam, M_GigasType) == 0x000000, "Member 'FTresE_EX781_CallGigasPatternParam::M_GigasType' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_CallGigasPatternParam, M_CraftWaitTime) == 0x000008, "Member 'FTresE_EX781_CallGigasPatternParam::M_CraftWaitTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_CallGigasPatternParam, M_WarldPos) == 0x000010, "Member 'FTresE_EX781_CallGigasPatternParam::M_WarldPos' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_CallGigasPatternParam, M_TargetDist) == 0x00001C, "Member 'FTresE_EX781_CallGigasPatternParam::M_TargetDist' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_CallGigasPatternParam, M_TargetDir) == 0x000020, "Member 'FTresE_EX781_CallGigasPatternParam::M_TargetDir' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_CallGigasPatternParam, M_Offset) == 0x000028, "Member 'FTresE_EX781_CallGigasPatternParam::M_Offset' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_CallGigasPatternParam, M_MoveDir) == 0x000034, "Member 'FTresE_EX781_CallGigasPatternParam::M_MoveDir' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_CallGigasPatternParam, M_PitchMoveDir) == 0x000038, "Member 'FTresE_EX781_CallGigasPatternParam::M_PitchMoveDir' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_CallGigasPatternParam, M_ActionID) == 0x00003C, "Member 'FTresE_EX781_CallGigasPatternParam::M_ActionID' has a wrong offset!");

// ScriptStruct TresGame.MeleeRootMotionScaleParam_e_ex761
// 0x114A7E20 (0x114A7E20 - 0x0000)
struct alignas(0x114A7E20) FMeleeRootMotionScaleParam_e_ex761 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeRootMotionScaleParam_e_ex761) == 0x114A7E20, "Wrong alignment on FMeleeRootMotionScaleParam_e_ex761");
static_assert(sizeof(FMeleeRootMotionScaleParam_e_ex761) == 0x114A7E20, "Wrong size on FMeleeRootMotionScaleParam_e_ex761");
static_assert(offsetof(FMeleeRootMotionScaleParam_e_ex761, Distance) == 0x000000, "Member 'FMeleeRootMotionScaleParam_e_ex761::Distance' has a wrong offset!");
static_assert(offsetof(FMeleeRootMotionScaleParam_e_ex761, RootMotionScale) == 0x000004, "Member 'FMeleeRootMotionScaleParam_e_ex761::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanOmegaPeriod
// 0x0002 (0x4CD8 - 0x4CD6)
struct alignas(0x4CD8) FTresTaggedActorPropertyValue_OceanOmegaPeriod final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanOmegaPeriod) == 0x004CD8, "Wrong alignment on FTresTaggedActorPropertyValue_OceanOmegaPeriod");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanOmegaPeriod) == 0x004CD8, "Wrong size on FTresTaggedActorPropertyValue_OceanOmegaPeriod");

// ScriptStruct TresGame.TresNpc_n_ex023_TractionData
// 0x114A7FF0 (0x114A7FF0 - 0x0000)
struct alignas(0x114A7FF0) FTresNpc_n_ex023_TractionData final
{
public:
	class FString                                 M_Comment;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxVerticalTractionDistance;                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHorizontalTractionDistance;                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fVerticalOffsetFromTarget;                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHorizontalOffsetFromTarget;                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresNpc_n_ex023_TractionData) == 0x114A7FF0, "Wrong alignment on FTresNpc_n_ex023_TractionData");
static_assert(sizeof(FTresNpc_n_ex023_TractionData) == 0x114A7FF0, "Wrong size on FTresNpc_n_ex023_TractionData");
static_assert(offsetof(FTresNpc_n_ex023_TractionData, M_Comment) == 0x000000, "Member 'FTresNpc_n_ex023_TractionData::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresNpc_n_ex023_TractionData, M_fMaxVerticalTractionDistance) == 0x000010, "Member 'FTresNpc_n_ex023_TractionData::M_fMaxVerticalTractionDistance' has a wrong offset!");
static_assert(offsetof(FTresNpc_n_ex023_TractionData, M_fMaxHorizontalTractionDistance) == 0x000014, "Member 'FTresNpc_n_ex023_TractionData::M_fMaxHorizontalTractionDistance' has a wrong offset!");
static_assert(offsetof(FTresNpc_n_ex023_TractionData, M_fVerticalOffsetFromTarget) == 0x000018, "Member 'FTresNpc_n_ex023_TractionData::M_fVerticalOffsetFromTarget' has a wrong offset!");
static_assert(offsetof(FTresNpc_n_ex023_TractionData, M_fHorizontalOffsetFromTarget) == 0x00001C, "Member 'FTresNpc_n_ex023_TractionData::M_fHorizontalOffsetFromTarget' has a wrong offset!");

// ScriptStruct TresGame.BX901_EffectGroupID
// 0x0008 (0x0008 - 0x0000)
struct FBX901_EffectGroupID final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBX901_EffectGroupID) == 0x000004, "Wrong alignment on FBX901_EffectGroupID");
static_assert(sizeof(FBX901_EffectGroupID) == 0x000008, "Wrong size on FBX901_EffectGroupID");
static_assert(offsetof(FBX901_EffectGroupID, ID) == 0x000004, "Member 'FBX901_EffectGroupID::ID' has a wrong offset!");

// ScriptStruct TresGame.TresRoarSpawnProjectileParam_e_dw407b
// 0x114A8370 (0x114A8370 - 0x0000)
struct alignas(0x114A8370) FTresRoarSpawnProjectileParam_e_dw407b final
{
public:
	int32                                         M_SpawnProjectileSameTimeNum;                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpawnProjectileRadius;                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AimTargetDirectionMinDistance;                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AimTargetDirectionMaxDistance;                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AimTargetDirectionAngle;                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRoarSpawnProjectileParam_e_dw407b) == 0x114A8370, "Wrong alignment on FTresRoarSpawnProjectileParam_e_dw407b");
static_assert(sizeof(FTresRoarSpawnProjectileParam_e_dw407b) == 0x114A8370, "Wrong size on FTresRoarSpawnProjectileParam_e_dw407b");
static_assert(offsetof(FTresRoarSpawnProjectileParam_e_dw407b, M_SpawnProjectileSameTimeNum) == 0x000000, "Member 'FTresRoarSpawnProjectileParam_e_dw407b::M_SpawnProjectileSameTimeNum' has a wrong offset!");
static_assert(offsetof(FTresRoarSpawnProjectileParam_e_dw407b, M_SpawnProjectileRadius) == 0x000004, "Member 'FTresRoarSpawnProjectileParam_e_dw407b::M_SpawnProjectileRadius' has a wrong offset!");
static_assert(offsetof(FTresRoarSpawnProjectileParam_e_dw407b, M_AimTargetDirectionMinDistance) == 0x000008, "Member 'FTresRoarSpawnProjectileParam_e_dw407b::M_AimTargetDirectionMinDistance' has a wrong offset!");
static_assert(offsetof(FTresRoarSpawnProjectileParam_e_dw407b, M_AimTargetDirectionMaxDistance) == 0x00000C, "Member 'FTresRoarSpawnProjectileParam_e_dw407b::M_AimTargetDirectionMaxDistance' has a wrong offset!");
static_assert(offsetof(FTresRoarSpawnProjectileParam_e_dw407b, M_AimTargetDirectionAngle) == 0x000010, "Member 'FTresRoarSpawnProjectileParam_e_dw407b::M_AimTargetDirectionAngle' has a wrong offset!");

// ScriptStruct TresGame.TresDashParams_e_ex107
// 0x114A88C0 (0x114A88C0 - 0x0000)
struct alignas(0x114A88C0) FTresDashParams_e_ex107 final
{
public:
	float                                         MaxMoveSpeed;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Decelaration;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMoveSpeed;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAngleXY;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAngleZ;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDashLimit : 1;                                    // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitDistance;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitTime;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDashParams_e_ex107) == 0x114A88C0, "Wrong alignment on FTresDashParams_e_ex107");
static_assert(sizeof(FTresDashParams_e_ex107) == 0x114A88C0, "Wrong size on FTresDashParams_e_ex107");
static_assert(offsetof(FTresDashParams_e_ex107, MaxMoveSpeed) == 0x000000, "Member 'FTresDashParams_e_ex107::MaxMoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresDashParams_e_ex107, Acceleration) == 0x000004, "Member 'FTresDashParams_e_ex107::Acceleration' has a wrong offset!");
static_assert(offsetof(FTresDashParams_e_ex107, Decelaration) == 0x000008, "Member 'FTresDashParams_e_ex107::Decelaration' has a wrong offset!");
static_assert(offsetof(FTresDashParams_e_ex107, MinMoveSpeed) == 0x00000C, "Member 'FTresDashParams_e_ex107::MinMoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresDashParams_e_ex107, HomingAngleXY) == 0x000010, "Member 'FTresDashParams_e_ex107::HomingAngleXY' has a wrong offset!");
static_assert(offsetof(FTresDashParams_e_ex107, HomingAngleZ) == 0x000014, "Member 'FTresDashParams_e_ex107::HomingAngleZ' has a wrong offset!");
static_assert(offsetof(FTresDashParams_e_ex107, LimitDistance) == 0x00001C, "Member 'FTresDashParams_e_ex107::LimitDistance' has a wrong offset!");
static_assert(offsetof(FTresDashParams_e_ex107, LimitTime) == 0x000020, "Member 'FTresDashParams_e_ex107::LimitTime' has a wrong offset!");

// ScriptStruct TresGame.TresDashAnims_e_ex107
// 0x0010 (0x0010 - 0x0000)
struct FTresDashAnims_e_ex107 final
{
public:
	class UAnimSequenceBase*                      StartAnimData;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      DashAnimData;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDashAnims_e_ex107) == 0x000008, "Wrong alignment on FTresDashAnims_e_ex107");
static_assert(sizeof(FTresDashAnims_e_ex107) == 0x000010, "Wrong size on FTresDashAnims_e_ex107");
static_assert(offsetof(FTresDashAnims_e_ex107, StartAnimData) == 0x000000, "Member 'FTresDashAnims_e_ex107::StartAnimData' has a wrong offset!");
static_assert(offsetof(FTresDashAnims_e_ex107, DashAnimData) == 0x000008, "Member 'FTresDashAnims_e_ex107::DashAnimData' has a wrong offset!");

// ScriptStruct TresGame.EX355_EffectGroupID
// 0x0008 (0x0008 - 0x0000)
struct FEX355_EffectGroupID final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_EffectGroupID) == 0x000004, "Wrong alignment on FEX355_EffectGroupID");
static_assert(sizeof(FEX355_EffectGroupID) == 0x000008, "Wrong size on FEX355_EffectGroupID");
static_assert(offsetof(FEX355_EffectGroupID, ID) == 0x000004, "Member 'FEX355_EffectGroupID::ID' has a wrong offset!");

// ScriptStruct TresGame.TresEffectAttachTrackKey
// 0x0018 (0x0018 - 0x0000)
struct FTresEffectAttachTrackKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresEffectAttachTrack_AttachType             M_AttachType;                                      // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_ATTACH_OBJECT_NAME                      M_AttachObjectType;                                // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_SocketName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_GroupID;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_RunEvenWhenSkippingKey : 1;                      // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEffectAttachTrackKey) == 0x000004, "Wrong alignment on FTresEffectAttachTrackKey");
static_assert(sizeof(FTresEffectAttachTrackKey) == 0x000018, "Wrong size on FTresEffectAttachTrackKey");
static_assert(offsetof(FTresEffectAttachTrackKey, M_Time) == 0x000000, "Member 'FTresEffectAttachTrackKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresEffectAttachTrackKey, M_AttachType) == 0x000004, "Member 'FTresEffectAttachTrackKey::M_AttachType' has a wrong offset!");
static_assert(offsetof(FTresEffectAttachTrackKey, M_AttachObjectType) == 0x000005, "Member 'FTresEffectAttachTrackKey::M_AttachObjectType' has a wrong offset!");
static_assert(offsetof(FTresEffectAttachTrackKey, M_SocketName) == 0x000008, "Member 'FTresEffectAttachTrackKey::M_SocketName' has a wrong offset!");
static_assert(offsetof(FTresEffectAttachTrackKey, M_GroupID) == 0x000010, "Member 'FTresEffectAttachTrackKey::M_GroupID' has a wrong offset!");

// ScriptStruct TresGame.TresRemyPawnDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresRemyPawnDataTable final : public FTableRowBase
{
public:
	struct FVector                                PawnLocation;                                      // 0x0008(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PawnRotation;                                      // 0x0014(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                HourglassLocation;                                 // 0x0020(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GreatSuccessEffectLocationOffset;                  // 0x002C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GreatSuccessBGEffectLocation;                      // 0x0038(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               GreatSuccessBGEffectRotation;                      // 0x0044(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                GasStoveFireEffectLocation;                        // 0x0050(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRemyPawnDataTable) == 0x11413080, "Wrong alignment on FTresRemyPawnDataTable");
static_assert(sizeof(FTresRemyPawnDataTable) == 0x11413080, "Wrong size on FTresRemyPawnDataTable");
static_assert(offsetof(FTresRemyPawnDataTable, PawnLocation) == 0x000008, "Member 'FTresRemyPawnDataTable::PawnLocation' has a wrong offset!");
static_assert(offsetof(FTresRemyPawnDataTable, PawnRotation) == 0x000014, "Member 'FTresRemyPawnDataTable::PawnRotation' has a wrong offset!");
static_assert(offsetof(FTresRemyPawnDataTable, HourglassLocation) == 0x000020, "Member 'FTresRemyPawnDataTable::HourglassLocation' has a wrong offset!");
static_assert(offsetof(FTresRemyPawnDataTable, GreatSuccessEffectLocationOffset) == 0x00002C, "Member 'FTresRemyPawnDataTable::GreatSuccessEffectLocationOffset' has a wrong offset!");
static_assert(offsetof(FTresRemyPawnDataTable, GreatSuccessBGEffectLocation) == 0x000038, "Member 'FTresRemyPawnDataTable::GreatSuccessBGEffectLocation' has a wrong offset!");
static_assert(offsetof(FTresRemyPawnDataTable, GreatSuccessBGEffectRotation) == 0x000044, "Member 'FTresRemyPawnDataTable::GreatSuccessBGEffectRotation' has a wrong offset!");
static_assert(offsetof(FTresRemyPawnDataTable, GasStoveFireEffectLocation) == 0x000050, "Member 'FTresRemyPawnDataTable::GasStoveFireEffectLocation' has a wrong offset!");

// ScriptStruct TresGame.Kunai_Details
// 0x114A9080 (0x114A9080 - 0x0000)
struct alignas(0x114A9080) FKunai_Details final
{
public:
	EKunaiType                                    M_KunaiType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Timing;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Angle;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Velocity;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKunai_Details) == 0x114A9080, "Wrong alignment on FKunai_Details");
static_assert(sizeof(FKunai_Details) == 0x114A9080, "Wrong size on FKunai_Details");
static_assert(offsetof(FKunai_Details, M_KunaiType) == 0x000000, "Member 'FKunai_Details::M_KunaiType' has a wrong offset!");
static_assert(offsetof(FKunai_Details, M_Timing) == 0x000004, "Member 'FKunai_Details::M_Timing' has a wrong offset!");
static_assert(offsetof(FKunai_Details, M_Angle) == 0x000008, "Member 'FKunai_Details::M_Angle' has a wrong offset!");
static_assert(offsetof(FKunai_Details, M_Velocity) == 0x00000C, "Member 'FKunai_Details::M_Velocity' has a wrong offset!");

// ScriptStruct TresGame.Kunai_Setup
// 0x114A9380 (0x114A9380 - 0x0000)
struct alignas(0x114A9380) FKunai_Setup final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_BoneName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_IgnoreAtkCollGroupName;                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKunai_Setup) == 0x114A9380, "Wrong alignment on FKunai_Setup");
static_assert(sizeof(FKunai_Setup) == 0x114A9380, "Wrong size on FKunai_Setup");
static_assert(offsetof(FKunai_Setup, M_BoneName) == 0x000008, "Member 'FKunai_Setup::M_BoneName' has a wrong offset!");
static_assert(offsetof(FKunai_Setup, M_IgnoreAtkCollGroupName) == 0x000010, "Member 'FKunai_Setup::M_IgnoreAtkCollGroupName' has a wrong offset!");

// ScriptStruct TresGame.TresIconTextDataTable
// 0x12A6C0 (0x1153D740 - 0x11413080)
struct alignas(0x1153D740) FTresIconTextDataTable final : public FTableRowBase
{
public:
	int32                                         X;                                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VSpace;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BindKey;                                           // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresIconTextDataTable) == 0x1153D740, "Wrong alignment on FTresIconTextDataTable");
static_assert(sizeof(FTresIconTextDataTable) == 0x1153D740, "Wrong size on FTresIconTextDataTable");
static_assert(offsetof(FTresIconTextDataTable, X) == 0x000008, "Member 'FTresIconTextDataTable::X' has a wrong offset!");
static_assert(offsetof(FTresIconTextDataTable, Y) == 0x00000C, "Member 'FTresIconTextDataTable::Y' has a wrong offset!");
static_assert(offsetof(FTresIconTextDataTable, Width) == 0x000010, "Member 'FTresIconTextDataTable::Width' has a wrong offset!");
static_assert(offsetof(FTresIconTextDataTable, Height) == 0x000014, "Member 'FTresIconTextDataTable::Height' has a wrong offset!");
static_assert(offsetof(FTresIconTextDataTable, VSpace) == 0x000018, "Member 'FTresIconTextDataTable::VSpace' has a wrong offset!");
static_assert(offsetof(FTresIconTextDataTable, BindKey) == 0x000020, "Member 'FTresIconTextDataTable::BindKey' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx304RootMotionScaleInfo
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx304RootMotionScaleInfo final
{
public:
	class UCurveFloat*                            RootMotionScaleCurveData;                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverRunTarget : 1;                                // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx304RootMotionScaleInfo) == 0x000008, "Wrong alignment on FTresEnemyEx304RootMotionScaleInfo");
static_assert(sizeof(FTresEnemyEx304RootMotionScaleInfo) == 0x000010, "Wrong size on FTresEnemyEx304RootMotionScaleInfo");
static_assert(offsetof(FTresEnemyEx304RootMotionScaleInfo, RootMotionScaleCurveData) == 0x000000, "Member 'FTresEnemyEx304RootMotionScaleInfo::RootMotionScaleCurveData' has a wrong offset!");

// ScriptStruct TresGame.TresHomingDarkLaserSpawnParams_e_ex316
// 0x114A9740 (0x114A9740 - 0x0000)
struct alignas(0x114A9740) FTresHomingDarkLaserSpawnParams_e_ex316 final
{
public:
	float                                         M_SpawnMinRadius;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpawnMaxRadius;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpawnMinHieght;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpawnMaxHeight;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresHomingDarkLaserSpawnParams_e_ex316) == 0x114A9740, "Wrong alignment on FTresHomingDarkLaserSpawnParams_e_ex316");
static_assert(sizeof(FTresHomingDarkLaserSpawnParams_e_ex316) == 0x114A9740, "Wrong size on FTresHomingDarkLaserSpawnParams_e_ex316");
static_assert(offsetof(FTresHomingDarkLaserSpawnParams_e_ex316, M_SpawnMinRadius) == 0x000000, "Member 'FTresHomingDarkLaserSpawnParams_e_ex316::M_SpawnMinRadius' has a wrong offset!");
static_assert(offsetof(FTresHomingDarkLaserSpawnParams_e_ex316, M_SpawnMaxRadius) == 0x000004, "Member 'FTresHomingDarkLaserSpawnParams_e_ex316::M_SpawnMaxRadius' has a wrong offset!");
static_assert(offsetof(FTresHomingDarkLaserSpawnParams_e_ex316, M_SpawnMinHieght) == 0x000008, "Member 'FTresHomingDarkLaserSpawnParams_e_ex316::M_SpawnMinHieght' has a wrong offset!");
static_assert(offsetof(FTresHomingDarkLaserSpawnParams_e_ex316, M_SpawnMaxHeight) == 0x00000C, "Member 'FTresHomingDarkLaserSpawnParams_e_ex316::M_SpawnMaxHeight' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipRaderObject
// 0x0048 (0x0048 - 0x0000)
struct FTresGumiShipRaderObject final
{
public:
	class UGFxObject*                             M_pRoot;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pMarker;                                         // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pWorld;                                          // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pArena;                                          // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pTravel;                                         // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pTreasure;                                       // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pCrystal;                                        // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pBox;                                            // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipRaderObject) == 0x000008, "Wrong alignment on FTresGumiShipRaderObject");
static_assert(sizeof(FTresGumiShipRaderObject) == 0x000048, "Wrong size on FTresGumiShipRaderObject");
static_assert(offsetof(FTresGumiShipRaderObject, M_pRoot) == 0x000000, "Member 'FTresGumiShipRaderObject::M_pRoot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRaderObject, M_pMarker) == 0x000008, "Member 'FTresGumiShipRaderObject::M_pMarker' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRaderObject, M_pWorld) == 0x000010, "Member 'FTresGumiShipRaderObject::M_pWorld' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRaderObject, M_pArena) == 0x000018, "Member 'FTresGumiShipRaderObject::M_pArena' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRaderObject, M_pTravel) == 0x000020, "Member 'FTresGumiShipRaderObject::M_pTravel' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRaderObject, M_pTreasure) == 0x000028, "Member 'FTresGumiShipRaderObject::M_pTreasure' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRaderObject, M_pCrystal) == 0x000030, "Member 'FTresGumiShipRaderObject::M_pCrystal' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRaderObject, M_pBox) == 0x000038, "Member 'FTresGumiShipRaderObject::M_pBox' has a wrong offset!");

// ScriptStruct TresGame.TresDarkRushCircleParam
// 0x001C (0x001C - 0x0000)
struct FTresDarkRushCircleParam final
{
public:
	float                                         M_IntervalRange;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_m_InitAngle;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_m_IntervalAngle;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_IntervalTime;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EndRange;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MoveSpeed;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsMoveReverse;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresDarkRushCircleParam) == 0x000004, "Wrong alignment on FTresDarkRushCircleParam");
static_assert(sizeof(FTresDarkRushCircleParam) == 0x00001C, "Wrong size on FTresDarkRushCircleParam");
static_assert(offsetof(FTresDarkRushCircleParam, M_IntervalRange) == 0x000000, "Member 'FTresDarkRushCircleParam::M_IntervalRange' has a wrong offset!");
static_assert(offsetof(FTresDarkRushCircleParam, M_m_InitAngle) == 0x000004, "Member 'FTresDarkRushCircleParam::M_m_InitAngle' has a wrong offset!");
static_assert(offsetof(FTresDarkRushCircleParam, M_m_IntervalAngle) == 0x000008, "Member 'FTresDarkRushCircleParam::M_m_IntervalAngle' has a wrong offset!");
static_assert(offsetof(FTresDarkRushCircleParam, M_IntervalTime) == 0x00000C, "Member 'FTresDarkRushCircleParam::M_IntervalTime' has a wrong offset!");
static_assert(offsetof(FTresDarkRushCircleParam, M_EndRange) == 0x000010, "Member 'FTresDarkRushCircleParam::M_EndRange' has a wrong offset!");
static_assert(offsetof(FTresDarkRushCircleParam, M_MoveSpeed) == 0x000014, "Member 'FTresDarkRushCircleParam::M_MoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresDarkRushCircleParam, M_IsMoveReverse) == 0x000018, "Member 'FTresDarkRushCircleParam::M_IsMoveReverse' has a wrong offset!");

// ScriptStruct TresGame.ProjectileParam_e_ex322a
// 0x003C (0x003C - 0x0000)
struct FProjectileParam_e_ex322a final
{
public:
	float                                         AppearAngle;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearDistance;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearHeight;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearOffsetTime;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotOffsetTime;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableSettingShotYaw : 1;                         // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShotYaw;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableSettingShotPitch : 1;                       // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShotPitch;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideRange;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideEnableSettingShotYaw : 1;                 // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideShotYaw;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideEnableSettingShotPitch : 1;               // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideShotPitch;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideEnableHoming : 1;                         // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProjectileParam_e_ex322a) == 0x000004, "Wrong alignment on FProjectileParam_e_ex322a");
static_assert(sizeof(FProjectileParam_e_ex322a) == 0x00003C, "Wrong size on FProjectileParam_e_ex322a");
static_assert(offsetof(FProjectileParam_e_ex322a, AppearAngle) == 0x000000, "Member 'FProjectileParam_e_ex322a::AppearAngle' has a wrong offset!");
static_assert(offsetof(FProjectileParam_e_ex322a, AppearDistance) == 0x000004, "Member 'FProjectileParam_e_ex322a::AppearDistance' has a wrong offset!");
static_assert(offsetof(FProjectileParam_e_ex322a, AppearHeight) == 0x000008, "Member 'FProjectileParam_e_ex322a::AppearHeight' has a wrong offset!");
static_assert(offsetof(FProjectileParam_e_ex322a, AppearOffsetTime) == 0x00000C, "Member 'FProjectileParam_e_ex322a::AppearOffsetTime' has a wrong offset!");
static_assert(offsetof(FProjectileParam_e_ex322a, ShotOffsetTime) == 0x000010, "Member 'FProjectileParam_e_ex322a::ShotOffsetTime' has a wrong offset!");
static_assert(offsetof(FProjectileParam_e_ex322a, ShotYaw) == 0x000018, "Member 'FProjectileParam_e_ex322a::ShotYaw' has a wrong offset!");
static_assert(offsetof(FProjectileParam_e_ex322a, ShotPitch) == 0x000020, "Member 'FProjectileParam_e_ex322a::ShotPitch' has a wrong offset!");
static_assert(offsetof(FProjectileParam_e_ex322a, OverrideRange) == 0x000024, "Member 'FProjectileParam_e_ex322a::OverrideRange' has a wrong offset!");
static_assert(offsetof(FProjectileParam_e_ex322a, OverrideShotYaw) == 0x00002C, "Member 'FProjectileParam_e_ex322a::OverrideShotYaw' has a wrong offset!");
static_assert(offsetof(FProjectileParam_e_ex322a, OverrideShotPitch) == 0x000034, "Member 'FProjectileParam_e_ex322a::OverrideShotPitch' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx351RootScale
// 0x000C (0x000C - 0x0000)
struct FTresEnemyEx351RootScale final
{
public:
	float                                         TractionMaxScale;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TractionMinScale;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bMovedCorrection : 1;                              // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx351RootScale) == 0x000004, "Wrong alignment on FTresEnemyEx351RootScale");
static_assert(sizeof(FTresEnemyEx351RootScale) == 0x00000C, "Wrong size on FTresEnemyEx351RootScale");
static_assert(offsetof(FTresEnemyEx351RootScale, TractionMaxScale) == 0x000000, "Member 'FTresEnemyEx351RootScale::TractionMaxScale' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351RootScale, TractionMinScale) == 0x000004, "Member 'FTresEnemyEx351RootScale::TractionMinScale' has a wrong offset!");

// ScriptStruct TresGame.Ex053SpawnGroup
// 0x0018 (0x0018 - 0x0000)
struct FEx053SpawnGroup final
{
public:
	TArray<int32>                                 SpawnDataIndexArray;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCluster;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEx053SpawnGroup) == 0x000008, "Wrong alignment on FEx053SpawnGroup");
static_assert(sizeof(FEx053SpawnGroup) == 0x000018, "Wrong size on FEx053SpawnGroup");
static_assert(offsetof(FEx053SpawnGroup, SpawnDataIndexArray) == 0x000000, "Member 'FEx053SpawnGroup::SpawnDataIndexArray' has a wrong offset!");
static_assert(offsetof(FEx053SpawnGroup, bCluster) == 0x000010, "Member 'FEx053SpawnGroup::bCluster' has a wrong offset!");

// ScriptStruct TresGame.HoldCameraVoice
// 0x114CE420 (0x114CE420 - 0x0000)
struct alignas(0x114CE420) FHoldCameraVoice final
{
public:
	class UTresFieldVoice*                        FieldVoiceAsset;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHoldCameraVoice) == 0x114CE420, "Wrong alignment on FHoldCameraVoice");
static_assert(sizeof(FHoldCameraVoice) == 0x114CE420, "Wrong size on FHoldCameraVoice");
static_assert(offsetof(FHoldCameraVoice, FieldVoiceAsset) == 0x000000, "Member 'FHoldCameraVoice::FieldVoiceAsset' has a wrong offset!");
static_assert(offsetof(FHoldCameraVoice, Rate) == 0x000008, "Member 'FHoldCameraVoice::Rate' has a wrong offset!");

// ScriptStruct TresGame.TresControlledRandom
// 0x00A0 (0x00A0 - 0x0000)
struct FTresControlledRandom final
{
public:
	ETresRandomDistributionType                   Distribution;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Period;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Weights;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x88];                                      // 0x0018(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresControlledRandom) == 0x000008, "Wrong alignment on FTresControlledRandom");
static_assert(sizeof(FTresControlledRandom) == 0x0000A0, "Wrong size on FTresControlledRandom");
static_assert(offsetof(FTresControlledRandom, Distribution) == 0x000000, "Member 'FTresControlledRandom::Distribution' has a wrong offset!");
static_assert(offsetof(FTresControlledRandom, Period) == 0x000004, "Member 'FTresControlledRandom::Period' has a wrong offset!");
static_assert(offsetof(FTresControlledRandom, Weights) == 0x000008, "Member 'FTresControlledRandom::Weights' has a wrong offset!");

// ScriptStruct TresGame.ca405MaelstromSpawnParameter
// 0x114F2E90 (0x114F2E90 - 0x0000)
struct alignas(0x114F2E90) FCa405MaelstromSpawnParameter final
{
public:
	struct FFloatInterval                         M_YawRange;                                        // 0x0000(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_YawLimitRange;                                   // 0x0008(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_RadiusRange;                                     // 0x0010(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_DepthRange;                                      // 0x0018(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_RotationOffset;                                  // 0x0020(0x112E9AF0)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_RotationSpeed;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresEnemyShipCoreSpawnData>    M_CoreParamArray;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FInt32Interval                         M_SpawnCoreNumRange;                               // 0x0040(0x112F08B0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_SelectWeight;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_DamageAmount;                                    // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCa405MaelstromSpawnParameter) == 0x114F2E90, "Wrong alignment on FCa405MaelstromSpawnParameter");
static_assert(sizeof(FCa405MaelstromSpawnParameter) == 0x114F2E90, "Wrong size on FCa405MaelstromSpawnParameter");
static_assert(offsetof(FCa405MaelstromSpawnParameter, M_YawRange) == 0x000000, "Member 'FCa405MaelstromSpawnParameter::M_YawRange' has a wrong offset!");
static_assert(offsetof(FCa405MaelstromSpawnParameter, M_YawLimitRange) == 0x000008, "Member 'FCa405MaelstromSpawnParameter::M_YawLimitRange' has a wrong offset!");
static_assert(offsetof(FCa405MaelstromSpawnParameter, M_RadiusRange) == 0x000010, "Member 'FCa405MaelstromSpawnParameter::M_RadiusRange' has a wrong offset!");
static_assert(offsetof(FCa405MaelstromSpawnParameter, M_DepthRange) == 0x000018, "Member 'FCa405MaelstromSpawnParameter::M_DepthRange' has a wrong offset!");
static_assert(offsetof(FCa405MaelstromSpawnParameter, M_RotationOffset) == 0x000020, "Member 'FCa405MaelstromSpawnParameter::M_RotationOffset' has a wrong offset!");
static_assert(offsetof(FCa405MaelstromSpawnParameter, M_RotationSpeed) == 0x00002C, "Member 'FCa405MaelstromSpawnParameter::M_RotationSpeed' has a wrong offset!");
static_assert(offsetof(FCa405MaelstromSpawnParameter, M_CoreParamArray) == 0x000030, "Member 'FCa405MaelstromSpawnParameter::M_CoreParamArray' has a wrong offset!");
static_assert(offsetof(FCa405MaelstromSpawnParameter, M_SpawnCoreNumRange) == 0x000040, "Member 'FCa405MaelstromSpawnParameter::M_SpawnCoreNumRange' has a wrong offset!");
static_assert(offsetof(FCa405MaelstromSpawnParameter, M_SelectWeight) == 0x000048, "Member 'FCa405MaelstromSpawnParameter::M_SelectWeight' has a wrong offset!");
static_assert(offsetof(FCa405MaelstromSpawnParameter, M_DamageAmount) == 0x00004C, "Member 'FCa405MaelstromSpawnParameter::M_DamageAmount' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx353HomingParam
// 0x114AAD60 (0x114AAD60 - 0x0000)
struct alignas(0x114AAD60) FTresEnemyEx353HomingParam final
{
public:
	float                                         HomingSpeedYaw;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingSpeedPitch;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingMinDist;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAbsTime;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx353HomingParam) == 0x114AAD60, "Wrong alignment on FTresEnemyEx353HomingParam");
static_assert(sizeof(FTresEnemyEx353HomingParam) == 0x114AAD60, "Wrong size on FTresEnemyEx353HomingParam");
static_assert(offsetof(FTresEnemyEx353HomingParam, HomingSpeedYaw) == 0x000000, "Member 'FTresEnemyEx353HomingParam::HomingSpeedYaw' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353HomingParam, HomingSpeedPitch) == 0x000004, "Member 'FTresEnemyEx353HomingParam::HomingSpeedPitch' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353HomingParam, HomingMinDist) == 0x000008, "Member 'FTresEnemyEx353HomingParam::HomingMinDist' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353HomingParam, HomingAbsTime) == 0x00000C, "Member 'FTresEnemyEx353HomingParam::HomingAbsTime' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackMorphControlElement
// 0x115432E0 (0x115432E0 - 0x0000)
struct FTresInterpTrackMorphControlElement final
{
public:
	class FName                                   M_TargetName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            M_AlphaBlend;                                      // 0x0008(0x115432E0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_StartValue;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EndValue;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresInterpTrackMorphControlElement) == 0x115432E0, "Wrong alignment on FTresInterpTrackMorphControlElement");
static_assert(sizeof(FTresInterpTrackMorphControlElement) == 0x115432E0, "Wrong size on FTresInterpTrackMorphControlElement");
static_assert(offsetof(FTresInterpTrackMorphControlElement, M_TargetName) == 0x000000, "Member 'FTresInterpTrackMorphControlElement::M_TargetName' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackMorphControlElement, M_AlphaBlend) == 0x000008, "Member 'FTresInterpTrackMorphControlElement::M_AlphaBlend' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackMorphControlElement, M_StartValue) == 0x000040, "Member 'FTresInterpTrackMorphControlElement::M_StartValue' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackMorphControlElement, M_EndValue) == 0x000044, "Member 'FTresInterpTrackMorphControlElement::M_EndValue' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackMorphControlKey
// 0x0018 (0x0018 - 0x0000)
struct FTresInterpTrackMorphControlKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresInterpTrackMorphControlElement> M_Elements;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresInterpTrackMorphControlKey) == 0x000008, "Wrong alignment on FTresInterpTrackMorphControlKey");
static_assert(sizeof(FTresInterpTrackMorphControlKey) == 0x000018, "Wrong size on FTresInterpTrackMorphControlKey");
static_assert(offsetof(FTresInterpTrackMorphControlKey, M_Time) == 0x000000, "Member 'FTresInterpTrackMorphControlKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackMorphControlKey, M_Elements) == 0x000008, "Member 'FTresInterpTrackMorphControlKey::M_Elements' has a wrong offset!");

// ScriptStruct TresGame.EX355_ComboTractionInfo
// 0x114AB050 (0x114AB050 - 0x0000)
struct alignas(0x114AB050) FEX355_ComboTractionInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VTractionOffset;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxTractionDistance;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMinTractionDistance;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_ComboTractionInfo) == 0x114AB050, "Wrong alignment on FEX355_ComboTractionInfo");
static_assert(sizeof(FEX355_ComboTractionInfo) == 0x114AB050, "Wrong size on FEX355_ComboTractionInfo");
static_assert(offsetof(FEX355_ComboTractionInfo, INotifyID) == 0x000000, "Member 'FEX355_ComboTractionInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX355_ComboTractionInfo, Comment) == 0x000008, "Member 'FEX355_ComboTractionInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX355_ComboTractionInfo, VTractionOffset) == 0x000018, "Member 'FEX355_ComboTractionInfo::VTractionOffset' has a wrong offset!");
static_assert(offsetof(FEX355_ComboTractionInfo, FMaxTractionDistance) == 0x000024, "Member 'FEX355_ComboTractionInfo::FMaxTractionDistance' has a wrong offset!");
static_assert(offsetof(FEX355_ComboTractionInfo, FMinTractionDistance) == 0x000028, "Member 'FEX355_ComboTractionInfo::FMinTractionDistance' has a wrong offset!");

// ScriptStruct TresGame.TresWarpCutMotionParam_e_ex358
// 0x114AB3E0 (0x114AB3E0 - 0x0000)
struct alignas(0x114AB3E0) FTresWarpCutMotionParam_e_ex358 final
{
public:
	ETresEnemyWarpCutMotionType_e_ex357           MotionType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimStartTime;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWarpCutMotionParam_e_ex358) == 0x114AB3E0, "Wrong alignment on FTresWarpCutMotionParam_e_ex358");
static_assert(sizeof(FTresWarpCutMotionParam_e_ex358) == 0x114AB3E0, "Wrong size on FTresWarpCutMotionParam_e_ex358");
static_assert(offsetof(FTresWarpCutMotionParam_e_ex358, MotionType) == 0x000000, "Member 'FTresWarpCutMotionParam_e_ex358::MotionType' has a wrong offset!");
static_assert(offsetof(FTresWarpCutMotionParam_e_ex358, AnimStartTime) == 0x000004, "Member 'FTresWarpCutMotionParam_e_ex358::AnimStartTime' has a wrong offset!");

// ScriptStruct TresGame.JinraiRootMotionScaleParam_e_ex358
// 0x114AB5C0 (0x114AB5C0 - 0x0000)
struct alignas(0x114AB5C0) FJinraiRootMotionScaleParam_e_ex358 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJinraiRootMotionScaleParam_e_ex358) == 0x114AB5C0, "Wrong alignment on FJinraiRootMotionScaleParam_e_ex358");
static_assert(sizeof(FJinraiRootMotionScaleParam_e_ex358) == 0x114AB5C0, "Wrong size on FJinraiRootMotionScaleParam_e_ex358");
static_assert(offsetof(FJinraiRootMotionScaleParam_e_ex358, Distance) == 0x000000, "Member 'FJinraiRootMotionScaleParam_e_ex358::Distance' has a wrong offset!");
static_assert(offsetof(FJinraiRootMotionScaleParam_e_ex358, RootMotionScale) == 0x000004, "Member 'FJinraiRootMotionScaleParam_e_ex358::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.EX359_LaserInfo
// 0x0060 (0x0060 - 0x0000)
struct FEX359_LaserInfo final
{
public:
	int32                                         M_iNotify;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresProjectile_e_ex359_LaserBase> M_pProjClass;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vSpawnLocOffset;                                 // 0x0010(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bPolarSpawnLocOffset;                            // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX359_SpawnLocType                           M_SpawnLocType;                                    // 0x001D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX359_SpawnDirType                           M_SpawnDirType;                                    // 0x001E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fSpawnDirYawOffset;                              // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLifeTime;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bLifeTime;                                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIgnoreSameIndexHit;                             // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x36];                                      // 0x002A(0x0036)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_LaserInfo) == 0x000008, "Wrong alignment on FEX359_LaserInfo");
static_assert(sizeof(FEX359_LaserInfo) == 0x000060, "Wrong size on FEX359_LaserInfo");
static_assert(offsetof(FEX359_LaserInfo, M_iNotify) == 0x000000, "Member 'FEX359_LaserInfo::M_iNotify' has a wrong offset!");
static_assert(offsetof(FEX359_LaserInfo, M_pProjClass) == 0x000008, "Member 'FEX359_LaserInfo::M_pProjClass' has a wrong offset!");
static_assert(offsetof(FEX359_LaserInfo, M_vSpawnLocOffset) == 0x000010, "Member 'FEX359_LaserInfo::M_vSpawnLocOffset' has a wrong offset!");
static_assert(offsetof(FEX359_LaserInfo, M_bPolarSpawnLocOffset) == 0x00001C, "Member 'FEX359_LaserInfo::M_bPolarSpawnLocOffset' has a wrong offset!");
static_assert(offsetof(FEX359_LaserInfo, M_SpawnLocType) == 0x00001D, "Member 'FEX359_LaserInfo::M_SpawnLocType' has a wrong offset!");
static_assert(offsetof(FEX359_LaserInfo, M_SpawnDirType) == 0x00001E, "Member 'FEX359_LaserInfo::M_SpawnDirType' has a wrong offset!");
static_assert(offsetof(FEX359_LaserInfo, M_fSpawnDirYawOffset) == 0x000020, "Member 'FEX359_LaserInfo::M_fSpawnDirYawOffset' has a wrong offset!");
static_assert(offsetof(FEX359_LaserInfo, M_fLifeTime) == 0x000024, "Member 'FEX359_LaserInfo::M_fLifeTime' has a wrong offset!");
static_assert(offsetof(FEX359_LaserInfo, M_bLifeTime) == 0x000028, "Member 'FEX359_LaserInfo::M_bLifeTime' has a wrong offset!");
static_assert(offsetof(FEX359_LaserInfo, M_bIgnoreSameIndexHit) == 0x000029, "Member 'FEX359_LaserInfo::M_bIgnoreSameIndexHit' has a wrong offset!");

// ScriptStruct TresGame.EX359_LaserWaveInfo
// 0x0100 (0x0100 - 0x0000)
struct FEX359_LaserWaveInfo final
{
public:
	struct FEX359_LaserInfo                       M_LaserInfo;                                       // 0x0000(0x0060)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_fProjSpawnStartWaitTime;                         // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iMaxProjNum;                                     // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fProjSpawnInterval;                              // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fProjSpawnDistance;                              // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_Target;                                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_SpawnActor;                                      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x78];                                      // 0x0088(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_LaserWaveInfo) == 0x000008, "Wrong alignment on FEX359_LaserWaveInfo");
static_assert(sizeof(FEX359_LaserWaveInfo) == 0x000100, "Wrong size on FEX359_LaserWaveInfo");
static_assert(offsetof(FEX359_LaserWaveInfo, M_LaserInfo) == 0x000000, "Member 'FEX359_LaserWaveInfo::M_LaserInfo' has a wrong offset!");
static_assert(offsetof(FEX359_LaserWaveInfo, M_fProjSpawnStartWaitTime) == 0x000060, "Member 'FEX359_LaserWaveInfo::M_fProjSpawnStartWaitTime' has a wrong offset!");
static_assert(offsetof(FEX359_LaserWaveInfo, M_iMaxProjNum) == 0x000064, "Member 'FEX359_LaserWaveInfo::M_iMaxProjNum' has a wrong offset!");
static_assert(offsetof(FEX359_LaserWaveInfo, M_fProjSpawnInterval) == 0x000068, "Member 'FEX359_LaserWaveInfo::M_fProjSpawnInterval' has a wrong offset!");
static_assert(offsetof(FEX359_LaserWaveInfo, M_fProjSpawnDistance) == 0x00006C, "Member 'FEX359_LaserWaveInfo::M_fProjSpawnDistance' has a wrong offset!");
static_assert(offsetof(FEX359_LaserWaveInfo, M_Owner) == 0x000070, "Member 'FEX359_LaserWaveInfo::M_Owner' has a wrong offset!");
static_assert(offsetof(FEX359_LaserWaveInfo, M_Target) == 0x000078, "Member 'FEX359_LaserWaveInfo::M_Target' has a wrong offset!");
static_assert(offsetof(FEX359_LaserWaveInfo, M_SpawnActor) == 0x000080, "Member 'FEX359_LaserWaveInfo::M_SpawnActor' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_Gigas_BulletParam
// 0x114C45B0 (0x114C45B0 - 0x0000)
struct alignas(0x114C45B0) FTresEnemy_e_Gigas_BulletParam final
{
public:
	float                                         M_HomingInterval;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HomingEndDist;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_Gigas_BulletParam) == 0x114C45B0, "Wrong alignment on FTresEnemy_e_Gigas_BulletParam");
static_assert(sizeof(FTresEnemy_e_Gigas_BulletParam) == 0x114C45B0, "Wrong size on FTresEnemy_e_Gigas_BulletParam");
static_assert(offsetof(FTresEnemy_e_Gigas_BulletParam, M_HomingInterval) == 0x000000, "Member 'FTresEnemy_e_Gigas_BulletParam::M_HomingInterval' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_Gigas_BulletParam, M_HomingEndDist) == 0x000004, "Member 'FTresEnemy_e_Gigas_BulletParam::M_HomingEndDist' has a wrong offset!");

// ScriptStruct TresGame.EX359_ComboTractionInfo
// 0x114AB790 (0x114AB790 - 0x0000)
struct alignas(0x114AB790) FEX359_ComboTractionInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VTractionOffset;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxTractionDistance;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMinTractionDistance;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_ComboTractionInfo) == 0x114AB790, "Wrong alignment on FEX359_ComboTractionInfo");
static_assert(sizeof(FEX359_ComboTractionInfo) == 0x114AB790, "Wrong size on FEX359_ComboTractionInfo");
static_assert(offsetof(FEX359_ComboTractionInfo, INotifyID) == 0x000000, "Member 'FEX359_ComboTractionInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX359_ComboTractionInfo, Comment) == 0x000008, "Member 'FEX359_ComboTractionInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX359_ComboTractionInfo, VTractionOffset) == 0x000018, "Member 'FEX359_ComboTractionInfo::VTractionOffset' has a wrong offset!");
static_assert(offsetof(FEX359_ComboTractionInfo, FMaxTractionDistance) == 0x000024, "Member 'FEX359_ComboTractionInfo::FMaxTractionDistance' has a wrong offset!");
static_assert(offsetof(FEX359_ComboTractionInfo, FMinTractionDistance) == 0x000028, "Member 'FEX359_ComboTractionInfo::FMinTractionDistance' has a wrong offset!");

// ScriptStruct TresGame.EX354_FieldChangeRemote
// 0x114FD160 (0x114FD160 - 0x0000)
struct alignas(0x114FD160) FEX354_FieldChangeRemote final
{
public:
	EEX354_FieldID                                FieldID;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RemoteName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RemoteName_OneFrameChange;                         // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RemoteName_NoCinematic;                            // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   XigbalMoveRemoteName;                              // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIRestartRemoteName;                               // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   XigbalMoveActorTagName;                            // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_FieldChangeRemote) == 0x114FD160, "Wrong alignment on FEX354_FieldChangeRemote");
static_assert(sizeof(FEX354_FieldChangeRemote) == 0x114FD160, "Wrong size on FEX354_FieldChangeRemote");
static_assert(offsetof(FEX354_FieldChangeRemote, FieldID) == 0x000000, "Member 'FEX354_FieldChangeRemote::FieldID' has a wrong offset!");
static_assert(offsetof(FEX354_FieldChangeRemote, RemoteName) == 0x000008, "Member 'FEX354_FieldChangeRemote::RemoteName' has a wrong offset!");
static_assert(offsetof(FEX354_FieldChangeRemote, RemoteName_OneFrameChange) == 0x000010, "Member 'FEX354_FieldChangeRemote::RemoteName_OneFrameChange' has a wrong offset!");
static_assert(offsetof(FEX354_FieldChangeRemote, RemoteName_NoCinematic) == 0x000018, "Member 'FEX354_FieldChangeRemote::RemoteName_NoCinematic' has a wrong offset!");
static_assert(offsetof(FEX354_FieldChangeRemote, XigbalMoveRemoteName) == 0x000020, "Member 'FEX354_FieldChangeRemote::XigbalMoveRemoteName' has a wrong offset!");
static_assert(offsetof(FEX354_FieldChangeRemote, AIRestartRemoteName) == 0x000028, "Member 'FEX354_FieldChangeRemote::AIRestartRemoteName' has a wrong offset!");
static_assert(offsetof(FEX354_FieldChangeRemote, XigbalMoveActorTagName) == 0x000030, "Member 'FEX354_FieldChangeRemote::XigbalMoveActorTagName' has a wrong offset!");

// ScriptStruct TresGame.RootMotionScaleParam_e_ex781
// 0x114C4210 (0x114C4210 - 0x0000)
struct alignas(0x114C4210) FRootMotionScaleParam_e_ex781 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootMotionScaleParam_e_ex781) == 0x114C4210, "Wrong alignment on FRootMotionScaleParam_e_ex781");
static_assert(sizeof(FRootMotionScaleParam_e_ex781) == 0x114C4210, "Wrong size on FRootMotionScaleParam_e_ex781");
static_assert(offsetof(FRootMotionScaleParam_e_ex781, Distance) == 0x000000, "Member 'FRootMotionScaleParam_e_ex781::Distance' has a wrong offset!");
static_assert(offsetof(FRootMotionScaleParam_e_ex781, RootMotionScale) == 0x000004, "Member 'FRootMotionScaleParam_e_ex781::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.EX354_UpShotInfo
// 0x11562490 (0x11562490 - 0x0000)
struct alignas(0x11562490) FEX354_UpShotInfo final
{
public:
	float                                         M_fVelocity;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxUpTime;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxDownTime;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRotateVelocity;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bKeepVelocityOnHoming;                           // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fMinHomingTime;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_UpShotInfo) == 0x11562490, "Wrong alignment on FEX354_UpShotInfo");
static_assert(sizeof(FEX354_UpShotInfo) == 0x11562490, "Wrong size on FEX354_UpShotInfo");
static_assert(offsetof(FEX354_UpShotInfo, M_fVelocity) == 0x000000, "Member 'FEX354_UpShotInfo::M_fVelocity' has a wrong offset!");
static_assert(offsetof(FEX354_UpShotInfo, M_fMaxUpTime) == 0x000004, "Member 'FEX354_UpShotInfo::M_fMaxUpTime' has a wrong offset!");
static_assert(offsetof(FEX354_UpShotInfo, M_fMaxDownTime) == 0x000008, "Member 'FEX354_UpShotInfo::M_fMaxDownTime' has a wrong offset!");
static_assert(offsetof(FEX354_UpShotInfo, M_fRotateVelocity) == 0x00000C, "Member 'FEX354_UpShotInfo::M_fRotateVelocity' has a wrong offset!");
static_assert(offsetof(FEX354_UpShotInfo, M_bKeepVelocityOnHoming) == 0x000010, "Member 'FEX354_UpShotInfo::M_bKeepVelocityOnHoming' has a wrong offset!");
static_assert(offsetof(FEX354_UpShotInfo, M_fMinHomingTime) == 0x000014, "Member 'FEX354_UpShotInfo::M_fMinHomingTime' has a wrong offset!");

// ScriptStruct TresGame.TresClipData
// 0x0028 (0x0028 - 0x0000)
struct FTresClipData final
{
public:
	bool                                          bExclusionMode;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClipLength;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             ClassArray;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   ClippingGroupName;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseClippingEvent;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableTick;                                      // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableDitherFade;                                // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresClipData) == 0x000008, "Wrong alignment on FTresClipData");
static_assert(sizeof(FTresClipData) == 0x000028, "Wrong size on FTresClipData");
static_assert(offsetof(FTresClipData, bExclusionMode) == 0x000000, "Member 'FTresClipData::bExclusionMode' has a wrong offset!");
static_assert(offsetof(FTresClipData, ClipLength) == 0x000004, "Member 'FTresClipData::ClipLength' has a wrong offset!");
static_assert(offsetof(FTresClipData, ClassArray) == 0x000008, "Member 'FTresClipData::ClassArray' has a wrong offset!");
static_assert(offsetof(FTresClipData, ClippingGroupName) == 0x000018, "Member 'FTresClipData::ClippingGroupName' has a wrong offset!");
static_assert(offsetof(FTresClipData, bUseClippingEvent) == 0x000020, "Member 'FTresClipData::bUseClippingEvent' has a wrong offset!");
static_assert(offsetof(FTresClipData, bDisableTick) == 0x000021, "Member 'FTresClipData::bDisableTick' has a wrong offset!");
static_assert(offsetof(FTresClipData, bDisableDitherFade) == 0x000022, "Member 'FTresClipData::bDisableDitherFade' has a wrong offset!");

// ScriptStruct TresGame.TresSplineGeneratorActorParam
// 0x115164E0 (0x115164E0 - 0x0000)
struct alignas(0x115164E0) FTresSplineGeneratorActorParam final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSplineGeneratorActorParam) == 0x115164E0, "Wrong alignment on FTresSplineGeneratorActorParam");
static_assert(sizeof(FTresSplineGeneratorActorParam) == 0x115164E0, "Wrong size on FTresSplineGeneratorActorParam");
static_assert(offsetof(FTresSplineGeneratorActorParam, ActorClass) == 0x000000, "Member 'FTresSplineGeneratorActorParam::ActorClass' has a wrong offset!");
static_assert(offsetof(FTresSplineGeneratorActorParam, Span) == 0x000008, "Member 'FTresSplineGeneratorActorParam::Span' has a wrong offset!");

// ScriptStruct TresGame.EX359_ComboAttackIDModifySet
// 0x114ABB20 (0x114ABB20 - 0x0000)
struct alignas(0x114ABB20) FEX359_ComboAttackIDModifySet final
{
public:
	class FName                                   M_OldAttackID;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_NewAttackID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_ComboAttackIDModifySet) == 0x114ABB20, "Wrong alignment on FEX359_ComboAttackIDModifySet");
static_assert(sizeof(FEX359_ComboAttackIDModifySet) == 0x114ABB20, "Wrong size on FEX359_ComboAttackIDModifySet");
static_assert(offsetof(FEX359_ComboAttackIDModifySet, M_OldAttackID) == 0x000000, "Member 'FEX359_ComboAttackIDModifySet::M_OldAttackID' has a wrong offset!");
static_assert(offsetof(FEX359_ComboAttackIDModifySet, M_NewAttackID) == 0x000008, "Member 'FEX359_ComboAttackIDModifySet::M_NewAttackID' has a wrong offset!");

// ScriptStruct TresGame.TresShotParam_e_ex701_DarkCloud
// 0x114ABCF0 (0x114ABCF0 - 0x0000)
struct alignas(0x114ABCF0) FTresShotParam_e_ex701_DarkCloud final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideOffset;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontOffset;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x8];                                        // 0x000C(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresShotParam_e_ex701_DarkCloud) == 0x114ABCF0, "Wrong alignment on FTresShotParam_e_ex701_DarkCloud");
static_assert(sizeof(FTresShotParam_e_ex701_DarkCloud) == 0x114ABCF0, "Wrong size on FTresShotParam_e_ex701_DarkCloud");
static_assert(offsetof(FTresShotParam_e_ex701_DarkCloud, Height) == 0x000000, "Member 'FTresShotParam_e_ex701_DarkCloud::Height' has a wrong offset!");
static_assert(offsetof(FTresShotParam_e_ex701_DarkCloud, SideOffset) == 0x000004, "Member 'FTresShotParam_e_ex701_DarkCloud::SideOffset' has a wrong offset!");
static_assert(offsetof(FTresShotParam_e_ex701_DarkCloud, FrontOffset) == 0x000008, "Member 'FTresShotParam_e_ex701_DarkCloud::FrontOffset' has a wrong offset!");

// ScriptStruct TresGame.DarkRainInfo_e_ex734
// 0x114ABF50 (0x114ABF50 - 0x0000)
struct alignas(0x114ABF50) FDarkRainInfo_e_ex734 final
{
public:
	TSubclassOf<class ATresProjectileBase>        M_Projectile;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpawnRate;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iAimTargetMinInterval;                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iAimTargetMaxInterval;                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAimTargetForbiddenTime;                         // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpawnRadius;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x24];                                      // 0x001C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDarkRainInfo_e_ex734) == 0x114ABF50, "Wrong alignment on FDarkRainInfo_e_ex734");
static_assert(sizeof(FDarkRainInfo_e_ex734) == 0x114ABF50, "Wrong size on FDarkRainInfo_e_ex734");
static_assert(offsetof(FDarkRainInfo_e_ex734, M_Projectile) == 0x000000, "Member 'FDarkRainInfo_e_ex734::M_Projectile' has a wrong offset!");
static_assert(offsetof(FDarkRainInfo_e_ex734, M_fSpawnRate) == 0x000008, "Member 'FDarkRainInfo_e_ex734::M_fSpawnRate' has a wrong offset!");
static_assert(offsetof(FDarkRainInfo_e_ex734, M_iAimTargetMinInterval) == 0x00000C, "Member 'FDarkRainInfo_e_ex734::M_iAimTargetMinInterval' has a wrong offset!");
static_assert(offsetof(FDarkRainInfo_e_ex734, M_iAimTargetMaxInterval) == 0x000010, "Member 'FDarkRainInfo_e_ex734::M_iAimTargetMaxInterval' has a wrong offset!");
static_assert(offsetof(FDarkRainInfo_e_ex734, M_fAimTargetForbiddenTime) == 0x000014, "Member 'FDarkRainInfo_e_ex734::M_fAimTargetForbiddenTime' has a wrong offset!");
static_assert(offsetof(FDarkRainInfo_e_ex734, M_fSpawnRadius) == 0x000018, "Member 'FDarkRainInfo_e_ex734::M_fSpawnRadius' has a wrong offset!");

// ScriptStruct TresGame.TresUIP_MultiItemGet_ItemText
// 0x0018 (0x0018 - 0x0000)
struct FTresUIP_MultiItemGet_ItemText final
{
public:
	class UGFxObject*                             Name;                                              // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             Num;                                               // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             Max;                                               // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIP_MultiItemGet_ItemText) == 0x000008, "Wrong alignment on FTresUIP_MultiItemGet_ItemText");
static_assert(sizeof(FTresUIP_MultiItemGet_ItemText) == 0x000018, "Wrong size on FTresUIP_MultiItemGet_ItemText");
static_assert(offsetof(FTresUIP_MultiItemGet_ItemText, Name) == 0x000000, "Member 'FTresUIP_MultiItemGet_ItemText::Name' has a wrong offset!");
static_assert(offsetof(FTresUIP_MultiItemGet_ItemText, Num) == 0x000008, "Member 'FTresUIP_MultiItemGet_ItemText::Num' has a wrong offset!");
static_assert(offsetof(FTresUIP_MultiItemGet_ItemText, Max) == 0x000010, "Member 'FTresUIP_MultiItemGet_ItemText::Max' has a wrong offset!");

// ScriptStruct TresGame.TresCollMgrDetectBodyCollTickFunction
// 0x0000 (0x21B6 - 0x21B6)
struct FTresCollMgrDetectBodyCollTickFunction final : public FTresCollMgrSubTickFunction
{
};
static_assert(alignof(FTresCollMgrDetectBodyCollTickFunction) == 0x0021B6, "Wrong alignment on FTresCollMgrDetectBodyCollTickFunction");
static_assert(sizeof(FTresCollMgrDetectBodyCollTickFunction) == 0x0021B6, "Wrong size on FTresCollMgrDetectBodyCollTickFunction");

// ScriptStruct TresGame.EX354_RunShotTimeInfo
// 0x0008 (0x0008 - 0x0000)
struct FEX354_RunShotTimeInfo final
{
public:
	float                                         M_fShotTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bRight;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX354_RunShotTimeInfo) == 0x000004, "Wrong alignment on FEX354_RunShotTimeInfo");
static_assert(sizeof(FEX354_RunShotTimeInfo) == 0x000008, "Wrong size on FEX354_RunShotTimeInfo");
static_assert(offsetof(FEX354_RunShotTimeInfo, M_fShotTime) == 0x000000, "Member 'FEX354_RunShotTimeInfo::M_fShotTime' has a wrong offset!");
static_assert(offsetof(FEX354_RunShotTimeInfo, M_bRight) == 0x000004, "Member 'FEX354_RunShotTimeInfo::M_bRight' has a wrong offset!");

// ScriptStruct TresGame.TresShockWaveRushParam_e_ex352
// 0x114AC370 (0x114AC370 - 0x0000)
struct alignas(0x114AC370) FTresShockWaveRushParam_e_ex352 final
{
public:
	float                                         M_RushSpeed;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Acceleration;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_NextTargetDistance;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresShockWaveRushParam_e_ex352) == 0x114AC370, "Wrong alignment on FTresShockWaveRushParam_e_ex352");
static_assert(sizeof(FTresShockWaveRushParam_e_ex352) == 0x114AC370, "Wrong size on FTresShockWaveRushParam_e_ex352");
static_assert(offsetof(FTresShockWaveRushParam_e_ex352, M_RushSpeed) == 0x000000, "Member 'FTresShockWaveRushParam_e_ex352::M_RushSpeed' has a wrong offset!");
static_assert(offsetof(FTresShockWaveRushParam_e_ex352, M_Acceleration) == 0x000004, "Member 'FTresShockWaveRushParam_e_ex352::M_Acceleration' has a wrong offset!");
static_assert(offsetof(FTresShockWaveRushParam_e_ex352, M_NextTargetDistance) == 0x000008, "Member 'FTresShockWaveRushParam_e_ex352::M_NextTargetDistance' has a wrong offset!");

// ScriptStruct TresGame.TresKBRCloneBurstParam
// 0x0024 (0x0024 - 0x0000)
struct FTresKBRCloneBurstParam final
{
public:
	float                                         M_ShotTime;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShotDirYaw;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShotDirPitch;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShadowMoveDirYaw;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKBRCloneBurstTypes_e_ex360                   M_AttackType;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_IntervalTime;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_ShotDist;                                        // 0x0018(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresKBRCloneBurstParam) == 0x000004, "Wrong alignment on FTresKBRCloneBurstParam");
static_assert(sizeof(FTresKBRCloneBurstParam) == 0x000024, "Wrong size on FTresKBRCloneBurstParam");
static_assert(offsetof(FTresKBRCloneBurstParam, M_ShotTime) == 0x000000, "Member 'FTresKBRCloneBurstParam::M_ShotTime' has a wrong offset!");
static_assert(offsetof(FTresKBRCloneBurstParam, M_ShotDirYaw) == 0x000004, "Member 'FTresKBRCloneBurstParam::M_ShotDirYaw' has a wrong offset!");
static_assert(offsetof(FTresKBRCloneBurstParam, M_ShotDirPitch) == 0x000008, "Member 'FTresKBRCloneBurstParam::M_ShotDirPitch' has a wrong offset!");
static_assert(offsetof(FTresKBRCloneBurstParam, M_ShadowMoveDirYaw) == 0x00000C, "Member 'FTresKBRCloneBurstParam::M_ShadowMoveDirYaw' has a wrong offset!");
static_assert(offsetof(FTresKBRCloneBurstParam, M_AttackType) == 0x000010, "Member 'FTresKBRCloneBurstParam::M_AttackType' has a wrong offset!");
static_assert(offsetof(FTresKBRCloneBurstParam, M_IntervalTime) == 0x000014, "Member 'FTresKBRCloneBurstParam::M_IntervalTime' has a wrong offset!");
static_assert(offsetof(FTresKBRCloneBurstParam, M_ShotDist) == 0x000018, "Member 'FTresKBRCloneBurstParam::M_ShotDist' has a wrong offset!");

// ScriptStruct TresGame.TresGummiStickerStruct
// 0x0008 (0x0008 - 0x0000)
struct FTresGummiStickerStruct final
{
public:
	class UTexture2D*                             M_pStickerTexture;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiStickerStruct) == 0x000008, "Wrong alignment on FTresGummiStickerStruct");
static_assert(sizeof(FTresGummiStickerStruct) == 0x000008, "Wrong size on FTresGummiStickerStruct");
static_assert(offsetof(FTresGummiStickerStruct, M_pStickerTexture) == 0x000000, "Member 'FTresGummiStickerStruct::M_pStickerTexture' has a wrong offset!");

// ScriptStruct TresGame.BigTornadoProjInfo
// 0x114C5C70 (0x114C5C70 - 0x0000)
struct alignas(0x114C5C70) FBigTornadoProjInfo
{
public:
	EBigTornadoProjPos                            M_ProjPos;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fProjPosRadiusDeviation;                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fProjAngleDeviation;                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ATresProjectileBase>> M_ProjectileClassArray;                            // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         M_iMaxShotCount;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBigTornadoProjInfo) == 0x114C5C70, "Wrong alignment on FBigTornadoProjInfo");
static_assert(sizeof(FBigTornadoProjInfo) == 0x114C5C70, "Wrong size on FBigTornadoProjInfo");
static_assert(offsetof(FBigTornadoProjInfo, M_ProjPos) == 0x000000, "Member 'FBigTornadoProjInfo::M_ProjPos' has a wrong offset!");
static_assert(offsetof(FBigTornadoProjInfo, M_fProjPosRadiusDeviation) == 0x000004, "Member 'FBigTornadoProjInfo::M_fProjPosRadiusDeviation' has a wrong offset!");
static_assert(offsetof(FBigTornadoProjInfo, M_fProjAngleDeviation) == 0x000008, "Member 'FBigTornadoProjInfo::M_fProjAngleDeviation' has a wrong offset!");
static_assert(offsetof(FBigTornadoProjInfo, M_ProjectileClassArray) == 0x000010, "Member 'FBigTornadoProjInfo::M_ProjectileClassArray' has a wrong offset!");
static_assert(offsetof(FBigTornadoProjInfo, M_iMaxShotCount) == 0x000020, "Member 'FBigTornadoProjInfo::M_iMaxShotCount' has a wrong offset!");

// ScriptStruct TresGame.BigTornadoHomingProjInfo
// 0x0000 (0x114C5C70 - 0x114C5C70)
struct FBigTornadoHomingProjInfo final : public FBigTornadoProjInfo
{
};
static_assert(alignof(FBigTornadoHomingProjInfo) == 0x114C5C70, "Wrong alignment on FBigTornadoHomingProjInfo");
static_assert(sizeof(FBigTornadoHomingProjInfo) == 0x114C5C70, "Wrong size on FBigTornadoHomingProjInfo");

// ScriptStruct TresGame.EX354_ArtemaRunShotSequenceInfo
// 0x114ACD10 (0x114ACD10 - 0x0000)
struct alignas(0x114ACD10) FEX354_ArtemaRunShotSequenceInfo final
{
public:
	float                                         M_fYaw;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHeightOffset;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_ArtemaRunShotSequenceInfo) == 0x114ACD10, "Wrong alignment on FEX354_ArtemaRunShotSequenceInfo");
static_assert(sizeof(FEX354_ArtemaRunShotSequenceInfo) == 0x114ACD10, "Wrong size on FEX354_ArtemaRunShotSequenceInfo");
static_assert(offsetof(FEX354_ArtemaRunShotSequenceInfo, M_fYaw) == 0x000000, "Member 'FEX354_ArtemaRunShotSequenceInfo::M_fYaw' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaRunShotSequenceInfo, M_fHeightOffset) == 0x000004, "Member 'FEX354_ArtemaRunShotSequenceInfo::M_fHeightOffset' has a wrong offset!");

// ScriptStruct TresGame.TresAreaEffectCurveData
// 0x0020 (0x0020 - 0x0000)
struct FTresAreaEffectCurveData final
{
public:
	class UCurveVector*                           AreaBaseColorCurve;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           AreaBrightColorCurve;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           AreaDarkColorCurve;                                // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AreaColorSynthesisCurve;                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAreaEffectCurveData) == 0x000008, "Wrong alignment on FTresAreaEffectCurveData");
static_assert(sizeof(FTresAreaEffectCurveData) == 0x000020, "Wrong size on FTresAreaEffectCurveData");
static_assert(offsetof(FTresAreaEffectCurveData, AreaBaseColorCurve) == 0x000000, "Member 'FTresAreaEffectCurveData::AreaBaseColorCurve' has a wrong offset!");
static_assert(offsetof(FTresAreaEffectCurveData, AreaBrightColorCurve) == 0x000008, "Member 'FTresAreaEffectCurveData::AreaBrightColorCurve' has a wrong offset!");
static_assert(offsetof(FTresAreaEffectCurveData, AreaDarkColorCurve) == 0x000010, "Member 'FTresAreaEffectCurveData::AreaDarkColorCurve' has a wrong offset!");
static_assert(offsetof(FTresAreaEffectCurveData, AreaColorSynthesisCurve) == 0x000018, "Member 'FTresAreaEffectCurveData::AreaColorSynthesisCurve' has a wrong offset!");

// ScriptStruct TresGame.TresMagnaStormTractionInfo_e_ex355
// 0x114ACEE0 (0x114ACEE0 - 0x0000)
struct alignas(0x114ACEE0) FTresMagnaStormTractionInfo_e_ex355 final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VTractionOffset;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxTractionDistance;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMagnaStormTractionInfo_e_ex355) == 0x114ACEE0, "Wrong alignment on FTresMagnaStormTractionInfo_e_ex355");
static_assert(sizeof(FTresMagnaStormTractionInfo_e_ex355) == 0x114ACEE0, "Wrong size on FTresMagnaStormTractionInfo_e_ex355");
static_assert(offsetof(FTresMagnaStormTractionInfo_e_ex355, INotifyID) == 0x000000, "Member 'FTresMagnaStormTractionInfo_e_ex355::INotifyID' has a wrong offset!");
static_assert(offsetof(FTresMagnaStormTractionInfo_e_ex355, Comment) == 0x000008, "Member 'FTresMagnaStormTractionInfo_e_ex355::Comment' has a wrong offset!");
static_assert(offsetof(FTresMagnaStormTractionInfo_e_ex355, VTractionOffset) == 0x000018, "Member 'FTresMagnaStormTractionInfo_e_ex355::VTractionOffset' has a wrong offset!");
static_assert(offsetof(FTresMagnaStormTractionInfo_e_ex355, FMaxTractionDistance) == 0x000024, "Member 'FTresMagnaStormTractionInfo_e_ex355::FMaxTractionDistance' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx771_AttractParam
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx771_AttractParam final
{
public:
	class ATresActor_e_ex771_Attract*             M_pAttract;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_pTarget;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx771_AttractParam) == 0x000008, "Wrong alignment on FTresEnemyEx771_AttractParam");
static_assert(sizeof(FTresEnemyEx771_AttractParam) == 0x000010, "Wrong size on FTresEnemyEx771_AttractParam");
static_assert(offsetof(FTresEnemyEx771_AttractParam, M_pAttract) == 0x000000, "Member 'FTresEnemyEx771_AttractParam::M_pAttract' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx771_AttractParam, M_pTarget) == 0x000008, "Member 'FTresEnemyEx771_AttractParam::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.SpawnEx052Actors
// 0x0010 (0x0010 - 0x0000)
struct FSpawnEx052Actors final
{
public:
	TArray<TWeakObjectPtr<class AActor>>          WpActors;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnEx052Actors) == 0x000008, "Wrong alignment on FSpawnEx052Actors");
static_assert(sizeof(FSpawnEx052Actors) == 0x000010, "Wrong size on FSpawnEx052Actors");
static_assert(offsetof(FSpawnEx052Actors, WpActors) == 0x000000, "Member 'FSpawnEx052Actors::WpActors' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx773_AttractParam
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx773_AttractParam final
{
public:
	class ATresActor_e_ex773_Attract*             M_pAttract;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_pTarget;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx773_AttractParam) == 0x000008, "Wrong alignment on FTresEnemyEx773_AttractParam");
static_assert(sizeof(FTresEnemyEx773_AttractParam) == 0x000010, "Wrong size on FTresEnemyEx773_AttractParam");
static_assert(offsetof(FTresEnemyEx773_AttractParam, M_pAttract) == 0x000000, "Member 'FTresEnemyEx773_AttractParam::M_pAttract' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx773_AttractParam, M_pTarget) == 0x000008, "Member 'FTresEnemyEx773_AttractParam::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.TresEx048BladeEffectMan
// 0x0030 (0x0030 - 0x0000)
struct FTresEx048BladeEffectMan final
{
public:
	class UParticleSystemComponent*               M_BladeEffectCmp[0x2];                             // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEx048BladeEffectMan) == 0x000008, "Wrong alignment on FTresEx048BladeEffectMan");
static_assert(sizeof(FTresEx048BladeEffectMan) == 0x000030, "Wrong size on FTresEx048BladeEffectMan");
static_assert(offsetof(FTresEx048BladeEffectMan, M_BladeEffectCmp) == 0x000000, "Member 'FTresEx048BladeEffectMan::M_BladeEffectCmp' has a wrong offset!");

// ScriptStruct TresGame.TresEx056EffectInfo
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresEx056EffectInfo final
{
public:
	class UParticleSystem*                        PEffect;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEx056EffectInfo) == 0x112E9AF0, "Wrong alignment on FTresEx056EffectInfo");
static_assert(sizeof(FTresEx056EffectInfo) == 0x112E9AF0, "Wrong size on FTresEx056EffectInfo");
static_assert(offsetof(FTresEx056EffectInfo, PEffect) == 0x000000, "Member 'FTresEx056EffectInfo::PEffect' has a wrong offset!");
static_assert(offsetof(FTresEx056EffectInfo, AttachName) == 0x000008, "Member 'FTresEx056EffectInfo::AttachName' has a wrong offset!");
static_assert(offsetof(FTresEx056EffectInfo, Location) == 0x000010, "Member 'FTresEx056EffectInfo::Location' has a wrong offset!");
static_assert(offsetof(FTresEx056EffectInfo, Rotation) == 0x00001C, "Member 'FTresEx056EffectInfo::Rotation' has a wrong offset!");

// ScriptStruct TresGame.EX355_CutUpTractionInfo
// 0x114B2380 (0x114B2380 - 0x0000)
struct alignas(0x114B2380) FEX355_CutUpTractionInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VTractionOffset;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxTractionDistance;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_MoveVelocityType                       M_HorizontalVelocityType;                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fHorizontalVelocityExp;                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_MoveVelocityType                       M_VerticalVelocityType;                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fVerticalVelocityExp;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_CutUpTractionInfo) == 0x114B2380, "Wrong alignment on FEX355_CutUpTractionInfo");
static_assert(sizeof(FEX355_CutUpTractionInfo) == 0x114B2380, "Wrong size on FEX355_CutUpTractionInfo");
static_assert(offsetof(FEX355_CutUpTractionInfo, INotifyID) == 0x000000, "Member 'FEX355_CutUpTractionInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX355_CutUpTractionInfo, Comment) == 0x000008, "Member 'FEX355_CutUpTractionInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX355_CutUpTractionInfo, VTractionOffset) == 0x000018, "Member 'FEX355_CutUpTractionInfo::VTractionOffset' has a wrong offset!");
static_assert(offsetof(FEX355_CutUpTractionInfo, FMaxTractionDistance) == 0x000024, "Member 'FEX355_CutUpTractionInfo::FMaxTractionDistance' has a wrong offset!");
static_assert(offsetof(FEX355_CutUpTractionInfo, M_HorizontalVelocityType) == 0x000028, "Member 'FEX355_CutUpTractionInfo::M_HorizontalVelocityType' has a wrong offset!");
static_assert(offsetof(FEX355_CutUpTractionInfo, M_fHorizontalVelocityExp) == 0x00002C, "Member 'FEX355_CutUpTractionInfo::M_fHorizontalVelocityExp' has a wrong offset!");
static_assert(offsetof(FEX355_CutUpTractionInfo, M_VerticalVelocityType) == 0x000030, "Member 'FEX355_CutUpTractionInfo::M_VerticalVelocityType' has a wrong offset!");
static_assert(offsetof(FEX355_CutUpTractionInfo, M_fVerticalVelocityExp) == 0x000034, "Member 'FEX355_CutUpTractionInfo::M_fVerticalVelocityExp' has a wrong offset!");

// ScriptStruct TresGame.Ex053SpawnData
// 0x114F7140 (0x114F7140 - 0x0000)
struct alignas(0x114F7140) FEx053SpawnData final
{
public:
	TWeakObjectPtr<class ATresEnemyPawn_e_ex053>  WpActor;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  WpSpawn;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wait;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEx053SpawnData) == 0x114F7140, "Wrong alignment on FEx053SpawnData");
static_assert(sizeof(FEx053SpawnData) == 0x114F7140, "Wrong size on FEx053SpawnData");
static_assert(offsetof(FEx053SpawnData, WpActor) == 0x000000, "Member 'FEx053SpawnData::WpActor' has a wrong offset!");
static_assert(offsetof(FEx053SpawnData, WpSpawn) == 0x000008, "Member 'FEx053SpawnData::WpSpawn' has a wrong offset!");
static_assert(offsetof(FEx053SpawnData, Wait) == 0x000010, "Member 'FEx053SpawnData::Wait' has a wrong offset!");

// ScriptStruct TresGame.TresAttackMissLogRecord
// 0x1BF3 (0x1BF3 - 0x0000)
struct alignas(0x1BF3) FTresAttackMissLogRecord final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAttackMissLogRecord) == 0x001BF3, "Wrong alignment on FTresAttackMissLogRecord");
static_assert(sizeof(FTresAttackMissLogRecord) == 0x001BF3, "Wrong size on FTresAttackMissLogRecord");

// ScriptStruct TresGame.TresClaymoreSet_e_ex306
// 0x0008 (0x0008 - 0x0000)
struct FTresClaymoreSet_e_ex306 final
{
public:
	TWeakObjectPtr<class ATresProjectile_e_ex306_Claymore_Idle> PClaymore;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTresClaymoreSet_e_ex306) == 0x000004, "Wrong alignment on FTresClaymoreSet_e_ex306");
static_assert(sizeof(FTresClaymoreSet_e_ex306) == 0x000008, "Wrong size on FTresClaymoreSet_e_ex306");
static_assert(offsetof(FTresClaymoreSet_e_ex306, PClaymore) == 0x000000, "Member 'FTresClaymoreSet_e_ex306::PClaymore' has a wrong offset!");

// ScriptStruct TresGame.EX355_ThrowFirstMoveInfo
// 0x114AFDA0 (0x114AFDA0 - 0x0000)
struct alignas(0x114AFDA0) FEX355_ThrowFirstMoveInfo final
{
public:
	bool                                          M_bFirstMove;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fFirstMoveTime;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInitVelocity_First;                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxVelocity_First;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAccel_First;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bInitRotOffset_First;                            // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               M_rInitRotOffset_First;                            // 0x0018(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bInitRotOffset_Roam_NoOwnerRot;                  // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fMinHomingDistance_Fisrt;                        // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingAngle_First;                           // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInitHomingRotateVelocity_First;                 // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingRotateVelocity_First;                  // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingRotateAccel_First;                     // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingAngleIgnoreTime_First;                 // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_ThrowFirstMoveInfo) == 0x114AFDA0, "Wrong alignment on FEX355_ThrowFirstMoveInfo");
static_assert(sizeof(FEX355_ThrowFirstMoveInfo) == 0x114AFDA0, "Wrong size on FEX355_ThrowFirstMoveInfo");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_bFirstMove) == 0x000000, "Member 'FEX355_ThrowFirstMoveInfo::M_bFirstMove' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_fFirstMoveTime) == 0x000004, "Member 'FEX355_ThrowFirstMoveInfo::M_fFirstMoveTime' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_fInitVelocity_First) == 0x000008, "Member 'FEX355_ThrowFirstMoveInfo::M_fInitVelocity_First' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_fMaxVelocity_First) == 0x00000C, "Member 'FEX355_ThrowFirstMoveInfo::M_fMaxVelocity_First' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_fAccel_First) == 0x000010, "Member 'FEX355_ThrowFirstMoveInfo::M_fAccel_First' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_bInitRotOffset_First) == 0x000014, "Member 'FEX355_ThrowFirstMoveInfo::M_bInitRotOffset_First' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_rInitRotOffset_First) == 0x000018, "Member 'FEX355_ThrowFirstMoveInfo::M_rInitRotOffset_First' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_bInitRotOffset_Roam_NoOwnerRot) == 0x000024, "Member 'FEX355_ThrowFirstMoveInfo::M_bInitRotOffset_Roam_NoOwnerRot' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_fMinHomingDistance_Fisrt) == 0x000028, "Member 'FEX355_ThrowFirstMoveInfo::M_fMinHomingDistance_Fisrt' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_fMaxHomingAngle_First) == 0x00002C, "Member 'FEX355_ThrowFirstMoveInfo::M_fMaxHomingAngle_First' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_fInitHomingRotateVelocity_First) == 0x000030, "Member 'FEX355_ThrowFirstMoveInfo::M_fInitHomingRotateVelocity_First' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_fMaxHomingRotateVelocity_First) == 0x000034, "Member 'FEX355_ThrowFirstMoveInfo::M_fMaxHomingRotateVelocity_First' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_fMaxHomingRotateAccel_First) == 0x000038, "Member 'FEX355_ThrowFirstMoveInfo::M_fMaxHomingRotateAccel_First' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowFirstMoveInfo, M_fMaxHomingAngleIgnoreTime_First) == 0x00003C, "Member 'FEX355_ThrowFirstMoveInfo::M_fMaxHomingAngleIgnoreTime_First' has a wrong offset!");

// ScriptStruct TresGame.EX355_ThrowHomingInfo
// 0x0050 (0x0050 - 0x0000)
struct FEX355_ThrowHomingInfo final
{
public:
	float                                         M_fInitVelocity;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxVelocity;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAccel;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMinHomingDistance;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingAngle;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInitHomingRotateVelocity;                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingRotateVelocity;                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingRotateAccel;                              // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingAngleIgnoreTime;                       // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bEnableGrabityOnDisablingHomingToLandTarget;     // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fGravityScale;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bSpawnNextProjectileOnHomingEnd;                 // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_vSpawnNextProjLocationOffset;                    // 0x0030(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iMaxRespawnCount;                                // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fNextRespawnWaitTime;                            // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresProjectileBase>        M_ProjectileClass;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_ThrowHomingInfo) == 0x000008, "Wrong alignment on FEX355_ThrowHomingInfo");
static_assert(sizeof(FEX355_ThrowHomingInfo) == 0x000050, "Wrong size on FEX355_ThrowHomingInfo");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fInitVelocity) == 0x000000, "Member 'FEX355_ThrowHomingInfo::M_fInitVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fMaxVelocity) == 0x000004, "Member 'FEX355_ThrowHomingInfo::M_fMaxVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fAccel) == 0x000008, "Member 'FEX355_ThrowHomingInfo::M_fAccel' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fMinHomingDistance) == 0x00000C, "Member 'FEX355_ThrowHomingInfo::M_fMinHomingDistance' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fMaxHomingAngle) == 0x000010, "Member 'FEX355_ThrowHomingInfo::M_fMaxHomingAngle' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fInitHomingRotateVelocity) == 0x000014, "Member 'FEX355_ThrowHomingInfo::M_fInitHomingRotateVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fMaxHomingRotateVelocity) == 0x000018, "Member 'FEX355_ThrowHomingInfo::M_fMaxHomingRotateVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fHomingRotateAccel) == 0x00001C, "Member 'FEX355_ThrowHomingInfo::M_fHomingRotateAccel' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fMaxHomingAngleIgnoreTime) == 0x000020, "Member 'FEX355_ThrowHomingInfo::M_fMaxHomingAngleIgnoreTime' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_bEnableGrabityOnDisablingHomingToLandTarget) == 0x000024, "Member 'FEX355_ThrowHomingInfo::M_bEnableGrabityOnDisablingHomingToLandTarget' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fGravityScale) == 0x000028, "Member 'FEX355_ThrowHomingInfo::M_fGravityScale' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_bSpawnNextProjectileOnHomingEnd) == 0x00002C, "Member 'FEX355_ThrowHomingInfo::M_bSpawnNextProjectileOnHomingEnd' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_vSpawnNextProjLocationOffset) == 0x000030, "Member 'FEX355_ThrowHomingInfo::M_vSpawnNextProjLocationOffset' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_iMaxRespawnCount) == 0x00003C, "Member 'FEX355_ThrowHomingInfo::M_iMaxRespawnCount' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_fNextRespawnWaitTime) == 0x000040, "Member 'FEX355_ThrowHomingInfo::M_fNextRespawnWaitTime' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingInfo, M_ProjectileClass) == 0x000048, "Member 'FEX355_ThrowHomingInfo::M_ProjectileClass' has a wrong offset!");

// ScriptStruct TresGame.EX355_ThrowInfoSet
// 0x114AFDA0 (0x114AFDA0 - 0x0000)
struct FEX355_ThrowInfoSet final
{
public:
	struct FEX355_ThrowRoamMoveInfo               M_RoamMoveInfo;                                    // 0x0000(0x112E9AF0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FEX355_ThrowFirstMoveInfo              M_FirstMoveInfo;                                   // 0x0030(0x114AFDA0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FEX355_ThrowHomingInfo                 M_HomingInfo;                                      // 0x0070(0x0050)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x20];                                      // 0x00C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_ThrowInfoSet) == 0x114AFDA0, "Wrong alignment on FEX355_ThrowInfoSet");
static_assert(sizeof(FEX355_ThrowInfoSet) == 0x114AFDA0, "Wrong size on FEX355_ThrowInfoSet");
static_assert(offsetof(FEX355_ThrowInfoSet, M_RoamMoveInfo) == 0x000000, "Member 'FEX355_ThrowInfoSet::M_RoamMoveInfo' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowInfoSet, M_FirstMoveInfo) == 0x000030, "Member 'FEX355_ThrowInfoSet::M_FirstMoveInfo' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowInfoSet, M_HomingInfo) == 0x000070, "Member 'FEX355_ThrowInfoSet::M_HomingInfo' has a wrong offset!");

// ScriptStruct TresGame.EX355_ThrowBB_Info
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FEX355_ThrowBB_Info final
{
public:
	struct FRotator                               M_rShotRot;                                        // 0x0000(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                M_vShotLoc;                                        // 0x000C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEX355_ThrowInfoSet                    M_ThrowInfoSet;                                    // 0x0018(0x114AFDA0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_ThrowBB_Info) == 0x112E9AF0, "Wrong alignment on FEX355_ThrowBB_Info");
static_assert(sizeof(FEX355_ThrowBB_Info) == 0x112E9AF0, "Wrong size on FEX355_ThrowBB_Info");
static_assert(offsetof(FEX355_ThrowBB_Info, M_rShotRot) == 0x000000, "Member 'FEX355_ThrowBB_Info::M_rShotRot' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowBB_Info, M_vShotLoc) == 0x00000C, "Member 'FEX355_ThrowBB_Info::M_vShotLoc' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowBB_Info, M_ThrowInfoSet) == 0x000018, "Member 'FEX355_ThrowBB_Info::M_ThrowInfoSet' has a wrong offset!");

// ScriptStruct TresGame.EX355_ThrowBB_Pattern
// 0x0010 (0x0010 - 0x0000)
struct FEX355_ThrowBB_Pattern final
{
public:
	TArray<struct FEX355_ThrowBB_Info>            M_ThrowInfoArray;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_ThrowBB_Pattern) == 0x000008, "Wrong alignment on FEX355_ThrowBB_Pattern");
static_assert(sizeof(FEX355_ThrowBB_Pattern) == 0x000010, "Wrong size on FEX355_ThrowBB_Pattern");
static_assert(offsetof(FEX355_ThrowBB_Pattern, M_ThrowInfoArray) == 0x000000, "Member 'FEX355_ThrowBB_Pattern::M_ThrowInfoArray' has a wrong offset!");

// ScriptStruct TresGame.TresRemyFlambeV2DataTable
// 0x0BC0 (0x11573750 - 0x11572B90)
struct alignas(0x11573750) FTresRemyFlambeV2DataTable final : public FTresRemyCookingGameDataTableBase
{
public:
	ERemyFlambeFoodType                           FoodType;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PourStickPourStartValue;                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PourStickRotationJudgementAngle;                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PourStickRotationAnimationCoefficient;             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PourStickNoRotationJudgementTime;                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlambeStickFlambeValue;                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRemyFlambeV2DataTable) == 0x11573750, "Wrong alignment on FTresRemyFlambeV2DataTable");
static_assert(sizeof(FTresRemyFlambeV2DataTable) == 0x11573750, "Wrong size on FTresRemyFlambeV2DataTable");
static_assert(offsetof(FTresRemyFlambeV2DataTable, FoodType) == 0x000020, "Member 'FTresRemyFlambeV2DataTable::FoodType' has a wrong offset!");
static_assert(offsetof(FTresRemyFlambeV2DataTable, PourStickPourStartValue) == 0x000024, "Member 'FTresRemyFlambeV2DataTable::PourStickPourStartValue' has a wrong offset!");
static_assert(offsetof(FTresRemyFlambeV2DataTable, PourStickRotationJudgementAngle) == 0x000028, "Member 'FTresRemyFlambeV2DataTable::PourStickRotationJudgementAngle' has a wrong offset!");
static_assert(offsetof(FTresRemyFlambeV2DataTable, PourStickRotationAnimationCoefficient) == 0x00002C, "Member 'FTresRemyFlambeV2DataTable::PourStickRotationAnimationCoefficient' has a wrong offset!");
static_assert(offsetof(FTresRemyFlambeV2DataTable, PourStickNoRotationJudgementTime) == 0x000030, "Member 'FTresRemyFlambeV2DataTable::PourStickNoRotationJudgementTime' has a wrong offset!");
static_assert(offsetof(FTresRemyFlambeV2DataTable, FlambeStickFlambeValue) == 0x000034, "Member 'FTresRemyFlambeV2DataTable::FlambeStickFlambeValue' has a wrong offset!");

// ScriptStruct TresGame.Tres_e_ex352_DarkShotSpawnParam
// 0x000C (0x000C - 0x0000)
struct FTres_e_ex352_DarkShotSpawnParam final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTres_e_ex352_DarkShotSpawnParam) == 0x000001, "Wrong alignment on FTres_e_ex352_DarkShotSpawnParam");
static_assert(sizeof(FTres_e_ex352_DarkShotSpawnParam) == 0x00000C, "Wrong size on FTres_e_ex352_DarkShotSpawnParam");
static_assert(offsetof(FTres_e_ex352_DarkShotSpawnParam, Offset) == 0x000000, "Member 'FTres_e_ex352_DarkShotSpawnParam::Offset' has a wrong offset!");

// ScriptStruct TresGame.TresUIP_HudTarget_PushButtonMark
// 0x0038 (0x0038 - 0x0000)
struct FTresUIP_HudTarget_PushButtonMark final
{
public:
	class UGFxObject*                             Root;                                              // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x30];                                       // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIP_HudTarget_PushButtonMark) == 0x000008, "Wrong alignment on FTresUIP_HudTarget_PushButtonMark");
static_assert(sizeof(FTresUIP_HudTarget_PushButtonMark) == 0x000038, "Wrong size on FTresUIP_HudTarget_PushButtonMark");
static_assert(offsetof(FTresUIP_HudTarget_PushButtonMark, Root) == 0x000000, "Member 'FTresUIP_HudTarget_PushButtonMark::Root' has a wrong offset!");

// ScriptStruct TresGame.TresGummiShipSticker
// 0x001C (0x001C - 0x0000)
struct FTresGummiShipSticker final
{
public:
	ETresStickerType                              M_nStickerType;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nStickerID;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_posX;                                            // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_posY;                                            // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_posZ;                                            // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_roll;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Pitch;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Yaw;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Scale;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_flip;                                            // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGummiShipSticker) == 0x000004, "Wrong alignment on FTresGummiShipSticker");
static_assert(sizeof(FTresGummiShipSticker) == 0x00001C, "Wrong size on FTresGummiShipSticker");
static_assert(offsetof(FTresGummiShipSticker, M_nStickerType) == 0x000000, "Member 'FTresGummiShipSticker::M_nStickerType' has a wrong offset!");
static_assert(offsetof(FTresGummiShipSticker, M_nStickerID) == 0x000001, "Member 'FTresGummiShipSticker::M_nStickerID' has a wrong offset!");
static_assert(offsetof(FTresGummiShipSticker, M_posX) == 0x000002, "Member 'FTresGummiShipSticker::M_posX' has a wrong offset!");
static_assert(offsetof(FTresGummiShipSticker, M_posY) == 0x000003, "Member 'FTresGummiShipSticker::M_posY' has a wrong offset!");
static_assert(offsetof(FTresGummiShipSticker, M_posZ) == 0x000004, "Member 'FTresGummiShipSticker::M_posZ' has a wrong offset!");
static_assert(offsetof(FTresGummiShipSticker, M_roll) == 0x000008, "Member 'FTresGummiShipSticker::M_roll' has a wrong offset!");
static_assert(offsetof(FTresGummiShipSticker, M_Pitch) == 0x00000C, "Member 'FTresGummiShipSticker::M_Pitch' has a wrong offset!");
static_assert(offsetof(FTresGummiShipSticker, M_Yaw) == 0x000010, "Member 'FTresGummiShipSticker::M_Yaw' has a wrong offset!");
static_assert(offsetof(FTresGummiShipSticker, M_Scale) == 0x000014, "Member 'FTresGummiShipSticker::M_Scale' has a wrong offset!");
static_assert(offsetof(FTresGummiShipSticker, M_flip) == 0x000018, "Member 'FTresGummiShipSticker::M_flip' has a wrong offset!");

// ScriptStruct TresGame.TresTrackSnapToFloorKey
// 0x0008 (0x0008 - 0x0000)
struct FTresTrackSnapToFloorKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_SnapToFloor;                                     // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTrackSnapToFloorKey) == 0x000004, "Wrong alignment on FTresTrackSnapToFloorKey");
static_assert(sizeof(FTresTrackSnapToFloorKey) == 0x000008, "Wrong size on FTresTrackSnapToFloorKey");
static_assert(offsetof(FTresTrackSnapToFloorKey, M_Time) == 0x000000, "Member 'FTresTrackSnapToFloorKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresTrackSnapToFloorKey, M_SnapToFloor) == 0x000004, "Member 'FTresTrackSnapToFloorKey::M_SnapToFloor' has a wrong offset!");

// ScriptStruct TresGame.TresTreasureDataTable
// 0x16A950 (0x1157D9D0 - 0x11413080)
struct alignas(0x1157D9D0) FTresTreasureDataTable final : public FTableRowBase
{
public:
	class FName                                   M_TreasureName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresWorldAreaCode                            M_WorldAreaCode;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bUnused : 1;                                     // 0x0011(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_UIPriority;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_Comment;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTreasureDataTable) == 0x1157D9D0, "Wrong alignment on FTresTreasureDataTable");
static_assert(sizeof(FTresTreasureDataTable) == 0x1157D9D0, "Wrong size on FTresTreasureDataTable");
static_assert(offsetof(FTresTreasureDataTable, M_TreasureName) == 0x000008, "Member 'FTresTreasureDataTable::M_TreasureName' has a wrong offset!");
static_assert(offsetof(FTresTreasureDataTable, M_WorldAreaCode) == 0x000010, "Member 'FTresTreasureDataTable::M_WorldAreaCode' has a wrong offset!");
static_assert(offsetof(FTresTreasureDataTable, M_UIPriority) == 0x000014, "Member 'FTresTreasureDataTable::M_UIPriority' has a wrong offset!");
static_assert(offsetof(FTresTreasureDataTable, M_Comment) == 0x000018, "Member 'FTresTreasureDataTable::M_Comment' has a wrong offset!");

// ScriptStruct TresGame.TresAttractionFlowDrawingEntry
// 0x114C8020 (0x114C8020 - 0x0000)
struct alignas(0x114C8020) FTresAttractionFlowDrawingEntry final
{
public:
	ETresCommandKind                              M_Command;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Weight;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAttractionFlowDrawingEntry) == 0x114C8020, "Wrong alignment on FTresAttractionFlowDrawingEntry");
static_assert(sizeof(FTresAttractionFlowDrawingEntry) == 0x114C8020, "Wrong size on FTresAttractionFlowDrawingEntry");
static_assert(offsetof(FTresAttractionFlowDrawingEntry, M_Command) == 0x000000, "Member 'FTresAttractionFlowDrawingEntry::M_Command' has a wrong offset!");
static_assert(offsetof(FTresAttractionFlowDrawingEntry, M_Weight) == 0x000004, "Member 'FTresAttractionFlowDrawingEntry::M_Weight' has a wrong offset!");

// ScriptStruct TresGame.TresGimmickMI_04Status
// 0x11516D40 (0x11516D40 - 0x0000)
struct FTresGimmickMI_04Status final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_SplineMoverExecutor              SplineMover;                                       // 0x0008(0x11516D40)(Transient, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGimmickMI_04Status) == 0x11516D40, "Wrong alignment on FTresGimmickMI_04Status");
static_assert(sizeof(FTresGimmickMI_04Status) == 0x11516D40, "Wrong size on FTresGimmickMI_04Status");
static_assert(offsetof(FTresGimmickMI_04Status, SplineMover) == 0x000008, "Member 'FTresGimmickMI_04Status::SplineMover' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405NormalComboAttackParam
// 0x114C4AC0 (0x114C4AC0 - 0x0000)
struct alignas(0x114C4AC0) FTresE_dw405NormalComboAttackParam final
{
public:
	TSubclassOf<class UTresAttack_e_dw405_Base>   AttackDefinition;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideAttackDataIDName;                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableBeforeEndAttackStart : 1;                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackStartOffsetTime;                             // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearOffsetAngle;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearOffsetDistance;                              // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_dw405NormalComboAttackParam) == 0x114C4AC0, "Wrong alignment on FTresE_dw405NormalComboAttackParam");
static_assert(sizeof(FTresE_dw405NormalComboAttackParam) == 0x114C4AC0, "Wrong size on FTresE_dw405NormalComboAttackParam");
static_assert(offsetof(FTresE_dw405NormalComboAttackParam, AttackDefinition) == 0x000000, "Member 'FTresE_dw405NormalComboAttackParam::AttackDefinition' has a wrong offset!");
static_assert(offsetof(FTresE_dw405NormalComboAttackParam, OverrideAttackDataIDName) == 0x000008, "Member 'FTresE_dw405NormalComboAttackParam::OverrideAttackDataIDName' has a wrong offset!");
static_assert(offsetof(FTresE_dw405NormalComboAttackParam, AttackStartOffsetTime) == 0x000014, "Member 'FTresE_dw405NormalComboAttackParam::AttackStartOffsetTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405NormalComboAttackParam, AppearOffsetAngle) == 0x000018, "Member 'FTresE_dw405NormalComboAttackParam::AppearOffsetAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405NormalComboAttackParam, AppearOffsetDistance) == 0x00001C, "Member 'FTresE_dw405NormalComboAttackParam::AppearOffsetDistance' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405NormalComboAttackParamType
// 0x114C4AC0 (0x114C4AC0 - 0x0000)
struct FTresE_dw405NormalComboAttackParamType final
{
public:
	struct FTresE_dw405NormalComboAttackParam     Type[0x2];                                         // 0x0000(0x114C4AC0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_dw405NormalComboAttackParamType) == 0x114C4AC0, "Wrong alignment on FTresE_dw405NormalComboAttackParamType");
static_assert(sizeof(FTresE_dw405NormalComboAttackParamType) == 0x114C4AC0, "Wrong size on FTresE_dw405NormalComboAttackParamType");
static_assert(offsetof(FTresE_dw405NormalComboAttackParamType, Type) == 0x000000, "Member 'FTresE_dw405NormalComboAttackParamType::Type' has a wrong offset!");

// ScriptStruct TresGame.TresFieldVoiceExecuteData
// 0x11508300 (0x11508300 - 0x0000)
struct alignas(0x11508300) FTresFieldVoiceExecuteData final
{
public:
	class AActor*                                 M_pExecuter;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Time;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresFieldVoiceExecuteData) == 0x11508300, "Wrong alignment on FTresFieldVoiceExecuteData");
static_assert(sizeof(FTresFieldVoiceExecuteData) == 0x11508300, "Wrong size on FTresFieldVoiceExecuteData");
static_assert(offsetof(FTresFieldVoiceExecuteData, M_pExecuter) == 0x000000, "Member 'FTresFieldVoiceExecuteData::M_pExecuter' has a wrong offset!");
static_assert(offsetof(FTresFieldVoiceExecuteData, M_Time) == 0x000008, "Member 'FTresFieldVoiceExecuteData::M_Time' has a wrong offset!");

// ScriptStruct TresGame.TresShortcutWeaponData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresShortcutWeaponData final : public FTableRowBase
{
public:
	ETresItemDefWeapon                            Type1;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefWeapon                            Type2;                                             // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefWeapon                            Type3;                                             // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefWeapon                            Type4;                                             // 0x000B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x24];                                       // 0x000C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresShortcutWeaponData) == 0x11413080, "Wrong alignment on FTresShortcutWeaponData");
static_assert(sizeof(FTresShortcutWeaponData) == 0x11413080, "Wrong size on FTresShortcutWeaponData");
static_assert(offsetof(FTresShortcutWeaponData, Type1) == 0x000008, "Member 'FTresShortcutWeaponData::Type1' has a wrong offset!");
static_assert(offsetof(FTresShortcutWeaponData, Type2) == 0x000009, "Member 'FTresShortcutWeaponData::Type2' has a wrong offset!");
static_assert(offsetof(FTresShortcutWeaponData, Type3) == 0x00000A, "Member 'FTresShortcutWeaponData::Type3' has a wrong offset!");
static_assert(offsetof(FTresShortcutWeaponData, Type4) == 0x00000B, "Member 'FTresShortcutWeaponData::Type4' has a wrong offset!");

// ScriptStruct TresGame.OneCollInfo_e_ex310
// 0x0010 (0x0010 - 0x0000)
struct FOneCollInfo_e_ex310 final
{
public:
	int32                                         INotifyParam;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresProjectile_e_ex310_Wave_OneCollision> POneCollision;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOneCollInfo_e_ex310) == 0x000008, "Wrong alignment on FOneCollInfo_e_ex310");
static_assert(sizeof(FOneCollInfo_e_ex310) == 0x000010, "Wrong size on FOneCollInfo_e_ex310");
static_assert(offsetof(FOneCollInfo_e_ex310, INotifyParam) == 0x000000, "Member 'FOneCollInfo_e_ex310::INotifyParam' has a wrong offset!");
static_assert(offsetof(FOneCollInfo_e_ex310, POneCollision) == 0x000008, "Member 'FOneCollInfo_e_ex310::POneCollision' has a wrong offset!");

// ScriptStruct TresGame.TresCockpitCmdInfo
// 0x0020 (0x0020 - 0x0000)
struct FTresCockpitCmdInfo final
{
public:
	TArray<struct FTresCockpitCmd>                M_cockpitCmdAry;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCockpitCmdInfo) == 0x000008, "Wrong alignment on FTresCockpitCmdInfo");
static_assert(sizeof(FTresCockpitCmdInfo) == 0x000020, "Wrong size on FTresCockpitCmdInfo");
static_assert(offsetof(FTresCockpitCmdInfo, M_cockpitCmdAry) == 0x000000, "Member 'FTresCockpitCmdInfo::M_cockpitCmdAry' has a wrong offset!");

// ScriptStruct TresGame.Tresex301AscensionPillarPatternParam
// 0x114B0EE0 (0x114B0EE0 - 0x0000)
struct alignas(0x114B0EE0) FTresex301AscensionPillarPatternParam final
{
public:
	bool                                          M_IsShotRotationToTarget;                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ShotRotation;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsShotLocationTarget;                            // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_OffsetRenge;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OffsetRot;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsCalcOffsetRotation;                            // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_BulletID;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresex301AscensionPillarPatternParam) == 0x114B0EE0, "Wrong alignment on FTresex301AscensionPillarPatternParam");
static_assert(sizeof(FTresex301AscensionPillarPatternParam) == 0x114B0EE0, "Wrong size on FTresex301AscensionPillarPatternParam");
static_assert(offsetof(FTresex301AscensionPillarPatternParam, M_IsShotRotationToTarget) == 0x000000, "Member 'FTresex301AscensionPillarPatternParam::M_IsShotRotationToTarget' has a wrong offset!");
static_assert(offsetof(FTresex301AscensionPillarPatternParam, M_ShotRotation) == 0x000004, "Member 'FTresex301AscensionPillarPatternParam::M_ShotRotation' has a wrong offset!");
static_assert(offsetof(FTresex301AscensionPillarPatternParam, M_IsShotLocationTarget) == 0x000008, "Member 'FTresex301AscensionPillarPatternParam::M_IsShotLocationTarget' has a wrong offset!");
static_assert(offsetof(FTresex301AscensionPillarPatternParam, M_OffsetRenge) == 0x00000C, "Member 'FTresex301AscensionPillarPatternParam::M_OffsetRenge' has a wrong offset!");
static_assert(offsetof(FTresex301AscensionPillarPatternParam, M_OffsetRot) == 0x000010, "Member 'FTresex301AscensionPillarPatternParam::M_OffsetRot' has a wrong offset!");
static_assert(offsetof(FTresex301AscensionPillarPatternParam, M_IsCalcOffsetRotation) == 0x000014, "Member 'FTresex301AscensionPillarPatternParam::M_IsCalcOffsetRotation' has a wrong offset!");
static_assert(offsetof(FTresex301AscensionPillarPatternParam, M_BulletID) == 0x000018, "Member 'FTresex301AscensionPillarPatternParam::M_BulletID' has a wrong offset!");

// ScriptStruct TresGame.TresAvatarAttackLocationTypeParam_e_ex358
// 0x114BF870 (0x114BF870 - 0x0000)
struct alignas(0x114BF870) FTresAvatarAttackLocationTypeParam_e_ex358 final
{
public:
	ETresEnemyAvatarAttackAppearLocation_e_ex358  LocationType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetAngle;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAvatarAttackLocationTypeParam_e_ex358) == 0x114BF870, "Wrong alignment on FTresAvatarAttackLocationTypeParam_e_ex358");
static_assert(sizeof(FTresAvatarAttackLocationTypeParam_e_ex358) == 0x114BF870, "Wrong size on FTresAvatarAttackLocationTypeParam_e_ex358");
static_assert(offsetof(FTresAvatarAttackLocationTypeParam_e_ex358, LocationType) == 0x000000, "Member 'FTresAvatarAttackLocationTypeParam_e_ex358::LocationType' has a wrong offset!");
static_assert(offsetof(FTresAvatarAttackLocationTypeParam_e_ex358, OffsetAngle) == 0x000004, "Member 'FTresAvatarAttackLocationTypeParam_e_ex358::OffsetAngle' has a wrong offset!");
static_assert(offsetof(FTresAvatarAttackLocationTypeParam_e_ex358, Distance) == 0x000008, "Member 'FTresAvatarAttackLocationTypeParam_e_ex358::Distance' has a wrong offset!");

// ScriptStruct TresGame.TresAvatarAttackAppearParam_e_ex358
// 0x114BF870 (0x114BF870 - 0x0000)
struct FTresAvatarAttackAppearParam_e_ex358 final
{
public:
	ETresEnemyAvatarAttackAppearLocation_e_ex358  LocationType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresAvatarAttackLocationTypeParam_e_ex358 CustomLocationTypeParam;                           // 0x0004(0x114BF870)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bEnableSyncTargetHeight : 1;                       // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetHeight;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableFixedLookAtAngle : 1;                       // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedLookAtOffsetAngle;                            // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtOffsetAngle;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCalcAppearLocationDelayAfter : 1;                 // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAvatarAttackAppearParam_e_ex358) == 0x114BF870, "Wrong alignment on FTresAvatarAttackAppearParam_e_ex358");
static_assert(sizeof(FTresAvatarAttackAppearParam_e_ex358) == 0x114BF870, "Wrong size on FTresAvatarAttackAppearParam_e_ex358");
static_assert(offsetof(FTresAvatarAttackAppearParam_e_ex358, LocationType) == 0x000000, "Member 'FTresAvatarAttackAppearParam_e_ex358::LocationType' has a wrong offset!");
static_assert(offsetof(FTresAvatarAttackAppearParam_e_ex358, CustomLocationTypeParam) == 0x000004, "Member 'FTresAvatarAttackAppearParam_e_ex358::CustomLocationTypeParam' has a wrong offset!");
static_assert(offsetof(FTresAvatarAttackAppearParam_e_ex358, OffsetHeight) == 0x000014, "Member 'FTresAvatarAttackAppearParam_e_ex358::OffsetHeight' has a wrong offset!");
static_assert(offsetof(FTresAvatarAttackAppearParam_e_ex358, OffsetAngle) == 0x000018, "Member 'FTresAvatarAttackAppearParam_e_ex358::OffsetAngle' has a wrong offset!");
static_assert(offsetof(FTresAvatarAttackAppearParam_e_ex358, Distance) == 0x00001C, "Member 'FTresAvatarAttackAppearParam_e_ex358::Distance' has a wrong offset!");
static_assert(offsetof(FTresAvatarAttackAppearParam_e_ex358, FixedLookAtOffsetAngle) == 0x000024, "Member 'FTresAvatarAttackAppearParam_e_ex358::FixedLookAtOffsetAngle' has a wrong offset!");
static_assert(offsetof(FTresAvatarAttackAppearParam_e_ex358, LookAtOffsetAngle) == 0x000028, "Member 'FTresAvatarAttackAppearParam_e_ex358::LookAtOffsetAngle' has a wrong offset!");
static_assert(offsetof(FTresAvatarAttackAppearParam_e_ex358, DelayTime) == 0x00002C, "Member 'FTresAvatarAttackAppearParam_e_ex358::DelayTime' has a wrong offset!");

// ScriptStruct TresGame.TresBlackSphereSpawnParams_e_ex352
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresBlackSphereSpawnParams_e_ex352 final
{
public:
	TSubclassOf<class ATresProjectileBase>        M_SpawnBlackSphere;                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 M_AttackTimes;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRotator                               M_FiringAngle;                                     // 0x0018(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBlackSphereSpawnParams_e_ex352) == 0x112E9AF0, "Wrong alignment on FTresBlackSphereSpawnParams_e_ex352");
static_assert(sizeof(FTresBlackSphereSpawnParams_e_ex352) == 0x112E9AF0, "Wrong size on FTresBlackSphereSpawnParams_e_ex352");
static_assert(offsetof(FTresBlackSphereSpawnParams_e_ex352, M_SpawnBlackSphere) == 0x000000, "Member 'FTresBlackSphereSpawnParams_e_ex352::M_SpawnBlackSphere' has a wrong offset!");
static_assert(offsetof(FTresBlackSphereSpawnParams_e_ex352, M_AttackTimes) == 0x000008, "Member 'FTresBlackSphereSpawnParams_e_ex352::M_AttackTimes' has a wrong offset!");
static_assert(offsetof(FTresBlackSphereSpawnParams_e_ex352, M_FiringAngle) == 0x000018, "Member 'FTresBlackSphereSpawnParams_e_ex352::M_FiringAngle' has a wrong offset!");

// ScriptStruct TresGame.TresBlackSphere_e_ex352
// 0x0010 (0x0010 - 0x0000)
struct FTresBlackSphere_e_ex352 final
{
public:
	TArray<struct FTresBlackSphereSpawnParams_e_ex352> M_BlackSphereSpawnParams;                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBlackSphere_e_ex352) == 0x000008, "Wrong alignment on FTresBlackSphere_e_ex352");
static_assert(sizeof(FTresBlackSphere_e_ex352) == 0x000010, "Wrong size on FTresBlackSphere_e_ex352");
static_assert(offsetof(FTresBlackSphere_e_ex352, M_BlackSphereSpawnParams) == 0x000000, "Member 'FTresBlackSphere_e_ex352::M_BlackSphereSpawnParams' has a wrong offset!");

// ScriptStruct TresGame.TresPhotoHologramPoseSet
// 0x0010 (0x0010 - 0x0000)
struct FTresPhotoHologramPoseSet final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWeaponVisible;                                   // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPhotoHologramPoseSet) == 0x000004, "Wrong alignment on FTresPhotoHologramPoseSet");
static_assert(sizeof(FTresPhotoHologramPoseSet) == 0x000010, "Wrong size on FTresPhotoHologramPoseSet");
static_assert(offsetof(FTresPhotoHologramPoseSet, AnimName) == 0x000000, "Member 'FTresPhotoHologramPoseSet::AnimName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseSet, StartTime) == 0x000008, "Member 'FTresPhotoHologramPoseSet::StartTime' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseSet, IsWeaponVisible) == 0x00000C, "Member 'FTresPhotoHologramPoseSet::IsWeaponVisible' has a wrong offset!");

// ScriptStruct TresGame.TresRemunerationData
// 0x0018 (0x0018 - 0x0000)
struct FTresRemunerationData final
{
public:
	uint32                                        Crc;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ItemKeyArray;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRemunerationData) == 0x000008, "Wrong alignment on FTresRemunerationData");
static_assert(sizeof(FTresRemunerationData) == 0x000018, "Wrong size on FTresRemunerationData");
static_assert(offsetof(FTresRemunerationData, Crc) == 0x000000, "Member 'FTresRemunerationData::Crc' has a wrong offset!");
static_assert(offsetof(FTresRemunerationData, ItemKeyArray) == 0x000008, "Member 'FTresRemunerationData::ItemKeyArray' has a wrong offset!");

// ScriptStruct TresGame.TresTornadoDebrisTransformInfo
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresTornadoDebrisTransformInfo final
{
public:
	float                                         DebrisLocation_R;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebrisLocation_P;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebrisLocation_H;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebrisLocation_TargetHeightRate;                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevolveSpeed;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotateSpeed;                                       // 0x0014(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Amplitude;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateMoveVelocity;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestinationEffect;                                // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTornadoDebrisTransformInfo) == 0x112E9AF0, "Wrong alignment on FTresTornadoDebrisTransformInfo");
static_assert(sizeof(FTresTornadoDebrisTransformInfo) == 0x112E9AF0, "Wrong size on FTresTornadoDebrisTransformInfo");
static_assert(offsetof(FTresTornadoDebrisTransformInfo, DebrisLocation_R) == 0x000000, "Member 'FTresTornadoDebrisTransformInfo::DebrisLocation_R' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisTransformInfo, DebrisLocation_P) == 0x000004, "Member 'FTresTornadoDebrisTransformInfo::DebrisLocation_P' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisTransformInfo, DebrisLocation_H) == 0x000008, "Member 'FTresTornadoDebrisTransformInfo::DebrisLocation_H' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisTransformInfo, DebrisLocation_TargetHeightRate) == 0x00000C, "Member 'FTresTornadoDebrisTransformInfo::DebrisLocation_TargetHeightRate' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisTransformInfo, RevolveSpeed) == 0x000010, "Member 'FTresTornadoDebrisTransformInfo::RevolveSpeed' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisTransformInfo, RotateSpeed) == 0x000014, "Member 'FTresTornadoDebrisTransformInfo::RotateSpeed' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisTransformInfo, Amplitude) == 0x000020, "Member 'FTresTornadoDebrisTransformInfo::Amplitude' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisTransformInfo, Frequency) == 0x000024, "Member 'FTresTornadoDebrisTransformInfo::Frequency' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisTransformInfo, StateMoveVelocity) == 0x000028, "Member 'FTresTornadoDebrisTransformInfo::StateMoveVelocity' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisTransformInfo, bDestinationEffect) == 0x00002C, "Member 'FTresTornadoDebrisTransformInfo::bDestinationEffect' has a wrong offset!");

// ScriptStruct TresGame.TresNavLinkSet_e_ex035
// 0x0010 (0x0010 - 0x0000)
struct FTresNavLinkSet_e_ex035 final
{
public:
	class ANavLinkProxy*                          NavLinkProxy;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresNavLinkSegment_e_ex035                   NavLinkSegment;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresNavLinkSet_e_ex035) == 0x000008, "Wrong alignment on FTresNavLinkSet_e_ex035");
static_assert(sizeof(FTresNavLinkSet_e_ex035) == 0x000010, "Wrong size on FTresNavLinkSet_e_ex035");
static_assert(offsetof(FTresNavLinkSet_e_ex035, NavLinkProxy) == 0x000000, "Member 'FTresNavLinkSet_e_ex035::NavLinkProxy' has a wrong offset!");
static_assert(offsetof(FTresNavLinkSet_e_ex035, NavLinkSegment) == 0x000008, "Member 'FTresNavLinkSet_e_ex035::NavLinkSegment' has a wrong offset!");

// ScriptStruct TresGame.EX354_ArtemaWarpShotSequence_ProjectileInfo
// 0x0080 (0x0080 - 0x0000)
struct FEX354_ArtemaWarpShotSequence_ProjectileInfo final
{
public:
	struct FEX354_ArtemaWarpShotSet               M_ShotSet;                                         // 0x0000(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                M_vSpawnLocOffset;                                 // 0x0068(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresProjectileBase*                    M_Spawner;                                         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_ArtemaWarpShotSequence_ProjectileInfo) == 0x000008, "Wrong alignment on FEX354_ArtemaWarpShotSequence_ProjectileInfo");
static_assert(sizeof(FEX354_ArtemaWarpShotSequence_ProjectileInfo) == 0x000080, "Wrong size on FEX354_ArtemaWarpShotSequence_ProjectileInfo");
static_assert(offsetof(FEX354_ArtemaWarpShotSequence_ProjectileInfo, M_ShotSet) == 0x000000, "Member 'FEX354_ArtemaWarpShotSequence_ProjectileInfo::M_ShotSet' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSequence_ProjectileInfo, M_vSpawnLocOffset) == 0x000068, "Member 'FEX354_ArtemaWarpShotSequence_ProjectileInfo::M_vSpawnLocOffset' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSequence_ProjectileInfo, M_Spawner) == 0x000078, "Member 'FEX354_ArtemaWarpShotSequence_ProjectileInfo::M_Spawner' has a wrong offset!");

// ScriptStruct TresGame.EX354_ArtemaWarpShotSequenceInfo
// 0x0090 (0x0090 - 0x0000)
struct FEX354_ArtemaWarpShotSequenceInfo final
{
public:
	TArray<struct FEX354_ArtemaWarpShotSequence_ProjectileInfo> M_ProjectileInfoArray;                             // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         M_fShotWaitTime;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vSpawnLoc;                                       // 0x0014(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           M_SpawnLocCurve;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vAimLoc;                                         // 0x0028(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           M_AimLocCurve;                                     // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_Target;                                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX354_ArtemaWarpShotSequenceInfo) == 0x000008, "Wrong alignment on FEX354_ArtemaWarpShotSequenceInfo");
static_assert(sizeof(FEX354_ArtemaWarpShotSequenceInfo) == 0x000090, "Wrong size on FEX354_ArtemaWarpShotSequenceInfo");
static_assert(offsetof(FEX354_ArtemaWarpShotSequenceInfo, M_ProjectileInfoArray) == 0x000000, "Member 'FEX354_ArtemaWarpShotSequenceInfo::M_ProjectileInfoArray' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSequenceInfo, M_fShotWaitTime) == 0x000010, "Member 'FEX354_ArtemaWarpShotSequenceInfo::M_fShotWaitTime' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSequenceInfo, M_vSpawnLoc) == 0x000014, "Member 'FEX354_ArtemaWarpShotSequenceInfo::M_vSpawnLoc' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSequenceInfo, M_SpawnLocCurve) == 0x000020, "Member 'FEX354_ArtemaWarpShotSequenceInfo::M_SpawnLocCurve' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSequenceInfo, M_vAimLoc) == 0x000028, "Member 'FEX354_ArtemaWarpShotSequenceInfo::M_vAimLoc' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSequenceInfo, M_AimLocCurve) == 0x000038, "Member 'FEX354_ArtemaWarpShotSequenceInfo::M_AimLocCurve' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSequenceInfo, M_Owner) == 0x000040, "Member 'FEX354_ArtemaWarpShotSequenceInfo::M_Owner' has a wrong offset!");
static_assert(offsetof(FEX354_ArtemaWarpShotSequenceInfo, M_Target) == 0x000048, "Member 'FEX354_ArtemaWarpShotSequenceInfo::M_Target' has a wrong offset!");

// ScriptStruct TresGame.EX354_ArtemaWarpShotSequenceInfoSet
// 0x0010 (0x0010 - 0x0000)
struct FEX354_ArtemaWarpShotSequenceInfoSet final
{
public:
	TArray<struct FEX354_ArtemaWarpShotSequenceInfo> M_SequenceInfoArray;                               // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_ArtemaWarpShotSequenceInfoSet) == 0x000008, "Wrong alignment on FEX354_ArtemaWarpShotSequenceInfoSet");
static_assert(sizeof(FEX354_ArtemaWarpShotSequenceInfoSet) == 0x000010, "Wrong size on FEX354_ArtemaWarpShotSequenceInfoSet");
static_assert(offsetof(FEX354_ArtemaWarpShotSequenceInfoSet, M_SequenceInfoArray) == 0x000000, "Member 'FEX354_ArtemaWarpShotSequenceInfoSet::M_SequenceInfoArray' has a wrong offset!");

// ScriptStruct TresGame.TresEx353HitEffectManager
// 0x0018 (0x0018 - 0x0000)
struct FTresEx353HitEffectManager final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_LaserEffectCmp;                                  // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               M_SparkEffectCmp;                                  // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTresEx353HitEffectManager) == 0x000008, "Wrong alignment on FTresEx353HitEffectManager");
static_assert(sizeof(FTresEx353HitEffectManager) == 0x000018, "Wrong size on FTresEx353HitEffectManager");
static_assert(offsetof(FTresEx353HitEffectManager, M_LaserEffectCmp) == 0x000008, "Member 'FTresEx353HitEffectManager::M_LaserEffectCmp' has a wrong offset!");
static_assert(offsetof(FTresEx353HitEffectManager, M_SparkEffectCmp) == 0x000010, "Member 'FTresEx353HitEffectManager::M_SparkEffectCmp' has a wrong offset!");

// ScriptStruct TresGame.Tresex367AscensionPillarPatternParam
// 0x114B28E0 (0x114B28E0 - 0x0000)
struct alignas(0x114B28E0) FTresex367AscensionPillarPatternParam final
{
public:
	bool                                          M_IsShotRotationToTarget;                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ShotRotation;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsShotLocationTarget;                            // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_OffsetRenge;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OffsetRot;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsCalcOffsetRotation;                            // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_BulletID;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresex367AscensionPillarPatternParam) == 0x114B28E0, "Wrong alignment on FTresex367AscensionPillarPatternParam");
static_assert(sizeof(FTresex367AscensionPillarPatternParam) == 0x114B28E0, "Wrong size on FTresex367AscensionPillarPatternParam");
static_assert(offsetof(FTresex367AscensionPillarPatternParam, M_IsShotRotationToTarget) == 0x000000, "Member 'FTresex367AscensionPillarPatternParam::M_IsShotRotationToTarget' has a wrong offset!");
static_assert(offsetof(FTresex367AscensionPillarPatternParam, M_ShotRotation) == 0x000004, "Member 'FTresex367AscensionPillarPatternParam::M_ShotRotation' has a wrong offset!");
static_assert(offsetof(FTresex367AscensionPillarPatternParam, M_IsShotLocationTarget) == 0x000008, "Member 'FTresex367AscensionPillarPatternParam::M_IsShotLocationTarget' has a wrong offset!");
static_assert(offsetof(FTresex367AscensionPillarPatternParam, M_OffsetRenge) == 0x00000C, "Member 'FTresex367AscensionPillarPatternParam::M_OffsetRenge' has a wrong offset!");
static_assert(offsetof(FTresex367AscensionPillarPatternParam, M_OffsetRot) == 0x000010, "Member 'FTresex367AscensionPillarPatternParam::M_OffsetRot' has a wrong offset!");
static_assert(offsetof(FTresex367AscensionPillarPatternParam, M_IsCalcOffsetRotation) == 0x000014, "Member 'FTresex367AscensionPillarPatternParam::M_IsCalcOffsetRotation' has a wrong offset!");
static_assert(offsetof(FTresex367AscensionPillarPatternParam, M_BulletID) == 0x000018, "Member 'FTresex367AscensionPillarPatternParam::M_BulletID' has a wrong offset!");

// ScriptStruct TresGame.TresDarkBarrageParam_e_ex352
// 0x114B2DB0 (0x114B2DB0 - 0x0000)
struct alignas(0x114B2DB0) FTresDarkBarrageParam_e_ex352 final
{
public:
	bool                                          bAimTarget;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresProjectileBase>        M_DarkBarrageProjectileClass;                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AttackIntervals;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         StartAttackAngle;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAttackAngle;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresDarkBarrageParam_e_ex352) == 0x114B2DB0, "Wrong alignment on FTresDarkBarrageParam_e_ex352");
static_assert(sizeof(FTresDarkBarrageParam_e_ex352) == 0x114B2DB0, "Wrong size on FTresDarkBarrageParam_e_ex352");
static_assert(offsetof(FTresDarkBarrageParam_e_ex352, bAimTarget) == 0x000000, "Member 'FTresDarkBarrageParam_e_ex352::bAimTarget' has a wrong offset!");
static_assert(offsetof(FTresDarkBarrageParam_e_ex352, M_DarkBarrageProjectileClass) == 0x000008, "Member 'FTresDarkBarrageParam_e_ex352::M_DarkBarrageProjectileClass' has a wrong offset!");
static_assert(offsetof(FTresDarkBarrageParam_e_ex352, AttackIntervals) == 0x000010, "Member 'FTresDarkBarrageParam_e_ex352::AttackIntervals' has a wrong offset!");
static_assert(offsetof(FTresDarkBarrageParam_e_ex352, StartAttackAngle) == 0x000020, "Member 'FTresDarkBarrageParam_e_ex352::StartAttackAngle' has a wrong offset!");
static_assert(offsetof(FTresDarkBarrageParam_e_ex352, EndAttackAngle) == 0x000024, "Member 'FTresDarkBarrageParam_e_ex352::EndAttackAngle' has a wrong offset!");
static_assert(offsetof(FTresDarkBarrageParam_e_ex352, InitialSpeed) == 0x000028, "Member 'FTresDarkBarrageParam_e_ex352::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FTresDarkBarrageParam_e_ex352, Acceleration) == 0x00002C, "Member 'FTresDarkBarrageParam_e_ex352::Acceleration' has a wrong offset!");
static_assert(offsetof(FTresDarkBarrageParam_e_ex352, MaxSpeed) == 0x000030, "Member 'FTresDarkBarrageParam_e_ex352::MaxSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresLSIScoreEntryHowtoPlayGolf
// 0x1154D5B0 (0x1154D5B0 - 0x0000)
struct alignas(0x1154D5B0) FTresLSIScoreEntryHowtoPlayGolf final
{
public:
	ETresLSIHowtoPlayGolfMode                     Mode;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLSIScoreEntryHowtoPlayGolf) == 0x1154D5B0, "Wrong alignment on FTresLSIScoreEntryHowtoPlayGolf");
static_assert(sizeof(FTresLSIScoreEntryHowtoPlayGolf) == 0x1154D5B0, "Wrong size on FTresLSIScoreEntryHowtoPlayGolf");
static_assert(offsetof(FTresLSIScoreEntryHowtoPlayGolf, Mode) == 0x000000, "Member 'FTresLSIScoreEntryHowtoPlayGolf::Mode' has a wrong offset!");
static_assert(offsetof(FTresLSIScoreEntryHowtoPlayGolf, Score) == 0x000004, "Member 'FTresLSIScoreEntryHowtoPlayGolf::Score' has a wrong offset!");

// ScriptStruct TresGame.TresEx050PuddingNum
// 0x114F6920 (0x114F6920 - 0x0000)
struct alignas(0x114F6920) FTresEx050PuddingNum final
{
public:
	int32                                         All;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pile;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotPile;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEx050PuddingNum) == 0x114F6920, "Wrong alignment on FTresEx050PuddingNum");
static_assert(sizeof(FTresEx050PuddingNum) == 0x114F6920, "Wrong size on FTresEx050PuddingNum");
static_assert(offsetof(FTresEx050PuddingNum, All) == 0x000000, "Member 'FTresEx050PuddingNum::All' has a wrong offset!");
static_assert(offsetof(FTresEx050PuddingNum, Pile) == 0x000004, "Member 'FTresEx050PuddingNum::Pile' has a wrong offset!");
static_assert(offsetof(FTresEx050PuddingNum, NotPile) == 0x000008, "Member 'FTresEx050PuddingNum::NotPile' has a wrong offset!");

// ScriptStruct TresGame.RootMotionScaleParam_e_ex367
// 0x114B3580 (0x114B3580 - 0x0000)
struct alignas(0x114B3580) FRootMotionScaleParam_e_ex367 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootMotionScaleParam_e_ex367) == 0x114B3580, "Wrong alignment on FRootMotionScaleParam_e_ex367");
static_assert(sizeof(FRootMotionScaleParam_e_ex367) == 0x114B3580, "Wrong size on FRootMotionScaleParam_e_ex367");
static_assert(offsetof(FRootMotionScaleParam_e_ex367, Distance) == 0x000000, "Member 'FRootMotionScaleParam_e_ex367::Distance' has a wrong offset!");
static_assert(offsetof(FRootMotionScaleParam_e_ex367, RootMotionScale) == 0x000004, "Member 'FRootMotionScaleParam_e_ex367::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.RootMotionScaleDataParam_e_ex367
// 0x114B3580 (0x114B3580 - 0x0000)
struct FRootMotionScaleDataParam_e_ex367 final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableAttackHitResetRootMotionScale : 1;          // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRootMotionScaleParam_e_ex367          MinRootMotionScaleParam;                           // 0x0008(0x114B3580)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FRootMotionScaleParam_e_ex367          MaxRootMotionScaleParam;                           // 0x0010(0x114B3580)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetDistOffset;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootMotionScaleDataParam_e_ex367) == 0x114B3580, "Wrong alignment on FRootMotionScaleDataParam_e_ex367");
static_assert(sizeof(FRootMotionScaleDataParam_e_ex367) == 0x114B3580, "Wrong size on FRootMotionScaleDataParam_e_ex367");
static_assert(offsetof(FRootMotionScaleDataParam_e_ex367, ID) == 0x000000, "Member 'FRootMotionScaleDataParam_e_ex367::ID' has a wrong offset!");
static_assert(offsetof(FRootMotionScaleDataParam_e_ex367, MinRootMotionScaleParam) == 0x000008, "Member 'FRootMotionScaleDataParam_e_ex367::MinRootMotionScaleParam' has a wrong offset!");
static_assert(offsetof(FRootMotionScaleDataParam_e_ex367, MaxRootMotionScaleParam) == 0x000010, "Member 'FRootMotionScaleDataParam_e_ex367::MaxRootMotionScaleParam' has a wrong offset!");
static_assert(offsetof(FRootMotionScaleDataParam_e_ex367, TargetDistOffset) == 0x000018, "Member 'FRootMotionScaleDataParam_e_ex367::TargetDistOffset' has a wrong offset!");

// ScriptStruct TresGame.TresLgRxReactionMarkerData
// 0x0018 (0x0018 - 0x0000)
struct FTresLgRxReactionMarkerData final
{
public:
	class FName                                   M_SocketName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Offset;                                          // 0x0008(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLgRxReactionMarkerData) == 0x000004, "Wrong alignment on FTresLgRxReactionMarkerData");
static_assert(sizeof(FTresLgRxReactionMarkerData) == 0x000018, "Wrong size on FTresLgRxReactionMarkerData");
static_assert(offsetof(FTresLgRxReactionMarkerData, M_SocketName) == 0x000000, "Member 'FTresLgRxReactionMarkerData::M_SocketName' has a wrong offset!");
static_assert(offsetof(FTresLgRxReactionMarkerData, M_Offset) == 0x000008, "Member 'FTresLgRxReactionMarkerData::M_Offset' has a wrong offset!");

// ScriptStruct TresGame.TresLgRxReactionData
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresLgRxReactionData final
{
public:
	struct FVector                                M_Location;                                        // 0x0000(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_Rotation;                                        // 0x000C(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTresLgRxReactionMarkerData>    M_MarkerData;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLgRxReactionData) == 0x112E9AF0, "Wrong alignment on FTresLgRxReactionData");
static_assert(sizeof(FTresLgRxReactionData) == 0x112E9AF0, "Wrong size on FTresLgRxReactionData");
static_assert(offsetof(FTresLgRxReactionData, M_Location) == 0x000000, "Member 'FTresLgRxReactionData::M_Location' has a wrong offset!");
static_assert(offsetof(FTresLgRxReactionData, M_Rotation) == 0x00000C, "Member 'FTresLgRxReactionData::M_Rotation' has a wrong offset!");
static_assert(offsetof(FTresLgRxReactionData, M_MarkerData) == 0x000018, "Member 'FTresLgRxReactionData::M_MarkerData' has a wrong offset!");

// ScriptStruct TresGame.TresGummiShipPartsStruct
// 0x114E2730 (0x114E2730 - 0x0000)
struct alignas(0x114E2730) FTresGummiShipPartsStruct final
{
public:
	int8                                          M_indexX;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_indexY;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_indexZ;                                          // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGummiType                                M_gummiKind;                                       // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_gummiID;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_sizeX;                                           // 0x0005(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_sizeY;                                           // 0x0006(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_sizeZ;                                           // 0x0007(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_rotX;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_rotY;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_rotZ;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_pointX;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_pointY;                                          // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_pointZ;                                          // 0x0016(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_materialID;                                      // 0x0017(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_patternID;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_baseColor;                                       // 0x0019(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_materilColor;                                    // 0x001A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_flipX;                                           // 0x001B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_flipY;                                           // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_flipZ;                                           // 0x001D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Offset;                                          // 0x001E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGummiShipPartsStruct) == 0x114E2730, "Wrong alignment on FTresGummiShipPartsStruct");
static_assert(sizeof(FTresGummiShipPartsStruct) == 0x114E2730, "Wrong size on FTresGummiShipPartsStruct");
static_assert(offsetof(FTresGummiShipPartsStruct, M_indexX) == 0x000000, "Member 'FTresGummiShipPartsStruct::M_indexX' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_indexY) == 0x000001, "Member 'FTresGummiShipPartsStruct::M_indexY' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_indexZ) == 0x000002, "Member 'FTresGummiShipPartsStruct::M_indexZ' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_gummiKind) == 0x000003, "Member 'FTresGummiShipPartsStruct::M_gummiKind' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_gummiID) == 0x000004, "Member 'FTresGummiShipPartsStruct::M_gummiID' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_sizeX) == 0x000005, "Member 'FTresGummiShipPartsStruct::M_sizeX' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_sizeY) == 0x000006, "Member 'FTresGummiShipPartsStruct::M_sizeY' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_sizeZ) == 0x000007, "Member 'FTresGummiShipPartsStruct::M_sizeZ' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_rotX) == 0x000008, "Member 'FTresGummiShipPartsStruct::M_rotX' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_rotY) == 0x00000C, "Member 'FTresGummiShipPartsStruct::M_rotY' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_rotZ) == 0x000010, "Member 'FTresGummiShipPartsStruct::M_rotZ' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_pointX) == 0x000014, "Member 'FTresGummiShipPartsStruct::M_pointX' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_pointY) == 0x000015, "Member 'FTresGummiShipPartsStruct::M_pointY' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_pointZ) == 0x000016, "Member 'FTresGummiShipPartsStruct::M_pointZ' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_materialID) == 0x000017, "Member 'FTresGummiShipPartsStruct::M_materialID' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_patternID) == 0x000018, "Member 'FTresGummiShipPartsStruct::M_patternID' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_baseColor) == 0x000019, "Member 'FTresGummiShipPartsStruct::M_baseColor' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_materilColor) == 0x00001A, "Member 'FTresGummiShipPartsStruct::M_materilColor' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_flipX) == 0x00001B, "Member 'FTresGummiShipPartsStruct::M_flipX' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_flipY) == 0x00001C, "Member 'FTresGummiShipPartsStruct::M_flipY' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_flipZ) == 0x00001D, "Member 'FTresGummiShipPartsStruct::M_flipZ' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPartsStruct, M_Offset) == 0x00001E, "Member 'FTresGummiShipPartsStruct::M_Offset' has a wrong offset!");

// ScriptStruct TresGame.Tres_e_bx903Rush_Trigger
// 0x114B3920 (0x114B3920 - 0x0000)
struct alignas(0x114B3920) FTres_e_bx903Rush_Trigger final
{
public:
	float                                         M_triggerTimeStamp;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_attachBoneName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTres_e_bx903Rush_Trigger) == 0x114B3920, "Wrong alignment on FTres_e_bx903Rush_Trigger");
static_assert(sizeof(FTres_e_bx903Rush_Trigger) == 0x114B3920, "Wrong size on FTres_e_bx903Rush_Trigger");
static_assert(offsetof(FTres_e_bx903Rush_Trigger, M_triggerTimeStamp) == 0x000000, "Member 'FTres_e_bx903Rush_Trigger::M_triggerTimeStamp' has a wrong offset!");
static_assert(offsetof(FTres_e_bx903Rush_Trigger, M_attachBoneName) == 0x000008, "Member 'FTres_e_bx903Rush_Trigger::M_attachBoneName' has a wrong offset!");

// ScriptStruct TresGame.TresDecoPartsUnit
// 0x114E9E20 (0x114E9E20 - 0x0000)
struct alignas(0x114E9E20) FTresDecoPartsUnit final
{
public:
	class FName                                   M_attachSocketName;                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTresDecoPartsComponent>    M_Asset;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_ColorChangeMaterialName;                         // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_ColorChangePointTexture;                         // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_ChangePatternColor1;                             // 0x0020(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_ChangePatternColor2;                             // 0x0030(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_GradePow;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_3Color_Top;                                      // 0x0044(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_3ColorModeMode;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_halfUVTil_VMove;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_halfUVTilingMode;                                // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LeatherMode;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MeshTypeModeChange;                              // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MoveMeshArea;                                    // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MoveNoMeshVisMaskArea;                           // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDecoPartsUnit) == 0x114E9E20, "Wrong alignment on FTresDecoPartsUnit");
static_assert(sizeof(FTresDecoPartsUnit) == 0x114E9E20, "Wrong size on FTresDecoPartsUnit");
static_assert(offsetof(FTresDecoPartsUnit, M_attachSocketName) == 0x000000, "Member 'FTresDecoPartsUnit::M_attachSocketName' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_Asset) == 0x000008, "Member 'FTresDecoPartsUnit::M_Asset' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_ColorChangeMaterialName) == 0x000010, "Member 'FTresDecoPartsUnit::M_ColorChangeMaterialName' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_ColorChangePointTexture) == 0x000018, "Member 'FTresDecoPartsUnit::M_ColorChangePointTexture' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_ChangePatternColor1) == 0x000020, "Member 'FTresDecoPartsUnit::M_ChangePatternColor1' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_ChangePatternColor2) == 0x000030, "Member 'FTresDecoPartsUnit::M_ChangePatternColor2' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_GradePow) == 0x000040, "Member 'FTresDecoPartsUnit::M_GradePow' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_3Color_Top) == 0x000044, "Member 'FTresDecoPartsUnit::M_3Color_Top' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_3ColorModeMode) == 0x000054, "Member 'FTresDecoPartsUnit::M_3ColorModeMode' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_halfUVTil_VMove) == 0x000058, "Member 'FTresDecoPartsUnit::M_halfUVTil_VMove' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_halfUVTilingMode) == 0x00005C, "Member 'FTresDecoPartsUnit::M_halfUVTilingMode' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_LeatherMode) == 0x000060, "Member 'FTresDecoPartsUnit::M_LeatherMode' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_MeshTypeModeChange) == 0x000064, "Member 'FTresDecoPartsUnit::M_MeshTypeModeChange' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_MoveMeshArea) == 0x000068, "Member 'FTresDecoPartsUnit::M_MoveMeshArea' has a wrong offset!");
static_assert(offsetof(FTresDecoPartsUnit, M_MoveNoMeshVisMaskArea) == 0x00006C, "Member 'FTresDecoPartsUnit::M_MoveNoMeshVisMaskArea' has a wrong offset!");

// ScriptStruct TresGame.TresDarkHomingProjectileNum_e_dw407
// 0x114B4CC0 (0x114B4CC0 - 0x0000)
struct alignas(0x114B4CC0) FTresDarkHomingProjectileNum_e_dw407 final
{
public:
	uint32                                        M_ForwardProjectileNum;                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_BackwardProjectileNum;                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDarkHomingProjectileNum_e_dw407) == 0x114B4CC0, "Wrong alignment on FTresDarkHomingProjectileNum_e_dw407");
static_assert(sizeof(FTresDarkHomingProjectileNum_e_dw407) == 0x114B4CC0, "Wrong size on FTresDarkHomingProjectileNum_e_dw407");
static_assert(offsetof(FTresDarkHomingProjectileNum_e_dw407, M_ForwardProjectileNum) == 0x000000, "Member 'FTresDarkHomingProjectileNum_e_dw407::M_ForwardProjectileNum' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingProjectileNum_e_dw407, M_BackwardProjectileNum) == 0x000004, "Member 'FTresDarkHomingProjectileNum_e_dw407::M_BackwardProjectileNum' has a wrong offset!");

// ScriptStruct TresGame.TresDarkHomingProjectileNumParams_e_dw407
// 0x0018 (0x0018 - 0x0000)
struct FTresDarkHomingProjectileNumParams_e_dw407 final
{
public:
	TArray<struct FTresDarkHomingProjectileNum_e_dw407> M_SpawnProjectileNumParams;                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         M_bIsUseIntervalGameLevelParam : 1;                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsUseSpeedGameLevelParam : 1;                   // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresDarkHomingProjectileNumParams_e_dw407) == 0x000008, "Wrong alignment on FTresDarkHomingProjectileNumParams_e_dw407");
static_assert(sizeof(FTresDarkHomingProjectileNumParams_e_dw407) == 0x000018, "Wrong size on FTresDarkHomingProjectileNumParams_e_dw407");
static_assert(offsetof(FTresDarkHomingProjectileNumParams_e_dw407, M_SpawnProjectileNumParams) == 0x000000, "Member 'FTresDarkHomingProjectileNumParams_e_dw407::M_SpawnProjectileNumParams' has a wrong offset!");

// ScriptStruct TresGame.TresDarkHomingAttackParam_e_dw407
// 0x114B3CD0 (0x114B3CD0 - 0x0000)
struct FTresDarkHomingAttackParam_e_dw407 final
{
public:
	float                                         M_TimeUntilSpawnProjectile;                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresDarkHomingProjectileNumParams_e_dw407> M_SpawnProjectileParams;                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         M_Pitch;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpawnProjectileInterval;                         // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_GameLevelMinSpawnProjectileInterval[0x4];        // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_GameLevelMaxSpawnProjectileInterval[0x4];        // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TimeUntilReStart;                                // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EnableBackwardParam;                             // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ProjectileSpeed;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_GameLevelMinProjectileSpeed[0x4];                // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_GameLevelMaxProjectileSpeed[0x4];                // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresDarkHomingProjectileParam_e_dw407 M_ForwardProjectileParams;                         // 0x006C(0x114B3CD0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresDarkHomingProjectileParam_e_dw407 M_BackwardProjectileParams;                        // 0x0090(0x114B3CD0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_HomingMaxAngle;                                  // 0x00B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDarkHomingAttackParam_e_dw407) == 0x114B3CD0, "Wrong alignment on FTresDarkHomingAttackParam_e_dw407");
static_assert(sizeof(FTresDarkHomingAttackParam_e_dw407) == 0x114B3CD0, "Wrong size on FTresDarkHomingAttackParam_e_dw407");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_TimeUntilSpawnProjectile) == 0x000000, "Member 'FTresDarkHomingAttackParam_e_dw407::M_TimeUntilSpawnProjectile' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_SpawnProjectileParams) == 0x000008, "Member 'FTresDarkHomingAttackParam_e_dw407::M_SpawnProjectileParams' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_Pitch) == 0x000018, "Member 'FTresDarkHomingAttackParam_e_dw407::M_Pitch' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_SpawnProjectileInterval) == 0x00001C, "Member 'FTresDarkHomingAttackParam_e_dw407::M_SpawnProjectileInterval' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_GameLevelMinSpawnProjectileInterval) == 0x000020, "Member 'FTresDarkHomingAttackParam_e_dw407::M_GameLevelMinSpawnProjectileInterval' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_GameLevelMaxSpawnProjectileInterval) == 0x000030, "Member 'FTresDarkHomingAttackParam_e_dw407::M_GameLevelMaxSpawnProjectileInterval' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_TimeUntilReStart) == 0x000040, "Member 'FTresDarkHomingAttackParam_e_dw407::M_TimeUntilReStart' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_EnableBackwardParam) == 0x000044, "Member 'FTresDarkHomingAttackParam_e_dw407::M_EnableBackwardParam' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_ProjectileSpeed) == 0x000048, "Member 'FTresDarkHomingAttackParam_e_dw407::M_ProjectileSpeed' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_GameLevelMinProjectileSpeed) == 0x00004C, "Member 'FTresDarkHomingAttackParam_e_dw407::M_GameLevelMinProjectileSpeed' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_GameLevelMaxProjectileSpeed) == 0x00005C, "Member 'FTresDarkHomingAttackParam_e_dw407::M_GameLevelMaxProjectileSpeed' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_ForwardProjectileParams) == 0x00006C, "Member 'FTresDarkHomingAttackParam_e_dw407::M_ForwardProjectileParams' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_BackwardProjectileParams) == 0x000090, "Member 'FTresDarkHomingAttackParam_e_dw407::M_BackwardProjectileParams' has a wrong offset!");
static_assert(offsetof(FTresDarkHomingAttackParam_e_dw407, M_HomingMaxAngle) == 0x0000B4, "Member 'FTresDarkHomingAttackParam_e_dw407::M_HomingMaxAngle' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_EncloseFlareEntryParam
// 0x49DE (0x49DE - 0x0000)
struct alignas(0x49DE) FTresEnemy_e_ex773_EncloseFlareEntryParam final
{
public:
	uint8                                         Pad_0[0x34];                                       // 0x0000(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_EncloseFlareEntryParam) == 0x0049DE, "Wrong alignment on FTresEnemy_e_ex773_EncloseFlareEntryParam");
static_assert(sizeof(FTresEnemy_e_ex773_EncloseFlareEntryParam) == 0x0049DE, "Wrong size on FTresEnemy_e_ex773_EncloseFlareEntryParam");

// ScriptStruct TresGame.TresE_EX363DarkRushCircleParam
// 0x0024 (0x0024 - 0x0000)
struct FTresE_EX363DarkRushCircleParam final
{
public:
	float                                         M_IntervalRange;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_InitAngle;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_IntervalAngle;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_IntervalTime;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EndRange;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MoveSpeed;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsMoveReverse;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_patternID;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_TargetCenter;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_EX363DarkRushCircleParam) == 0x000004, "Wrong alignment on FTresE_EX363DarkRushCircleParam");
static_assert(sizeof(FTresE_EX363DarkRushCircleParam) == 0x000024, "Wrong size on FTresE_EX363DarkRushCircleParam");
static_assert(offsetof(FTresE_EX363DarkRushCircleParam, M_IntervalRange) == 0x000000, "Member 'FTresE_EX363DarkRushCircleParam::M_IntervalRange' has a wrong offset!");
static_assert(offsetof(FTresE_EX363DarkRushCircleParam, M_InitAngle) == 0x000004, "Member 'FTresE_EX363DarkRushCircleParam::M_InitAngle' has a wrong offset!");
static_assert(offsetof(FTresE_EX363DarkRushCircleParam, M_IntervalAngle) == 0x000008, "Member 'FTresE_EX363DarkRushCircleParam::M_IntervalAngle' has a wrong offset!");
static_assert(offsetof(FTresE_EX363DarkRushCircleParam, M_IntervalTime) == 0x00000C, "Member 'FTresE_EX363DarkRushCircleParam::M_IntervalTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX363DarkRushCircleParam, M_EndRange) == 0x000010, "Member 'FTresE_EX363DarkRushCircleParam::M_EndRange' has a wrong offset!");
static_assert(offsetof(FTresE_EX363DarkRushCircleParam, M_MoveSpeed) == 0x000014, "Member 'FTresE_EX363DarkRushCircleParam::M_MoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresE_EX363DarkRushCircleParam, M_IsMoveReverse) == 0x000018, "Member 'FTresE_EX363DarkRushCircleParam::M_IsMoveReverse' has a wrong offset!");
static_assert(offsetof(FTresE_EX363DarkRushCircleParam, M_patternID) == 0x00001C, "Member 'FTresE_EX363DarkRushCircleParam::M_patternID' has a wrong offset!");
static_assert(offsetof(FTresE_EX363DarkRushCircleParam, M_TargetCenter) == 0x000020, "Member 'FTresE_EX363DarkRushCircleParam::M_TargetCenter' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipAttackDataTable
// 0x10EE00 (0x11521E80 - 0x11413080)
struct alignas(0x11521E80) FTresGumiShipAttackDataTable final : public FTableRowBase
{
public:
	float                                         M_fAttackPoint;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipAttackElementType                M_eElementType;                                    // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipAttackSubElemntType              M_eSubElementType;                                 // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipReactionType                     M_eReactionType;                                   // 0x000E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipBadStateType                     M_eBadStateType;                                   // 0x000F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTimeOfBadStateEffective;                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPercentOfBadState;                              // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_HitEffectDataName;                               // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipAttackDataTable) == 0x11521E80, "Wrong alignment on FTresGumiShipAttackDataTable");
static_assert(sizeof(FTresGumiShipAttackDataTable) == 0x11521E80, "Wrong size on FTresGumiShipAttackDataTable");
static_assert(offsetof(FTresGumiShipAttackDataTable, M_fAttackPoint) == 0x000008, "Member 'FTresGumiShipAttackDataTable::M_fAttackPoint' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAttackDataTable, M_eElementType) == 0x00000C, "Member 'FTresGumiShipAttackDataTable::M_eElementType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAttackDataTable, M_eSubElementType) == 0x00000D, "Member 'FTresGumiShipAttackDataTable::M_eSubElementType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAttackDataTable, M_eReactionType) == 0x00000E, "Member 'FTresGumiShipAttackDataTable::M_eReactionType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAttackDataTable, M_eBadStateType) == 0x00000F, "Member 'FTresGumiShipAttackDataTable::M_eBadStateType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAttackDataTable, M_fTimeOfBadStateEffective) == 0x000010, "Member 'FTresGumiShipAttackDataTable::M_fTimeOfBadStateEffective' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAttackDataTable, M_fPercentOfBadState) == 0x000014, "Member 'FTresGumiShipAttackDataTable::M_fPercentOfBadState' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAttackDataTable, M_HitEffectDataName) == 0x000018, "Member 'FTresGumiShipAttackDataTable::M_HitEffectDataName' has a wrong offset!");

// ScriptStruct TresGame.e_ex064_WallParam
// 0x114F8810 (0x114F8810 - 0x0000)
struct alignas(0x114F8810) FE_ex064_WallParam final
{
public:
	class FName                                   M_ChangeMatName0;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ChangeMatValue0;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_AnimNameDamage;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AnimNameAppear;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AnimNameDisappear;                               // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_AnimIdleRandomRange;                             // 0x0028(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_AnimAppearRandomWait;                            // 0x0030(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_AnimDisappearRandomWait;                         // 0x0038(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_ForceDeathAtkName;                               // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_BodyHP;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FE_ex064_WallParam) == 0x114F8810, "Wrong alignment on FE_ex064_WallParam");
static_assert(sizeof(FE_ex064_WallParam) == 0x114F8810, "Wrong size on FE_ex064_WallParam");
static_assert(offsetof(FE_ex064_WallParam, M_ChangeMatName0) == 0x000000, "Member 'FE_ex064_WallParam::M_ChangeMatName0' has a wrong offset!");
static_assert(offsetof(FE_ex064_WallParam, M_ChangeMatValue0) == 0x000008, "Member 'FE_ex064_WallParam::M_ChangeMatValue0' has a wrong offset!");
static_assert(offsetof(FE_ex064_WallParam, M_AnimNameDamage) == 0x000010, "Member 'FE_ex064_WallParam::M_AnimNameDamage' has a wrong offset!");
static_assert(offsetof(FE_ex064_WallParam, M_AnimNameAppear) == 0x000018, "Member 'FE_ex064_WallParam::M_AnimNameAppear' has a wrong offset!");
static_assert(offsetof(FE_ex064_WallParam, M_AnimNameDisappear) == 0x000020, "Member 'FE_ex064_WallParam::M_AnimNameDisappear' has a wrong offset!");
static_assert(offsetof(FE_ex064_WallParam, M_AnimIdleRandomRange) == 0x000028, "Member 'FE_ex064_WallParam::M_AnimIdleRandomRange' has a wrong offset!");
static_assert(offsetof(FE_ex064_WallParam, M_AnimAppearRandomWait) == 0x000030, "Member 'FE_ex064_WallParam::M_AnimAppearRandomWait' has a wrong offset!");
static_assert(offsetof(FE_ex064_WallParam, M_AnimDisappearRandomWait) == 0x000038, "Member 'FE_ex064_WallParam::M_AnimDisappearRandomWait' has a wrong offset!");
static_assert(offsetof(FE_ex064_WallParam, M_ForceDeathAtkName) == 0x000040, "Member 'FE_ex064_WallParam::M_ForceDeathAtkName' has a wrong offset!");
static_assert(offsetof(FE_ex064_WallParam, M_BodyHP) == 0x000048, "Member 'FE_ex064_WallParam::M_BodyHP' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex361_ThunderInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresEnemy_e_ex361_ThunderInfo final
{
public:
	class UParticleSystemComponent*               M_ThunderEff;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex361_ThunderInfo) == 0x000008, "Wrong alignment on FTresEnemy_e_ex361_ThunderInfo");
static_assert(sizeof(FTresEnemy_e_ex361_ThunderInfo) == 0x000018, "Wrong size on FTresEnemy_e_ex361_ThunderInfo");
static_assert(offsetof(FTresEnemy_e_ex361_ThunderInfo, M_ThunderEff) == 0x000000, "Member 'FTresEnemy_e_ex361_ThunderInfo::M_ThunderEff' has a wrong offset!");

// ScriptStruct TresGame.TresMotion_e_ex011_WheeliePress
// 0x0018 (0x0018 - 0x0000)
struct FTresMotion_e_ex011_WheeliePress final
{
public:
	class UAnimSequenceBase*                      StartAnimData;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      LoopAnimData;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      EndAnimData;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMotion_e_ex011_WheeliePress) == 0x000008, "Wrong alignment on FTresMotion_e_ex011_WheeliePress");
static_assert(sizeof(FTresMotion_e_ex011_WheeliePress) == 0x000018, "Wrong size on FTresMotion_e_ex011_WheeliePress");
static_assert(offsetof(FTresMotion_e_ex011_WheeliePress, StartAnimData) == 0x000000, "Member 'FTresMotion_e_ex011_WheeliePress::StartAnimData' has a wrong offset!");
static_assert(offsetof(FTresMotion_e_ex011_WheeliePress, LoopAnimData) == 0x000008, "Member 'FTresMotion_e_ex011_WheeliePress::LoopAnimData' has a wrong offset!");
static_assert(offsetof(FTresMotion_e_ex011_WheeliePress, EndAnimData) == 0x000010, "Member 'FTresMotion_e_ex011_WheeliePress::EndAnimData' has a wrong offset!");

// ScriptStruct TresGame.TresLSIScoreEntryScores
// 0x0010 (0x0010 - 0x0000)
struct FTresLSIScoreEntryScores final
{
public:
	int32                                         Scores;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLSIScoreEntryScores) == 0x000004, "Wrong alignment on FTresLSIScoreEntryScores");
static_assert(sizeof(FTresLSIScoreEntryScores) == 0x000010, "Wrong size on FTresLSIScoreEntryScores");
static_assert(offsetof(FTresLSIScoreEntryScores, Scores) == 0x000000, "Member 'FTresLSIScoreEntryScores::Scores' has a wrong offset!");

// ScriptStruct TresGame.RockShotProjInfo_e_ex059
// 0x114B51B0 (0x114B51B0 - 0x0000)
struct alignas(0x114B51B0) FRockShotProjInfo_e_ex059 final
{
public:
	TSubclassOf<class ATresProjectileBase>        M_Projectile;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxShotPitch;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMinShotPitch;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockShotProjInfo_e_ex059) == 0x114B51B0, "Wrong alignment on FRockShotProjInfo_e_ex059");
static_assert(sizeof(FRockShotProjInfo_e_ex059) == 0x114B51B0, "Wrong size on FRockShotProjInfo_e_ex059");
static_assert(offsetof(FRockShotProjInfo_e_ex059, M_Projectile) == 0x000000, "Member 'FRockShotProjInfo_e_ex059::M_Projectile' has a wrong offset!");
static_assert(offsetof(FRockShotProjInfo_e_ex059, M_fMaxShotPitch) == 0x000008, "Member 'FRockShotProjInfo_e_ex059::M_fMaxShotPitch' has a wrong offset!");
static_assert(offsetof(FRockShotProjInfo_e_ex059, M_fMinShotPitch) == 0x00000C, "Member 'FRockShotProjInfo_e_ex059::M_fMinShotPitch' has a wrong offset!");

// ScriptStruct TresGame.TresFollowParams_e_ex203
// 0x114B5420 (0x114B5420 - 0x0000)
struct alignas(0x114B5420) FTresFollowParams_e_ex203 final
{
public:
	float                                         FollowSpeed;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnSpeed;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDisableAttenuation : 1;                           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableTurnAngleCheck : 1;                        // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLessTurnSpeed : 1;                          // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxRate;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRate;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFollowParams_e_ex203) == 0x114B5420, "Wrong alignment on FTresFollowParams_e_ex203");
static_assert(sizeof(FTresFollowParams_e_ex203) == 0x114B5420, "Wrong size on FTresFollowParams_e_ex203");
static_assert(offsetof(FTresFollowParams_e_ex203, FollowSpeed) == 0x000000, "Member 'FTresFollowParams_e_ex203::FollowSpeed' has a wrong offset!");
static_assert(offsetof(FTresFollowParams_e_ex203, TurnSpeed) == 0x000004, "Member 'FTresFollowParams_e_ex203::TurnSpeed' has a wrong offset!");
static_assert(offsetof(FTresFollowParams_e_ex203, MaxRate) == 0x00000C, "Member 'FTresFollowParams_e_ex203::MaxRate' has a wrong offset!");
static_assert(offsetof(FTresFollowParams_e_ex203, MinRate) == 0x000010, "Member 'FTresFollowParams_e_ex203::MinRate' has a wrong offset!");

// ScriptStruct TresGame.TresAttackParam_e_ex322a
// 0x114B58F0 (0x114B58F0 - 0x0000)
struct alignas(0x114B58F0) FTresAttackParam_e_ex322a final
{
public:
	class UAnimSequenceBase*                      AnimData;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionStartDelayTime;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedAutoCorrectionRate;                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearDistance;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearMaxAngle;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandAppearOffsetHeight;                            // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirAppearOffsetHeight;                             // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearHomingMaxAngle;                              // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAngle;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableGravity : 1;                                // 0x0034(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsAerial : 1;                                     // 0x0034(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearLocationCorrectionRate;                      // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAttackParam_e_ex322a) == 0x114B58F0, "Wrong alignment on FTresAttackParam_e_ex322a");
static_assert(sizeof(FTresAttackParam_e_ex322a) == 0x114B58F0, "Wrong size on FTresAttackParam_e_ex322a");
static_assert(offsetof(FTresAttackParam_e_ex322a, AnimData) == 0x000000, "Member 'FTresAttackParam_e_ex322a::AnimData' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, ActionStartDelayTime) == 0x000008, "Member 'FTresAttackParam_e_ex322a::ActionStartDelayTime' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, SpeedAutoCorrectionRate) == 0x00000C, "Member 'FTresAttackParam_e_ex322a::SpeedAutoCorrectionRate' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, AppearDistance) == 0x000010, "Member 'FTresAttackParam_e_ex322a::AppearDistance' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, AppearMaxAngle) == 0x000014, "Member 'FTresAttackParam_e_ex322a::AppearMaxAngle' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, LandAppearOffsetHeight) == 0x000018, "Member 'FTresAttackParam_e_ex322a::LandAppearOffsetHeight' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, AirAppearOffsetHeight) == 0x00001C, "Member 'FTresAttackParam_e_ex322a::AirAppearOffsetHeight' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, AppearHomingMaxAngle) == 0x000020, "Member 'FTresAttackParam_e_ex322a::AppearHomingMaxAngle' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, HomingAngle) == 0x000024, "Member 'FTresAttackParam_e_ex322a::HomingAngle' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, Acceleration) == 0x000028, "Member 'FTresAttackParam_e_ex322a::Acceleration' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, Speed) == 0x00002C, "Member 'FTresAttackParam_e_ex322a::Speed' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, Deceleration) == 0x000030, "Member 'FTresAttackParam_e_ex322a::Deceleration' has a wrong offset!");
static_assert(offsetof(FTresAttackParam_e_ex322a, AppearLocationCorrectionRate) == 0x000038, "Member 'FTresAttackParam_e_ex322a::AppearLocationCorrectionRate' has a wrong offset!");

// ScriptStruct TresGame.TresCharAnimInstanceProxy
// 0x0362 (0x115DA - 0x11278)
struct alignas(0x115DA) FTresCharAnimInstanceProxy final : public FTresAnimInstanceProxy
{
};
static_assert(alignof(FTresCharAnimInstanceProxy) == 0x0115DA, "Wrong alignment on FTresCharAnimInstanceProxy");
static_assert(sizeof(FTresCharAnimInstanceProxy) == 0x0115DA, "Wrong size on FTresCharAnimInstanceProxy");

// ScriptStruct TresGame.TresPhotoHologramMapSetDef
// 0x0000 (0x11413080 - 0x11413080)
struct FTresPhotoHologramMapSetDef final : public FTableRowBase
{
public:
	TArray<class FName>                           ValidMapList;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPhotoHologramMapSetDef) == 0x11413080, "Wrong alignment on FTresPhotoHologramMapSetDef");
static_assert(sizeof(FTresPhotoHologramMapSetDef) == 0x11413080, "Wrong size on FTresPhotoHologramMapSetDef");
static_assert(offsetof(FTresPhotoHologramMapSetDef, ValidMapList) == 0x000008, "Member 'FTresPhotoHologramMapSetDef::ValidMapList' has a wrong offset!");

// ScriptStruct TresGame.TresGummiShipHeader
// 0x1152CDA0 (0x1152CDA0 - 0x0000)
struct alignas(0x1152CDA0) FTresGummiShipHeader final
{
public:
	class FName                                   M_VerName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_Name;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefGumiShipBP                        M_ItemID;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x1];                                       // 0x0019(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        M_nTotalBaseGummiNum;                              // 0x001A(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        M_nTotalDecoGummiNum;                              // 0x001C(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGummiShipHeader) == 0x1152CDA0, "Wrong alignment on FTresGummiShipHeader");
static_assert(sizeof(FTresGummiShipHeader) == 0x1152CDA0, "Wrong size on FTresGummiShipHeader");
static_assert(offsetof(FTresGummiShipHeader, M_VerName) == 0x000000, "Member 'FTresGummiShipHeader::M_VerName' has a wrong offset!");
static_assert(offsetof(FTresGummiShipHeader, M_Name) == 0x000008, "Member 'FTresGummiShipHeader::M_Name' has a wrong offset!");
static_assert(offsetof(FTresGummiShipHeader, M_ItemID) == 0x000018, "Member 'FTresGummiShipHeader::M_ItemID' has a wrong offset!");
static_assert(offsetof(FTresGummiShipHeader, M_nTotalBaseGummiNum) == 0x00001A, "Member 'FTresGummiShipHeader::M_nTotalBaseGummiNum' has a wrong offset!");
static_assert(offsetof(FTresGummiShipHeader, M_nTotalDecoGummiNum) == 0x00001C, "Member 'FTresGummiShipHeader::M_nTotalDecoGummiNum' has a wrong offset!");

// ScriptStruct TresGame.EX355_RushTractionInfo
// 0x114B7E50 (0x114B7E50 - 0x0000)
struct alignas(0x114B7E50) FEX355_RushTractionInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VTractionOffset;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxTractionDistance;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_RushTractionInfo) == 0x114B7E50, "Wrong alignment on FEX355_RushTractionInfo");
static_assert(sizeof(FEX355_RushTractionInfo) == 0x114B7E50, "Wrong size on FEX355_RushTractionInfo");
static_assert(offsetof(FEX355_RushTractionInfo, INotifyID) == 0x000000, "Member 'FEX355_RushTractionInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX355_RushTractionInfo, Comment) == 0x000008, "Member 'FEX355_RushTractionInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX355_RushTractionInfo, VTractionOffset) == 0x000018, "Member 'FEX355_RushTractionInfo::VTractionOffset' has a wrong offset!");
static_assert(offsetof(FEX355_RushTractionInfo, FMaxTractionDistance) == 0x000024, "Member 'FEX355_RushTractionInfo::FMaxTractionDistance' has a wrong offset!");

// ScriptStruct TresGame.TresCarGenerateData
// 0x0018 (0x0018 - 0x0000)
struct FTresCarGenerateData final
{
public:
	class UTresCarBodyWithColorDataAsset*         CarBodyAsset;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTresCarDriverDataAsset*>        CarDriverAsset;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCarGenerateData) == 0x000008, "Wrong alignment on FTresCarGenerateData");
static_assert(sizeof(FTresCarGenerateData) == 0x000018, "Wrong size on FTresCarGenerateData");
static_assert(offsetof(FTresCarGenerateData, CarBodyAsset) == 0x000000, "Member 'FTresCarGenerateData::CarBodyAsset' has a wrong offset!");
static_assert(offsetof(FTresCarGenerateData, CarDriverAsset) == 0x000008, "Member 'FTresCarGenerateData::CarDriverAsset' has a wrong offset!");

// ScriptStruct TresGame.TresE_EX781MarkerShotParam
// 0x001C (0x001C - 0x0000)
struct FTresE_EX781MarkerShotParam final
{
public:
	float                                         M_MarkerWaitTime;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShotStartTime;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ShotNum;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShotIntervalTime;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Offset;                                          // 0x0010(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_EX781MarkerShotParam) == 0x000004, "Wrong alignment on FTresE_EX781MarkerShotParam");
static_assert(sizeof(FTresE_EX781MarkerShotParam) == 0x00001C, "Wrong size on FTresE_EX781MarkerShotParam");
static_assert(offsetof(FTresE_EX781MarkerShotParam, M_MarkerWaitTime) == 0x000000, "Member 'FTresE_EX781MarkerShotParam::M_MarkerWaitTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX781MarkerShotParam, M_ShotStartTime) == 0x000004, "Member 'FTresE_EX781MarkerShotParam::M_ShotStartTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX781MarkerShotParam, M_ShotNum) == 0x000008, "Member 'FTresE_EX781MarkerShotParam::M_ShotNum' has a wrong offset!");
static_assert(offsetof(FTresE_EX781MarkerShotParam, M_ShotIntervalTime) == 0x00000C, "Member 'FTresE_EX781MarkerShotParam::M_ShotIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX781MarkerShotParam, M_Offset) == 0x000010, "Member 'FTresE_EX781MarkerShotParam::M_Offset' has a wrong offset!");

// ScriptStruct TresGame.TresHologramCharaWindParam
// 0x115574B0 (0x115574B0 - 0x0000)
struct alignas(0x115574B0) FTresHologramCharaWindParam final
{
public:
	TArray<class FString>                         M_Groups;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_EmissiveDirection               M_DirectionSpace;                                  // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_DirectionVec;                                    // 0x0014(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BaseStrength;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WaveAmplitude;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WavePeriod;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHologramCharaWindParam) == 0x115574B0, "Wrong alignment on FTresHologramCharaWindParam");
static_assert(sizeof(FTresHologramCharaWindParam) == 0x115574B0, "Wrong size on FTresHologramCharaWindParam");
static_assert(offsetof(FTresHologramCharaWindParam, M_Groups) == 0x000000, "Member 'FTresHologramCharaWindParam::M_Groups' has a wrong offset!");
static_assert(offsetof(FTresHologramCharaWindParam, M_DirectionSpace) == 0x000010, "Member 'FTresHologramCharaWindParam::M_DirectionSpace' has a wrong offset!");
static_assert(offsetof(FTresHologramCharaWindParam, M_DirectionVec) == 0x000014, "Member 'FTresHologramCharaWindParam::M_DirectionVec' has a wrong offset!");
static_assert(offsetof(FTresHologramCharaWindParam, M_BaseStrength) == 0x000020, "Member 'FTresHologramCharaWindParam::M_BaseStrength' has a wrong offset!");
static_assert(offsetof(FTresHologramCharaWindParam, M_WaveAmplitude) == 0x000024, "Member 'FTresHologramCharaWindParam::M_WaveAmplitude' has a wrong offset!");
static_assert(offsetof(FTresHologramCharaWindParam, M_WavePeriod) == 0x000028, "Member 'FTresHologramCharaWindParam::M_WavePeriod' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnPointElement
// 0x000C (0x000C - 0x0000)
struct FTresSpawnPointElement final
{
public:
	struct FVector                                M_Position;                                        // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSpawnPointElement) == 0x000001, "Wrong alignment on FTresSpawnPointElement");
static_assert(sizeof(FTresSpawnPointElement) == 0x00000C, "Wrong size on FTresSpawnPointElement");
static_assert(offsetof(FTresSpawnPointElement, M_Position) == 0x000000, "Member 'FTresSpawnPointElement::M_Position' has a wrong offset!");

// ScriptStruct TresGame.TresShotParam_e_ex701
// 0x114B8320 (0x114B8320 - 0x0000)
struct alignas(0x114B8320) FTresShotParam_e_ex701 final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingStartTime;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingTargetRange;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresShotParam_e_ex701) == 0x114B8320, "Wrong alignment on FTresShotParam_e_ex701");
static_assert(sizeof(FTresShotParam_e_ex701) == 0x114B8320, "Wrong size on FTresShotParam_e_ex701");
static_assert(offsetof(FTresShotParam_e_ex701, Num) == 0x000000, "Member 'FTresShotParam_e_ex701::Num' has a wrong offset!");
static_assert(offsetof(FTresShotParam_e_ex701, Angle) == 0x000004, "Member 'FTresShotParam_e_ex701::Angle' has a wrong offset!");
static_assert(offsetof(FTresShotParam_e_ex701, HomingStartTime) == 0x000008, "Member 'FTresShotParam_e_ex701::HomingStartTime' has a wrong offset!");
static_assert(offsetof(FTresShotParam_e_ex701, HomingTargetRange) == 0x00000C, "Member 'FTresShotParam_e_ex701::HomingTargetRange' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx773_AttractBT04Param
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx773_AttractBT04Param final
{
public:
	class ATresActor_e_ex773_Attract*             M_pAttract;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_pTarget;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx773_AttractBT04Param) == 0x000008, "Wrong alignment on FTresEnemyEx773_AttractBT04Param");
static_assert(sizeof(FTresEnemyEx773_AttractBT04Param) == 0x000010, "Wrong size on FTresEnemyEx773_AttractBT04Param");
static_assert(offsetof(FTresEnemyEx773_AttractBT04Param, M_pAttract) == 0x000000, "Member 'FTresEnemyEx773_AttractBT04Param::M_pAttract' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx773_AttractBT04Param, M_pTarget) == 0x000008, "Member 'FTresEnemyEx773_AttractBT04Param::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyBigDealMoveParam_e_ex356
// 0x11504CD0 (0x11504CD0 - 0x0000)
struct alignas(0x11504CD0) FTresEnemyBigDealMoveParam_e_ex356 final
{
public:
	float                                         CardRevolveAcceleration;                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CardRevolveDeceleration;                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CardRotationAcceleration;                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CardRotationSpeed;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CardRotationDeceleration;                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllCardRotationDelayTime;                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndCardRevolveAcceleration;                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndCardRevolveAccelerationTime;                    // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndCardRevolveMaxSpeed;                            // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CardLocationInterpTime;                            // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyBigDealMoveParam_e_ex356) == 0x11504CD0, "Wrong alignment on FTresEnemyBigDealMoveParam_e_ex356");
static_assert(sizeof(FTresEnemyBigDealMoveParam_e_ex356) == 0x11504CD0, "Wrong size on FTresEnemyBigDealMoveParam_e_ex356");
static_assert(offsetof(FTresEnemyBigDealMoveParam_e_ex356, CardRevolveAcceleration) == 0x000000, "Member 'FTresEnemyBigDealMoveParam_e_ex356::CardRevolveAcceleration' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealMoveParam_e_ex356, CardRevolveDeceleration) == 0x000004, "Member 'FTresEnemyBigDealMoveParam_e_ex356::CardRevolveDeceleration' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealMoveParam_e_ex356, CardRotationAcceleration) == 0x000008, "Member 'FTresEnemyBigDealMoveParam_e_ex356::CardRotationAcceleration' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealMoveParam_e_ex356, CardRotationSpeed) == 0x00000C, "Member 'FTresEnemyBigDealMoveParam_e_ex356::CardRotationSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealMoveParam_e_ex356, CardRotationDeceleration) == 0x000010, "Member 'FTresEnemyBigDealMoveParam_e_ex356::CardRotationDeceleration' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealMoveParam_e_ex356, AllCardRotationDelayTime) == 0x000014, "Member 'FTresEnemyBigDealMoveParam_e_ex356::AllCardRotationDelayTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealMoveParam_e_ex356, EndCardRevolveAcceleration) == 0x000018, "Member 'FTresEnemyBigDealMoveParam_e_ex356::EndCardRevolveAcceleration' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealMoveParam_e_ex356, EndCardRevolveAccelerationTime) == 0x00001C, "Member 'FTresEnemyBigDealMoveParam_e_ex356::EndCardRevolveAccelerationTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealMoveParam_e_ex356, EndCardRevolveMaxSpeed) == 0x000020, "Member 'FTresEnemyBigDealMoveParam_e_ex356::EndCardRevolveMaxSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealMoveParam_e_ex356, CardLocationInterpTime) == 0x000024, "Member 'FTresEnemyBigDealMoveParam_e_ex356::CardLocationInterpTime' has a wrong offset!");

// ScriptStruct TresGame.BX901_ComboInfo
// 0x114B89F0 (0x114B89F0 - 0x0000)
struct alignas(0x114B89F0) FBX901_ComboInfo final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fDesiredTargetDistance;                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxTractionDistance;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBX901_ComboInfo) == 0x114B89F0, "Wrong alignment on FBX901_ComboInfo");
static_assert(sizeof(FBX901_ComboInfo) == 0x114B89F0, "Wrong size on FBX901_ComboInfo");
static_assert(offsetof(FBX901_ComboInfo, M_fDesiredTargetDistance) == 0x000004, "Member 'FBX901_ComboInfo::M_fDesiredTargetDistance' has a wrong offset!");
static_assert(offsetof(FBX901_ComboInfo, M_fMaxTractionDistance) == 0x000008, "Member 'FBX901_ComboInfo::M_fMaxTractionDistance' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_dw401_DevilTornadoParam
// 0x114B8BC0 (0x114B8BC0 - 0x0000)
struct alignas(0x114B8BC0) FTresEnemy_e_dw401_DevilTornadoParam final
{
public:
	float                                         M_pro_InitMoveSpped;                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_pro_MaxMoveSpped;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_pro_AddMoveSpped;                                // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_pro_TurnSpped;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_pro_RushTime;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_pro_SubMoveSpped;                                // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_pro_NextRushTime;                                // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_dw401_DevilTornadoParam) == 0x114B8BC0, "Wrong alignment on FTresEnemy_e_dw401_DevilTornadoParam");
static_assert(sizeof(FTresEnemy_e_dw401_DevilTornadoParam) == 0x114B8BC0, "Wrong size on FTresEnemy_e_dw401_DevilTornadoParam");
static_assert(offsetof(FTresEnemy_e_dw401_DevilTornadoParam, M_pro_InitMoveSpped) == 0x000000, "Member 'FTresEnemy_e_dw401_DevilTornadoParam::M_pro_InitMoveSpped' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_DevilTornadoParam, M_pro_MaxMoveSpped) == 0x000004, "Member 'FTresEnemy_e_dw401_DevilTornadoParam::M_pro_MaxMoveSpped' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_DevilTornadoParam, M_pro_AddMoveSpped) == 0x000008, "Member 'FTresEnemy_e_dw401_DevilTornadoParam::M_pro_AddMoveSpped' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_DevilTornadoParam, M_pro_TurnSpped) == 0x00000C, "Member 'FTresEnemy_e_dw401_DevilTornadoParam::M_pro_TurnSpped' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_DevilTornadoParam, M_pro_RushTime) == 0x000010, "Member 'FTresEnemy_e_dw401_DevilTornadoParam::M_pro_RushTime' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_DevilTornadoParam, M_pro_SubMoveSpped) == 0x000014, "Member 'FTresEnemy_e_dw401_DevilTornadoParam::M_pro_SubMoveSpped' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_DevilTornadoParam, M_pro_NextRushTime) == 0x000018, "Member 'FTresEnemy_e_dw401_DevilTornadoParam::M_pro_NextRushTime' has a wrong offset!");

// ScriptStruct TresGame.ex064WallPartsLayoutData
// 0x0048 (0x0048 - 0x0000)
struct FEx064WallPartsLayoutData final
{
public:
	int32                                         M_SelectWeight;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_RandLocationRange;                               // 0x0004(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AnimIdle0;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FE_ex064_AnimParam                     M_AnimIdleOptional1;                               // 0x0018(0x112F08B0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FE_ex064_AnimParam                     M_AnimIdleOptional2;                               // 0x0028(0x112F08B0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 M_SpawnList;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEx064WallPartsLayoutData) == 0x000008, "Wrong alignment on FEx064WallPartsLayoutData");
static_assert(sizeof(FEx064WallPartsLayoutData) == 0x000048, "Wrong size on FEx064WallPartsLayoutData");
static_assert(offsetof(FEx064WallPartsLayoutData, M_SelectWeight) == 0x000000, "Member 'FEx064WallPartsLayoutData::M_SelectWeight' has a wrong offset!");
static_assert(offsetof(FEx064WallPartsLayoutData, M_RandLocationRange) == 0x000004, "Member 'FEx064WallPartsLayoutData::M_RandLocationRange' has a wrong offset!");
static_assert(offsetof(FEx064WallPartsLayoutData, M_AnimIdle0) == 0x000010, "Member 'FEx064WallPartsLayoutData::M_AnimIdle0' has a wrong offset!");
static_assert(offsetof(FEx064WallPartsLayoutData, M_AnimIdleOptional1) == 0x000018, "Member 'FEx064WallPartsLayoutData::M_AnimIdleOptional1' has a wrong offset!");
static_assert(offsetof(FEx064WallPartsLayoutData, M_AnimIdleOptional2) == 0x000028, "Member 'FEx064WallPartsLayoutData::M_AnimIdleOptional2' has a wrong offset!");
static_assert(offsetof(FEx064WallPartsLayoutData, M_SpawnList) == 0x000038, "Member 'FEx064WallPartsLayoutData::M_SpawnList' has a wrong offset!");

// ScriptStruct TresGame.ex064WallPartsParameter
// 0x0030 (0x0030 - 0x0000)
struct FEx064WallPartsParameter final
{
public:
	int32                                         M_NumWallParts;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_BaseRelativeLocation;                            // 0x0004(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RandYawRange;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BeginSpawnHPRate;                                // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATresEnemyPawn_e_ex064_Wall> M_SpawnClass;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEx064WallPartsLayoutData>      M_LayoutList;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEx064WallPartsParameter) == 0x000008, "Wrong alignment on FEx064WallPartsParameter");
static_assert(sizeof(FEx064WallPartsParameter) == 0x000030, "Wrong size on FEx064WallPartsParameter");
static_assert(offsetof(FEx064WallPartsParameter, M_NumWallParts) == 0x000000, "Member 'FEx064WallPartsParameter::M_NumWallParts' has a wrong offset!");
static_assert(offsetof(FEx064WallPartsParameter, M_BaseRelativeLocation) == 0x000004, "Member 'FEx064WallPartsParameter::M_BaseRelativeLocation' has a wrong offset!");
static_assert(offsetof(FEx064WallPartsParameter, M_RandYawRange) == 0x000010, "Member 'FEx064WallPartsParameter::M_RandYawRange' has a wrong offset!");
static_assert(offsetof(FEx064WallPartsParameter, M_BeginSpawnHPRate) == 0x000014, "Member 'FEx064WallPartsParameter::M_BeginSpawnHPRate' has a wrong offset!");
static_assert(offsetof(FEx064WallPartsParameter, M_SpawnClass) == 0x000018, "Member 'FEx064WallPartsParameter::M_SpawnClass' has a wrong offset!");
static_assert(offsetof(FEx064WallPartsParameter, M_LayoutList) == 0x000020, "Member 'FEx064WallPartsParameter::M_LayoutList' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx304ProjectileSpawnInfo
// 0x114B9840 (0x114B9840 - 0x0000)
struct alignas(0x114B9840) FTresEnemyEx304ProjectileSpawnInfo final
{
public:
	float                                         SpawnAngleYaw;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnAnglePitch;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx304ProjectileSpawnInfo) == 0x114B9840, "Wrong alignment on FTresEnemyEx304ProjectileSpawnInfo");
static_assert(sizeof(FTresEnemyEx304ProjectileSpawnInfo) == 0x114B9840, "Wrong size on FTresEnemyEx304ProjectileSpawnInfo");
static_assert(offsetof(FTresEnemyEx304ProjectileSpawnInfo, SpawnAngleYaw) == 0x000000, "Member 'FTresEnemyEx304ProjectileSpawnInfo::SpawnAngleYaw' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx304ProjectileSpawnInfo, SpawnAnglePitch) == 0x000004, "Member 'FTresEnemyEx304ProjectileSpawnInfo::SpawnAnglePitch' has a wrong offset!");

// ScriptStruct TresGame.TresCodeMenuCheatAchievementData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresCodeMenuCheatAchievementData final : public FTableRowBase
{
public:
	ETresDlcCheatAchievementID                    M_Code;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_NameId;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_DetailId;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                M_IconAsset;                                       // 0x0030(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    GameFlag;                                          // 0x0050(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	ETresWorldCode                                WorldCode;                                         // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCodeMenuCheatAchievementData) == 0x11413080, "Wrong alignment on FTresCodeMenuCheatAchievementData");
static_assert(sizeof(FTresCodeMenuCheatAchievementData) == 0x11413080, "Wrong size on FTresCodeMenuCheatAchievementData");
static_assert(offsetof(FTresCodeMenuCheatAchievementData, M_Code) == 0x000008, "Member 'FTresCodeMenuCheatAchievementData::M_Code' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuCheatAchievementData, M_NameId) == 0x000010, "Member 'FTresCodeMenuCheatAchievementData::M_NameId' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuCheatAchievementData, M_DetailId) == 0x000020, "Member 'FTresCodeMenuCheatAchievementData::M_DetailId' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuCheatAchievementData, M_IconAsset) == 0x000030, "Member 'FTresCodeMenuCheatAchievementData::M_IconAsset' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuCheatAchievementData, GameFlag) == 0x000050, "Member 'FTresCodeMenuCheatAchievementData::GameFlag' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuCheatAchievementData, WorldCode) == 0x000068, "Member 'FTresCodeMenuCheatAchievementData::WorldCode' has a wrong offset!");

// ScriptStruct TresGame.EX359_LaserInfoSet
// 0x0010 (0x0010 - 0x0000)
struct FEX359_LaserInfoSet final
{
public:
	TArray<struct FEX359_LaserInfo>               M_LaserInfoArray;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_LaserInfoSet) == 0x000008, "Wrong alignment on FEX359_LaserInfoSet");
static_assert(sizeof(FEX359_LaserInfoSet) == 0x000010, "Wrong size on FEX359_LaserInfoSet");
static_assert(offsetof(FEX359_LaserInfoSet, M_LaserInfoArray) == 0x000000, "Member 'FEX359_LaserInfoSet::M_LaserInfoArray' has a wrong offset!");

// ScriptStruct TresGame.TresWorldCodeLoadAssetName
// 0x0018 (0x0018 - 0x0000)
struct FTresWorldCodeLoadAssetName final
{
public:
	ETresWorldCode                                M_WorldCode;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStringAssetReference                  M_AssetName;                                       // 0x0008(0x0010)(Edit, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWorldCodeLoadAssetName) == 0x000001, "Wrong alignment on FTresWorldCodeLoadAssetName");
static_assert(sizeof(FTresWorldCodeLoadAssetName) == 0x000018, "Wrong size on FTresWorldCodeLoadAssetName");
static_assert(offsetof(FTresWorldCodeLoadAssetName, M_WorldCode) == 0x000000, "Member 'FTresWorldCodeLoadAssetName::M_WorldCode' has a wrong offset!");
static_assert(offsetof(FTresWorldCodeLoadAssetName, M_AssetName) == 0x000008, "Member 'FTresWorldCodeLoadAssetName::M_AssetName' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx351RootMotionScaleParam
// 0x114B9A10 (0x114B9A10 - 0x0000)
struct alignas(0x114B9A10) FTresEnemyEx351RootMotionScaleParam final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx351RootMotionScaleParam) == 0x114B9A10, "Wrong alignment on FTresEnemyEx351RootMotionScaleParam");
static_assert(sizeof(FTresEnemyEx351RootMotionScaleParam) == 0x114B9A10, "Wrong size on FTresEnemyEx351RootMotionScaleParam");
static_assert(offsetof(FTresEnemyEx351RootMotionScaleParam, Distance) == 0x000000, "Member 'FTresEnemyEx351RootMotionScaleParam::Distance' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351RootMotionScaleParam, RootMotionScale) == 0x000004, "Member 'FTresEnemyEx351RootMotionScaleParam::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleAutoIncreaseSpeedParam
// 0x11593500 (0x11593500 - 0x0000)
struct alignas(0x11593500) FTresWinniePuzzleAutoIncreaseSpeedParam final
{
public:
	int32                                         ColumnsNum;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleAutoIncreaseSpeedParam) == 0x11593500, "Wrong alignment on FTresWinniePuzzleAutoIncreaseSpeedParam");
static_assert(sizeof(FTresWinniePuzzleAutoIncreaseSpeedParam) == 0x11593500, "Wrong size on FTresWinniePuzzleAutoIncreaseSpeedParam");
static_assert(offsetof(FTresWinniePuzzleAutoIncreaseSpeedParam, ColumnsNum) == 0x000000, "Member 'FTresWinniePuzzleAutoIncreaseSpeedParam::ColumnsNum' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleAutoIncreaseSpeedParam, DecreaseSpeed) == 0x000004, "Member 'FTresWinniePuzzleAutoIncreaseSpeedParam::DecreaseSpeed' has a wrong offset!");

// ScriptStruct TresGame.EX355_SwingThrowExplodeInfo
// 0x0028 (0x0028 - 0x0000)
struct FEX355_SwingThrowExplodeInfo final
{
public:
	bool                                          bExplodeOnHeight;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FExplodeHeightOffset;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplodeOnHorizontalDistance;                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FExplodeHorizontalDistance;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplodeOnTime;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FExplodeTime;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FExplodeMinTime;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplodeMinTime;                                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FExplodeMinDistance;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplodeMinDistance;                               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_SwingThrowExplodeInfo) == 0x000004, "Wrong alignment on FEX355_SwingThrowExplodeInfo");
static_assert(sizeof(FEX355_SwingThrowExplodeInfo) == 0x000028, "Wrong size on FEX355_SwingThrowExplodeInfo");
static_assert(offsetof(FEX355_SwingThrowExplodeInfo, bExplodeOnHeight) == 0x000000, "Member 'FEX355_SwingThrowExplodeInfo::bExplodeOnHeight' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowExplodeInfo, FExplodeHeightOffset) == 0x000004, "Member 'FEX355_SwingThrowExplodeInfo::FExplodeHeightOffset' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowExplodeInfo, bExplodeOnHorizontalDistance) == 0x000008, "Member 'FEX355_SwingThrowExplodeInfo::bExplodeOnHorizontalDistance' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowExplodeInfo, FExplodeHorizontalDistance) == 0x00000C, "Member 'FEX355_SwingThrowExplodeInfo::FExplodeHorizontalDistance' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowExplodeInfo, bExplodeOnTime) == 0x000010, "Member 'FEX355_SwingThrowExplodeInfo::bExplodeOnTime' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowExplodeInfo, FExplodeTime) == 0x000014, "Member 'FEX355_SwingThrowExplodeInfo::FExplodeTime' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowExplodeInfo, FExplodeMinTime) == 0x000018, "Member 'FEX355_SwingThrowExplodeInfo::FExplodeMinTime' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowExplodeInfo, bExplodeMinTime) == 0x00001C, "Member 'FEX355_SwingThrowExplodeInfo::bExplodeMinTime' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowExplodeInfo, FExplodeMinDistance) == 0x000020, "Member 'FEX355_SwingThrowExplodeInfo::FExplodeMinDistance' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowExplodeInfo, bExplodeMinDistance) == 0x000024, "Member 'FEX355_SwingThrowExplodeInfo::bExplodeMinDistance' has a wrong offset!");

// ScriptStruct TresGame.EX355_SwingThrowDirection
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FEX355_SwingThrowDirection final
{
public:
	bool                                          bAimTarget;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VAimTargetOffset;                                  // 0x0004(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxPitch;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMinPitch;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RAimRot;                                           // 0x0018(0x112E9AF0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FEX355_SwingThrowExplodeInfo           SwingThrowExplodeLandInfo;                         // 0x0024(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_SwingThrowDirection) == 0x112E9AF0, "Wrong alignment on FEX355_SwingThrowDirection");
static_assert(sizeof(FEX355_SwingThrowDirection) == 0x112E9AF0, "Wrong size on FEX355_SwingThrowDirection");
static_assert(offsetof(FEX355_SwingThrowDirection, bAimTarget) == 0x000000, "Member 'FEX355_SwingThrowDirection::bAimTarget' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowDirection, VAimTargetOffset) == 0x000004, "Member 'FEX355_SwingThrowDirection::VAimTargetOffset' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowDirection, FMaxPitch) == 0x000010, "Member 'FEX355_SwingThrowDirection::FMaxPitch' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowDirection, FMinPitch) == 0x000014, "Member 'FEX355_SwingThrowDirection::FMinPitch' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowDirection, RAimRot) == 0x000018, "Member 'FEX355_SwingThrowDirection::RAimRot' has a wrong offset!");
static_assert(offsetof(FEX355_SwingThrowDirection, SwingThrowExplodeLandInfo) == 0x000024, "Member 'FEX355_SwingThrowDirection::SwingThrowExplodeLandInfo' has a wrong offset!");

// ScriptStruct TresGame.TresHologramWorldInitParam
// 0x112EAE80 (0x112EAE80 - 0x0000)
struct FTresHologramWorldInitParam final
{
public:
	ETresWorldCode                                World;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MapId;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHologramWorldInitParamValueType              ValueType;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParamName;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VectorValue;                                       // 0x0024(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorValue;                                        // 0x0030(0x112EAE80)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresHologramWorldInitParam) == 0x112EAE80, "Wrong alignment on FTresHologramWorldInitParam");
static_assert(sizeof(FTresHologramWorldInitParam) == 0x112EAE80, "Wrong size on FTresHologramWorldInitParam");
static_assert(offsetof(FTresHologramWorldInitParam, World) == 0x000000, "Member 'FTresHologramWorldInitParam::World' has a wrong offset!");
static_assert(offsetof(FTresHologramWorldInitParam, MapId) == 0x000008, "Member 'FTresHologramWorldInitParam::MapId' has a wrong offset!");
static_assert(offsetof(FTresHologramWorldInitParam, ValueType) == 0x000010, "Member 'FTresHologramWorldInitParam::ValueType' has a wrong offset!");
static_assert(offsetof(FTresHologramWorldInitParam, ParamName) == 0x000018, "Member 'FTresHologramWorldInitParam::ParamName' has a wrong offset!");
static_assert(offsetof(FTresHologramWorldInitParam, FloatValue) == 0x000020, "Member 'FTresHologramWorldInitParam::FloatValue' has a wrong offset!");
static_assert(offsetof(FTresHologramWorldInitParam, VectorValue) == 0x000024, "Member 'FTresHologramWorldInitParam::VectorValue' has a wrong offset!");
static_assert(offsetof(FTresHologramWorldInitParam, ColorValue) == 0x000030, "Member 'FTresHologramWorldInitParam::ColorValue' has a wrong offset!");

// ScriptStruct TresGame.TresRealGummiShipStruct
// 0x114E3D40 (0x114E3D40 - 0x0000)
struct FTresRealGummiShipStruct final
{
public:
	class USkeletalMesh*                          M_pSkeltalMesh;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 M_pSkeletalMeshComponent;                          // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        M_pSceneComponent;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         M_nUniqueID;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nMterialID;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nPattern;                                        // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresGummiBaseParam                    M_nPartsParam;                                     // 0x0028(0x114E3D40)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresGummiBaseParam                    M_nMaterialParam;                                  // 0x0090(0x114E3D40)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_NormalTexture;                                   // 0x00F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_NormalTexUVIndex;                                // 0x0100(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_AOTexture;                                       // 0x0108(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AOTexUVIndex;                                    // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nPartsColorIndex;                                // 0x0114(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nMaterialColorIndex;                             // 0x0115(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_RotateAxisX;                                     // 0x0118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateAxisY;                                     // 0x011C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateAxisZ;                                     // 0x0120(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateSpeed;                                     // 0x0124(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_UVScrollSpeedU;                                  // 0x0128(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_UVScrollSpeedV;                                  // 0x012C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresGummiShipPartsStruct              PlanData;                                          // 0x0130(0x114E2730)(Transient, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRealGummiShipStruct) == 0x114E3D40, "Wrong alignment on FTresRealGummiShipStruct");
static_assert(sizeof(FTresRealGummiShipStruct) == 0x114E3D40, "Wrong size on FTresRealGummiShipStruct");
static_assert(offsetof(FTresRealGummiShipStruct, M_pSkeltalMesh) == 0x000000, "Member 'FTresRealGummiShipStruct::M_pSkeltalMesh' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_pSkeletalMeshComponent) == 0x000008, "Member 'FTresRealGummiShipStruct::M_pSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_pSceneComponent) == 0x000010, "Member 'FTresRealGummiShipStruct::M_pSceneComponent' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_nUniqueID) == 0x000018, "Member 'FTresRealGummiShipStruct::M_nUniqueID' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_nMterialID) == 0x000020, "Member 'FTresRealGummiShipStruct::M_nMterialID' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_nPattern) == 0x000021, "Member 'FTresRealGummiShipStruct::M_nPattern' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_nPartsParam) == 0x000028, "Member 'FTresRealGummiShipStruct::M_nPartsParam' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_nMaterialParam) == 0x000090, "Member 'FTresRealGummiShipStruct::M_nMaterialParam' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_NormalTexture) == 0x0000F8, "Member 'FTresRealGummiShipStruct::M_NormalTexture' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_NormalTexUVIndex) == 0x000100, "Member 'FTresRealGummiShipStruct::M_NormalTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_AOTexture) == 0x000108, "Member 'FTresRealGummiShipStruct::M_AOTexture' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_AOTexUVIndex) == 0x000110, "Member 'FTresRealGummiShipStruct::M_AOTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_nPartsColorIndex) == 0x000114, "Member 'FTresRealGummiShipStruct::M_nPartsColorIndex' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_nMaterialColorIndex) == 0x000115, "Member 'FTresRealGummiShipStruct::M_nMaterialColorIndex' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_RotateAxisX) == 0x000118, "Member 'FTresRealGummiShipStruct::M_RotateAxisX' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_RotateAxisY) == 0x00011C, "Member 'FTresRealGummiShipStruct::M_RotateAxisY' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_RotateAxisZ) == 0x000120, "Member 'FTresRealGummiShipStruct::M_RotateAxisZ' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_RotateSpeed) == 0x000124, "Member 'FTresRealGummiShipStruct::M_RotateSpeed' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_UVScrollSpeedU) == 0x000128, "Member 'FTresRealGummiShipStruct::M_UVScrollSpeedU' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, M_UVScrollSpeedV) == 0x00012C, "Member 'FTresRealGummiShipStruct::M_UVScrollSpeedV' has a wrong offset!");
static_assert(offsetof(FTresRealGummiShipStruct, PlanData) == 0x000130, "Member 'FTresRealGummiShipStruct::PlanData' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcEntityCountInfo
// 0x11685 (0x11685 - 0x0000)
struct alignas(0x11685) FTresComNpcEntityCountInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcEntityCountInfo) == 0x011685, "Wrong alignment on FTresComNpcEntityCountInfo");
static_assert(sizeof(FTresComNpcEntityCountInfo) == 0x011685, "Wrong size on FTresComNpcEntityCountInfo");

// ScriptStruct TresGame.EX355_SwingTractionVerticalInfo
// 0x114BA930 (0x114BA930 - 0x0000)
struct alignas(0x114BA930) FEX355_SwingTractionVerticalInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_SwingTractionDir                       TractionDir;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VTractionOffset;                                   // 0x001C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxVerticalTractionDistance;                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_MoveVelocityType                       TractionVelocityType;                              // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FTractionInterpExp;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoTractionOnLand;                                 // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FHeightFromLand;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_SwingTractionVerticalInfo) == 0x114BA930, "Wrong alignment on FEX355_SwingTractionVerticalInfo");
static_assert(sizeof(FEX355_SwingTractionVerticalInfo) == 0x114BA930, "Wrong size on FEX355_SwingTractionVerticalInfo");
static_assert(offsetof(FEX355_SwingTractionVerticalInfo, INotifyID) == 0x000000, "Member 'FEX355_SwingTractionVerticalInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionVerticalInfo, Comment) == 0x000008, "Member 'FEX355_SwingTractionVerticalInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionVerticalInfo, TractionDir) == 0x000018, "Member 'FEX355_SwingTractionVerticalInfo::TractionDir' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionVerticalInfo, VTractionOffset) == 0x00001C, "Member 'FEX355_SwingTractionVerticalInfo::VTractionOffset' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionVerticalInfo, FMaxVerticalTractionDistance) == 0x000028, "Member 'FEX355_SwingTractionVerticalInfo::FMaxVerticalTractionDistance' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionVerticalInfo, TractionVelocityType) == 0x00002C, "Member 'FEX355_SwingTractionVerticalInfo::TractionVelocityType' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionVerticalInfo, FTractionInterpExp) == 0x000030, "Member 'FEX355_SwingTractionVerticalInfo::FTractionInterpExp' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionVerticalInfo, bNoTractionOnLand) == 0x000034, "Member 'FEX355_SwingTractionVerticalInfo::bNoTractionOnLand' has a wrong offset!");
static_assert(offsetof(FEX355_SwingTractionVerticalInfo, FHeightFromLand) == 0x000038, "Member 'FEX355_SwingTractionVerticalInfo::FHeightFromLand' has a wrong offset!");

// ScriptStruct TresGame.EX355_SwingWeaponGroundHitEffectInfo
// 0x114BB5D0 (0x114BB5D0 - 0x0000)
struct alignas(0x114BB5D0) FEX355_SwingWeaponGroundHitEffectInfo final
{
public:
	int32                                         M_iNotifyID;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_WeaponGroundHitEffectClass;                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vSpawnLocOffset;                                 // 0x0010(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bSpawnOnLandOnly;                                // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FHeightFromLand;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_SwingWeaponGroundHitEffectInfo) == 0x114BB5D0, "Wrong alignment on FEX355_SwingWeaponGroundHitEffectInfo");
static_assert(sizeof(FEX355_SwingWeaponGroundHitEffectInfo) == 0x114BB5D0, "Wrong size on FEX355_SwingWeaponGroundHitEffectInfo");
static_assert(offsetof(FEX355_SwingWeaponGroundHitEffectInfo, M_iNotifyID) == 0x000000, "Member 'FEX355_SwingWeaponGroundHitEffectInfo::M_iNotifyID' has a wrong offset!");
static_assert(offsetof(FEX355_SwingWeaponGroundHitEffectInfo, M_WeaponGroundHitEffectClass) == 0x000008, "Member 'FEX355_SwingWeaponGroundHitEffectInfo::M_WeaponGroundHitEffectClass' has a wrong offset!");
static_assert(offsetof(FEX355_SwingWeaponGroundHitEffectInfo, M_vSpawnLocOffset) == 0x000010, "Member 'FEX355_SwingWeaponGroundHitEffectInfo::M_vSpawnLocOffset' has a wrong offset!");
static_assert(offsetof(FEX355_SwingWeaponGroundHitEffectInfo, M_bSpawnOnLandOnly) == 0x00001C, "Member 'FEX355_SwingWeaponGroundHitEffectInfo::M_bSpawnOnLandOnly' has a wrong offset!");
static_assert(offsetof(FEX355_SwingWeaponGroundHitEffectInfo, FHeightFromLand) == 0x000020, "Member 'FEX355_SwingWeaponGroundHitEffectInfo::FHeightFromLand' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx353ThornBeamProjectileInfo
// 0x114EFB90 (0x114EFB90 - 0x0000)
struct alignas(0x114EFB90) FTresEnemyEx353ThornBeamProjectileInfo final
{
public:
	float                                         FireDelayTime;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelSpeed;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingStartTime;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAbsTime;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingSpeedXY;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAccelSpeedXY;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingMaxSpeedXY;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingSpeedZ;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAccelSpeedZ;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingMaxSpeedZ;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingMinDist;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ShotDirection;                                     // 0x0034(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MissMinDist;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MissMaxDist;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MissMinHeight;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MissMaxHeight;                                     // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsSetAngle : 1;                                   // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MissMinAngle;                                      // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MissMaxAngle;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsDecelSpeed : 1;                                 // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DecelStartTime;                                    // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelSpeed;                                        // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx353ThornBeamProjectileInfo) == 0x114EFB90, "Wrong alignment on FTresEnemyEx353ThornBeamProjectileInfo");
static_assert(sizeof(FTresEnemyEx353ThornBeamProjectileInfo) == 0x114EFB90, "Wrong size on FTresEnemyEx353ThornBeamProjectileInfo");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, FireDelayTime) == 0x000000, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::FireDelayTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, InitialSpeed) == 0x000004, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, AccelSpeed) == 0x000008, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::AccelSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, MaxSpeed) == 0x00000C, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, HomingStartTime) == 0x000010, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::HomingStartTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, HomingAbsTime) == 0x000014, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::HomingAbsTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, HomingSpeedXY) == 0x000018, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::HomingSpeedXY' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, HomingAccelSpeedXY) == 0x00001C, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::HomingAccelSpeedXY' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, HomingMaxSpeedXY) == 0x000020, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::HomingMaxSpeedXY' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, HomingSpeedZ) == 0x000024, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::HomingSpeedZ' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, HomingAccelSpeedZ) == 0x000028, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::HomingAccelSpeedZ' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, HomingMaxSpeedZ) == 0x00002C, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::HomingMaxSpeedZ' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, HomingMinDist) == 0x000030, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::HomingMinDist' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, ShotDirection) == 0x000034, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::ShotDirection' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, MissMinDist) == 0x000040, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::MissMinDist' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, MissMaxDist) == 0x000044, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::MissMaxDist' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, MissMinHeight) == 0x000048, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::MissMinHeight' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, MissMaxHeight) == 0x00004C, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::MissMaxHeight' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, MissMinAngle) == 0x000054, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::MissMinAngle' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, MissMaxAngle) == 0x000058, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::MissMaxAngle' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, DecelStartTime) == 0x000060, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::DecelStartTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamProjectileInfo, DecelSpeed) == 0x000064, "Member 'FTresEnemyEx353ThornBeamProjectileInfo::DecelSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresLevelEntityUserData
// 0x1154A650 (0x1154A650 - 0x0000)
struct alignas(0x1154A650) FTresLevelEntityUserData final
{
public:
	class UObject*                                M_UserObject;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_UserParams[0x4];                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLevelEntityUserData) == 0x1154A650, "Wrong alignment on FTresLevelEntityUserData");
static_assert(sizeof(FTresLevelEntityUserData) == 0x1154A650, "Wrong size on FTresLevelEntityUserData");
static_assert(offsetof(FTresLevelEntityUserData, M_UserObject) == 0x000000, "Member 'FTresLevelEntityUserData::M_UserObject' has a wrong offset!");
static_assert(offsetof(FTresLevelEntityUserData, M_UserParams) == 0x000008, "Member 'FTresLevelEntityUserData::M_UserParams' has a wrong offset!");

// ScriptStruct TresGame.TresPhantomBlitzHomingParam
// 0x114BB980 (0x114BB980 - 0x0000)
struct alignas(0x114BB980) FTresPhantomBlitzHomingParam final
{
public:
	float                                         HomingSpeedYaw;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingSpeedPitch;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingLimitAnglePitch;                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingEndDistance;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimLocationOffsetDistance;                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimLocationAfterTime;                              // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPhantomBlitzHomingParam) == 0x114BB980, "Wrong alignment on FTresPhantomBlitzHomingParam");
static_assert(sizeof(FTresPhantomBlitzHomingParam) == 0x114BB980, "Wrong size on FTresPhantomBlitzHomingParam");
static_assert(offsetof(FTresPhantomBlitzHomingParam, HomingSpeedYaw) == 0x000000, "Member 'FTresPhantomBlitzHomingParam::HomingSpeedYaw' has a wrong offset!");
static_assert(offsetof(FTresPhantomBlitzHomingParam, HomingSpeedPitch) == 0x000004, "Member 'FTresPhantomBlitzHomingParam::HomingSpeedPitch' has a wrong offset!");
static_assert(offsetof(FTresPhantomBlitzHomingParam, HomingLimitAnglePitch) == 0x000008, "Member 'FTresPhantomBlitzHomingParam::HomingLimitAnglePitch' has a wrong offset!");
static_assert(offsetof(FTresPhantomBlitzHomingParam, HomingEndDistance) == 0x00000C, "Member 'FTresPhantomBlitzHomingParam::HomingEndDistance' has a wrong offset!");
static_assert(offsetof(FTresPhantomBlitzHomingParam, AimLocationOffsetDistance) == 0x000010, "Member 'FTresPhantomBlitzHomingParam::AimLocationOffsetDistance' has a wrong offset!");
static_assert(offsetof(FTresPhantomBlitzHomingParam, AimLocationAfterTime) == 0x000014, "Member 'FTresPhantomBlitzHomingParam::AimLocationAfterTime' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackActorVoiceKey
// 0x0010 (0x0010 - 0x0000)
struct FTresInterpTrackActorVoiceKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTresActorVoice*                        M_ActorVoice;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresInterpTrackActorVoiceKey) == 0x000008, "Wrong alignment on FTresInterpTrackActorVoiceKey");
static_assert(sizeof(FTresInterpTrackActorVoiceKey) == 0x000010, "Wrong size on FTresInterpTrackActorVoiceKey");
static_assert(offsetof(FTresInterpTrackActorVoiceKey, M_Time) == 0x000000, "Member 'FTresInterpTrackActorVoiceKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackActorVoiceKey, M_ActorVoice) == 0x000008, "Member 'FTresInterpTrackActorVoiceKey::M_ActorVoice' has a wrong offset!");

// ScriptStruct TresGame.TresPhantomBlitzQuickTurnaroundExecuteParam
// 0x0010 (0x0010 - 0x0000)
struct FTresPhantomBlitzQuickTurnaroundExecuteParam final
{
public:
	TArray<int32>                                 QuickTurnaroundExecuteNumList;                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPhantomBlitzQuickTurnaroundExecuteParam) == 0x000008, "Wrong alignment on FTresPhantomBlitzQuickTurnaroundExecuteParam");
static_assert(sizeof(FTresPhantomBlitzQuickTurnaroundExecuteParam) == 0x000010, "Wrong size on FTresPhantomBlitzQuickTurnaroundExecuteParam");
static_assert(offsetof(FTresPhantomBlitzQuickTurnaroundExecuteParam, QuickTurnaroundExecuteNumList) == 0x000000, "Member 'FTresPhantomBlitzQuickTurnaroundExecuteParam::QuickTurnaroundExecuteNumList' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcAttachMesh
// 0x0018 (0x0018 - 0x0000)
struct FTresComNpcAttachMesh final
{
public:
	class FName                                   M_MeshName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_SoketName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bChangeMesh : 1;                                 // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcAttachMesh) == 0x000004, "Wrong alignment on FTresComNpcAttachMesh");
static_assert(sizeof(FTresComNpcAttachMesh) == 0x000018, "Wrong size on FTresComNpcAttachMesh");
static_assert(offsetof(FTresComNpcAttachMesh, M_MeshName) == 0x000000, "Member 'FTresComNpcAttachMesh::M_MeshName' has a wrong offset!");
static_assert(offsetof(FTresComNpcAttachMesh, M_SoketName) == 0x000008, "Member 'FTresComNpcAttachMesh::M_SoketName' has a wrong offset!");

// ScriptStruct TresGame.TresSurroundDarkMineSpawnParams_e_ex352
// 0x114FBBD0 (0x114FBBD0 - 0x0000)
struct alignas(0x114FBBD0) FTresSurroundDarkMineSpawnParams_e_ex352 final
{
public:
	int32                                         M_DMNum;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DMBootRange;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DMTimeToExplodeAfterBoot;                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DMRadius;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DMSpreadStartTime;                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DMSpreadSpeed;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DMSpreadTime;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSurroundDarkMineSpawnParams_e_ex352) == 0x114FBBD0, "Wrong alignment on FTresSurroundDarkMineSpawnParams_e_ex352");
static_assert(sizeof(FTresSurroundDarkMineSpawnParams_e_ex352) == 0x114FBBD0, "Wrong size on FTresSurroundDarkMineSpawnParams_e_ex352");
static_assert(offsetof(FTresSurroundDarkMineSpawnParams_e_ex352, M_DMNum) == 0x000000, "Member 'FTresSurroundDarkMineSpawnParams_e_ex352::M_DMNum' has a wrong offset!");
static_assert(offsetof(FTresSurroundDarkMineSpawnParams_e_ex352, M_DMBootRange) == 0x000004, "Member 'FTresSurroundDarkMineSpawnParams_e_ex352::M_DMBootRange' has a wrong offset!");
static_assert(offsetof(FTresSurroundDarkMineSpawnParams_e_ex352, M_DMTimeToExplodeAfterBoot) == 0x000008, "Member 'FTresSurroundDarkMineSpawnParams_e_ex352::M_DMTimeToExplodeAfterBoot' has a wrong offset!");
static_assert(offsetof(FTresSurroundDarkMineSpawnParams_e_ex352, M_DMRadius) == 0x00000C, "Member 'FTresSurroundDarkMineSpawnParams_e_ex352::M_DMRadius' has a wrong offset!");
static_assert(offsetof(FTresSurroundDarkMineSpawnParams_e_ex352, M_DMSpreadStartTime) == 0x000010, "Member 'FTresSurroundDarkMineSpawnParams_e_ex352::M_DMSpreadStartTime' has a wrong offset!");
static_assert(offsetof(FTresSurroundDarkMineSpawnParams_e_ex352, M_DMSpreadSpeed) == 0x000014, "Member 'FTresSurroundDarkMineSpawnParams_e_ex352::M_DMSpreadSpeed' has a wrong offset!");
static_assert(offsetof(FTresSurroundDarkMineSpawnParams_e_ex352, M_DMSpreadTime) == 0x000018, "Member 'FTresSurroundDarkMineSpawnParams_e_ex352::M_DMSpreadTime' has a wrong offset!");

// ScriptStruct TresGame.EX359_DashTractionInfo
// 0x114BBF70 (0x114BBF70 - 0x0000)
struct alignas(0x114BBF70) FEX359_DashTractionInfo final
{
public:
	int32                                         INotifyID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FDashGoalToTargetDistance;                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxTractionDistance;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_DashTractionInfo) == 0x114BBF70, "Wrong alignment on FEX359_DashTractionInfo");
static_assert(sizeof(FEX359_DashTractionInfo) == 0x114BBF70, "Wrong size on FEX359_DashTractionInfo");
static_assert(offsetof(FEX359_DashTractionInfo, INotifyID) == 0x000000, "Member 'FEX359_DashTractionInfo::INotifyID' has a wrong offset!");
static_assert(offsetof(FEX359_DashTractionInfo, Comment) == 0x000008, "Member 'FEX359_DashTractionInfo::Comment' has a wrong offset!");
static_assert(offsetof(FEX359_DashTractionInfo, FDashGoalToTargetDistance) == 0x000018, "Member 'FEX359_DashTractionInfo::FDashGoalToTargetDistance' has a wrong offset!");
static_assert(offsetof(FEX359_DashTractionInfo, FMaxTractionDistance) == 0x00001C, "Member 'FEX359_DashTractionInfo::FMaxTractionDistance' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx361DarkMineInfo
// 0x114BC260 (0x114BC260 - 0x0000)
struct alignas(0x114BC260) FTresEnemyEx361DarkMineInfo final
{
public:
	ETresEnemyEx361SettingKind                    SettingKind;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DarkMineNum;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BetweenDarkMineDist;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DarkMineDist;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bConsiderHeight : 1;                               // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DarkMineHeight;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DarkMineOffset;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx361DarkMineInfo) == 0x114BC260, "Wrong alignment on FTresEnemyEx361DarkMineInfo");
static_assert(sizeof(FTresEnemyEx361DarkMineInfo) == 0x114BC260, "Wrong size on FTresEnemyEx361DarkMineInfo");
static_assert(offsetof(FTresEnemyEx361DarkMineInfo, SettingKind) == 0x000000, "Member 'FTresEnemyEx361DarkMineInfo::SettingKind' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx361DarkMineInfo, DarkMineNum) == 0x000004, "Member 'FTresEnemyEx361DarkMineInfo::DarkMineNum' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx361DarkMineInfo, BetweenDarkMineDist) == 0x000008, "Member 'FTresEnemyEx361DarkMineInfo::BetweenDarkMineDist' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx361DarkMineInfo, DarkMineDist) == 0x00000C, "Member 'FTresEnemyEx361DarkMineInfo::DarkMineDist' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx361DarkMineInfo, DarkMineHeight) == 0x000014, "Member 'FTresEnemyEx361DarkMineInfo::DarkMineHeight' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx361DarkMineInfo, DarkMineOffset) == 0x000018, "Member 'FTresEnemyEx361DarkMineInfo::DarkMineOffset' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcRandomVoiceDatas
// 0x0018 (0x0018 - 0x0000)
struct FTresComNpcRandomVoiceDatas final
{
public:
	int32                                         M_VoiceType;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundBase*>                     M_VoiceLists;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcRandomVoiceDatas) == 0x000008, "Wrong alignment on FTresComNpcRandomVoiceDatas");
static_assert(sizeof(FTresComNpcRandomVoiceDatas) == 0x000018, "Wrong size on FTresComNpcRandomVoiceDatas");
static_assert(offsetof(FTresComNpcRandomVoiceDatas, M_VoiceType) == 0x000000, "Member 'FTresComNpcRandomVoiceDatas::M_VoiceType' has a wrong offset!");
static_assert(offsetof(FTresComNpcRandomVoiceDatas, M_VoiceLists) == 0x000008, "Member 'FTresComNpcRandomVoiceDatas::M_VoiceLists' has a wrong offset!");

// ScriptStruct TresGame.TresHudDanceCmdKind
// 0x4FE1 (0x4FE1 - 0x0000)
struct alignas(0x4FE1) FTresHudDanceCmdKind final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHudDanceCmdKind) == 0x004FE1, "Wrong alignment on FTresHudDanceCmdKind");
static_assert(sizeof(FTresHudDanceCmdKind) == 0x004FE1, "Wrong size on FTresHudDanceCmdKind");

// ScriptStruct TresGame.TresDebugMenuIntPair
// 0x114E7750 (0x114E7750 - 0x0000)
struct alignas(0x114E7750) FTresDebugMenuIntPair final
{
public:
	int32                                         M_FirstInt;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_SecondInt;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuIntPair) == 0x114E7750, "Wrong alignment on FTresDebugMenuIntPair");
static_assert(sizeof(FTresDebugMenuIntPair) == 0x114E7750, "Wrong size on FTresDebugMenuIntPair");
static_assert(offsetof(FTresDebugMenuIntPair, M_FirstInt) == 0x000000, "Member 'FTresDebugMenuIntPair::M_FirstInt' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuIntPair, M_SecondInt) == 0x000004, "Member 'FTresDebugMenuIntPair::M_SecondInt' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuTween
// 0x114E7750 (0x114E7750 - 0x0000)
struct FTresDebugMenuTween final
{
public:
	int32                                         M_StartFrame;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_EndFrame;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDebugMenuTweenType                       M_TweenType;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Acceleration;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresDebugMenuIntPair                  M_ElementPair;                                     // 0x0010(0x114E7750)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuTween) == 0x114E7750, "Wrong alignment on FTresDebugMenuTween");
static_assert(sizeof(FTresDebugMenuTween) == 0x114E7750, "Wrong size on FTresDebugMenuTween");
static_assert(offsetof(FTresDebugMenuTween, M_StartFrame) == 0x000000, "Member 'FTresDebugMenuTween::M_StartFrame' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTween, M_EndFrame) == 0x000004, "Member 'FTresDebugMenuTween::M_EndFrame' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTween, M_TweenType) == 0x000008, "Member 'FTresDebugMenuTween::M_TweenType' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTween, M_Acceleration) == 0x00000C, "Member 'FTresDebugMenuTween::M_Acceleration' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTween, M_ElementPair) == 0x000010, "Member 'FTresDebugMenuTween::M_ElementPair' has a wrong offset!");

// ScriptStruct TresGame.TresWorldAppendAnimSetUnit
// 0x0010 (0x0010 - 0x0000)
struct FTresWorldAppendAnimSetUnit final
{
public:
	TArray<class UTresAnimSet*>                   M_AnimSets;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWorldAppendAnimSetUnit) == 0x000008, "Wrong alignment on FTresWorldAppendAnimSetUnit");
static_assert(sizeof(FTresWorldAppendAnimSetUnit) == 0x000010, "Wrong size on FTresWorldAppendAnimSetUnit");
static_assert(offsetof(FTresWorldAppendAnimSetUnit, M_AnimSets) == 0x000000, "Member 'FTresWorldAppendAnimSetUnit::M_AnimSets' has a wrong offset!");

// ScriptStruct TresGame.DebrisDetails_e_he903_DebrisLand
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FDebrisDetails_e_he903_DebrisLand final
{
public:
	TSubclassOf<class ATresProjectileBase>        M_Projectile;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_rShotAngleOffset;                                // 0x0008(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bHoming;                                         // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebrisDetails_e_he903_DebrisLand) == 0x112E9AF0, "Wrong alignment on FDebrisDetails_e_he903_DebrisLand");
static_assert(sizeof(FDebrisDetails_e_he903_DebrisLand) == 0x112E9AF0, "Wrong size on FDebrisDetails_e_he903_DebrisLand");
static_assert(offsetof(FDebrisDetails_e_he903_DebrisLand, M_Projectile) == 0x000000, "Member 'FDebrisDetails_e_he903_DebrisLand::M_Projectile' has a wrong offset!");
static_assert(offsetof(FDebrisDetails_e_he903_DebrisLand, M_rShotAngleOffset) == 0x000008, "Member 'FDebrisDetails_e_he903_DebrisLand::M_rShotAngleOffset' has a wrong offset!");
static_assert(offsetof(FDebrisDetails_e_he903_DebrisLand, M_bHoming) == 0x000014, "Member 'FDebrisDetails_e_he903_DebrisLand::M_bHoming' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex027_ThundagaInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresEnemy_e_ex027_ThundagaInfo final
{
public:
	class UParticleSystemComponent*               M_ThundagaEff;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex027_ThundagaInfo) == 0x000008, "Wrong alignment on FTresEnemy_e_ex027_ThundagaInfo");
static_assert(sizeof(FTresEnemy_e_ex027_ThundagaInfo) == 0x000018, "Wrong size on FTresEnemy_e_ex027_ThundagaInfo");
static_assert(offsetof(FTresEnemy_e_ex027_ThundagaInfo, M_ThundagaEff) == 0x000000, "Member 'FTresEnemy_e_ex027_ThundagaInfo::M_ThundagaEff' has a wrong offset!");

// ScriptStruct TresGame.TripleBreakRootMotionScaleParam_e_ex043
// 0x114BD110 (0x114BD110 - 0x0000)
struct alignas(0x114BD110) FTripleBreakRootMotionScaleParam_e_ex043 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTripleBreakRootMotionScaleParam_e_ex043) == 0x114BD110, "Wrong alignment on FTripleBreakRootMotionScaleParam_e_ex043");
static_assert(sizeof(FTripleBreakRootMotionScaleParam_e_ex043) == 0x114BD110, "Wrong size on FTripleBreakRootMotionScaleParam_e_ex043");
static_assert(offsetof(FTripleBreakRootMotionScaleParam_e_ex043, Distance) == 0x000000, "Member 'FTripleBreakRootMotionScaleParam_e_ex043::Distance' has a wrong offset!");
static_assert(offsetof(FTripleBreakRootMotionScaleParam_e_ex043, RootMotionScale) == 0x000004, "Member 'FTripleBreakRootMotionScaleParam_e_ex043::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx302ProjectileSpawnInfo
// 0x0004 (0x0004 - 0x0000)
struct FTresEnemyEx302ProjectileSpawnInfo final
{
public:
	float                                         SpawnAngle;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx302ProjectileSpawnInfo) == 0x000004, "Wrong alignment on FTresEnemyEx302ProjectileSpawnInfo");
static_assert(sizeof(FTresEnemyEx302ProjectileSpawnInfo) == 0x000004, "Wrong size on FTresEnemyEx302ProjectileSpawnInfo");
static_assert(offsetof(FTresEnemyEx302ProjectileSpawnInfo, SpawnAngle) == 0x000000, "Member 'FTresEnemyEx302ProjectileSpawnInfo::SpawnAngle' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyex351ProjectileSpawnInfo
// 0x0004 (0x0004 - 0x0000)
struct FTresEnemyex351ProjectileSpawnInfo final
{
public:
	float                                         SpawnAngle;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyex351ProjectileSpawnInfo) == 0x000004, "Wrong alignment on FTresEnemyex351ProjectileSpawnInfo");
static_assert(sizeof(FTresEnemyex351ProjectileSpawnInfo) == 0x000004, "Wrong size on FTresEnemyex351ProjectileSpawnInfo");
static_assert(offsetof(FTresEnemyex351ProjectileSpawnInfo, SpawnAngle) == 0x000000, "Member 'FTresEnemyex351ProjectileSpawnInfo::SpawnAngle' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx351ProjectileInfoL
// 0x114BD8A0 (0x114BD8A0 - 0x0000)
struct alignas(0x114BD8A0) FTresEnemyEx351ProjectileInfoL final
{
public:
	struct FRotator                               SpawnAngle;                                        // 0x0000(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpawnDistance;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FireAngle;                                         // 0x0010(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FireDelay;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx351ProjectileInfoL) == 0x114BD8A0, "Wrong alignment on FTresEnemyEx351ProjectileInfoL");
static_assert(sizeof(FTresEnemyEx351ProjectileInfoL) == 0x114BD8A0, "Wrong size on FTresEnemyEx351ProjectileInfoL");
static_assert(offsetof(FTresEnemyEx351ProjectileInfoL, SpawnAngle) == 0x000000, "Member 'FTresEnemyEx351ProjectileInfoL::SpawnAngle' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351ProjectileInfoL, SpawnDistance) == 0x00000C, "Member 'FTresEnemyEx351ProjectileInfoL::SpawnDistance' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351ProjectileInfoL, FireAngle) == 0x000010, "Member 'FTresEnemyEx351ProjectileInfoL::FireAngle' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351ProjectileInfoL, FireDelay) == 0x00001C, "Member 'FTresEnemyEx351ProjectileInfoL::FireDelay' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx351SpawnInfoL
// 0x0020 (0x0020 - 0x0000)
struct FTresEnemyEx351SpawnInfoL final
{
public:
	TSubclassOf<class ATresProjectileBase>        FreezeShotProjectileClass;                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsBaseTarget : 1;                                 // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresEnemyEx351ProjectileInfoL> ProjectileInfoL;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx351SpawnInfoL) == 0x000008, "Wrong alignment on FTresEnemyEx351SpawnInfoL");
static_assert(sizeof(FTresEnemyEx351SpawnInfoL) == 0x000020, "Wrong size on FTresEnemyEx351SpawnInfoL");
static_assert(offsetof(FTresEnemyEx351SpawnInfoL, FreezeShotProjectileClass) == 0x000000, "Member 'FTresEnemyEx351SpawnInfoL::FreezeShotProjectileClass' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351SpawnInfoL, ProjectileInfoL) == 0x000010, "Member 'FTresEnemyEx351SpawnInfoL::ProjectileInfoL' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx351FreezeShotSpawnWorker
// 0x0060 (0x0060 - 0x0000)
struct FTresEnemyEx351FreezeShotSpawnWorker final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresEnemyEx351SpawnInfoL              SpawnInfo;                                         // 0x0010(0x0020)(NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx351FreezeShotSpawnWorker) == 0x000001, "Wrong alignment on FTresEnemyEx351FreezeShotSpawnWorker");
static_assert(sizeof(FTresEnemyEx351FreezeShotSpawnWorker) == 0x000060, "Wrong size on FTresEnemyEx351FreezeShotSpawnWorker");
static_assert(offsetof(FTresEnemyEx351FreezeShotSpawnWorker, SpawnInfo) == 0x000010, "Member 'FTresEnemyEx351FreezeShotSpawnWorker::SpawnInfo' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcRandomFieldVoiceDatas
// 0x0018 (0x0018 - 0x0000)
struct FTresComNpcRandomFieldVoiceDatas final
{
public:
	int32                                         M_VoiceType;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTresFieldVoice*>                M_VoiceLists;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcRandomFieldVoiceDatas) == 0x000008, "Wrong alignment on FTresComNpcRandomFieldVoiceDatas");
static_assert(sizeof(FTresComNpcRandomFieldVoiceDatas) == 0x000018, "Wrong size on FTresComNpcRandomFieldVoiceDatas");
static_assert(offsetof(FTresComNpcRandomFieldVoiceDatas, M_VoiceType) == 0x000000, "Member 'FTresComNpcRandomFieldVoiceDatas::M_VoiceType' has a wrong offset!");
static_assert(offsetof(FTresComNpcRandomFieldVoiceDatas, M_VoiceLists) == 0x000008, "Member 'FTresComNpcRandomFieldVoiceDatas::M_VoiceLists' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx351FreezeShotInfo
// 0x114FA (0x114FA - 0x0000)
struct alignas(0x114FA) FTresEnemyEx351FreezeShotInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx351FreezeShotInfo) == 0x0114FA, "Wrong alignment on FTresEnemyEx351FreezeShotInfo");
static_assert(sizeof(FTresEnemyEx351FreezeShotInfo) == 0x0114FA, "Wrong size on FTresEnemyEx351FreezeShotInfo");

// ScriptStruct TresGame.TresEnemyEx351TimeRushComboDefine
// 0x114BE5C0 (0x114BE5C0 - 0x0000)
struct alignas(0x114BE5C0) FTresEnemyEx351TimeRushComboDefine final
{
public:
	uint8                                         bNoInOrderData : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JoinNum;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx351TimeRushComboDefine) == 0x114BE5C0, "Wrong alignment on FTresEnemyEx351TimeRushComboDefine");
static_assert(sizeof(FTresEnemyEx351TimeRushComboDefine) == 0x114BE5C0, "Wrong size on FTresEnemyEx351TimeRushComboDefine");
static_assert(offsetof(FTresEnemyEx351TimeRushComboDefine, Comment) == 0x000008, "Member 'FTresEnemyEx351TimeRushComboDefine::Comment' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351TimeRushComboDefine, JoinNum) == 0x000018, "Member 'FTresEnemyEx351TimeRushComboDefine::JoinNum' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx351AvaterParam
// 0x000C (0x000C - 0x0000)
struct FTresEnemyEx351AvaterParam final
{
public:
	float                                         AppearAngle;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvaterDistance;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresEnemyEx351WarpDirection                  Direction;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx351AvaterParam) == 0x000004, "Wrong alignment on FTresEnemyEx351AvaterParam");
static_assert(sizeof(FTresEnemyEx351AvaterParam) == 0x00000C, "Wrong size on FTresEnemyEx351AvaterParam");
static_assert(offsetof(FTresEnemyEx351AvaterParam, AppearAngle) == 0x000000, "Member 'FTresEnemyEx351AvaterParam::AppearAngle' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351AvaterParam, AvaterDistance) == 0x000004, "Member 'FTresEnemyEx351AvaterParam::AvaterDistance' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351AvaterParam, Direction) == 0x000008, "Member 'FTresEnemyEx351AvaterParam::Direction' has a wrong offset!");

// ScriptStruct TresGame.TresLSIGameData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresLSIGameData final : public FTableRowBase
{
public:
	ETresItemDefLSIGameItem                       LSIGameItemID;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DetailTextID;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGameHelp                                 GameHelpID;                                        // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ImageIconIndex;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUILSIScoreType                           ScoreType;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconGraALabelName;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconGraBLabelName;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BgIconGraLabelName;                                // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TitleLogoImage;                                    // 0x0060(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ButtonSetLabelName;                                // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETresUIPadButtonType>                  ButtonSetButtonTypes;                              // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLSIGameData) == 0x11413080, "Wrong alignment on FTresLSIGameData");
static_assert(sizeof(FTresLSIGameData) == 0x11413080, "Wrong size on FTresLSIGameData");
static_assert(offsetof(FTresLSIGameData, LSIGameItemID) == 0x000008, "Member 'FTresLSIGameData::LSIGameItemID' has a wrong offset!");
static_assert(offsetof(FTresLSIGameData, DetailTextID) == 0x000010, "Member 'FTresLSIGameData::DetailTextID' has a wrong offset!");
static_assert(offsetof(FTresLSIGameData, GameHelpID) == 0x000020, "Member 'FTresLSIGameData::GameHelpID' has a wrong offset!");
static_assert(offsetof(FTresLSIGameData, ImageIconIndex) == 0x000024, "Member 'FTresLSIGameData::ImageIconIndex' has a wrong offset!");
static_assert(offsetof(FTresLSIGameData, ScoreType) == 0x000028, "Member 'FTresLSIGameData::ScoreType' has a wrong offset!");
static_assert(offsetof(FTresLSIGameData, IconGraALabelName) == 0x000030, "Member 'FTresLSIGameData::IconGraALabelName' has a wrong offset!");
static_assert(offsetof(FTresLSIGameData, IconGraBLabelName) == 0x000040, "Member 'FTresLSIGameData::IconGraBLabelName' has a wrong offset!");
static_assert(offsetof(FTresLSIGameData, BgIconGraLabelName) == 0x000050, "Member 'FTresLSIGameData::BgIconGraLabelName' has a wrong offset!");
static_assert(offsetof(FTresLSIGameData, TitleLogoImage) == 0x000060, "Member 'FTresLSIGameData::TitleLogoImage' has a wrong offset!");
static_assert(offsetof(FTresLSIGameData, ButtonSetLabelName) == 0x000080, "Member 'FTresLSIGameData::ButtonSetLabelName' has a wrong offset!");
static_assert(offsetof(FTresLSIGameData, ButtonSetButtonTypes) == 0x000090, "Member 'FTresLSIGameData::ButtonSetButtonTypes' has a wrong offset!");

// ScriptStruct TresGame.TresUIActorMaterialParamSettingScalar
// 0x1157F460 (0x1157F460 - 0x0000)
struct alignas(0x1157F460) FTresUIActorMaterialParamSettingScalar final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIActorMaterialParamSettingScalar) == 0x1157F460, "Wrong alignment on FTresUIActorMaterialParamSettingScalar");
static_assert(sizeof(FTresUIActorMaterialParamSettingScalar) == 0x1157F460, "Wrong size on FTresUIActorMaterialParamSettingScalar");
static_assert(offsetof(FTresUIActorMaterialParamSettingScalar, ParameterName) == 0x000000, "Member 'FTresUIActorMaterialParamSettingScalar::ParameterName' has a wrong offset!");
static_assert(offsetof(FTresUIActorMaterialParamSettingScalar, Value) == 0x000008, "Member 'FTresUIActorMaterialParamSettingScalar::Value' has a wrong offset!");

// ScriptStruct TresGame.TresTextColor
// 0x0010 (0x0010 - 0x0000)
struct FTresTextColor final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTextColor) == 0x000004, "Wrong alignment on FTresTextColor");
static_assert(sizeof(FTresTextColor) == 0x000010, "Wrong size on FTresTextColor");
static_assert(offsetof(FTresTextColor, Name) == 0x000000, "Member 'FTresTextColor::Name' has a wrong offset!");
static_assert(offsetof(FTresTextColor, Color) == 0x000008, "Member 'FTresTextColor::Color' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyBigDealCardSpawnParam_e_ex356
// 0x11505560 (0x11505560 - 0x0000)
struct alignas(0x11505560) FTresEnemyBigDealCardSpawnParam_e_ex356 final
{
public:
	float                                         CardRadius;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CardHeightDistance;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OneStepCardNum;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepNum;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyBigDealCardSpawnParam_e_ex356) == 0x11505560, "Wrong alignment on FTresEnemyBigDealCardSpawnParam_e_ex356");
static_assert(sizeof(FTresEnemyBigDealCardSpawnParam_e_ex356) == 0x11505560, "Wrong size on FTresEnemyBigDealCardSpawnParam_e_ex356");
static_assert(offsetof(FTresEnemyBigDealCardSpawnParam_e_ex356, CardRadius) == 0x000000, "Member 'FTresEnemyBigDealCardSpawnParam_e_ex356::CardRadius' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealCardSpawnParam_e_ex356, CardHeightDistance) == 0x000004, "Member 'FTresEnemyBigDealCardSpawnParam_e_ex356::CardHeightDistance' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealCardSpawnParam_e_ex356, OneStepCardNum) == 0x000008, "Member 'FTresEnemyBigDealCardSpawnParam_e_ex356::OneStepCardNum' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealCardSpawnParam_e_ex356, StepNum) == 0x00000C, "Member 'FTresEnemyBigDealCardSpawnParam_e_ex356::StepNum' has a wrong offset!");

// ScriptStruct TresGame.TresWinnieAnimationData
// 0x0000 (0x11413080 - 0x11413080)
#pragma pack(push, 0x1)
struct alignas(0x11413080) FTresWinnieAnimationData : public FTableRowBase
{
public:
	class FName                                   AnimationName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FTresWinnieAnimationData) == 0x11413080, "Wrong alignment on FTresWinnieAnimationData");
static_assert(sizeof(FTresWinnieAnimationData) == 0x11413080, "Wrong size on FTresWinnieAnimationData");
static_assert(offsetof(FTresWinnieAnimationData, AnimationName) == 0x000008, "Member 'FTresWinnieAnimationData::AnimationName' has a wrong offset!");
static_assert(offsetof(FTresWinnieAnimationData, IsLoop) == 0x000010, "Member 'FTresWinnieAnimationData::IsLoop' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePlayerAnimationData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresWinniePlayerAnimationData final : public FTresWinnieAnimationData
{
public:
	EWinniePlayerAnimationType                    AnimationType;                                     // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePlayerAnimationData) == 0x11413080, "Wrong alignment on FTresWinniePlayerAnimationData");
static_assert(sizeof(FTresWinniePlayerAnimationData) == 0x11413080, "Wrong size on FTresWinniePlayerAnimationData");
static_assert(offsetof(FTresWinniePlayerAnimationData, AnimationType) == 0x000018, "Member 'FTresWinniePlayerAnimationData::AnimationType' has a wrong offset!");

// ScriptStruct TresGame.TresEx353EveryDirectionShotParam
// 0x114BEB40 (0x114BEB40 - 0x0000)
struct alignas(0x114BEB40) FTresEx353EveryDirectionShotParam final
{
public:
	float                                         LoopPauseTime;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PauseTime;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextIntervalTime;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextMissIntervalTime;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInfluencedMissPauseTime : 1;                      // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextEraseNum;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextMissEraseNum;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEx353EveryDirectionShotParam) == 0x114BEB40, "Wrong alignment on FTresEx353EveryDirectionShotParam");
static_assert(sizeof(FTresEx353EveryDirectionShotParam) == 0x114BEB40, "Wrong size on FTresEx353EveryDirectionShotParam");
static_assert(offsetof(FTresEx353EveryDirectionShotParam, LoopPauseTime) == 0x000000, "Member 'FTresEx353EveryDirectionShotParam::LoopPauseTime' has a wrong offset!");
static_assert(offsetof(FTresEx353EveryDirectionShotParam, PauseTime) == 0x000004, "Member 'FTresEx353EveryDirectionShotParam::PauseTime' has a wrong offset!");
static_assert(offsetof(FTresEx353EveryDirectionShotParam, NextIntervalTime) == 0x000008, "Member 'FTresEx353EveryDirectionShotParam::NextIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresEx353EveryDirectionShotParam, NextMissIntervalTime) == 0x00000C, "Member 'FTresEx353EveryDirectionShotParam::NextMissIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresEx353EveryDirectionShotParam, NextEraseNum) == 0x000014, "Member 'FTresEx353EveryDirectionShotParam::NextEraseNum' has a wrong offset!");
static_assert(offsetof(FTresEx353EveryDirectionShotParam, NextMissEraseNum) == 0x000018, "Member 'FTresEx353EveryDirectionShotParam::NextMissEraseNum' has a wrong offset!");

// ScriptStruct TresGame.TresAvatarAttackParam_e_ex358
// 0x0018 (0x0018 - 0x0000)
struct FTresAvatarAttackParam_e_ex358 final
{
public:
	class UWildDanceActionParamBase_e_ex358*      ActionData;                                        // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresAvatarAttackAppearParam_e_ex358> AppearParamList;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAvatarAttackParam_e_ex358) == 0x000008, "Wrong alignment on FTresAvatarAttackParam_e_ex358");
static_assert(sizeof(FTresAvatarAttackParam_e_ex358) == 0x000018, "Wrong size on FTresAvatarAttackParam_e_ex358");
static_assert(offsetof(FTresAvatarAttackParam_e_ex358, ActionData) == 0x000000, "Member 'FTresAvatarAttackParam_e_ex358::ActionData' has a wrong offset!");
static_assert(offsetof(FTresAvatarAttackParam_e_ex358, AppearParamList) == 0x000008, "Member 'FTresAvatarAttackParam_e_ex358::AppearParamList' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex711_PhysicsActorTornadoInvolveParam
// 0x115542A0 (0x115542A0 - 0x0000)
struct alignas(0x115542A0) FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam final
{
public:
	float                                         M_InitMoveSpeed;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AddMoveSpeed;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxMoveSpeed;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam) == 0x115542A0, "Wrong alignment on FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam");
static_assert(sizeof(FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam) == 0x115542A0, "Wrong size on FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam");
static_assert(offsetof(FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam, M_InitMoveSpeed) == 0x000000, "Member 'FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam::M_InitMoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam, M_AddMoveSpeed) == 0x000004, "Member 'FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam::M_AddMoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam, M_MaxMoveSpeed) == 0x000008, "Member 'FTresEnemy_e_ex711_PhysicsActorTornadoInvolveParam::M_MaxMoveSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresFieldAddProjectileParam_e_ex357
// 0x11508130 (0x11508130 - 0x0000)
struct alignas(0x11508130) FTresFieldAddProjectileParam_e_ex357 final
{
public:
	float                                         OffsetAngle;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFieldAddProjectileParam_e_ex357) == 0x11508130, "Wrong alignment on FTresFieldAddProjectileParam_e_ex357");
static_assert(sizeof(FTresFieldAddProjectileParam_e_ex357) == 0x11508130, "Wrong size on FTresFieldAddProjectileParam_e_ex357");
static_assert(offsetof(FTresFieldAddProjectileParam_e_ex357, OffsetAngle) == 0x000000, "Member 'FTresFieldAddProjectileParam_e_ex357::OffsetAngle' has a wrong offset!");
static_assert(offsetof(FTresFieldAddProjectileParam_e_ex357, Distance) == 0x000004, "Member 'FTresFieldAddProjectileParam_e_ex357::Distance' has a wrong offset!");

// ScriptStruct TresGame.RunAwayShipParam
// 0x0054 (0x0054 - 0x0000)
struct FRunAwayShipParam final
{
public:
	float                                         M_defaultVelocity;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxYawSpeed;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_turnRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_minSafeAreaYaw;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_maxSafeAreaYaw;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_minShotYaw;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_maxShotYaw;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_minShotDistance;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_maxShotDistance;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_shotRandamLength;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_shotRandamDistanceFactor;                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_shotRandamMoveDirectionFactor;                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_shotInterval;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_minShotPitchAngle;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_maxShotPitchAngle;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_maxShotPitchDistance;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_numProjectilePerFrame;                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_offsetVector;                                    // 0x0044(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bStopMovement : 1;                               // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRunAwayShipParam) == 0x000004, "Wrong alignment on FRunAwayShipParam");
static_assert(sizeof(FRunAwayShipParam) == 0x000054, "Wrong size on FRunAwayShipParam");
static_assert(offsetof(FRunAwayShipParam, M_defaultVelocity) == 0x000000, "Member 'FRunAwayShipParam::M_defaultVelocity' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_MaxYawSpeed) == 0x000004, "Member 'FRunAwayShipParam::M_MaxYawSpeed' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_turnRate) == 0x000008, "Member 'FRunAwayShipParam::M_turnRate' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_minSafeAreaYaw) == 0x00000C, "Member 'FRunAwayShipParam::M_minSafeAreaYaw' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_maxSafeAreaYaw) == 0x000010, "Member 'FRunAwayShipParam::M_maxSafeAreaYaw' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_minShotYaw) == 0x000014, "Member 'FRunAwayShipParam::M_minShotYaw' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_maxShotYaw) == 0x000018, "Member 'FRunAwayShipParam::M_maxShotYaw' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_minShotDistance) == 0x00001C, "Member 'FRunAwayShipParam::M_minShotDistance' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_maxShotDistance) == 0x000020, "Member 'FRunAwayShipParam::M_maxShotDistance' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_shotRandamLength) == 0x000024, "Member 'FRunAwayShipParam::M_shotRandamLength' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_shotRandamDistanceFactor) == 0x000028, "Member 'FRunAwayShipParam::M_shotRandamDistanceFactor' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_shotRandamMoveDirectionFactor) == 0x00002C, "Member 'FRunAwayShipParam::M_shotRandamMoveDirectionFactor' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_shotInterval) == 0x000030, "Member 'FRunAwayShipParam::M_shotInterval' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_minShotPitchAngle) == 0x000034, "Member 'FRunAwayShipParam::M_minShotPitchAngle' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_maxShotPitchAngle) == 0x000038, "Member 'FRunAwayShipParam::M_maxShotPitchAngle' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_maxShotPitchDistance) == 0x00003C, "Member 'FRunAwayShipParam::M_maxShotPitchDistance' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_numProjectilePerFrame) == 0x000040, "Member 'FRunAwayShipParam::M_numProjectilePerFrame' has a wrong offset!");
static_assert(offsetof(FRunAwayShipParam, M_offsetVector) == 0x000044, "Member 'FRunAwayShipParam::M_offsetVector' has a wrong offset!");

// ScriptStruct TresGame.EX355_DashRoamDir
// 0x114C3DA0 (0x114C3DA0 - 0x0000)
struct alignas(0x114C3DA0) FEX355_DashRoamDir final
{
public:
	EEX355_DashRoamDir                            M_DashRoamDir;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_DashRoamDir                            M_DashAttackDir;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_DashMiddleAction                       M_DashMiddleAction;                                // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fDashMiddleActionTime;                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_DashRoamDir) == 0x114C3DA0, "Wrong alignment on FEX355_DashRoamDir");
static_assert(sizeof(FEX355_DashRoamDir) == 0x114C3DA0, "Wrong size on FEX355_DashRoamDir");
static_assert(offsetof(FEX355_DashRoamDir, M_DashRoamDir) == 0x000000, "Member 'FEX355_DashRoamDir::M_DashRoamDir' has a wrong offset!");
static_assert(offsetof(FEX355_DashRoamDir, M_DashAttackDir) == 0x000001, "Member 'FEX355_DashRoamDir::M_DashAttackDir' has a wrong offset!");
static_assert(offsetof(FEX355_DashRoamDir, M_DashMiddleAction) == 0x000002, "Member 'FEX355_DashRoamDir::M_DashMiddleAction' has a wrong offset!");
static_assert(offsetof(FEX355_DashRoamDir, M_fDashMiddleActionTime) == 0x000004, "Member 'FEX355_DashRoamDir::M_fDashMiddleActionTime' has a wrong offset!");

// ScriptStruct TresGame.TresWildDanceParam_e_ex358
// 0x0010 (0x0010 - 0x0000)
struct FTresWildDanceParam_e_ex358 final
{
public:
	TArray<struct FTresWildDanceAllActionParam_e_ex358> ActionParamList;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWildDanceParam_e_ex358) == 0x000008, "Wrong alignment on FTresWildDanceParam_e_ex358");
static_assert(sizeof(FTresWildDanceParam_e_ex358) == 0x000010, "Wrong size on FTresWildDanceParam_e_ex358");
static_assert(offsetof(FTresWildDanceParam_e_ex358, ActionParamList) == 0x000000, "Member 'FTresWildDanceParam_e_ex358::ActionParamList' has a wrong offset!");

// ScriptStruct TresGame.EX355_ThrowHomingSecondInfo
// 0x11562EC0 (0x11562EC0 - 0x0000)
struct alignas(0x11562EC0) FEX355_ThrowHomingSecondInfo final
{
public:
	float                                         M_fMinHomingDistance;                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingAngle;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInitHomingRotateVelocity;                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingRotateVelocity;                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingRotateAccel;                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxHomingAngleIgnoreTime;                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bEnableGrabityOnDisablingHomingToLandTarget;     // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fGravityScale;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_ThrowHomingSecondInfo) == 0x11562EC0, "Wrong alignment on FEX355_ThrowHomingSecondInfo");
static_assert(sizeof(FEX355_ThrowHomingSecondInfo) == 0x11562EC0, "Wrong size on FEX355_ThrowHomingSecondInfo");
static_assert(offsetof(FEX355_ThrowHomingSecondInfo, M_fMinHomingDistance) == 0x000000, "Member 'FEX355_ThrowHomingSecondInfo::M_fMinHomingDistance' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingSecondInfo, M_fMaxHomingAngle) == 0x000004, "Member 'FEX355_ThrowHomingSecondInfo::M_fMaxHomingAngle' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingSecondInfo, M_fInitHomingRotateVelocity) == 0x000008, "Member 'FEX355_ThrowHomingSecondInfo::M_fInitHomingRotateVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingSecondInfo, M_fMaxHomingRotateVelocity) == 0x00000C, "Member 'FEX355_ThrowHomingSecondInfo::M_fMaxHomingRotateVelocity' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingSecondInfo, M_fHomingRotateAccel) == 0x000010, "Member 'FEX355_ThrowHomingSecondInfo::M_fHomingRotateAccel' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingSecondInfo, M_fMaxHomingAngleIgnoreTime) == 0x000014, "Member 'FEX355_ThrowHomingSecondInfo::M_fMaxHomingAngleIgnoreTime' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingSecondInfo, M_bEnableGrabityOnDisablingHomingToLandTarget) == 0x000018, "Member 'FEX355_ThrowHomingSecondInfo::M_bEnableGrabityOnDisablingHomingToLandTarget' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowHomingSecondInfo, M_fGravityScale) == 0x00001C, "Member 'FEX355_ThrowHomingSecondInfo::M_fGravityScale' has a wrong offset!");

// ScriptStruct TresGame.DestinaionCandidate_e_ex035
// 0x1183C (0x1183C - 0x0000)
struct alignas(0x1183C) FDestinaionCandidate_e_ex035 final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDestinaionCandidate_e_ex035) == 0x01183C, "Wrong alignment on FDestinaionCandidate_e_ex035");
static_assert(sizeof(FDestinaionCandidate_e_ex035) == 0x01183C, "Wrong size on FDestinaionCandidate_e_ex035");

// ScriptStruct TresGame.TresInterpTrackBonamikControlKey
// 0x0048 (0x0048 - 0x0000)
struct FTresInterpTrackBonamikControlKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_Reset;                                           // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_ResetPose;                                       // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_ReinitializeSimulationPose;                      // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_RestoreDefaultParams;                            // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_PreRoll;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_PreRollForAttachment;                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         M_Groups;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_ControlType                     M_SimulationOnOff;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_ControlType                     M_GroundOnOff;                                     // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_ChangeInnerCone;                                 // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_InnerConeScale;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_ChangeOuterCone;                                 // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_OuterConeScale;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_ChangeLocalForce;                                // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_LocalForceScale;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_ChangeWindScale;                                 // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_GroupWindScale;                                  // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_ChangeHighFPSEvaluation;                         // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_EnableHighFPSEvaluation;                         // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresInterpTrackBonamikControlKey) == 0x000008, "Wrong alignment on FTresInterpTrackBonamikControlKey");
static_assert(sizeof(FTresInterpTrackBonamikControlKey) == 0x000048, "Wrong size on FTresInterpTrackBonamikControlKey");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_Time) == 0x000000, "Member 'FTresInterpTrackBonamikControlKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_Reset) == 0x000004, "Member 'FTresInterpTrackBonamikControlKey::M_Reset' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_ResetPose) == 0x000005, "Member 'FTresInterpTrackBonamikControlKey::M_ResetPose' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_ReinitializeSimulationPose) == 0x000006, "Member 'FTresInterpTrackBonamikControlKey::M_ReinitializeSimulationPose' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_RestoreDefaultParams) == 0x000007, "Member 'FTresInterpTrackBonamikControlKey::M_RestoreDefaultParams' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_PreRoll) == 0x000008, "Member 'FTresInterpTrackBonamikControlKey::M_PreRoll' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_PreRollForAttachment) == 0x00000C, "Member 'FTresInterpTrackBonamikControlKey::M_PreRollForAttachment' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_Groups) == 0x000010, "Member 'FTresInterpTrackBonamikControlKey::M_Groups' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_SimulationOnOff) == 0x000020, "Member 'FTresInterpTrackBonamikControlKey::M_SimulationOnOff' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_GroundOnOff) == 0x000021, "Member 'FTresInterpTrackBonamikControlKey::M_GroundOnOff' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_ChangeInnerCone) == 0x000022, "Member 'FTresInterpTrackBonamikControlKey::M_ChangeInnerCone' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_InnerConeScale) == 0x000024, "Member 'FTresInterpTrackBonamikControlKey::M_InnerConeScale' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_ChangeOuterCone) == 0x000028, "Member 'FTresInterpTrackBonamikControlKey::M_ChangeOuterCone' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_OuterConeScale) == 0x00002C, "Member 'FTresInterpTrackBonamikControlKey::M_OuterConeScale' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_ChangeLocalForce) == 0x000030, "Member 'FTresInterpTrackBonamikControlKey::M_ChangeLocalForce' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_LocalForceScale) == 0x000034, "Member 'FTresInterpTrackBonamikControlKey::M_LocalForceScale' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_ChangeWindScale) == 0x000038, "Member 'FTresInterpTrackBonamikControlKey::M_ChangeWindScale' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_GroupWindScale) == 0x00003C, "Member 'FTresInterpTrackBonamikControlKey::M_GroupWindScale' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_ChangeHighFPSEvaluation) == 0x000040, "Member 'FTresInterpTrackBonamikControlKey::M_ChangeHighFPSEvaluation' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikControlKey, M_EnableHighFPSEvaluation) == 0x000041, "Member 'FTresInterpTrackBonamikControlKey::M_EnableHighFPSEvaluation' has a wrong offset!");

// ScriptStruct TresGame.MeleeRootMotionScaleParam_e_ex358
// 0x114C0760 (0x114C0760 - 0x0000)
struct alignas(0x114C0760) FMeleeRootMotionScaleParam_e_ex358 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeRootMotionScaleParam_e_ex358) == 0x114C0760, "Wrong alignment on FMeleeRootMotionScaleParam_e_ex358");
static_assert(sizeof(FMeleeRootMotionScaleParam_e_ex358) == 0x114C0760, "Wrong size on FMeleeRootMotionScaleParam_e_ex358");
static_assert(offsetof(FMeleeRootMotionScaleParam_e_ex358, Distance) == 0x000000, "Member 'FMeleeRootMotionScaleParam_e_ex358::Distance' has a wrong offset!");
static_assert(offsetof(FMeleeRootMotionScaleParam_e_ex358, RootMotionScale) == 0x000004, "Member 'FMeleeRootMotionScaleParam_e_ex358::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_ScaffoldParam
// 0x0038 (0x0038 - 0x0000)
struct FTresEnemyEx711_ScaffoldParam final
{
public:
	class AStaticMeshActor*                       M_pActor;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x30];                                       // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_ScaffoldParam) == 0x000008, "Wrong alignment on FTresEnemyEx711_ScaffoldParam");
static_assert(sizeof(FTresEnemyEx711_ScaffoldParam) == 0x000038, "Wrong size on FTresEnemyEx711_ScaffoldParam");
static_assert(offsetof(FTresEnemyEx711_ScaffoldParam, M_pActor) == 0x000000, "Member 'FTresEnemyEx711_ScaffoldParam::M_pActor' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickMeteorTable
// 0x1159F0 (0x11528A70 - 0x11413080)
struct alignas(0x11528A70) FTresGumiShipGimmickMeteorTable final : public FTableRowBase
{
public:
	int32                                         M_MeteoroHP;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_pHoleVFX;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_pGuideVFX;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_pMeteoroVFX;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_pMuzzleVFX;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_pDeadVFX;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStartDispTimer;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEndDispTimer;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_pMuzzleTimer;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStartTimer;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fScaleTimer;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fGlowTimer;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInitalScale;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEffectScale;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipGimmickMeteorTable) == 0x11528A70, "Wrong alignment on FTresGumiShipGimmickMeteorTable");
static_assert(sizeof(FTresGumiShipGimmickMeteorTable) == 0x11528A70, "Wrong size on FTresGumiShipGimmickMeteorTable");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_MeteoroHP) == 0x000008, "Member 'FTresGumiShipGimmickMeteorTable::M_MeteoroHP' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_pHoleVFX) == 0x000010, "Member 'FTresGumiShipGimmickMeteorTable::M_pHoleVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_pGuideVFX) == 0x000018, "Member 'FTresGumiShipGimmickMeteorTable::M_pGuideVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_pMeteoroVFX) == 0x000020, "Member 'FTresGumiShipGimmickMeteorTable::M_pMeteoroVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_pMuzzleVFX) == 0x000028, "Member 'FTresGumiShipGimmickMeteorTable::M_pMuzzleVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_pDeadVFX) == 0x000030, "Member 'FTresGumiShipGimmickMeteorTable::M_pDeadVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_fStartDispTimer) == 0x000038, "Member 'FTresGumiShipGimmickMeteorTable::M_fStartDispTimer' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_fEndDispTimer) == 0x00003C, "Member 'FTresGumiShipGimmickMeteorTable::M_fEndDispTimer' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_pMuzzleTimer) == 0x000040, "Member 'FTresGumiShipGimmickMeteorTable::M_pMuzzleTimer' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_fStartTimer) == 0x000044, "Member 'FTresGumiShipGimmickMeteorTable::M_fStartTimer' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_fScaleTimer) == 0x000048, "Member 'FTresGumiShipGimmickMeteorTable::M_fScaleTimer' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_fGlowTimer) == 0x00004C, "Member 'FTresGumiShipGimmickMeteorTable::M_fGlowTimer' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_fInitalScale) == 0x000050, "Member 'FTresGumiShipGimmickMeteorTable::M_fInitalScale' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMeteorTable, M_fEffectScale) == 0x000054, "Member 'FTresGumiShipGimmickMeteorTable::M_fEffectScale' has a wrong offset!");

// ScriptStruct TresGame.RaiseCutRootMotionScaleParam_e_ex761
// 0x114C0930 (0x114C0930 - 0x0000)
struct alignas(0x114C0930) FRaiseCutRootMotionScaleParam_e_ex761 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaiseCutRootMotionScaleParam_e_ex761) == 0x114C0930, "Wrong alignment on FRaiseCutRootMotionScaleParam_e_ex761");
static_assert(sizeof(FRaiseCutRootMotionScaleParam_e_ex761) == 0x114C0930, "Wrong size on FRaiseCutRootMotionScaleParam_e_ex761");
static_assert(offsetof(FRaiseCutRootMotionScaleParam_e_ex761, Distance) == 0x000000, "Member 'FRaiseCutRootMotionScaleParam_e_ex761::Distance' has a wrong offset!");
static_assert(offsetof(FRaiseCutRootMotionScaleParam_e_ex761, RootMotionScale) == 0x000004, "Member 'FRaiseCutRootMotionScaleParam_e_ex761::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.TresAccelAttackInfo_e_ex310
// 0x114DEA80 (0x114DEA80 - 0x0000)
struct alignas(0x114DEA80) FTresAccelAttackInfo_e_ex310 final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         A;                                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X_min;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X_max;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAccelAttackInfo_e_ex310) == 0x114DEA80, "Wrong alignment on FTresAccelAttackInfo_e_ex310");
static_assert(sizeof(FTresAccelAttackInfo_e_ex310) == 0x114DEA80, "Wrong size on FTresAccelAttackInfo_e_ex310");
static_assert(offsetof(FTresAccelAttackInfo_e_ex310, bValid) == 0x000000, "Member 'FTresAccelAttackInfo_e_ex310::bValid' has a wrong offset!");
static_assert(offsetof(FTresAccelAttackInfo_e_ex310, A) == 0x000004, "Member 'FTresAccelAttackInfo_e_ex310::A' has a wrong offset!");
static_assert(offsetof(FTresAccelAttackInfo_e_ex310, B) == 0x000008, "Member 'FTresAccelAttackInfo_e_ex310::B' has a wrong offset!");
static_assert(offsetof(FTresAccelAttackInfo_e_ex310, X_min) == 0x00000C, "Member 'FTresAccelAttackInfo_e_ex310::X_min' has a wrong offset!");
static_assert(offsetof(FTresAccelAttackInfo_e_ex310, X_max) == 0x000010, "Member 'FTresAccelAttackInfo_e_ex310::X_max' has a wrong offset!");

// ScriptStruct TresGame.ProjectileSpawnInfo
// 0x114C0B00 (0x114C0B00 - 0x0000)
struct alignas(0x114C0B00) FProjectileSpawnInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_SocketName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iMaxShotCount;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fProjectileVariance;                             // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMinProjectileDiameter;                          // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxProjectileDiameter;                          // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileSpawnInfo) == 0x114C0B00, "Wrong alignment on FProjectileSpawnInfo");
static_assert(sizeof(FProjectileSpawnInfo) == 0x114C0B00, "Wrong size on FProjectileSpawnInfo");
static_assert(offsetof(FProjectileSpawnInfo, M_SocketName) == 0x000008, "Member 'FProjectileSpawnInfo::M_SocketName' has a wrong offset!");
static_assert(offsetof(FProjectileSpawnInfo, M_iMaxShotCount) == 0x000010, "Member 'FProjectileSpawnInfo::M_iMaxShotCount' has a wrong offset!");
static_assert(offsetof(FProjectileSpawnInfo, M_fProjectileVariance) == 0x000014, "Member 'FProjectileSpawnInfo::M_fProjectileVariance' has a wrong offset!");
static_assert(offsetof(FProjectileSpawnInfo, M_fMinProjectileDiameter) == 0x000018, "Member 'FProjectileSpawnInfo::M_fMinProjectileDiameter' has a wrong offset!");
static_assert(offsetof(FProjectileSpawnInfo, M_fMaxProjectileDiameter) == 0x00001C, "Member 'FProjectileSpawnInfo::M_fMaxProjectileDiameter' has a wrong offset!");

// ScriptStruct TresGame.TresRaDanceSplineOwner
// 0x0030 (0x0030 - 0x0000)
struct FTresRaDanceSplineOwner final
{
public:
	TWeakObjectPtr<class ATresCharPawnBase>       M_pOwner;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITresRaDanceSplineInterface> M_pSplineInterface;                                // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         M_nPrevArea;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nAreaGroupIndex;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMoveSpeed;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTurnSpeed;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bSelect;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRaDanceSplineOwner) == 0x000008, "Wrong alignment on FTresRaDanceSplineOwner");
static_assert(sizeof(FTresRaDanceSplineOwner) == 0x000030, "Wrong size on FTresRaDanceSplineOwner");
static_assert(offsetof(FTresRaDanceSplineOwner, M_pOwner) == 0x000000, "Member 'FTresRaDanceSplineOwner::M_pOwner' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineOwner, M_pSplineInterface) == 0x000008, "Member 'FTresRaDanceSplineOwner::M_pSplineInterface' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineOwner, M_nPrevArea) == 0x000018, "Member 'FTresRaDanceSplineOwner::M_nPrevArea' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineOwner, M_nAreaGroupIndex) == 0x00001C, "Member 'FTresRaDanceSplineOwner::M_nAreaGroupIndex' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineOwner, M_fMoveSpeed) == 0x000020, "Member 'FTresRaDanceSplineOwner::M_fMoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineOwner, M_fTurnSpeed) == 0x000024, "Member 'FTresRaDanceSplineOwner::M_fTurnSpeed' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineOwner, M_bSelect) == 0x000028, "Member 'FTresRaDanceSplineOwner::M_bSelect' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGuideObjects
// 0x0058 (0x0058 - 0x0000)
struct FTresGumiShipGuideObjects final
{
public:
	class UGFxObject*                             M_pGuide;                                          // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pCursor;                                         // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pDist;                                           // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pIcon;                                           // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pLevel;                                          // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pNormalLevel;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pBossLevel;                                      // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipGuideObjects) == 0x000008, "Wrong alignment on FTresGumiShipGuideObjects");
static_assert(sizeof(FTresGumiShipGuideObjects) == 0x000058, "Wrong size on FTresGumiShipGuideObjects");
static_assert(offsetof(FTresGumiShipGuideObjects, M_pGuide) == 0x000000, "Member 'FTresGumiShipGuideObjects::M_pGuide' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGuideObjects, M_pCursor) == 0x000008, "Member 'FTresGumiShipGuideObjects::M_pCursor' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGuideObjects, M_pDist) == 0x000010, "Member 'FTresGumiShipGuideObjects::M_pDist' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGuideObjects, M_pIcon) == 0x000018, "Member 'FTresGumiShipGuideObjects::M_pIcon' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGuideObjects, M_pLevel) == 0x000020, "Member 'FTresGumiShipGuideObjects::M_pLevel' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGuideObjects, M_pNormalLevel) == 0x000028, "Member 'FTresGumiShipGuideObjects::M_pNormalLevel' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGuideObjects, M_pBossLevel) == 0x000030, "Member 'FTresGumiShipGuideObjects::M_pBossLevel' has a wrong offset!");

// ScriptStruct TresGame.TresTeaCupPuddingData
// 0x00E0 (0x00E0 - 0x0000)
struct FTresTeaCupPuddingData final
{
public:
	class ATresEnemyPawn_e_ex050*                 M_pPuddingPawn;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8[0xD8];                                       // 0x0008(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTeaCupPuddingData) == 0x000008, "Wrong alignment on FTresTeaCupPuddingData");
static_assert(sizeof(FTresTeaCupPuddingData) == 0x0000E0, "Wrong size on FTresTeaCupPuddingData");
static_assert(offsetof(FTresTeaCupPuddingData, M_pPuddingPawn) == 0x000000, "Member 'FTresTeaCupPuddingData::M_pPuddingPawn' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405_AvatarStyleFinishVelocityParam
// 0x114C25A0 (0x114C25A0 - 0x0000)
struct alignas(0x114C25A0) FTresE_dw405_AvatarStyleFinishVelocityParam final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableSettingAcceleration : 1;                    // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Acceleration;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationTime;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSpeed;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_dw405_AvatarStyleFinishVelocityParam) == 0x114C25A0, "Wrong alignment on FTresE_dw405_AvatarStyleFinishVelocityParam");
static_assert(sizeof(FTresE_dw405_AvatarStyleFinishVelocityParam) == 0x114C25A0, "Wrong size on FTresE_dw405_AvatarStyleFinishVelocityParam");
static_assert(offsetof(FTresE_dw405_AvatarStyleFinishVelocityParam, StartTime) == 0x000000, "Member 'FTresE_dw405_AvatarStyleFinishVelocityParam::StartTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405_AvatarStyleFinishVelocityParam, Acceleration) == 0x000008, "Member 'FTresE_dw405_AvatarStyleFinishVelocityParam::Acceleration' has a wrong offset!");
static_assert(offsetof(FTresE_dw405_AvatarStyleFinishVelocityParam, InterpolationTime) == 0x00000C, "Member 'FTresE_dw405_AvatarStyleFinishVelocityParam::InterpolationTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405_AvatarStyleFinishVelocityParam, TargetSpeed) == 0x000010, "Member 'FTresE_dw405_AvatarStyleFinishVelocityParam::TargetSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresAgentInfoStruct
// 0x11552A00 (0x11552A00 - 0x0000)
struct alignas(0x11552A00) FTresAgentInfoStruct final
{
public:
	TSubclassOf<class APawn>                      AgentType;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AgentActor;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentRadius;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentHeight;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAgentInfoStruct) == 0x11552A00, "Wrong alignment on FTresAgentInfoStruct");
static_assert(sizeof(FTresAgentInfoStruct) == 0x11552A00, "Wrong size on FTresAgentInfoStruct");
static_assert(offsetof(FTresAgentInfoStruct, AgentType) == 0x000000, "Member 'FTresAgentInfoStruct::AgentType' has a wrong offset!");
static_assert(offsetof(FTresAgentInfoStruct, AgentActor) == 0x000008, "Member 'FTresAgentInfoStruct::AgentActor' has a wrong offset!");
static_assert(offsetof(FTresAgentInfoStruct, AgentRadius) == 0x000010, "Member 'FTresAgentInfoStruct::AgentRadius' has a wrong offset!");
static_assert(offsetof(FTresAgentInfoStruct, AgentHeight) == 0x000014, "Member 'FTresAgentInfoStruct::AgentHeight' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405NormalComboParam
// 0x0040 (0x0040 - 0x0000)
struct FTresE_dw405NormalComboParam final
{
public:
	ETresEnemyDw405AttackPossibleKind             AttackPossibleKind;                                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDisableLastAttackNotifyDisappear : 1;             // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastAttackPostWaitTime;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableFixedAngle : 1;                             // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearAngle;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresE_dw405CounterAttackParam> CounterAttackParam;                                // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         CounterRate;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresE_dw405NormalComboAttackParamType> AttackParams;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_dw405NormalComboParam) == 0x000008, "Wrong alignment on FTresE_dw405NormalComboParam");
static_assert(sizeof(FTresE_dw405NormalComboParam) == 0x000040, "Wrong size on FTresE_dw405NormalComboParam");
static_assert(offsetof(FTresE_dw405NormalComboParam, AttackPossibleKind) == 0x000000, "Member 'FTresE_dw405NormalComboParam::AttackPossibleKind' has a wrong offset!");
static_assert(offsetof(FTresE_dw405NormalComboParam, LastAttackPostWaitTime) == 0x000008, "Member 'FTresE_dw405NormalComboParam::LastAttackPostWaitTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405NormalComboParam, AppearAngle) == 0x000010, "Member 'FTresE_dw405NormalComboParam::AppearAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405NormalComboParam, CounterAttackParam) == 0x000018, "Member 'FTresE_dw405NormalComboParam::CounterAttackParam' has a wrong offset!");
static_assert(offsetof(FTresE_dw405NormalComboParam, CounterRate) == 0x000028, "Member 'FTresE_dw405NormalComboParam::CounterRate' has a wrong offset!");
static_assert(offsetof(FTresE_dw405NormalComboParam, AttackParams) == 0x000030, "Member 'FTresE_dw405NormalComboParam::AttackParams' has a wrong offset!");

// ScriptStruct TresGame.MeleeRootMotionScaleParam_e_ex043
// 0x114C2930 (0x114C2930 - 0x0000)
struct alignas(0x114C2930) FMeleeRootMotionScaleParam_e_ex043 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeRootMotionScaleParam_e_ex043) == 0x114C2930, "Wrong alignment on FMeleeRootMotionScaleParam_e_ex043");
static_assert(sizeof(FMeleeRootMotionScaleParam_e_ex043) == 0x114C2930, "Wrong size on FMeleeRootMotionScaleParam_e_ex043");
static_assert(offsetof(FMeleeRootMotionScaleParam_e_ex043, Distance) == 0x000000, "Member 'FMeleeRootMotionScaleParam_e_ex043::Distance' has a wrong offset!");
static_assert(offsetof(FMeleeRootMotionScaleParam_e_ex043, RootMotionScale) == 0x000004, "Member 'FMeleeRootMotionScaleParam_e_ex043::RootMotionScale' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipTextSet
// 0x1152C180 (0x1152C180 - 0x0000)
struct alignas(0x1152C180) FTresGumiShipTextSet final
{
public:
	class FString                                 M_strNamespace;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_strKey;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipTextSet) == 0x1152C180, "Wrong alignment on FTresGumiShipTextSet");
static_assert(sizeof(FTresGumiShipTextSet) == 0x1152C180, "Wrong size on FTresGumiShipTextSet");
static_assert(offsetof(FTresGumiShipTextSet, M_strNamespace) == 0x000000, "Member 'FTresGumiShipTextSet::M_strNamespace' has a wrong offset!");
static_assert(offsetof(FTresGumiShipTextSet, M_strKey) == 0x000010, "Member 'FTresGumiShipTextSet::M_strKey' has a wrong offset!");

// ScriptStruct TresGame.TresBoneNames_e_ex011
// 0x114F4F90 (0x114F4F90 - 0x0000)
struct alignas(0x114F4F90) FTresBoneNames_e_ex011 final
{
public:
	class FName                                   ParentConnectBoneName;                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildConnectBoneName;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBoneNames_e_ex011) == 0x114F4F90, "Wrong alignment on FTresBoneNames_e_ex011");
static_assert(sizeof(FTresBoneNames_e_ex011) == 0x114F4F90, "Wrong size on FTresBoneNames_e_ex011");
static_assert(offsetof(FTresBoneNames_e_ex011, ParentConnectBoneName) == 0x000000, "Member 'FTresBoneNames_e_ex011::ParentConnectBoneName' has a wrong offset!");
static_assert(offsetof(FTresBoneNames_e_ex011, ChildConnectBoneName) == 0x000008, "Member 'FTresBoneNames_e_ex011::ChildConnectBoneName' has a wrong offset!");

// ScriptStruct TresGame.EX355_DashClaymoreSet
// 0x00D0 (0x00D0 - 0x0000)
struct FEX355_DashClaymoreSet final
{
public:
	class ATresProjectile_e_ex355_Claymore_Idle*  M_Claymore;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0xC0];                                      // 0x0010(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_DashClaymoreSet) == 0x000008, "Wrong alignment on FEX355_DashClaymoreSet");
static_assert(sizeof(FEX355_DashClaymoreSet) == 0x0000D0, "Wrong size on FEX355_DashClaymoreSet");
static_assert(offsetof(FEX355_DashClaymoreSet, M_Claymore) == 0x000000, "Member 'FEX355_DashClaymoreSet::M_Claymore' has a wrong offset!");
static_assert(offsetof(FEX355_DashClaymoreSet, M_Owner) == 0x000008, "Member 'FEX355_DashClaymoreSet::M_Owner' has a wrong offset!");

// ScriptStruct TresGame.TresSoKcKeyHoleGimmickCommonParameter
// 0x164B20 (0x11577BA0 - 0x11413080)
struct alignas(0x11577BA0) FTresSoKcKeyHoleGimmickCommonParameter final : public FTableRowBase
{
public:
	float                                         M_fConnectBeamMaxSpeed;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fConnectBeamInitialSpeed;                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fConnectBeamAcceleration;                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLastLightConnectBeamMaxSpeed;                   // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLastLightConnectBeamInitialSpeed;               // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLastLightConnectBeamAcceleration;               // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nConnectedKeyHolePassableLimitNum;               // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresUInt8_Range                       M_NormalKeyHoleConnectableCountRange;              // 0x0024(0x0002)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresUInt8_Range                       M_ChanceMarkerKeyHoleConnectableCountRange;        // 0x0026(0x0002)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresUInt8_Range                       M_BigChanceMarkerKeyHoleConnectableCountRange;     // 0x0028(0x0002)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         M_uChanceMarkerLimitNum;                           // 0x002A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_uBigChanceMarkerLimitNum;                        // 0x002B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fChanceMarkerProbability;                        // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fBigChanceMarkerProbability;                     // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 M_ChanceMarkerPatternDistributionTable;            // 0x0038(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 M_ChanceMarkerLimitTimeTable;                      // 0x0048(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         M_fBigChanceMarkerLimitTime;                       // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nBigChanceMarkerNormaConnectedCount;             // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSoKcKeyHoleGimmickCommonParameter) == 0x11577BA0, "Wrong alignment on FTresSoKcKeyHoleGimmickCommonParameter");
static_assert(sizeof(FTresSoKcKeyHoleGimmickCommonParameter) == 0x11577BA0, "Wrong size on FTresSoKcKeyHoleGimmickCommonParameter");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_fConnectBeamMaxSpeed) == 0x000008, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_fConnectBeamMaxSpeed' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_fConnectBeamInitialSpeed) == 0x00000C, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_fConnectBeamInitialSpeed' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_fConnectBeamAcceleration) == 0x000010, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_fConnectBeamAcceleration' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_fLastLightConnectBeamMaxSpeed) == 0x000014, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_fLastLightConnectBeamMaxSpeed' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_fLastLightConnectBeamInitialSpeed) == 0x000018, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_fLastLightConnectBeamInitialSpeed' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_fLastLightConnectBeamAcceleration) == 0x00001C, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_fLastLightConnectBeamAcceleration' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_nConnectedKeyHolePassableLimitNum) == 0x000020, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_nConnectedKeyHolePassableLimitNum' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_NormalKeyHoleConnectableCountRange) == 0x000024, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_NormalKeyHoleConnectableCountRange' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_ChanceMarkerKeyHoleConnectableCountRange) == 0x000026, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_ChanceMarkerKeyHoleConnectableCountRange' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_BigChanceMarkerKeyHoleConnectableCountRange) == 0x000028, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_BigChanceMarkerKeyHoleConnectableCountRange' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_uChanceMarkerLimitNum) == 0x00002A, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_uChanceMarkerLimitNum' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_uBigChanceMarkerLimitNum) == 0x00002B, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_uBigChanceMarkerLimitNum' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_fChanceMarkerProbability) == 0x00002C, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_fChanceMarkerProbability' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_fBigChanceMarkerProbability) == 0x000030, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_fBigChanceMarkerProbability' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_ChanceMarkerPatternDistributionTable) == 0x000038, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_ChanceMarkerPatternDistributionTable' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_ChanceMarkerLimitTimeTable) == 0x000048, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_ChanceMarkerLimitTimeTable' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_fBigChanceMarkerLimitTime) == 0x000058, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_fBigChanceMarkerLimitTime' has a wrong offset!");
static_assert(offsetof(FTresSoKcKeyHoleGimmickCommonParameter, M_nBigChanceMarkerNormaConnectedCount) == 0x00005C, "Member 'FTresSoKcKeyHoleGimmickCommonParameter::M_nBigChanceMarkerNormaConnectedCount' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamOnCircleInfo
// 0x115506E0 (0x115506E0 - 0x0000)
struct alignas(0x115506E0) FEX359_BeamOnCircleInfo final
{
public:
	float                                         M_fAngle;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iNotify;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_BeamOnCircleInfo) == 0x115506E0, "Wrong alignment on FEX359_BeamOnCircleInfo");
static_assert(sizeof(FEX359_BeamOnCircleInfo) == 0x115506E0, "Wrong size on FEX359_BeamOnCircleInfo");
static_assert(offsetof(FEX359_BeamOnCircleInfo, M_fAngle) == 0x000000, "Member 'FEX359_BeamOnCircleInfo::M_fAngle' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnCircleInfo, M_iNotify) == 0x000004, "Member 'FEX359_BeamOnCircleInfo::M_iNotify' has a wrong offset!");

// ScriptStruct TresGame.DrawTextFilterParam
// 0x114E89A0 (0x114E89A0 - 0x0000)
struct alignas(0x114E89A0) FDrawTextFilterParam final
{
public:
	EDrawTextFilterType                           M_FilterType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_BlurX;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BlurY;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Strength;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 M_Color;                                           // 0x0010(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Angle;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Distance;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDrawTextFilterParam) == 0x114E89A0, "Wrong alignment on FDrawTextFilterParam");
static_assert(sizeof(FDrawTextFilterParam) == 0x114E89A0, "Wrong size on FDrawTextFilterParam");
static_assert(offsetof(FDrawTextFilterParam, M_FilterType) == 0x000000, "Member 'FDrawTextFilterParam::M_FilterType' has a wrong offset!");
static_assert(offsetof(FDrawTextFilterParam, M_BlurX) == 0x000004, "Member 'FDrawTextFilterParam::M_BlurX' has a wrong offset!");
static_assert(offsetof(FDrawTextFilterParam, M_BlurY) == 0x000008, "Member 'FDrawTextFilterParam::M_BlurY' has a wrong offset!");
static_assert(offsetof(FDrawTextFilterParam, M_Strength) == 0x00000C, "Member 'FDrawTextFilterParam::M_Strength' has a wrong offset!");
static_assert(offsetof(FDrawTextFilterParam, M_Color) == 0x000010, "Member 'FDrawTextFilterParam::M_Color' has a wrong offset!");
static_assert(offsetof(FDrawTextFilterParam, M_Angle) == 0x000014, "Member 'FDrawTextFilterParam::M_Angle' has a wrong offset!");
static_assert(offsetof(FDrawTextFilterParam, M_Distance) == 0x000018, "Member 'FDrawTextFilterParam::M_Distance' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipRailSwitchInfo
// 0x0014 (0x0014 - 0x0000)
struct FTresGumiShipRailSwitchInfo final
{
public:
	TWeakObjectPtr<class ATresRailSlideActor>     M_pDefaultOnRail;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ATresRailSlideActor>     M_pDefaultOffRail;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipRailSwitchInfo) == 0x000004, "Wrong alignment on FTresGumiShipRailSwitchInfo");
static_assert(sizeof(FTresGumiShipRailSwitchInfo) == 0x000014, "Wrong size on FTresGumiShipRailSwitchInfo");
static_assert(offsetof(FTresGumiShipRailSwitchInfo, M_pDefaultOnRail) == 0x000000, "Member 'FTresGumiShipRailSwitchInfo::M_pDefaultOnRail' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRailSwitchInfo, M_pDefaultOffRail) == 0x000008, "Member 'FTresGumiShipRailSwitchInfo::M_pDefaultOffRail' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipRailSwitchInfos
// 0x1152B0F0 (0x1152B0F0 - 0x0000)
struct alignas(0x1152B0F0) FTresGumiShipRailSwitchInfos final
{
public:
	TArray<struct FTresGumiShipRailSwitchInfo>    M_Infos;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   M_RailSwitchName;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipRailSwitchInfos) == 0x1152B0F0, "Wrong alignment on FTresGumiShipRailSwitchInfos");
static_assert(sizeof(FTresGumiShipRailSwitchInfos) == 0x1152B0F0, "Wrong size on FTresGumiShipRailSwitchInfos");
static_assert(offsetof(FTresGumiShipRailSwitchInfos, M_Infos) == 0x000000, "Member 'FTresGumiShipRailSwitchInfos::M_Infos' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRailSwitchInfos, M_RailSwitchName) == 0x000010, "Member 'FTresGumiShipRailSwitchInfos::M_RailSwitchName' has a wrong offset!");

// ScriptStruct TresGame.TresSpecialShipPointInfo
// 0x0028 (0x0028 - 0x0000)
struct FTresSpecialShipPointInfo final
{
public:
	class UTresASProxyTresControlsButton*         M_pGFxMarker;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pGFxSave;                                        // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pGFxVisited;                                     // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pGFxNext;                                        // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSpecialShipPointInfo) == 0x000008, "Wrong alignment on FTresSpecialShipPointInfo");
static_assert(sizeof(FTresSpecialShipPointInfo) == 0x000028, "Wrong size on FTresSpecialShipPointInfo");
static_assert(offsetof(FTresSpecialShipPointInfo, M_pGFxMarker) == 0x000000, "Member 'FTresSpecialShipPointInfo::M_pGFxMarker' has a wrong offset!");
static_assert(offsetof(FTresSpecialShipPointInfo, M_pGFxSave) == 0x000008, "Member 'FTresSpecialShipPointInfo::M_pGFxSave' has a wrong offset!");
static_assert(offsetof(FTresSpecialShipPointInfo, M_pGFxVisited) == 0x000010, "Member 'FTresSpecialShipPointInfo::M_pGFxVisited' has a wrong offset!");
static_assert(offsetof(FTresSpecialShipPointInfo, M_pGFxNext) == 0x000018, "Member 'FTresSpecialShipPointInfo::M_pGFxNext' has a wrong offset!");

// ScriptStruct TresGame.EX355_DashThrowTimingInfo
// 0x0014 (0x0014 - 0x0000)
struct FEX355_DashThrowTimingInfo final
{
public:
	int32                                         M_iIndex;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iRoamCount;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iAttackCount;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRoamTime;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x1];                                       // 0x0010(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          M_bAttack;                                         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_DashThrowTimingInfo) == 0x000004, "Wrong alignment on FEX355_DashThrowTimingInfo");
static_assert(sizeof(FEX355_DashThrowTimingInfo) == 0x000014, "Wrong size on FEX355_DashThrowTimingInfo");
static_assert(offsetof(FEX355_DashThrowTimingInfo, M_iIndex) == 0x000000, "Member 'FEX355_DashThrowTimingInfo::M_iIndex' has a wrong offset!");
static_assert(offsetof(FEX355_DashThrowTimingInfo, M_iRoamCount) == 0x000004, "Member 'FEX355_DashThrowTimingInfo::M_iRoamCount' has a wrong offset!");
static_assert(offsetof(FEX355_DashThrowTimingInfo, M_iAttackCount) == 0x000008, "Member 'FEX355_DashThrowTimingInfo::M_iAttackCount' has a wrong offset!");
static_assert(offsetof(FEX355_DashThrowTimingInfo, M_fRoamTime) == 0x00000C, "Member 'FEX355_DashThrowTimingInfo::M_fRoamTime' has a wrong offset!");
static_assert(offsetof(FEX355_DashThrowTimingInfo, M_bAttack) == 0x000011, "Member 'FEX355_DashThrowTimingInfo::M_bAttack' has a wrong offset!");

// ScriptStruct TresGame.TresPhotoHologramDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresPhotoHologramDataTable final : public FTableRowBase
{
public:
	class FName                                   M_AssetName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_Index;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_Comment;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHologramActorCategory                        M_Category;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_IdentifyName;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxCount;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_CharaNameNamespaceKey;                           // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                M_IconAsset;                                       // 0x0050(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_UIPriority;                                      // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_UICharaInfoPage;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_UICharaInfoSlotNo;                               // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_AreaCharaInfoMapSet;                             // 0x0080(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NewMarkIndex;                                    // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RootCollisionSize;                               // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_MapSetId;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_UnlockGameFlagName;                              // 0x0098(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_UnlockGameFlagLabelName;                         // 0x00A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_SaveIndex;                                       // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   M_HologramAsset;                                   // 0x00B0(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPhotoHologramDataTable) == 0x11413080, "Wrong alignment on FTresPhotoHologramDataTable");
static_assert(sizeof(FTresPhotoHologramDataTable) == 0x11413080, "Wrong size on FTresPhotoHologramDataTable");
static_assert(offsetof(FTresPhotoHologramDataTable, M_AssetName) == 0x000008, "Member 'FTresPhotoHologramDataTable::M_AssetName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_Index) == 0x000010, "Member 'FTresPhotoHologramDataTable::M_Index' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_Comment) == 0x000018, "Member 'FTresPhotoHologramDataTable::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_Category) == 0x000028, "Member 'FTresPhotoHologramDataTable::M_Category' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_IdentifyName) == 0x000030, "Member 'FTresPhotoHologramDataTable::M_IdentifyName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_MaxCount) == 0x000038, "Member 'FTresPhotoHologramDataTable::M_MaxCount' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_CharaNameNamespaceKey) == 0x000040, "Member 'FTresPhotoHologramDataTable::M_CharaNameNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_IconAsset) == 0x000050, "Member 'FTresPhotoHologramDataTable::M_IconAsset' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_UIPriority) == 0x000070, "Member 'FTresPhotoHologramDataTable::M_UIPriority' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_UICharaInfoPage) == 0x000074, "Member 'FTresPhotoHologramDataTable::M_UICharaInfoPage' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_UICharaInfoSlotNo) == 0x000078, "Member 'FTresPhotoHologramDataTable::M_UICharaInfoSlotNo' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_AreaCharaInfoMapSet) == 0x000080, "Member 'FTresPhotoHologramDataTable::M_AreaCharaInfoMapSet' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_NewMarkIndex) == 0x000088, "Member 'FTresPhotoHologramDataTable::M_NewMarkIndex' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_RootCollisionSize) == 0x00008C, "Member 'FTresPhotoHologramDataTable::M_RootCollisionSize' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_MapSetId) == 0x000090, "Member 'FTresPhotoHologramDataTable::M_MapSetId' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_UnlockGameFlagName) == 0x000098, "Member 'FTresPhotoHologramDataTable::M_UnlockGameFlagName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_UnlockGameFlagLabelName) == 0x0000A0, "Member 'FTresPhotoHologramDataTable::M_UnlockGameFlagLabelName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_SaveIndex) == 0x0000A8, "Member 'FTresPhotoHologramDataTable::M_SaveIndex' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramDataTable, M_HologramAsset) == 0x0000B0, "Member 'FTresPhotoHologramDataTable::M_HologramAsset' has a wrong offset!");

// ScriptStruct TresGame.TresDLCIdentifier
// 0xD9070 (0x114EC0F0 - 0x11413080)
struct alignas(0x114EC0F0) FTresDLCIdentifier final : public FTableRowBase
{
public:
	class FString                                 StrValueEU;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StrValueJP;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StrValueNA;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StrValueTW;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_HasData;                                         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_MountName;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDLCIdentifier) == 0x114EC0F0, "Wrong alignment on FTresDLCIdentifier");
static_assert(sizeof(FTresDLCIdentifier) == 0x114EC0F0, "Wrong size on FTresDLCIdentifier");
static_assert(offsetof(FTresDLCIdentifier, StrValueEU) == 0x000008, "Member 'FTresDLCIdentifier::StrValueEU' has a wrong offset!");
static_assert(offsetof(FTresDLCIdentifier, StrValueJP) == 0x000018, "Member 'FTresDLCIdentifier::StrValueJP' has a wrong offset!");
static_assert(offsetof(FTresDLCIdentifier, StrValueNA) == 0x000028, "Member 'FTresDLCIdentifier::StrValueNA' has a wrong offset!");
static_assert(offsetof(FTresDLCIdentifier, StrValueTW) == 0x000038, "Member 'FTresDLCIdentifier::StrValueTW' has a wrong offset!");
static_assert(offsetof(FTresDLCIdentifier, M_HasData) == 0x000048, "Member 'FTresDLCIdentifier::M_HasData' has a wrong offset!");
static_assert(offsetof(FTresDLCIdentifier, M_MountName) == 0x000050, "Member 'FTresDLCIdentifier::M_MountName' has a wrong offset!");

// ScriptStruct TresGame.EX355_DashClaymoreMap
// 0x0018 (0x0018 - 0x0000)
struct FEX355_DashClaymoreMap final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresProjectileBase*                    M_pLastProj;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_DashClaymoreMap) == 0x000008, "Wrong alignment on FEX355_DashClaymoreMap");
static_assert(sizeof(FEX355_DashClaymoreMap) == 0x000018, "Wrong size on FEX355_DashClaymoreMap");
static_assert(offsetof(FEX355_DashClaymoreMap, M_pLastProj) == 0x000008, "Member 'FEX355_DashClaymoreMap::M_pLastProj' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyPawn_e_ca010_CoopInfo
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresEnemyPawn_e_ca010_CoopInfo final
{
public:
	class FName                                   M_attachBoneName;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_OffsetLoc;                                       // 0x0008(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_OffsetRot;                                       // 0x0014(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyPawn_e_ca010_CoopInfo) == 0x112E9AF0, "Wrong alignment on FTresEnemyPawn_e_ca010_CoopInfo");
static_assert(sizeof(FTresEnemyPawn_e_ca010_CoopInfo) == 0x112E9AF0, "Wrong size on FTresEnemyPawn_e_ca010_CoopInfo");
static_assert(offsetof(FTresEnemyPawn_e_ca010_CoopInfo, M_attachBoneName) == 0x000000, "Member 'FTresEnemyPawn_e_ca010_CoopInfo::M_attachBoneName' has a wrong offset!");
static_assert(offsetof(FTresEnemyPawn_e_ca010_CoopInfo, M_OffsetLoc) == 0x000008, "Member 'FTresEnemyPawn_e_ca010_CoopInfo::M_OffsetLoc' has a wrong offset!");
static_assert(offsetof(FTresEnemyPawn_e_ca010_CoopInfo, M_OffsetRot) == 0x000014, "Member 'FTresEnemyPawn_e_ca010_CoopInfo::M_OffsetRot' has a wrong offset!");

// ScriptStruct TresGame.ClusterInfo
// 0x1EF887C8 (0x1EF887C8 - 0x0000)
struct alignas(0x1EF887C8) FClusterInfo final
{
public:
	float                                         VoxelSize;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x0004(0x001C)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntVector                             VoxelNum;                                          // 0x0020(0x112EA8F0)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint32, uint32>                          OverlapInfo;                                       // 0x0030(0x0050)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClusterInfo) == 0x1EF887C8, "Wrong alignment on FClusterInfo");
static_assert(sizeof(FClusterInfo) == 0x1EF887C8, "Wrong size on FClusterInfo");
static_assert(offsetof(FClusterInfo, VoxelSize) == 0x000000, "Member 'FClusterInfo::VoxelSize' has a wrong offset!");
static_assert(offsetof(FClusterInfo, Bounds) == 0x000004, "Member 'FClusterInfo::Bounds' has a wrong offset!");
static_assert(offsetof(FClusterInfo, VoxelNum) == 0x000020, "Member 'FClusterInfo::VoxelNum' has a wrong offset!");
static_assert(offsetof(FClusterInfo, OverlapInfo) == 0x000030, "Member 'FClusterInfo::OverlapInfo' has a wrong offset!");

// ScriptStruct TresGame.EX355_DashClaymoreSpawnWaitSet
// 0x1154F (0x1154F - 0x0000)
struct alignas(0x1154F) FEX355_DashClaymoreSpawnWaitSet final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_DashClaymoreSpawnWaitSet) == 0x01154F, "Wrong alignment on FEX355_DashClaymoreSpawnWaitSet");
static_assert(sizeof(FEX355_DashClaymoreSpawnWaitSet) == 0x01154F, "Wrong size on FEX355_DashClaymoreSpawnWaitSet");

// ScriptStruct TresGame.TresEnemyBigDealAttackParam_e_ex356
// 0x115045E0 (0x115045E0 - 0x0000)
struct alignas(0x115045E0) FTresEnemyBigDealAttackParam_e_ex356 final
{
public:
	float                                         TargetFollowSpeed;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDelayTime;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LuxordSideCardAttackSpeed;                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuxordSideCardAttackTurnSpeed;                     // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuxordSideCardAttackScale;                         // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuxordSideCardAttackScaleUpTime;                   // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuxordSideCardAttackRotationEndDelayTime;          // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuxordSideCardAttackMoveStartDelayTime;            // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LuxordSideCardAttackCollisionGroupName;            // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LuxordSideCardAttackAttackDtataIDName;             // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyBigDealAttackParam_e_ex356) == 0x115045E0, "Wrong alignment on FTresEnemyBigDealAttackParam_e_ex356");
static_assert(sizeof(FTresEnemyBigDealAttackParam_e_ex356) == 0x115045E0, "Wrong size on FTresEnemyBigDealAttackParam_e_ex356");
static_assert(offsetof(FTresEnemyBigDealAttackParam_e_ex356, TargetFollowSpeed) == 0x000000, "Member 'FTresEnemyBigDealAttackParam_e_ex356::TargetFollowSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealAttackParam_e_ex356, StartDelayTime) == 0x000004, "Member 'FTresEnemyBigDealAttackParam_e_ex356::StartDelayTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealAttackParam_e_ex356, LuxordSideCardAttackSpeed) == 0x000010, "Member 'FTresEnemyBigDealAttackParam_e_ex356::LuxordSideCardAttackSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealAttackParam_e_ex356, LuxordSideCardAttackTurnSpeed) == 0x000014, "Member 'FTresEnemyBigDealAttackParam_e_ex356::LuxordSideCardAttackTurnSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealAttackParam_e_ex356, LuxordSideCardAttackScale) == 0x000018, "Member 'FTresEnemyBigDealAttackParam_e_ex356::LuxordSideCardAttackScale' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealAttackParam_e_ex356, LuxordSideCardAttackScaleUpTime) == 0x00001C, "Member 'FTresEnemyBigDealAttackParam_e_ex356::LuxordSideCardAttackScaleUpTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealAttackParam_e_ex356, LuxordSideCardAttackRotationEndDelayTime) == 0x000020, "Member 'FTresEnemyBigDealAttackParam_e_ex356::LuxordSideCardAttackRotationEndDelayTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealAttackParam_e_ex356, LuxordSideCardAttackMoveStartDelayTime) == 0x000024, "Member 'FTresEnemyBigDealAttackParam_e_ex356::LuxordSideCardAttackMoveStartDelayTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealAttackParam_e_ex356, LuxordSideCardAttackCollisionGroupName) == 0x000028, "Member 'FTresEnemyBigDealAttackParam_e_ex356::LuxordSideCardAttackCollisionGroupName' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealAttackParam_e_ex356, LuxordSideCardAttackAttackDtataIDName) == 0x000030, "Member 'FTresEnemyBigDealAttackParam_e_ex356::LuxordSideCardAttackAttackDtataIDName' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyBigDealCardRotationEndParam_e_ex356
// 0x11503E20 (0x11503E20 - 0x0000)
struct alignas(0x11503E20) FTresEnemyBigDealCardRotationEndParam_e_ex356 final
{
public:
	int32                                         NotCardDesignNum;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlainCardDesignNum;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuxordCardDesignNum;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyBigDealCardRotationEndParam_e_ex356) == 0x11503E20, "Wrong alignment on FTresEnemyBigDealCardRotationEndParam_e_ex356");
static_assert(sizeof(FTresEnemyBigDealCardRotationEndParam_e_ex356) == 0x11503E20, "Wrong size on FTresEnemyBigDealCardRotationEndParam_e_ex356");
static_assert(offsetof(FTresEnemyBigDealCardRotationEndParam_e_ex356, NotCardDesignNum) == 0x000000, "Member 'FTresEnemyBigDealCardRotationEndParam_e_ex356::NotCardDesignNum' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealCardRotationEndParam_e_ex356, PlainCardDesignNum) == 0x000004, "Member 'FTresEnemyBigDealCardRotationEndParam_e_ex356::PlainCardDesignNum' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealCardRotationEndParam_e_ex356, LuxordCardDesignNum) == 0x000008, "Member 'FTresEnemyBigDealCardRotationEndParam_e_ex356::LuxordCardDesignNum' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyBigDealOneStepParam_e_ex356
// 0x11503A70 (0x11503A70 - 0x0000)
struct alignas(0x11503A70) FTresEnemyBigDealOneStepParam_e_ex356 final
{
public:
	int32                                         NotCardDesignNum;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresEnemyBigDealContractionSpeedParam_e_ex356> ContractionSpeedParamList;                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CardRevolveSpeed;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlainCardDamageAfterCardRevolveStopTime;           // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CardRotationEndIntervalTime;                       // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresEnemyBigDealCardRotationEndParam_e_ex356> CardRotationEndParamList;                          // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AttackStartTimeList;                               // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         CardShuffleTime;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyBigDealOneStepParam_e_ex356) == 0x11503A70, "Wrong alignment on FTresEnemyBigDealOneStepParam_e_ex356");
static_assert(sizeof(FTresEnemyBigDealOneStepParam_e_ex356) == 0x11503A70, "Wrong size on FTresEnemyBigDealOneStepParam_e_ex356");
static_assert(offsetof(FTresEnemyBigDealOneStepParam_e_ex356, NotCardDesignNum) == 0x000000, "Member 'FTresEnemyBigDealOneStepParam_e_ex356::NotCardDesignNum' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealOneStepParam_e_ex356, ContractionSpeedParamList) == 0x000008, "Member 'FTresEnemyBigDealOneStepParam_e_ex356::ContractionSpeedParamList' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealOneStepParam_e_ex356, CardRevolveSpeed) == 0x00001C, "Member 'FTresEnemyBigDealOneStepParam_e_ex356::CardRevolveSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealOneStepParam_e_ex356, PlainCardDamageAfterCardRevolveStopTime) == 0x000020, "Member 'FTresEnemyBigDealOneStepParam_e_ex356::PlainCardDamageAfterCardRevolveStopTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealOneStepParam_e_ex356, CardRotationEndIntervalTime) == 0x000024, "Member 'FTresEnemyBigDealOneStepParam_e_ex356::CardRotationEndIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealOneStepParam_e_ex356, CardRotationEndParamList) == 0x000028, "Member 'FTresEnemyBigDealOneStepParam_e_ex356::CardRotationEndParamList' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealOneStepParam_e_ex356, AttackStartTimeList) == 0x000040, "Member 'FTresEnemyBigDealOneStepParam_e_ex356::AttackStartTimeList' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealOneStepParam_e_ex356, CardShuffleTime) == 0x000050, "Member 'FTresEnemyBigDealOneStepParam_e_ex356::CardShuffleTime' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyBigDealActionParam_e_ex356
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyBigDealActionParam_e_ex356 final
{
public:
	ETresEnemyBigDealAction_e_ex356               ActionType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActionTime;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             VoiceData;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyBigDealActionParam_e_ex356) == 0x000008, "Wrong alignment on FTresEnemyBigDealActionParam_e_ex356");
static_assert(sizeof(FTresEnemyBigDealActionParam_e_ex356) == 0x000010, "Wrong size on FTresEnemyBigDealActionParam_e_ex356");
static_assert(offsetof(FTresEnemyBigDealActionParam_e_ex356, ActionType) == 0x000000, "Member 'FTresEnemyBigDealActionParam_e_ex356::ActionType' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealActionParam_e_ex356, ActionTime) == 0x000004, "Member 'FTresEnemyBigDealActionParam_e_ex356::ActionTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealActionParam_e_ex356, VoiceData) == 0x000008, "Member 'FTresEnemyBigDealActionParam_e_ex356::VoiceData' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyBigDealParamEx_e_ex356
// 0x11504CD0 (0x11504CD0 - 0x0000)
struct FTresEnemyBigDealParamEx_e_ex356 final
{
public:
	class FName                                   FailedDamageAttackDataIDName;                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndRadius;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterLocationCheckPlayerRadius;                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstScondEndExplodeIntervalTime;                  // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresEnemyBigDealMoveParam_e_ex356     MoveParam;                                         // 0x0014(0x11504CD0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresEnemyBigDealAttackParam_e_ex356   AttackParam;                                       // 0x0040(0x115045E0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresEnemyBigDealOneStepParam_e_ex356  FirstOneStepParam;                                 // 0x00D0(0x11503A70)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTresEnemyBigDealOneStepParam_e_ex356  SecondOneStepParam;                                // 0x0128(0x11503A70)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTresEnemyBigDealOneStepParam_e_ex356  LastOneStepParam;                                  // 0x0180(0x11503A70)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         LastContractionStartDelayTime;                     // 0x01D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresEnemyBigDealActionParam_e_ex356> LastActionParamList;                               // 0x01E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0[0x10];                                     // 0x01F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyBigDealParamEx_e_ex356) == 0x11504CD0, "Wrong alignment on FTresEnemyBigDealParamEx_e_ex356");
static_assert(sizeof(FTresEnemyBigDealParamEx_e_ex356) == 0x11504CD0, "Wrong size on FTresEnemyBigDealParamEx_e_ex356");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, FailedDamageAttackDataIDName) == 0x000000, "Member 'FTresEnemyBigDealParamEx_e_ex356::FailedDamageAttackDataIDName' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, EndRadius) == 0x000008, "Member 'FTresEnemyBigDealParamEx_e_ex356::EndRadius' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, CenterLocationCheckPlayerRadius) == 0x00000C, "Member 'FTresEnemyBigDealParamEx_e_ex356::CenterLocationCheckPlayerRadius' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, FirstScondEndExplodeIntervalTime) == 0x000010, "Member 'FTresEnemyBigDealParamEx_e_ex356::FirstScondEndExplodeIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, MoveParam) == 0x000014, "Member 'FTresEnemyBigDealParamEx_e_ex356::MoveParam' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, AttackParam) == 0x000040, "Member 'FTresEnemyBigDealParamEx_e_ex356::AttackParam' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, FirstOneStepParam) == 0x0000D0, "Member 'FTresEnemyBigDealParamEx_e_ex356::FirstOneStepParam' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, SecondOneStepParam) == 0x000128, "Member 'FTresEnemyBigDealParamEx_e_ex356::SecondOneStepParam' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, LastOneStepParam) == 0x000180, "Member 'FTresEnemyBigDealParamEx_e_ex356::LastOneStepParam' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, LastContractionStartDelayTime) == 0x0001D8, "Member 'FTresEnemyBigDealParamEx_e_ex356::LastContractionStartDelayTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyBigDealParamEx_e_ex356, LastActionParamList) == 0x0001E0, "Member 'FTresEnemyBigDealParamEx_e_ex356::LastActionParamList' has a wrong offset!");

// ScriptStruct TresGame.RootMotionScaleDataParam_e_ex781
// 0x114C4210 (0x114C4210 - 0x0000)
struct FRootMotionScaleDataParam_e_ex781 final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableAttackHitResetRootMotionScale : 1;          // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRootMotionScaleParam_e_ex781          MinRootMotionScaleParam;                           // 0x0008(0x114C4210)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FRootMotionScaleParam_e_ex781          MaxRootMotionScaleParam;                           // 0x0010(0x114C4210)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootMotionScaleDataParam_e_ex781) == 0x114C4210, "Wrong alignment on FRootMotionScaleDataParam_e_ex781");
static_assert(sizeof(FRootMotionScaleDataParam_e_ex781) == 0x114C4210, "Wrong size on FRootMotionScaleDataParam_e_ex781");
static_assert(offsetof(FRootMotionScaleDataParam_e_ex781, ID) == 0x000000, "Member 'FRootMotionScaleDataParam_e_ex781::ID' has a wrong offset!");
static_assert(offsetof(FRootMotionScaleDataParam_e_ex781, MinRootMotionScaleParam) == 0x000008, "Member 'FRootMotionScaleDataParam_e_ex781::MinRootMotionScaleParam' has a wrong offset!");
static_assert(offsetof(FRootMotionScaleDataParam_e_ex781, MaxRootMotionScaleParam) == 0x000010, "Member 'FRootMotionScaleDataParam_e_ex781::MaxRootMotionScaleParam' has a wrong offset!");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanWorldMaxY
// 0x0012 (0x4CE8 - 0x4CD6)
struct alignas(0x4CE8) FTresTaggedActorPropertyValue_OceanWorldMaxY final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanWorldMaxY) == 0x004CE8, "Wrong alignment on FTresTaggedActorPropertyValue_OceanWorldMaxY");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanWorldMaxY) == 0x004CE8, "Wrong size on FTresTaggedActorPropertyValue_OceanWorldMaxY");

// ScriptStruct TresGame.EX355_CutDownClaymoreInfo
// 0x000C (0x000C - 0x0000)
struct FEX355_CutDownClaymoreInfo final
{
public:
	struct FVector                                M_AimLocOffset;                                    // 0x0000(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_CutDownClaymoreInfo) == 0x000001, "Wrong alignment on FEX355_CutDownClaymoreInfo");
static_assert(sizeof(FEX355_CutDownClaymoreInfo) == 0x00000C, "Wrong size on FEX355_CutDownClaymoreInfo");
static_assert(offsetof(FEX355_CutDownClaymoreInfo, M_AimLocOffset) == 0x000000, "Member 'FEX355_CutDownClaymoreInfo::M_AimLocOffset' has a wrong offset!");

// ScriptStruct TresGame.TresEx304HitEffectInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresEx304HitEffectInfo final
{
public:
	class UParticleSystem*                        M_EffectAsset;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_AtkGrpNames;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEx304HitEffectInfo) == 0x000008, "Wrong alignment on FTresEx304HitEffectInfo");
static_assert(sizeof(FTresEx304HitEffectInfo) == 0x000018, "Wrong size on FTresEx304HitEffectInfo");
static_assert(offsetof(FTresEx304HitEffectInfo, M_EffectAsset) == 0x000000, "Member 'FTresEx304HitEffectInfo::M_EffectAsset' has a wrong offset!");
static_assert(offsetof(FTresEx304HitEffectInfo, M_AtkGrpNames) == 0x000008, "Member 'FTresEx304HitEffectInfo::M_AtkGrpNames' has a wrong offset!");

// ScriptStruct TresGame.TresHitActor_e_he90x_Setup
// 0x1153BEF0 (0x1153BEF0 - 0x0000)
struct alignas(0x1153BEF0) FTresHitActor_e_he90x_Setup final
{
public:
	float                                         M_fRadius;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHeight;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresHitActor_e_he90x_Setup) == 0x1153BEF0, "Wrong alignment on FTresHitActor_e_he90x_Setup");
static_assert(sizeof(FTresHitActor_e_he90x_Setup) == 0x1153BEF0, "Wrong size on FTresHitActor_e_he90x_Setup");
static_assert(offsetof(FTresHitActor_e_he90x_Setup, M_fRadius) == 0x000000, "Member 'FTresHitActor_e_he90x_Setup::M_fRadius' has a wrong offset!");
static_assert(offsetof(FTresHitActor_e_he90x_Setup, M_fHeight) == 0x000004, "Member 'FTresHitActor_e_he90x_Setup::M_fHeight' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx361ProjectileSpawnInfo
// 0x0004 (0x0004 - 0x0000)
struct FTresEnemyEx361ProjectileSpawnInfo final
{
public:
	float                                         ShockWaveRotYaw;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx361ProjectileSpawnInfo) == 0x000004, "Wrong alignment on FTresEnemyEx361ProjectileSpawnInfo");
static_assert(sizeof(FTresEnemyEx361ProjectileSpawnInfo) == 0x000004, "Wrong size on FTresEnemyEx361ProjectileSpawnInfo");
static_assert(offsetof(FTresEnemyEx361ProjectileSpawnInfo, ShockWaveRotYaw) == 0x000000, "Member 'FTresEnemyEx361ProjectileSpawnInfo::ShockWaveRotYaw' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipClusterInfo
// 0x111310 (0x11524390 - 0x11413080)
struct alignas(0x11524390) FTresGumiShipClusterInfo final : public FTableRowBase
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        AttachEffectType;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HP;                                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipClusterInfo) == 0x11524390, "Wrong alignment on FTresGumiShipClusterInfo");
static_assert(sizeof(FTresGumiShipClusterInfo) == 0x11524390, "Wrong size on FTresGumiShipClusterInfo");
static_assert(offsetof(FTresGumiShipClusterInfo, StaticMesh) == 0x000008, "Member 'FTresGumiShipClusterInfo::StaticMesh' has a wrong offset!");
static_assert(offsetof(FTresGumiShipClusterInfo, AttachEffectType) == 0x000010, "Member 'FTresGumiShipClusterInfo::AttachEffectType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipClusterInfo, HP) == 0x000018, "Member 'FTresGumiShipClusterInfo::HP' has a wrong offset!");

// ScriptStruct TresGame.BigTornadoProjPosBoneInfo
// 0x0010 (0x0010 - 0x0000)
struct FBigTornadoProjPosBoneInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_BoneName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBigTornadoProjPosBoneInfo) == 0x000004, "Wrong alignment on FBigTornadoProjPosBoneInfo");
static_assert(sizeof(FBigTornadoProjPosBoneInfo) == 0x000010, "Wrong size on FBigTornadoProjPosBoneInfo");
static_assert(offsetof(FBigTornadoProjPosBoneInfo, M_BoneName) == 0x000008, "Member 'FBigTornadoProjPosBoneInfo::M_BoneName' has a wrong offset!");

// ScriptStruct TresGame.MissionIntervalParamTimeStamp_e_ex082
// 0x114F9620 (0x114F9620 - 0x0000)
struct alignas(0x114F9620) FMissionIntervalParamTimeStamp_e_ex082 final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionIntervalParamTimeStamp_e_ex082) == 0x114F9620, "Wrong alignment on FMissionIntervalParamTimeStamp_e_ex082");
static_assert(sizeof(FMissionIntervalParamTimeStamp_e_ex082) == 0x114F9620, "Wrong size on FMissionIntervalParamTimeStamp_e_ex082");
static_assert(offsetof(FMissionIntervalParamTimeStamp_e_ex082, ElapsedTime) == 0x000000, "Member 'FMissionIntervalParamTimeStamp_e_ex082::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FMissionIntervalParamTimeStamp_e_ex082, IntervalTime) == 0x000004, "Member 'FMissionIntervalParamTimeStamp_e_ex082::IntervalTime' has a wrong offset!");

// ScriptStruct TresGame.MissionIntervalParam_e_ex082
// 0x0020 (0x0020 - 0x0000)
struct FMissionIntervalParam_e_ex082 final
{
public:
	uint8                                         bEnableTimeStampInterval : 1;                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartIntervalTime;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalReduceTime;                                // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinIntervalTime;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMissionIntervalParamTimeStamp_e_ex082> TimeStampIntervalArray;                            // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionIntervalParam_e_ex082) == 0x000008, "Wrong alignment on FMissionIntervalParam_e_ex082");
static_assert(sizeof(FMissionIntervalParam_e_ex082) == 0x000020, "Wrong size on FMissionIntervalParam_e_ex082");
static_assert(offsetof(FMissionIntervalParam_e_ex082, StartIntervalTime) == 0x000004, "Member 'FMissionIntervalParam_e_ex082::StartIntervalTime' has a wrong offset!");
static_assert(offsetof(FMissionIntervalParam_e_ex082, IntervalReduceTime) == 0x000008, "Member 'FMissionIntervalParam_e_ex082::IntervalReduceTime' has a wrong offset!");
static_assert(offsetof(FMissionIntervalParam_e_ex082, MinIntervalTime) == 0x00000C, "Member 'FMissionIntervalParam_e_ex082::MinIntervalTime' has a wrong offset!");
static_assert(offsetof(FMissionIntervalParam_e_ex082, TimeStampIntervalArray) == 0x000010, "Member 'FMissionIntervalParam_e_ex082::TimeStampIntervalArray' has a wrong offset!");

// ScriptStruct TresGame.EX901_ActionKey
// 0x0010 (0x0010 - 0x0000)
struct FEX901_ActionKey final
{
public:
	TArray<class FName>                           M_ActionKeyArray;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX901_ActionKey) == 0x000008, "Wrong alignment on FEX901_ActionKey");
static_assert(sizeof(FEX901_ActionKey) == 0x000010, "Wrong size on FEX901_ActionKey");
static_assert(offsetof(FEX901_ActionKey, M_ActionKeyArray) == 0x000000, "Member 'FEX901_ActionKey::M_ActionKeyArray' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405LineComboAttackParam
// 0x114C63E0 (0x114C63E0 - 0x0000)
struct alignas(0x114C63E0) FTresE_dw405LineComboAttackParam final
{
public:
	TSubclassOf<class UTresAttack_e_dw405_Base>   AttackDefinition;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableBeforeEndAttackStart : 1;                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackStartOffsetTime;                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearOffsetDistance;                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearDistance;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_dw405LineComboAttackParam) == 0x114C63E0, "Wrong alignment on FTresE_dw405LineComboAttackParam");
static_assert(sizeof(FTresE_dw405LineComboAttackParam) == 0x114C63E0, "Wrong size on FTresE_dw405LineComboAttackParam");
static_assert(offsetof(FTresE_dw405LineComboAttackParam, AttackDefinition) == 0x000000, "Member 'FTresE_dw405LineComboAttackParam::AttackDefinition' has a wrong offset!");
static_assert(offsetof(FTresE_dw405LineComboAttackParam, AttackStartOffsetTime) == 0x00000C, "Member 'FTresE_dw405LineComboAttackParam::AttackStartOffsetTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405LineComboAttackParam, AppearOffsetDistance) == 0x000010, "Member 'FTresE_dw405LineComboAttackParam::AppearOffsetDistance' has a wrong offset!");
static_assert(offsetof(FTresE_dw405LineComboAttackParam, AppearDistance) == 0x000014, "Member 'FTresE_dw405LineComboAttackParam::AppearDistance' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405LineComboParam
// 0x0030 (0x0030 - 0x0000)
struct FTresE_dw405LineComboParam final
{
public:
	ETresEnemyDw405AttackPossibleKind             AttackPossibleKind;                                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDisableLastAttackNotifyDisappear : 1;             // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastAttackPostWaitTime;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableFixedAngle : 1;                             // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearAngle;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearMaxAngle;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearLocationCorrectionRate;                      // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresE_dw405LineComboAttackParam> AttackParams;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_dw405LineComboParam) == 0x000008, "Wrong alignment on FTresE_dw405LineComboParam");
static_assert(sizeof(FTresE_dw405LineComboParam) == 0x000030, "Wrong size on FTresE_dw405LineComboParam");
static_assert(offsetof(FTresE_dw405LineComboParam, AttackPossibleKind) == 0x000000, "Member 'FTresE_dw405LineComboParam::AttackPossibleKind' has a wrong offset!");
static_assert(offsetof(FTresE_dw405LineComboParam, LastAttackPostWaitTime) == 0x000008, "Member 'FTresE_dw405LineComboParam::LastAttackPostWaitTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405LineComboParam, AppearAngle) == 0x000010, "Member 'FTresE_dw405LineComboParam::AppearAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405LineComboParam, AppearMaxAngle) == 0x000014, "Member 'FTresE_dw405LineComboParam::AppearMaxAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405LineComboParam, AppearLocationCorrectionRate) == 0x000018, "Member 'FTresE_dw405LineComboParam::AppearLocationCorrectionRate' has a wrong offset!");
static_assert(offsetof(FTresE_dw405LineComboParam, AttackParams) == 0x000020, "Member 'FTresE_dw405LineComboParam::AttackParams' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_FlareShotHvnEntryParam
// 0x11E7F (0x11E7F - 0x0000)
struct alignas(0x11E7F) FTresEnemy_e_ex771_FlareShotHvnEntryParam final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_FlareShotHvnEntryParam) == 0x011E7F, "Wrong alignment on FTresEnemy_e_ex771_FlareShotHvnEntryParam");
static_assert(sizeof(FTresEnemy_e_ex771_FlareShotHvnEntryParam) == 0x011E7F, "Wrong size on FTresEnemy_e_ex771_FlareShotHvnEntryParam");

// ScriptStruct TresGame.TresRaDanceSplineMover
// 0x112E9D50 (0x112E9D50 - 0x0000)
struct FTresRaDanceSplineMover final
{
public:
	struct FVector                                M_Location;                                        // 0x0000(0x000C)(Edit, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  M_Rotation;                                        // 0x0010(0x112E9D50)(Edit, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bSelect;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bMoveing;                                        // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fNowLength;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpeed;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLineSpeed;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fCurrentDistance;                                // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsReverse;                                      // 0x0044(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0xB];                                       // 0x0045(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRaDanceSplineMover) == 0x112E9D50, "Wrong alignment on FTresRaDanceSplineMover");
static_assert(sizeof(FTresRaDanceSplineMover) == 0x112E9D50, "Wrong size on FTresRaDanceSplineMover");
static_assert(offsetof(FTresRaDanceSplineMover, M_Location) == 0x000000, "Member 'FTresRaDanceSplineMover::M_Location' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineMover, M_Rotation) == 0x000010, "Member 'FTresRaDanceSplineMover::M_Rotation' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineMover, M_bSelect) == 0x000020, "Member 'FTresRaDanceSplineMover::M_bSelect' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineMover, M_bMoveing) == 0x000021, "Member 'FTresRaDanceSplineMover::M_bMoveing' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineMover, M_fNowLength) == 0x000024, "Member 'FTresRaDanceSplineMover::M_fNowLength' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineMover, M_fSpeed) == 0x000028, "Member 'FTresRaDanceSplineMover::M_fSpeed' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineMover, M_fLineSpeed) == 0x00002C, "Member 'FTresRaDanceSplineMover::M_fLineSpeed' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineMover, M_fCurrentDistance) == 0x000040, "Member 'FTresRaDanceSplineMover::M_fCurrentDistance' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineMover, M_bIsReverse) == 0x000044, "Member 'FTresRaDanceSplineMover::M_bIsReverse' has a wrong offset!");

// ScriptStruct TresGame.TresE_dw405IllusionBlizzagaProjectileParam
// 0x003C (0x003C - 0x0000)
struct FTresE_dw405IllusionBlizzagaProjectileParam final
{
public:
	float                                         AppearAngle;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearDistance;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearHeight;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearOffsetTime;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotOffsetTime;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableSettingShotYaw : 1;                         // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShotYaw;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableSettingShotPitch : 1;                       // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShotPitch;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideRange;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideEnableSettingShotYaw : 1;                 // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideShotYaw;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideEnableSettingShotPitch : 1;               // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideShotPitch;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideEnableHoming : 1;                         // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_dw405IllusionBlizzagaProjectileParam) == 0x000004, "Wrong alignment on FTresE_dw405IllusionBlizzagaProjectileParam");
static_assert(sizeof(FTresE_dw405IllusionBlizzagaProjectileParam) == 0x00003C, "Wrong size on FTresE_dw405IllusionBlizzagaProjectileParam");
static_assert(offsetof(FTresE_dw405IllusionBlizzagaProjectileParam, AppearAngle) == 0x000000, "Member 'FTresE_dw405IllusionBlizzagaProjectileParam::AppearAngle' has a wrong offset!");
static_assert(offsetof(FTresE_dw405IllusionBlizzagaProjectileParam, AppearDistance) == 0x000004, "Member 'FTresE_dw405IllusionBlizzagaProjectileParam::AppearDistance' has a wrong offset!");
static_assert(offsetof(FTresE_dw405IllusionBlizzagaProjectileParam, AppearHeight) == 0x000008, "Member 'FTresE_dw405IllusionBlizzagaProjectileParam::AppearHeight' has a wrong offset!");
static_assert(offsetof(FTresE_dw405IllusionBlizzagaProjectileParam, AppearOffsetTime) == 0x00000C, "Member 'FTresE_dw405IllusionBlizzagaProjectileParam::AppearOffsetTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405IllusionBlizzagaProjectileParam, ShotOffsetTime) == 0x000010, "Member 'FTresE_dw405IllusionBlizzagaProjectileParam::ShotOffsetTime' has a wrong offset!");
static_assert(offsetof(FTresE_dw405IllusionBlizzagaProjectileParam, ShotYaw) == 0x000018, "Member 'FTresE_dw405IllusionBlizzagaProjectileParam::ShotYaw' has a wrong offset!");
static_assert(offsetof(FTresE_dw405IllusionBlizzagaProjectileParam, ShotPitch) == 0x000020, "Member 'FTresE_dw405IllusionBlizzagaProjectileParam::ShotPitch' has a wrong offset!");
static_assert(offsetof(FTresE_dw405IllusionBlizzagaProjectileParam, OverrideRange) == 0x000024, "Member 'FTresE_dw405IllusionBlizzagaProjectileParam::OverrideRange' has a wrong offset!");
static_assert(offsetof(FTresE_dw405IllusionBlizzagaProjectileParam, OverrideShotYaw) == 0x00002C, "Member 'FTresE_dw405IllusionBlizzagaProjectileParam::OverrideShotYaw' has a wrong offset!");
static_assert(offsetof(FTresE_dw405IllusionBlizzagaProjectileParam, OverrideShotPitch) == 0x000034, "Member 'FTresE_dw405IllusionBlizzagaProjectileParam::OverrideShotPitch' has a wrong offset!");

// ScriptStruct TresGame.TresE_EX362DarkVolleyParam
// 0x0018 (0x0018 - 0x0000)
struct FTresE_EX362DarkVolleyParam final
{
public:
	struct FVector                                M_Offset;                                          // 0x0000(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Rot;                                             // 0x000C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_EX362DarkVolleyParam) == 0x000001, "Wrong alignment on FTresE_EX362DarkVolleyParam");
static_assert(sizeof(FTresE_EX362DarkVolleyParam) == 0x000018, "Wrong size on FTresE_EX362DarkVolleyParam");
static_assert(offsetof(FTresE_EX362DarkVolleyParam, M_Offset) == 0x000000, "Member 'FTresE_EX362DarkVolleyParam::M_Offset' has a wrong offset!");
static_assert(offsetof(FTresE_EX362DarkVolleyParam, M_Rot) == 0x00000C, "Member 'FTresE_EX362DarkVolleyParam::M_Rot' has a wrong offset!");

// ScriptStruct TresGame.TresShotParam_e_ex701_Attack9
// 0x114C7CA0 (0x114C7CA0 - 0x0000)
struct alignas(0x114C7CA0) FTresShotParam_e_ex701_Attack9 final
{
public:
	float                                         EndRadius;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingStartTime;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingTargetRange;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresShotParam_e_ex701_Attack9) == 0x114C7CA0, "Wrong alignment on FTresShotParam_e_ex701_Attack9");
static_assert(sizeof(FTresShotParam_e_ex701_Attack9) == 0x114C7CA0, "Wrong size on FTresShotParam_e_ex701_Attack9");
static_assert(offsetof(FTresShotParam_e_ex701_Attack9, EndRadius) == 0x000000, "Member 'FTresShotParam_e_ex701_Attack9::EndRadius' has a wrong offset!");
static_assert(offsetof(FTresShotParam_e_ex701_Attack9, EndDistance) == 0x000004, "Member 'FTresShotParam_e_ex701_Attack9::EndDistance' has a wrong offset!");
static_assert(offsetof(FTresShotParam_e_ex701_Attack9, MaxDistance) == 0x000008, "Member 'FTresShotParam_e_ex701_Attack9::MaxDistance' has a wrong offset!");
static_assert(offsetof(FTresShotParam_e_ex701_Attack9, HomingStartTime) == 0x00000C, "Member 'FTresShotParam_e_ex701_Attack9::HomingStartTime' has a wrong offset!");
static_assert(offsetof(FTresShotParam_e_ex701_Attack9, HomingTargetRange) == 0x000010, "Member 'FTresShotParam_e_ex701_Attack9::HomingTargetRange' has a wrong offset!");

// ScriptStruct TresGame.TresAutoNavLinkExclusiveVolumeInfo
// 0x0010 (0x0010 - 0x0000)
struct FTresAutoNavLinkExclusiveVolumeInfo final
{
public:
	TSubclassOf<class UNavArea>                   AreaClass;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAgentSelector                      SupportedAgents;                                   // 0x0008(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAutoNavLinkExclusiveVolumeInfo) == 0x000008, "Wrong alignment on FTresAutoNavLinkExclusiveVolumeInfo");
static_assert(sizeof(FTresAutoNavLinkExclusiveVolumeInfo) == 0x000010, "Wrong size on FTresAutoNavLinkExclusiveVolumeInfo");
static_assert(offsetof(FTresAutoNavLinkExclusiveVolumeInfo, AreaClass) == 0x000000, "Member 'FTresAutoNavLinkExclusiveVolumeInfo::AreaClass' has a wrong offset!");
static_assert(offsetof(FTresAutoNavLinkExclusiveVolumeInfo, SupportedAgents) == 0x000008, "Member 'FTresAutoNavLinkExclusiveVolumeInfo::SupportedAgents' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuMotionObject
// 0x0020 (0x0020 - 0x0000)
struct FTresDebugMenuMotionObject final
{
public:
	float                                         M_X;                                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Y;                                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Width;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Height;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 M_Properties;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuMotionObject) == 0x000008, "Wrong alignment on FTresDebugMenuMotionObject");
static_assert(sizeof(FTresDebugMenuMotionObject) == 0x000020, "Wrong size on FTresDebugMenuMotionObject");
static_assert(offsetof(FTresDebugMenuMotionObject, M_X) == 0x000000, "Member 'FTresDebugMenuMotionObject::M_X' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMotionObject, M_Y) == 0x000004, "Member 'FTresDebugMenuMotionObject::M_Y' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMotionObject, M_Width) == 0x000008, "Member 'FTresDebugMenuMotionObject::M_Width' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMotionObject, M_Height) == 0x00000C, "Member 'FTresDebugMenuMotionObject::M_Height' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMotionObject, M_Properties) == 0x000010, "Member 'FTresDebugMenuMotionObject::M_Properties' has a wrong offset!");

// ScriptStruct TresGame.TresChrSEDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresChrSEDataTable final : public FTableRowBase
{
public:
	class USoundBase*                             M_Asset;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresChrSEDataTable) == 0x11413080, "Wrong alignment on FTresChrSEDataTable");
static_assert(sizeof(FTresChrSEDataTable) == 0x11413080, "Wrong size on FTresChrSEDataTable");
static_assert(offsetof(FTresChrSEDataTable, M_Asset) == 0x000008, "Member 'FTresChrSEDataTable::M_Asset' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_FlareTornadoParam
// 0x49C4 (0x49C4 - 0x0000)
struct alignas(0x49C4) FTresEnemy_e_ex771_FlareTornadoParam final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_FlareTornadoParam) == 0x0049C4, "Wrong alignment on FTresEnemy_e_ex771_FlareTornadoParam");
static_assert(sizeof(FTresEnemy_e_ex771_FlareTornadoParam) == 0x0049C4, "Wrong size on FTresEnemy_e_ex771_FlareTornadoParam");

// ScriptStruct TresGame.TresGenerateNavLinkArgs
// 0x114C8FF0 (0x114C8FF0 - 0x0000)
struct alignas(0x114C8FF0) FTresGenerateNavLinkArgs final
{
public:
	struct FFloatInterval                         Height;                                            // 0x0000(0x112F06E0)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Length;                                            // 0x0008(0x112F06E0)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SamplingDistance;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSearchAngle;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CornerSearchAngle;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SamplingAngle;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPathLengthReductionPercentage;                  // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGenerateNavLinkArgs) == 0x114C8FF0, "Wrong alignment on FTresGenerateNavLinkArgs");
static_assert(sizeof(FTresGenerateNavLinkArgs) == 0x114C8FF0, "Wrong size on FTresGenerateNavLinkArgs");
static_assert(offsetof(FTresGenerateNavLinkArgs, Height) == 0x000000, "Member 'FTresGenerateNavLinkArgs::Height' has a wrong offset!");
static_assert(offsetof(FTresGenerateNavLinkArgs, Length) == 0x000008, "Member 'FTresGenerateNavLinkArgs::Length' has a wrong offset!");
static_assert(offsetof(FTresGenerateNavLinkArgs, SamplingDistance) == 0x000010, "Member 'FTresGenerateNavLinkArgs::SamplingDistance' has a wrong offset!");
static_assert(offsetof(FTresGenerateNavLinkArgs, DefaultSearchAngle) == 0x000014, "Member 'FTresGenerateNavLinkArgs::DefaultSearchAngle' has a wrong offset!");
static_assert(offsetof(FTresGenerateNavLinkArgs, CornerSearchAngle) == 0x000018, "Member 'FTresGenerateNavLinkArgs::CornerSearchAngle' has a wrong offset!");
static_assert(offsetof(FTresGenerateNavLinkArgs, SamplingAngle) == 0x00001C, "Member 'FTresGenerateNavLinkArgs::SamplingAngle' has a wrong offset!");
static_assert(offsetof(FTresGenerateNavLinkArgs, MinPathLengthReductionPercentage) == 0x000020, "Member 'FTresGenerateNavLinkArgs::MinPathLengthReductionPercentage' has a wrong offset!");

// ScriptStruct TresGame.TresRapunzelDanceMarker
// 0x0020 (0x0020 - 0x0000)
struct FTresRapunzelDanceMarker final
{
public:
	EDancePerformType                             M_PerformType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Length;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Location;                                        // 0x0008(0x000C)(Edit, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_pPSC;                                            // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRapunzelDanceMarker) == 0x000008, "Wrong alignment on FTresRapunzelDanceMarker");
static_assert(sizeof(FTresRapunzelDanceMarker) == 0x000020, "Wrong size on FTresRapunzelDanceMarker");
static_assert(offsetof(FTresRapunzelDanceMarker, M_PerformType) == 0x000000, "Member 'FTresRapunzelDanceMarker::M_PerformType' has a wrong offset!");
static_assert(offsetof(FTresRapunzelDanceMarker, M_Length) == 0x000004, "Member 'FTresRapunzelDanceMarker::M_Length' has a wrong offset!");
static_assert(offsetof(FTresRapunzelDanceMarker, M_Location) == 0x000008, "Member 'FTresRapunzelDanceMarker::M_Location' has a wrong offset!");
static_assert(offsetof(FTresRapunzelDanceMarker, M_pPSC) == 0x000018, "Member 'FTresRapunzelDanceMarker::M_pPSC' has a wrong offset!");

// ScriptStruct TresGame.TresCockpitBadStatus
// 0x11FA5 (0x11FA5 - 0x0000)
struct alignas(0x11FA5) FTresCockpitBadStatus final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCockpitBadStatus) == 0x011FA5, "Wrong alignment on FTresCockpitBadStatus");
static_assert(sizeof(FTresCockpitBadStatus) == 0x011FA5, "Wrong size on FTresCockpitBadStatus");

// ScriptStruct TresGame.TresE_EX367AvaterSlashParam
// 0x001C (0x001C - 0x0000)
struct FTresE_EX367AvaterSlashParam final
{
public:
	float                                         M_IntervalTime;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoveSlashTypes_e_ex367                       M_MoveSlashType;                                   // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_MoveRot;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_PopOffset;                                       // 0x000C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_UseOwnerLocation;                                // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_EX367AvaterSlashParam) == 0x000004, "Wrong alignment on FTresE_EX367AvaterSlashParam");
static_assert(sizeof(FTresE_EX367AvaterSlashParam) == 0x00001C, "Wrong size on FTresE_EX367AvaterSlashParam");
static_assert(offsetof(FTresE_EX367AvaterSlashParam, M_IntervalTime) == 0x000000, "Member 'FTresE_EX367AvaterSlashParam::M_IntervalTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX367AvaterSlashParam, M_MoveSlashType) == 0x000004, "Member 'FTresE_EX367AvaterSlashParam::M_MoveSlashType' has a wrong offset!");
static_assert(offsetof(FTresE_EX367AvaterSlashParam, M_MoveRot) == 0x000008, "Member 'FTresE_EX367AvaterSlashParam::M_MoveRot' has a wrong offset!");
static_assert(offsetof(FTresE_EX367AvaterSlashParam, M_PopOffset) == 0x00000C, "Member 'FTresE_EX367AvaterSlashParam::M_PopOffset' has a wrong offset!");
static_assert(offsetof(FTresE_EX367AvaterSlashParam, M_UseOwnerLocation) == 0x000018, "Member 'FTresE_EX367AvaterSlashParam::M_UseOwnerLocation' has a wrong offset!");

// ScriptStruct TresGame.TresBattleLevelFromName
// 0x0000 (0x11413080 - 0x11413080)
struct FTresBattleLevelFromName final : public FTableRowBase
{
public:
	int32                                         BattleLevel;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresBattleLevelFromName) == 0x11413080, "Wrong alignment on FTresBattleLevelFromName");
static_assert(sizeof(FTresBattleLevelFromName) == 0x11413080, "Wrong size on FTresBattleLevelFromName");
static_assert(offsetof(FTresBattleLevelFromName, BattleLevel) == 0x000008, "Member 'FTresBattleLevelFromName::BattleLevel' has a wrong offset!");

// ScriptStruct TresGame.TresUINaviMapMarkerData
// 0x0040 (0x0040 - 0x0000)
struct FTresUINaviMapMarkerData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UGFxObject*                             ASObject;                                          // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  OwnerActor;                                        // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUINaviMapMarkerData) == 0x000008, "Wrong alignment on FTresUINaviMapMarkerData");
static_assert(sizeof(FTresUINaviMapMarkerData) == 0x000040, "Wrong size on FTresUINaviMapMarkerData");
static_assert(offsetof(FTresUINaviMapMarkerData, ASObject) == 0x000030, "Member 'FTresUINaviMapMarkerData::ASObject' has a wrong offset!");
static_assert(offsetof(FTresUINaviMapMarkerData, OwnerActor) == 0x000038, "Member 'FTresUINaviMapMarkerData::OwnerActor' has a wrong offset!");

// ScriptStruct TresGame.TresCollMgrDetectUpdateGrassBumpTickFunction
// 0xF499 (0x1164F - 0x21B6)
struct alignas(0x1164F) FTresCollMgrDetectUpdateGrassBumpTickFunction final : public FTresCollMgrSubTickFunction
{
};
static_assert(alignof(FTresCollMgrDetectUpdateGrassBumpTickFunction) == 0x01164F, "Wrong alignment on FTresCollMgrDetectUpdateGrassBumpTickFunction");
static_assert(sizeof(FTresCollMgrDetectUpdateGrassBumpTickFunction) == 0x01164F, "Wrong size on FTresCollMgrDetectUpdateGrassBumpTickFunction");

// ScriptStruct TresGame.TresEmotionPoint
// 0x114C9DD0 (0x114C9DD0 - 0x0000)
struct alignas(0x114C9DD0) FTresEmotionPoint final
{
public:
	float                                         M_Hope;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Fear;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEmotionPoint) == 0x114C9DD0, "Wrong alignment on FTresEmotionPoint");
static_assert(sizeof(FTresEmotionPoint) == 0x114C9DD0, "Wrong size on FTresEmotionPoint");
static_assert(offsetof(FTresEmotionPoint, M_Hope) == 0x000000, "Member 'FTresEmotionPoint::M_Hope' has a wrong offset!");
static_assert(offsetof(FTresEmotionPoint, M_Fear) == 0x000004, "Member 'FTresEmotionPoint::M_Fear' has a wrong offset!");

// ScriptStruct TresGame.BX901_NeedleSpawnerInfo
// 0x0060 (0x0060 - 0x0000)
struct FBX901_NeedleSpawnerInfo final
{
public:
	TSubclassOf<class AActor>                     M_NeedleSpawnerClass;                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x58];                                       // 0x0008(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBX901_NeedleSpawnerInfo) == 0x000008, "Wrong alignment on FBX901_NeedleSpawnerInfo");
static_assert(sizeof(FBX901_NeedleSpawnerInfo) == 0x000060, "Wrong size on FBX901_NeedleSpawnerInfo");
static_assert(offsetof(FBX901_NeedleSpawnerInfo, M_NeedleSpawnerClass) == 0x000000, "Member 'FBX901_NeedleSpawnerInfo::M_NeedleSpawnerClass' has a wrong offset!");

// ScriptStruct TresGame.TresAttackHitLogRecord
// 0x1BF8 (0x1BF8 - 0x0000)
struct alignas(0x1BF8) FTresAttackHitLogRecord final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAttackHitLogRecord) == 0x001BF8, "Wrong alignment on FTresAttackHitLogRecord");
static_assert(sizeof(FTresAttackHitLogRecord) == 0x001BF8, "Wrong size on FTresAttackHitLogRecord");

// ScriptStruct TresGame.TresEnemy_e_ex771_HvnDebrisBlowParam
// 0x49D0 (0x49D0 - 0x0000)
struct alignas(0x49D0) FTresEnemy_e_ex771_HvnDebrisBlowParam final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_HvnDebrisBlowParam) == 0x0049D0, "Wrong alignment on FTresEnemy_e_ex771_HvnDebrisBlowParam");
static_assert(sizeof(FTresEnemy_e_ex771_HvnDebrisBlowParam) == 0x0049D0, "Wrong size on FTresEnemy_e_ex771_HvnDebrisBlowParam");

// ScriptStruct TresGame.TresLuckyMarkDataTable
// 0x128CA0 (0x1153BD20 - 0x11413080)
struct alignas(0x1153BD20) FTresLuckyMarkDataTable final : public FTableRowBase
{
public:
	class FName                                   World;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarkIndex;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLuckyMarkDataTable) == 0x1153BD20, "Wrong alignment on FTresLuckyMarkDataTable");
static_assert(sizeof(FTresLuckyMarkDataTable) == 0x1153BD20, "Wrong size on FTresLuckyMarkDataTable");
static_assert(offsetof(FTresLuckyMarkDataTable, World) == 0x000008, "Member 'FTresLuckyMarkDataTable::World' has a wrong offset!");
static_assert(offsetof(FTresLuckyMarkDataTable, MarkIndex) == 0x000010, "Member 'FTresLuckyMarkDataTable::MarkIndex' has a wrong offset!");

// ScriptStruct TresGame.TCPATH_SPLINEGROUP
// 0x0010 (0x0010 - 0x0000)
struct FTCPATH_SPLINEGROUP final
{
public:
	TArray<class ATresCameraPathSplineActor*>     AryActor;                                          // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTCPATH_SPLINEGROUP) == 0x000008, "Wrong alignment on FTCPATH_SPLINEGROUP");
static_assert(sizeof(FTCPATH_SPLINEGROUP) == 0x000010, "Wrong size on FTCPATH_SPLINEGROUP");
static_assert(offsetof(FTCPATH_SPLINEGROUP, AryActor) == 0x000000, "Member 'FTCPATH_SPLINEGROUP::AryActor' has a wrong offset!");

// ScriptStruct TresGame.TresSelfieCameraActionDef
// 0x114CA260 (0x114CA260 - 0x0000)
struct alignas(0x114CA260) FTresSelfieCameraActionDef final
{
public:
	int32                                         RewardIndex;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePortalClearCount;                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LoopActionFlag : 1;                                // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DefaultActionFlag : 1;                             // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MotionName_In;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName_Loop;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName_Out;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionNameUnderwater_In;                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionNameUnderwater_Loop;                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionNameUnderwater_Out;                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardStr;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSelfieCameraActionDef) == 0x114CA260, "Wrong alignment on FTresSelfieCameraActionDef");
static_assert(sizeof(FTresSelfieCameraActionDef) == 0x114CA260, "Wrong size on FTresSelfieCameraActionDef");
static_assert(offsetof(FTresSelfieCameraActionDef, RewardIndex) == 0x000000, "Member 'FTresSelfieCameraActionDef::RewardIndex' has a wrong offset!");
static_assert(offsetof(FTresSelfieCameraActionDef, BattlePortalClearCount) == 0x000004, "Member 'FTresSelfieCameraActionDef::BattlePortalClearCount' has a wrong offset!");
static_assert(offsetof(FTresSelfieCameraActionDef, MotionName_In) == 0x000010, "Member 'FTresSelfieCameraActionDef::MotionName_In' has a wrong offset!");
static_assert(offsetof(FTresSelfieCameraActionDef, MotionName_Loop) == 0x000018, "Member 'FTresSelfieCameraActionDef::MotionName_Loop' has a wrong offset!");
static_assert(offsetof(FTresSelfieCameraActionDef, MotionName_Out) == 0x000020, "Member 'FTresSelfieCameraActionDef::MotionName_Out' has a wrong offset!");
static_assert(offsetof(FTresSelfieCameraActionDef, MotionNameUnderwater_In) == 0x000028, "Member 'FTresSelfieCameraActionDef::MotionNameUnderwater_In' has a wrong offset!");
static_assert(offsetof(FTresSelfieCameraActionDef, MotionNameUnderwater_Loop) == 0x000030, "Member 'FTresSelfieCameraActionDef::MotionNameUnderwater_Loop' has a wrong offset!");
static_assert(offsetof(FTresSelfieCameraActionDef, MotionNameUnderwater_Out) == 0x000038, "Member 'FTresSelfieCameraActionDef::MotionNameUnderwater_Out' has a wrong offset!");
static_assert(offsetof(FTresSelfieCameraActionDef, RewardStr) == 0x000040, "Member 'FTresSelfieCameraActionDef::RewardStr' has a wrong offset!");

// ScriptStruct TresGame.TresUICustomizeCommand
// 0x1157FF10 (0x1157FF10 - 0x0000)
struct alignas(0x1157FF10) FTresUICustomizeCommand final
{
public:
	ETresCommandKind                              CommandKind;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HelpTextNamespaceKey;                              // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUICustomizeCommand) == 0x1157FF10, "Wrong alignment on FTresUICustomizeCommand");
static_assert(sizeof(FTresUICustomizeCommand) == 0x1157FF10, "Wrong size on FTresUICustomizeCommand");
static_assert(offsetof(FTresUICustomizeCommand, CommandKind) == 0x000000, "Member 'FTresUICustomizeCommand::CommandKind' has a wrong offset!");
static_assert(offsetof(FTresUICustomizeCommand, HelpTextNamespaceKey) == 0x000008, "Member 'FTresUICustomizeCommand::HelpTextNamespaceKey' has a wrong offset!");

// ScriptStruct TresGame.TornadoBlowSet
// 0x0020 (0x0020 - 0x0000)
struct FTornadoBlowSet final
{
public:
	float                                         FMaxStartDistance;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FEndDistance;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FBlowTime;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FEndHeight;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceEndHeight;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetFloatingMode;                                  // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlowToDebrisOwnerDir;                             // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0xD];                                       // 0x0013(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTornadoBlowSet) == 0x000004, "Wrong alignment on FTornadoBlowSet");
static_assert(sizeof(FTornadoBlowSet) == 0x000020, "Wrong size on FTornadoBlowSet");
static_assert(offsetof(FTornadoBlowSet, FMaxStartDistance) == 0x000000, "Member 'FTornadoBlowSet::FMaxStartDistance' has a wrong offset!");
static_assert(offsetof(FTornadoBlowSet, FEndDistance) == 0x000004, "Member 'FTornadoBlowSet::FEndDistance' has a wrong offset!");
static_assert(offsetof(FTornadoBlowSet, FBlowTime) == 0x000008, "Member 'FTornadoBlowSet::FBlowTime' has a wrong offset!");
static_assert(offsetof(FTornadoBlowSet, FEndHeight) == 0x00000C, "Member 'FTornadoBlowSet::FEndHeight' has a wrong offset!");
static_assert(offsetof(FTornadoBlowSet, bForceEndHeight) == 0x000010, "Member 'FTornadoBlowSet::bForceEndHeight' has a wrong offset!");
static_assert(offsetof(FTornadoBlowSet, bSetFloatingMode) == 0x000011, "Member 'FTornadoBlowSet::bSetFloatingMode' has a wrong offset!");
static_assert(offsetof(FTornadoBlowSet, bBlowToDebrisOwnerDir) == 0x000012, "Member 'FTornadoBlowSet::bBlowToDebrisOwnerDir' has a wrong offset!");

// ScriptStruct TresGame.TresOverlapInfo
// 0x115A3 (0x115A3 - 0x0000)
struct alignas(0x115A3) FTresOverlapInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresOverlapInfo) == 0x0115A3, "Wrong alignment on FTresOverlapInfo");
static_assert(sizeof(FTresOverlapInfo) == 0x0115A3, "Wrong size on FTresOverlapInfo");

// ScriptStruct TresGame.Tres_ValidateAction_Param
// 0x114CAF90 (0x114CAF90 - 0x0000)
struct alignas(0x114CAF90) FTres_ValidateAction_Param final
{
public:
	TSubclassOf<class UTresActionDefinitionBase>  ActionDefinitionOverride;                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 Target;                                            // 0x0008(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bValidateLocation : 1;                             // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bValidateOrientation : 1;                          // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bValidateExecution : 1;                            // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetLocation;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetRatio;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTres_ValidateAction_Param) == 0x114CAF90, "Wrong alignment on FTres_ValidateAction_Param");
static_assert(sizeof(FTres_ValidateAction_Param) == 0x114CAF90, "Wrong size on FTres_ValidateAction_Param");
static_assert(offsetof(FTres_ValidateAction_Param, ActionDefinitionOverride) == 0x000000, "Member 'FTres_ValidateAction_Param::ActionDefinitionOverride' has a wrong offset!");
static_assert(offsetof(FTres_ValidateAction_Param, Target) == 0x000008, "Member 'FTres_ValidateAction_Param::Target' has a wrong offset!");
static_assert(offsetof(FTres_ValidateAction_Param, OffsetLocation) == 0x000034, "Member 'FTres_ValidateAction_Param::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FTres_ValidateAction_Param, OffsetRatio) == 0x000038, "Member 'FTres_ValidateAction_Param::OffsetRatio' has a wrong offset!");

// ScriptStruct TresGame.TresBlackboardClassValueModifierInOutParam
// 0x0060 (0x0060 - 0x0000)
struct FTresBlackboardClassValueModifierInOutParam final
{
public:
	struct FBlackboardKeySelector                 BlackboardKeyValueA;                               // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseBlackboardKey : 1;                             // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Class;                                             // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 BlackboardKeyValueB;                               // 0x0038(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBlackboardClassValueModifierInOutParam) == 0x000008, "Wrong alignment on FTresBlackboardClassValueModifierInOutParam");
static_assert(sizeof(FTresBlackboardClassValueModifierInOutParam) == 0x000060, "Wrong size on FTresBlackboardClassValueModifierInOutParam");
static_assert(offsetof(FTresBlackboardClassValueModifierInOutParam, BlackboardKeyValueA) == 0x000000, "Member 'FTresBlackboardClassValueModifierInOutParam::BlackboardKeyValueA' has a wrong offset!");
static_assert(offsetof(FTresBlackboardClassValueModifierInOutParam, Class) == 0x000030, "Member 'FTresBlackboardClassValueModifierInOutParam::Class' has a wrong offset!");
static_assert(offsetof(FTresBlackboardClassValueModifierInOutParam, BlackboardKeyValueB) == 0x000038, "Member 'FTresBlackboardClassValueModifierInOutParam::BlackboardKeyValueB' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamOnTimeInfo
// 0x000C (0x000C - 0x0000)
struct FEX359_BeamOnTimeInfo final
{
public:
	float                                         M_fNotifyTime;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iNotify;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bSetToTimeOnHit;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_BeamOnTimeInfo) == 0x000004, "Wrong alignment on FEX359_BeamOnTimeInfo");
static_assert(sizeof(FEX359_BeamOnTimeInfo) == 0x00000C, "Wrong size on FEX359_BeamOnTimeInfo");
static_assert(offsetof(FEX359_BeamOnTimeInfo, M_fNotifyTime) == 0x000000, "Member 'FEX359_BeamOnTimeInfo::M_fNotifyTime' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnTimeInfo, M_iNotify) == 0x000004, "Member 'FEX359_BeamOnTimeInfo::M_iNotify' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnTimeInfo, M_bSetToTimeOnHit) == 0x000008, "Member 'FEX359_BeamOnTimeInfo::M_bSetToTimeOnHit' has a wrong offset!");

// ScriptStruct TresGame.TresBlackboardIntValueModifierInOutParam
// 0x0090 (0x0090 - 0x0000)
struct FTresBlackboardIntValueModifierInOutParam final
{
public:
	uint8                                         bEnableCheck : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 CheckBlackboardKey;                                // 0x0008(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 BlackboardKeyValueA;                               // 0x0030(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseBlackboardKey : 1;                             // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETresBlackboardValueModifierInOutMethod       MethodType;                                        // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 BlackboardKeyValueB;                               // 0x0068(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBlackboardIntValueModifierInOutParam) == 0x000004, "Wrong alignment on FTresBlackboardIntValueModifierInOutParam");
static_assert(sizeof(FTresBlackboardIntValueModifierInOutParam) == 0x000090, "Wrong size on FTresBlackboardIntValueModifierInOutParam");
static_assert(offsetof(FTresBlackboardIntValueModifierInOutParam, CheckBlackboardKey) == 0x000008, "Member 'FTresBlackboardIntValueModifierInOutParam::CheckBlackboardKey' has a wrong offset!");
static_assert(offsetof(FTresBlackboardIntValueModifierInOutParam, BlackboardKeyValueA) == 0x000030, "Member 'FTresBlackboardIntValueModifierInOutParam::BlackboardKeyValueA' has a wrong offset!");
static_assert(offsetof(FTresBlackboardIntValueModifierInOutParam, MethodType) == 0x00005C, "Member 'FTresBlackboardIntValueModifierInOutParam::MethodType' has a wrong offset!");
static_assert(offsetof(FTresBlackboardIntValueModifierInOutParam, Value) == 0x000060, "Member 'FTresBlackboardIntValueModifierInOutParam::Value' has a wrong offset!");
static_assert(offsetof(FTresBlackboardIntValueModifierInOutParam, BlackboardKeyValueB) == 0x000068, "Member 'FTresBlackboardIntValueModifierInOutParam::BlackboardKeyValueB' has a wrong offset!");

// ScriptStruct TresGame.EX354_ClusterShotMoveInfo
// 0x0018 (0x0018 - 0x0000)
struct FEX354_ClusterShotMoveInfo final
{
public:
	class ATresProjectileBase*                    M_Proj;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX354_ClusterShotMoveInfo) == 0x000008, "Wrong alignment on FEX354_ClusterShotMoveInfo");
static_assert(sizeof(FEX354_ClusterShotMoveInfo) == 0x000018, "Wrong size on FEX354_ClusterShotMoveInfo");
static_assert(offsetof(FEX354_ClusterShotMoveInfo, M_Proj) == 0x000000, "Member 'FEX354_ClusterShotMoveInfo::M_Proj' has a wrong offset!");

// ScriptStruct TresGame.TresBlackboardObjectValueModifierInOutParam
// 0x0060 (0x0060 - 0x0000)
struct FTresBlackboardObjectValueModifierInOutParam final
{
public:
	struct FBlackboardKeySelector                 BlackboardKeyValueA;                               // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseBlackboardKey : 1;                             // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 BlackboardKeyValueB;                               // 0x0038(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBlackboardObjectValueModifierInOutParam) == 0x000008, "Wrong alignment on FTresBlackboardObjectValueModifierInOutParam");
static_assert(sizeof(FTresBlackboardObjectValueModifierInOutParam) == 0x000060, "Wrong size on FTresBlackboardObjectValueModifierInOutParam");
static_assert(offsetof(FTresBlackboardObjectValueModifierInOutParam, BlackboardKeyValueA) == 0x000000, "Member 'FTresBlackboardObjectValueModifierInOutParam::BlackboardKeyValueA' has a wrong offset!");
static_assert(offsetof(FTresBlackboardObjectValueModifierInOutParam, Object) == 0x000030, "Member 'FTresBlackboardObjectValueModifierInOutParam::Object' has a wrong offset!");
static_assert(offsetof(FTresBlackboardObjectValueModifierInOutParam, BlackboardKeyValueB) == 0x000038, "Member 'FTresBlackboardObjectValueModifierInOutParam::BlackboardKeyValueB' has a wrong offset!");

// ScriptStruct TresGame.TresRaPuddingCommand
// 0x115197A0 (0x115197A0 - 0x0000)
struct alignas(0x115197A0) FTresRaPuddingCommand final
{
public:
	ERaPuddingCommandType                         CommandType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PositionID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastTime;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRaPuddingCommand) == 0x115197A0, "Wrong alignment on FTresRaPuddingCommand");
static_assert(sizeof(FTresRaPuddingCommand) == 0x115197A0, "Wrong size on FTresRaPuddingCommand");
static_assert(offsetof(FTresRaPuddingCommand, CommandType) == 0x000000, "Member 'FTresRaPuddingCommand::CommandType' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingCommand, PositionID) == 0x000008, "Member 'FTresRaPuddingCommand::PositionID' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingCommand, ParamName) == 0x000010, "Member 'FTresRaPuddingCommand::ParamName' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingCommand, StartTime) == 0x000018, "Member 'FTresRaPuddingCommand::StartTime' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingCommand, LastTime) == 0x00001C, "Member 'FTresRaPuddingCommand::LastTime' has a wrong offset!");

// ScriptStruct TresGame.TresBlackboardRotatorValueModifierInOutParam
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresBlackboardRotatorValueModifierInOutParam final
{
public:
	struct FBlackboardKeySelector                 BlackboardKeyValueA;                               // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseBlackboardKey : 1;                             // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Value;                                             // 0x002C(0x112E9AF0)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 BlackboardKeyValueB;                               // 0x0038(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBlackboardRotatorValueModifierInOutParam) == 0x112E9AF0, "Wrong alignment on FTresBlackboardRotatorValueModifierInOutParam");
static_assert(sizeof(FTresBlackboardRotatorValueModifierInOutParam) == 0x112E9AF0, "Wrong size on FTresBlackboardRotatorValueModifierInOutParam");
static_assert(offsetof(FTresBlackboardRotatorValueModifierInOutParam, BlackboardKeyValueA) == 0x000000, "Member 'FTresBlackboardRotatorValueModifierInOutParam::BlackboardKeyValueA' has a wrong offset!");
static_assert(offsetof(FTresBlackboardRotatorValueModifierInOutParam, Value) == 0x00002C, "Member 'FTresBlackboardRotatorValueModifierInOutParam::Value' has a wrong offset!");
static_assert(offsetof(FTresBlackboardRotatorValueModifierInOutParam, BlackboardKeyValueB) == 0x000038, "Member 'FTresBlackboardRotatorValueModifierInOutParam::BlackboardKeyValueB' has a wrong offset!");

// ScriptStruct TresGame.TresBlackboardFloatValueModifier
// 0x114CD4B0 (0x114CD4B0 - 0x0000)
struct alignas(0x114CD4B0) FTresBlackboardFloatValueModifier final
{
public:
	ETresValueModifierMethod                      ValueModifierType;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 BBKey;                                             // 0x0008(0x0028)(Edit, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresBlackboardFloatValueModifier) == 0x114CD4B0, "Wrong alignment on FTresBlackboardFloatValueModifier");
static_assert(sizeof(FTresBlackboardFloatValueModifier) == 0x114CD4B0, "Wrong size on FTresBlackboardFloatValueModifier");
static_assert(offsetof(FTresBlackboardFloatValueModifier, ValueModifierType) == 0x000000, "Member 'FTresBlackboardFloatValueModifier::ValueModifierType' has a wrong offset!");
static_assert(offsetof(FTresBlackboardFloatValueModifier, BBKey) == 0x000008, "Member 'FTresBlackboardFloatValueModifier::BBKey' has a wrong offset!");
static_assert(offsetof(FTresBlackboardFloatValueModifier, Value) == 0x000030, "Member 'FTresBlackboardFloatValueModifier::Value' has a wrong offset!");

// ScriptStruct TresGame.RegionParam_e_ex046
// 0x114F6130 (0x114F6130 - 0x0000)
struct alignas(0x114F6130) FRegionParam_e_ex046 final
{
public:
	class FName                                   BreakEffectSpawnBoneName;                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BreakMaterialParamName;                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BodyCollGroupName;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseDataTableIDName;                               // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LockOnTargetTagName;                               // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegionParam_e_ex046) == 0x114F6130, "Wrong alignment on FRegionParam_e_ex046");
static_assert(sizeof(FRegionParam_e_ex046) == 0x114F6130, "Wrong size on FRegionParam_e_ex046");
static_assert(offsetof(FRegionParam_e_ex046, BreakEffectSpawnBoneName) == 0x000000, "Member 'FRegionParam_e_ex046::BreakEffectSpawnBoneName' has a wrong offset!");
static_assert(offsetof(FRegionParam_e_ex046, BreakMaterialParamName) == 0x000008, "Member 'FRegionParam_e_ex046::BreakMaterialParamName' has a wrong offset!");
static_assert(offsetof(FRegionParam_e_ex046, BodyCollGroupName) == 0x000010, "Member 'FRegionParam_e_ex046::BodyCollGroupName' has a wrong offset!");
static_assert(offsetof(FRegionParam_e_ex046, BaseDataTableIDName) == 0x000018, "Member 'FRegionParam_e_ex046::BaseDataTableIDName' has a wrong offset!");
static_assert(offsetof(FRegionParam_e_ex046, LockOnTargetTagName) == 0x000020, "Member 'FRegionParam_e_ex046::LockOnTargetTagName' has a wrong offset!");

// ScriptStruct TresGame.Tres_GenerateRandomNumber_Param
// 0x114CD730 (0x114CD730 - 0x0000)
struct alignas(0x114CD730) FTres_GenerateRandomNumber_Param final
{
public:
	struct FBlackboardKeySelector                 M_BlackboardKey;                                   // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         M_bUseRange : 1;                                   // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_MinValue;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxValue;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTres_GenerateRandomNumber_Param) == 0x114CD730, "Wrong alignment on FTres_GenerateRandomNumber_Param");
static_assert(sizeof(FTres_GenerateRandomNumber_Param) == 0x114CD730, "Wrong size on FTres_GenerateRandomNumber_Param");
static_assert(offsetof(FTres_GenerateRandomNumber_Param, M_BlackboardKey) == 0x000000, "Member 'FTres_GenerateRandomNumber_Param::M_BlackboardKey' has a wrong offset!");
static_assert(offsetof(FTres_GenerateRandomNumber_Param, M_MinValue) == 0x00002C, "Member 'FTres_GenerateRandomNumber_Param::M_MinValue' has a wrong offset!");
static_assert(offsetof(FTres_GenerateRandomNumber_Param, M_MaxValue) == 0x000030, "Member 'FTres_GenerateRandomNumber_Param::M_MaxValue' has a wrong offset!");

// ScriptStruct TresGame.HoldCameraParam
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FHoldCameraParam final
{
public:
	struct FVector                                M_CameraLocalOffset;                               // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_CameraLocalRotation;                             // 0x000C(0x112E9AF0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_LimitPitchMax;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LimitPitchMin;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_FovDefault;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ZoomFovMax;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ZoomFovMin;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ZoomTotalTime;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CameraFStopMax;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CameraFStopMin;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CameraFStopDefault;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HeightOffsetMax;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HeightOffsetMin;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RollMax;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RollMin;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bCalcDOF : 1;                                    // 0x004C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHoldCameraParam) == 0x112E9AF0, "Wrong alignment on FHoldCameraParam");
static_assert(sizeof(FHoldCameraParam) == 0x112E9AF0, "Wrong size on FHoldCameraParam");
static_assert(offsetof(FHoldCameraParam, M_CameraLocalOffset) == 0x000000, "Member 'FHoldCameraParam::M_CameraLocalOffset' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_CameraLocalRotation) == 0x00000C, "Member 'FHoldCameraParam::M_CameraLocalRotation' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_LimitPitchMax) == 0x000018, "Member 'FHoldCameraParam::M_LimitPitchMax' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_LimitPitchMin) == 0x00001C, "Member 'FHoldCameraParam::M_LimitPitchMin' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_FovDefault) == 0x000020, "Member 'FHoldCameraParam::M_FovDefault' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_ZoomFovMax) == 0x000024, "Member 'FHoldCameraParam::M_ZoomFovMax' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_ZoomFovMin) == 0x000028, "Member 'FHoldCameraParam::M_ZoomFovMin' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_ZoomTotalTime) == 0x00002C, "Member 'FHoldCameraParam::M_ZoomTotalTime' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_CameraFStopMax) == 0x000030, "Member 'FHoldCameraParam::M_CameraFStopMax' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_CameraFStopMin) == 0x000034, "Member 'FHoldCameraParam::M_CameraFStopMin' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_CameraFStopDefault) == 0x000038, "Member 'FHoldCameraParam::M_CameraFStopDefault' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_HeightOffsetMax) == 0x00003C, "Member 'FHoldCameraParam::M_HeightOffsetMax' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_HeightOffsetMin) == 0x000040, "Member 'FHoldCameraParam::M_HeightOffsetMin' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_RollMax) == 0x000044, "Member 'FHoldCameraParam::M_RollMax' has a wrong offset!");
static_assert(offsetof(FHoldCameraParam, M_RollMin) == 0x000048, "Member 'FHoldCameraParam::M_RollMin' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_FlareShotHvnParam
// 0x00B0 (0x00B0 - 0x0000)
struct FTresEnemy_e_ex773_FlareShotHvnParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresProjectile_e_ex773_FlareShotTornado* M_FlareShot;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0xA0];                                      // 0x0010(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_FlareShotHvnParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex773_FlareShotHvnParam");
static_assert(sizeof(FTresEnemy_e_ex773_FlareShotHvnParam) == 0x0000B0, "Wrong size on FTresEnemy_e_ex773_FlareShotHvnParam");
static_assert(offsetof(FTresEnemy_e_ex773_FlareShotHvnParam, M_FlareShot) == 0x000008, "Member 'FTresEnemy_e_ex773_FlareShotHvnParam::M_FlareShot' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_FlareShotHvnGroupParam
// 0x0048 (0x0048 - 0x0000)
struct FTresEnemy_e_ex773_FlareShotHvnGroupParam final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_FireOmenEff;                                     // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresEnemy_e_ex773_FlareShotHvnParam> M_FlareShotHvnParamArray;                          // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex773_FlareShotHvnGroupParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex773_FlareShotHvnGroupParam");
static_assert(sizeof(FTresEnemy_e_ex773_FlareShotHvnGroupParam) == 0x000048, "Wrong size on FTresEnemy_e_ex773_FlareShotHvnGroupParam");
static_assert(offsetof(FTresEnemy_e_ex773_FlareShotHvnGroupParam, M_FireOmenEff) == 0x000030, "Member 'FTresEnemy_e_ex773_FlareShotHvnGroupParam::M_FireOmenEff' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex773_FlareShotHvnGroupParam, M_FlareShotHvnParamArray) == 0x000038, "Member 'FTresEnemy_e_ex773_FlareShotHvnGroupParam::M_FlareShotHvnParamArray' has a wrong offset!");

// ScriptStruct TresGame.TresWheelRotationWork_e_ex011
// 0x0020 (0x0020 - 0x0000)
struct FTresWheelRotationWork_e_ex011 final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWheelRotationWork_e_ex011) == 0x000004, "Wrong alignment on FTresWheelRotationWork_e_ex011");
static_assert(sizeof(FTresWheelRotationWork_e_ex011) == 0x000020, "Wrong size on FTresWheelRotationWork_e_ex011");
static_assert(offsetof(FTresWheelRotationWork_e_ex011, BoneName) == 0x000000, "Member 'FTresWheelRotationWork_e_ex011::BoneName' has a wrong offset!");

// ScriptStruct TresGame.DetectMarkerCheckArea
// 0x114CE600 (0x114CE600 - 0x0000)
struct alignas(0x114CE600) FDetectMarkerCheckArea final
{
public:
	float                                         Left;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Top;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Buttom;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDetectMarkerCheckArea) == 0x114CE600, "Wrong alignment on FDetectMarkerCheckArea");
static_assert(sizeof(FDetectMarkerCheckArea) == 0x114CE600, "Wrong size on FDetectMarkerCheckArea");
static_assert(offsetof(FDetectMarkerCheckArea, Left) == 0x000000, "Member 'FDetectMarkerCheckArea::Left' has a wrong offset!");
static_assert(offsetof(FDetectMarkerCheckArea, Right) == 0x000004, "Member 'FDetectMarkerCheckArea::Right' has a wrong offset!");
static_assert(offsetof(FDetectMarkerCheckArea, Top) == 0x000008, "Member 'FDetectMarkerCheckArea::Top' has a wrong offset!");
static_assert(offsetof(FDetectMarkerCheckArea, Buttom) == 0x00000C, "Member 'FDetectMarkerCheckArea::Buttom' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnEnemyParam_e_ex001a
// 0x114F42B0 (0x114F42B0 - 0x0000)
struct alignas(0x114F42B0) FTresSpawnEnemyParam_e_ex001a final
{
public:
	float                                         HpRate;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresEnemyPawnBase>         SpawnEnemyClass;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnNum;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSpawnEnemyParam_e_ex001a) == 0x114F42B0, "Wrong alignment on FTresSpawnEnemyParam_e_ex001a");
static_assert(sizeof(FTresSpawnEnemyParam_e_ex001a) == 0x114F42B0, "Wrong size on FTresSpawnEnemyParam_e_ex001a");
static_assert(offsetof(FTresSpawnEnemyParam_e_ex001a, HpRate) == 0x000000, "Member 'FTresSpawnEnemyParam_e_ex001a::HpRate' has a wrong offset!");
static_assert(offsetof(FTresSpawnEnemyParam_e_ex001a, SpawnEnemyClass) == 0x000008, "Member 'FTresSpawnEnemyParam_e_ex001a::SpawnEnemyClass' has a wrong offset!");
static_assert(offsetof(FTresSpawnEnemyParam_e_ex001a, SpawnNum) == 0x000010, "Member 'FTresSpawnEnemyParam_e_ex001a::SpawnNum' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackBonamikCharaWindKey
// 0x0004 (0x0004 - 0x0000)
struct FTresInterpTrackBonamikCharaWindKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresInterpTrackBonamikCharaWindKey) == 0x000004, "Wrong alignment on FTresInterpTrackBonamikCharaWindKey");
static_assert(sizeof(FTresInterpTrackBonamikCharaWindKey) == 0x000004, "Wrong size on FTresInterpTrackBonamikCharaWindKey");
static_assert(offsetof(FTresInterpTrackBonamikCharaWindKey, M_Time) == 0x000000, "Member 'FTresInterpTrackBonamikCharaWindKey::M_Time' has a wrong offset!");

// ScriptStruct TresGame.TCHE02WALL_PARAM
// 0x0108 (0x0108 - 0x0000)
struct FTCHE02WALL_PARAM final
{
public:
	uint8                                         Pad_0[0x100];                                      // 0x0000(0x0100)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShake>               CameraShake;                                       // 0x0100(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTCHE02WALL_PARAM) == 0x000008, "Wrong alignment on FTCHE02WALL_PARAM");
static_assert(sizeof(FTCHE02WALL_PARAM) == 0x000108, "Wrong size on FTCHE02WALL_PARAM");
static_assert(offsetof(FTCHE02WALL_PARAM, CameraShake) == 0x000100, "Member 'FTCHE02WALL_PARAM::CameraShake' has a wrong offset!");

// ScriptStruct TresGame.TresCameraTargetInfo
// 0x0038 (0x0038 - 0x0000)
struct FTresCameraTargetInfo final
{
public:
	struct FVector                                M_TargetOffset;                                    // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_TargetLocalOffset;                               // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_TargetActor;                                     // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTresLockonTargetComponent*             M_TargetComp;                                      // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCameraTargetInfo) == 0x000008, "Wrong alignment on FTresCameraTargetInfo");
static_assert(sizeof(FTresCameraTargetInfo) == 0x000038, "Wrong size on FTresCameraTargetInfo");
static_assert(offsetof(FTresCameraTargetInfo, M_TargetOffset) == 0x000000, "Member 'FTresCameraTargetInfo::M_TargetOffset' has a wrong offset!");
static_assert(offsetof(FTresCameraTargetInfo, M_TargetLocalOffset) == 0x00000C, "Member 'FTresCameraTargetInfo::M_TargetLocalOffset' has a wrong offset!");
static_assert(offsetof(FTresCameraTargetInfo, M_TargetActor) == 0x000018, "Member 'FTresCameraTargetInfo::M_TargetActor' has a wrong offset!");
static_assert(offsetof(FTresCameraTargetInfo, M_TargetComp) == 0x000028, "Member 'FTresCameraTargetInfo::M_TargetComp' has a wrong offset!");

// ScriptStruct TresGame.SmokeTrigger
// 0x114CEF60 (0x114CEF60 - 0x0000)
struct alignas(0x114CEF60) FSmokeTrigger final
{
public:
	float                                         M_triggerHpPer;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_attachSocketName;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmokeTrigger) == 0x114CEF60, "Wrong alignment on FSmokeTrigger");
static_assert(sizeof(FSmokeTrigger) == 0x114CEF60, "Wrong size on FSmokeTrigger");
static_assert(offsetof(FSmokeTrigger, M_triggerHpPer) == 0x000000, "Member 'FSmokeTrigger::M_triggerHpPer' has a wrong offset!");
static_assert(offsetof(FSmokeTrigger, M_attachSocketName) == 0x000008, "Member 'FSmokeTrigger::M_attachSocketName' has a wrong offset!");

// ScriptStruct TresGame.CameraEventParam_e_ex761
// 0x114DD990 (0x114DD990 - 0x0000)
struct alignas(0x114DD990) FCameraEventParam_e_ex761 final
{
public:
	float                                         CenterEffectSpawnDelayTime;                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisualChangeStartDelayTime;                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningStartDelayTime;                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraEventParam_e_ex761) == 0x114DD990, "Wrong alignment on FCameraEventParam_e_ex761");
static_assert(sizeof(FCameraEventParam_e_ex761) == 0x114DD990, "Wrong size on FCameraEventParam_e_ex761");
static_assert(offsetof(FCameraEventParam_e_ex761, CenterEffectSpawnDelayTime) == 0x000000, "Member 'FCameraEventParam_e_ex761::CenterEffectSpawnDelayTime' has a wrong offset!");
static_assert(offsetof(FCameraEventParam_e_ex761, VisualChangeStartDelayTime) == 0x000004, "Member 'FCameraEventParam_e_ex761::VisualChangeStartDelayTime' has a wrong offset!");
static_assert(offsetof(FCameraEventParam_e_ex761, LightningStartDelayTime) == 0x000008, "Member 'FCameraEventParam_e_ex761::LightningStartDelayTime' has a wrong offset!");

// ScriptStruct TresGame.TresShipDamageParam
// 0x114CF130 (0x114CF130 - 0x0000)
struct alignas(0x114CF130) FTresShipDamageParam final
{
public:
	class FName                                   M_AttackName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bForce;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bActionCancel;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_SpeedRate;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PitchRollPower;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_YawPower;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MovePower;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WaitTimer;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpeedRateTime;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresShipDamageParam) == 0x114CF130, "Wrong alignment on FTresShipDamageParam");
static_assert(sizeof(FTresShipDamageParam) == 0x114CF130, "Wrong size on FTresShipDamageParam");
static_assert(offsetof(FTresShipDamageParam, M_AttackName) == 0x000000, "Member 'FTresShipDamageParam::M_AttackName' has a wrong offset!");
static_assert(offsetof(FTresShipDamageParam, M_bForce) == 0x000008, "Member 'FTresShipDamageParam::M_bForce' has a wrong offset!");
static_assert(offsetof(FTresShipDamageParam, M_bActionCancel) == 0x000009, "Member 'FTresShipDamageParam::M_bActionCancel' has a wrong offset!");
static_assert(offsetof(FTresShipDamageParam, M_SpeedRate) == 0x00000C, "Member 'FTresShipDamageParam::M_SpeedRate' has a wrong offset!");
static_assert(offsetof(FTresShipDamageParam, M_PitchRollPower) == 0x000010, "Member 'FTresShipDamageParam::M_PitchRollPower' has a wrong offset!");
static_assert(offsetof(FTresShipDamageParam, M_YawPower) == 0x000014, "Member 'FTresShipDamageParam::M_YawPower' has a wrong offset!");
static_assert(offsetof(FTresShipDamageParam, M_MovePower) == 0x000018, "Member 'FTresShipDamageParam::M_MovePower' has a wrong offset!");
static_assert(offsetof(FTresShipDamageParam, M_WaitTimer) == 0x00001C, "Member 'FTresShipDamageParam::M_WaitTimer' has a wrong offset!");
static_assert(offsetof(FTresShipDamageParam, M_SpeedRateTime) == 0x000020, "Member 'FTresShipDamageParam::M_SpeedRateTime' has a wrong offset!");

// ScriptStruct TresGame.TresLgRxRushData
// 0x1154BD90 (0x1154BD90 - 0x0000)
struct alignas(0x1154BD90) FTresLgRxRushData final
{
public:
	int32                                         M_Rate;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumMin;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumMax;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TimeMin;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TimeMax;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLgRxRushData) == 0x1154BD90, "Wrong alignment on FTresLgRxRushData");
static_assert(sizeof(FTresLgRxRushData) == 0x1154BD90, "Wrong size on FTresLgRxRushData");
static_assert(offsetof(FTresLgRxRushData, M_Rate) == 0x000000, "Member 'FTresLgRxRushData::M_Rate' has a wrong offset!");
static_assert(offsetof(FTresLgRxRushData, M_NumMin) == 0x000004, "Member 'FTresLgRxRushData::M_NumMin' has a wrong offset!");
static_assert(offsetof(FTresLgRxRushData, M_NumMax) == 0x000008, "Member 'FTresLgRxRushData::M_NumMax' has a wrong offset!");
static_assert(offsetof(FTresLgRxRushData, M_TimeMin) == 0x00000C, "Member 'FTresLgRxRushData::M_TimeMin' has a wrong offset!");
static_assert(offsetof(FTresLgRxRushData, M_TimeMax) == 0x000010, "Member 'FTresLgRxRushData::M_TimeMax' has a wrong offset!");

// ScriptStruct TresGame.TresAttackDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresAttackDataTable final : public FTableRowBase
{
public:
	float                                         M_Power;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDamageKind                               M_DamageKind;                                      // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDamageAttribute                          M_DamageAttribute;                                 // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_DamagePowerScale;                                // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamageParabolaAngle;                             // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamageMoveLength;                                // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamageBrakeParam;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAtkHitKnockbackType                      M_KnockbackType;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_DamageExecRate;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamageEffectTime;                                // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresBadStatusType                            M_BadStatusKind;                                   // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_BadStatusGenRate;                                // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BadStatusEffectTime;                             // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BadStatusEffectParam;                            // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAtkTeamCheckType                         M_TeamCheckType;                                   // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ReactionPowerValue;                              // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsScrumAttack : 1;                              // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ArmorAttackPower;                                // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_FormPoint;                                       // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsMagicAttack : 1;                              // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsIvalidGuard : 1;                              // 0x0050(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsRapidFire : 1;                                // 0x0050(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsKillerAttack : 1;                             // 0x0050(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsAttractionDamage : 1;                         // 0x0050(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsCounterAttack : 1;                            // 0x0050(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsEnableWeakGuardAttack : 1;                    // 0x0050(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ReflectLevel;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAtkCollReflectReaction                   M_ReflectReaction;                                 // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_RevengePoint;                                    // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresPhysDamageForceLevel                     M_PhysForceLv;                                     // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAttackDataTable) == 0x11413080, "Wrong alignment on FTresAttackDataTable");
static_assert(sizeof(FTresAttackDataTable) == 0x11413080, "Wrong size on FTresAttackDataTable");
static_assert(offsetof(FTresAttackDataTable, M_Power) == 0x000008, "Member 'FTresAttackDataTable::M_Power' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_DamageKind) == 0x00000C, "Member 'FTresAttackDataTable::M_DamageKind' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_DamageAttribute) == 0x00000D, "Member 'FTresAttackDataTable::M_DamageAttribute' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_DamagePowerScale) == 0x000010, "Member 'FTresAttackDataTable::M_DamagePowerScale' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_DamageParabolaAngle) == 0x000014, "Member 'FTresAttackDataTable::M_DamageParabolaAngle' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_DamageMoveLength) == 0x000018, "Member 'FTresAttackDataTable::M_DamageMoveLength' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_DamageBrakeParam) == 0x00001C, "Member 'FTresAttackDataTable::M_DamageBrakeParam' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_KnockbackType) == 0x000020, "Member 'FTresAttackDataTable::M_KnockbackType' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_DamageExecRate) == 0x000024, "Member 'FTresAttackDataTable::M_DamageExecRate' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_DamageEffectTime) == 0x000028, "Member 'FTresAttackDataTable::M_DamageEffectTime' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_BadStatusKind) == 0x00002C, "Member 'FTresAttackDataTable::M_BadStatusKind' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_BadStatusGenRate) == 0x000030, "Member 'FTresAttackDataTable::M_BadStatusGenRate' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_BadStatusEffectTime) == 0x000034, "Member 'FTresAttackDataTable::M_BadStatusEffectTime' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_BadStatusEffectParam) == 0x000038, "Member 'FTresAttackDataTable::M_BadStatusEffectParam' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_TeamCheckType) == 0x00003C, "Member 'FTresAttackDataTable::M_TeamCheckType' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_ReactionPowerValue) == 0x000040, "Member 'FTresAttackDataTable::M_ReactionPowerValue' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_ArmorAttackPower) == 0x000048, "Member 'FTresAttackDataTable::M_ArmorAttackPower' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_FormPoint) == 0x00004C, "Member 'FTresAttackDataTable::M_FormPoint' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_ReflectLevel) == 0x000054, "Member 'FTresAttackDataTable::M_ReflectLevel' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_ReflectReaction) == 0x000058, "Member 'FTresAttackDataTable::M_ReflectReaction' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_RevengePoint) == 0x00005C, "Member 'FTresAttackDataTable::M_RevengePoint' has a wrong offset!");
static_assert(offsetof(FTresAttackDataTable, M_PhysForceLv) == 0x000060, "Member 'FTresAttackDataTable::M_PhysForceLv' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_HvnDebrisParam
// 0x0030 (0x0030 - 0x0000)
struct FTresEnemy_e_ex771_HvnDebrisParam final
{
public:
	class ATresProjectile_e_ex771_DebrisAttract*  M_DebrisAttract;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_HvnDebrisParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex771_HvnDebrisParam");
static_assert(sizeof(FTresEnemy_e_ex771_HvnDebrisParam) == 0x000030, "Wrong size on FTresEnemy_e_ex771_HvnDebrisParam");
static_assert(offsetof(FTresEnemy_e_ex771_HvnDebrisParam, M_DebrisAttract) == 0x000000, "Member 'FTresEnemy_e_ex771_HvnDebrisParam::M_DebrisAttract' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipHudRaderParam
// 0x1151EF50 (0x1151EF50 - 0x0000)
struct alignas(0x1151EF50) FTresGumiShipHudRaderParam final
{
public:
	float                                         M_fRaderRange;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMiddleAlertRange;                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fNearAlertRange;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipHudRaderParam) == 0x1151EF50, "Wrong alignment on FTresGumiShipHudRaderParam");
static_assert(sizeof(FTresGumiShipHudRaderParam) == 0x1151EF50, "Wrong size on FTresGumiShipHudRaderParam");
static_assert(offsetof(FTresGumiShipHudRaderParam, M_fRaderRange) == 0x000000, "Member 'FTresGumiShipHudRaderParam::M_fRaderRange' has a wrong offset!");
static_assert(offsetof(FTresGumiShipHudRaderParam, M_fMiddleAlertRange) == 0x000004, "Member 'FTresGumiShipHudRaderParam::M_fMiddleAlertRange' has a wrong offset!");
static_assert(offsetof(FTresGumiShipHudRaderParam, M_fNearAlertRange) == 0x000008, "Member 'FTresGumiShipHudRaderParam::M_fNearAlertRange' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipHudGuideAreaParam
// 0x1151EBC0 (0x1151EBC0 - 0x0000)
struct alignas(0x1151EBC0) FTresGumiShipHudGuideAreaParam final
{
public:
	float                                         M_fWorldSymbolMarkerVolumeRadius;                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTravelGateMarkerVolumeRadius;                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTreasureSphereMarkerVolumeRadius;               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEnemyTerritoryMarkerVolumeRadius;               // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipHudGuideAreaParam) == 0x1151EBC0, "Wrong alignment on FTresGumiShipHudGuideAreaParam");
static_assert(sizeof(FTresGumiShipHudGuideAreaParam) == 0x1151EBC0, "Wrong size on FTresGumiShipHudGuideAreaParam");
static_assert(offsetof(FTresGumiShipHudGuideAreaParam, M_fWorldSymbolMarkerVolumeRadius) == 0x000000, "Member 'FTresGumiShipHudGuideAreaParam::M_fWorldSymbolMarkerVolumeRadius' has a wrong offset!");
static_assert(offsetof(FTresGumiShipHudGuideAreaParam, M_fTravelGateMarkerVolumeRadius) == 0x000004, "Member 'FTresGumiShipHudGuideAreaParam::M_fTravelGateMarkerVolumeRadius' has a wrong offset!");
static_assert(offsetof(FTresGumiShipHudGuideAreaParam, M_fTreasureSphereMarkerVolumeRadius) == 0x000008, "Member 'FTresGumiShipHudGuideAreaParam::M_fTreasureSphereMarkerVolumeRadius' has a wrong offset!");
static_assert(offsetof(FTresGumiShipHudGuideAreaParam, M_fEnemyTerritoryMarkerVolumeRadius) == 0x00000C, "Member 'FTresGumiShipHudGuideAreaParam::M_fEnemyTerritoryMarkerVolumeRadius' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipHudStanderdDataTable
// 0x10BED0 (0x1151EF50 - 0x11413080)
struct FTresGumiShipHudStanderdDataTable final : public FTableRowBase
{
public:
	struct FTresGumiShipHudRaderParam             M_RaderParam;                                      // 0x0008(0x1151EF50)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresGumiShipHudGuideAreaParam         M_GuideParam;                                      // 0x0014(0x1151EBC0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_fShowMessageWindowTime;                          // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_dEnemyHPGaugeMax;                                // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipHudStanderdDataTable) == 0x1151EF50, "Wrong alignment on FTresGumiShipHudStanderdDataTable");
static_assert(sizeof(FTresGumiShipHudStanderdDataTable) == 0x1151EF50, "Wrong size on FTresGumiShipHudStanderdDataTable");
static_assert(offsetof(FTresGumiShipHudStanderdDataTable, M_RaderParam) == 0x000008, "Member 'FTresGumiShipHudStanderdDataTable::M_RaderParam' has a wrong offset!");
static_assert(offsetof(FTresGumiShipHudStanderdDataTable, M_GuideParam) == 0x000014, "Member 'FTresGumiShipHudStanderdDataTable::M_GuideParam' has a wrong offset!");
static_assert(offsetof(FTresGumiShipHudStanderdDataTable, M_fShowMessageWindowTime) == 0x000024, "Member 'FTresGumiShipHudStanderdDataTable::M_fShowMessageWindowTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipHudStanderdDataTable, M_dEnemyHPGaugeMax) == 0x000028, "Member 'FTresGumiShipHudStanderdDataTable::M_dEnemyHPGaugeMax' has a wrong offset!");

// ScriptStruct TresGame.TresSlidePhotoWork
// 0x0030 (0x0030 - 0x0000)
struct FTresSlidePhotoWork final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               PTexture;                                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSlidePhotoWork) == 0x000008, "Wrong alignment on FTresSlidePhotoWork");
static_assert(sizeof(FTresSlidePhotoWork) == 0x000030, "Wrong size on FTresSlidePhotoWork");
static_assert(offsetof(FTresSlidePhotoWork, PTexture) == 0x000028, "Member 'FTresSlidePhotoWork::PTexture' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyBaseStatusDataTable
// 0xBDED0 (0x114D0F50 - 0x11413080)
struct alignas(0x114D0F50) FTresEnemyBaseStatusDataTable final : public FTableRowBase
{
public:
	int32                                         M_BaseHP;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_BaseExp;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_BaseAttackPower;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_BaseDefensePower;                                // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyBaseStatusDataTable) == 0x114D0F50, "Wrong alignment on FTresEnemyBaseStatusDataTable");
static_assert(sizeof(FTresEnemyBaseStatusDataTable) == 0x114D0F50, "Wrong size on FTresEnemyBaseStatusDataTable");
static_assert(offsetof(FTresEnemyBaseStatusDataTable, M_BaseHP) == 0x000008, "Member 'FTresEnemyBaseStatusDataTable::M_BaseHP' has a wrong offset!");
static_assert(offsetof(FTresEnemyBaseStatusDataTable, M_BaseExp) == 0x00000C, "Member 'FTresEnemyBaseStatusDataTable::M_BaseExp' has a wrong offset!");
static_assert(offsetof(FTresEnemyBaseStatusDataTable, M_BaseAttackPower) == 0x000010, "Member 'FTresEnemyBaseStatusDataTable::M_BaseAttackPower' has a wrong offset!");
static_assert(offsetof(FTresEnemyBaseStatusDataTable, M_BaseDefensePower) == 0x000014, "Member 'FTresEnemyBaseStatusDataTable::M_BaseDefensePower' has a wrong offset!");

// ScriptStruct TresGame.TresRemyEggCrackingDataTable
// 0x0000 (0x11572B90 - 0x11572B90)
struct FTresRemyEggCrackingDataTable final : public FTresRemyCookingGameDataTableBase
{
public:
	float                                         StickEggCrackingValue;                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRemyEggCrackingDataTable) == 0x11572B90, "Wrong alignment on FTresRemyEggCrackingDataTable");
static_assert(sizeof(FTresRemyEggCrackingDataTable) == 0x11572B90, "Wrong size on FTresRemyEggCrackingDataTable");
static_assert(offsetof(FTresRemyEggCrackingDataTable, StickEggCrackingValue) == 0x000020, "Member 'FTresRemyEggCrackingDataTable::StickEggCrackingValue' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx082_SnowEffectParam
// 0x114F8E90 (0x114F8E90 - 0x0000)
struct alignas(0x114F8E90) FTresEnemyEx082_SnowEffectParam final
{
public:
	class UParticleSystem*                        Effect;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx082_SnowEffectParam) == 0x114F8E90, "Wrong alignment on FTresEnemyEx082_SnowEffectParam");
static_assert(sizeof(FTresEnemyEx082_SnowEffectParam) == 0x114F8E90, "Wrong size on FTresEnemyEx082_SnowEffectParam");
static_assert(offsetof(FTresEnemyEx082_SnowEffectParam, Effect) == 0x000000, "Member 'FTresEnemyEx082_SnowEffectParam::Effect' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx082_SnowEffectParam, BoneName) == 0x000008, "Member 'FTresEnemyEx082_SnowEffectParam::BoneName' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleLinearMoveParam
// 0x120AA (0x120AA - 0x0000)
struct alignas(0x120AA) FTresWinniePuzzleLinearMoveParam final
{
public:
	uint8                                         Pad_0[0xC0];                                       // 0x0000(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleLinearMoveParam) == 0x0120AA, "Wrong alignment on FTresWinniePuzzleLinearMoveParam");
static_assert(sizeof(FTresWinniePuzzleLinearMoveParam) == 0x0120AA, "Wrong size on FTresWinniePuzzleLinearMoveParam");

// ScriptStruct TresGame.TresShipLevelUpDataTable
// 0xBE1C0 (0x114D1240 - 0x11413080)
struct alignas(0x114D1240) FTresShipLevelUpDataTable final : public FTableRowBase
{
public:
	int32                                         M_Exp;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_HP;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttackPower;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_Comment;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresShipLevelUpDataTable) == 0x114D1240, "Wrong alignment on FTresShipLevelUpDataTable");
static_assert(sizeof(FTresShipLevelUpDataTable) == 0x114D1240, "Wrong size on FTresShipLevelUpDataTable");
static_assert(offsetof(FTresShipLevelUpDataTable, M_Exp) == 0x000008, "Member 'FTresShipLevelUpDataTable::M_Exp' has a wrong offset!");
static_assert(offsetof(FTresShipLevelUpDataTable, M_HP) == 0x00000C, "Member 'FTresShipLevelUpDataTable::M_HP' has a wrong offset!");
static_assert(offsetof(FTresShipLevelUpDataTable, M_AttackPower) == 0x000010, "Member 'FTresShipLevelUpDataTable::M_AttackPower' has a wrong offset!");
static_assert(offsetof(FTresShipLevelUpDataTable, M_Comment) == 0x000018, "Member 'FTresShipLevelUpDataTable::M_Comment' has a wrong offset!");

// ScriptStruct TresGame.TresChrLevelUpDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresChrLevelUpDataTable final : public FTableRowBase
{
public:
	int32                                         M_Exp;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttackPower;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MagicPower;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_DefensePower;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AbilityPoint;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityKind1;                                    // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityKind2;                                    // 0x001D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityKind3;                                    // 0x001E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresChrLevelUpDataTable) == 0x11413080, "Wrong alignment on FTresChrLevelUpDataTable");
static_assert(sizeof(FTresChrLevelUpDataTable) == 0x11413080, "Wrong size on FTresChrLevelUpDataTable");
static_assert(offsetof(FTresChrLevelUpDataTable, M_Exp) == 0x000008, "Member 'FTresChrLevelUpDataTable::M_Exp' has a wrong offset!");
static_assert(offsetof(FTresChrLevelUpDataTable, M_AttackPower) == 0x00000C, "Member 'FTresChrLevelUpDataTable::M_AttackPower' has a wrong offset!");
static_assert(offsetof(FTresChrLevelUpDataTable, M_MagicPower) == 0x000010, "Member 'FTresChrLevelUpDataTable::M_MagicPower' has a wrong offset!");
static_assert(offsetof(FTresChrLevelUpDataTable, M_DefensePower) == 0x000014, "Member 'FTresChrLevelUpDataTable::M_DefensePower' has a wrong offset!");
static_assert(offsetof(FTresChrLevelUpDataTable, M_AbilityPoint) == 0x000018, "Member 'FTresChrLevelUpDataTable::M_AbilityPoint' has a wrong offset!");
static_assert(offsetof(FTresChrLevelUpDataTable, M_AbilityKind1) == 0x00001C, "Member 'FTresChrLevelUpDataTable::M_AbilityKind1' has a wrong offset!");
static_assert(offsetof(FTresChrLevelUpDataTable, M_AbilityKind2) == 0x00001D, "Member 'FTresChrLevelUpDataTable::M_AbilityKind2' has a wrong offset!");
static_assert(offsetof(FTresChrLevelUpDataTable, M_AbilityKind3) == 0x00001E, "Member 'FTresChrLevelUpDataTable::M_AbilityKind3' has a wrong offset!");

// ScriptStruct TresGame.TresChrBaseParamDataTable
// 0xBEBF0 (0x114D1C70 - 0x11413080)
struct alignas(0x114D1C70) FTresChrBaseParamDataTable final : public FTableRowBase
{
public:
	int32                                         M_MaxHitPoint;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxHPRate;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxMagicPoint;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxFocusPoint;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttackPower;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MagicPower;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_DefensePower;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AbilityPoint;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ExpRate;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresBodyPushPowerLevel                       M_BodyPushPower;                                   // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresChrBiologicalType                        M_BioType;                                         // 0x002D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_AttractionRate;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxBodyStrongValue;                              // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxArmorHP;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_DamageMin;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_DamageMax;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_NeedReactionSameTeamZeroDmgAtk : 1;              // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_RevengeLimit;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxRevengeCount;                                 // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevengeCoolDownTime;                             // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevengeCoefficientPhysical;                      // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevengeCoefficientFire;                          // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevengeCoefficientBlizzard;                      // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevengeCoefficientThunder;                       // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevengeCoefficientWater;                         // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevengeCoefficientAero;                          // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevengeCoefficientDark;                          // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevengeCoefficientNoType;                        // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistPhysical;                              // 0x0074(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistFire;                                  // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistBlizzard;                              // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistThunder;                               // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistWater;                                 // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistAero;                                  // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistDark;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistNoType;                                // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ResistRapidFire;                                 // 0x0094(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ResistComboParam;                                // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_AttrWeekPointPhysical : 1;                       // 0x009C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_AttrWeekPointFire : 1;                           // 0x009C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_AttrWeekPointBlizzard : 1;                       // 0x009C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_AttrWeekPointThunder : 1;                        // 0x009C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_AttrWeekPointWater : 1;                          // 0x009C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_AttrWeekPointAero : 1;                           // 0x009C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_AttrWeekPointDark : 1;                           // 0x009C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_AttrWeekPointNoType : 1;                         // 0x009C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectFreeFlow : 1;                       // 0x009D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectDeath : 1;                          // 0x009D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectCatch : 1;                          // 0x009D(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectDrillBind : 1;                      // 0x009D(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectYoBind : 1;                         // 0x009D(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectRalphBind : 1;                      // 0x009D(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectEnergyBurst : 1;                    // 0x009D(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectFreeze : 1;                         // 0x009D(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectStop : 1;                           // 0x009E(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectMagnet : 1;                         // 0x009E(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectStun : 1;                           // 0x009E(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectSneeze : 1;                         // 0x009E(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectHoney : 1;                          // 0x009E(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectCloud : 1;                          // 0x009E(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectDischarge : 1;                      // 0x009E(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectBurn : 1;                           // 0x009E(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bResistEffectPoleSpinTurn : 1;                   // 0x009F(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ETresDropItemID                               M_DropPrize1;                                      // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_NumDropPrize1;                                   // 0x00A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_DropPrize2;                                      // 0x00A8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_NumDropPrize2;                                   // 0x00AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_DropItemID;                                      // 0x00B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_DropItemRate;                                    // 0x00B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_DropItemID2;                                     // 0x00B8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_DropItemRate2;                                   // 0x00BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_DropItemID3;                                     // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_DropItemRate3;                                   // 0x00C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresChrBaseParamDataTable) == 0x114D1C70, "Wrong alignment on FTresChrBaseParamDataTable");
static_assert(sizeof(FTresChrBaseParamDataTable) == 0x114D1C70, "Wrong size on FTresChrBaseParamDataTable");
static_assert(offsetof(FTresChrBaseParamDataTable, M_MaxHitPoint) == 0x000008, "Member 'FTresChrBaseParamDataTable::M_MaxHitPoint' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_MaxHPRate) == 0x00000C, "Member 'FTresChrBaseParamDataTable::M_MaxHPRate' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_MaxMagicPoint) == 0x000010, "Member 'FTresChrBaseParamDataTable::M_MaxMagicPoint' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_MaxFocusPoint) == 0x000014, "Member 'FTresChrBaseParamDataTable::M_MaxFocusPoint' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AttackPower) == 0x000018, "Member 'FTresChrBaseParamDataTable::M_AttackPower' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_MagicPower) == 0x00001C, "Member 'FTresChrBaseParamDataTable::M_MagicPower' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DefensePower) == 0x000020, "Member 'FTresChrBaseParamDataTable::M_DefensePower' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AbilityPoint) == 0x000024, "Member 'FTresChrBaseParamDataTable::M_AbilityPoint' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_ExpRate) == 0x000028, "Member 'FTresChrBaseParamDataTable::M_ExpRate' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_BodyPushPower) == 0x00002C, "Member 'FTresChrBaseParamDataTable::M_BodyPushPower' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_BioType) == 0x00002D, "Member 'FTresChrBaseParamDataTable::M_BioType' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AttractionRate) == 0x000030, "Member 'FTresChrBaseParamDataTable::M_AttractionRate' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_MaxBodyStrongValue) == 0x000034, "Member 'FTresChrBaseParamDataTable::M_MaxBodyStrongValue' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_MaxArmorHP) == 0x000038, "Member 'FTresChrBaseParamDataTable::M_MaxArmorHP' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DamageMin) == 0x00003C, "Member 'FTresChrBaseParamDataTable::M_DamageMin' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DamageMax) == 0x000040, "Member 'FTresChrBaseParamDataTable::M_DamageMax' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_RevengeLimit) == 0x000048, "Member 'FTresChrBaseParamDataTable::M_RevengeLimit' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_MaxRevengeCount) == 0x00004C, "Member 'FTresChrBaseParamDataTable::M_MaxRevengeCount' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_RevengeCoolDownTime) == 0x000050, "Member 'FTresChrBaseParamDataTable::M_RevengeCoolDownTime' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_RevengeCoefficientPhysical) == 0x000054, "Member 'FTresChrBaseParamDataTable::M_RevengeCoefficientPhysical' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_RevengeCoefficientFire) == 0x000058, "Member 'FTresChrBaseParamDataTable::M_RevengeCoefficientFire' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_RevengeCoefficientBlizzard) == 0x00005C, "Member 'FTresChrBaseParamDataTable::M_RevengeCoefficientBlizzard' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_RevengeCoefficientThunder) == 0x000060, "Member 'FTresChrBaseParamDataTable::M_RevengeCoefficientThunder' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_RevengeCoefficientWater) == 0x000064, "Member 'FTresChrBaseParamDataTable::M_RevengeCoefficientWater' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_RevengeCoefficientAero) == 0x000068, "Member 'FTresChrBaseParamDataTable::M_RevengeCoefficientAero' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_RevengeCoefficientDark) == 0x00006C, "Member 'FTresChrBaseParamDataTable::M_RevengeCoefficientDark' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_RevengeCoefficientNoType) == 0x000070, "Member 'FTresChrBaseParamDataTable::M_RevengeCoefficientNoType' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AttrResistPhysical) == 0x000074, "Member 'FTresChrBaseParamDataTable::M_AttrResistPhysical' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AttrResistFire) == 0x000078, "Member 'FTresChrBaseParamDataTable::M_AttrResistFire' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AttrResistBlizzard) == 0x00007C, "Member 'FTresChrBaseParamDataTable::M_AttrResistBlizzard' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AttrResistThunder) == 0x000080, "Member 'FTresChrBaseParamDataTable::M_AttrResistThunder' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AttrResistWater) == 0x000084, "Member 'FTresChrBaseParamDataTable::M_AttrResistWater' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AttrResistAero) == 0x000088, "Member 'FTresChrBaseParamDataTable::M_AttrResistAero' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AttrResistDark) == 0x00008C, "Member 'FTresChrBaseParamDataTable::M_AttrResistDark' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_AttrResistNoType) == 0x000090, "Member 'FTresChrBaseParamDataTable::M_AttrResistNoType' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_ResistRapidFire) == 0x000094, "Member 'FTresChrBaseParamDataTable::M_ResistRapidFire' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_ResistComboParam) == 0x000098, "Member 'FTresChrBaseParamDataTable::M_ResistComboParam' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DropPrize1) == 0x0000A0, "Member 'FTresChrBaseParamDataTable::M_DropPrize1' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_NumDropPrize1) == 0x0000A4, "Member 'FTresChrBaseParamDataTable::M_NumDropPrize1' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DropPrize2) == 0x0000A8, "Member 'FTresChrBaseParamDataTable::M_DropPrize2' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_NumDropPrize2) == 0x0000AC, "Member 'FTresChrBaseParamDataTable::M_NumDropPrize2' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DropItemID) == 0x0000B0, "Member 'FTresChrBaseParamDataTable::M_DropItemID' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DropItemRate) == 0x0000B4, "Member 'FTresChrBaseParamDataTable::M_DropItemRate' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DropItemID2) == 0x0000B8, "Member 'FTresChrBaseParamDataTable::M_DropItemID2' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DropItemRate2) == 0x0000BC, "Member 'FTresChrBaseParamDataTable::M_DropItemRate2' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DropItemID3) == 0x0000C0, "Member 'FTresChrBaseParamDataTable::M_DropItemID3' has a wrong offset!");
static_assert(offsetof(FTresChrBaseParamDataTable, M_DropItemRate3) == 0x0000C4, "Member 'FTresChrBaseParamDataTable::M_DropItemRate3' has a wrong offset!");

// ScriptStruct TresGame.TresMBCurveKeyElement
// 0x1154EB40 (0x1154EB40 - 0x0000)
struct alignas(0x1154EB40) FTresMBCurveKeyElement final
{
public:
	ETresMBCurveInterp                            M_Interpolation;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Time;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Value;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Left;                                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Right;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMBCurveKeyElement) == 0x1154EB40, "Wrong alignment on FTresMBCurveKeyElement");
static_assert(sizeof(FTresMBCurveKeyElement) == 0x1154EB40, "Wrong size on FTresMBCurveKeyElement");
static_assert(offsetof(FTresMBCurveKeyElement, M_Interpolation) == 0x000000, "Member 'FTresMBCurveKeyElement::M_Interpolation' has a wrong offset!");
static_assert(offsetof(FTresMBCurveKeyElement, M_Time) == 0x000004, "Member 'FTresMBCurveKeyElement::M_Time' has a wrong offset!");
static_assert(offsetof(FTresMBCurveKeyElement, M_Value) == 0x000008, "Member 'FTresMBCurveKeyElement::M_Value' has a wrong offset!");
static_assert(offsetof(FTresMBCurveKeyElement, M_Left) == 0x00000C, "Member 'FTresMBCurveKeyElement::M_Left' has a wrong offset!");
static_assert(offsetof(FTresMBCurveKeyElement, M_Right) == 0x000010, "Member 'FTresMBCurveKeyElement::M_Right' has a wrong offset!");

// ScriptStruct TresGame.TresMBCurveElement
// 0x0010 (0x0010 - 0x0000)
struct FTresMBCurveElement final
{
public:
	TArray<struct FTresMBCurveKeyElement>         M_Keys;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMBCurveElement) == 0x000008, "Wrong alignment on FTresMBCurveElement");
static_assert(sizeof(FTresMBCurveElement) == 0x000010, "Wrong size on FTresMBCurveElement");
static_assert(offsetof(FTresMBCurveElement, M_Keys) == 0x000000, "Member 'FTresMBCurveElement::M_Keys' has a wrong offset!");

// ScriptStruct TresGame.TresBitMoveParam_e_ex357
// 0x11506F70 (0x11506F70 - 0x0000)
struct alignas(0x11506F70) FTresBitMoveParam_e_ex357 final
{
public:
	struct FFloatInterval                         RadiusRange;                                       // 0x0000(0x112F06E0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         HeightRange;                                       // 0x0008(0x112F06E0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearEndTime;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveStartIntervalTime;                             // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBitMoveParam_e_ex357) == 0x11506F70, "Wrong alignment on FTresBitMoveParam_e_ex357");
static_assert(sizeof(FTresBitMoveParam_e_ex357) == 0x11506F70, "Wrong size on FTresBitMoveParam_e_ex357");
static_assert(offsetof(FTresBitMoveParam_e_ex357, RadiusRange) == 0x000000, "Member 'FTresBitMoveParam_e_ex357::RadiusRange' has a wrong offset!");
static_assert(offsetof(FTresBitMoveParam_e_ex357, HeightRange) == 0x000008, "Member 'FTresBitMoveParam_e_ex357::HeightRange' has a wrong offset!");
static_assert(offsetof(FTresBitMoveParam_e_ex357, AppearEndTime) == 0x000010, "Member 'FTresBitMoveParam_e_ex357::AppearEndTime' has a wrong offset!");
static_assert(offsetof(FTresBitMoveParam_e_ex357, MoveStartIntervalTime) == 0x000014, "Member 'FTresBitMoveParam_e_ex357::MoveStartIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresBitMoveParam_e_ex357, MoveSpeed) == 0x000018, "Member 'FTresBitMoveParam_e_ex357::MoveSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresCollisionDistanceData
// 0x0018 (0x0018 - 0x0000)
struct FTresCollisionDistanceData final
{
public:
	bool                                          bExclusionMode;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Length;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             ClassArray;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCollisionDistanceData) == 0x000008, "Wrong alignment on FTresCollisionDistanceData");
static_assert(sizeof(FTresCollisionDistanceData) == 0x000018, "Wrong size on FTresCollisionDistanceData");
static_assert(offsetof(FTresCollisionDistanceData, bExclusionMode) == 0x000000, "Member 'FTresCollisionDistanceData::bExclusionMode' has a wrong offset!");
static_assert(offsetof(FTresCollisionDistanceData, Length) == 0x000004, "Member 'FTresCollisionDistanceData::Length' has a wrong offset!");
static_assert(offsetof(FTresCollisionDistanceData, ClassArray) == 0x000008, "Member 'FTresCollisionDistanceData::ClassArray' has a wrong offset!");

// ScriptStruct TresGame.VoiceSet_e_ex306
// 0x0018 (0x0018 - 0x0000)
struct FVoiceSet_e_ex306 final
{
public:
	TArray<class USoundBase*>                     VoiceDataArray;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EVoiceType_e_ex306                            VoiceType;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoiceSet_e_ex306) == 0x000008, "Wrong alignment on FVoiceSet_e_ex306");
static_assert(sizeof(FVoiceSet_e_ex306) == 0x000018, "Wrong size on FVoiceSet_e_ex306");
static_assert(offsetof(FVoiceSet_e_ex306, VoiceDataArray) == 0x000000, "Member 'FVoiceSet_e_ex306::VoiceDataArray' has a wrong offset!");
static_assert(offsetof(FVoiceSet_e_ex306, VoiceType) == 0x000010, "Member 'FVoiceSet_e_ex306::VoiceType' has a wrong offset!");

// ScriptStruct TresGame.TresCollMgrFootStepEffectGenTickFunction
// 0x0002 (0x21B8 - 0x21B6)
struct alignas(0x21B8) FTresCollMgrFootStepEffectGenTickFunction final : public FTresCollMgrSubTickFunction
{
};
static_assert(alignof(FTresCollMgrFootStepEffectGenTickFunction) == 0x0021B8, "Wrong alignment on FTresCollMgrFootStepEffectGenTickFunction");
static_assert(sizeof(FTresCollMgrFootStepEffectGenTickFunction) == 0x0021B8, "Wrong size on FTresCollMgrFootStepEffectGenTickFunction");

// ScriptStruct TresGame.TresComNpcEntitySetData
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresComNpcEntitySetData final
{
public:
	struct FVector                                M_Location;                                        // 0x0000(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_Rotation;                                        // 0x000C(0x112E9AF0)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   M_RecordName;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_IdleAnimName;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_ActionSeqName;                                   // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_MasterPoseSeqName;                               // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_PoseGroupType;                                   // 0x0038(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_ReactionType;                                    // 0x003A(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_BodyColType;                                     // 0x003C(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_ScaleType;                                       // 0x003E(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AnimActorType;                                   // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_MeshActorType;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_EntityName;                                      // 0x0050(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_FaceAnimName;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bDisableLookAt : 1;                              // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcEntitySetData) == 0x112E9AF0, "Wrong alignment on FTresComNpcEntitySetData");
static_assert(sizeof(FTresComNpcEntitySetData) == 0x112E9AF0, "Wrong size on FTresComNpcEntitySetData");
static_assert(offsetof(FTresComNpcEntitySetData, M_Location) == 0x000000, "Member 'FTresComNpcEntitySetData::M_Location' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_Rotation) == 0x00000C, "Member 'FTresComNpcEntitySetData::M_Rotation' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_RecordName) == 0x000018, "Member 'FTresComNpcEntitySetData::M_RecordName' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_IdleAnimName) == 0x000020, "Member 'FTresComNpcEntitySetData::M_IdleAnimName' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_ActionSeqName) == 0x000028, "Member 'FTresComNpcEntitySetData::M_ActionSeqName' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_MasterPoseSeqName) == 0x000030, "Member 'FTresComNpcEntitySetData::M_MasterPoseSeqName' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_PoseGroupType) == 0x000038, "Member 'FTresComNpcEntitySetData::M_PoseGroupType' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_ReactionType) == 0x00003A, "Member 'FTresComNpcEntitySetData::M_ReactionType' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_BodyColType) == 0x00003C, "Member 'FTresComNpcEntitySetData::M_BodyColType' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_ScaleType) == 0x00003E, "Member 'FTresComNpcEntitySetData::M_ScaleType' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_AnimActorType) == 0x000040, "Member 'FTresComNpcEntitySetData::M_AnimActorType' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_MeshActorType) == 0x000048, "Member 'FTresComNpcEntitySetData::M_MeshActorType' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_EntityName) == 0x000050, "Member 'FTresComNpcEntitySetData::M_EntityName' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntitySetData, M_FaceAnimName) == 0x000058, "Member 'FTresComNpcEntitySetData::M_FaceAnimName' has a wrong offset!");

// ScriptStruct TresGame.TresCollMgrDetectPhysMatTickFunction
// 0x000C (0x21C2 - 0x21B6)
struct alignas(0x21C2) FTresCollMgrDetectPhysMatTickFunction final : public FTresCollMgrSubTickFunction
{
};
static_assert(alignof(FTresCollMgrDetectPhysMatTickFunction) == 0x0021C2, "Wrong alignment on FTresCollMgrDetectPhysMatTickFunction");
static_assert(sizeof(FTresCollMgrDetectPhysMatTickFunction) == 0x0021C2, "Wrong size on FTresCollMgrDetectPhysMatTickFunction");

// ScriptStruct TresGame.TresDebugMenuFrameLabel
// 0x114E7CB0 (0x114E7CB0 - 0x0000)
struct alignas(0x114E7CB0) FTresDebugMenuFrameLabel final
{
public:
	class FName                                   M_LabelName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_LabelFrame;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresDebugMenuFrameLabel) == 0x114E7CB0, "Wrong alignment on FTresDebugMenuFrameLabel");
static_assert(sizeof(FTresDebugMenuFrameLabel) == 0x114E7CB0, "Wrong size on FTresDebugMenuFrameLabel");
static_assert(offsetof(FTresDebugMenuFrameLabel, M_LabelName) == 0x000000, "Member 'FTresDebugMenuFrameLabel::M_LabelName' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuFrameLabel, M_LabelFrame) == 0x000008, "Member 'FTresDebugMenuFrameLabel::M_LabelFrame' has a wrong offset!");

// ScriptStruct TresGame.TresAssetReferences
// 0x0048 (0x0048 - 0x0000)
struct FTresAssetReferences final
{
public:
	class FName                                   M_Tag;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStringAssetReference>          M_Assets;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        M_Residents;                                       // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresAssetReferences) == 0x000008, "Wrong alignment on FTresAssetReferences");
static_assert(sizeof(FTresAssetReferences) == 0x000048, "Wrong size on FTresAssetReferences");
static_assert(offsetof(FTresAssetReferences, M_Tag) == 0x000000, "Member 'FTresAssetReferences::M_Tag' has a wrong offset!");
static_assert(offsetof(FTresAssetReferences, M_Assets) == 0x000008, "Member 'FTresAssetReferences::M_Assets' has a wrong offset!");
static_assert(offsetof(FTresAssetReferences, M_Residents) == 0x000018, "Member 'FTresAssetReferences::M_Residents' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickMagmaTable
// 0x1162D0 (0x11529350 - 0x11413080)
struct alignas(0x11529350) FTresGumiShipGimmickMagmaTable final : public FTableRowBase
{
public:
	class UParticleSystem*                        M_pMagmaVFX;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPlayerDistance;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipGimmickMagmaTable) == 0x11529350, "Wrong alignment on FTresGumiShipGimmickMagmaTable");
static_assert(sizeof(FTresGumiShipGimmickMagmaTable) == 0x11529350, "Wrong size on FTresGumiShipGimmickMagmaTable");
static_assert(offsetof(FTresGumiShipGimmickMagmaTable, M_pMagmaVFX) == 0x000008, "Member 'FTresGumiShipGimmickMagmaTable::M_pMagmaVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickMagmaTable, M_fPlayerDistance) == 0x000010, "Member 'FTresGumiShipGimmickMagmaTable::M_fPlayerDistance' has a wrong offset!");

// ScriptStruct TresGame.TresRaPuddingSchedule
// 0x0070 (0x0070 - 0x0000)
struct FTresRaPuddingSchedule final
{
public:
	TWeakObjectPtr<class ATresCharPawnBase>       TargetPawn;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresRaPuddingCommand>          CommandList;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Flag_LoopOnEnd : 1;                                // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresRaPuddingCommand>          DamageList;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FTresRaPuddingCommand>          ShutterList;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FTresRaPuddingCommand>          AngryList;                                         // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTresRaPuddingCommand>          HappyList;                                         // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRaPuddingSchedule) == 0x000008, "Wrong alignment on FTresRaPuddingSchedule");
static_assert(sizeof(FTresRaPuddingSchedule) == 0x000070, "Wrong size on FTresRaPuddingSchedule");
static_assert(offsetof(FTresRaPuddingSchedule, TargetPawn) == 0x000000, "Member 'FTresRaPuddingSchedule::TargetPawn' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingSchedule, CommandList) == 0x000008, "Member 'FTresRaPuddingSchedule::CommandList' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingSchedule, DamageList) == 0x000020, "Member 'FTresRaPuddingSchedule::DamageList' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingSchedule, ShutterList) == 0x000030, "Member 'FTresRaPuddingSchedule::ShutterList' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingSchedule, AngryList) == 0x000040, "Member 'FTresRaPuddingSchedule::AngryList' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingSchedule, HappyList) == 0x000050, "Member 'FTresRaPuddingSchedule::HappyList' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickPrizeBoxTable
// 0x1139E0 (0x11526A60 - 0x11413080)
struct alignas(0x11526A60) FTresGumiShipGimmickPrizeBoxTable final : public FTableRowBase
{
public:
	float                                         RollingTime;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerLimitTime;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotSpeedScale;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceAttenuation;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipGimmickPrizeBoxTable) == 0x11526A60, "Wrong alignment on FTresGumiShipGimmickPrizeBoxTable");
static_assert(sizeof(FTresGumiShipGimmickPrizeBoxTable) == 0x11526A60, "Wrong size on FTresGumiShipGimmickPrizeBoxTable");
static_assert(offsetof(FTresGumiShipGimmickPrizeBoxTable, RollingTime) == 0x000008, "Member 'FTresGumiShipGimmickPrizeBoxTable::RollingTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickPrizeBoxTable, TriggerLimitTime) == 0x00000C, "Member 'FTresGumiShipGimmickPrizeBoxTable::TriggerLimitTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickPrizeBoxTable, MaxCount) == 0x000010, "Member 'FTresGumiShipGimmickPrizeBoxTable::MaxCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickPrizeBoxTable, RotSpeedScale) == 0x000014, "Member 'FTresGumiShipGimmickPrizeBoxTable::RotSpeedScale' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickPrizeBoxTable, BounceAttenuation) == 0x000018, "Member 'FTresGumiShipGimmickPrizeBoxTable::BounceAttenuation' has a wrong offset!");

// ScriptStruct TresGame.TresStreamingTextureData
// 0x1157CCF0 (0x1157CCF0 - 0x0000)
struct alignas(0x1157CCF0) FTresStreamingTextureData final
{
public:
	struct FStringAssetReference                  M_TexturePath;                                     // 0x0000(0x0010)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MipMap;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxMipMap;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresStreamingTextureData) == 0x1157CCF0, "Wrong alignment on FTresStreamingTextureData");
static_assert(sizeof(FTresStreamingTextureData) == 0x1157CCF0, "Wrong size on FTresStreamingTextureData");
static_assert(offsetof(FTresStreamingTextureData, M_TexturePath) == 0x000000, "Member 'FTresStreamingTextureData::M_TexturePath' has a wrong offset!");
static_assert(offsetof(FTresStreamingTextureData, M_MipMap) == 0x000010, "Member 'FTresStreamingTextureData::M_MipMap' has a wrong offset!");
static_assert(offsetof(FTresStreamingTextureData, M_MaxMipMap) == 0x000014, "Member 'FTresStreamingTextureData::M_MaxMipMap' has a wrong offset!");

// ScriptStruct TresGame.TresTextureStream
// 0x0028 (0x0028 - 0x0000)
struct FTresTextureStream final
{
public:
	class FName                                   M_ViewTarget;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresStreamingTextureData>      M_TextureData;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     M_Textures;                                        // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTextureStream) == 0x000008, "Wrong alignment on FTresTextureStream");
static_assert(sizeof(FTresTextureStream) == 0x000028, "Wrong size on FTresTextureStream");
static_assert(offsetof(FTresTextureStream, M_ViewTarget) == 0x000000, "Member 'FTresTextureStream::M_ViewTarget' has a wrong offset!");
static_assert(offsetof(FTresTextureStream, M_TextureData) == 0x000008, "Member 'FTresTextureStream::M_TextureData' has a wrong offset!");
static_assert(offsetof(FTresTextureStream, M_Textures) == 0x000018, "Member 'FTresTextureStream::M_Textures' has a wrong offset!");

// ScriptStruct TresGame.Tres_e_ex773_Eclipse13_ShellMoveData
// 0x115690B0 (0x115690B0 - 0x0000)
struct alignas(0x115690B0) FTres_e_ex773_Eclipse13_ShellMoveData final
{
public:
	float                                         SpawnTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToLandingPoint;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorIndex;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LandingPointIndex;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTres_e_ex773_Eclipse13_ShellMoveData) == 0x115690B0, "Wrong alignment on FTres_e_ex773_Eclipse13_ShellMoveData");
static_assert(sizeof(FTres_e_ex773_Eclipse13_ShellMoveData) == 0x115690B0, "Wrong size on FTres_e_ex773_Eclipse13_ShellMoveData");
static_assert(offsetof(FTres_e_ex773_Eclipse13_ShellMoveData, SpawnTime) == 0x000000, "Member 'FTres_e_ex773_Eclipse13_ShellMoveData::SpawnTime' has a wrong offset!");
static_assert(offsetof(FTres_e_ex773_Eclipse13_ShellMoveData, TimeToLandingPoint) == 0x000004, "Member 'FTres_e_ex773_Eclipse13_ShellMoveData::TimeToLandingPoint' has a wrong offset!");
static_assert(offsetof(FTres_e_ex773_Eclipse13_ShellMoveData, GeneratorIndex) == 0x000008, "Member 'FTres_e_ex773_Eclipse13_ShellMoveData::GeneratorIndex' has a wrong offset!");
static_assert(offsetof(FTres_e_ex773_Eclipse13_ShellMoveData, LandingPointIndex) == 0x00000C, "Member 'FTres_e_ex773_Eclipse13_ShellMoveData::LandingPointIndex' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuTextResource
// 0x114E8720 (0x114E8720 - 0x0000)
struct alignas(0x114E8720) FTresDebugMenuTextResource final
{
public:
	class FString                                 M_FontFace;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_FontSize;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 M_Color;                                           // 0x0014(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Width;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Height;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDebugMenuTextAlignment                   M_Alignment;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDebugMenuTextVAlignment                  M_VAlignment;                                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDrawTextFilterParam>           M_Filters;                                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 M_TextString;                                      // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuTextResource) == 0x114E8720, "Wrong alignment on FTresDebugMenuTextResource");
static_assert(sizeof(FTresDebugMenuTextResource) == 0x114E8720, "Wrong size on FTresDebugMenuTextResource");
static_assert(offsetof(FTresDebugMenuTextResource, M_FontFace) == 0x000000, "Member 'FTresDebugMenuTextResource::M_FontFace' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTextResource, M_FontSize) == 0x000010, "Member 'FTresDebugMenuTextResource::M_FontSize' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTextResource, M_Color) == 0x000014, "Member 'FTresDebugMenuTextResource::M_Color' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTextResource, M_Width) == 0x000018, "Member 'FTresDebugMenuTextResource::M_Width' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTextResource, M_Height) == 0x00001C, "Member 'FTresDebugMenuTextResource::M_Height' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTextResource, M_Alignment) == 0x000020, "Member 'FTresDebugMenuTextResource::M_Alignment' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTextResource, M_VAlignment) == 0x000021, "Member 'FTresDebugMenuTextResource::M_VAlignment' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTextResource, M_Filters) == 0x000028, "Member 'FTresDebugMenuTextResource::M_Filters' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuTextResource, M_TextString) == 0x000038, "Member 'FTresDebugMenuTextResource::M_TextString' has a wrong offset!");

// ScriptStruct TresGame.TresMI_02GeneratorRuleParam
// 0x11512CB0 (0x11512CB0 - 0x0000)
struct alignas(0x11512CB0) FTresMI_02GeneratorRuleParam final
{
public:
	TSubclassOf<class ATresGimmickActor>          GenerateClass;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextLength;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Life;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMI_02GeneratorRuleParam) == 0x11512CB0, "Wrong alignment on FTresMI_02GeneratorRuleParam");
static_assert(sizeof(FTresMI_02GeneratorRuleParam) == 0x11512CB0, "Wrong size on FTresMI_02GeneratorRuleParam");
static_assert(offsetof(FTresMI_02GeneratorRuleParam, GenerateClass) == 0x000000, "Member 'FTresMI_02GeneratorRuleParam::GenerateClass' has a wrong offset!");
static_assert(offsetof(FTresMI_02GeneratorRuleParam, NextLength) == 0x000008, "Member 'FTresMI_02GeneratorRuleParam::NextLength' has a wrong offset!");
static_assert(offsetof(FTresMI_02GeneratorRuleParam, Life) == 0x00000C, "Member 'FTresMI_02GeneratorRuleParam::Life' has a wrong offset!");

// ScriptStruct TresGame.TresMI_02GeneratorRuleParamArray
// 0x0010 (0x0010 - 0x0000)
struct FTresMI_02GeneratorRuleParamArray final
{
public:
	TArray<struct FTresMI_02GeneratorRuleParam>   Params;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMI_02GeneratorRuleParamArray) == 0x000008, "Wrong alignment on FTresMI_02GeneratorRuleParamArray");
static_assert(sizeof(FTresMI_02GeneratorRuleParamArray) == 0x000010, "Wrong size on FTresMI_02GeneratorRuleParamArray");
static_assert(offsetof(FTresMI_02GeneratorRuleParamArray, Params) == 0x000000, "Member 'FTresMI_02GeneratorRuleParamArray::Params' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActionSetValue
// 0x114DA370 (0x114DA370 - 0x0000)
struct alignas(0x114DA370) FTresComNpcActionSetValue final
{
public:
	int32                                         M_Value;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_ScriptName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcActionSetValue) == 0x114DA370, "Wrong alignment on FTresComNpcActionSetValue");
static_assert(sizeof(FTresComNpcActionSetValue) == 0x114DA370, "Wrong size on FTresComNpcActionSetValue");
static_assert(offsetof(FTresComNpcActionSetValue, M_Value) == 0x000000, "Member 'FTresComNpcActionSetValue::M_Value' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSetValue, M_ScriptName) == 0x000008, "Member 'FTresComNpcActionSetValue::M_ScriptName' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcActionSetDatas
// 0x0020 (0x0020 - 0x0000)
struct FTresComNpcActionSetDatas final
{
public:
	class FName                                   M_DataName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bDropItem : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTargetTurn : 1;                                 // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresComNpcActionSetValue>      M_Values;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcActionSetDatas) == 0x000008, "Wrong alignment on FTresComNpcActionSetDatas");
static_assert(sizeof(FTresComNpcActionSetDatas) == 0x000020, "Wrong size on FTresComNpcActionSetDatas");
static_assert(offsetof(FTresComNpcActionSetDatas, M_DataName) == 0x000000, "Member 'FTresComNpcActionSetDatas::M_DataName' has a wrong offset!");
static_assert(offsetof(FTresComNpcActionSetDatas, M_Values) == 0x000010, "Member 'FTresComNpcActionSetDatas::M_Values' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyXIIIPlayerKilledVoiceData
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyXIIIPlayerKilledVoiceData final
{
public:
	ETresPlayerUniqueID                           PlayerUniqueID;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             VOICE;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyXIIIPlayerKilledVoiceData) == 0x000008, "Wrong alignment on FTresEnemyXIIIPlayerKilledVoiceData");
static_assert(sizeof(FTresEnemyXIIIPlayerKilledVoiceData) == 0x000010, "Wrong size on FTresEnemyXIIIPlayerKilledVoiceData");
static_assert(offsetof(FTresEnemyXIIIPlayerKilledVoiceData, PlayerUniqueID) == 0x000000, "Member 'FTresEnemyXIIIPlayerKilledVoiceData::PlayerUniqueID' has a wrong offset!");
static_assert(offsetof(FTresEnemyXIIIPlayerKilledVoiceData, VOICE) == 0x000008, "Member 'FTresEnemyXIIIPlayerKilledVoiceData::VOICE' has a wrong offset!");

// ScriptStruct TresGame.CameraSensitivityInfo
// 0x1152BB80 (0x1152BB80 - 0x0000)
struct alignas(0x1152BB80) FCameraSensitivityInfo final
{
public:
	float                                         M_fMin;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMax;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSensitivity;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraSensitivityInfo) == 0x1152BB80, "Wrong alignment on FCameraSensitivityInfo");
static_assert(sizeof(FCameraSensitivityInfo) == 0x1152BB80, "Wrong size on FCameraSensitivityInfo");
static_assert(offsetof(FCameraSensitivityInfo, M_fMin) == 0x000000, "Member 'FCameraSensitivityInfo::M_fMin' has a wrong offset!");
static_assert(offsetof(FCameraSensitivityInfo, M_fMax) == 0x000004, "Member 'FCameraSensitivityInfo::M_fMax' has a wrong offset!");
static_assert(offsetof(FCameraSensitivityInfo, M_fSensitivity) == 0x000008, "Member 'FCameraSensitivityInfo::M_fSensitivity' has a wrong offset!");

// ScriptStruct TresGame.CameraSensitivityInfoSet
// 0x1152BB80 (0x1152BB80 - 0x0000)
struct FCameraSensitivityInfoSet final
{
public:
	struct FCameraSensitivityInfo                 M_RotationSpeedPitch;                              // 0x0000(0x1152BB80)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraSensitivityInfo                 M_RotationSpeedYaw;                                // 0x000C(0x1152BB80)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraSensitivityInfoSet) == 0x1152BB80, "Wrong alignment on FCameraSensitivityInfoSet");
static_assert(sizeof(FCameraSensitivityInfoSet) == 0x1152BB80, "Wrong size on FCameraSensitivityInfoSet");
static_assert(offsetof(FCameraSensitivityInfoSet, M_RotationSpeedPitch) == 0x000000, "Member 'FCameraSensitivityInfoSet::M_RotationSpeedPitch' has a wrong offset!");
static_assert(offsetof(FCameraSensitivityInfoSet, M_RotationSpeedYaw) == 0x00000C, "Member 'FCameraSensitivityInfoSet::M_RotationSpeedYaw' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcEntityVoiceData
// 0x0020 (0x0020 - 0x0000)
struct FTresComNpcEntityVoiceData final
{
public:
	class FName                                   M_EntityName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fVoiceRange;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           M_VoiceLists;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcEntityVoiceData) == 0x000008, "Wrong alignment on FTresComNpcEntityVoiceData");
static_assert(sizeof(FTresComNpcEntityVoiceData) == 0x000020, "Wrong size on FTresComNpcEntityVoiceData");
static_assert(offsetof(FTresComNpcEntityVoiceData, M_EntityName) == 0x000000, "Member 'FTresComNpcEntityVoiceData::M_EntityName' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntityVoiceData, M_fVoiceRange) == 0x000008, "Member 'FTresComNpcEntityVoiceData::M_fVoiceRange' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntityVoiceData, M_VoiceLists) == 0x000010, "Member 'FTresComNpcEntityVoiceData::M_VoiceLists' has a wrong offset!");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanSmallWaveSuppression
// 0x0006 (0x4CDC - 0x4CD6)
struct alignas(0x4CDC) FTresTaggedActorPropertyValue_OceanSmallWaveSuppression final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanSmallWaveSuppression) == 0x004CDC, "Wrong alignment on FTresTaggedActorPropertyValue_OceanSmallWaveSuppression");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanSmallWaveSuppression) == 0x004CDC, "Wrong size on FTresTaggedActorPropertyValue_OceanSmallWaveSuppression");

// ScriptStruct TresGame.TresComNpcEntityLinkData
// 0x0018 (0x0018 - 0x0000)
struct FTresComNpcEntityLinkData final
{
public:
	class FName                                   M_EntityName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_LinkActors;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcEntityLinkData) == 0x000008, "Wrong alignment on FTresComNpcEntityLinkData");
static_assert(sizeof(FTresComNpcEntityLinkData) == 0x000018, "Wrong size on FTresComNpcEntityLinkData");
static_assert(offsetof(FTresComNpcEntityLinkData, M_EntityName) == 0x000000, "Member 'FTresComNpcEntityLinkData::M_EntityName' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntityLinkData, M_LinkActors) == 0x000008, "Member 'FTresComNpcEntityLinkData::M_LinkActors' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcEntityMoveData
// 0x0028 (0x0028 - 0x0000)
struct FTresComNpcEntityMoveData final
{
public:
	class FName                                   M_EntityName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_ReplaceMovePoints;                               // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        M_MovePoints;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresComNpcEntityMoveData) == 0x000008, "Wrong alignment on FTresComNpcEntityMoveData");
static_assert(sizeof(FTresComNpcEntityMoveData) == 0x000028, "Wrong size on FTresComNpcEntityMoveData");
static_assert(offsetof(FTresComNpcEntityMoveData, M_EntityName) == 0x000000, "Member 'FTresComNpcEntityMoveData::M_EntityName' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntityMoveData, M_ReplaceMovePoints) == 0x000008, "Member 'FTresComNpcEntityMoveData::M_ReplaceMovePoints' has a wrong offset!");
static_assert(offsetof(FTresComNpcEntityMoveData, M_MovePoints) == 0x000018, "Member 'FTresComNpcEntityMoveData::M_MovePoints' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipSplinePathMoveExecutor
// 0x11B19 (0x11B19 - 0x0000)
struct alignas(0x11B19) FTresGumiShipSplinePathMoveExecutor final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipSplinePathMoveExecutor) == 0x011B19, "Wrong alignment on FTresGumiShipSplinePathMoveExecutor");
static_assert(sizeof(FTresGumiShipSplinePathMoveExecutor) == 0x011B19, "Wrong size on FTresGumiShipSplinePathMoveExecutor");

// ScriptStruct TresGame.TresUICustomizeMagicCommand
// 0x1157FF10 (0x1157FF10 - 0x0000)
struct FTresUICustomizeMagicCommand final
{
public:
	struct FTresUICustomizeCommand                Command[0x3];                                      // 0x0000(0x1157FF10)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUICustomizeMagicCommand) == 0x1157FF10, "Wrong alignment on FTresUICustomizeMagicCommand");
static_assert(sizeof(FTresUICustomizeMagicCommand) == 0x1157FF10, "Wrong size on FTresUICustomizeMagicCommand");
static_assert(offsetof(FTresUICustomizeMagicCommand, Command) == 0x000000, "Member 'FTresUICustomizeMagicCommand::Command' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcBodySetupData
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresComNpcBodySetupData final
{
public:
	int32                                         M_BodyType;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_attachBoneName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_BodySize;                                        // 0x0010(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_BodyLocation;                                    // 0x001C(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_BodyRotation;                                    // 0x0028(0x112E9AF0)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         M_bEnableDamage : 1;                               // 0x0034(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bEnablePush : 1;                                 // 0x0034(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bEnableCamera : 1;                               // 0x0034(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcBodySetupData) == 0x112E9AF0, "Wrong alignment on FTresComNpcBodySetupData");
static_assert(sizeof(FTresComNpcBodySetupData) == 0x112E9AF0, "Wrong size on FTresComNpcBodySetupData");
static_assert(offsetof(FTresComNpcBodySetupData, M_BodyType) == 0x000000, "Member 'FTresComNpcBodySetupData::M_BodyType' has a wrong offset!");
static_assert(offsetof(FTresComNpcBodySetupData, M_attachBoneName) == 0x000008, "Member 'FTresComNpcBodySetupData::M_attachBoneName' has a wrong offset!");
static_assert(offsetof(FTresComNpcBodySetupData, M_BodySize) == 0x000010, "Member 'FTresComNpcBodySetupData::M_BodySize' has a wrong offset!");
static_assert(offsetof(FTresComNpcBodySetupData, M_BodyLocation) == 0x00001C, "Member 'FTresComNpcBodySetupData::M_BodyLocation' has a wrong offset!");
static_assert(offsetof(FTresComNpcBodySetupData, M_BodyRotation) == 0x000028, "Member 'FTresComNpcBodySetupData::M_BodyRotation' has a wrong offset!");

// ScriptStruct TresGame.TresControlledRandomDistribution_Uniform
// 0x116A5 (0x116A5 - 0x0000)
struct alignas(0x116A5) FTresControlledRandomDistribution_Uniform final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresControlledRandomDistribution_Uniform) == 0x0116A5, "Wrong alignment on FTresControlledRandomDistribution_Uniform");
static_assert(sizeof(FTresControlledRandomDistribution_Uniform) == 0x0116A5, "Wrong size on FTresControlledRandomDistribution_Uniform");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_LOD
// 0xD275 (0x11F4B - 0x4CD6)
struct alignas(0x11F4B) FTresTaggedActorPropertyValue_LOD final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_LOD) == 0x011F4B, "Wrong alignment on FTresTaggedActorPropertyValue_LOD");
static_assert(sizeof(FTresTaggedActorPropertyValue_LOD) == 0x011F4B, "Wrong size on FTresTaggedActorPropertyValue_LOD");

// ScriptStruct TresGame.TresCoopSimultaneousRushInfo
// 0x0010 (0x0010 - 0x0000)
struct FTresCoopSimultaneousRushInfo final
{
public:
	float                                         M_Distance;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Yaw;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Pitch;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCoopColorSmokeKind                       M_ColorKind;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCoopSimultaneousRushInfo) == 0x000004, "Wrong alignment on FTresCoopSimultaneousRushInfo");
static_assert(sizeof(FTresCoopSimultaneousRushInfo) == 0x000010, "Wrong size on FTresCoopSimultaneousRushInfo");
static_assert(offsetof(FTresCoopSimultaneousRushInfo, M_Distance) == 0x000000, "Member 'FTresCoopSimultaneousRushInfo::M_Distance' has a wrong offset!");
static_assert(offsetof(FTresCoopSimultaneousRushInfo, M_Yaw) == 0x000004, "Member 'FTresCoopSimultaneousRushInfo::M_Yaw' has a wrong offset!");
static_assert(offsetof(FTresCoopSimultaneousRushInfo, M_Pitch) == 0x000008, "Member 'FTresCoopSimultaneousRushInfo::M_Pitch' has a wrong offset!");
static_assert(offsetof(FTresCoopSimultaneousRushInfo, M_ColorKind) == 0x00000C, "Member 'FTresCoopSimultaneousRushInfo::M_ColorKind' has a wrong offset!");

// ScriptStruct TresGame.AttackAppearParam_e_ex761
// 0x114DE670 (0x114DE670 - 0x0000)
struct alignas(0x114DE670) FAttackAppearParam_e_ex761 final
{
public:
	float                                         IntervalTime;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetYaw;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetPitch;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackAppearParam_e_ex761) == 0x114DE670, "Wrong alignment on FAttackAppearParam_e_ex761");
static_assert(sizeof(FAttackAppearParam_e_ex761) == 0x114DE670, "Wrong size on FAttackAppearParam_e_ex761");
static_assert(offsetof(FAttackAppearParam_e_ex761, IntervalTime) == 0x000000, "Member 'FAttackAppearParam_e_ex761::IntervalTime' has a wrong offset!");
static_assert(offsetof(FAttackAppearParam_e_ex761, Angle) == 0x000004, "Member 'FAttackAppearParam_e_ex761::Angle' has a wrong offset!");
static_assert(offsetof(FAttackAppearParam_e_ex761, Distance) == 0x000008, "Member 'FAttackAppearParam_e_ex761::Distance' has a wrong offset!");
static_assert(offsetof(FAttackAppearParam_e_ex761, Height) == 0x00000C, "Member 'FAttackAppearParam_e_ex761::Height' has a wrong offset!");
static_assert(offsetof(FAttackAppearParam_e_ex761, OffsetYaw) == 0x000010, "Member 'FAttackAppearParam_e_ex761::OffsetYaw' has a wrong offset!");
static_assert(offsetof(FAttackAppearParam_e_ex761, OffsetPitch) == 0x000014, "Member 'FAttackAppearParam_e_ex761::OffsetPitch' has a wrong offset!");

// ScriptStruct TresGame.AttackSendParam_e_ex761
// 0x114DDD40 (0x114DDD40 - 0x0000)
struct alignas(0x114DDD40) FAttackSendParam_e_ex761 final
{
public:
	float                                         StartDistance;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartHeight;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAccel;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartMaxSpeed;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffsetAngle;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingMoveRate;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopTime;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitSpeed;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingSpeedXY;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingSpeedZ;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingTargetOffsetRadius;                          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingEndDistance;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackSendParam_e_ex761) == 0x114DDD40, "Wrong alignment on FAttackSendParam_e_ex761");
static_assert(sizeof(FAttackSendParam_e_ex761) == 0x114DDD40, "Wrong size on FAttackSendParam_e_ex761");
static_assert(offsetof(FAttackSendParam_e_ex761, StartDistance) == 0x000000, "Member 'FAttackSendParam_e_ex761::StartDistance' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, StartHeight) == 0x000004, "Member 'FAttackSendParam_e_ex761::StartHeight' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, StartAccel) == 0x000008, "Member 'FAttackSendParam_e_ex761::StartAccel' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, StartMaxSpeed) == 0x00000C, "Member 'FAttackSendParam_e_ex761::StartMaxSpeed' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, StartOffsetAngle) == 0x000010, "Member 'FAttackSendParam_e_ex761::StartOffsetAngle' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, HomingMoveRate) == 0x000014, "Member 'FAttackSendParam_e_ex761::HomingMoveRate' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, LoopTime) == 0x000018, "Member 'FAttackSendParam_e_ex761::LoopTime' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, InitSpeed) == 0x00001C, "Member 'FAttackSendParam_e_ex761::InitSpeed' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, Acceleration) == 0x000020, "Member 'FAttackSendParam_e_ex761::Acceleration' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, MaxSpeed) == 0x000024, "Member 'FAttackSendParam_e_ex761::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, HomingSpeedXY) == 0x000028, "Member 'FAttackSendParam_e_ex761::HomingSpeedXY' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, HomingSpeedZ) == 0x00002C, "Member 'FAttackSendParam_e_ex761::HomingSpeedZ' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, HomingTargetOffsetRadius) == 0x000030, "Member 'FAttackSendParam_e_ex761::HomingTargetOffsetRadius' has a wrong offset!");
static_assert(offsetof(FAttackSendParam_e_ex761, HomingEndDistance) == 0x000034, "Member 'FAttackSendParam_e_ex761::HomingEndDistance' has a wrong offset!");

// ScriptStruct TresGame.AttackParam_e_ex761
// 0x114DE670 (0x114DE670 - 0x0000)
struct FAttackParam_e_ex761 final
{
public:
	struct FAttackAppearParam_e_ex761             AppearParam;                                       // 0x0000(0x114DE670)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAttackSendParam_e_ex761               SendParam;                                         // 0x0018(0x114DDD40)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackParam_e_ex761) == 0x114DE670, "Wrong alignment on FAttackParam_e_ex761");
static_assert(sizeof(FAttackParam_e_ex761) == 0x114DE670, "Wrong size on FAttackParam_e_ex761");
static_assert(offsetof(FAttackParam_e_ex761, AppearParam) == 0x000000, "Member 'FAttackParam_e_ex761::AppearParam' has a wrong offset!");
static_assert(offsetof(FAttackParam_e_ex761, SendParam) == 0x000018, "Member 'FAttackParam_e_ex761::SendParam' has a wrong offset!");

// ScriptStruct TresGame.TresLocText
// 0x1157C450 (0x1157C450 - 0x0000)
struct alignas(0x1157C450) FTresLocText final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Params;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 LocalizedText;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLocText) == 0x1157C450, "Wrong alignment on FTresLocText");
static_assert(sizeof(FTresLocText) == 0x1157C450, "Wrong size on FTresLocText");
static_assert(offsetof(FTresLocText, Namespace) == 0x000000, "Member 'FTresLocText::Namespace' has a wrong offset!");
static_assert(offsetof(FTresLocText, Key) == 0x000010, "Member 'FTresLocText::Key' has a wrong offset!");
static_assert(offsetof(FTresLocText, Params) == 0x000020, "Member 'FTresLocText::Params' has a wrong offset!");
static_assert(offsetof(FTresLocText, LocalizedText) == 0x000030, "Member 'FTresLocText::LocalizedText' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_TornadoInvolveParam
// 0x0058 (0x0058 - 0x0000)
struct FTresEnemyEx711_TornadoInvolveParam final
{
public:
	class ATresGimmick_e_ex711_PhysicsActor*      M_pActor;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x50];                                       // 0x0008(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_TornadoInvolveParam) == 0x000008, "Wrong alignment on FTresEnemyEx711_TornadoInvolveParam");
static_assert(sizeof(FTresEnemyEx711_TornadoInvolveParam) == 0x000058, "Wrong size on FTresEnemyEx711_TornadoInvolveParam");
static_assert(offsetof(FTresEnemyEx711_TornadoInvolveParam, M_pActor) == 0x000000, "Member 'FTresEnemyEx711_TornadoInvolveParam::M_pActor' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx351AfterImageVisibleWorker
// 0x0038 (0x0038 - 0x0000)
struct FTresEnemyEx351AfterImageVisibleWorker final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_VisibleEffectCmp;                                // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               M_WarpEffectCmp;                                   // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx351AfterImageVisibleWorker) == 0x000008, "Wrong alignment on FTresEnemyEx351AfterImageVisibleWorker");
static_assert(sizeof(FTresEnemyEx351AfterImageVisibleWorker) == 0x000038, "Wrong size on FTresEnemyEx351AfterImageVisibleWorker");
static_assert(offsetof(FTresEnemyEx351AfterImageVisibleWorker, M_VisibleEffectCmp) == 0x000020, "Member 'FTresEnemyEx351AfterImageVisibleWorker::M_VisibleEffectCmp' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx351AfterImageVisibleWorker, M_WarpEffectCmp) == 0x000028, "Member 'FTresEnemyEx351AfterImageVisibleWorker::M_WarpEffectCmp' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipPrizeDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipPrizeDataTable final : public FTableRowBase
{
public:
	int32                                         M_ItemCount;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotatoSpeed;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInitSpeed;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxSpeed;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSuctionRange;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LoopSpeed;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LoopStartLengs;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LoopSuction;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevivalDistance;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevivalWaitTimer;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStartDistance;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_min_size;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSizeSpeed;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             M_SoundAssets;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipPrizeDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipPrizeDataTable");
static_assert(sizeof(FTresGumiShipPrizeDataTable) == 0x11413080, "Wrong size on FTresGumiShipPrizeDataTable");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_ItemCount) == 0x000008, "Member 'FTresGumiShipPrizeDataTable::M_ItemCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_RotatoSpeed) == 0x00000C, "Member 'FTresGumiShipPrizeDataTable::M_RotatoSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_fInitSpeed) == 0x000010, "Member 'FTresGumiShipPrizeDataTable::M_fInitSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_fMaxSpeed) == 0x000014, "Member 'FTresGumiShipPrizeDataTable::M_fMaxSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_fSuctionRange) == 0x000018, "Member 'FTresGumiShipPrizeDataTable::M_fSuctionRange' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_LoopSpeed) == 0x00001C, "Member 'FTresGumiShipPrizeDataTable::M_LoopSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_LoopStartLengs) == 0x000020, "Member 'FTresGumiShipPrizeDataTable::M_LoopStartLengs' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_LoopSuction) == 0x000024, "Member 'FTresGumiShipPrizeDataTable::M_LoopSuction' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_fRevivalDistance) == 0x000028, "Member 'FTresGumiShipPrizeDataTable::M_fRevivalDistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_fRevivalWaitTimer) == 0x00002C, "Member 'FTresGumiShipPrizeDataTable::M_fRevivalWaitTimer' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_fStartDistance) == 0x000030, "Member 'FTresGumiShipPrizeDataTable::M_fStartDistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_min_size) == 0x000034, "Member 'FTresGumiShipPrizeDataTable::M_min_size' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_fSizeSpeed) == 0x000038, "Member 'FTresGumiShipPrizeDataTable::M_fSizeSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeDataTable, M_SoundAssets) == 0x000040, "Member 'FTresGumiShipPrizeDataTable::M_SoundAssets' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipPrizeItemDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipPrizeItemDataTable final : public FTableRowBase
{
public:
	TSubclassOf<class ATresGumiShipDropPrize>     M_SpawnClass;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresGumiShipPrizeDataTable            M_Parameters;                                      // 0x0010(0x11413080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipPrizeItemDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipPrizeItemDataTable");
static_assert(sizeof(FTresGumiShipPrizeItemDataTable) == 0x11413080, "Wrong size on FTresGumiShipPrizeItemDataTable");
static_assert(offsetof(FTresGumiShipPrizeItemDataTable, M_SpawnClass) == 0x000008, "Member 'FTresGumiShipPrizeItemDataTable::M_SpawnClass' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPrizeItemDataTable, M_Parameters) == 0x000010, "Member 'FTresGumiShipPrizeItemDataTable::M_Parameters' has a wrong offset!");

// ScriptStruct TresGame.EX355_AccelWaveTimingInfo
// 0x114D6 (0x114D6 - 0x0000)
struct alignas(0x114D6) FEX355_AccelWaveTimingInfo final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_AccelWaveTimingInfo) == 0x0114D6, "Wrong alignment on FEX355_AccelWaveTimingInfo");
static_assert(sizeof(FEX355_AccelWaveTimingInfo) == 0x0114D6, "Wrong size on FEX355_AccelWaveTimingInfo");

// ScriptStruct TresGame.EX355_AccelDirectionInfo
// 0x0008 (0x0008 - 0x0000)
struct FEX355_AccelDirectionInfo final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX355_AccelDir                               Direction;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_AccelDirectionInfo) == 0x000004, "Wrong alignment on FEX355_AccelDirectionInfo");
static_assert(sizeof(FEX355_AccelDirectionInfo) == 0x000008, "Wrong size on FEX355_AccelDirectionInfo");
static_assert(offsetof(FEX355_AccelDirectionInfo, Distance) == 0x000000, "Member 'FEX355_AccelDirectionInfo::Distance' has a wrong offset!");
static_assert(offsetof(FEX355_AccelDirectionInfo, Direction) == 0x000004, "Member 'FEX355_AccelDirectionInfo::Direction' has a wrong offset!");

// ScriptStruct TresGame.TresAccelAttackInfo_e_ex359
// 0x114DF440 (0x114DF440 - 0x0000)
struct alignas(0x114DF440) FTresAccelAttackInfo_e_ex359 final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         A;                                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X_min;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X_max;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAccelAttackInfo_e_ex359) == 0x114DF440, "Wrong alignment on FTresAccelAttackInfo_e_ex359");
static_assert(sizeof(FTresAccelAttackInfo_e_ex359) == 0x114DF440, "Wrong size on FTresAccelAttackInfo_e_ex359");
static_assert(offsetof(FTresAccelAttackInfo_e_ex359, bValid) == 0x000000, "Member 'FTresAccelAttackInfo_e_ex359::bValid' has a wrong offset!");
static_assert(offsetof(FTresAccelAttackInfo_e_ex359, A) == 0x000004, "Member 'FTresAccelAttackInfo_e_ex359::A' has a wrong offset!");
static_assert(offsetof(FTresAccelAttackInfo_e_ex359, B) == 0x000008, "Member 'FTresAccelAttackInfo_e_ex359::B' has a wrong offset!");
static_assert(offsetof(FTresAccelAttackInfo_e_ex359, X_min) == 0x00000C, "Member 'FTresAccelAttackInfo_e_ex359::X_min' has a wrong offset!");
static_assert(offsetof(FTresAccelAttackInfo_e_ex359, X_max) == 0x000010, "Member 'FTresAccelAttackInfo_e_ex359::X_max' has a wrong offset!");

// ScriptStruct TresGame.TresTheaterMapInfo
// 0x0028 (0x0028 - 0x0000)
struct FTresTheaterMapInfo final
{
public:
	class FName                                   MapName;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTresTexturePump>        TexturePump;                                       // 0x0008(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTheaterMapInfo) == 0x000008, "Wrong alignment on FTresTheaterMapInfo");
static_assert(sizeof(FTresTheaterMapInfo) == 0x000028, "Wrong size on FTresTheaterMapInfo");
static_assert(offsetof(FTresTheaterMapInfo, MapName) == 0x000000, "Member 'FTresTheaterMapInfo::MapName' has a wrong offset!");
static_assert(offsetof(FTresTheaterMapInfo, TexturePump) == 0x000008, "Member 'FTresTheaterMapInfo::TexturePump' has a wrong offset!");

// ScriptStruct TresGame.EX359_CutDownTractionInfo
// 0x0030 (0x0030 - 0x0000)
struct FEX359_CutDownTractionInfo final
{
public:
	float                                         M_fTargetDistance;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxTractionDistance;                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fYaw;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX359_CutDownYawType                         M_YawType;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEX359_BeamInfoSet                     M_BeamInfoSet;                                     // 0x0010(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEX359_LaserInfoSet                    M_LaserInfoSet;                                    // 0x0020(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_CutDownTractionInfo) == 0x000004, "Wrong alignment on FEX359_CutDownTractionInfo");
static_assert(sizeof(FEX359_CutDownTractionInfo) == 0x000030, "Wrong size on FEX359_CutDownTractionInfo");
static_assert(offsetof(FEX359_CutDownTractionInfo, M_fTargetDistance) == 0x000000, "Member 'FEX359_CutDownTractionInfo::M_fTargetDistance' has a wrong offset!");
static_assert(offsetof(FEX359_CutDownTractionInfo, M_fMaxTractionDistance) == 0x000004, "Member 'FEX359_CutDownTractionInfo::M_fMaxTractionDistance' has a wrong offset!");
static_assert(offsetof(FEX359_CutDownTractionInfo, M_fYaw) == 0x000008, "Member 'FEX359_CutDownTractionInfo::M_fYaw' has a wrong offset!");
static_assert(offsetof(FEX359_CutDownTractionInfo, M_YawType) == 0x00000C, "Member 'FEX359_CutDownTractionInfo::M_YawType' has a wrong offset!");
static_assert(offsetof(FEX359_CutDownTractionInfo, M_BeamInfoSet) == 0x000010, "Member 'FEX359_CutDownTractionInfo::M_BeamInfoSet' has a wrong offset!");
static_assert(offsetof(FEX359_CutDownTractionInfo, M_LaserInfoSet) == 0x000020, "Member 'FEX359_CutDownTractionInfo::M_LaserInfoSet' has a wrong offset!");

// ScriptStruct TresGame.TresDarkLaserSpawnParams_e_ex352
// 0x114FC120 (0x114FC120 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x114FC120) FTresDarkLaserSpawnParams_e_ex352
{
public:
	float                                         M_BeginLaserIrradiationTime;                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LaserShiftMinTime;                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LaserShiftMaxTime;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LaserIrradiationSignTime;                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LaserIrradiationLoopTime;                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LaserExtendSpeed;                                // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SignStartRequiredTime;                           // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SignEndRequiredTime;                             // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
#pragma pack(pop)
static_assert(alignof(FTresDarkLaserSpawnParams_e_ex352) == 0x114FC120, "Wrong alignment on FTresDarkLaserSpawnParams_e_ex352");
static_assert(sizeof(FTresDarkLaserSpawnParams_e_ex352) == 0x114FC120, "Wrong size on FTresDarkLaserSpawnParams_e_ex352");
static_assert(offsetof(FTresDarkLaserSpawnParams_e_ex352, M_BeginLaserIrradiationTime) == 0x000000, "Member 'FTresDarkLaserSpawnParams_e_ex352::M_BeginLaserIrradiationTime' has a wrong offset!");
static_assert(offsetof(FTresDarkLaserSpawnParams_e_ex352, M_LaserShiftMinTime) == 0x000004, "Member 'FTresDarkLaserSpawnParams_e_ex352::M_LaserShiftMinTime' has a wrong offset!");
static_assert(offsetof(FTresDarkLaserSpawnParams_e_ex352, M_LaserShiftMaxTime) == 0x000008, "Member 'FTresDarkLaserSpawnParams_e_ex352::M_LaserShiftMaxTime' has a wrong offset!");
static_assert(offsetof(FTresDarkLaserSpawnParams_e_ex352, M_LaserIrradiationSignTime) == 0x00000C, "Member 'FTresDarkLaserSpawnParams_e_ex352::M_LaserIrradiationSignTime' has a wrong offset!");
static_assert(offsetof(FTresDarkLaserSpawnParams_e_ex352, M_LaserIrradiationLoopTime) == 0x000010, "Member 'FTresDarkLaserSpawnParams_e_ex352::M_LaserIrradiationLoopTime' has a wrong offset!");
static_assert(offsetof(FTresDarkLaserSpawnParams_e_ex352, M_LaserExtendSpeed) == 0x000014, "Member 'FTresDarkLaserSpawnParams_e_ex352::M_LaserExtendSpeed' has a wrong offset!");
static_assert(offsetof(FTresDarkLaserSpawnParams_e_ex352, M_SignStartRequiredTime) == 0x000018, "Member 'FTresDarkLaserSpawnParams_e_ex352::M_SignStartRequiredTime' has a wrong offset!");
static_assert(offsetof(FTresDarkLaserSpawnParams_e_ex352, M_SignEndRequiredTime) == 0x00001C, "Member 'FTresDarkLaserSpawnParams_e_ex352::M_SignEndRequiredTime' has a wrong offset!");

// ScriptStruct TresGame.WaveInfo_e_ex310
// 0x115605A0 (0x115605A0 - 0x0000)
struct alignas(0x115605A0) FWaveInfo_e_ex310 final
{
public:
	int32                                         INotifyParam;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VOffset;                                           // 0x0004(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPolarOffset;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FLength;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVelocity;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FYaw;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FAttackInterval;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x14];                                      // 0x0024(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaveInfo_e_ex310) == 0x115605A0, "Wrong alignment on FWaveInfo_e_ex310");
static_assert(sizeof(FWaveInfo_e_ex310) == 0x115605A0, "Wrong size on FWaveInfo_e_ex310");
static_assert(offsetof(FWaveInfo_e_ex310, INotifyParam) == 0x000000, "Member 'FWaveInfo_e_ex310::INotifyParam' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex310, VOffset) == 0x000004, "Member 'FWaveInfo_e_ex310::VOffset' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex310, bPolarOffset) == 0x000010, "Member 'FWaveInfo_e_ex310::bPolarOffset' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex310, FLength) == 0x000014, "Member 'FWaveInfo_e_ex310::FLength' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex310, FVelocity) == 0x000018, "Member 'FWaveInfo_e_ex310::FVelocity' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex310, FYaw) == 0x00001C, "Member 'FWaveInfo_e_ex310::FYaw' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex310, FAttackInterval) == 0x000020, "Member 'FWaveInfo_e_ex310::FAttackInterval' has a wrong offset!");

// ScriptStruct TresGame.WaveSet_e_ex310
// 0x0020 (0x0020 - 0x0000)
struct FWaveSet_e_ex310 final
{
public:
	TSubclassOf<class ATresProjectile_e_ex310_Wave> PWaveSpawner;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATresProjectile_e_ex310_Wave_OneCollision> POneCollision;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWaveInfo_e_ex310>              WaveInfoArray;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaveSet_e_ex310) == 0x000008, "Wrong alignment on FWaveSet_e_ex310");
static_assert(sizeof(FWaveSet_e_ex310) == 0x000020, "Wrong size on FWaveSet_e_ex310");
static_assert(offsetof(FWaveSet_e_ex310, PWaveSpawner) == 0x000000, "Member 'FWaveSet_e_ex310::PWaveSpawner' has a wrong offset!");
static_assert(offsetof(FWaveSet_e_ex310, POneCollision) == 0x000008, "Member 'FWaveSet_e_ex310::POneCollision' has a wrong offset!");
static_assert(offsetof(FWaveSet_e_ex310, WaveInfoArray) == 0x000010, "Member 'FWaveSet_e_ex310::WaveInfoArray' has a wrong offset!");

// ScriptStruct TresGame.TresLSIScoreEntryHowtoPlayBaseball
// 0x1154D330 (0x1154D330 - 0x0000)
struct alignas(0x1154D330) FTresLSIScoreEntryHowtoPlayBaseball final
{
public:
	ETresLSIHowtoPlayBaseballMode                 Mode;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLSIScoreEntryHowtoPlayBaseball) == 0x1154D330, "Wrong alignment on FTresLSIScoreEntryHowtoPlayBaseball");
static_assert(sizeof(FTresLSIScoreEntryHowtoPlayBaseball) == 0x1154D330, "Wrong size on FTresLSIScoreEntryHowtoPlayBaseball");
static_assert(offsetof(FTresLSIScoreEntryHowtoPlayBaseball, Mode) == 0x000000, "Member 'FTresLSIScoreEntryHowtoPlayBaseball::Mode' has a wrong offset!");
static_assert(offsetof(FTresLSIScoreEntryHowtoPlayBaseball, Score) == 0x000004, "Member 'FTresLSIScoreEntryHowtoPlayBaseball::Score' has a wrong offset!");

// ScriptStruct TresGame.TresCodeMenuChallengeScoreData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresCodeMenuChallengeScoreData final : public FTableRowBase
{
public:
	class FString                                 M_NameId;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresCodeMenuChallengeScoreInfo> M_Scores;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    GameFlag;                                          // 0x0028(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_SecretOpenEnable;                                // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCodeMenuChallengeScoreData) == 0x11413080, "Wrong alignment on FTresCodeMenuChallengeScoreData");
static_assert(sizeof(FTresCodeMenuChallengeScoreData) == 0x11413080, "Wrong size on FTresCodeMenuChallengeScoreData");
static_assert(offsetof(FTresCodeMenuChallengeScoreData, M_NameId) == 0x000008, "Member 'FTresCodeMenuChallengeScoreData::M_NameId' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuChallengeScoreData, M_Scores) == 0x000018, "Member 'FTresCodeMenuChallengeScoreData::M_Scores' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuChallengeScoreData, GameFlag) == 0x000028, "Member 'FTresCodeMenuChallengeScoreData::GameFlag' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuChallengeScoreData, M_SecretOpenEnable) == 0x000040, "Member 'FTresCodeMenuChallengeScoreData::M_SecretOpenEnable' has a wrong offset!");

// ScriptStruct TresGame.TresCoopDefinitionParamBP
// 0x116E4 (0x116E4 - 0x0000)
struct alignas(0x116E4) FTresCoopDefinitionParamBP final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCoopDefinitionParamBP) == 0x0116E4, "Wrong alignment on FTresCoopDefinitionParamBP");
static_assert(sizeof(FTresCoopDefinitionParamBP) == 0x0116E4, "Wrong size on FTresCoopDefinitionParamBP");

// ScriptStruct TresGame.TresEffectAttachParts
// 0x0040 (0x0040 - 0x0000)
struct FTresEffectAttachParts final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 M_pSkeletalMeshComponent;                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEffectAttachParts) == 0x000008, "Wrong alignment on FTresEffectAttachParts");
static_assert(sizeof(FTresEffectAttachParts) == 0x000040, "Wrong size on FTresEffectAttachParts");
static_assert(offsetof(FTresEffectAttachParts, M_pSkeletalMeshComponent) == 0x000008, "Member 'FTresEffectAttachParts::M_pSkeletalMeshComponent' has a wrong offset!");

// ScriptStruct TresGame.TresTornadoDebrisUnit
// 0x0018 (0x0018 - 0x0000)
struct FTresTornadoDebrisUnit final
{
public:
	ETresTornadoDebrisStateName                   StateName;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresTornadoDebrisTransformInfo> DebrisArray;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTornadoDebrisUnit) == 0x000008, "Wrong alignment on FTresTornadoDebrisUnit");
static_assert(sizeof(FTresTornadoDebrisUnit) == 0x000018, "Wrong size on FTresTornadoDebrisUnit");
static_assert(offsetof(FTresTornadoDebrisUnit, StateName) == 0x000000, "Member 'FTresTornadoDebrisUnit::StateName' has a wrong offset!");
static_assert(offsetof(FTresTornadoDebrisUnit, DebrisArray) == 0x000008, "Member 'FTresTornadoDebrisUnit::DebrisArray' has a wrong offset!");

// ScriptStruct TresGame.TresTornadoDebrisTransform
// 0x2389 (0x2389 - 0x0000)
struct alignas(0x2389) FTresTornadoDebrisTransform final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTornadoDebrisTransform) == 0x002389, "Wrong alignment on FTresTornadoDebrisTransform");
static_assert(sizeof(FTresTornadoDebrisTransform) == 0x002389, "Wrong size on FTresTornadoDebrisTransform");

// ScriptStruct TresGame.TresTornadoDebrisState
// 0x1172F (0x1172F - 0x0000)
struct alignas(0x1172F) FTresTornadoDebrisState final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTornadoDebrisState) == 0x01172F, "Wrong alignment on FTresTornadoDebrisState");
static_assert(sizeof(FTresTornadoDebrisState) == 0x01172F, "Wrong size on FTresTornadoDebrisState");

// ScriptStruct TresGame.TresDebugMenuLayer
// 0x0010 (0x0010 - 0x0000)
struct FTresDebugMenuLayer final
{
public:
	TArray<struct FTresDebugMenuFrame>            M_Frames;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuLayer) == 0x000008, "Wrong alignment on FTresDebugMenuLayer");
static_assert(sizeof(FTresDebugMenuLayer) == 0x000010, "Wrong size on FTresDebugMenuLayer");
static_assert(offsetof(FTresDebugMenuLayer, M_Frames) == 0x000000, "Member 'FTresDebugMenuLayer::M_Frames' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuTimeline
// 0x0010 (0x0010 - 0x0000)
struct FTresDebugMenuTimeline final
{
public:
	TArray<struct FTresDebugMenuLayer>            M_Layers;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuTimeline) == 0x000008, "Wrong alignment on FTresDebugMenuTimeline");
static_assert(sizeof(FTresDebugMenuTimeline) == 0x000010, "Wrong size on FTresDebugMenuTimeline");
static_assert(offsetof(FTresDebugMenuTimeline, M_Layers) == 0x000000, "Member 'FTresDebugMenuTimeline::M_Layers' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuMovieClipResource
// 0x0038 (0x0038 - 0x0000)
struct FTresDebugMenuMovieClipResource final
{
public:
	float                                         M_FrameRate;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_Duration;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresDebugMenuFrameLabel>       M_Labels;                                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTresDebugMenuTween>            M_Tween;                                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTresDebugMenuTimeline>         M_Timelines;                                       // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDebugMenuMovieClipResource) == 0x000008, "Wrong alignment on FTresDebugMenuMovieClipResource");
static_assert(sizeof(FTresDebugMenuMovieClipResource) == 0x000038, "Wrong size on FTresDebugMenuMovieClipResource");
static_assert(offsetof(FTresDebugMenuMovieClipResource, M_FrameRate) == 0x000000, "Member 'FTresDebugMenuMovieClipResource::M_FrameRate' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMovieClipResource, M_Duration) == 0x000004, "Member 'FTresDebugMenuMovieClipResource::M_Duration' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMovieClipResource, M_Labels) == 0x000008, "Member 'FTresDebugMenuMovieClipResource::M_Labels' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMovieClipResource, M_Tween) == 0x000018, "Member 'FTresDebugMenuMovieClipResource::M_Tween' has a wrong offset!");
static_assert(offsetof(FTresDebugMenuMovieClipResource, M_Timelines) == 0x000028, "Member 'FTresDebugMenuMovieClipResource::M_Timelines' has a wrong offset!");

// ScriptStruct TresGame.TresDictionaryEnemyData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresDictionaryEnemyData final : public FTableRowBase
{
public:
	ETresUIDictionaryEnemyCategory                Category;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UIPriority;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextId;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresUIGameFlagActor>           Actors;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 NameTextID;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideKillCount;                                    // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresEnemyUniqueID                            MainEnemyID;                                       // 0x0041(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETresEnemyUniqueID>                    SubEnemyIDs;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESqexCPPKHSWorldType                          KHSWorldType;                                      // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x0059(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresDictionaryEnemyData) == 0x11413080, "Wrong alignment on FTresDictionaryEnemyData");
static_assert(sizeof(FTresDictionaryEnemyData) == 0x11413080, "Wrong size on FTresDictionaryEnemyData");
static_assert(offsetof(FTresDictionaryEnemyData, Category) == 0x000008, "Member 'FTresDictionaryEnemyData::Category' has a wrong offset!");
static_assert(offsetof(FTresDictionaryEnemyData, UIPriority) == 0x00000C, "Member 'FTresDictionaryEnemyData::UIPriority' has a wrong offset!");
static_assert(offsetof(FTresDictionaryEnemyData, TextId) == 0x000010, "Member 'FTresDictionaryEnemyData::TextId' has a wrong offset!");
static_assert(offsetof(FTresDictionaryEnemyData, Actors) == 0x000020, "Member 'FTresDictionaryEnemyData::Actors' has a wrong offset!");
static_assert(offsetof(FTresDictionaryEnemyData, NameTextID) == 0x000030, "Member 'FTresDictionaryEnemyData::NameTextID' has a wrong offset!");
static_assert(offsetof(FTresDictionaryEnemyData, bHideKillCount) == 0x000040, "Member 'FTresDictionaryEnemyData::bHideKillCount' has a wrong offset!");
static_assert(offsetof(FTresDictionaryEnemyData, MainEnemyID) == 0x000041, "Member 'FTresDictionaryEnemyData::MainEnemyID' has a wrong offset!");
static_assert(offsetof(FTresDictionaryEnemyData, SubEnemyIDs) == 0x000048, "Member 'FTresDictionaryEnemyData::SubEnemyIDs' has a wrong offset!");
static_assert(offsetof(FTresDictionaryEnemyData, KHSWorldType) == 0x000058, "Member 'FTresDictionaryEnemyData::KHSWorldType' has a wrong offset!");
static_assert(offsetof(FTresDictionaryEnemyData, Version) == 0x000059, "Member 'FTresDictionaryEnemyData::Version' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex003Effect
// 0x114F4520 (0x114F4520 - 0x0000)
struct alignas(0x114F4520) FTresEnemy_e_ex003Effect final
{
public:
	class UParticleSystem*                        M_EffData;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_EffAttachName;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex003Effect) == 0x114F4520, "Wrong alignment on FTresEnemy_e_ex003Effect");
static_assert(sizeof(FTresEnemy_e_ex003Effect) == 0x114F4520, "Wrong size on FTresEnemy_e_ex003Effect");
static_assert(offsetof(FTresEnemy_e_ex003Effect, M_EffData) == 0x000000, "Member 'FTresEnemy_e_ex003Effect::M_EffData' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex003Effect, M_EffAttachName) == 0x000008, "Member 'FTresEnemy_e_ex003Effect::M_EffAttachName' has a wrong offset!");

// ScriptStruct TresGame.TresInputStruct
// 0x114E9C50 (0x114E9C50 - 0x0000)
struct alignas(0x114E9C50) FTresInputStruct final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_FirstRepeatTime;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         M_RepeatTime;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTresInputStruct) == 0x114E9C50, "Wrong alignment on FTresInputStruct");
static_assert(sizeof(FTresInputStruct) == 0x114E9C50, "Wrong size on FTresInputStruct");
static_assert(offsetof(FTresInputStruct, M_FirstRepeatTime) == 0x000058, "Member 'FTresInputStruct::M_FirstRepeatTime' has a wrong offset!");
static_assert(offsetof(FTresInputStruct, M_RepeatTime) == 0x00005C, "Member 'FTresInputStruct::M_RepeatTime' has a wrong offset!");

// ScriptStruct TresGame.TresFirstMapJumpData
// 0xF5B10 (0x11508B90 - 0x11413080)
struct alignas(0x11508B90) FTresFirstMapJumpData final : public FTableRowBase
{
public:
	ETresGumiShipWorldSymbolID                    M_nWmSymbleID;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_PresistenLevelPath;                              // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_PlayerStartTagName;                              // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isWorldStart;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipWorldSymbolID                    M_nWmStart;                                        // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isTpStart;                                       // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipTravelPointID                    M_nTpStart;                                        // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_DebugInfo;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFirstMapJumpData) == 0x11508B90, "Wrong alignment on FTresFirstMapJumpData");
static_assert(sizeof(FTresFirstMapJumpData) == 0x11508B90, "Wrong size on FTresFirstMapJumpData");
static_assert(offsetof(FTresFirstMapJumpData, M_nWmSymbleID) == 0x000008, "Member 'FTresFirstMapJumpData::M_nWmSymbleID' has a wrong offset!");
static_assert(offsetof(FTresFirstMapJumpData, M_PresistenLevelPath) == 0x000010, "Member 'FTresFirstMapJumpData::M_PresistenLevelPath' has a wrong offset!");
static_assert(offsetof(FTresFirstMapJumpData, M_PlayerStartTagName) == 0x000018, "Member 'FTresFirstMapJumpData::M_PlayerStartTagName' has a wrong offset!");
static_assert(offsetof(FTresFirstMapJumpData, M_isWorldStart) == 0x000020, "Member 'FTresFirstMapJumpData::M_isWorldStart' has a wrong offset!");
static_assert(offsetof(FTresFirstMapJumpData, M_nWmStart) == 0x000021, "Member 'FTresFirstMapJumpData::M_nWmStart' has a wrong offset!");
static_assert(offsetof(FTresFirstMapJumpData, M_isTpStart) == 0x000022, "Member 'FTresFirstMapJumpData::M_isTpStart' has a wrong offset!");
static_assert(offsetof(FTresFirstMapJumpData, M_nTpStart) == 0x000023, "Member 'FTresFirstMapJumpData::M_nTpStart' has a wrong offset!");
static_assert(offsetof(FTresFirstMapJumpData, M_DebugInfo) == 0x000028, "Member 'FTresFirstMapJumpData::M_DebugInfo' has a wrong offset!");

// ScriptStruct TresGame.ActionCancelParam_e_ex043
// 0x114F5A80 (0x114F5A80 - 0x0000)
struct alignas(0x114F5A80) FActionCancelParam_e_ex043 final
{
public:
	int32                                         CancelChance_Phase1;                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CancelChance_Phase2;                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CancelChance_Phase3;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionCancelParam_e_ex043) == 0x114F5A80, "Wrong alignment on FActionCancelParam_e_ex043");
static_assert(sizeof(FActionCancelParam_e_ex043) == 0x114F5A80, "Wrong size on FActionCancelParam_e_ex043");
static_assert(offsetof(FActionCancelParam_e_ex043, CancelChance_Phase1) == 0x000000, "Member 'FActionCancelParam_e_ex043::CancelChance_Phase1' has a wrong offset!");
static_assert(offsetof(FActionCancelParam_e_ex043, CancelChance_Phase2) == 0x000004, "Member 'FActionCancelParam_e_ex043::CancelChance_Phase2' has a wrong offset!");
static_assert(offsetof(FActionCancelParam_e_ex043, CancelChance_Phase3) == 0x000008, "Member 'FActionCancelParam_e_ex043::CancelChance_Phase3' has a wrong offset!");

// ScriptStruct TresGame.TresTimerTaskData
// 0x1157BE30 (0x1157BE30 - 0x0000)
struct alignas(0x1157BE30) FTresTimerTaskData final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RemoteEventName;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTimerTaskData) == 0x1157BE30, "Wrong alignment on FTresTimerTaskData");
static_assert(sizeof(FTresTimerTaskData) == 0x1157BE30, "Wrong size on FTresTimerTaskData");
static_assert(offsetof(FTresTimerTaskData, Time) == 0x000000, "Member 'FTresTimerTaskData::Time' has a wrong offset!");
static_assert(offsetof(FTresTimerTaskData, RemoteEventName) == 0x000008, "Member 'FTresTimerTaskData::RemoteEventName' has a wrong offset!");

// ScriptStruct TresGame.SQEX_CommonEffectData
// 0x0018 (0x0018 - 0x0000)
struct FSQEX_CommonEffectData final
{
public:
	class FName                                   CommonKey;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupID;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CommonEffect;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_CommonEffectData) == 0x000008, "Wrong alignment on FSQEX_CommonEffectData");
static_assert(sizeof(FSQEX_CommonEffectData) == 0x000018, "Wrong size on FSQEX_CommonEffectData");
static_assert(offsetof(FSQEX_CommonEffectData, CommonKey) == 0x000000, "Member 'FSQEX_CommonEffectData::CommonKey' has a wrong offset!");
static_assert(offsetof(FSQEX_CommonEffectData, GroupID) == 0x000008, "Member 'FSQEX_CommonEffectData::GroupID' has a wrong offset!");
static_assert(offsetof(FSQEX_CommonEffectData, CommonEffect) == 0x000010, "Member 'FSQEX_CommonEffectData::CommonEffect' has a wrong offset!");

// ScriptStruct TresGame.SQEX_EffectAttachData
// 0x11794 (0x11794 - 0x0000)
struct alignas(0x11794) FSQEX_EffectAttachData final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_EffectAttachData) == 0x011794, "Wrong alignment on FSQEX_EffectAttachData");
static_assert(sizeof(FSQEX_EffectAttachData) == 0x011794, "Wrong size on FSQEX_EffectAttachData");

// ScriptStruct TresGame.TressEnemyEx021BlurParamater
// 0x114F54E0 (0x114F54E0 - 0x0000)
struct alignas(0x114F54E0) FTressEnemyEx021BlurParamater final
{
public:
	class FName                                   M_ParamName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_NormalParam;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AccelParam;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTressEnemyEx021BlurParamater) == 0x114F54E0, "Wrong alignment on FTressEnemyEx021BlurParamater");
static_assert(sizeof(FTressEnemyEx021BlurParamater) == 0x114F54E0, "Wrong size on FTressEnemyEx021BlurParamater");
static_assert(offsetof(FTressEnemyEx021BlurParamater, M_ParamName) == 0x000000, "Member 'FTressEnemyEx021BlurParamater::M_ParamName' has a wrong offset!");
static_assert(offsetof(FTressEnemyEx021BlurParamater, M_NormalParam) == 0x000008, "Member 'FTressEnemyEx021BlurParamater::M_NormalParam' has a wrong offset!");
static_assert(offsetof(FTressEnemyEx021BlurParamater, M_AccelParam) == 0x00000C, "Member 'FTressEnemyEx021BlurParamater::M_AccelParam' has a wrong offset!");

// ScriptStruct TresGame.TresVFXSceneColorTableData
// 0x1790F0 (0x1158C170 - 0x11413080)
struct alignas(0x1158C170) FTresVFXSceneColorTableData final : public FTableRowBase
{
public:
	class FString                                 Description;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneBaseColor;                                    // 0x0018(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneBrightColor;                                  // 0x0028(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneDarkColor;                                    // 0x0038(0x112EAE80)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SceneColorSynthesis;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresVFXSceneColorTableData) == 0x1158C170, "Wrong alignment on FTresVFXSceneColorTableData");
static_assert(sizeof(FTresVFXSceneColorTableData) == 0x1158C170, "Wrong size on FTresVFXSceneColorTableData");
static_assert(offsetof(FTresVFXSceneColorTableData, Description) == 0x000008, "Member 'FTresVFXSceneColorTableData::Description' has a wrong offset!");
static_assert(offsetof(FTresVFXSceneColorTableData, SceneBaseColor) == 0x000018, "Member 'FTresVFXSceneColorTableData::SceneBaseColor' has a wrong offset!");
static_assert(offsetof(FTresVFXSceneColorTableData, SceneBrightColor) == 0x000028, "Member 'FTresVFXSceneColorTableData::SceneBrightColor' has a wrong offset!");
static_assert(offsetof(FTresVFXSceneColorTableData, SceneDarkColor) == 0x000038, "Member 'FTresVFXSceneColorTableData::SceneDarkColor' has a wrong offset!");
static_assert(offsetof(FTresVFXSceneColorTableData, SceneColorSynthesis) == 0x000048, "Member 'FTresVFXSceneColorTableData::SceneColorSynthesis' has a wrong offset!");

// ScriptStruct TresGame.TresTroopsRewards
// 0xDA0D0 (0x114ED150 - 0x11413080)
struct alignas(0x114ED150) FTresTroopsRewards final : public FTableRowBase
{
public:
	ETresDropItemID                               M_Prize1;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Item1;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumPrize1;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_PrizeRate1;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_Prize2;                                          // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Item2;                                           // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumPrize2;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_PrizeRate2;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_Prize3;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Item3;                                           // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumPrize3;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_PrizeRate3;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_Prize4;                                          // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Item4;                                           // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumPrize4;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_PrizeRate4;                                      // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_Prize5;                                          // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Item5;                                           // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumPrize5;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_PrizeRate5;                                      // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_OnBoardPrize1;                                   // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_OnBoardItem1;                                    // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumOnBoardPrize1;                                // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_OnBoardPrizeRate1;                               // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_OnBoardPrize2;                                   // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_OnBoardItem2;                                    // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumOnBoardPrize2;                                // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_OnBoardPrizeRate2;                               // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_OnBoardPrize3;                                   // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_OnBoardItem3;                                    // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumOnBoardPrize3;                                // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_OnBoardPrizeRate3;                               // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_OnBoardPrize4;                                   // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_OnBoardItem4;                                    // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumOnBoardPrize4;                                // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_OnBoardPrizeRate4;                               // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_OnBoardItem5;                                    // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_OnBoardPrize5;                                   // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_NumOnBoardPrize5;                                // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_OnBoardPrizeRate5;                               // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTroopsRewards) == 0x114ED150, "Wrong alignment on FTresTroopsRewards");
static_assert(sizeof(FTresTroopsRewards) == 0x114ED150, "Wrong size on FTresTroopsRewards");
static_assert(offsetof(FTresTroopsRewards, M_Prize1) == 0x000008, "Member 'FTresTroopsRewards::M_Prize1' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_Item1) == 0x000010, "Member 'FTresTroopsRewards::M_Item1' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_NumPrize1) == 0x000018, "Member 'FTresTroopsRewards::M_NumPrize1' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_PrizeRate1) == 0x00001C, "Member 'FTresTroopsRewards::M_PrizeRate1' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_Prize2) == 0x000020, "Member 'FTresTroopsRewards::M_Prize2' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_Item2) == 0x000028, "Member 'FTresTroopsRewards::M_Item2' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_NumPrize2) == 0x000030, "Member 'FTresTroopsRewards::M_NumPrize2' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_PrizeRate2) == 0x000034, "Member 'FTresTroopsRewards::M_PrizeRate2' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_Prize3) == 0x000038, "Member 'FTresTroopsRewards::M_Prize3' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_Item3) == 0x000040, "Member 'FTresTroopsRewards::M_Item3' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_NumPrize3) == 0x000048, "Member 'FTresTroopsRewards::M_NumPrize3' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_PrizeRate3) == 0x00004C, "Member 'FTresTroopsRewards::M_PrizeRate3' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_Prize4) == 0x000050, "Member 'FTresTroopsRewards::M_Prize4' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_Item4) == 0x000058, "Member 'FTresTroopsRewards::M_Item4' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_NumPrize4) == 0x000060, "Member 'FTresTroopsRewards::M_NumPrize4' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_PrizeRate4) == 0x000064, "Member 'FTresTroopsRewards::M_PrizeRate4' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_Prize5) == 0x000068, "Member 'FTresTroopsRewards::M_Prize5' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_Item5) == 0x000070, "Member 'FTresTroopsRewards::M_Item5' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_NumPrize5) == 0x000078, "Member 'FTresTroopsRewards::M_NumPrize5' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_PrizeRate5) == 0x00007C, "Member 'FTresTroopsRewards::M_PrizeRate5' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardPrize1) == 0x000080, "Member 'FTresTroopsRewards::M_OnBoardPrize1' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardItem1) == 0x000088, "Member 'FTresTroopsRewards::M_OnBoardItem1' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_NumOnBoardPrize1) == 0x000090, "Member 'FTresTroopsRewards::M_NumOnBoardPrize1' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardPrizeRate1) == 0x000094, "Member 'FTresTroopsRewards::M_OnBoardPrizeRate1' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardPrize2) == 0x000098, "Member 'FTresTroopsRewards::M_OnBoardPrize2' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardItem2) == 0x0000A0, "Member 'FTresTroopsRewards::M_OnBoardItem2' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_NumOnBoardPrize2) == 0x0000A8, "Member 'FTresTroopsRewards::M_NumOnBoardPrize2' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardPrizeRate2) == 0x0000AC, "Member 'FTresTroopsRewards::M_OnBoardPrizeRate2' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardPrize3) == 0x0000B0, "Member 'FTresTroopsRewards::M_OnBoardPrize3' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardItem3) == 0x0000B8, "Member 'FTresTroopsRewards::M_OnBoardItem3' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_NumOnBoardPrize3) == 0x0000C0, "Member 'FTresTroopsRewards::M_NumOnBoardPrize3' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardPrizeRate3) == 0x0000C4, "Member 'FTresTroopsRewards::M_OnBoardPrizeRate3' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardPrize4) == 0x0000C8, "Member 'FTresTroopsRewards::M_OnBoardPrize4' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardItem4) == 0x0000D0, "Member 'FTresTroopsRewards::M_OnBoardItem4' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_NumOnBoardPrize4) == 0x0000D8, "Member 'FTresTroopsRewards::M_NumOnBoardPrize4' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardPrizeRate4) == 0x0000DC, "Member 'FTresTroopsRewards::M_OnBoardPrizeRate4' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardItem5) == 0x0000E0, "Member 'FTresTroopsRewards::M_OnBoardItem5' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardPrize5) == 0x0000E8, "Member 'FTresTroopsRewards::M_OnBoardPrize5' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_NumOnBoardPrize5) == 0x0000EC, "Member 'FTresTroopsRewards::M_NumOnBoardPrize5' has a wrong offset!");
static_assert(offsetof(FTresTroopsRewards, M_OnBoardPrizeRate5) == 0x0000F0, "Member 'FTresTroopsRewards::M_OnBoardPrizeRate5' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_FlareTornadoEntryParam
// 0x11E80 (0x11E80 - 0x0000)
struct alignas(0x11E80) FTresEnemy_e_ex773_FlareTornadoEntryParam final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_FlareTornadoEntryParam) == 0x011E80, "Wrong alignment on FTresEnemy_e_ex773_FlareTornadoEntryParam");
static_assert(sizeof(FTresEnemy_e_ex773_FlareTornadoEntryParam) == 0x011E80, "Wrong size on FTresEnemy_e_ex773_FlareTornadoEntryParam");

// ScriptStruct TresGame.TresEnemyEx353ThornBeamIndex
// 0x0020 (0x0020 - 0x0000)
struct FTresEnemyEx353ThornBeamIndex final
{
public:
	class FString                                 Comment;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ThornBeamIndex;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx353ThornBeamIndex) == 0x000008, "Wrong alignment on FTresEnemyEx353ThornBeamIndex");
static_assert(sizeof(FTresEnemyEx353ThornBeamIndex) == 0x000020, "Wrong size on FTresEnemyEx353ThornBeamIndex");
static_assert(offsetof(FTresEnemyEx353ThornBeamIndex, Comment) == 0x000000, "Member 'FTresEnemyEx353ThornBeamIndex::Comment' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamIndex, ThornBeamIndex) == 0x000010, "Member 'FTresEnemyEx353ThornBeamIndex::ThornBeamIndex' has a wrong offset!");

// ScriptStruct TresGame.TresFriendRelationDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresFriendRelationDataTable final : public FTableRowBase
{
public:
	ETresChrUniqueID                              M_UniqueID;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_Index;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_BodySize;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresFriendRelationDataTable) == 0x11413080, "Wrong alignment on FTresFriendRelationDataTable");
static_assert(sizeof(FTresFriendRelationDataTable) == 0x11413080, "Wrong size on FTresFriendRelationDataTable");
static_assert(offsetof(FTresFriendRelationDataTable, M_UniqueID) == 0x000008, "Member 'FTresFriendRelationDataTable::M_UniqueID' has a wrong offset!");
static_assert(offsetof(FTresFriendRelationDataTable, M_Index) == 0x00000C, "Member 'FTresFriendRelationDataTable::M_Index' has a wrong offset!");
static_assert(offsetof(FTresFriendRelationDataTable, M_BodySize) == 0x000010, "Member 'FTresFriendRelationDataTable::M_BodySize' has a wrong offset!");

// ScriptStruct TresGame.TresCockpitTargetInfo
// 0x0070 (0x0070 - 0x0000)
struct FTresCockpitTargetInfo final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UGFxObject*                             TargetCursor;                                      // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             Gauge;                                             // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             GaugeParts[0x3];                                   // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCockpitTargetInfo) == 0x000008, "Wrong alignment on FTresCockpitTargetInfo");
static_assert(sizeof(FTresCockpitTargetInfo) == 0x000070, "Wrong size on FTresCockpitTargetInfo");
static_assert(offsetof(FTresCockpitTargetInfo, TargetCursor) == 0x000038, "Member 'FTresCockpitTargetInfo::TargetCursor' has a wrong offset!");
static_assert(offsetof(FTresCockpitTargetInfo, Gauge) == 0x000040, "Member 'FTresCockpitTargetInfo::Gauge' has a wrong offset!");
static_assert(offsetof(FTresCockpitTargetInfo, GaugeParts) == 0x000048, "Member 'FTresCockpitTargetInfo::GaugeParts' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx353ThornBeamAfterHitInfo
// 0x114EF3B0 (0x114EF3B0 - 0x0000)
struct alignas(0x114EF3B0) FTresEnemyEx353ThornBeamAfterHitInfo final
{
public:
	class FString                                 Comment;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresEnemyEx353CatchAfterSituation            CatchAfterSituation;                               // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bIsMoveShield : 1;                                 // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CanMoveShieldMinDist;                              // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CanMoveShieldMaxDist;                              // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimShieldSpeed;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMoveDist;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndMoveTime;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx353ThornBeamAfterHitInfo) == 0x114EF3B0, "Wrong alignment on FTresEnemyEx353ThornBeamAfterHitInfo");
static_assert(sizeof(FTresEnemyEx353ThornBeamAfterHitInfo) == 0x114EF3B0, "Wrong size on FTresEnemyEx353ThornBeamAfterHitInfo");
static_assert(offsetof(FTresEnemyEx353ThornBeamAfterHitInfo, Comment) == 0x000000, "Member 'FTresEnemyEx353ThornBeamAfterHitInfo::Comment' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamAfterHitInfo, CatchAfterSituation) == 0x000010, "Member 'FTresEnemyEx353ThornBeamAfterHitInfo::CatchAfterSituation' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamAfterHitInfo, CanMoveShieldMinDist) == 0x000018, "Member 'FTresEnemyEx353ThornBeamAfterHitInfo::CanMoveShieldMinDist' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamAfterHitInfo, CanMoveShieldMaxDist) == 0x00001C, "Member 'FTresEnemyEx353ThornBeamAfterHitInfo::CanMoveShieldMaxDist' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamAfterHitInfo, AimShieldSpeed) == 0x000020, "Member 'FTresEnemyEx353ThornBeamAfterHitInfo::AimShieldSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamAfterHitInfo, MinMoveDist) == 0x000024, "Member 'FTresEnemyEx353ThornBeamAfterHitInfo::MinMoveDist' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamAfterHitInfo, EndMoveTime) == 0x000028, "Member 'FTresEnemyEx353ThornBeamAfterHitInfo::EndMoveTime' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipEnemyTerritoryInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresGumiShipEnemyTerritoryInfo final
{
public:
	ETresGumiShipEnemyTerritoryID                 M_eTerritoryID;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_sNameLabel;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGummiSpaceDef                            M_nSpace;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nDispNum;                                        // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nLevel;                                          // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isBoss;                                          // 0x0013(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isDiscard;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipEnemyTerritoryInfo) == 0x000004, "Wrong alignment on FTresGumiShipEnemyTerritoryInfo");
static_assert(sizeof(FTresGumiShipEnemyTerritoryInfo) == 0x000018, "Wrong size on FTresGumiShipEnemyTerritoryInfo");
static_assert(offsetof(FTresGumiShipEnemyTerritoryInfo, M_eTerritoryID) == 0x000000, "Member 'FTresGumiShipEnemyTerritoryInfo::M_eTerritoryID' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyTerritoryInfo, M_sNameLabel) == 0x000008, "Member 'FTresGumiShipEnemyTerritoryInfo::M_sNameLabel' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyTerritoryInfo, M_nSpace) == 0x000010, "Member 'FTresGumiShipEnemyTerritoryInfo::M_nSpace' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyTerritoryInfo, M_nDispNum) == 0x000011, "Member 'FTresGumiShipEnemyTerritoryInfo::M_nDispNum' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyTerritoryInfo, M_nLevel) == 0x000012, "Member 'FTresGumiShipEnemyTerritoryInfo::M_nLevel' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyTerritoryInfo, M_isBoss) == 0x000013, "Member 'FTresGumiShipEnemyTerritoryInfo::M_isBoss' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyTerritoryInfo, M_isDiscard) == 0x000014, "Member 'FTresGumiShipEnemyTerritoryInfo::M_isDiscard' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipEnemyTerritoryParameterDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipEnemyTerritoryParameterDataTable final : public FTableRowBase
{
public:
	TArray<struct FTresGumiShipEnemyTerritoryInfo> M_Territory;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipEnemyTerritoryParameterDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipEnemyTerritoryParameterDataTable");
static_assert(sizeof(FTresGumiShipEnemyTerritoryParameterDataTable) == 0x11413080, "Wrong size on FTresGumiShipEnemyTerritoryParameterDataTable");
static_assert(offsetof(FTresGumiShipEnemyTerritoryParameterDataTable, M_Territory) == 0x000008, "Member 'FTresGumiShipEnemyTerritoryParameterDataTable::M_Territory' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx353ThornBeamBeforeHitInfo
// 0x0050 (0x0050 - 0x0000)
struct FTresEnemyEx353ThornBeamBeforeHitInfo final
{
public:
	class FString                                 Comment;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsSpawnThornSpaceEffect : 1;                      // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBaseCamera : 1;                                 // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsKeepDistance : 1;                               // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseCameraRotateYaw;                               // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetDistXY;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetDistZ;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsAttach : 1;                                     // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachBoneName;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0030(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresEnemyEx353ThornBeamProjectileInfo> ThornBeamProjectileInfo;                           // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx353ThornBeamBeforeHitInfo) == 0x000008, "Wrong alignment on FTresEnemyEx353ThornBeamBeforeHitInfo");
static_assert(sizeof(FTresEnemyEx353ThornBeamBeforeHitInfo) == 0x000050, "Wrong size on FTresEnemyEx353ThornBeamBeforeHitInfo");
static_assert(offsetof(FTresEnemyEx353ThornBeamBeforeHitInfo, Comment) == 0x000000, "Member 'FTresEnemyEx353ThornBeamBeforeHitInfo::Comment' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamBeforeHitInfo, LifeTime) == 0x000014, "Member 'FTresEnemyEx353ThornBeamBeforeHitInfo::LifeTime' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamBeforeHitInfo, BaseCameraRotateYaw) == 0x000018, "Member 'FTresEnemyEx353ThornBeamBeforeHitInfo::BaseCameraRotateYaw' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamBeforeHitInfo, TargetDistXY) == 0x00001C, "Member 'FTresEnemyEx353ThornBeamBeforeHitInfo::TargetDistXY' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamBeforeHitInfo, TargetDistZ) == 0x000020, "Member 'FTresEnemyEx353ThornBeamBeforeHitInfo::TargetDistZ' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamBeforeHitInfo, AttachBoneName) == 0x000028, "Member 'FTresEnemyEx353ThornBeamBeforeHitInfo::AttachBoneName' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamBeforeHitInfo, Offset) == 0x000030, "Member 'FTresEnemyEx353ThornBeamBeforeHitInfo::Offset' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx353ThornBeamBeforeHitInfo, ThornBeamProjectileInfo) == 0x000040, "Member 'FTresEnemyEx353ThornBeamBeforeHitInfo::ThornBeamProjectileInfo' has a wrong offset!");

// ScriptStruct TresGame.EyeLookAtWork_e_ex816
// 0x114FFCD0 (0x114FFCD0 - 0x0000)
struct alignas(0x114FFCD0) FEyeLookAtWork_e_ex816 final
{
public:
	class FName                                   BaseBoneName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               MinLimitRot;                                       // 0x0008(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FRotator                               MaxLimitRot;                                       // 0x0014(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         RotationSpeed;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x24];                                      // 0x0024(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEyeLookAtWork_e_ex816) == 0x114FFCD0, "Wrong alignment on FEyeLookAtWork_e_ex816");
static_assert(sizeof(FEyeLookAtWork_e_ex816) == 0x114FFCD0, "Wrong size on FEyeLookAtWork_e_ex816");
static_assert(offsetof(FEyeLookAtWork_e_ex816, BaseBoneName) == 0x000000, "Member 'FEyeLookAtWork_e_ex816::BaseBoneName' has a wrong offset!");
static_assert(offsetof(FEyeLookAtWork_e_ex816, MinLimitRot) == 0x000008, "Member 'FEyeLookAtWork_e_ex816::MinLimitRot' has a wrong offset!");
static_assert(offsetof(FEyeLookAtWork_e_ex816, MaxLimitRot) == 0x000014, "Member 'FEyeLookAtWork_e_ex816::MaxLimitRot' has a wrong offset!");
static_assert(offsetof(FEyeLookAtWork_e_ex816, RotationSpeed) == 0x000020, "Member 'FEyeLookAtWork_e_ex816::RotationSpeed' has a wrong offset!");

// ScriptStruct TresGame.EX359_LaserWaveInfoSet
// 0x0010 (0x0010 - 0x0000)
struct FEX359_LaserWaveInfoSet final
{
public:
	TArray<struct FEX359_LaserWaveInfo>           M_LaserWaveInfoArray;                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_LaserWaveInfoSet) == 0x000008, "Wrong alignment on FEX359_LaserWaveInfoSet");
static_assert(sizeof(FEX359_LaserWaveInfoSet) == 0x000010, "Wrong size on FEX359_LaserWaveInfoSet");
static_assert(offsetof(FEX359_LaserWaveInfoSet, M_LaserWaveInfoArray) == 0x000000, "Member 'FEX359_LaserWaveInfoSet::M_LaserWaveInfoArray' has a wrong offset!");

// ScriptStruct TresGame.Tres_e_bx903Shine_Task
// 0x117F0 (0x117F0 - 0x0000)
struct alignas(0x117F0) FTres_e_bx903Shine_Task final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTres_e_bx903Shine_Task) == 0x0117F0, "Wrong alignment on FTres_e_bx903Shine_Task");
static_assert(sizeof(FTres_e_bx903Shine_Task) == 0x0117F0, "Wrong size on FTres_e_bx903Shine_Task");

// ScriptStruct TresGame.TresMiRxReplicaStateInfo
// 0x0028 (0x0028 - 0x0000)
struct FTresMiRxReplicaStateInfo final
{
public:
	float                                         M_fCoolDownTime;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ETresMiRxReplicaManagerStateKind              M_eNextState;                                      // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 M_fCommonParams;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<bool>                                  M_bCommonParams;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTresMiRxReplicaStateInfo) == 0x000008, "Wrong alignment on FTresMiRxReplicaStateInfo");
static_assert(sizeof(FTresMiRxReplicaStateInfo) == 0x000028, "Wrong size on FTresMiRxReplicaStateInfo");
static_assert(offsetof(FTresMiRxReplicaStateInfo, M_fCoolDownTime) == 0x000000, "Member 'FTresMiRxReplicaStateInfo::M_fCoolDownTime' has a wrong offset!");
static_assert(offsetof(FTresMiRxReplicaStateInfo, M_eNextState) == 0x000004, "Member 'FTresMiRxReplicaStateInfo::M_eNextState' has a wrong offset!");
static_assert(offsetof(FTresMiRxReplicaStateInfo, M_fCommonParams) == 0x000008, "Member 'FTresMiRxReplicaStateInfo::M_fCommonParams' has a wrong offset!");
static_assert(offsetof(FTresMiRxReplicaStateInfo, M_bCommonParams) == 0x000018, "Member 'FTresMiRxReplicaStateInfo::M_bCommonParams' has a wrong offset!");

// ScriptStruct TresGame.TresMiRxReplicaStatePattern
// 0x0028 (0x0028 - 0x0000)
struct FTresMiRxReplicaStatePattern final
{
public:
	bool                                          M_bIsFirstTimeUseOnly;                             // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_dTransitionPercent;                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ETresStateID                                  M_eStateIDWhenInterrupt;                           // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresMiRxReplicaStateInfo>      M_StateInfos;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresMiRxReplicaStatePattern) == 0x000008, "Wrong alignment on FTresMiRxReplicaStatePattern");
static_assert(sizeof(FTresMiRxReplicaStatePattern) == 0x000028, "Wrong size on FTresMiRxReplicaStatePattern");
static_assert(offsetof(FTresMiRxReplicaStatePattern, M_bIsFirstTimeUseOnly) == 0x000000, "Member 'FTresMiRxReplicaStatePattern::M_bIsFirstTimeUseOnly' has a wrong offset!");
static_assert(offsetof(FTresMiRxReplicaStatePattern, M_dTransitionPercent) == 0x000004, "Member 'FTresMiRxReplicaStatePattern::M_dTransitionPercent' has a wrong offset!");
static_assert(offsetof(FTresMiRxReplicaStatePattern, M_eStateIDWhenInterrupt) == 0x000008, "Member 'FTresMiRxReplicaStatePattern::M_eStateIDWhenInterrupt' has a wrong offset!");
static_assert(offsetof(FTresMiRxReplicaStatePattern, M_StateInfos) == 0x000010, "Member 'FTresMiRxReplicaStatePattern::M_StateInfos' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGlobalEnemyDataTable
// 0x10F7E0 (0x11522860 - 0x11413080)
struct alignas(0x11522860) FTresGumiShipGlobalEnemyDataTable final : public FTableRowBase
{
public:
	class FName                                   M_BossWorldUnlockRemoteEventName;                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_SymbolEncountBattleStartRemoteEventName;         // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEnemyRespawnIntervalTime;                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEnemyRespawnThresholdDistance;                  // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fBattleStartConditionThresholdTime;              // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fBattleStartTriggerActivateThresholdScale;       // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEnemyAttackRequestableScreenPercentageX;        // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEnemyAttackRequestableScreenPercentageY;        // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEnemyAppearFadeDelayTime;                       // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTutorialHelpShowThresholdDistance;              // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipGlobalEnemyDataTable) == 0x11522860, "Wrong alignment on FTresGumiShipGlobalEnemyDataTable");
static_assert(sizeof(FTresGumiShipGlobalEnemyDataTable) == 0x11522860, "Wrong size on FTresGumiShipGlobalEnemyDataTable");
static_assert(offsetof(FTresGumiShipGlobalEnemyDataTable, M_BossWorldUnlockRemoteEventName) == 0x000008, "Member 'FTresGumiShipGlobalEnemyDataTable::M_BossWorldUnlockRemoteEventName' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGlobalEnemyDataTable, M_SymbolEncountBattleStartRemoteEventName) == 0x000010, "Member 'FTresGumiShipGlobalEnemyDataTable::M_SymbolEncountBattleStartRemoteEventName' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGlobalEnemyDataTable, M_fEnemyRespawnIntervalTime) == 0x000018, "Member 'FTresGumiShipGlobalEnemyDataTable::M_fEnemyRespawnIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGlobalEnemyDataTable, M_fEnemyRespawnThresholdDistance) == 0x00001C, "Member 'FTresGumiShipGlobalEnemyDataTable::M_fEnemyRespawnThresholdDistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGlobalEnemyDataTable, M_fBattleStartConditionThresholdTime) == 0x000020, "Member 'FTresGumiShipGlobalEnemyDataTable::M_fBattleStartConditionThresholdTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGlobalEnemyDataTable, M_fBattleStartTriggerActivateThresholdScale) == 0x000024, "Member 'FTresGumiShipGlobalEnemyDataTable::M_fBattleStartTriggerActivateThresholdScale' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGlobalEnemyDataTable, M_fEnemyAttackRequestableScreenPercentageX) == 0x000028, "Member 'FTresGumiShipGlobalEnemyDataTable::M_fEnemyAttackRequestableScreenPercentageX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGlobalEnemyDataTable, M_fEnemyAttackRequestableScreenPercentageY) == 0x00002C, "Member 'FTresGumiShipGlobalEnemyDataTable::M_fEnemyAttackRequestableScreenPercentageY' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGlobalEnemyDataTable, M_fEnemyAppearFadeDelayTime) == 0x000030, "Member 'FTresGumiShipGlobalEnemyDataTable::M_fEnemyAppearFadeDelayTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGlobalEnemyDataTable, M_fTutorialHelpShowThresholdDistance) == 0x000034, "Member 'FTresGumiShipGlobalEnemyDataTable::M_fTutorialHelpShowThresholdDistance' has a wrong offset!");

// ScriptStruct TresGame.ca404aParam
// 0x114F1FB0 (0x114F1FB0 - 0x0000)
struct alignas(0x114F1FB0) FCa404aParam final
{
public:
	float                                         M_DefaultSpeed;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxYawSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxYawSpeedForOwnerRot;                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_YawSpeedAccelForOwnerRot;                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_YawSpeedRange;                                   // 0x0010(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Acceleration;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_FrictionAcceleration;                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Brake;                                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_StartDashTime;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_StartDashAccel;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SlowDownTime;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SlowDownSpeed;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DownSpeedPerDamage;                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MinSpeedByDamage;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TakeDamageWaitTime;                              // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_DownSpeedRecoveryTime;                           // 0x0040(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamegeOscPitchRoll;                              // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamegeOscTime;                                   // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OscRecoverySpeed;                                // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OscMaxLaneOffset;                                // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OscYawSpeedPerTorqu;                             // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OscYawMaxSpeed;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OscYawMaxAngle;                                  // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OscYawSpeedBrake;                                // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_OscYawMinTime;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCa404aParam) == 0x114F1FB0, "Wrong alignment on FCa404aParam");
static_assert(sizeof(FCa404aParam) == 0x114F1FB0, "Wrong size on FCa404aParam");
static_assert(offsetof(FCa404aParam, M_DefaultSpeed) == 0x000000, "Member 'FCa404aParam::M_DefaultSpeed' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_MaxYawSpeed) == 0x000004, "Member 'FCa404aParam::M_MaxYawSpeed' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_MaxYawSpeedForOwnerRot) == 0x000008, "Member 'FCa404aParam::M_MaxYawSpeedForOwnerRot' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_YawSpeedAccelForOwnerRot) == 0x00000C, "Member 'FCa404aParam::M_YawSpeedAccelForOwnerRot' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_YawSpeedRange) == 0x000010, "Member 'FCa404aParam::M_YawSpeedRange' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_Acceleration) == 0x000018, "Member 'FCa404aParam::M_Acceleration' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_FrictionAcceleration) == 0x00001C, "Member 'FCa404aParam::M_FrictionAcceleration' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_Brake) == 0x000020, "Member 'FCa404aParam::M_Brake' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_StartDashTime) == 0x000024, "Member 'FCa404aParam::M_StartDashTime' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_StartDashAccel) == 0x000028, "Member 'FCa404aParam::M_StartDashAccel' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_SlowDownTime) == 0x00002C, "Member 'FCa404aParam::M_SlowDownTime' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_SlowDownSpeed) == 0x000030, "Member 'FCa404aParam::M_SlowDownSpeed' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_DownSpeedPerDamage) == 0x000034, "Member 'FCa404aParam::M_DownSpeedPerDamage' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_MinSpeedByDamage) == 0x000038, "Member 'FCa404aParam::M_MinSpeedByDamage' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_TakeDamageWaitTime) == 0x00003C, "Member 'FCa404aParam::M_TakeDamageWaitTime' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_DownSpeedRecoveryTime) == 0x000040, "Member 'FCa404aParam::M_DownSpeedRecoveryTime' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_DamegeOscPitchRoll) == 0x000048, "Member 'FCa404aParam::M_DamegeOscPitchRoll' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_DamegeOscTime) == 0x00004C, "Member 'FCa404aParam::M_DamegeOscTime' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_OscRecoverySpeed) == 0x000050, "Member 'FCa404aParam::M_OscRecoverySpeed' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_OscMaxLaneOffset) == 0x000054, "Member 'FCa404aParam::M_OscMaxLaneOffset' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_OscYawSpeedPerTorqu) == 0x000058, "Member 'FCa404aParam::M_OscYawSpeedPerTorqu' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_OscYawMaxSpeed) == 0x00005C, "Member 'FCa404aParam::M_OscYawMaxSpeed' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_OscYawMaxAngle) == 0x000060, "Member 'FCa404aParam::M_OscYawMaxAngle' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_OscYawSpeedBrake) == 0x000064, "Member 'FCa404aParam::M_OscYawSpeedBrake' has a wrong offset!");
static_assert(offsetof(FCa404aParam, M_OscYawMinTime) == 0x000068, "Member 'FCa404aParam::M_OscYawMinTime' has a wrong offset!");

// ScriptStruct TresGame.TresRemyUnlockDishLevelDataTable
// 0xE1D5F98 (0x1F5E9018 - 0x11413080)
struct alignas(0x1F5E9018) FTresRemyUnlockDishLevelDataTable final : public FTableRowBase
{
public:
	int16                                         EarnUnlockDishLevelPointsWhenSuccess;              // 0x0008(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         EarnUnlockDishLevelPointsWhenGreatSuccess;         // 0x000A(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         EarnUnlockDishLevelPointsWhenFail;                 // 0x000C(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ERemyDishLevel, int16>                   UnlockDishLevelPoints;                             // 0x0010(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRemyUnlockDishLevelDataTable) == 0x1F5E9018, "Wrong alignment on FTresRemyUnlockDishLevelDataTable");
static_assert(sizeof(FTresRemyUnlockDishLevelDataTable) == 0x1F5E9018, "Wrong size on FTresRemyUnlockDishLevelDataTable");
static_assert(offsetof(FTresRemyUnlockDishLevelDataTable, EarnUnlockDishLevelPointsWhenSuccess) == 0x000008, "Member 'FTresRemyUnlockDishLevelDataTable::EarnUnlockDishLevelPointsWhenSuccess' has a wrong offset!");
static_assert(offsetof(FTresRemyUnlockDishLevelDataTable, EarnUnlockDishLevelPointsWhenGreatSuccess) == 0x00000A, "Member 'FTresRemyUnlockDishLevelDataTable::EarnUnlockDishLevelPointsWhenGreatSuccess' has a wrong offset!");
static_assert(offsetof(FTresRemyUnlockDishLevelDataTable, EarnUnlockDishLevelPointsWhenFail) == 0x00000C, "Member 'FTresRemyUnlockDishLevelDataTable::EarnUnlockDishLevelPointsWhenFail' has a wrong offset!");
static_assert(offsetof(FTresRemyUnlockDishLevelDataTable, UnlockDishLevelPoints) == 0x000010, "Member 'FTresRemyUnlockDishLevelDataTable::UnlockDishLevelPoints' has a wrong offset!");

// ScriptStruct TresGame.BonePhysicsBlendRateData_e_ex816
// 0x114FF9E0 (0x114FF9E0 - 0x0000)
struct alignas(0x114FF9E0) FBonePhysicsBlendRateData_e_ex816 final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendRate;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartInterpTime;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndInterpTime;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBonePhysicsBlendRateData_e_ex816) == 0x114FF9E0, "Wrong alignment on FBonePhysicsBlendRateData_e_ex816");
static_assert(sizeof(FBonePhysicsBlendRateData_e_ex816) == 0x114FF9E0, "Wrong size on FBonePhysicsBlendRateData_e_ex816");
static_assert(offsetof(FBonePhysicsBlendRateData_e_ex816, BoneName) == 0x000000, "Member 'FBonePhysicsBlendRateData_e_ex816::BoneName' has a wrong offset!");
static_assert(offsetof(FBonePhysicsBlendRateData_e_ex816, PhysicsBlendRate) == 0x000008, "Member 'FBonePhysicsBlendRateData_e_ex816::PhysicsBlendRate' has a wrong offset!");
static_assert(offsetof(FBonePhysicsBlendRateData_e_ex816, StartInterpTime) == 0x00000C, "Member 'FBonePhysicsBlendRateData_e_ex816::StartInterpTime' has a wrong offset!");
static_assert(offsetof(FBonePhysicsBlendRateData_e_ex816, EndInterpTime) == 0x000010, "Member 'FBonePhysicsBlendRateData_e_ex816::EndInterpTime' has a wrong offset!");

// ScriptStruct TresGame.BonePhysicsBlendRateDataList_e_ex816
// 0x0010 (0x0010 - 0x0000)
struct FBonePhysicsBlendRateDataList_e_ex816 final
{
public:
	TArray<struct FBonePhysicsBlendRateData_e_ex816> List;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBonePhysicsBlendRateDataList_e_ex816) == 0x000008, "Wrong alignment on FBonePhysicsBlendRateDataList_e_ex816");
static_assert(sizeof(FBonePhysicsBlendRateDataList_e_ex816) == 0x000010, "Wrong size on FBonePhysicsBlendRateDataList_e_ex816");
static_assert(offsetof(FBonePhysicsBlendRateDataList_e_ex816, List) == 0x000000, "Member 'FBonePhysicsBlendRateDataList_e_ex816::List' has a wrong offset!");

// ScriptStruct TresGame.TresRemySprinklePepperV2DataTable
// 0x0000 (0x11572B90 - 0x11572B90)
struct FTresRemySprinklePepperV2DataTable final : public FTresRemyCookingGameDataTableBase
{
public:
	ERemySprinklePepperEquipmentType              EquipmentType;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemySprinklePepperContentsType               ContentsType;                                      // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidInputValue;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickNeutralValue;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GreatSuccessInputBonusCorrectionCoefficient;       // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputTimingSuccessPercent;                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputTimingGreatSuccessPercent;                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputTimingTooSlowPercent;                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRemySprinklePepperV2DataTable) == 0x11572B90, "Wrong alignment on FTresRemySprinklePepperV2DataTable");
static_assert(sizeof(FTresRemySprinklePepperV2DataTable) == 0x11572B90, "Wrong size on FTresRemySprinklePepperV2DataTable");
static_assert(offsetof(FTresRemySprinklePepperV2DataTable, EquipmentType) == 0x000020, "Member 'FTresRemySprinklePepperV2DataTable::EquipmentType' has a wrong offset!");
static_assert(offsetof(FTresRemySprinklePepperV2DataTable, ContentsType) == 0x000021, "Member 'FTresRemySprinklePepperV2DataTable::ContentsType' has a wrong offset!");
static_assert(offsetof(FTresRemySprinklePepperV2DataTable, ValidInputValue) == 0x000024, "Member 'FTresRemySprinklePepperV2DataTable::ValidInputValue' has a wrong offset!");
static_assert(offsetof(FTresRemySprinklePepperV2DataTable, StickNeutralValue) == 0x000028, "Member 'FTresRemySprinklePepperV2DataTable::StickNeutralValue' has a wrong offset!");
static_assert(offsetof(FTresRemySprinklePepperV2DataTable, GreatSuccessInputBonusCorrectionCoefficient) == 0x00002C, "Member 'FTresRemySprinklePepperV2DataTable::GreatSuccessInputBonusCorrectionCoefficient' has a wrong offset!");
static_assert(offsetof(FTresRemySprinklePepperV2DataTable, InputTimingSuccessPercent) == 0x000030, "Member 'FTresRemySprinklePepperV2DataTable::InputTimingSuccessPercent' has a wrong offset!");
static_assert(offsetof(FTresRemySprinklePepperV2DataTable, InputTimingGreatSuccessPercent) == 0x000034, "Member 'FTresRemySprinklePepperV2DataTable::InputTimingGreatSuccessPercent' has a wrong offset!");
static_assert(offsetof(FTresRemySprinklePepperV2DataTable, InputTimingTooSlowPercent) == 0x000038, "Member 'FTresRemySprinklePepperV2DataTable::InputTimingTooSlowPercent' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_dw401_CycloneEffectParam
// 0x114F3CC0 (0x114F3CC0 - 0x0000)
struct alignas(0x114F3CC0) FTresEnemy_e_dw401_CycloneEffectParam final
{
public:
	float                                         M_ScaleMin;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ScaleMax;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ScaleChangeTime;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_MoveRate;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxRotSpeed;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_CreateDelay;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_dw401_CycloneEffectParam) == 0x114F3CC0, "Wrong alignment on FTresEnemy_e_dw401_CycloneEffectParam");
static_assert(sizeof(FTresEnemy_e_dw401_CycloneEffectParam) == 0x114F3CC0, "Wrong size on FTresEnemy_e_dw401_CycloneEffectParam");
static_assert(offsetof(FTresEnemy_e_dw401_CycloneEffectParam, M_ScaleMin) == 0x000000, "Member 'FTresEnemy_e_dw401_CycloneEffectParam::M_ScaleMin' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_CycloneEffectParam, M_ScaleMax) == 0x000004, "Member 'FTresEnemy_e_dw401_CycloneEffectParam::M_ScaleMax' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_CycloneEffectParam, M_ScaleChangeTime) == 0x000008, "Member 'FTresEnemy_e_dw401_CycloneEffectParam::M_ScaleChangeTime' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_CycloneEffectParam, M_MoveRate) == 0x000010, "Member 'FTresEnemy_e_dw401_CycloneEffectParam::M_MoveRate' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_CycloneEffectParam, M_MaxRotSpeed) == 0x000014, "Member 'FTresEnemy_e_dw401_CycloneEffectParam::M_MaxRotSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_dw401_CycloneEffectParam, M_CreateDelay) == 0x00001C, "Member 'FTresEnemy_e_dw401_CycloneEffectParam::M_CreateDelay' has a wrong offset!");

// ScriptStruct TresGame.RevengeAttacks_e_dw405
// 0x114F40D0 (0x114F40D0 - 0x0000)
struct alignas(0x114F40D0) FRevengeAttacks_e_dw405 final
{
public:
	struct FRevengeAttacks                        RevengeAttacks;                                    // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ComboIndex;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRevengeAttacks_e_dw405) == 0x114F40D0, "Wrong alignment on FRevengeAttacks_e_dw405");
static_assert(sizeof(FRevengeAttacks_e_dw405) == 0x114F40D0, "Wrong size on FRevengeAttacks_e_dw405");
static_assert(offsetof(FRevengeAttacks_e_dw405, RevengeAttacks) == 0x000000, "Member 'FRevengeAttacks_e_dw405::RevengeAttacks' has a wrong offset!");
static_assert(offsetof(FRevengeAttacks_e_dw405, ComboIndex) == 0x000010, "Member 'FRevengeAttacks_e_dw405::ComboIndex' has a wrong offset!");

// ScriptStruct TresGame.TresDieParam_e_ex020
// 0x114F5160 (0x114F5160 - 0x0000)
struct alignas(0x114F5160) FTresDieParam_e_ex020 final
{
public:
	float                                         InitSpeedXY;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitSpeedZ;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityStartSpeedXY;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brake;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDieParam_e_ex020) == 0x114F5160, "Wrong alignment on FTresDieParam_e_ex020");
static_assert(sizeof(FTresDieParam_e_ex020) == 0x114F5160, "Wrong size on FTresDieParam_e_ex020");
static_assert(offsetof(FTresDieParam_e_ex020, InitSpeedXY) == 0x000000, "Member 'FTresDieParam_e_ex020::InitSpeedXY' has a wrong offset!");
static_assert(offsetof(FTresDieParam_e_ex020, InitSpeedZ) == 0x000004, "Member 'FTresDieParam_e_ex020::InitSpeedZ' has a wrong offset!");
static_assert(offsetof(FTresDieParam_e_ex020, GravityStartSpeedXY) == 0x000008, "Member 'FTresDieParam_e_ex020::GravityStartSpeedXY' has a wrong offset!");
static_assert(offsetof(FTresDieParam_e_ex020, Brake) == 0x00000C, "Member 'FTresDieParam_e_ex020::Brake' has a wrong offset!");
static_assert(offsetof(FTresDieParam_e_ex020, Time) == 0x000010, "Member 'FTresDieParam_e_ex020::Time' has a wrong offset!");

// ScriptStruct TresGame.TresCoopColorSmokeInfo
// 0x0010 (0x0010 - 0x0000)
struct FTresCoopColorSmokeInfo final
{
public:
	ETresCoopColorSmokeKind                       M_Color;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_pSmokeEffect;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCoopColorSmokeInfo) == 0x000008, "Wrong alignment on FTresCoopColorSmokeInfo");
static_assert(sizeof(FTresCoopColorSmokeInfo) == 0x000010, "Wrong size on FTresCoopColorSmokeInfo");
static_assert(offsetof(FTresCoopColorSmokeInfo, M_Color) == 0x000000, "Member 'FTresCoopColorSmokeInfo::M_Color' has a wrong offset!");
static_assert(offsetof(FTresCoopColorSmokeInfo, M_pSmokeEffect) == 0x000008, "Member 'FTresCoopColorSmokeInfo::M_pSmokeEffect' has a wrong offset!");

// ScriptStruct TresGame.TresScreenShotResult
// 0x11F11 (0x11F11 - 0x0000)
struct alignas(0x11F11) FTresScreenShotResult final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresScreenShotResult) == 0x011F11, "Wrong alignment on FTresScreenShotResult");
static_assert(sizeof(FTresScreenShotResult) == 0x011F11, "Wrong size on FTresScreenShotResult");

// ScriptStruct TresGame.SaveInfo_e_ex046
// 0x114F5CE0 (0x114F5CE0 - 0x0000)
struct alignas(0x114F5CE0) FSaveInfo_e_ex046 final
{
public:
	int32                                         RegionHitPoint[0x3];                               // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInheritParam : 1;                                 // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsModeChangeRegionBreak : 1;                      // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ModeChangePawnSpawnLocation;                       // 0x0010(0x000C)(SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ModeChangePawnSpawnRotation;                       // 0x001C(0x112E9AF0)(SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ModeChangePawnAppearMode;                          // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveInfo_e_ex046) == 0x114F5CE0, "Wrong alignment on FSaveInfo_e_ex046");
static_assert(sizeof(FSaveInfo_e_ex046) == 0x114F5CE0, "Wrong size on FSaveInfo_e_ex046");
static_assert(offsetof(FSaveInfo_e_ex046, RegionHitPoint) == 0x000000, "Member 'FSaveInfo_e_ex046::RegionHitPoint' has a wrong offset!");
static_assert(offsetof(FSaveInfo_e_ex046, ModeChangePawnSpawnLocation) == 0x000010, "Member 'FSaveInfo_e_ex046::ModeChangePawnSpawnLocation' has a wrong offset!");
static_assert(offsetof(FSaveInfo_e_ex046, ModeChangePawnSpawnRotation) == 0x00001C, "Member 'FSaveInfo_e_ex046::ModeChangePawnSpawnRotation' has a wrong offset!");
static_assert(offsetof(FSaveInfo_e_ex046, ModeChangePawnAppearMode) == 0x000028, "Member 'FSaveInfo_e_ex046::ModeChangePawnAppearMode' has a wrong offset!");

// ScriptStruct TresGame.TresEx050EffectInfo
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresEx050EffectInfo final
{
public:
	class UParticleSystem*                        PEffect;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEx050EffectInfo) == 0x112E9AF0, "Wrong alignment on FTresEx050EffectInfo");
static_assert(sizeof(FTresEx050EffectInfo) == 0x112E9AF0, "Wrong size on FTresEx050EffectInfo");
static_assert(offsetof(FTresEx050EffectInfo, PEffect) == 0x000000, "Member 'FTresEx050EffectInfo::PEffect' has a wrong offset!");
static_assert(offsetof(FTresEx050EffectInfo, AttachName) == 0x000008, "Member 'FTresEx050EffectInfo::AttachName' has a wrong offset!");
static_assert(offsetof(FTresEx050EffectInfo, Location) == 0x000010, "Member 'FTresEx050EffectInfo::Location' has a wrong offset!");
static_assert(offsetof(FTresEx050EffectInfo, Rotation) == 0x00001C, "Member 'FTresEx050EffectInfo::Rotation' has a wrong offset!");

// ScriptStruct TresGame.TresItemSynthesisDataTableBase
// 0x1352B0 (0x11548330 - 0x11413080)
#pragma pack(push, 0x1)
struct alignas(0x11548330) FTresItemSynthesisDataTableBase : public FTableRowBase
{
public:
	class FName                                   M_Material0;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MatNum0;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Material1;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MatNum1;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Material2;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MatNum2;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Material3;                                       // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MatNum3;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Material4;                                       // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MatNum4;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_Material5;                                       // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MatNum5;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FTresItemSynthesisDataTableBase) == 0x11548330, "Wrong alignment on FTresItemSynthesisDataTableBase");
static_assert(sizeof(FTresItemSynthesisDataTableBase) == 0x11548330, "Wrong size on FTresItemSynthesisDataTableBase");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_Material0) == 0x000008, "Member 'FTresItemSynthesisDataTableBase::M_Material0' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_MatNum0) == 0x000010, "Member 'FTresItemSynthesisDataTableBase::M_MatNum0' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_Material1) == 0x000018, "Member 'FTresItemSynthesisDataTableBase::M_Material1' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_MatNum1) == 0x000020, "Member 'FTresItemSynthesisDataTableBase::M_MatNum1' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_Material2) == 0x000028, "Member 'FTresItemSynthesisDataTableBase::M_Material2' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_MatNum2) == 0x000030, "Member 'FTresItemSynthesisDataTableBase::M_MatNum2' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_Material3) == 0x000038, "Member 'FTresItemSynthesisDataTableBase::M_Material3' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_MatNum3) == 0x000040, "Member 'FTresItemSynthesisDataTableBase::M_MatNum3' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_Material4) == 0x000048, "Member 'FTresItemSynthesisDataTableBase::M_Material4' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_MatNum4) == 0x000050, "Member 'FTresItemSynthesisDataTableBase::M_MatNum4' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_Material5) == 0x000058, "Member 'FTresItemSynthesisDataTableBase::M_Material5' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTableBase, M_MatNum5) == 0x000060, "Member 'FTresItemSynthesisDataTableBase::M_MatNum5' has a wrong offset!");

// ScriptStruct TresGame.TresItemWeaponEnhanceDataTable
// 0x0000 (0x11548330 - 0x11548330)
struct FTresItemWeaponEnhanceDataTable final : public FTresItemSynthesisDataTableBase
{
public:
	int32                                         M_FlagIndex;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefWeapon                            M_WeaponID;                                        // 0x006C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         M_bInitAchieved : 1;                               // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_WeaponLevel;                                     // 0x0074(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttackPlus;                                      // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MagicPlus;                                       // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AppendAbility;                                   // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresItemWeaponEnhanceDataTable) == 0x11548330, "Wrong alignment on FTresItemWeaponEnhanceDataTable");
static_assert(sizeof(FTresItemWeaponEnhanceDataTable) == 0x11548330, "Wrong size on FTresItemWeaponEnhanceDataTable");
static_assert(offsetof(FTresItemWeaponEnhanceDataTable, M_FlagIndex) == 0x000068, "Member 'FTresItemWeaponEnhanceDataTable::M_FlagIndex' has a wrong offset!");
static_assert(offsetof(FTresItemWeaponEnhanceDataTable, M_WeaponID) == 0x00006C, "Member 'FTresItemWeaponEnhanceDataTable::M_WeaponID' has a wrong offset!");
static_assert(offsetof(FTresItemWeaponEnhanceDataTable, M_WeaponLevel) == 0x000074, "Member 'FTresItemWeaponEnhanceDataTable::M_WeaponLevel' has a wrong offset!");
static_assert(offsetof(FTresItemWeaponEnhanceDataTable, M_AttackPlus) == 0x000078, "Member 'FTresItemWeaponEnhanceDataTable::M_AttackPlus' has a wrong offset!");
static_assert(offsetof(FTresItemWeaponEnhanceDataTable, M_MagicPlus) == 0x00007C, "Member 'FTresItemWeaponEnhanceDataTable::M_MagicPlus' has a wrong offset!");
static_assert(offsetof(FTresItemWeaponEnhanceDataTable, M_AppendAbility) == 0x000080, "Member 'FTresItemWeaponEnhanceDataTable::M_AppendAbility' has a wrong offset!");

// ScriptStruct TresGame.TresEx050SpawnInfo
// 0x0008 (0x0008 - 0x0000)
struct FTresEx050SpawnInfo final
{
public:
	TWeakObjectPtr<class AActor>                  WpSpawn;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEx050SpawnInfo) == 0x000004, "Wrong alignment on FTresEx050SpawnInfo");
static_assert(sizeof(FTresEx050SpawnInfo) == 0x000008, "Wrong size on FTresEx050SpawnInfo");
static_assert(offsetof(FTresEx050SpawnInfo, WpSpawn) == 0x000000, "Member 'FTresEx050SpawnInfo::WpSpawn' has a wrong offset!");

// ScriptStruct TresGame.TresVictoryBonusDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresVictoryBonusDataTable final : public FTableRowBase
{
public:
	class FName                                   M_FlagName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_Comment;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVBonusAbilityType                        M_InitAbilityEquipOnCriticalMode;                  // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusSora1;                                      // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilitySora1;                                    // 0x0022(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusSora2;                                      // 0x0023(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilitySora2;                                    // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusDONALD1;                                    // 0x0025(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityDONALD1;                                  // 0x0026(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusGOOFY1;                                     // 0x0027(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityGOOFY1;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusHERCULES1;                                  // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityHERCULES1;                                // 0x002A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusWOODY1;                                     // 0x002B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityWOODY1;                                   // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusBUZZ1;                                      // 0x002D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityBUZZ1;                                    // 0x002E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusRAPUNZEL1;                                  // 0x002F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityRAPUNZEL1;                                // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusFLYNN1;                                     // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityFLYNN1;                                   // 0x0032(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusSULLEY1;                                    // 0x0033(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilitySULLEY1;                                  // 0x0034(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusMIKE1;                                      // 0x0035(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityMIKE1;                                    // 0x0036(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusMARSHMALLOW1;                               // 0x0037(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityMARSHMALLOW1;                             // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusBAYMAX1;                                    // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityBAYMAX1;                                  // 0x003A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresVictoryBonusKind                         M_BonusJACK_SPARROW1;                              // 0x003B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AbilityJACK_SPARROW1;                            // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresVictoryBonusDataTable) == 0x11413080, "Wrong alignment on FTresVictoryBonusDataTable");
static_assert(sizeof(FTresVictoryBonusDataTable) == 0x11413080, "Wrong size on FTresVictoryBonusDataTable");
static_assert(offsetof(FTresVictoryBonusDataTable, M_FlagName) == 0x000008, "Member 'FTresVictoryBonusDataTable::M_FlagName' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_Comment) == 0x000010, "Member 'FTresVictoryBonusDataTable::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_InitAbilityEquipOnCriticalMode) == 0x000020, "Member 'FTresVictoryBonusDataTable::M_InitAbilityEquipOnCriticalMode' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusSora1) == 0x000021, "Member 'FTresVictoryBonusDataTable::M_BonusSora1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilitySora1) == 0x000022, "Member 'FTresVictoryBonusDataTable::M_AbilitySora1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusSora2) == 0x000023, "Member 'FTresVictoryBonusDataTable::M_BonusSora2' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilitySora2) == 0x000024, "Member 'FTresVictoryBonusDataTable::M_AbilitySora2' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusDONALD1) == 0x000025, "Member 'FTresVictoryBonusDataTable::M_BonusDONALD1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityDONALD1) == 0x000026, "Member 'FTresVictoryBonusDataTable::M_AbilityDONALD1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusGOOFY1) == 0x000027, "Member 'FTresVictoryBonusDataTable::M_BonusGOOFY1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityGOOFY1) == 0x000028, "Member 'FTresVictoryBonusDataTable::M_AbilityGOOFY1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusHERCULES1) == 0x000029, "Member 'FTresVictoryBonusDataTable::M_BonusHERCULES1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityHERCULES1) == 0x00002A, "Member 'FTresVictoryBonusDataTable::M_AbilityHERCULES1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusWOODY1) == 0x00002B, "Member 'FTresVictoryBonusDataTable::M_BonusWOODY1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityWOODY1) == 0x00002C, "Member 'FTresVictoryBonusDataTable::M_AbilityWOODY1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusBUZZ1) == 0x00002D, "Member 'FTresVictoryBonusDataTable::M_BonusBUZZ1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityBUZZ1) == 0x00002E, "Member 'FTresVictoryBonusDataTable::M_AbilityBUZZ1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusRAPUNZEL1) == 0x00002F, "Member 'FTresVictoryBonusDataTable::M_BonusRAPUNZEL1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityRAPUNZEL1) == 0x000030, "Member 'FTresVictoryBonusDataTable::M_AbilityRAPUNZEL1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusFLYNN1) == 0x000031, "Member 'FTresVictoryBonusDataTable::M_BonusFLYNN1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityFLYNN1) == 0x000032, "Member 'FTresVictoryBonusDataTable::M_AbilityFLYNN1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusSULLEY1) == 0x000033, "Member 'FTresVictoryBonusDataTable::M_BonusSULLEY1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilitySULLEY1) == 0x000034, "Member 'FTresVictoryBonusDataTable::M_AbilitySULLEY1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusMIKE1) == 0x000035, "Member 'FTresVictoryBonusDataTable::M_BonusMIKE1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityMIKE1) == 0x000036, "Member 'FTresVictoryBonusDataTable::M_AbilityMIKE1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusMARSHMALLOW1) == 0x000037, "Member 'FTresVictoryBonusDataTable::M_BonusMARSHMALLOW1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityMARSHMALLOW1) == 0x000038, "Member 'FTresVictoryBonusDataTable::M_AbilityMARSHMALLOW1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusBAYMAX1) == 0x000039, "Member 'FTresVictoryBonusDataTable::M_BonusBAYMAX1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityBAYMAX1) == 0x00003A, "Member 'FTresVictoryBonusDataTable::M_AbilityBAYMAX1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_BonusJACK_SPARROW1) == 0x00003B, "Member 'FTresVictoryBonusDataTable::M_BonusJACK_SPARROW1' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusDataTable, M_AbilityJACK_SPARROW1) == 0x00003C, "Member 'FTresVictoryBonusDataTable::M_AbilityJACK_SPARROW1' has a wrong offset!");

// ScriptStruct TresGame.TresKeybladeFormAbilityData
// 0x0010 (0x0010 - 0x0000)
struct FTresKeybladeFormAbilityData final
{
public:
	TArray<ETresTextAbilityKind>                  M_TextAbilitys;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresKeybladeFormAbilityData) == 0x000008, "Wrong alignment on FTresKeybladeFormAbilityData");
static_assert(sizeof(FTresKeybladeFormAbilityData) == 0x000010, "Wrong size on FTresKeybladeFormAbilityData");
static_assert(offsetof(FTresKeybladeFormAbilityData, M_TextAbilitys) == 0x000000, "Member 'FTresKeybladeFormAbilityData::M_TextAbilitys' has a wrong offset!");

// ScriptStruct TresGame.TresKeybladeAbilityData
// 0x1F5E9018 (0x1F5E9018 - 0x0000)
struct alignas(0x1F5E9018) FTresKeybladeAbilityData final
{
public:
	TArray<ETresTextAbilityKind>                  M_ShootflowAbilitys;                               // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresCharWearForm>                     M_WearForms;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ETresWeaponForm, struct FTresKeybladeFormAbilityData> M_FormAbilityMap;                                  // 0x0020(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresKeybladeAbilityData) == 0x1F5E9018, "Wrong alignment on FTresKeybladeAbilityData");
static_assert(sizeof(FTresKeybladeAbilityData) == 0x1F5E9018, "Wrong size on FTresKeybladeAbilityData");
static_assert(offsetof(FTresKeybladeAbilityData, M_ShootflowAbilitys) == 0x000000, "Member 'FTresKeybladeAbilityData::M_ShootflowAbilitys' has a wrong offset!");
static_assert(offsetof(FTresKeybladeAbilityData, M_WearForms) == 0x000010, "Member 'FTresKeybladeAbilityData::M_WearForms' has a wrong offset!");
static_assert(offsetof(FTresKeybladeAbilityData, M_FormAbilityMap) == 0x000020, "Member 'FTresKeybladeAbilityData::M_FormAbilityMap' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex054_VolcanoCraterAtkCollInfo
// 0x0020 (0x0020 - 0x0000)
struct FTresEnemy_e_ex054_VolcanoCraterAtkCollInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_BurnOmenEff;                                     // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex054_VolcanoCraterAtkCollInfo) == 0x000008, "Wrong alignment on FTresEnemy_e_ex054_VolcanoCraterAtkCollInfo");
static_assert(sizeof(FTresEnemy_e_ex054_VolcanoCraterAtkCollInfo) == 0x000020, "Wrong size on FTresEnemy_e_ex054_VolcanoCraterAtkCollInfo");
static_assert(offsetof(FTresEnemy_e_ex054_VolcanoCraterAtkCollInfo, M_BurnOmenEff) == 0x000010, "Member 'FTresEnemy_e_ex054_VolcanoCraterAtkCollInfo::M_BurnOmenEff' has a wrong offset!");

// ScriptStruct TresGame.TresSubtitleTrackKey
// 0x11544C90 (0x11544C90 - 0x0000)
struct alignas(0x11544C90) FTresSubtitleTrackKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Length;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_TextLabel;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSubtitleTrackKey) == 0x11544C90, "Wrong alignment on FTresSubtitleTrackKey");
static_assert(sizeof(FTresSubtitleTrackKey) == 0x11544C90, "Wrong size on FTresSubtitleTrackKey");
static_assert(offsetof(FTresSubtitleTrackKey, M_Time) == 0x000000, "Member 'FTresSubtitleTrackKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresSubtitleTrackKey, M_Length) == 0x000004, "Member 'FTresSubtitleTrackKey::M_Length' has a wrong offset!");
static_assert(offsetof(FTresSubtitleTrackKey, M_TextLabel) == 0x000008, "Member 'FTresSubtitleTrackKey::M_TextLabel' has a wrong offset!");

// ScriptStruct TresGame.ex064ShipBodyParameter
// 0x114F83D0 (0x114F83D0 - 0x0000)
struct alignas(0x114F83D0) FEx064ShipBodyParameter final
{
public:
	int32                                         M_ShipBodyHP;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamageWeightFromPlayer;                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DamageWeightFromEnemy;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEx064ShipBodyParameter) == 0x114F83D0, "Wrong alignment on FEx064ShipBodyParameter");
static_assert(sizeof(FEx064ShipBodyParameter) == 0x114F83D0, "Wrong size on FEx064ShipBodyParameter");
static_assert(offsetof(FEx064ShipBodyParameter, M_ShipBodyHP) == 0x000000, "Member 'FEx064ShipBodyParameter::M_ShipBodyHP' has a wrong offset!");
static_assert(offsetof(FEx064ShipBodyParameter, M_DamageWeightFromPlayer) == 0x000004, "Member 'FEx064ShipBodyParameter::M_DamageWeightFromPlayer' has a wrong offset!");
static_assert(offsetof(FEx064ShipBodyParameter, M_DamageWeightFromEnemy) == 0x000008, "Member 'FEx064ShipBodyParameter::M_DamageWeightFromEnemy' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx302AfterImageEffect
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx302AfterImageEffect final
{
public:
	class UParticleSystem*                        WarpEffectData;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        VisibleEffectData;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx302AfterImageEffect) == 0x000008, "Wrong alignment on FTresEnemyEx302AfterImageEffect");
static_assert(sizeof(FTresEnemyEx302AfterImageEffect) == 0x000010, "Wrong size on FTresEnemyEx302AfterImageEffect");
static_assert(offsetof(FTresEnemyEx302AfterImageEffect, WarpEffectData) == 0x000000, "Member 'FTresEnemyEx302AfterImageEffect::WarpEffectData' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx302AfterImageEffect, VisibleEffectData) == 0x000008, "Member 'FTresEnemyEx302AfterImageEffect::VisibleEffectData' has a wrong offset!");

// ScriptStruct TresGame.CAPrizeChimneyParam
// 0x115150F0 (0x115150F0 - 0x0000)
struct alignas(0x115150F0) FCAPrizeChimneyParam final
{
public:
	int32                                         M_MaxHitPoint;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_spawnPrizeNumForNormalAttack;                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_spawnPrizeNumForDead;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_prizeKind;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_InitSpeed;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_InitSpeedRand;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_PitchRange;                                      // 0x0018(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AirResistance;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PrizeLivingTime;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAPrizeChimneyParam) == 0x115150F0, "Wrong alignment on FCAPrizeChimneyParam");
static_assert(sizeof(FCAPrizeChimneyParam) == 0x115150F0, "Wrong size on FCAPrizeChimneyParam");
static_assert(offsetof(FCAPrizeChimneyParam, M_MaxHitPoint) == 0x000000, "Member 'FCAPrizeChimneyParam::M_MaxHitPoint' has a wrong offset!");
static_assert(offsetof(FCAPrizeChimneyParam, M_spawnPrizeNumForNormalAttack) == 0x000004, "Member 'FCAPrizeChimneyParam::M_spawnPrizeNumForNormalAttack' has a wrong offset!");
static_assert(offsetof(FCAPrizeChimneyParam, M_spawnPrizeNumForDead) == 0x000008, "Member 'FCAPrizeChimneyParam::M_spawnPrizeNumForDead' has a wrong offset!");
static_assert(offsetof(FCAPrizeChimneyParam, M_prizeKind) == 0x00000C, "Member 'FCAPrizeChimneyParam::M_prizeKind' has a wrong offset!");
static_assert(offsetof(FCAPrizeChimneyParam, M_InitSpeed) == 0x000010, "Member 'FCAPrizeChimneyParam::M_InitSpeed' has a wrong offset!");
static_assert(offsetof(FCAPrizeChimneyParam, M_InitSpeedRand) == 0x000014, "Member 'FCAPrizeChimneyParam::M_InitSpeedRand' has a wrong offset!");
static_assert(offsetof(FCAPrizeChimneyParam, M_PitchRange) == 0x000018, "Member 'FCAPrizeChimneyParam::M_PitchRange' has a wrong offset!");
static_assert(offsetof(FCAPrizeChimneyParam, M_AirResistance) == 0x000020, "Member 'FCAPrizeChimneyParam::M_AirResistance' has a wrong offset!");
static_assert(offsetof(FCAPrizeChimneyParam, M_PrizeLivingTime) == 0x000024, "Member 'FCAPrizeChimneyParam::M_PrizeLivingTime' has a wrong offset!");

// ScriptStruct TresGame.TresEx304HitEffectManager
// 0x0018 (0x0018 - 0x0000)
struct FTresEx304HitEffectManager final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_LaserEffectCmp;                                  // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               M_SparkEffectCmp;                                  // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTresEx304HitEffectManager) == 0x000008, "Wrong alignment on FTresEx304HitEffectManager");
static_assert(sizeof(FTresEx304HitEffectManager) == 0x000018, "Wrong size on FTresEx304HitEffectManager");
static_assert(offsetof(FTresEx304HitEffectManager, M_LaserEffectCmp) == 0x000008, "Member 'FTresEx304HitEffectManager::M_LaserEffectCmp' has a wrong offset!");
static_assert(offsetof(FTresEx304HitEffectManager, M_SparkEffectCmp) == 0x000010, "Member 'FTresEx304HitEffectManager::M_SparkEffectCmp' has a wrong offset!");

// ScriptStruct TresGame.EffectControlParameterVector_e_ex304a
// 0x0038 (0x0038 - 0x0000)
struct FEffectControlParameterVector_e_ex304a final
{
public:
	class FName                                   EffectParameterName;                               // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTime;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartParam;                                        // 0x000C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndParam;                                          // 0x0018(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x14];                                      // 0x0024(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEffectControlParameterVector_e_ex304a) == 0x000004, "Wrong alignment on FEffectControlParameterVector_e_ex304a");
static_assert(sizeof(FEffectControlParameterVector_e_ex304a) == 0x000038, "Wrong size on FEffectControlParameterVector_e_ex304a");
static_assert(offsetof(FEffectControlParameterVector_e_ex304a, EffectParameterName) == 0x000000, "Member 'FEffectControlParameterVector_e_ex304a::EffectParameterName' has a wrong offset!");
static_assert(offsetof(FEffectControlParameterVector_e_ex304a, InterpTime) == 0x000008, "Member 'FEffectControlParameterVector_e_ex304a::InterpTime' has a wrong offset!");
static_assert(offsetof(FEffectControlParameterVector_e_ex304a, StartParam) == 0x00000C, "Member 'FEffectControlParameterVector_e_ex304a::StartParam' has a wrong offset!");
static_assert(offsetof(FEffectControlParameterVector_e_ex304a, EndParam) == 0x000018, "Member 'FEffectControlParameterVector_e_ex304a::EndParam' has a wrong offset!");

// ScriptStruct TresGame.EffectControlParameterFloat_e_ex304a
// 0x114FA3E0 (0x114FA3E0 - 0x0000)
struct alignas(0x114FA3E0) FEffectControlParameterFloat_e_ex304a final
{
public:
	class FName                                   EffectParameterName;                               // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTime;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartParam;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndParam;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEffectControlParameterFloat_e_ex304a) == 0x114FA3E0, "Wrong alignment on FEffectControlParameterFloat_e_ex304a");
static_assert(sizeof(FEffectControlParameterFloat_e_ex304a) == 0x114FA3E0, "Wrong size on FEffectControlParameterFloat_e_ex304a");
static_assert(offsetof(FEffectControlParameterFloat_e_ex304a, EffectParameterName) == 0x000000, "Member 'FEffectControlParameterFloat_e_ex304a::EffectParameterName' has a wrong offset!");
static_assert(offsetof(FEffectControlParameterFloat_e_ex304a, InterpTime) == 0x000008, "Member 'FEffectControlParameterFloat_e_ex304a::InterpTime' has a wrong offset!");
static_assert(offsetof(FEffectControlParameterFloat_e_ex304a, StartParam) == 0x00000C, "Member 'FEffectControlParameterFloat_e_ex304a::StartParam' has a wrong offset!");
static_assert(offsetof(FEffectControlParameterFloat_e_ex304a, EndParam) == 0x000010, "Member 'FEffectControlParameterFloat_e_ex304a::EndParam' has a wrong offset!");

// ScriptStruct TresGame.EffectControlParam_e_ex304a
// 0x0028 (0x0028 - 0x0000)
struct FEffectControlParam_e_ex304a final
{
public:
	float                                         ChangeStartTimeRate;                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEffectControlParameterVector_e_ex304a> VectorParamList;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FEffectControlParameterFloat_e_ex304a> FloatParamList;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEffectControlParam_e_ex304a) == 0x000008, "Wrong alignment on FEffectControlParam_e_ex304a");
static_assert(sizeof(FEffectControlParam_e_ex304a) == 0x000028, "Wrong size on FEffectControlParam_e_ex304a");
static_assert(offsetof(FEffectControlParam_e_ex304a, ChangeStartTimeRate) == 0x000000, "Member 'FEffectControlParam_e_ex304a::ChangeStartTimeRate' has a wrong offset!");
static_assert(offsetof(FEffectControlParam_e_ex304a, VectorParamList) == 0x000008, "Member 'FEffectControlParam_e_ex304a::VectorParamList' has a wrong offset!");
static_assert(offsetof(FEffectControlParam_e_ex304a, FloatParamList) == 0x000018, "Member 'FEffectControlParam_e_ex304a::FloatParamList' has a wrong offset!");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanWorldMinY
// 0x0016 (0x4CEC - 0x4CD6)
struct alignas(0x4CEC) FTresTaggedActorPropertyValue_OceanWorldMinY final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanWorldMinY) == 0x004CEC, "Wrong alignment on FTresTaggedActorPropertyValue_OceanWorldMinY");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanWorldMinY) == 0x004CEC, "Wrong size on FTresTaggedActorPropertyValue_OceanWorldMinY");

// ScriptStruct TresGame.EffectSpawnParam_e_ex304a
// 0x0018 (0x0018 - 0x0000)
struct FEffectSpawnParam_e_ex304a final
{
public:
	uint8                                         bStartSpawned : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnTimeRate;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        SpawnParticleSystem;                               // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEffectSpawnParam_e_ex304a) == 0x000008, "Wrong alignment on FEffectSpawnParam_e_ex304a");
static_assert(sizeof(FEffectSpawnParam_e_ex304a) == 0x000018, "Wrong size on FEffectSpawnParam_e_ex304a");
static_assert(offsetof(FEffectSpawnParam_e_ex304a, SpawnTimeRate) == 0x000004, "Member 'FEffectSpawnParam_e_ex304a::SpawnTimeRate' has a wrong offset!");
static_assert(offsetof(FEffectSpawnParam_e_ex304a, SpawnParticleSystem) == 0x000008, "Member 'FEffectSpawnParam_e_ex304a::SpawnParticleSystem' has a wrong offset!");

// ScriptStruct TresGame.TresVoice_e_ex352
// 0x0018 (0x0018 - 0x0000)
struct FTresVoice_e_ex352 final
{
public:
	int32                                         M_Param;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             M_Voice;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bSound3D;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresVoice_e_ex352) == 0x000008, "Wrong alignment on FTresVoice_e_ex352");
static_assert(sizeof(FTresVoice_e_ex352) == 0x000018, "Wrong size on FTresVoice_e_ex352");
static_assert(offsetof(FTresVoice_e_ex352, M_Param) == 0x000000, "Member 'FTresVoice_e_ex352::M_Param' has a wrong offset!");
static_assert(offsetof(FTresVoice_e_ex352, M_Voice) == 0x000008, "Member 'FTresVoice_e_ex352::M_Voice' has a wrong offset!");
static_assert(offsetof(FTresVoice_e_ex352, M_bSound3D) == 0x000010, "Member 'FTresVoice_e_ex352::M_bSound3D' has a wrong offset!");

// ScriptStruct TresGame.TresHomingDarkLaserSpawnParams_e_ex352
// 0x0000 (0x114FC120 - 0x114FC120)
struct FTresHomingDarkLaserSpawnParams_e_ex352 final : public FTresDarkLaserSpawnParams_e_ex352
{
public:
	int32                                         M_SpawnNum;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_SpawnSameTimeNum;                                // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpawnMinRadius;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpawnMaxRadius;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpawnMinHieght;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpawnMaxHeight;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresHomingDarkLaserSpawnParams_e_ex352) == 0x114FC120, "Wrong alignment on FTresHomingDarkLaserSpawnParams_e_ex352");
static_assert(sizeof(FTresHomingDarkLaserSpawnParams_e_ex352) == 0x114FC120, "Wrong size on FTresHomingDarkLaserSpawnParams_e_ex352");
static_assert(offsetof(FTresHomingDarkLaserSpawnParams_e_ex352, M_SpawnNum) == 0x000020, "Member 'FTresHomingDarkLaserSpawnParams_e_ex352::M_SpawnNum' has a wrong offset!");
static_assert(offsetof(FTresHomingDarkLaserSpawnParams_e_ex352, M_SpawnSameTimeNum) == 0x000024, "Member 'FTresHomingDarkLaserSpawnParams_e_ex352::M_SpawnSameTimeNum' has a wrong offset!");
static_assert(offsetof(FTresHomingDarkLaserSpawnParams_e_ex352, M_SpawnMinRadius) == 0x000028, "Member 'FTresHomingDarkLaserSpawnParams_e_ex352::M_SpawnMinRadius' has a wrong offset!");
static_assert(offsetof(FTresHomingDarkLaserSpawnParams_e_ex352, M_SpawnMaxRadius) == 0x00002C, "Member 'FTresHomingDarkLaserSpawnParams_e_ex352::M_SpawnMaxRadius' has a wrong offset!");
static_assert(offsetof(FTresHomingDarkLaserSpawnParams_e_ex352, M_SpawnMinHieght) == 0x000030, "Member 'FTresHomingDarkLaserSpawnParams_e_ex352::M_SpawnMinHieght' has a wrong offset!");
static_assert(offsetof(FTresHomingDarkLaserSpawnParams_e_ex352, M_SpawnMaxHeight) == 0x000034, "Member 'FTresHomingDarkLaserSpawnParams_e_ex352::M_SpawnMaxHeight' has a wrong offset!");

// ScriptStruct TresGame.TresEx353EveryDirectionShotReserveWorker
// 0x1187A (0x1187A - 0x0000)
struct alignas(0x1187A) FTresEx353EveryDirectionShotReserveWorker final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEx353EveryDirectionShotReserveWorker) == 0x01187A, "Wrong alignment on FTresEx353EveryDirectionShotReserveWorker");
static_assert(sizeof(FTresEx353EveryDirectionShotReserveWorker) == 0x01187A, "Wrong size on FTresEx353EveryDirectionShotReserveWorker");

// ScriptStruct TresGame.EX354_ArtemaWarpShotModifySet
// 0x0010 (0x0010 - 0x0000)
struct FEX354_ArtemaWarpShotModifySet final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_Target;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_ArtemaWarpShotModifySet) == 0x000008, "Wrong alignment on FEX354_ArtemaWarpShotModifySet");
static_assert(sizeof(FEX354_ArtemaWarpShotModifySet) == 0x000010, "Wrong size on FEX354_ArtemaWarpShotModifySet");
static_assert(offsetof(FEX354_ArtemaWarpShotModifySet, M_Target) == 0x000008, "Member 'FEX354_ArtemaWarpShotModifySet::M_Target' has a wrong offset!");

// ScriptStruct TresGame.EX355_RemoteEventID
// 0x0010 (0x0010 - 0x0000)
struct FEX355_RemoteEventID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_RemoteEventName;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX355_RemoteEventID) == 0x000004, "Wrong alignment on FEX355_RemoteEventID");
static_assert(sizeof(FEX355_RemoteEventID) == 0x000010, "Wrong size on FEX355_RemoteEventID");
static_assert(offsetof(FEX355_RemoteEventID, M_RemoteEventName) == 0x000008, "Member 'FEX355_RemoteEventID::M_RemoteEventName' has a wrong offset!");

// ScriptStruct TresGame.TresTimeGaugeParam_e_ex356
// 0x114FDB20 (0x114FDB20 - 0x0000)
struct alignas(0x114FDB20) FTresTimeGaugeParam_e_ex356 final
{
public:
	float                                         InitialValue;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubValueIntervalTime;                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubValue;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTimeGaugeParam_e_ex356) == 0x114FDB20, "Wrong alignment on FTresTimeGaugeParam_e_ex356");
static_assert(sizeof(FTresTimeGaugeParam_e_ex356) == 0x114FDB20, "Wrong size on FTresTimeGaugeParam_e_ex356");
static_assert(offsetof(FTresTimeGaugeParam_e_ex356, InitialValue) == 0x000000, "Member 'FTresTimeGaugeParam_e_ex356::InitialValue' has a wrong offset!");
static_assert(offsetof(FTresTimeGaugeParam_e_ex356, SubValueIntervalTime) == 0x000004, "Member 'FTresTimeGaugeParam_e_ex356::SubValueIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresTimeGaugeParam_e_ex356, SubValue) == 0x000008, "Member 'FTresTimeGaugeParam_e_ex356::SubValue' has a wrong offset!");

// ScriptStruct TresGame.TresDeathSentenceArmorRevengeParam_e_ex357
// 0x114FDD80 (0x114FDD80 - 0x0000)
struct alignas(0x114FDD80) FTresDeathSentenceArmorRevengeParam_e_ex357 final
{
public:
	class FName                                   BaseParamID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevengeStartArmorDamage;                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresDeathSentenceArmorRevengeParam_e_ex357) == 0x114FDD80, "Wrong alignment on FTresDeathSentenceArmorRevengeParam_e_ex357");
static_assert(sizeof(FTresDeathSentenceArmorRevengeParam_e_ex357) == 0x114FDD80, "Wrong size on FTresDeathSentenceArmorRevengeParam_e_ex357");
static_assert(offsetof(FTresDeathSentenceArmorRevengeParam_e_ex357, BaseParamID) == 0x000000, "Member 'FTresDeathSentenceArmorRevengeParam_e_ex357::BaseParamID' has a wrong offset!");
static_assert(offsetof(FTresDeathSentenceArmorRevengeParam_e_ex357, RevengeStartArmorDamage) == 0x000008, "Member 'FTresDeathSentenceArmorRevengeParam_e_ex357::RevengeStartArmorDamage' has a wrong offset!");

// ScriptStruct TresGame.EX359_EffectGroupID
// 0x0008 (0x0008 - 0x0000)
struct FEX359_EffectGroupID final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_EffectGroupID) == 0x000004, "Wrong alignment on FEX359_EffectGroupID");
static_assert(sizeof(FEX359_EffectGroupID) == 0x000008, "Wrong size on FEX359_EffectGroupID");
static_assert(offsetof(FEX359_EffectGroupID, ID) == 0x000004, "Member 'FEX359_EffectGroupID::ID' has a wrong offset!");

// ScriptStruct TresGame.VoiceSet_e_ex359
// 0x0018 (0x0018 - 0x0000)
struct FVoiceSet_e_ex359 final
{
public:
	TArray<class USoundBase*>                     VoiceDataArray;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EVoiceType_e_ex359                            VoiceType;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoiceSet_e_ex359) == 0x000008, "Wrong alignment on FVoiceSet_e_ex359");
static_assert(sizeof(FVoiceSet_e_ex359) == 0x000018, "Wrong size on FVoiceSet_e_ex359");
static_assert(offsetof(FVoiceSet_e_ex359, VoiceDataArray) == 0x000000, "Member 'FVoiceSet_e_ex359::VoiceDataArray' has a wrong offset!");
static_assert(offsetof(FVoiceSet_e_ex359, VoiceType) == 0x000010, "Member 'FVoiceSet_e_ex359::VoiceType' has a wrong offset!");

// ScriptStruct TresGame.TresCodeMenuIconData
// 0x0040 (0x0040 - 0x0000)
struct FTresCodeMenuIconData final
{
public:
	class UGFxObject*                             M_pIconAnm;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresASProxyTresControlsIcon*           M_pIcon;                                           // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCodeMenuIconData) == 0x000008, "Wrong alignment on FTresCodeMenuIconData");
static_assert(sizeof(FTresCodeMenuIconData) == 0x000040, "Wrong size on FTresCodeMenuIconData");
static_assert(offsetof(FTresCodeMenuIconData, M_pIconAnm) == 0x000000, "Member 'FTresCodeMenuIconData::M_pIconAnm' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuIconData, M_pIcon) == 0x000008, "Member 'FTresCodeMenuIconData::M_pIcon' has a wrong offset!");

// ScriptStruct TresGame.TresMiRxReplicaStateTable
// 0x0010 (0x0010 - 0x0000)
struct FTresMiRxReplicaStateTable final
{
public:
	TArray<struct FTresMiRxReplicaStatePattern>   M_Patterns;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTresMiRxReplicaStateTable) == 0x000008, "Wrong alignment on FTresMiRxReplicaStateTable");
static_assert(sizeof(FTresMiRxReplicaStateTable) == 0x000010, "Wrong size on FTresMiRxReplicaStateTable");
static_assert(offsetof(FTresMiRxReplicaStateTable, M_Patterns) == 0x000000, "Member 'FTresMiRxReplicaStateTable::M_Patterns' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx361CounterAfterActionPeriodInfo
// 0x114FE460 (0x114FE460 - 0x0000)
struct alignas(0x114FE460) FTresEnemyEx361CounterAfterActionPeriodInfo final
{
public:
	int32                                         HPPersentage;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Period;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx361CounterAfterActionPeriodInfo) == 0x114FE460, "Wrong alignment on FTresEnemyEx361CounterAfterActionPeriodInfo");
static_assert(sizeof(FTresEnemyEx361CounterAfterActionPeriodInfo) == 0x114FE460, "Wrong size on FTresEnemyEx361CounterAfterActionPeriodInfo");
static_assert(offsetof(FTresEnemyEx361CounterAfterActionPeriodInfo, HPPersentage) == 0x000000, "Member 'FTresEnemyEx361CounterAfterActionPeriodInfo::HPPersentage' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx361CounterAfterActionPeriodInfo, Period) == 0x000004, "Member 'FTresEnemyEx361CounterAfterActionPeriodInfo::Period' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipCinematicModeEventData
// 0x115241C0 (0x115241C0 - 0x0000)
struct alignas(0x115241C0) FTresGumiShipCinematicModeEventData final
{
public:
	int32                                         M_eEventFlags;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_EventName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipCinematicModeEventData) == 0x115241C0, "Wrong alignment on FTresGumiShipCinematicModeEventData");
static_assert(sizeof(FTresGumiShipCinematicModeEventData) == 0x115241C0, "Wrong size on FTresGumiShipCinematicModeEventData");
static_assert(offsetof(FTresGumiShipCinematicModeEventData, M_eEventFlags) == 0x000000, "Member 'FTresGumiShipCinematicModeEventData::M_eEventFlags' has a wrong offset!");
static_assert(offsetof(FTresGumiShipCinematicModeEventData, M_EventName) == 0x000008, "Member 'FTresGumiShipCinematicModeEventData::M_EventName' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnHandParam_e_ex702
// 0x114FEC10 (0x114FEC10 - 0x0000)
struct alignas(0x114FEC10) FTresSpawnHandParam_e_ex702 final
{
public:
	TSubclassOf<class ATresProjectileBase>        ProjectileClass;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRadius;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRadius;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSpawnHandParam_e_ex702) == 0x114FEC10, "Wrong alignment on FTresSpawnHandParam_e_ex702");
static_assert(sizeof(FTresSpawnHandParam_e_ex702) == 0x114FEC10, "Wrong size on FTresSpawnHandParam_e_ex702");
static_assert(offsetof(FTresSpawnHandParam_e_ex702, ProjectileClass) == 0x000000, "Member 'FTresSpawnHandParam_e_ex702::ProjectileClass' has a wrong offset!");
static_assert(offsetof(FTresSpawnHandParam_e_ex702, Num) == 0x000008, "Member 'FTresSpawnHandParam_e_ex702::Num' has a wrong offset!");
static_assert(offsetof(FTresSpawnHandParam_e_ex702, MinRadius) == 0x00000C, "Member 'FTresSpawnHandParam_e_ex702::MinRadius' has a wrong offset!");
static_assert(offsetof(FTresSpawnHandParam_e_ex702, MaxRadius) == 0x000010, "Member 'FTresSpawnHandParam_e_ex702::MaxRadius' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_Flotation
// 0x0038 (0x0038 - 0x0000)
struct FTresEnemyEx711_Flotation final
{
public:
	class AStaticMeshActor*                       M_pActor;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x30];                                       // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_Flotation) == 0x000008, "Wrong alignment on FTresEnemyEx711_Flotation");
static_assert(sizeof(FTresEnemyEx711_Flotation) == 0x000038, "Wrong size on FTresEnemyEx711_Flotation");
static_assert(offsetof(FTresEnemyEx711_Flotation, M_pActor) == 0x000000, "Member 'FTresEnemyEx711_Flotation::M_pActor' has a wrong offset!");

// ScriptStruct TresGame.TresThornChainEffectInfo
// 0x114FF430 (0x114FF430 - 0x0000)
struct alignas(0x114FF430) FTresThornChainEffectInfo final
{
public:
	class UParticleSystem*                        M_EffectAsset;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AttachName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresThornChainEffectInfo) == 0x114FF430, "Wrong alignment on FTresThornChainEffectInfo");
static_assert(sizeof(FTresThornChainEffectInfo) == 0x114FF430, "Wrong size on FTresThornChainEffectInfo");
static_assert(offsetof(FTresThornChainEffectInfo, M_EffectAsset) == 0x000000, "Member 'FTresThornChainEffectInfo::M_EffectAsset' has a wrong offset!");
static_assert(offsetof(FTresThornChainEffectInfo, M_AttachName) == 0x000008, "Member 'FTresThornChainEffectInfo::M_AttachName' has a wrong offset!");

// ScriptStruct TresGame.ParticleSystemAttachData_e_ex761
// 0x114FF610 (0x114FF610 - 0x0000)
struct alignas(0x114FF610) FParticleSystemAttachData_e_ex761 final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParticleSystemAttachData_e_ex761) == 0x114FF610, "Wrong alignment on FParticleSystemAttachData_e_ex761");
static_assert(sizeof(FParticleSystemAttachData_e_ex761) == 0x114FF610, "Wrong size on FParticleSystemAttachData_e_ex761");
static_assert(offsetof(FParticleSystemAttachData_e_ex761, ParticleSystem) == 0x000000, "Member 'FParticleSystemAttachData_e_ex761::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FParticleSystemAttachData_e_ex761, AttachSocketName) == 0x000008, "Member 'FParticleSystemAttachData_e_ex761::AttachSocketName' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipElementResistance
// 0x1151E4B0 (0x1151E4B0 - 0x0000)
struct alignas(0x1151E4B0) FTresGumiShipElementResistance final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fShot;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLaser;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStrike;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpecial;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipElementResistance) == 0x1151E4B0, "Wrong alignment on FTresGumiShipElementResistance");
static_assert(sizeof(FTresGumiShipElementResistance) == 0x1151E4B0, "Wrong size on FTresGumiShipElementResistance");
static_assert(offsetof(FTresGumiShipElementResistance, M_fShot) == 0x000008, "Member 'FTresGumiShipElementResistance::M_fShot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipElementResistance, M_fLaser) == 0x00000C, "Member 'FTresGumiShipElementResistance::M_fLaser' has a wrong offset!");
static_assert(offsetof(FTresGumiShipElementResistance, M_fStrike) == 0x000010, "Member 'FTresGumiShipElementResistance::M_fStrike' has a wrong offset!");
static_assert(offsetof(FTresGumiShipElementResistance, M_fSpecial) == 0x000014, "Member 'FTresGumiShipElementResistance::M_fSpecial' has a wrong offset!");

// ScriptStruct TresGame.DiveAttackPosition_e_he903
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FDiveAttackPosition_e_he903 final
{
public:
	struct FVector                                M_vDiveAttackStartOffset;                          // 0x0000(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_vDiveAttackStartRot;                             // 0x000C(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDiveAttackStartOffset;                            // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDiveAttackStartRot;                               // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_vDiveAttackEndOffset;                            // 0x001C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDiveAttackEndOffset;                              // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDiveAttackPosition_e_he903) == 0x112E9AF0, "Wrong alignment on FDiveAttackPosition_e_he903");
static_assert(sizeof(FDiveAttackPosition_e_he903) == 0x112E9AF0, "Wrong size on FDiveAttackPosition_e_he903");
static_assert(offsetof(FDiveAttackPosition_e_he903, M_vDiveAttackStartOffset) == 0x000000, "Member 'FDiveAttackPosition_e_he903::M_vDiveAttackStartOffset' has a wrong offset!");
static_assert(offsetof(FDiveAttackPosition_e_he903, M_vDiveAttackStartRot) == 0x00000C, "Member 'FDiveAttackPosition_e_he903::M_vDiveAttackStartRot' has a wrong offset!");
static_assert(offsetof(FDiveAttackPosition_e_he903, bDiveAttackStartOffset) == 0x000018, "Member 'FDiveAttackPosition_e_he903::bDiveAttackStartOffset' has a wrong offset!");
static_assert(offsetof(FDiveAttackPosition_e_he903, bDiveAttackStartRot) == 0x000019, "Member 'FDiveAttackPosition_e_he903::bDiveAttackStartRot' has a wrong offset!");
static_assert(offsetof(FDiveAttackPosition_e_he903, M_vDiveAttackEndOffset) == 0x00001C, "Member 'FDiveAttackPosition_e_he903::M_vDiveAttackEndOffset' has a wrong offset!");
static_assert(offsetof(FDiveAttackPosition_e_he903, bDiveAttackEndOffset) == 0x000028, "Member 'FDiveAttackPosition_e_he903::bDiveAttackEndOffset' has a wrong offset!");

// ScriptStruct TresGame.TresRemyResultAnimationDataTable
// 0x15F420 (0x115724A0 - 0x11413080)
struct alignas(0x115724A0) FTresRemyResultAnimationDataTable final : public FTableRowBase
{
public:
	ERemyCookingGameType                          GameType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemyResultAnimationType                      AnimationType;                                     // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimationName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRemyResultAnimationDataTable) == 0x115724A0, "Wrong alignment on FTresRemyResultAnimationDataTable");
static_assert(sizeof(FTresRemyResultAnimationDataTable) == 0x115724A0, "Wrong size on FTresRemyResultAnimationDataTable");
static_assert(offsetof(FTresRemyResultAnimationDataTable, GameType) == 0x000008, "Member 'FTresRemyResultAnimationDataTable::GameType' has a wrong offset!");
static_assert(offsetof(FTresRemyResultAnimationDataTable, AnimationType) == 0x000009, "Member 'FTresRemyResultAnimationDataTable::AnimationType' has a wrong offset!");
static_assert(offsetof(FTresRemyResultAnimationDataTable, AnimationName) == 0x000010, "Member 'FTresRemyResultAnimationDataTable::AnimationName' has a wrong offset!");

// ScriptStruct TresGame.TresNavLinkSet_e_ex035_
// 0x0010 (0x0010 - 0x0000)
struct FTresNavLinkSet_e_ex035_ final
{
public:
	class ANavLinkProxy*                          NavLinkProxy;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresNavLinkSegment_e_ex035_                  NavLinkSegment;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresNavLinkSet_e_ex035_) == 0x000008, "Wrong alignment on FTresNavLinkSet_e_ex035_");
static_assert(sizeof(FTresNavLinkSet_e_ex035_) == 0x000010, "Wrong size on FTresNavLinkSet_e_ex035_");
static_assert(offsetof(FTresNavLinkSet_e_ex035_, NavLinkProxy) == 0x000000, "Member 'FTresNavLinkSet_e_ex035_::NavLinkProxy' has a wrong offset!");
static_assert(offsetof(FTresNavLinkSet_e_ex035_, NavLinkSegment) == 0x000008, "Member 'FTresNavLinkSet_e_ex035_::NavLinkSegment' has a wrong offset!");

// ScriptStruct TresGame.EnemyShipDustEffectData
// 0x0010 (0x0010 - 0x0000)
struct FEnemyShipDustEffectData final
{
public:
	class UParticleSystemComponent*               M_Particle;                                        // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnemyShipDustEffectData) == 0x000008, "Wrong alignment on FEnemyShipDustEffectData");
static_assert(sizeof(FEnemyShipDustEffectData) == 0x000010, "Wrong size on FEnemyShipDustEffectData");
static_assert(offsetof(FEnemyShipDustEffectData, M_Particle) == 0x000000, "Member 'FEnemyShipDustEffectData::M_Particle' has a wrong offset!");

// ScriptStruct TresGame.TresParam_e_ex773_ParamReverseFlareShot
// 0x0058 (0x0058 - 0x0000)
struct FTresParam_e_ex773_ParamReverseFlareShot final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNum;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLocationOffsetSize;                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TabooEndLength;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OneLength;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTimeOffset;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextSpawnTime;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionTime;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x0020(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnOffsetMaxValue;                               // 0x002C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        SpawnOffsetArray;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 SpawnOffsetAngleArray;                             // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresParam_e_ex773_ParamReverseFlareShot) == 0x000008, "Wrong alignment on FTresParam_e_ex773_ParamReverseFlareShot");
static_assert(sizeof(FTresParam_e_ex773_ParamReverseFlareShot) == 0x000058, "Wrong size on FTresParam_e_ex773_ParamReverseFlareShot");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, Num) == 0x000000, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::Num' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, MaxNum) == 0x000004, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::MaxNum' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, StartLocationOffsetSize) == 0x000008, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::StartLocationOffsetSize' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, TabooEndLength) == 0x00000C, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::TabooEndLength' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, OneLength) == 0x000010, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::OneLength' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, StartTimeOffset) == 0x000014, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::StartTimeOffset' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, NextSpawnTime) == 0x000018, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::NextSpawnTime' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, ExplosionTime) == 0x00001C, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::ExplosionTime' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, TargetOffset) == 0x000020, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::TargetOffset' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, SpawnOffsetMaxValue) == 0x00002C, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::SpawnOffsetMaxValue' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, SpawnOffsetArray) == 0x000038, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::SpawnOffsetArray' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_ParamReverseFlareShot, SpawnOffsetAngleArray) == 0x000048, "Member 'FTresParam_e_ex773_ParamReverseFlareShot::SpawnOffsetAngleArray' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyShipFadeParameter
// 0x11500F00 (0x11500F00 - 0x0000)
struct alignas(0x11500F00) FTresEnemyShipFadeParameter final
{
public:
	class FName                                   M_FadeAllName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_DriverFadeName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_FadeTimeAppear;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_FadeTimeAppearOnSpawn;                           // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_FadeTimeDisappear;                               // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SwitchAtkCollValue;                              // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SwitchBodyCollValue;                             // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SwitchDamageSmokeValue;                          // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_StartFadeTimeAfterEffect;                        // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_MastFadeName0;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_MastFadeName1;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_MastFadeName2;                                   // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_MastFadeName3;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MastFadeApplyHPRate0;                            // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MastFadeApplyHPRate1;                            // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MastFadeApplyHPRate2;                            // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MastFadeTime0;                                   // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MastFadeTime1;                                   // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MastFadeTime2;                                   // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MastFadeTime3;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MastFadeDelayTime2;                              // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MastFadeOnDieDelayTime;                          // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyShipFadeParameter) == 0x11500F00, "Wrong alignment on FTresEnemyShipFadeParameter");
static_assert(sizeof(FTresEnemyShipFadeParameter) == 0x11500F00, "Wrong size on FTresEnemyShipFadeParameter");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_FadeAllName) == 0x000000, "Member 'FTresEnemyShipFadeParameter::M_FadeAllName' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_DriverFadeName) == 0x000008, "Member 'FTresEnemyShipFadeParameter::M_DriverFadeName' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_FadeTimeAppear) == 0x000010, "Member 'FTresEnemyShipFadeParameter::M_FadeTimeAppear' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_FadeTimeAppearOnSpawn) == 0x000014, "Member 'FTresEnemyShipFadeParameter::M_FadeTimeAppearOnSpawn' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_FadeTimeDisappear) == 0x000018, "Member 'FTresEnemyShipFadeParameter::M_FadeTimeDisappear' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_SwitchAtkCollValue) == 0x00001C, "Member 'FTresEnemyShipFadeParameter::M_SwitchAtkCollValue' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_SwitchBodyCollValue) == 0x000020, "Member 'FTresEnemyShipFadeParameter::M_SwitchBodyCollValue' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_SwitchDamageSmokeValue) == 0x000024, "Member 'FTresEnemyShipFadeParameter::M_SwitchDamageSmokeValue' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_StartFadeTimeAfterEffect) == 0x000028, "Member 'FTresEnemyShipFadeParameter::M_StartFadeTimeAfterEffect' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeName0) == 0x000030, "Member 'FTresEnemyShipFadeParameter::M_MastFadeName0' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeName1) == 0x000038, "Member 'FTresEnemyShipFadeParameter::M_MastFadeName1' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeName2) == 0x000040, "Member 'FTresEnemyShipFadeParameter::M_MastFadeName2' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeName3) == 0x000048, "Member 'FTresEnemyShipFadeParameter::M_MastFadeName3' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeApplyHPRate0) == 0x000050, "Member 'FTresEnemyShipFadeParameter::M_MastFadeApplyHPRate0' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeApplyHPRate1) == 0x000054, "Member 'FTresEnemyShipFadeParameter::M_MastFadeApplyHPRate1' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeApplyHPRate2) == 0x000058, "Member 'FTresEnemyShipFadeParameter::M_MastFadeApplyHPRate2' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeTime0) == 0x00005C, "Member 'FTresEnemyShipFadeParameter::M_MastFadeTime0' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeTime1) == 0x000060, "Member 'FTresEnemyShipFadeParameter::M_MastFadeTime1' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeTime2) == 0x000064, "Member 'FTresEnemyShipFadeParameter::M_MastFadeTime2' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeTime3) == 0x000068, "Member 'FTresEnemyShipFadeParameter::M_MastFadeTime3' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeDelayTime2) == 0x00006C, "Member 'FTresEnemyShipFadeParameter::M_MastFadeDelayTime2' has a wrong offset!");
static_assert(offsetof(FTresEnemyShipFadeParameter, M_MastFadeOnDieDelayTime) == 0x000070, "Member 'FTresEnemyShipFadeParameter::M_MastFadeOnDieDelayTime' has a wrong offset!");

// ScriptStruct TresGame.TresLSIScoreBarnyardSports
// 0x1154DAB0 (0x1154DAB0 - 0x0000)
struct alignas(0x1154DAB0) FTresLSIScoreBarnyardSports final
{
public:
	int32                                         The100m;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hurdle;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Triplejump;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLSIScoreBarnyardSports) == 0x1154DAB0, "Wrong alignment on FTresLSIScoreBarnyardSports");
static_assert(sizeof(FTresLSIScoreBarnyardSports) == 0x1154DAB0, "Wrong size on FTresLSIScoreBarnyardSports");
static_assert(offsetof(FTresLSIScoreBarnyardSports, The100m) == 0x000000, "Member 'FTresLSIScoreBarnyardSports::The100m' has a wrong offset!");
static_assert(offsetof(FTresLSIScoreBarnyardSports, Hurdle) == 0x000004, "Member 'FTresLSIScoreBarnyardSports::Hurdle' has a wrong offset!");
static_assert(offsetof(FTresLSIScoreBarnyardSports, Triplejump) == 0x000008, "Member 'FTresLSIScoreBarnyardSports::Triplejump' has a wrong offset!");

// ScriptStruct TresGame.BX901_IdleFlyInfo
// 0x0058 (0x0058 - 0x0000)
struct FBX901_IdleFlyInfo final
{
public:
	struct FVector                                M_vOffsetMin;                                      // 0x0000(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vOffsetMax;                                      // 0x000C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vOffsetPeriod;                                   // 0x0018(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x34];                                      // 0x0024(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBX901_IdleFlyInfo) == 0x000001, "Wrong alignment on FBX901_IdleFlyInfo");
static_assert(sizeof(FBX901_IdleFlyInfo) == 0x000058, "Wrong size on FBX901_IdleFlyInfo");
static_assert(offsetof(FBX901_IdleFlyInfo, M_vOffsetMin) == 0x000000, "Member 'FBX901_IdleFlyInfo::M_vOffsetMin' has a wrong offset!");
static_assert(offsetof(FBX901_IdleFlyInfo, M_vOffsetMax) == 0x00000C, "Member 'FBX901_IdleFlyInfo::M_vOffsetMax' has a wrong offset!");
static_assert(offsetof(FBX901_IdleFlyInfo, M_vOffsetPeriod) == 0x000018, "Member 'FBX901_IdleFlyInfo::M_vOffsetPeriod' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex361_DarkMineEntryParam
// 0x4994 (0x4994 - 0x0000)
struct alignas(0x4994) FTresEnemy_e_ex361_DarkMineEntryParam final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex361_DarkMineEntryParam) == 0x004994, "Wrong alignment on FTresEnemy_e_ex361_DarkMineEntryParam");
static_assert(sizeof(FTresEnemy_e_ex361_DarkMineEntryParam) == 0x004994, "Wrong size on FTresEnemy_e_ex361_DarkMineEntryParam");

// ScriptStruct TresGame.TresEnemyCardWallParam_e_ex356
// 0x11505850 (0x11505850 - 0x0000)
struct alignas(0x11505850) FTresEnemyCardWallParam_e_ex356 final
{
public:
	float                                         RotationSpeed;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationRadius;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationStopTimeList[0x5];                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyCardWallParam_e_ex356) == 0x11505850, "Wrong alignment on FTresEnemyCardWallParam_e_ex356");
static_assert(sizeof(FTresEnemyCardWallParam_e_ex356) == 0x11505850, "Wrong size on FTresEnemyCardWallParam_e_ex356");
static_assert(offsetof(FTresEnemyCardWallParam_e_ex356, RotationSpeed) == 0x000000, "Member 'FTresEnemyCardWallParam_e_ex356::RotationSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemyCardWallParam_e_ex356, RotationRadius) == 0x000004, "Member 'FTresEnemyCardWallParam_e_ex356::RotationRadius' has a wrong offset!");
static_assert(offsetof(FTresEnemyCardWallParam_e_ex356, RotationStopTimeList) == 0x000008, "Member 'FTresEnemyCardWallParam_e_ex356::RotationStopTimeList' has a wrong offset!");

// ScriptStruct TresGame.DeviationShotInfo_e_ex306
// 0x000C (0x000C - 0x0000)
struct FDeviationShotInfo_e_ex306 final
{
public:
	float                                         FDeviationRate;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMaxDeviationTargetVelocity;                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoVerticalDiviation;                              // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeviationShotInfo_e_ex306) == 0x000004, "Wrong alignment on FDeviationShotInfo_e_ex306");
static_assert(sizeof(FDeviationShotInfo_e_ex306) == 0x00000C, "Wrong size on FDeviationShotInfo_e_ex306");
static_assert(offsetof(FDeviationShotInfo_e_ex306, FDeviationRate) == 0x000000, "Member 'FDeviationShotInfo_e_ex306::FDeviationRate' has a wrong offset!");
static_assert(offsetof(FDeviationShotInfo_e_ex306, FMaxDeviationTargetVelocity) == 0x000004, "Member 'FDeviationShotInfo_e_ex306::FMaxDeviationTargetVelocity' has a wrong offset!");
static_assert(offsetof(FDeviationShotInfo_e_ex306, bNoVerticalDiviation) == 0x000008, "Member 'FDeviationShotInfo_e_ex306::bNoVerticalDiviation' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_EncloseFlareHvnParam
// 0x49E3 (0x49E3 - 0x0000)
struct alignas(0x49E3) FTresEnemy_e_ex773_EncloseFlareHvnParam final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_EncloseFlareHvnParam) == 0x0049E3, "Wrong alignment on FTresEnemy_e_ex773_EncloseFlareHvnParam");
static_assert(sizeof(FTresEnemy_e_ex773_EncloseFlareHvnParam) == 0x0049E3, "Wrong size on FTresEnemy_e_ex773_EncloseFlareHvnParam");

// ScriptStruct TresGame.TresDeathSentenceParam_e_ex357
// 0x0024 (0x0024 - 0x0000)
struct FTresDeathSentenceParam_e_ex357 final
{
public:
	float                                         StartCount;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CountSpeed;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableDispelArmorHP : 1;                          // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableDispelDamage : 1;                           // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DispelDamageNum;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DispelTotalAttackSrcPower;                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageCountDisableTime;                            // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DispelBitDieNum;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomShieldTime;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsEndNotDieMode : 1;                              // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableRevengeChain : 1;                           // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableInformation : 1;                            // 0x0020(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableSpecialGameoverHint : 1;                    // 0x0020(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresDeathSentenceParam_e_ex357) == 0x000004, "Wrong alignment on FTresDeathSentenceParam_e_ex357");
static_assert(sizeof(FTresDeathSentenceParam_e_ex357) == 0x000024, "Wrong size on FTresDeathSentenceParam_e_ex357");
static_assert(offsetof(FTresDeathSentenceParam_e_ex357, StartCount) == 0x000000, "Member 'FTresDeathSentenceParam_e_ex357::StartCount' has a wrong offset!");
static_assert(offsetof(FTresDeathSentenceParam_e_ex357, CountSpeed) == 0x000004, "Member 'FTresDeathSentenceParam_e_ex357::CountSpeed' has a wrong offset!");
static_assert(offsetof(FTresDeathSentenceParam_e_ex357, DispelDamageNum) == 0x00000C, "Member 'FTresDeathSentenceParam_e_ex357::DispelDamageNum' has a wrong offset!");
static_assert(offsetof(FTresDeathSentenceParam_e_ex357, DispelTotalAttackSrcPower) == 0x000010, "Member 'FTresDeathSentenceParam_e_ex357::DispelTotalAttackSrcPower' has a wrong offset!");
static_assert(offsetof(FTresDeathSentenceParam_e_ex357, DamageCountDisableTime) == 0x000014, "Member 'FTresDeathSentenceParam_e_ex357::DamageCountDisableTime' has a wrong offset!");
static_assert(offsetof(FTresDeathSentenceParam_e_ex357, DispelBitDieNum) == 0x000018, "Member 'FTresDeathSentenceParam_e_ex357::DispelBitDieNum' has a wrong offset!");
static_assert(offsetof(FTresDeathSentenceParam_e_ex357, BloomShieldTime) == 0x00001C, "Member 'FTresDeathSentenceParam_e_ex357::BloomShieldTime' has a wrong offset!");

// ScriptStruct TresGame.TresFieldGenerateAttackParam_e_ex357
// 0x11506310 (0x11506310 - 0x0000)
struct alignas(0x11506310) FTresFieldGenerateAttackParam_e_ex357 final
{
public:
	uint8                                         bIsFieldPenetrateAttackStart : 1;                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFieldGenerateAttackParam_e_ex357) == 0x11506310, "Wrong alignment on FTresFieldGenerateAttackParam_e_ex357");
static_assert(sizeof(FTresFieldGenerateAttackParam_e_ex357) == 0x11506310, "Wrong size on FTresFieldGenerateAttackParam_e_ex357");
static_assert(offsetof(FTresFieldGenerateAttackParam_e_ex357, StartTime) == 0x000004, "Member 'FTresFieldGenerateAttackParam_e_ex357::StartTime' has a wrong offset!");
static_assert(offsetof(FTresFieldGenerateAttackParam_e_ex357, IntervalTime) == 0x000008, "Member 'FTresFieldGenerateAttackParam_e_ex357::IntervalTime' has a wrong offset!");
static_assert(offsetof(FTresFieldGenerateAttackParam_e_ex357, LifeTime) == 0x00000C, "Member 'FTresFieldGenerateAttackParam_e_ex357::LifeTime' has a wrong offset!");

// ScriptStruct TresGame.TresGummiPlanSetData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGummiPlanSetData final : public FTableRowBase
{
public:
	ETresItemDefGumiShipBP                        M_GummiShipPlan;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefGumiShipBP                        M_TinyShipPlan[0x2];                               // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGummiPlanSetData) == 0x11413080, "Wrong alignment on FTresGummiPlanSetData");
static_assert(sizeof(FTresGummiPlanSetData) == 0x11413080, "Wrong size on FTresGummiPlanSetData");
static_assert(offsetof(FTresGummiPlanSetData, M_GummiShipPlan) == 0x000008, "Member 'FTresGummiPlanSetData::M_GummiShipPlan' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanSetData, M_TinyShipPlan) == 0x000009, "Member 'FTresGummiPlanSetData::M_TinyShipPlan' has a wrong offset!");

// ScriptStruct TresGame.TresGummiPlanDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGummiPlanDataTable final : public FTableRowBase
{
public:
	TArray<struct FTresGummiPlanSetData>          M_nGummiPlanSet;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresGummiPlanSetData>          M_nSpecialGummiPlanSet;                            // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiPlanDataTable) == 0x11413080, "Wrong alignment on FTresGummiPlanDataTable");
static_assert(sizeof(FTresGummiPlanDataTable) == 0x11413080, "Wrong size on FTresGummiPlanDataTable");
static_assert(offsetof(FTresGummiPlanDataTable, M_nGummiPlanSet) == 0x000008, "Member 'FTresGummiPlanDataTable::M_nGummiPlanSet' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanDataTable, M_nSpecialGummiPlanSet) == 0x000018, "Member 'FTresGummiPlanDataTable::M_nSpecialGummiPlanSet' has a wrong offset!");

// ScriptStruct TresGame.FieldGenerateMapParam_e_ex357
// 0x11506610 (0x11506610 - 0x0000)
struct alignas(0x11506610) FFieldGenerateMapParam_e_ex357 final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstAttackDelayTime;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFieldGenerateMapParam_e_ex357) == 0x11506610, "Wrong alignment on FFieldGenerateMapParam_e_ex357");
static_assert(sizeof(FFieldGenerateMapParam_e_ex357) == 0x11506610, "Wrong size on FFieldGenerateMapParam_e_ex357");
static_assert(offsetof(FFieldGenerateMapParam_e_ex357, DelayTime) == 0x000000, "Member 'FFieldGenerateMapParam_e_ex357::DelayTime' has a wrong offset!");
static_assert(offsetof(FFieldGenerateMapParam_e_ex357, OffsetAngle) == 0x000004, "Member 'FFieldGenerateMapParam_e_ex357::OffsetAngle' has a wrong offset!");
static_assert(offsetof(FFieldGenerateMapParam_e_ex357, Distance) == 0x000008, "Member 'FFieldGenerateMapParam_e_ex357::Distance' has a wrong offset!");
static_assert(offsetof(FFieldGenerateMapParam_e_ex357, FirstAttackDelayTime) == 0x00000C, "Member 'FFieldGenerateMapParam_e_ex357::FirstAttackDelayTime' has a wrong offset!");

// ScriptStruct TresGame.TresBitAttackParam_e_ex357
// 0x112F06E0 (0x112F06E0 - 0x0000)
struct FTresBitAttackParam_e_ex357 final
{
public:
	float                                         AttackIntervalTime;                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisableAttackShotNum;                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableAttackTime;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackToAllAttackIntervalTime;                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllAttackIntervalTime;                             // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllAttackShotIntervalTime;                         // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllAttackMoveStartDelayTime;                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllAttackMoveTime;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         AllAttackTargetRadiusRange;                        // 0x0020(0x112F06E0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         AllAttackTargetHeightRange;                        // 0x0028(0x112F06E0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBitAttackParam_e_ex357) == 0x112F06E0, "Wrong alignment on FTresBitAttackParam_e_ex357");
static_assert(sizeof(FTresBitAttackParam_e_ex357) == 0x112F06E0, "Wrong size on FTresBitAttackParam_e_ex357");
static_assert(offsetof(FTresBitAttackParam_e_ex357, AttackIntervalTime) == 0x000000, "Member 'FTresBitAttackParam_e_ex357::AttackIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresBitAttackParam_e_ex357, DisableAttackShotNum) == 0x000004, "Member 'FTresBitAttackParam_e_ex357::DisableAttackShotNum' has a wrong offset!");
static_assert(offsetof(FTresBitAttackParam_e_ex357, DisableAttackTime) == 0x000008, "Member 'FTresBitAttackParam_e_ex357::DisableAttackTime' has a wrong offset!");
static_assert(offsetof(FTresBitAttackParam_e_ex357, AttackToAllAttackIntervalTime) == 0x00000C, "Member 'FTresBitAttackParam_e_ex357::AttackToAllAttackIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresBitAttackParam_e_ex357, AllAttackIntervalTime) == 0x000010, "Member 'FTresBitAttackParam_e_ex357::AllAttackIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresBitAttackParam_e_ex357, AllAttackShotIntervalTime) == 0x000014, "Member 'FTresBitAttackParam_e_ex357::AllAttackShotIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresBitAttackParam_e_ex357, AllAttackMoveStartDelayTime) == 0x000018, "Member 'FTresBitAttackParam_e_ex357::AllAttackMoveStartDelayTime' has a wrong offset!");
static_assert(offsetof(FTresBitAttackParam_e_ex357, AllAttackMoveTime) == 0x00001C, "Member 'FTresBitAttackParam_e_ex357::AllAttackMoveTime' has a wrong offset!");
static_assert(offsetof(FTresBitAttackParam_e_ex357, AllAttackTargetRadiusRange) == 0x000020, "Member 'FTresBitAttackParam_e_ex357::AllAttackTargetRadiusRange' has a wrong offset!");
static_assert(offsetof(FTresBitAttackParam_e_ex357, AllAttackTargetHeightRange) == 0x000028, "Member 'FTresBitAttackParam_e_ex357::AllAttackTargetHeightRange' has a wrong offset!");

// ScriptStruct TresGame.TresBitGenerateParam_e_ex357
// 0x112F06E0 (0x112F06E0 - 0x0000)
struct FTresBitGenerateParam_e_ex357 final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNum;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddNum;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresEnemyBitGenerateLocation_e_ex357         AppearLocationType;                                // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearDistance;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         AppearHeightRange;                                 // 0x0014(0x112F06E0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBitGenerateParam_e_ex357) == 0x112F06E0, "Wrong alignment on FTresBitGenerateParam_e_ex357");
static_assert(sizeof(FTresBitGenerateParam_e_ex357) == 0x112F06E0, "Wrong size on FTresBitGenerateParam_e_ex357");
static_assert(offsetof(FTresBitGenerateParam_e_ex357, Num) == 0x000000, "Member 'FTresBitGenerateParam_e_ex357::Num' has a wrong offset!");
static_assert(offsetof(FTresBitGenerateParam_e_ex357, MaxNum) == 0x000004, "Member 'FTresBitGenerateParam_e_ex357::MaxNum' has a wrong offset!");
static_assert(offsetof(FTresBitGenerateParam_e_ex357, AddNum) == 0x000008, "Member 'FTresBitGenerateParam_e_ex357::AddNum' has a wrong offset!");
static_assert(offsetof(FTresBitGenerateParam_e_ex357, AppearLocationType) == 0x00000C, "Member 'FTresBitGenerateParam_e_ex357::AppearLocationType' has a wrong offset!");
static_assert(offsetof(FTresBitGenerateParam_e_ex357, AppearDistance) == 0x000010, "Member 'FTresBitGenerateParam_e_ex357::AppearDistance' has a wrong offset!");
static_assert(offsetof(FTresBitGenerateParam_e_ex357, AppearHeightRange) == 0x000014, "Member 'FTresBitGenerateParam_e_ex357::AppearHeightRange' has a wrong offset!");

// ScriptStruct TresGame.TresNaruikazuchiProjectileGenerateParam
// 0x11507740 (0x11507740 - 0x0000)
struct alignas(0x11507740) FTresNaruikazuchiProjectileGenerateParam final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalDistance;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAngle;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresNaruikazuchiProjectileGenerateParam) == 0x11507740, "Wrong alignment on FTresNaruikazuchiProjectileGenerateParam");
static_assert(sizeof(FTresNaruikazuchiProjectileGenerateParam) == 0x11507740, "Wrong size on FTresNaruikazuchiProjectileGenerateParam");
static_assert(offsetof(FTresNaruikazuchiProjectileGenerateParam, Range) == 0x000000, "Member 'FTresNaruikazuchiProjectileGenerateParam::Range' has a wrong offset!");
static_assert(offsetof(FTresNaruikazuchiProjectileGenerateParam, IntervalDistance) == 0x000004, "Member 'FTresNaruikazuchiProjectileGenerateParam::IntervalDistance' has a wrong offset!");
static_assert(offsetof(FTresNaruikazuchiProjectileGenerateParam, IntervalTime) == 0x000008, "Member 'FTresNaruikazuchiProjectileGenerateParam::IntervalTime' has a wrong offset!");
static_assert(offsetof(FTresNaruikazuchiProjectileGenerateParam, HomingAngle) == 0x00000C, "Member 'FTresNaruikazuchiProjectileGenerateParam::HomingAngle' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEnvQueryBindParamFloat_ex358
// 0x11507A30 (0x11507A30 - 0x0000)
struct alignas(0x11507A30) FTresEnemyEnvQueryBindParamFloat_ex358 final
{
public:
	class FName                                   BindName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEnvQueryBindParamFloat_ex358) == 0x11507A30, "Wrong alignment on FTresEnemyEnvQueryBindParamFloat_ex358");
static_assert(sizeof(FTresEnemyEnvQueryBindParamFloat_ex358) == 0x11507A30, "Wrong size on FTresEnemyEnvQueryBindParamFloat_ex358");
static_assert(offsetof(FTresEnemyEnvQueryBindParamFloat_ex358, BindName) == 0x000000, "Member 'FTresEnemyEnvQueryBindParamFloat_ex358::BindName' has a wrong offset!");
static_assert(offsetof(FTresEnemyEnvQueryBindParamFloat_ex358, Value) == 0x000008, "Member 'FTresEnemyEnvQueryBindParamFloat_ex358::Value' has a wrong offset!");

// ScriptStruct TresGame.TresBattleAreaCameraData_e_ex761
// 0x0001 (0x0001 - 0x0000)
struct FTresBattleAreaCameraData_e_ex761 final
{
public:
	ETresEnemy_e_ex761_BattleAreaB_Camera         CameraTypeAtBattleAreaB;                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBattleAreaCameraData_e_ex761) == 0x000001, "Wrong alignment on FTresBattleAreaCameraData_e_ex761");
static_assert(sizeof(FTresBattleAreaCameraData_e_ex761) == 0x000001, "Wrong size on FTresBattleAreaCameraData_e_ex761");
static_assert(offsetof(FTresBattleAreaCameraData_e_ex761, CameraTypeAtBattleAreaB) == 0x000000, "Member 'FTresBattleAreaCameraData_e_ex761::CameraTypeAtBattleAreaB' has a wrong offset!");

// ScriptStruct TresGame.TresEquipWeaponSlotWork
// 0x0030 (0x0030 - 0x0000)
struct FTresEquipWeaponSlotWork final
{
public:
	class UTresEquipDataBase*                     M_pAsset;                                          // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEquipWeaponSlotWork) == 0x000008, "Wrong alignment on FTresEquipWeaponSlotWork");
static_assert(sizeof(FTresEquipWeaponSlotWork) == 0x000030, "Wrong size on FTresEquipWeaponSlotWork");
static_assert(offsetof(FTresEquipWeaponSlotWork, M_pAsset) == 0x000000, "Member 'FTresEquipWeaponSlotWork::M_pAsset' has a wrong offset!");

// ScriptStruct TresGame.TresSplineTransformArray
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresSplineTransformArray final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x000C(0x112E9AF0)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSplineTransformArray) == 0x112E9AF0, "Wrong alignment on FTresSplineTransformArray");
static_assert(sizeof(FTresSplineTransformArray) == 0x112E9AF0, "Wrong size on FTresSplineTransformArray");
static_assert(offsetof(FTresSplineTransformArray, Location) == 0x000000, "Member 'FTresSplineTransformArray::Location' has a wrong offset!");
static_assert(offsetof(FTresSplineTransformArray, Rotator) == 0x00000C, "Member 'FTresSplineTransformArray::Rotator' has a wrong offset!");

// ScriptStruct TresGame.TresGummiShipAbility
// 0x0016 (0x0016 - 0x0000)
struct FTresGummiShipAbility final
{
public:
	uint8                                         M_nAbilityID01;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID02;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID03;                                    // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID04;                                    // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID05;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID06;                                    // 0x0005(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID07;                                    // 0x0006(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID08;                                    // 0x0007(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID09;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID10;                                    // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID11;                                    // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID12;                                    // 0x000B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID13;                                    // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID14;                                    // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID15;                                    // 0x000E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID16;                                    // 0x000F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID17;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID18;                                    // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID19;                                    // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID20;                                    // 0x0013(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID21;                                    // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nAbilityID22;                                    // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiShipAbility) == 0x000001, "Wrong alignment on FTresGummiShipAbility");
static_assert(sizeof(FTresGummiShipAbility) == 0x000016, "Wrong size on FTresGummiShipAbility");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID01) == 0x000000, "Member 'FTresGummiShipAbility::M_nAbilityID01' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID02) == 0x000001, "Member 'FTresGummiShipAbility::M_nAbilityID02' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID03) == 0x000002, "Member 'FTresGummiShipAbility::M_nAbilityID03' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID04) == 0x000003, "Member 'FTresGummiShipAbility::M_nAbilityID04' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID05) == 0x000004, "Member 'FTresGummiShipAbility::M_nAbilityID05' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID06) == 0x000005, "Member 'FTresGummiShipAbility::M_nAbilityID06' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID07) == 0x000006, "Member 'FTresGummiShipAbility::M_nAbilityID07' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID08) == 0x000007, "Member 'FTresGummiShipAbility::M_nAbilityID08' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID09) == 0x000008, "Member 'FTresGummiShipAbility::M_nAbilityID09' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID10) == 0x000009, "Member 'FTresGummiShipAbility::M_nAbilityID10' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID11) == 0x00000A, "Member 'FTresGummiShipAbility::M_nAbilityID11' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID12) == 0x00000B, "Member 'FTresGummiShipAbility::M_nAbilityID12' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID13) == 0x00000C, "Member 'FTresGummiShipAbility::M_nAbilityID13' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID14) == 0x00000D, "Member 'FTresGummiShipAbility::M_nAbilityID14' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID15) == 0x00000E, "Member 'FTresGummiShipAbility::M_nAbilityID15' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID16) == 0x00000F, "Member 'FTresGummiShipAbility::M_nAbilityID16' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID17) == 0x000010, "Member 'FTresGummiShipAbility::M_nAbilityID17' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID18) == 0x000011, "Member 'FTresGummiShipAbility::M_nAbilityID18' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID19) == 0x000012, "Member 'FTresGummiShipAbility::M_nAbilityID19' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID20) == 0x000013, "Member 'FTresGummiShipAbility::M_nAbilityID20' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID21) == 0x000014, "Member 'FTresGummiShipAbility::M_nAbilityID21' has a wrong offset!");
static_assert(offsetof(FTresGummiShipAbility, M_nAbilityID22) == 0x000015, "Member 'FTresGummiShipAbility::M_nAbilityID22' has a wrong offset!");

// ScriptStruct TresGame.TresPhotoHologramDebugMenu
// 0x00F0 (0x00F0 - 0x0000)
struct FTresPhotoHologramDebugMenu final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	class UTresUIP_MobileAlbum*                   M_pAlbum;                                          // 0x00E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPhotoHologramDebugMenu) == 0x000008, "Wrong alignment on FTresPhotoHologramDebugMenu");
static_assert(sizeof(FTresPhotoHologramDebugMenu) == 0x0000F0, "Wrong size on FTresPhotoHologramDebugMenu");
static_assert(offsetof(FTresPhotoHologramDebugMenu, M_pAlbum) == 0x0000E0, "Member 'FTresPhotoHologramDebugMenu::M_pAlbum' has a wrong offset!");

// ScriptStruct TresGame.TresFieldVoiceAnimData
// 0x0038 (0x0038 - 0x0000)
struct FTresFieldVoiceAnimData final
{
public:
	class FString                                 AnimName;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimAsset;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForcePlay;                                       // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipAnimName;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        SkipAnimAsset;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFieldVoiceAnimData) == 0x000008, "Wrong alignment on FTresFieldVoiceAnimData");
static_assert(sizeof(FTresFieldVoiceAnimData) == 0x000038, "Wrong size on FTresFieldVoiceAnimData");
static_assert(offsetof(FTresFieldVoiceAnimData, AnimName) == 0x000000, "Member 'FTresFieldVoiceAnimData::AnimName' has a wrong offset!");
static_assert(offsetof(FTresFieldVoiceAnimData, AnimAsset) == 0x000010, "Member 'FTresFieldVoiceAnimData::AnimAsset' has a wrong offset!");
static_assert(offsetof(FTresFieldVoiceAnimData, IsLoop) == 0x000018, "Member 'FTresFieldVoiceAnimData::IsLoop' has a wrong offset!");
static_assert(offsetof(FTresFieldVoiceAnimData, IsForcePlay) == 0x000019, "Member 'FTresFieldVoiceAnimData::IsForcePlay' has a wrong offset!");
static_assert(offsetof(FTresFieldVoiceAnimData, SkipAnimName) == 0x000020, "Member 'FTresFieldVoiceAnimData::SkipAnimName' has a wrong offset!");
static_assert(offsetof(FTresFieldVoiceAnimData, SkipAnimAsset) == 0x000030, "Member 'FTresFieldVoiceAnimData::SkipAnimAsset' has a wrong offset!");

// ScriptStruct TresGame.TresFieldVoiceTextData
// 0x11508930 (0x11508930 - 0x0000)
struct alignas(0x11508930) FTresFieldVoiceTextData final
{
public:
	class FString                                 M_NameSpaceAndKey;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Delay;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Duration;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFieldVoiceTextData) == 0x11508930, "Wrong alignment on FTresFieldVoiceTextData");
static_assert(sizeof(FTresFieldVoiceTextData) == 0x11508930, "Wrong size on FTresFieldVoiceTextData");
static_assert(offsetof(FTresFieldVoiceTextData, M_NameSpaceAndKey) == 0x000000, "Member 'FTresFieldVoiceTextData::M_NameSpaceAndKey' has a wrong offset!");
static_assert(offsetof(FTresFieldVoiceTextData, M_Delay) == 0x000010, "Member 'FTresFieldVoiceTextData::M_Delay' has a wrong offset!");
static_assert(offsetof(FTresFieldVoiceTextData, M_Duration) == 0x000014, "Member 'FTresFieldVoiceTextData::M_Duration' has a wrong offset!");

// ScriptStruct TresGame.TresFoodstuffDropDataTable
// 0xF6270 (0x115092F0 - 0x11413080)
struct alignas(0x115092F0) FTresFoodstuffDropDataTable final : public FTableRowBase
{
public:
	int8                                          M_GenRate;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresFoodstuffDropperID                       M_BPType;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFoodstuff                         M_Drop1ItemID;                                     // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop1Num;                                        // 0x000B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop1Rate;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop1Level;                                      // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFoodstuff                         M_Drop2ItemID;                                     // 0x000E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop2Num;                                        // 0x000F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop2Rate;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop2Level;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFoodstuff                         M_Drop3ItemID;                                     // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop3Num;                                        // 0x0013(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop3Rate;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop3Level;                                      // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFoodstuff                         M_Drop4ItemID;                                     // 0x0016(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop4Num;                                        // 0x0017(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop4Rate;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop4Level;                                      // 0x0019(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFoodstuff                         M_Drop5ItemID;                                     // 0x001A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop5Num;                                        // 0x001B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop5Rate;                                       // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop5Level;                                      // 0x001D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFoodstuff                         M_Drop6ItemID;                                     // 0x001E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop6Num;                                        // 0x001F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop6Rate;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop6Level;                                      // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFoodstuff                         M_Drop7ItemID;                                     // 0x0022(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop7Num;                                        // 0x0023(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop7Rate;                                       // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop7Level;                                      // 0x0025(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFoodstuff                         M_Drop8ItemID;                                     // 0x0026(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop8Num;                                        // 0x0027(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop8Rate;                                       // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_Drop8Level;                                      // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresFoodstuffDropDataTable) == 0x115092F0, "Wrong alignment on FTresFoodstuffDropDataTable");
static_assert(sizeof(FTresFoodstuffDropDataTable) == 0x115092F0, "Wrong size on FTresFoodstuffDropDataTable");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_GenRate) == 0x000008, "Member 'FTresFoodstuffDropDataTable::M_GenRate' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_BPType) == 0x000009, "Member 'FTresFoodstuffDropDataTable::M_BPType' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop1ItemID) == 0x00000A, "Member 'FTresFoodstuffDropDataTable::M_Drop1ItemID' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop1Num) == 0x00000B, "Member 'FTresFoodstuffDropDataTable::M_Drop1Num' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop1Rate) == 0x00000C, "Member 'FTresFoodstuffDropDataTable::M_Drop1Rate' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop1Level) == 0x00000D, "Member 'FTresFoodstuffDropDataTable::M_Drop1Level' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop2ItemID) == 0x00000E, "Member 'FTresFoodstuffDropDataTable::M_Drop2ItemID' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop2Num) == 0x00000F, "Member 'FTresFoodstuffDropDataTable::M_Drop2Num' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop2Rate) == 0x000010, "Member 'FTresFoodstuffDropDataTable::M_Drop2Rate' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop2Level) == 0x000011, "Member 'FTresFoodstuffDropDataTable::M_Drop2Level' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop3ItemID) == 0x000012, "Member 'FTresFoodstuffDropDataTable::M_Drop3ItemID' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop3Num) == 0x000013, "Member 'FTresFoodstuffDropDataTable::M_Drop3Num' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop3Rate) == 0x000014, "Member 'FTresFoodstuffDropDataTable::M_Drop3Rate' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop3Level) == 0x000015, "Member 'FTresFoodstuffDropDataTable::M_Drop3Level' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop4ItemID) == 0x000016, "Member 'FTresFoodstuffDropDataTable::M_Drop4ItemID' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop4Num) == 0x000017, "Member 'FTresFoodstuffDropDataTable::M_Drop4Num' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop4Rate) == 0x000018, "Member 'FTresFoodstuffDropDataTable::M_Drop4Rate' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop4Level) == 0x000019, "Member 'FTresFoodstuffDropDataTable::M_Drop4Level' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop5ItemID) == 0x00001A, "Member 'FTresFoodstuffDropDataTable::M_Drop5ItemID' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop5Num) == 0x00001B, "Member 'FTresFoodstuffDropDataTable::M_Drop5Num' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop5Rate) == 0x00001C, "Member 'FTresFoodstuffDropDataTable::M_Drop5Rate' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop5Level) == 0x00001D, "Member 'FTresFoodstuffDropDataTable::M_Drop5Level' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop6ItemID) == 0x00001E, "Member 'FTresFoodstuffDropDataTable::M_Drop6ItemID' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop6Num) == 0x00001F, "Member 'FTresFoodstuffDropDataTable::M_Drop6Num' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop6Rate) == 0x000020, "Member 'FTresFoodstuffDropDataTable::M_Drop6Rate' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop6Level) == 0x000021, "Member 'FTresFoodstuffDropDataTable::M_Drop6Level' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop7ItemID) == 0x000022, "Member 'FTresFoodstuffDropDataTable::M_Drop7ItemID' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop7Num) == 0x000023, "Member 'FTresFoodstuffDropDataTable::M_Drop7Num' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop7Rate) == 0x000024, "Member 'FTresFoodstuffDropDataTable::M_Drop7Rate' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop7Level) == 0x000025, "Member 'FTresFoodstuffDropDataTable::M_Drop7Level' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop8ItemID) == 0x000026, "Member 'FTresFoodstuffDropDataTable::M_Drop8ItemID' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop8Num) == 0x000027, "Member 'FTresFoodstuffDropDataTable::M_Drop8Num' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop8Rate) == 0x000028, "Member 'FTresFoodstuffDropDataTable::M_Drop8Rate' has a wrong offset!");
static_assert(offsetof(FTresFoodstuffDropDataTable, M_Drop8Level) == 0x000029, "Member 'FTresFoodstuffDropDataTable::M_Drop8Level' has a wrong offset!");

// ScriptStruct TresGame.TresFormAbilitySetUnit
// 0x0020 (0x0020 - 0x0000)
struct FTresFormAbilitySetUnit final
{
public:
	TArray<ETresAbilityKind>                      M_Ability;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresTextAbilityKind>                  M_TextAbility;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFormAbilitySetUnit) == 0x000008, "Wrong alignment on FTresFormAbilitySetUnit");
static_assert(sizeof(FTresFormAbilitySetUnit) == 0x000020, "Wrong size on FTresFormAbilitySetUnit");
static_assert(offsetof(FTresFormAbilitySetUnit, M_Ability) == 0x000000, "Member 'FTresFormAbilitySetUnit::M_Ability' has a wrong offset!");
static_assert(offsetof(FTresFormAbilitySetUnit, M_TextAbility) == 0x000010, "Member 'FTresFormAbilitySetUnit::M_TextAbility' has a wrong offset!");

// ScriptStruct TresGame.TresFriendEvaluationDataTable
// 0xF80E0 (0x1150B160 - 0x11413080)
struct alignas(0x1150B160) FTresFriendEvaluationDataTable final : public FTableRowBase
{
public:
	ETresCommandKind                              M_CommandKind;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_BadStatEvaluation;                               // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_HitPointEvaluation;                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MagicPointEvaluation;                            // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_FocusPointEvaluation;                            // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AllCharaEvaluation;                              // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_SpecialCure : 1;                                 // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_RecoveryPoint;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFriendEvaluationDataTable) == 0x1150B160, "Wrong alignment on FTresFriendEvaluationDataTable");
static_assert(sizeof(FTresFriendEvaluationDataTable) == 0x1150B160, "Wrong size on FTresFriendEvaluationDataTable");
static_assert(offsetof(FTresFriendEvaluationDataTable, M_CommandKind) == 0x000008, "Member 'FTresFriendEvaluationDataTable::M_CommandKind' has a wrong offset!");
static_assert(offsetof(FTresFriendEvaluationDataTable, M_BadStatEvaluation) == 0x00000C, "Member 'FTresFriendEvaluationDataTable::M_BadStatEvaluation' has a wrong offset!");
static_assert(offsetof(FTresFriendEvaluationDataTable, M_HitPointEvaluation) == 0x000010, "Member 'FTresFriendEvaluationDataTable::M_HitPointEvaluation' has a wrong offset!");
static_assert(offsetof(FTresFriendEvaluationDataTable, M_MagicPointEvaluation) == 0x000014, "Member 'FTresFriendEvaluationDataTable::M_MagicPointEvaluation' has a wrong offset!");
static_assert(offsetof(FTresFriendEvaluationDataTable, M_FocusPointEvaluation) == 0x000018, "Member 'FTresFriendEvaluationDataTable::M_FocusPointEvaluation' has a wrong offset!");
static_assert(offsetof(FTresFriendEvaluationDataTable, M_AllCharaEvaluation) == 0x00001C, "Member 'FTresFriendEvaluationDataTable::M_AllCharaEvaluation' has a wrong offset!");
static_assert(offsetof(FTresFriendEvaluationDataTable, M_RecoveryPoint) == 0x000024, "Member 'FTresFriendEvaluationDataTable::M_RecoveryPoint' has a wrong offset!");

// ScriptStruct TresGame.TresFriendHomePosDataTable
// 0xF8630 (0x1150B6B0 - 0x11413080)
struct alignas(0x1150B6B0) FTresFriendHomePosDataTable final : public FTableRowBase
{
public:
	float                                         M_BaseLen;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BaseRot;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MiddleLen;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MiddleRot;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LargeLen;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LargeRot;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFriendHomePosDataTable) == 0x1150B6B0, "Wrong alignment on FTresFriendHomePosDataTable");
static_assert(sizeof(FTresFriendHomePosDataTable) == 0x1150B6B0, "Wrong size on FTresFriendHomePosDataTable");
static_assert(offsetof(FTresFriendHomePosDataTable, M_BaseLen) == 0x000008, "Member 'FTresFriendHomePosDataTable::M_BaseLen' has a wrong offset!");
static_assert(offsetof(FTresFriendHomePosDataTable, M_BaseRot) == 0x00000C, "Member 'FTresFriendHomePosDataTable::M_BaseRot' has a wrong offset!");
static_assert(offsetof(FTresFriendHomePosDataTable, M_MiddleLen) == 0x000010, "Member 'FTresFriendHomePosDataTable::M_MiddleLen' has a wrong offset!");
static_assert(offsetof(FTresFriendHomePosDataTable, M_MiddleRot) == 0x000014, "Member 'FTresFriendHomePosDataTable::M_MiddleRot' has a wrong offset!");
static_assert(offsetof(FTresFriendHomePosDataTable, M_LargeLen) == 0x000018, "Member 'FTresFriendHomePosDataTable::M_LargeLen' has a wrong offset!");
static_assert(offsetof(FTresFriendHomePosDataTable, M_LargeRot) == 0x00001C, "Member 'FTresFriendHomePosDataTable::M_LargeRot' has a wrong offset!");

// ScriptStruct TresGame.TresPhotoHologramWeaponTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresPhotoHologramWeaponTable final : public FTableRowBase
{
public:
	class FString                                 M_Comment;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_Index;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefWeapon                            M_WeaponItemID;                                    // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_WeaponNameNamespaceKey;                          // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                M_IconAsset;                                       // 0x0030(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_UIPriority;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_MapSetId;                                        // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NewMarkIndex;                                    // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTresPhotoHologramWeaponAsset> M_WeaponAsset;                                     // 0x0068(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTresPhotoHologramWeaponAsset>> M_WeaponAssetList;                                 // 0x0088(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPhotoHologramWeaponTable) == 0x11413080, "Wrong alignment on FTresPhotoHologramWeaponTable");
static_assert(sizeof(FTresPhotoHologramWeaponTable) == 0x11413080, "Wrong size on FTresPhotoHologramWeaponTable");
static_assert(offsetof(FTresPhotoHologramWeaponTable, M_Comment) == 0x000008, "Member 'FTresPhotoHologramWeaponTable::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramWeaponTable, M_Index) == 0x000018, "Member 'FTresPhotoHologramWeaponTable::M_Index' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramWeaponTable, M_WeaponItemID) == 0x00001C, "Member 'FTresPhotoHologramWeaponTable::M_WeaponItemID' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramWeaponTable, M_WeaponNameNamespaceKey) == 0x000020, "Member 'FTresPhotoHologramWeaponTable::M_WeaponNameNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramWeaponTable, M_IconAsset) == 0x000030, "Member 'FTresPhotoHologramWeaponTable::M_IconAsset' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramWeaponTable, M_UIPriority) == 0x000050, "Member 'FTresPhotoHologramWeaponTable::M_UIPriority' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramWeaponTable, M_MapSetId) == 0x000058, "Member 'FTresPhotoHologramWeaponTable::M_MapSetId' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramWeaponTable, M_NewMarkIndex) == 0x000060, "Member 'FTresPhotoHologramWeaponTable::M_NewMarkIndex' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramWeaponTable, M_WeaponAsset) == 0x000068, "Member 'FTresPhotoHologramWeaponTable::M_WeaponAsset' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramWeaponTable, M_WeaponAssetList) == 0x000088, "Member 'FTresPhotoHologramWeaponTable::M_WeaponAssetList' has a wrong offset!");

// ScriptStruct TresGame.TresRemySprinklePepperDataTable
// 0x0000 (0x11572B90 - 0x11572B90)
struct FTresRemySprinklePepperDataTable final : public FTresRemyCookingGameDataTableBase
{
};
static_assert(alignof(FTresRemySprinklePepperDataTable) == 0x11572B90, "Wrong alignment on FTresRemySprinklePepperDataTable");
static_assert(sizeof(FTresRemySprinklePepperDataTable) == 0x11572B90, "Wrong size on FTresRemySprinklePepperDataTable");

// ScriptStruct TresGame.TresFriendLinkPawnCallMeteorData
// 0x1150C060 (0x1150C060 - 0x0000)
struct alignas(0x1150C060) FTresFriendLinkPawnCallMeteorData final
{
public:
	float                                         M_fBaseYaw;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStartLength;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTargetLength;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStartTimer;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInitialSpeed;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x1C];                                      // 0x0014(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresFriendLinkPawnCallMeteorData) == 0x1150C060, "Wrong alignment on FTresFriendLinkPawnCallMeteorData");
static_assert(sizeof(FTresFriendLinkPawnCallMeteorData) == 0x1150C060, "Wrong size on FTresFriendLinkPawnCallMeteorData");
static_assert(offsetof(FTresFriendLinkPawnCallMeteorData, M_fBaseYaw) == 0x000000, "Member 'FTresFriendLinkPawnCallMeteorData::M_fBaseYaw' has a wrong offset!");
static_assert(offsetof(FTresFriendLinkPawnCallMeteorData, M_fStartLength) == 0x000004, "Member 'FTresFriendLinkPawnCallMeteorData::M_fStartLength' has a wrong offset!");
static_assert(offsetof(FTresFriendLinkPawnCallMeteorData, M_fTargetLength) == 0x000008, "Member 'FTresFriendLinkPawnCallMeteorData::M_fTargetLength' has a wrong offset!");
static_assert(offsetof(FTresFriendLinkPawnCallMeteorData, M_fStartTimer) == 0x00000C, "Member 'FTresFriendLinkPawnCallMeteorData::M_fStartTimer' has a wrong offset!");
static_assert(offsetof(FTresFriendLinkPawnCallMeteorData, M_fInitialSpeed) == 0x000010, "Member 'FTresFriendLinkPawnCallMeteorData::M_fInitialSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresFriendLinkPawnFlareForceData
// 0x1150C3E0 (0x1150C3E0 - 0x0000)
struct alignas(0x1150C3E0) FTresFriendLinkPawnFlareForceData final
{
public:
	float                                         M_fAppearYaw;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAppearTimer;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fFireTimer;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x44];                                       // 0x000C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresFriendLinkPawnFlareForceData) == 0x1150C3E0, "Wrong alignment on FTresFriendLinkPawnFlareForceData");
static_assert(sizeof(FTresFriendLinkPawnFlareForceData) == 0x1150C3E0, "Wrong size on FTresFriendLinkPawnFlareForceData");
static_assert(offsetof(FTresFriendLinkPawnFlareForceData, M_fAppearYaw) == 0x000000, "Member 'FTresFriendLinkPawnFlareForceData::M_fAppearYaw' has a wrong offset!");
static_assert(offsetof(FTresFriendLinkPawnFlareForceData, M_fAppearTimer) == 0x000004, "Member 'FTresFriendLinkPawnFlareForceData::M_fAppearTimer' has a wrong offset!");
static_assert(offsetof(FTresFriendLinkPawnFlareForceData, M_fFireTimer) == 0x000008, "Member 'FTresFriendLinkPawnFlareForceData::M_fFireTimer' has a wrong offset!");

// ScriptStruct TresGame.TresLSIScoreEntryWins
// 0x0010 (0x0010 - 0x0000)
struct FTresLSIScoreEntryWins final
{
public:
	int32                                         Wins;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLSIScoreEntryWins) == 0x000004, "Wrong alignment on FTresLSIScoreEntryWins");
static_assert(sizeof(FTresLSIScoreEntryWins) == 0x000010, "Wrong size on FTresLSIScoreEntryWins");
static_assert(offsetof(FTresLSIScoreEntryWins, Wins) == 0x000000, "Member 'FTresLSIScoreEntryWins::Wins' has a wrong offset!");

// ScriptStruct TresGame.TresFRJackSpinBombParam
// 0x1150C640 (0x1150C640 - 0x0000)
struct alignas(0x1150C640) FTresFRJackSpinBombParam final
{
public:
	float                                         M_fBombRotate;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fBombLength;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fBombHeight;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStruckBombSpeed;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStruckBombGravityScale;                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStruckBombHeight;                               // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFRJackSpinBombParam) == 0x1150C640, "Wrong alignment on FTresFRJackSpinBombParam");
static_assert(sizeof(FTresFRJackSpinBombParam) == 0x1150C640, "Wrong size on FTresFRJackSpinBombParam");
static_assert(offsetof(FTresFRJackSpinBombParam, M_fBombRotate) == 0x000000, "Member 'FTresFRJackSpinBombParam::M_fBombRotate' has a wrong offset!");
static_assert(offsetof(FTresFRJackSpinBombParam, M_fBombLength) == 0x000004, "Member 'FTresFRJackSpinBombParam::M_fBombLength' has a wrong offset!");
static_assert(offsetof(FTresFRJackSpinBombParam, M_fBombHeight) == 0x000008, "Member 'FTresFRJackSpinBombParam::M_fBombHeight' has a wrong offset!");
static_assert(offsetof(FTresFRJackSpinBombParam, M_fStruckBombSpeed) == 0x00000C, "Member 'FTresFRJackSpinBombParam::M_fStruckBombSpeed' has a wrong offset!");
static_assert(offsetof(FTresFRJackSpinBombParam, M_fStruckBombGravityScale) == 0x000010, "Member 'FTresFRJackSpinBombParam::M_fStruckBombGravityScale' has a wrong offset!");
static_assert(offsetof(FTresFRJackSpinBombParam, M_fStruckBombHeight) == 0x000014, "Member 'FTresFRJackSpinBombParam::M_fStruckBombHeight' has a wrong offset!");

// ScriptStruct TresGame.TresGamePlayWorldSwitcher
// 0x1150D700 (0x1150D700 - 0x0000)
struct alignas(0x1150D700) FTresGamePlayWorldSwitcher final
{
public:
	class UTresGameInstance*                      M_GameInstance;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESQEX_Invoker                                 M_Invoker;                                         // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          M_FromMenu;                                        // 0x0009(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          M_Paused;                                          // 0x000A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_BattleLevel;                                     // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameModeBase*                          M_GameMode;                                        // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APlayerController*                      M_PlayerController;                                // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APawn*                                  M_PlayerPawn;                                      // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 M_ViewTarget;                                      // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APlayerStart*                           M_PlayerStartForTeleport;                          // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ULevel*>                         M_Levels;                                          // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class FName>                           M_ActiveLevels;                                    // 0x0048(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UModelComponent*>                M_ModelComponents;                                 // 0x0058(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         M_Actors;                                          // 0x0068(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class APostProcessVolume*>             M_PostProcessVolumes;                              // 0x0078(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UTresGimmickComponentBase*>      M_Gimmicks;                                        // 0x0088(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class ATresKHShaderController*                M_pKHSBackup;                                      // 0x0098(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   M_PrepareName;                                     // 0x00A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   M_StartName;                                       // 0x00A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGamePlayWorldSwitcher) == 0x1150D700, "Wrong alignment on FTresGamePlayWorldSwitcher");
static_assert(sizeof(FTresGamePlayWorldSwitcher) == 0x1150D700, "Wrong size on FTresGamePlayWorldSwitcher");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_GameInstance) == 0x000000, "Member 'FTresGamePlayWorldSwitcher::M_GameInstance' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_Invoker) == 0x000008, "Member 'FTresGamePlayWorldSwitcher::M_Invoker' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_FromMenu) == 0x000009, "Member 'FTresGamePlayWorldSwitcher::M_FromMenu' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_Paused) == 0x00000A, "Member 'FTresGamePlayWorldSwitcher::M_Paused' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_BattleLevel) == 0x00000C, "Member 'FTresGamePlayWorldSwitcher::M_BattleLevel' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_GameMode) == 0x000010, "Member 'FTresGamePlayWorldSwitcher::M_GameMode' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_PlayerController) == 0x000018, "Member 'FTresGamePlayWorldSwitcher::M_PlayerController' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_PlayerPawn) == 0x000020, "Member 'FTresGamePlayWorldSwitcher::M_PlayerPawn' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_ViewTarget) == 0x000028, "Member 'FTresGamePlayWorldSwitcher::M_ViewTarget' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_PlayerStartForTeleport) == 0x000030, "Member 'FTresGamePlayWorldSwitcher::M_PlayerStartForTeleport' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_Levels) == 0x000038, "Member 'FTresGamePlayWorldSwitcher::M_Levels' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_ActiveLevels) == 0x000048, "Member 'FTresGamePlayWorldSwitcher::M_ActiveLevels' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_ModelComponents) == 0x000058, "Member 'FTresGamePlayWorldSwitcher::M_ModelComponents' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_Actors) == 0x000068, "Member 'FTresGamePlayWorldSwitcher::M_Actors' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_PostProcessVolumes) == 0x000078, "Member 'FTresGamePlayWorldSwitcher::M_PostProcessVolumes' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_Gimmicks) == 0x000088, "Member 'FTresGamePlayWorldSwitcher::M_Gimmicks' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_pKHSBackup) == 0x000098, "Member 'FTresGamePlayWorldSwitcher::M_pKHSBackup' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_PrepareName) == 0x0000A0, "Member 'FTresGamePlayWorldSwitcher::M_PrepareName' has a wrong offset!");
static_assert(offsetof(FTresGamePlayWorldSwitcher, M_StartName) == 0x0000A8, "Member 'FTresGamePlayWorldSwitcher::M_StartName' has a wrong offset!");

// ScriptStruct TresGame.TresLSIGameDriver
// 0x00B0 (0x00B0 - 0x0000)
struct FTresLSIGameDriver final
{
public:
	class UTresGameInstance*                      M_GameInstance;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameMode*                              M_LSIGameMode;                                     // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ATresLSIGameActor*                      M_LSIGameActor;                                    // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ACameraActor*                           M_LSIGameCamera;                                   // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayerInput*                           M_LSIGamePlayerInput;                              // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APostProcessVolume*                     M_LSIPostprocess;                                  // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APlayerController*                      M_OriginalPC;                                      // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 M_OriginalViewTarget;                              // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         M_OriginalHiddenActors;                            // 0x0040(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLSIGameDriver) == 0x000008, "Wrong alignment on FTresLSIGameDriver");
static_assert(sizeof(FTresLSIGameDriver) == 0x0000B0, "Wrong size on FTresLSIGameDriver");
static_assert(offsetof(FTresLSIGameDriver, M_GameInstance) == 0x000000, "Member 'FTresLSIGameDriver::M_GameInstance' has a wrong offset!");
static_assert(offsetof(FTresLSIGameDriver, M_LSIGameMode) == 0x000008, "Member 'FTresLSIGameDriver::M_LSIGameMode' has a wrong offset!");
static_assert(offsetof(FTresLSIGameDriver, M_LSIGameActor) == 0x000010, "Member 'FTresLSIGameDriver::M_LSIGameActor' has a wrong offset!");
static_assert(offsetof(FTresLSIGameDriver, M_LSIGameCamera) == 0x000018, "Member 'FTresLSIGameDriver::M_LSIGameCamera' has a wrong offset!");
static_assert(offsetof(FTresLSIGameDriver, M_LSIGamePlayerInput) == 0x000020, "Member 'FTresLSIGameDriver::M_LSIGamePlayerInput' has a wrong offset!");
static_assert(offsetof(FTresLSIGameDriver, M_LSIPostprocess) == 0x000028, "Member 'FTresLSIGameDriver::M_LSIPostprocess' has a wrong offset!");
static_assert(offsetof(FTresLSIGameDriver, M_OriginalPC) == 0x000030, "Member 'FTresLSIGameDriver::M_OriginalPC' has a wrong offset!");
static_assert(offsetof(FTresLSIGameDriver, M_OriginalViewTarget) == 0x000038, "Member 'FTresLSIGameDriver::M_OriginalViewTarget' has a wrong offset!");
static_assert(offsetof(FTresLSIGameDriver, M_OriginalHiddenActors) == 0x000040, "Member 'FTresLSIGameDriver::M_OriginalHiddenActors' has a wrong offset!");

// ScriptStruct TresGame.TresGummiShipAnimInstanceProxy
// 0x0000 (0x11D4B - 0x11D4B)
struct FTresGummiShipAnimInstanceProxy final : public FAnimSingleNodeInstanceProxy
{
};
static_assert(alignof(FTresGummiShipAnimInstanceProxy) == 0x011D4B, "Wrong alignment on FTresGummiShipAnimInstanceProxy");
static_assert(sizeof(FTresGummiShipAnimInstanceProxy) == 0x011D4B, "Wrong size on FTresGummiShipAnimInstanceProxy");

// ScriptStruct TresGame.TresGameModeBaseLastCleanupTickFunction
// 0x11970 (0x119C8 - 0x0058)
struct alignas(0x119C8) FTresGameModeBaseLastCleanupTickFunction final : public FTickFunction
{
};
static_assert(alignof(FTresGameModeBaseLastCleanupTickFunction) == 0x0119C8, "Wrong alignment on FTresGameModeBaseLastCleanupTickFunction");
static_assert(sizeof(FTresGameModeBaseLastCleanupTickFunction) == 0x0119C8, "Wrong size on FTresGameModeBaseLastCleanupTickFunction");

// ScriptStruct TresGame.TresPhysMatEffectAssetUnit
// 0x0038 (0x0038 - 0x0000)
struct FTresPhysMatEffectAssetUnit final
{
public:
	uint8                                         M_bEnableInnerWater : 1;                           // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_NmlSpeedParam;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_NmlEffect;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HighSpeedParam;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_HighEffect;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_StillEffect;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_EnterEffect;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_LeaveEffect;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPhysMatEffectAssetUnit) == 0x000008, "Wrong alignment on FTresPhysMatEffectAssetUnit");
static_assert(sizeof(FTresPhysMatEffectAssetUnit) == 0x000038, "Wrong size on FTresPhysMatEffectAssetUnit");
static_assert(offsetof(FTresPhysMatEffectAssetUnit, M_NmlSpeedParam) == 0x000004, "Member 'FTresPhysMatEffectAssetUnit::M_NmlSpeedParam' has a wrong offset!");
static_assert(offsetof(FTresPhysMatEffectAssetUnit, M_NmlEffect) == 0x000008, "Member 'FTresPhysMatEffectAssetUnit::M_NmlEffect' has a wrong offset!");
static_assert(offsetof(FTresPhysMatEffectAssetUnit, M_HighSpeedParam) == 0x000010, "Member 'FTresPhysMatEffectAssetUnit::M_HighSpeedParam' has a wrong offset!");
static_assert(offsetof(FTresPhysMatEffectAssetUnit, M_HighEffect) == 0x000018, "Member 'FTresPhysMatEffectAssetUnit::M_HighEffect' has a wrong offset!");
static_assert(offsetof(FTresPhysMatEffectAssetUnit, M_StillEffect) == 0x000020, "Member 'FTresPhysMatEffectAssetUnit::M_StillEffect' has a wrong offset!");
static_assert(offsetof(FTresPhysMatEffectAssetUnit, M_EnterEffect) == 0x000028, "Member 'FTresPhysMatEffectAssetUnit::M_EnterEffect' has a wrong offset!");
static_assert(offsetof(FTresPhysMatEffectAssetUnit, M_LeaveEffect) == 0x000030, "Member 'FTresPhysMatEffectAssetUnit::M_LeaveEffect' has a wrong offset!");

// ScriptStruct TresGame.TresGameOverHintEnemyInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresGameOverHintEnemyInfo final
{
public:
	ETresEnemyUniqueID                            ID;                                                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AttackID;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGameOverHintEnemyInfo) == 0x000008, "Wrong alignment on FTresGameOverHintEnemyInfo");
static_assert(sizeof(FTresGameOverHintEnemyInfo) == 0x000018, "Wrong size on FTresGameOverHintEnemyInfo");
static_assert(offsetof(FTresGameOverHintEnemyInfo, ID) == 0x000000, "Member 'FTresGameOverHintEnemyInfo::ID' has a wrong offset!");
static_assert(offsetof(FTresGameOverHintEnemyInfo, AttackID) == 0x000008, "Member 'FTresGameOverHintEnemyInfo::AttackID' has a wrong offset!");

// ScriptStruct TresGame.TresGameOverHintData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGameOverHintData final : public FTableRowBase
{
public:
	class FString                                 HintNameLocSpaceKey;                               // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameOverHintType                             HintType;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresWorldCode                                WorldCode;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MapName;                                           // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    StartGameFlag;                                     // 0x0030(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    EndGameFlag;                                       // 0x0048(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTresGameOverHintEnemyInfo>     EnemyInfo;                                         // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETresGameOverHintSpecialType                  SpecialType;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x0071(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGameOverHintData) == 0x11413080, "Wrong alignment on FTresGameOverHintData");
static_assert(sizeof(FTresGameOverHintData) == 0x11413080, "Wrong size on FTresGameOverHintData");
static_assert(offsetof(FTresGameOverHintData, HintNameLocSpaceKey) == 0x000008, "Member 'FTresGameOverHintData::HintNameLocSpaceKey' has a wrong offset!");
static_assert(offsetof(FTresGameOverHintData, HintType) == 0x000018, "Member 'FTresGameOverHintData::HintType' has a wrong offset!");
static_assert(offsetof(FTresGameOverHintData, Priority) == 0x00001C, "Member 'FTresGameOverHintData::Priority' has a wrong offset!");
static_assert(offsetof(FTresGameOverHintData, WorldCode) == 0x000020, "Member 'FTresGameOverHintData::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresGameOverHintData, MapName) == 0x000028, "Member 'FTresGameOverHintData::MapName' has a wrong offset!");
static_assert(offsetof(FTresGameOverHintData, StartGameFlag) == 0x000030, "Member 'FTresGameOverHintData::StartGameFlag' has a wrong offset!");
static_assert(offsetof(FTresGameOverHintData, EndGameFlag) == 0x000048, "Member 'FTresGameOverHintData::EndGameFlag' has a wrong offset!");
static_assert(offsetof(FTresGameOverHintData, EnemyInfo) == 0x000060, "Member 'FTresGameOverHintData::EnemyInfo' has a wrong offset!");
static_assert(offsetof(FTresGameOverHintData, SpecialType) == 0x000070, "Member 'FTresGameOverHintData::SpecialType' has a wrong offset!");
static_assert(offsetof(FTresGameOverHintData, Version) == 0x000071, "Member 'FTresGameOverHintData::Version' has a wrong offset!");

// ScriptStruct TresGame.TresGummiPartsDataTable
// 0x125680 (0x11538700 - 0x11413080)
struct alignas(0x11538700) FTresGummiPartsDataTable final : public FTableRowBase
{
public:
	class FName                                   M_nSkeltalMeshName;                                // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nGetMax;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nSizeX;                                          // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nSizeY;                                          // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nSizeZ;                                          // 0x0013(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nCost;                                           // 0x0014(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nHP;                                             // 0x0016(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nSpeed;                                          // 0x0018(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nPower;                                          // 0x001A(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nRoll;                                           // 0x001C(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nAttack;                                         // 0x001E(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nTurn;                                           // 0x0020(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isFlip;                                          // 0x0022(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isMaterial;                                      // 0x0023(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isPattern;                                       // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isSticker;                                       // 0x0025(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isColorChange;                                   // 0x0026(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isAnim;                                          // 0x0027(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isUVAnim;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fPreviewScale;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiPartsDataTable) == 0x11538700, "Wrong alignment on FTresGummiPartsDataTable");
static_assert(sizeof(FTresGummiPartsDataTable) == 0x11538700, "Wrong size on FTresGummiPartsDataTable");
static_assert(offsetof(FTresGummiPartsDataTable, M_nSkeltalMeshName) == 0x000008, "Member 'FTresGummiPartsDataTable::M_nSkeltalMeshName' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nGetMax) == 0x000010, "Member 'FTresGummiPartsDataTable::M_nGetMax' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nSizeX) == 0x000011, "Member 'FTresGummiPartsDataTable::M_nSizeX' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nSizeY) == 0x000012, "Member 'FTresGummiPartsDataTable::M_nSizeY' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nSizeZ) == 0x000013, "Member 'FTresGummiPartsDataTable::M_nSizeZ' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nCost) == 0x000014, "Member 'FTresGummiPartsDataTable::M_nCost' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nHP) == 0x000016, "Member 'FTresGummiPartsDataTable::M_nHP' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nSpeed) == 0x000018, "Member 'FTresGummiPartsDataTable::M_nSpeed' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nPower) == 0x00001A, "Member 'FTresGummiPartsDataTable::M_nPower' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nRoll) == 0x00001C, "Member 'FTresGummiPartsDataTable::M_nRoll' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nAttack) == 0x00001E, "Member 'FTresGummiPartsDataTable::M_nAttack' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_nTurn) == 0x000020, "Member 'FTresGummiPartsDataTable::M_nTurn' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_isFlip) == 0x000022, "Member 'FTresGummiPartsDataTable::M_isFlip' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_isMaterial) == 0x000023, "Member 'FTresGummiPartsDataTable::M_isMaterial' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_isPattern) == 0x000024, "Member 'FTresGummiPartsDataTable::M_isPattern' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_isSticker) == 0x000025, "Member 'FTresGummiPartsDataTable::M_isSticker' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_isColorChange) == 0x000026, "Member 'FTresGummiPartsDataTable::M_isColorChange' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_isAnim) == 0x000027, "Member 'FTresGummiPartsDataTable::M_isAnim' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_isUVAnim) == 0x000028, "Member 'FTresGummiPartsDataTable::M_isUVAnim' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsDataTable, M_fPreviewScale) == 0x00002C, "Member 'FTresGummiPartsDataTable::M_fPreviewScale' has a wrong offset!");

// ScriptStruct TresGame.TresDebugMenuInfo
// 0x0080 (0x0080 - 0x0000)
struct FTresDebugMenuInfo final
{
public:
	class UTresDebugMenuScene*                    M_Instance;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x78];                                       // 0x0008(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresDebugMenuInfo) == 0x000008, "Wrong alignment on FTresDebugMenuInfo");
static_assert(sizeof(FTresDebugMenuInfo) == 0x000080, "Wrong size on FTresDebugMenuInfo");
static_assert(offsetof(FTresDebugMenuInfo, M_Instance) == 0x000000, "Member 'FTresDebugMenuInfo::M_Instance' has a wrong offset!");

// ScriptStruct TresGame.TresE_EX781_GunShotMarkerPatternParam
// 0x112E95F0 (0x112E95F0 - 0x0000)
struct FTresE_EX781_GunShotMarkerPatternParam final
{
public:
	float                                         M_MarkerWaitTime;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShotStartTime;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ShotNum;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShotIntervalTime;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Offset;                                          // 0x0010(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_IsChaseTarget : 1;                               // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_IsTargetPos : 1;                                 // 0x001C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_TargetDist;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_TargetDir;                                       // 0x0024(0x112E95F0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_UseEXMode;                                       // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresE_EX781_GunShotMarkerPatternParam) == 0x112E95F0, "Wrong alignment on FTresE_EX781_GunShotMarkerPatternParam");
static_assert(sizeof(FTresE_EX781_GunShotMarkerPatternParam) == 0x112E95F0, "Wrong size on FTresE_EX781_GunShotMarkerPatternParam");
static_assert(offsetof(FTresE_EX781_GunShotMarkerPatternParam, M_MarkerWaitTime) == 0x000000, "Member 'FTresE_EX781_GunShotMarkerPatternParam::M_MarkerWaitTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_GunShotMarkerPatternParam, M_ShotStartTime) == 0x000004, "Member 'FTresE_EX781_GunShotMarkerPatternParam::M_ShotStartTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_GunShotMarkerPatternParam, M_ShotNum) == 0x000008, "Member 'FTresE_EX781_GunShotMarkerPatternParam::M_ShotNum' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_GunShotMarkerPatternParam, M_ShotIntervalTime) == 0x00000C, "Member 'FTresE_EX781_GunShotMarkerPatternParam::M_ShotIntervalTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_GunShotMarkerPatternParam, M_Offset) == 0x000010, "Member 'FTresE_EX781_GunShotMarkerPatternParam::M_Offset' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_GunShotMarkerPatternParam, M_TargetDist) == 0x000020, "Member 'FTresE_EX781_GunShotMarkerPatternParam::M_TargetDist' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_GunShotMarkerPatternParam, M_TargetDir) == 0x000024, "Member 'FTresE_EX781_GunShotMarkerPatternParam::M_TargetDir' has a wrong offset!");
static_assert(offsetof(FTresE_EX781_GunShotMarkerPatternParam, M_UseEXMode) == 0x00002C, "Member 'FTresE_EX781_GunShotMarkerPatternParam::M_UseEXMode' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_OuterScaffoldParam
// 0x0040 (0x0040 - 0x0000)
struct FTresEnemyEx711_OuterScaffoldParam final
{
public:
	class ATresGimmick_e_ex711_PhysicsActor*      M_pActor;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_OuterScaffoldParam) == 0x000008, "Wrong alignment on FTresEnemyEx711_OuterScaffoldParam");
static_assert(sizeof(FTresEnemyEx711_OuterScaffoldParam) == 0x000040, "Wrong size on FTresEnemyEx711_OuterScaffoldParam");
static_assert(offsetof(FTresEnemyEx711_OuterScaffoldParam, M_pActor) == 0x000000, "Member 'FTresEnemyEx711_OuterScaffoldParam::M_pActor' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_OuterScaffoldGroupParam
// 0x0048 (0x0048 - 0x0000)
struct FTresEnemyEx711_OuterScaffoldGroupParam final
{
public:
	TArray<struct FTresEnemyEx711_OuterScaffoldParam> M_OuterScaffoldParamArray;                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x38];                                      // 0x0010(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_OuterScaffoldGroupParam) == 0x000008, "Wrong alignment on FTresEnemyEx711_OuterScaffoldGroupParam");
static_assert(sizeof(FTresEnemyEx711_OuterScaffoldGroupParam) == 0x000048, "Wrong size on FTresEnemyEx711_OuterScaffoldGroupParam");
static_assert(offsetof(FTresEnemyEx711_OuterScaffoldGroupParam, M_OuterScaffoldParamArray) == 0x000000, "Member 'FTresEnemyEx711_OuterScaffoldGroupParam::M_OuterScaffoldParamArray' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_GimmickBouncyPetsParam
// 0x0028 (0x0028 - 0x0000)
struct FTresEnemyEx711_GimmickBouncyPetsParam final
{
public:
	class ATresGimmickTsBouncyPet*                M_pActor;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_GimmickBouncyPetsParam) == 0x000008, "Wrong alignment on FTresEnemyEx711_GimmickBouncyPetsParam");
static_assert(sizeof(FTresEnemyEx711_GimmickBouncyPetsParam) == 0x000028, "Wrong size on FTresEnemyEx711_GimmickBouncyPetsParam");
static_assert(offsetof(FTresEnemyEx711_GimmickBouncyPetsParam, M_pActor) == 0x000000, "Member 'FTresEnemyEx711_GimmickBouncyPetsParam::M_pActor' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_GimmickBouncyPetsGroupParam
// 0x0028 (0x0028 - 0x0000)
struct FTresEnemyEx711_GimmickBouncyPetsGroupParam final
{
public:
	TArray<struct FTresEnemyEx711_GimmickBouncyPetsParam> M_GimmickBouncyPetsParamArray;                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_GimmickBouncyPetsGroupParam) == 0x000008, "Wrong alignment on FTresEnemyEx711_GimmickBouncyPetsGroupParam");
static_assert(sizeof(FTresEnemyEx711_GimmickBouncyPetsGroupParam) == 0x000028, "Wrong size on FTresEnemyEx711_GimmickBouncyPetsGroupParam");
static_assert(offsetof(FTresEnemyEx711_GimmickBouncyPetsGroupParam, M_GimmickBouncyPetsParamArray) == 0x000000, "Member 'FTresEnemyEx711_GimmickBouncyPetsGroupParam::M_GimmickBouncyPetsParamArray' has a wrong offset!");

// ScriptStruct TresGame.EX355_ThrowAirSet
// 0x0058 (0x0058 - 0x0000)
struct FEX355_ThrowAirSet final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresProjectileBase>        M_ProjectileClass;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_Target;                                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX355_ThrowAirSet) == 0x000008, "Wrong alignment on FEX355_ThrowAirSet");
static_assert(sizeof(FEX355_ThrowAirSet) == 0x000058, "Wrong size on FEX355_ThrowAirSet");
static_assert(offsetof(FEX355_ThrowAirSet, M_ProjectileClass) == 0x000008, "Member 'FEX355_ThrowAirSet::M_ProjectileClass' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowAirSet, M_Owner) == 0x000028, "Member 'FEX355_ThrowAirSet::M_Owner' has a wrong offset!");
static_assert(offsetof(FEX355_ThrowAirSet, M_Target) == 0x000030, "Member 'FEX355_ThrowAirSet::M_Target' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_AthleticFlowParam
// 0x0020 (0x0020 - 0x0000)
struct FTresEnemyEx711_AthleticFlowParam final
{
public:
	class ATresGimmick_e_ex711_PhysicsActor*      M_pActor;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_AthleticFlowParam) == 0x000008, "Wrong alignment on FTresEnemyEx711_AthleticFlowParam");
static_assert(sizeof(FTresEnemyEx711_AthleticFlowParam) == 0x000020, "Wrong size on FTresEnemyEx711_AthleticFlowParam");
static_assert(offsetof(FTresEnemyEx711_AthleticFlowParam, M_pActor) == 0x000000, "Member 'FTresEnemyEx711_AthleticFlowParam::M_pActor' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_AthleticFlowLevelParam
// 0x0040 (0x0040 - 0x0000)
struct FTresEnemyEx711_AthleticFlowLevelParam final
{
public:
	TArray<struct FTresEnemyEx711_AthleticFlowParam> M_AthleticFlowParamArray;                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTresEnemyEx711_AthleticFlowParam> M_AthleticFlowReverseParamArray;                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x20];                                      // 0x0020(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_AthleticFlowLevelParam) == 0x000008, "Wrong alignment on FTresEnemyEx711_AthleticFlowLevelParam");
static_assert(sizeof(FTresEnemyEx711_AthleticFlowLevelParam) == 0x000040, "Wrong size on FTresEnemyEx711_AthleticFlowLevelParam");
static_assert(offsetof(FTresEnemyEx711_AthleticFlowLevelParam, M_AthleticFlowParamArray) == 0x000000, "Member 'FTresEnemyEx711_AthleticFlowLevelParam::M_AthleticFlowParamArray' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx711_AthleticFlowLevelParam, M_AthleticFlowReverseParamArray) == 0x000010, "Member 'FTresEnemyEx711_AthleticFlowLevelParam::M_AthleticFlowReverseParamArray' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_HopParam
// 0x0018 (0x0018 - 0x0000)
struct FTresEnemyEx711_HopParam final
{
public:
	class ATresGimmick_e_ex711_PhysicsActor*      M_pActor;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_HopParam) == 0x000008, "Wrong alignment on FTresEnemyEx711_HopParam");
static_assert(sizeof(FTresEnemyEx711_HopParam) == 0x000018, "Wrong size on FTresEnemyEx711_HopParam");
static_assert(offsetof(FTresEnemyEx711_HopParam, M_pActor) == 0x000000, "Member 'FTresEnemyEx711_HopParam::M_pActor' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx711_HopLevelParam
// 0x0030 (0x0030 - 0x0000)
struct FTresEnemyEx711_HopLevelParam final
{
public:
	TArray<struct FTresEnemyEx711_HopParam>       M_HopParamArray;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx711_HopLevelParam) == 0x000008, "Wrong alignment on FTresEnemyEx711_HopLevelParam");
static_assert(sizeof(FTresEnemyEx711_HopLevelParam) == 0x000030, "Wrong size on FTresEnemyEx711_HopLevelParam");
static_assert(offsetof(FTresEnemyEx711_HopLevelParam, M_HopParamArray) == 0x000000, "Member 'FTresEnemyEx711_HopLevelParam::M_HopParamArray' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnPrizeData
// 0x119B2 (0x119EA - 0x0038)
struct alignas(0x119EA) FTresSpawnPrizeData final : public FTresSpawnActorData
{
public:
	float                                         OverrideSphereRadius_;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSpawnPrizeData) == 0x0119EA, "Wrong alignment on FTresSpawnPrizeData");
static_assert(sizeof(FTresSpawnPrizeData) == 0x0119EA, "Wrong size on FTresSpawnPrizeData");
static_assert(offsetof(FTresSpawnPrizeData, OverrideSphereRadius_) == 0x000038, "Member 'FTresSpawnPrizeData::OverrideSphereRadius_' has a wrong offset!");

// ScriptStruct TresGame.TresCarDriverData
// 0x0010 (0x0010 - 0x0000)
struct FTresCarDriverData final
{
public:
	class UStaticMesh*                            DriverMesh;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DriverMaterial;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCarDriverData) == 0x000008, "Wrong alignment on FTresCarDriverData");
static_assert(sizeof(FTresCarDriverData) == 0x000010, "Wrong size on FTresCarDriverData");
static_assert(offsetof(FTresCarDriverData, DriverMesh) == 0x000000, "Member 'FTresCarDriverData::DriverMesh' has a wrong offset!");
static_assert(offsetof(FTresCarDriverData, DriverMaterial) == 0x000008, "Member 'FTresCarDriverData::DriverMaterial' has a wrong offset!");

// ScriptStruct TresGame.TresBxCarRouteControlGroupData
// 0x0010 (0x0010 - 0x0000)
struct FTresBxCarRouteControlGroupData final
{
public:
	TArray<class ATresBxCarGenerator*>            Generators;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresBxCarRouteControlGroupData) == 0x000008, "Wrong alignment on FTresBxCarRouteControlGroupData");
static_assert(sizeof(FTresBxCarRouteControlGroupData) == 0x000010, "Wrong size on FTresBxCarRouteControlGroupData");
static_assert(offsetof(FTresBxCarRouteControlGroupData, Generators) == 0x000000, "Member 'FTresBxCarRouteControlGroupData::Generators' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBattleMissionCommonParam
// 0x115210E0 (0x115210E0 - 0x0000)
struct alignas(0x115210E0) FTresGumiShipBattleMissionCommonParam final
{
public:
	uint32                                        M_udNoDamageBonus;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_udBrokePartsBonus;                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_udDefeatedGroupBonus;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDamageScoreCoefficient;                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fScoreRates[0x8];                                // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipBattleMissionCommonParam) == 0x115210E0, "Wrong alignment on FTresGumiShipBattleMissionCommonParam");
static_assert(sizeof(FTresGumiShipBattleMissionCommonParam) == 0x115210E0, "Wrong size on FTresGumiShipBattleMissionCommonParam");
static_assert(offsetof(FTresGumiShipBattleMissionCommonParam, M_udNoDamageBonus) == 0x000000, "Member 'FTresGumiShipBattleMissionCommonParam::M_udNoDamageBonus' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionCommonParam, M_udBrokePartsBonus) == 0x000004, "Member 'FTresGumiShipBattleMissionCommonParam::M_udBrokePartsBonus' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionCommonParam, M_udDefeatedGroupBonus) == 0x000008, "Member 'FTresGumiShipBattleMissionCommonParam::M_udDefeatedGroupBonus' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionCommonParam, M_fDamageScoreCoefficient) == 0x00000C, "Member 'FTresGumiShipBattleMissionCommonParam::M_fDamageScoreCoefficient' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionCommonParam, M_fScoreRates) == 0x000010, "Member 'FTresGumiShipBattleMissionCommonParam::M_fScoreRates' has a wrong offset!");

// ScriptStruct TresGame.TresCodeMenuChallengeData
// 0x16E980 (0x11581A00 - 0x11413080)
struct alignas(0x11581A00) FTresCodeMenuChallengeData final : public FTableRowBase
{
public:
	ETresDlcChallengeCode                         M_Code;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_NameId;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_DetailId;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCodeMenuChallengeData) == 0x11581A00, "Wrong alignment on FTresCodeMenuChallengeData");
static_assert(sizeof(FTresCodeMenuChallengeData) == 0x11581A00, "Wrong size on FTresCodeMenuChallengeData");
static_assert(offsetof(FTresCodeMenuChallengeData, M_Code) == 0x000008, "Member 'FTresCodeMenuChallengeData::M_Code' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuChallengeData, M_NameId) == 0x000010, "Member 'FTresCodeMenuChallengeData::M_NameId' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuChallengeData, M_DetailId) == 0x000020, "Member 'FTresCodeMenuChallengeData::M_DetailId' has a wrong offset!");

// ScriptStruct TresGame.TresClaymoreIdleInfo_e_ex306
// 0x1155FD00 (0x1155FD00 - 0x0000)
struct alignas(0x1155FD00) FTresClaymoreIdleInfo_e_ex306 final
{
public:
	float                                         M_fRotationSpeed;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevolveSpeed;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevolveRadius;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevolveHeight;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresClaymoreIdleInfo_e_ex306) == 0x1155FD00, "Wrong alignment on FTresClaymoreIdleInfo_e_ex306");
static_assert(sizeof(FTresClaymoreIdleInfo_e_ex306) == 0x1155FD00, "Wrong size on FTresClaymoreIdleInfo_e_ex306");
static_assert(offsetof(FTresClaymoreIdleInfo_e_ex306, M_fRotationSpeed) == 0x000000, "Member 'FTresClaymoreIdleInfo_e_ex306::M_fRotationSpeed' has a wrong offset!");
static_assert(offsetof(FTresClaymoreIdleInfo_e_ex306, M_fRevolveSpeed) == 0x000004, "Member 'FTresClaymoreIdleInfo_e_ex306::M_fRevolveSpeed' has a wrong offset!");
static_assert(offsetof(FTresClaymoreIdleInfo_e_ex306, M_fRevolveRadius) == 0x000008, "Member 'FTresClaymoreIdleInfo_e_ex306::M_fRevolveRadius' has a wrong offset!");
static_assert(offsetof(FTresClaymoreIdleInfo_e_ex306, M_fRevolveHeight) == 0x00000C, "Member 'FTresClaymoreIdleInfo_e_ex306::M_fRevolveHeight' has a wrong offset!");

// ScriptStruct TresGame.CAJellyfishParam
// 0x11513590 (0x11513590 - 0x0000)
struct alignas(0x11513590) FCAJellyfishParam final
{
public:
	float                                         M_WaveUPDownTimeMulti;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WaveUPDownLength;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         M_TickEnableRange;                                 // 0x0008(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AttackName;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AttackInterval;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAJellyfishParam) == 0x11513590, "Wrong alignment on FCAJellyfishParam");
static_assert(sizeof(FCAJellyfishParam) == 0x11513590, "Wrong size on FCAJellyfishParam");
static_assert(offsetof(FCAJellyfishParam, M_WaveUPDownTimeMulti) == 0x000000, "Member 'FCAJellyfishParam::M_WaveUPDownTimeMulti' has a wrong offset!");
static_assert(offsetof(FCAJellyfishParam, M_WaveUPDownLength) == 0x000004, "Member 'FCAJellyfishParam::M_WaveUPDownLength' has a wrong offset!");
static_assert(offsetof(FCAJellyfishParam, M_TickEnableRange) == 0x000008, "Member 'FCAJellyfishParam::M_TickEnableRange' has a wrong offset!");
static_assert(offsetof(FCAJellyfishParam, M_AttackName) == 0x000010, "Member 'FCAJellyfishParam::M_AttackName' has a wrong offset!");
static_assert(offsetof(FCAJellyfishParam, M_AttackInterval) == 0x000018, "Member 'FCAJellyfishParam::M_AttackInterval' has a wrong offset!");

// ScriptStruct TresGame.CAMovableBarrelRunAwayParam
// 0x11513920 (0x11513920 - 0x0000)
struct alignas(0x11513920) FCAMovableBarrelRunAwayParam final
{
public:
	float                                         M_directionOfRunAwayChangeInterval;                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MinDistance;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxDistance;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SleepWaitTime;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxRandomAngleForRunAway;                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxRandomAngleForMiddle;                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaxRandomAngleForGetBack;                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TurnRateForRunAway;                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TurnRateForMiddle;                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpeedForRunAway;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SpeedForMiddle;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCAMovableBarrelRunAwayParam) == 0x11513920, "Wrong alignment on FCAMovableBarrelRunAwayParam");
static_assert(sizeof(FCAMovableBarrelRunAwayParam) == 0x11513920, "Wrong size on FCAMovableBarrelRunAwayParam");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_directionOfRunAwayChangeInterval) == 0x000000, "Member 'FCAMovableBarrelRunAwayParam::M_directionOfRunAwayChangeInterval' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_MinDistance) == 0x000004, "Member 'FCAMovableBarrelRunAwayParam::M_MinDistance' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_MaxDistance) == 0x000008, "Member 'FCAMovableBarrelRunAwayParam::M_MaxDistance' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_SleepWaitTime) == 0x00000C, "Member 'FCAMovableBarrelRunAwayParam::M_SleepWaitTime' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_MaxRandomAngleForRunAway) == 0x000010, "Member 'FCAMovableBarrelRunAwayParam::M_MaxRandomAngleForRunAway' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_MaxRandomAngleForMiddle) == 0x000014, "Member 'FCAMovableBarrelRunAwayParam::M_MaxRandomAngleForMiddle' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_MaxRandomAngleForGetBack) == 0x000018, "Member 'FCAMovableBarrelRunAwayParam::M_MaxRandomAngleForGetBack' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_TurnRateForRunAway) == 0x00001C, "Member 'FCAMovableBarrelRunAwayParam::M_TurnRateForRunAway' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_TurnRateForMiddle) == 0x000020, "Member 'FCAMovableBarrelRunAwayParam::M_TurnRateForMiddle' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_SpeedForRunAway) == 0x000024, "Member 'FCAMovableBarrelRunAwayParam::M_SpeedForRunAway' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelRunAwayParam, M_SpeedForMiddle) == 0x000028, "Member 'FCAMovableBarrelRunAwayParam::M_SpeedForMiddle' has a wrong offset!");

// ScriptStruct TresGame.TresClaymoreSet_e_ex355
// 0x0008 (0x0008 - 0x0000)
struct FTresClaymoreSet_e_ex355 final
{
public:
	TWeakObjectPtr<class ATresProjectile_e_ex355_Claymore_Idle> PClaymore;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTresClaymoreSet_e_ex355) == 0x000004, "Wrong alignment on FTresClaymoreSet_e_ex355");
static_assert(sizeof(FTresClaymoreSet_e_ex355) == 0x000008, "Wrong size on FTresClaymoreSet_e_ex355");
static_assert(offsetof(FTresClaymoreSet_e_ex355, PClaymore) == 0x000000, "Member 'FTresClaymoreSet_e_ex355::PClaymore' has a wrong offset!");

// ScriptStruct TresGame.CAMovableBarrelParam
// 0x004C (0x004C - 0x0000)
struct FCAMovableBarrelParam final
{
public:
	ETresDropItemID                               M_prizeKind;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_directionChangeInterval;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_turnRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_turnRateOnHitWall;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_turnRateTimeOnHitWall;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_moveRange;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_defaultVelocity;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_maxDeltaAngle;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxHitPoint;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_spawnPrizeNumForDead;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_spawnPrizeNumForNormalAttack;                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_spawnPrizeNumPerDamageInAttraction;              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_prizeSpawnUpDirectionOffset;                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_naviMeshExtent;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_bodyCollMargin;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_minSpeedScaleOnAvoidPlayer;                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_declVelocityRate;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_yawMaxSpeed;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bRunningAwayMode;                                // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bUseNaviMesh;                                    // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bStopMovement;                                   // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCAMovableBarrelParam) == 0x000004, "Wrong alignment on FCAMovableBarrelParam");
static_assert(sizeof(FCAMovableBarrelParam) == 0x00004C, "Wrong size on FCAMovableBarrelParam");
static_assert(offsetof(FCAMovableBarrelParam, M_prizeKind) == 0x000000, "Member 'FCAMovableBarrelParam::M_prizeKind' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_directionChangeInterval) == 0x000004, "Member 'FCAMovableBarrelParam::M_directionChangeInterval' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_turnRate) == 0x000008, "Member 'FCAMovableBarrelParam::M_turnRate' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_turnRateOnHitWall) == 0x00000C, "Member 'FCAMovableBarrelParam::M_turnRateOnHitWall' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_turnRateTimeOnHitWall) == 0x000010, "Member 'FCAMovableBarrelParam::M_turnRateTimeOnHitWall' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_moveRange) == 0x000014, "Member 'FCAMovableBarrelParam::M_moveRange' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_defaultVelocity) == 0x000018, "Member 'FCAMovableBarrelParam::M_defaultVelocity' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_maxDeltaAngle) == 0x00001C, "Member 'FCAMovableBarrelParam::M_maxDeltaAngle' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_MaxHitPoint) == 0x000020, "Member 'FCAMovableBarrelParam::M_MaxHitPoint' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_spawnPrizeNumForDead) == 0x000024, "Member 'FCAMovableBarrelParam::M_spawnPrizeNumForDead' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_spawnPrizeNumForNormalAttack) == 0x000028, "Member 'FCAMovableBarrelParam::M_spawnPrizeNumForNormalAttack' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_spawnPrizeNumPerDamageInAttraction) == 0x00002C, "Member 'FCAMovableBarrelParam::M_spawnPrizeNumPerDamageInAttraction' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_prizeSpawnUpDirectionOffset) == 0x000030, "Member 'FCAMovableBarrelParam::M_prizeSpawnUpDirectionOffset' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_naviMeshExtent) == 0x000034, "Member 'FCAMovableBarrelParam::M_naviMeshExtent' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_bodyCollMargin) == 0x000038, "Member 'FCAMovableBarrelParam::M_bodyCollMargin' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_minSpeedScaleOnAvoidPlayer) == 0x00003C, "Member 'FCAMovableBarrelParam::M_minSpeedScaleOnAvoidPlayer' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_declVelocityRate) == 0x000040, "Member 'FCAMovableBarrelParam::M_declVelocityRate' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_yawMaxSpeed) == 0x000044, "Member 'FCAMovableBarrelParam::M_yawMaxSpeed' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_bRunningAwayMode) == 0x000048, "Member 'FCAMovableBarrelParam::M_bRunningAwayMode' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_bUseNaviMesh) == 0x000049, "Member 'FCAMovableBarrelParam::M_bUseNaviMesh' has a wrong offset!");
static_assert(offsetof(FCAMovableBarrelParam, M_bStopMovement) == 0x00004A, "Member 'FCAMovableBarrelParam::M_bStopMovement' has a wrong offset!");

// ScriptStruct TresGame.TresSplineGeneratorActorRule
// 0x0018 (0x0018 - 0x0000)
struct FTresSplineGeneratorActorRule final
{
public:
	int32                                         SpawnPower;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresSplineGeneratorActorParam> ParamArray;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSplineGeneratorActorRule) == 0x000008, "Wrong alignment on FTresSplineGeneratorActorRule");
static_assert(sizeof(FTresSplineGeneratorActorRule) == 0x000018, "Wrong size on FTresSplineGeneratorActorRule");
static_assert(offsetof(FTresSplineGeneratorActorRule, SpawnPower) == 0x000000, "Member 'FTresSplineGeneratorActorRule::SpawnPower' has a wrong offset!");
static_assert(offsetof(FTresSplineGeneratorActorRule, ParamArray) == 0x000008, "Member 'FTresSplineGeneratorActorRule::ParamArray' has a wrong offset!");

// ScriptStruct TresGame.TresGimmickMI_02_LaserArmActionParam
// 0x11516750 (0x11516750 - 0x0000)
struct alignas(0x11516750) FTresGimmickMI_02_LaserArmActionParam final
{
public:
	float                                         M_ArmRotateSpeed;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ArmUpDownSpeed;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ArmTargetSpeed;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ArmStartupTime;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ArmRotateMin;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ArmRotateMax;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LaserChargeTime;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGimmickMI_02_LaserArmActionParam) == 0x11516750, "Wrong alignment on FTresGimmickMI_02_LaserArmActionParam");
static_assert(sizeof(FTresGimmickMI_02_LaserArmActionParam) == 0x11516750, "Wrong size on FTresGimmickMI_02_LaserArmActionParam");
static_assert(offsetof(FTresGimmickMI_02_LaserArmActionParam, M_ArmRotateSpeed) == 0x000000, "Member 'FTresGimmickMI_02_LaserArmActionParam::M_ArmRotateSpeed' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_02_LaserArmActionParam, M_ArmUpDownSpeed) == 0x000004, "Member 'FTresGimmickMI_02_LaserArmActionParam::M_ArmUpDownSpeed' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_02_LaserArmActionParam, M_ArmTargetSpeed) == 0x000008, "Member 'FTresGimmickMI_02_LaserArmActionParam::M_ArmTargetSpeed' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_02_LaserArmActionParam, M_ArmStartupTime) == 0x00000C, "Member 'FTresGimmickMI_02_LaserArmActionParam::M_ArmStartupTime' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_02_LaserArmActionParam, M_ArmRotateMin) == 0x000010, "Member 'FTresGimmickMI_02_LaserArmActionParam::M_ArmRotateMin' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_02_LaserArmActionParam, M_ArmRotateMax) == 0x000014, "Member 'FTresGimmickMI_02_LaserArmActionParam::M_ArmRotateMax' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_02_LaserArmActionParam, M_LaserChargeTime) == 0x000018, "Member 'FTresGimmickMI_02_LaserArmActionParam::M_LaserChargeTime' has a wrong offset!");

// ScriptStruct TresGame.TresGimmickMI_04_DoorDamageParam
// 0x115172E0 (0x115172E0 - 0x0000)
struct alignas(0x115172E0) FTresGimmickMI_04_DoorDamageParam final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRate;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitPower;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerReturnRate;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopPower;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGimmickMI_04_DoorDamageParam) == 0x115172E0, "Wrong alignment on FTresGimmickMI_04_DoorDamageParam");
static_assert(sizeof(FTresGimmickMI_04_DoorDamageParam) == 0x115172E0, "Wrong size on FTresGimmickMI_04_DoorDamageParam");
static_assert(offsetof(FTresGimmickMI_04_DoorDamageParam, InterpSpeed) == 0x00000C, "Member 'FTresGimmickMI_04_DoorDamageParam::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_04_DoorDamageParam, MaxAngle) == 0x000010, "Member 'FTresGimmickMI_04_DoorDamageParam::MaxAngle' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_04_DoorDamageParam, TimeRate) == 0x000014, "Member 'FTresGimmickMI_04_DoorDamageParam::TimeRate' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_04_DoorDamageParam, InitPower) == 0x000018, "Member 'FTresGimmickMI_04_DoorDamageParam::InitPower' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_04_DoorDamageParam, PowerReturnRate) == 0x00001C, "Member 'FTresGimmickMI_04_DoorDamageParam::PowerReturnRate' has a wrong offset!");
static_assert(offsetof(FTresGimmickMI_04_DoorDamageParam, StopPower) == 0x000020, "Member 'FTresGimmickMI_04_DoorDamageParam::StopPower' has a wrong offset!");

// ScriptStruct TresGame.TresFestivalClapSpot
// 0x0020 (0x0020 - 0x0000)
struct FTresFestivalClapSpot final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_pPSC;                                            // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFestivalClapSpot) == 0x000008, "Wrong alignment on FTresFestivalClapSpot");
static_assert(sizeof(FTresFestivalClapSpot) == 0x000020, "Wrong size on FTresFestivalClapSpot");
static_assert(offsetof(FTresFestivalClapSpot, M_pPSC) == 0x000018, "Member 'FTresFestivalClapSpot::M_pPSC' has a wrong offset!");

// ScriptStruct TresGame.SpecialMoveMission
// 0xE145 (0xE145 - 0x0000)
struct alignas(0xE145) FSpecialMoveMission final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialMoveMission) == 0x00E145, "Wrong alignment on FSpecialMoveMission");
static_assert(sizeof(FSpecialMoveMission) == 0x00E145, "Wrong size on FSpecialMoveMission");

// ScriptStruct TresGame.TresEnemy_e_ex773_ExFlareTornadoEntryParam
// 0x4A02 (0x4A02 - 0x0000)
struct alignas(0x4A02) FTresEnemy_e_ex773_ExFlareTornadoEntryParam final
{
public:
	uint8                                         Pad_0[0xE8];                                       // 0x0000(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_ExFlareTornadoEntryParam) == 0x004A02, "Wrong alignment on FTresEnemy_e_ex773_ExFlareTornadoEntryParam");
static_assert(sizeof(FTresEnemy_e_ex773_ExFlareTornadoEntryParam) == 0x004A02, "Wrong size on FTresEnemy_e_ex773_ExFlareTornadoEntryParam");

// ScriptStruct TresGame.TresRapunzelDanceMission
// 0x0010 (0x0010 - 0x0000)
struct FTresRapunzelDanceMission final
{
public:
	TArray<EDancePerformType>                     ActionList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRapunzelDanceMission) == 0x000008, "Wrong alignment on FTresRapunzelDanceMission");
static_assert(sizeof(FTresRapunzelDanceMission) == 0x000010, "Wrong size on FTresRapunzelDanceMission");
static_assert(offsetof(FTresRapunzelDanceMission, ActionList) == 0x000000, "Member 'FTresRapunzelDanceMission::ActionList' has a wrong offset!");

// ScriptStruct TresGame.TresRaDanceSplineGroup
// 0x0048 (0x0048 - 0x0000)
struct FTresRaDanceSplineGroup final
{
public:
	class FName                                   M_GroupName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresRaDanceAreaType                          M_eAreaType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_MaxMove;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ATresRaFestivalDanceSplineActor> M_pSpline;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpeed;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpeedRate;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxSpeedScale;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInAddLength;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTotalLength;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_GroupIndex;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsReverse;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresRaDanceSplineMover>        M_SplineMovers;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRaDanceSplineGroup) == 0x000008, "Wrong alignment on FTresRaDanceSplineGroup");
static_assert(sizeof(FTresRaDanceSplineGroup) == 0x000048, "Wrong size on FTresRaDanceSplineGroup");
static_assert(offsetof(FTresRaDanceSplineGroup, M_GroupName) == 0x000000, "Member 'FTresRaDanceSplineGroup::M_GroupName' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_eAreaType) == 0x000008, "Member 'FTresRaDanceSplineGroup::M_eAreaType' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_MaxMove) == 0x00000C, "Member 'FTresRaDanceSplineGroup::M_MaxMove' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_pSpline) == 0x000010, "Member 'FTresRaDanceSplineGroup::M_pSpline' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_fSpeed) == 0x000018, "Member 'FTresRaDanceSplineGroup::M_fSpeed' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_fSpeedRate) == 0x00001C, "Member 'FTresRaDanceSplineGroup::M_fSpeedRate' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_fMaxSpeedScale) == 0x000020, "Member 'FTresRaDanceSplineGroup::M_fMaxSpeedScale' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_fInAddLength) == 0x000024, "Member 'FTresRaDanceSplineGroup::M_fInAddLength' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_fTotalLength) == 0x000028, "Member 'FTresRaDanceSplineGroup::M_fTotalLength' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_GroupIndex) == 0x00002C, "Member 'FTresRaDanceSplineGroup::M_GroupIndex' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_bIsReverse) == 0x000030, "Member 'FTresRaDanceSplineGroup::M_bIsReverse' has a wrong offset!");
static_assert(offsetof(FTresRaDanceSplineGroup, M_SplineMovers) == 0x000038, "Member 'FTresRaDanceSplineGroup::M_SplineMovers' has a wrong offset!");

// ScriptStruct TresGame.TresRaGimmickBird
// 0x0028 (0x0028 - 0x0000)
struct FTresRaGimmickBird final
{
public:
	class UTresSkeletalMeshComponent*             M_Mesh;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRaGimmickBird) == 0x000008, "Wrong alignment on FTresRaGimmickBird");
static_assert(sizeof(FTresRaGimmickBird) == 0x000028, "Wrong size on FTresRaGimmickBird");
static_assert(offsetof(FTresRaGimmickBird, M_Mesh) == 0x000000, "Member 'FTresRaGimmickBird::M_Mesh' has a wrong offset!");

// ScriptStruct TresGame.TresRaPuddingEffectRef
// 0x0010 (0x0010 - 0x0000)
struct FTresRaPuddingEffectRef final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        EffectRef;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRaPuddingEffectRef) == 0x000008, "Wrong alignment on FTresRaPuddingEffectRef");
static_assert(sizeof(FTresRaPuddingEffectRef) == 0x000010, "Wrong size on FTresRaPuddingEffectRef");
static_assert(offsetof(FTresRaPuddingEffectRef, ID) == 0x000000, "Member 'FTresRaPuddingEffectRef::ID' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingEffectRef, EffectRef) == 0x000008, "Member 'FTresRaPuddingEffectRef::EffectRef' has a wrong offset!");

// ScriptStruct TresGame.TresRaPuddingPosition
// 0x0010 (0x0010 - 0x0000)
struct FTresRaPuddingPosition final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ATresRaPuddingSplineActor> TargetActor;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRaPuddingPosition) == 0x000004, "Wrong alignment on FTresRaPuddingPosition");
static_assert(sizeof(FTresRaPuddingPosition) == 0x000010, "Wrong size on FTresRaPuddingPosition");
static_assert(offsetof(FTresRaPuddingPosition, ID) == 0x000000, "Member 'FTresRaPuddingPosition::ID' has a wrong offset!");
static_assert(offsetof(FTresRaPuddingPosition, TargetActor) == 0x000008, "Member 'FTresRaPuddingPosition::TargetActor' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex313_DarkMineEntryParam
// 0x11E7B (0x11E7B - 0x0000)
struct alignas(0x11E7B) FTresEnemy_e_ex313_DarkMineEntryParam final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex313_DarkMineEntryParam) == 0x011E7B, "Wrong alignment on FTresEnemy_e_ex313_DarkMineEntryParam");
static_assert(sizeof(FTresEnemy_e_ex313_DarkMineEntryParam) == 0x011E7B, "Wrong size on FTresEnemy_e_ex313_DarkMineEntryParam");

// ScriptStruct TresGame.TresGumiShipPlayerBaseTrackingParameter
// 0x1151BD60 (0x1151BD60 - 0x0000)
struct alignas(0x1151BD60) FTresGumiShipPlayerBaseTrackingParameter final
{
public:
	float                                         M_fTrackingTime;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTracking2DSpeed;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRailSlide2DSpeed;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTrackingSpeed;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fBetweenDist;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMostNearDistRatioForBoost;                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTrackingRange;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCameraArmLength;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCameraPitch;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fFOV;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fNearClipPlane;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAdjustmentUD;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAdjustmentLR;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fParseAdjustmentUD;                              // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fParseAdjustmentLR;                              // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fModelParseAdjustmentUD;                         // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fModelParseAdjustmentLR;                         // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_vLimitOfMove;                                    // 0x0044(0x112E95F0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_vRatioOfStartMoveCamera;                         // 0x004C(0x112E95F0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInterpSpeedOfCamera;                            // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipPlayerBaseTrackingParameter) == 0x1151BD60, "Wrong alignment on FTresGumiShipPlayerBaseTrackingParameter");
static_assert(sizeof(FTresGumiShipPlayerBaseTrackingParameter) == 0x1151BD60, "Wrong size on FTresGumiShipPlayerBaseTrackingParameter");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fTrackingTime) == 0x000000, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fTrackingTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fTracking2DSpeed) == 0x000004, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fTracking2DSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fRailSlide2DSpeed) == 0x000008, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fRailSlide2DSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fTrackingSpeed) == 0x00000C, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fTrackingSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fBetweenDist) == 0x000010, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fBetweenDist' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fMostNearDistRatioForBoost) == 0x000014, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fMostNearDistRatioForBoost' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fTrackingRange) == 0x000018, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fTrackingRange' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fCameraArmLength) == 0x00001C, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fCameraArmLength' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fCameraPitch) == 0x000020, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fCameraPitch' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fFOV) == 0x000024, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fFOV' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fNearClipPlane) == 0x000028, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fNearClipPlane' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fAdjustmentUD) == 0x00002C, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fAdjustmentUD' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fAdjustmentLR) == 0x000030, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fAdjustmentLR' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fParseAdjustmentUD) == 0x000034, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fParseAdjustmentUD' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fParseAdjustmentLR) == 0x000038, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fParseAdjustmentLR' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fModelParseAdjustmentUD) == 0x00003C, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fModelParseAdjustmentUD' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fModelParseAdjustmentLR) == 0x000040, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fModelParseAdjustmentLR' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_vLimitOfMove) == 0x000044, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_vLimitOfMove' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_vRatioOfStartMoveCamera) == 0x00004C, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_vRatioOfStartMoveCamera' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseTrackingParameter, M_fInterpSpeedOfCamera) == 0x000054, "Member 'FTresGumiShipPlayerBaseTrackingParameter::M_fInterpSpeedOfCamera' has a wrong offset!");

// ScriptStruct TresGame.TresGimmickTS_01_BedCollisionDMatParam
// 0x0010 (0x0010 - 0x0000)
struct FTresGimmickTS_01_BedCollisionDMatParam final
{
public:
	int32                                         M_DynamicMaterialIndex;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     M_DynamicMaterial;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGimmickTS_01_BedCollisionDMatParam) == 0x000008, "Wrong alignment on FTresGimmickTS_01_BedCollisionDMatParam");
static_assert(sizeof(FTresGimmickTS_01_BedCollisionDMatParam) == 0x000010, "Wrong size on FTresGimmickTS_01_BedCollisionDMatParam");
static_assert(offsetof(FTresGimmickTS_01_BedCollisionDMatParam, M_DynamicMaterialIndex) == 0x000000, "Member 'FTresGimmickTS_01_BedCollisionDMatParam::M_DynamicMaterialIndex' has a wrong offset!");
static_assert(offsetof(FTresGimmickTS_01_BedCollisionDMatParam, M_DynamicMaterial) == 0x000008, "Member 'FTresGimmickTS_01_BedCollisionDMatParam::M_DynamicMaterial' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamOnSplineInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FEX359_BeamOnSplineInfo final
{
public:
	TSubclassOf<class ATresProjectile_e_ex359_BeamBase> M_ProjectileClass;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStartRadius;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStartAngle;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSplineSizeScale;                                // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bSplineReverse;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fSplineAngleOffset;                              // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxWaitTime;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAccel;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxVelocity;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxMoveEndLifeTime;                             // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bStopOnEnd;                                      // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fDebugDispTime;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bDebugDisp;                                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       M_SplineComp;                                      // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ATresProjectile_e_ex359_BeamBase*       M_Projectile;                                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_BeamOnSplineInfo) == 0x000008, "Wrong alignment on FEX359_BeamOnSplineInfo");
static_assert(sizeof(FEX359_BeamOnSplineInfo) == 0x0000A0, "Wrong size on FEX359_BeamOnSplineInfo");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_ProjectileClass) == 0x000000, "Member 'FEX359_BeamOnSplineInfo::M_ProjectileClass' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_fStartRadius) == 0x000008, "Member 'FEX359_BeamOnSplineInfo::M_fStartRadius' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_fStartAngle) == 0x00000C, "Member 'FEX359_BeamOnSplineInfo::M_fStartAngle' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_fSplineSizeScale) == 0x000010, "Member 'FEX359_BeamOnSplineInfo::M_fSplineSizeScale' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_bSplineReverse) == 0x000014, "Member 'FEX359_BeamOnSplineInfo::M_bSplineReverse' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_fSplineAngleOffset) == 0x000018, "Member 'FEX359_BeamOnSplineInfo::M_fSplineAngleOffset' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_fMaxWaitTime) == 0x00001C, "Member 'FEX359_BeamOnSplineInfo::M_fMaxWaitTime' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_fAccel) == 0x000020, "Member 'FEX359_BeamOnSplineInfo::M_fAccel' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_fMaxVelocity) == 0x000024, "Member 'FEX359_BeamOnSplineInfo::M_fMaxVelocity' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_fMaxMoveEndLifeTime) == 0x000028, "Member 'FEX359_BeamOnSplineInfo::M_fMaxMoveEndLifeTime' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_bStopOnEnd) == 0x00002C, "Member 'FEX359_BeamOnSplineInfo::M_bStopOnEnd' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_fDebugDispTime) == 0x000030, "Member 'FEX359_BeamOnSplineInfo::M_fDebugDispTime' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_bDebugDisp) == 0x000034, "Member 'FEX359_BeamOnSplineInfo::M_bDebugDisp' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_SplineComp) == 0x000038, "Member 'FEX359_BeamOnSplineInfo::M_SplineComp' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_Owner) == 0x000040, "Member 'FEX359_BeamOnSplineInfo::M_Owner' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfo, M_Projectile) == 0x000048, "Member 'FEX359_BeamOnSplineInfo::M_Projectile' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamOnSplineInfoSet
// 0x0018 (0x0018 - 0x0000)
struct FEX359_BeamOnSplineInfoSet final
{
public:
	TArray<struct FEX359_BeamOnSplineInfo>        M_BeamOnSplineInfoArray;                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EEX359_SpawnDirType                           M_DirType;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_BeamOnSplineInfoSet) == 0x000008, "Wrong alignment on FEX359_BeamOnSplineInfoSet");
static_assert(sizeof(FEX359_BeamOnSplineInfoSet) == 0x000018, "Wrong size on FEX359_BeamOnSplineInfoSet");
static_assert(offsetof(FEX359_BeamOnSplineInfoSet, M_BeamOnSplineInfoArray) == 0x000000, "Member 'FEX359_BeamOnSplineInfoSet::M_BeamOnSplineInfoArray' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnSplineInfoSet, M_DirType) == 0x000010, "Member 'FEX359_BeamOnSplineInfoSet::M_DirType' has a wrong offset!");

// ScriptStruct TresGame.TresGimmickTT_Post_PresentDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGimmickTT_Post_PresentDataTable final : public FTableRowBase
{
public:
	ETresItemDefBattleItem                        M_BattleItemID1;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefCampItem                          M_CampItemID1;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefAccessory                         M_AccessoryID1;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefMaterial                          M_MaterialID1;                                     // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ItemNum1;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ItemPrizeRate1;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_ItemRare1;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGimmickTT_Post_PresentDataTable) == 0x11413080, "Wrong alignment on FTresGimmickTT_Post_PresentDataTable");
static_assert(sizeof(FTresGimmickTT_Post_PresentDataTable) == 0x11413080, "Wrong size on FTresGimmickTT_Post_PresentDataTable");
static_assert(offsetof(FTresGimmickTT_Post_PresentDataTable, M_BattleItemID1) == 0x000008, "Member 'FTresGimmickTT_Post_PresentDataTable::M_BattleItemID1' has a wrong offset!");
static_assert(offsetof(FTresGimmickTT_Post_PresentDataTable, M_CampItemID1) == 0x000009, "Member 'FTresGimmickTT_Post_PresentDataTable::M_CampItemID1' has a wrong offset!");
static_assert(offsetof(FTresGimmickTT_Post_PresentDataTable, M_AccessoryID1) == 0x00000A, "Member 'FTresGimmickTT_Post_PresentDataTable::M_AccessoryID1' has a wrong offset!");
static_assert(offsetof(FTresGimmickTT_Post_PresentDataTable, M_MaterialID1) == 0x00000B, "Member 'FTresGimmickTT_Post_PresentDataTable::M_MaterialID1' has a wrong offset!");
static_assert(offsetof(FTresGimmickTT_Post_PresentDataTable, M_ItemNum1) == 0x00000C, "Member 'FTresGimmickTT_Post_PresentDataTable::M_ItemNum1' has a wrong offset!");
static_assert(offsetof(FTresGimmickTT_Post_PresentDataTable, M_ItemPrizeRate1) == 0x000010, "Member 'FTresGimmickTT_Post_PresentDataTable::M_ItemPrizeRate1' has a wrong offset!");
static_assert(offsetof(FTresGimmickTT_Post_PresentDataTable, M_ItemRare1) == 0x000014, "Member 'FTresGimmickTT_Post_PresentDataTable::M_ItemRare1' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_HvnDebrisBlowParam
// 0xE440 (0xE440 - 0x0000)
struct alignas(0xE440) FTresEnemy_e_ex773_HvnDebrisBlowParam final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_HvnDebrisBlowParam) == 0x00E440, "Wrong alignment on FTresEnemy_e_ex773_HvnDebrisBlowParam");
static_assert(sizeof(FTresEnemy_e_ex773_HvnDebrisBlowParam) == 0x00E440, "Wrong size on FTresEnemy_e_ex773_HvnDebrisBlowParam");

// ScriptStruct TresGame.TresGumiShipSkillParam
// 0x0028 (0x0028 - 0x0000)
struct FTresGumiShipSkillParam final
{
public:
	float                                         M_fAttackPoint;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipAttackElementType                M_eElementType;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipAttackSubElemntType              M_eSubElementType;                                 // 0x0005(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipBadStateType                     M_eBadStateType;                                   // 0x0006(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fTimeOfBadStateEffective;                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPercentOfBadState;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipReactionType                     M_eReactionType;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_pHitEffect;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipSkillParam) == 0x000008, "Wrong alignment on FTresGumiShipSkillParam");
static_assert(sizeof(FTresGumiShipSkillParam) == 0x000028, "Wrong size on FTresGumiShipSkillParam");
static_assert(offsetof(FTresGumiShipSkillParam, M_fAttackPoint) == 0x000000, "Member 'FTresGumiShipSkillParam::M_fAttackPoint' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSkillParam, M_eElementType) == 0x000004, "Member 'FTresGumiShipSkillParam::M_eElementType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSkillParam, M_eSubElementType) == 0x000005, "Member 'FTresGumiShipSkillParam::M_eSubElementType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSkillParam, M_eBadStateType) == 0x000006, "Member 'FTresGumiShipSkillParam::M_eBadStateType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSkillParam, M_fTimeOfBadStateEffective) == 0x000008, "Member 'FTresGumiShipSkillParam::M_fTimeOfBadStateEffective' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSkillParam, M_fPercentOfBadState) == 0x00000C, "Member 'FTresGumiShipSkillParam::M_fPercentOfBadState' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSkillParam, M_eReactionType) == 0x000010, "Member 'FTresGumiShipSkillParam::M_eReactionType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSkillParam, M_pHitEffect) == 0x000018, "Member 'FTresGumiShipSkillParam::M_pHitEffect' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipAtkCollisionParam
// 0x0040 (0x0040 - 0x0000)
struct FTresGumiShipAtkCollisionParam final
{
public:
	ETresGumiShipAtkHitTestType                   M_eHitTestType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         M_bIsHitProjectile : 1;                            // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsHitBackGround : 1;                            // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_AtkParamName;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTimeOfRefreshIgnore;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresGumiShipSkillParam                M_SkillParam;                                      // 0x0018(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipAtkCollisionParam) == 0x000004, "Wrong alignment on FTresGumiShipAtkCollisionParam");
static_assert(sizeof(FTresGumiShipAtkCollisionParam) == 0x000040, "Wrong size on FTresGumiShipAtkCollisionParam");
static_assert(offsetof(FTresGumiShipAtkCollisionParam, M_eHitTestType) == 0x000000, "Member 'FTresGumiShipAtkCollisionParam::M_eHitTestType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAtkCollisionParam, M_AtkParamName) == 0x000008, "Member 'FTresGumiShipAtkCollisionParam::M_AtkParamName' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAtkCollisionParam, M_fTimeOfRefreshIgnore) == 0x000010, "Member 'FTresGumiShipAtkCollisionParam::M_fTimeOfRefreshIgnore' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAtkCollisionParam, M_SkillParam) == 0x000018, "Member 'FTresGumiShipAtkCollisionParam::M_SkillParam' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex313_ThunderInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresEnemy_e_ex313_ThunderInfo final
{
public:
	class UParticleSystemComponent*               M_ThunderEff;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex313_ThunderInfo) == 0x000008, "Wrong alignment on FTresEnemy_e_ex313_ThunderInfo");
static_assert(sizeof(FTresEnemy_e_ex313_ThunderInfo) == 0x000018, "Wrong size on FTresEnemy_e_ex313_ThunderInfo");
static_assert(offsetof(FTresEnemy_e_ex313_ThunderInfo, M_ThunderEff) == 0x000000, "Member 'FTresEnemy_e_ex313_ThunderInfo::M_ThunderEff' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipPlayerBaseMovementParameter
// 0x1151CA10 (0x1151CA10 - 0x0000)
struct alignas(0x1151CA10) FTresGumiShipPlayerBaseMovementParameter final
{
public:
	float                                         M_fMinOfSpeed;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxOfSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpeedOfPitchUp;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpeedOfPitchDown;                               // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpeedOfYaw;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpeedOfRoll;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCoolDownTimeOfBoost;                            // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDurationOfBoost;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fScaleOfBoost;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLimitOfPitch;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpeedOfAutoHorizontalCorrection;                // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCameraDepthLagDestDist;                         // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCameraDepthLagAccSpeed;                         // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCameraDepthLagDecSpeed;                         // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCameraDepthLagScale;                            // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipPlayerBaseMovementParameter) == 0x1151CA10, "Wrong alignment on FTresGumiShipPlayerBaseMovementParameter");
static_assert(sizeof(FTresGumiShipPlayerBaseMovementParameter) == 0x1151CA10, "Wrong size on FTresGumiShipPlayerBaseMovementParameter");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fMinOfSpeed) == 0x000000, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fMinOfSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fMaxOfSpeed) == 0x000004, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fMaxOfSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fSpeedOfPitchUp) == 0x000008, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fSpeedOfPitchUp' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fSpeedOfPitchDown) == 0x00000C, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fSpeedOfPitchDown' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fSpeedOfYaw) == 0x000010, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fSpeedOfYaw' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fSpeedOfRoll) == 0x000014, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fSpeedOfRoll' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fCoolDownTimeOfBoost) == 0x000018, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fCoolDownTimeOfBoost' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fDurationOfBoost) == 0x00001C, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fDurationOfBoost' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fScaleOfBoost) == 0x000020, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fScaleOfBoost' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fLimitOfPitch) == 0x000024, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fLimitOfPitch' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fSpeedOfAutoHorizontalCorrection) == 0x000028, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fSpeedOfAutoHorizontalCorrection' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fCameraDepthLagDestDist) == 0x00002C, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fCameraDepthLagDestDist' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fCameraDepthLagAccSpeed) == 0x000030, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fCameraDepthLagAccSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fCameraDepthLagDecSpeed) == 0x000034, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fCameraDepthLagDecSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseMovementParameter, M_fCameraDepthLagScale) == 0x000038, "Member 'FTresGumiShipPlayerBaseMovementParameter::M_fCameraDepthLagScale' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipPlayerBaseParameterDataTable
// 0x10A350 (0x1151D3D0 - 0x11413080)
struct FTresGumiShipPlayerBaseParameterDataTable final : public FTableRowBase
{
public:
	struct FTresGumiShipPlayerBaseCommonParameter M_Common;                                          // 0x0008(0x1151D3D0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresGumiShipPlayerBaseMovementParameter M_Movement;                                        // 0x0010(0x1151CA10)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresGumiShipPlayerBaseTrackingParameter M_Tracking;                                        // 0x004C(0x1151BD60)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipPlayerBaseParameterDataTable) == 0x1151D3D0, "Wrong alignment on FTresGumiShipPlayerBaseParameterDataTable");
static_assert(sizeof(FTresGumiShipPlayerBaseParameterDataTable) == 0x1151D3D0, "Wrong size on FTresGumiShipPlayerBaseParameterDataTable");
static_assert(offsetof(FTresGumiShipPlayerBaseParameterDataTable, M_Common) == 0x000008, "Member 'FTresGumiShipPlayerBaseParameterDataTable::M_Common' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseParameterDataTable, M_Movement) == 0x000010, "Member 'FTresGumiShipPlayerBaseParameterDataTable::M_Movement' has a wrong offset!");
static_assert(offsetof(FTresGumiShipPlayerBaseParameterDataTable, M_Tracking) == 0x00004C, "Member 'FTresGumiShipPlayerBaseParameterDataTable::M_Tracking' has a wrong offset!");

// ScriptStruct TresGame.TresAreaEffectData
// 0x0018 (0x0018 - 0x0000)
struct FTresAreaEffectData final
{
public:
	uint8                                         bNoUseDefaultAttachEffect : 1;                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETresAreaCustonEffectsType                    EffectsType;                                       // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystem*>                SpawnParticleSystems;                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAreaEffectData) == 0x000008, "Wrong alignment on FTresAreaEffectData");
static_assert(sizeof(FTresAreaEffectData) == 0x000018, "Wrong size on FTresAreaEffectData");
static_assert(offsetof(FTresAreaEffectData, EffectsType) == 0x000004, "Member 'FTresAreaEffectData::EffectsType' has a wrong offset!");
static_assert(offsetof(FTresAreaEffectData, SpawnParticleSystems) == 0x000008, "Member 'FTresAreaEffectData::SpawnParticleSystems' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx773_FlareAttractParam
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx773_FlareAttractParam final
{
public:
	class ATresActor_e_ex773_Attract*             M_pAttract;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_pTarget;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx773_FlareAttractParam) == 0x000008, "Wrong alignment on FTresEnemyEx773_FlareAttractParam");
static_assert(sizeof(FTresEnemyEx773_FlareAttractParam) == 0x000010, "Wrong size on FTresEnemyEx773_FlareAttractParam");
static_assert(offsetof(FTresEnemyEx773_FlareAttractParam, M_pAttract) == 0x000000, "Member 'FTresEnemyEx773_FlareAttractParam::M_pAttract' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx773_FlareAttractParam, M_pTarget) == 0x000008, "Member 'FTresEnemyEx773_FlareAttractParam::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.EX731_DashEffectInfo
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FEX731_DashEffectInfo final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_iNotifyParam;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_DashEffectClass;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fWorldGroundHeight;                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDashEffectSpawnHeight;                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_DashEffectLocationOffset;                        // 0x0018(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_DashEffectRotationOffset;                        // 0x0024(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bDashEffectLoopSpawn;                            // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fDashEffectSpawnInterval;                        // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATresCharPawnBase*                      MyCharPawn;                                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX731_DashEffectInfo) == 0x112E9AF0, "Wrong alignment on FEX731_DashEffectInfo");
static_assert(sizeof(FEX731_DashEffectInfo) == 0x112E9AF0, "Wrong size on FEX731_DashEffectInfo");
static_assert(offsetof(FEX731_DashEffectInfo, M_iNotifyParam) == 0x000004, "Member 'FEX731_DashEffectInfo::M_iNotifyParam' has a wrong offset!");
static_assert(offsetof(FEX731_DashEffectInfo, M_DashEffectClass) == 0x000008, "Member 'FEX731_DashEffectInfo::M_DashEffectClass' has a wrong offset!");
static_assert(offsetof(FEX731_DashEffectInfo, M_fWorldGroundHeight) == 0x000010, "Member 'FEX731_DashEffectInfo::M_fWorldGroundHeight' has a wrong offset!");
static_assert(offsetof(FEX731_DashEffectInfo, M_fDashEffectSpawnHeight) == 0x000014, "Member 'FEX731_DashEffectInfo::M_fDashEffectSpawnHeight' has a wrong offset!");
static_assert(offsetof(FEX731_DashEffectInfo, M_DashEffectLocationOffset) == 0x000018, "Member 'FEX731_DashEffectInfo::M_DashEffectLocationOffset' has a wrong offset!");
static_assert(offsetof(FEX731_DashEffectInfo, M_DashEffectRotationOffset) == 0x000024, "Member 'FEX731_DashEffectInfo::M_DashEffectRotationOffset' has a wrong offset!");
static_assert(offsetof(FEX731_DashEffectInfo, M_bDashEffectLoopSpawn) == 0x000030, "Member 'FEX731_DashEffectInfo::M_bDashEffectLoopSpawn' has a wrong offset!");
static_assert(offsetof(FEX731_DashEffectInfo, M_fDashEffectSpawnInterval) == 0x000034, "Member 'FEX731_DashEffectInfo::M_fDashEffectSpawnInterval' has a wrong offset!");
static_assert(offsetof(FEX731_DashEffectInfo, MyCharPawn) == 0x000038, "Member 'FEX731_DashEffectInfo::MyCharPawn' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_HvnDebrisParam
// 0x0030 (0x0030 - 0x0000)
struct FTresEnemy_e_ex773_HvnDebrisParam final
{
public:
	class ATresProjectile_e_ex773_DebrisAttract*  M_DebrisAttract;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_HvnDebrisParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex773_HvnDebrisParam");
static_assert(sizeof(FTresEnemy_e_ex773_HvnDebrisParam) == 0x000030, "Wrong size on FTresEnemy_e_ex773_HvnDebrisParam");
static_assert(offsetof(FTresEnemy_e_ex773_HvnDebrisParam, M_DebrisAttract) == 0x000000, "Member 'FTresEnemy_e_ex773_HvnDebrisParam::M_DebrisAttract' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipStrikeGumiParametarDataTable
// 0x10AD50 (0x1151DDD0 - 0x11413080)
struct alignas(0x1151DDD0) FTresGumiShipStrikeGumiParametarDataTable final : public FTableRowBase
{
public:
	ETresGumiShipCollisionShape                   M_eShape;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_vSize;                                           // 0x000C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vOffset;                                         // 0x0018(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRefreshSec;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fWidth;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipStrikeGumiParametarDataTable) == 0x1151DDD0, "Wrong alignment on FTresGumiShipStrikeGumiParametarDataTable");
static_assert(sizeof(FTresGumiShipStrikeGumiParametarDataTable) == 0x1151DDD0, "Wrong size on FTresGumiShipStrikeGumiParametarDataTable");
static_assert(offsetof(FTresGumiShipStrikeGumiParametarDataTable, M_eShape) == 0x000008, "Member 'FTresGumiShipStrikeGumiParametarDataTable::M_eShape' has a wrong offset!");
static_assert(offsetof(FTresGumiShipStrikeGumiParametarDataTable, M_vSize) == 0x00000C, "Member 'FTresGumiShipStrikeGumiParametarDataTable::M_vSize' has a wrong offset!");
static_assert(offsetof(FTresGumiShipStrikeGumiParametarDataTable, M_vOffset) == 0x000018, "Member 'FTresGumiShipStrikeGumiParametarDataTable::M_vOffset' has a wrong offset!");
static_assert(offsetof(FTresGumiShipStrikeGumiParametarDataTable, M_fRefreshSec) == 0x000024, "Member 'FTresGumiShipStrikeGumiParametarDataTable::M_fRefreshSec' has a wrong offset!");
static_assert(offsetof(FTresGumiShipStrikeGumiParametarDataTable, M_fWidth) == 0x000028, "Member 'FTresGumiShipStrikeGumiParametarDataTable::M_fWidth' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_LivelyFlarePillarParam
// 0x0030 (0x0030 - 0x0000)
struct FTresEnemy_e_ex773_LivelyFlarePillarParam final
{
public:
	class AActor*                                 M_Target;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATresProjectileBase*                    M_LivelyFlarePillar;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_LivelyFlarePillarParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex773_LivelyFlarePillarParam");
static_assert(sizeof(FTresEnemy_e_ex773_LivelyFlarePillarParam) == 0x000030, "Wrong size on FTresEnemy_e_ex773_LivelyFlarePillarParam");
static_assert(offsetof(FTresEnemy_e_ex773_LivelyFlarePillarParam, M_Target) == 0x000000, "Member 'FTresEnemy_e_ex773_LivelyFlarePillarParam::M_Target' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex773_LivelyFlarePillarParam, M_LivelyFlarePillar) == 0x000008, "Member 'FTresEnemy_e_ex773_LivelyFlarePillarParam::M_LivelyFlarePillar' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipAbilityParametarDataTable
// 0x10B430 (0x1151E4B0 - 0x11413080)
struct FTresGumiShipAbilityParametarDataTable final : public FTableRowBase
{
public:
	float                                         M_fEffect1;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEffect2;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEffect3;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresGumiShipElementResistance         M_ElementResistance;                               // 0x0018(0x1151E4B0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         M_byCost;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_byMaxCountOfEquip;                               // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipAbilityParametarDataTable) == 0x1151E4B0, "Wrong alignment on FTresGumiShipAbilityParametarDataTable");
static_assert(sizeof(FTresGumiShipAbilityParametarDataTable) == 0x1151E4B0, "Wrong size on FTresGumiShipAbilityParametarDataTable");
static_assert(offsetof(FTresGumiShipAbilityParametarDataTable, M_fEffect1) == 0x000008, "Member 'FTresGumiShipAbilityParametarDataTable::M_fEffect1' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAbilityParametarDataTable, M_fEffect2) == 0x00000C, "Member 'FTresGumiShipAbilityParametarDataTable::M_fEffect2' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAbilityParametarDataTable, M_fEffect3) == 0x000010, "Member 'FTresGumiShipAbilityParametarDataTable::M_fEffect3' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAbilityParametarDataTable, M_ElementResistance) == 0x000018, "Member 'FTresGumiShipAbilityParametarDataTable::M_ElementResistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAbilityParametarDataTable, M_byCost) == 0x000038, "Member 'FTresGumiShipAbilityParametarDataTable::M_byCost' has a wrong offset!");
static_assert(offsetof(FTresGumiShipAbilityParametarDataTable, M_byMaxCountOfEquip) == 0x000039, "Member 'FTresGumiShipAbilityParametarDataTable::M_byMaxCountOfEquip' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_EncloseFlareHvnEntryParam
// 0x49E5 (0x49E5 - 0x0000)
struct alignas(0x49E5) FTresEnemy_e_ex773_EncloseFlareHvnEntryParam final
{
public:
	uint8                                         Pad_0[0x2C];                                       // 0x0000(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_EncloseFlareHvnEntryParam) == 0x0049E5, "Wrong alignment on FTresEnemy_e_ex773_EncloseFlareHvnEntryParam");
static_assert(sizeof(FTresEnemy_e_ex773_EncloseFlareHvnEntryParam) == 0x0049E5, "Wrong size on FTresEnemy_e_ex773_EncloseFlareHvnEntryParam");

// ScriptStruct TresGame.TresGumiShipDropPrizeData
// 0x00A0 (0x00A0 - 0x0000)
struct FTresGumiShipDropPrizeData final
{
public:
	int32                                         M_ExpMinCount;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ExpMidCount;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ExpMaxCount;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_HPMinCount;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_HPMidCount;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_HPMaxCount;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MunnyMinCount;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MunnyMidCount;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MunnyMaxCount;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETresItemDefGumiParts>                 M_GumiParts;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiMaterial>              M_GumiMaterial;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiPattern>               M_GumiPattern;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiSticker>               M_GumiSticker;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiShipBP>                M_GumiShipBP;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiEtc>                   M_GumiEtc;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETresItemDefMaterial>                  M_Material;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipDropPrizeData) == 0x000008, "Wrong alignment on FTresGumiShipDropPrizeData");
static_assert(sizeof(FTresGumiShipDropPrizeData) == 0x0000A0, "Wrong size on FTresGumiShipDropPrizeData");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_ExpMinCount) == 0x000000, "Member 'FTresGumiShipDropPrizeData::M_ExpMinCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_ExpMidCount) == 0x000004, "Member 'FTresGumiShipDropPrizeData::M_ExpMidCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_ExpMaxCount) == 0x000008, "Member 'FTresGumiShipDropPrizeData::M_ExpMaxCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_HPMinCount) == 0x00000C, "Member 'FTresGumiShipDropPrizeData::M_HPMinCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_HPMidCount) == 0x000010, "Member 'FTresGumiShipDropPrizeData::M_HPMidCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_HPMaxCount) == 0x000014, "Member 'FTresGumiShipDropPrizeData::M_HPMaxCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_MunnyMinCount) == 0x000018, "Member 'FTresGumiShipDropPrizeData::M_MunnyMinCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_MunnyMidCount) == 0x00001C, "Member 'FTresGumiShipDropPrizeData::M_MunnyMidCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_MunnyMaxCount) == 0x000020, "Member 'FTresGumiShipDropPrizeData::M_MunnyMaxCount' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_GumiParts) == 0x000028, "Member 'FTresGumiShipDropPrizeData::M_GumiParts' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_GumiMaterial) == 0x000038, "Member 'FTresGumiShipDropPrizeData::M_GumiMaterial' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_GumiPattern) == 0x000048, "Member 'FTresGumiShipDropPrizeData::M_GumiPattern' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_GumiSticker) == 0x000058, "Member 'FTresGumiShipDropPrizeData::M_GumiSticker' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_GumiShipBP) == 0x000068, "Member 'FTresGumiShipDropPrizeData::M_GumiShipBP' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_GumiEtc) == 0x000078, "Member 'FTresGumiShipDropPrizeData::M_GumiEtc' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDropPrizeData, M_Material) == 0x000088, "Member 'FTresGumiShipDropPrizeData::M_Material' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBattleMissionItemParameterDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipBattleMissionItemParameterDataTable final : public FTableRowBase
{
public:
	struct FTresGumiShipDropPrizeData             M_Compensations[0x3];                              // 0x0008(0x00A0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTresGumiShipDropPrizeData             M_CompensationForFirstTime;                        // 0x01E8(0x00A0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipBattleMissionItemParameterDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipBattleMissionItemParameterDataTable");
static_assert(sizeof(FTresGumiShipBattleMissionItemParameterDataTable) == 0x11413080, "Wrong size on FTresGumiShipBattleMissionItemParameterDataTable");
static_assert(offsetof(FTresGumiShipBattleMissionItemParameterDataTable, M_Compensations) == 0x000008, "Member 'FTresGumiShipBattleMissionItemParameterDataTable::M_Compensations' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMissionItemParameterDataTable, M_CompensationForFirstTime) == 0x0001E8, "Member 'FTresGumiShipBattleMissionItemParameterDataTable::M_CompensationForFirstTime' has a wrong offset!");

// ScriptStruct TresGame.TresRemyCameraDataTable
// 0x15F1A0 (0x11572220 - 0x11413080)
struct alignas(0x11572220) FTresRemyCameraDataTable final : public FTableRowBase
{
public:
	ERemyCameraWorkTiming                         CameraWorkTiming;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraWorkEventName;                               // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRemyCameraDataTable) == 0x11572220, "Wrong alignment on FTresRemyCameraDataTable");
static_assert(sizeof(FTresRemyCameraDataTable) == 0x11572220, "Wrong size on FTresRemyCameraDataTable");
static_assert(offsetof(FTresRemyCameraDataTable, CameraWorkTiming) == 0x000008, "Member 'FTresRemyCameraDataTable::CameraWorkTiming' has a wrong offset!");
static_assert(offsetof(FTresRemyCameraDataTable, CameraWorkEventName) == 0x000010, "Member 'FTresRemyCameraDataTable::CameraWorkEventName' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBattleMissionIndividalParameterDataTable
// 0x10D750 (0x115207D0 - 0x11413080)
struct FTresGumiShipBattleMissionIndividalParameterDataTable final : public FTableRowBase
{
public:
	struct FTresGumiShipBattleMissionIndividalParam M_Individal;                                       // 0x0008(0x11520B60)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipBattleMissionIndividalParameterDataTable) == 0x115207D0, "Wrong alignment on FTresGumiShipBattleMissionIndividalParameterDataTable");
static_assert(sizeof(FTresGumiShipBattleMissionIndividalParameterDataTable) == 0x115207D0, "Wrong size on FTresGumiShipBattleMissionIndividalParameterDataTable");
static_assert(offsetof(FTresGumiShipBattleMissionIndividalParameterDataTable, M_Individal) == 0x000008, "Member 'FTresGumiShipBattleMissionIndividalParameterDataTable::M_Individal' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBattleMissionCommonParameterDataTable
// 0x10E060 (0x115210E0 - 0x11413080)
struct FTresGumiShipBattleMissionCommonParameterDataTable final : public FTableRowBase
{
public:
	struct FTresGumiShipBattleMissionCommonParam  M_Common;                                          // 0x0008(0x115210E0)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipBattleMissionCommonParameterDataTable) == 0x115210E0, "Wrong alignment on FTresGumiShipBattleMissionCommonParameterDataTable");
static_assert(sizeof(FTresGumiShipBattleMissionCommonParameterDataTable) == 0x115210E0, "Wrong size on FTresGumiShipBattleMissionCommonParameterDataTable");
static_assert(offsetof(FTresGumiShipBattleMissionCommonParameterDataTable, M_Common) == 0x000008, "Member 'FTresGumiShipBattleMissionCommonParameterDataTable::M_Common' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_FlareShotTornadoParam
// 0x0090 (0x0090 - 0x0000)
struct FTresEnemy_e_ex771_FlareShotTornadoParam final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_FireOmenEff;                                     // 0x0058(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x20];                                      // 0x0060(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ATresProjectileBase>> M_FlareShotArray;                                  // 0x0080(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex771_FlareShotTornadoParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex771_FlareShotTornadoParam");
static_assert(sizeof(FTresEnemy_e_ex771_FlareShotTornadoParam) == 0x000090, "Wrong size on FTresEnemy_e_ex771_FlareShotTornadoParam");
static_assert(offsetof(FTresEnemy_e_ex771_FlareShotTornadoParam, M_FireOmenEff) == 0x000058, "Member 'FTresEnemy_e_ex771_FlareShotTornadoParam::M_FireOmenEff' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex771_FlareShotTornadoParam, M_FlareShotArray) == 0x000080, "Member 'FTresEnemy_e_ex771_FlareShotTornadoParam::M_FlareShotArray' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipProjectileDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipProjectileDataTable final : public FTableRowBase
{
public:
	class FName                                   M_AttackDataName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMovementSpeed;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRange;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingAngle;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDoHomingInDegree;                               // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vScale;                                          // 0x0020(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_pMuzzleFlashEffect;                              // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bDoWarpHitLocation : 1;                          // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTargetLocationPredictable : 1;                  // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipProjectileDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipProjectileDataTable");
static_assert(sizeof(FTresGumiShipProjectileDataTable) == 0x11413080, "Wrong size on FTresGumiShipProjectileDataTable");
static_assert(offsetof(FTresGumiShipProjectileDataTable, M_AttackDataName) == 0x000008, "Member 'FTresGumiShipProjectileDataTable::M_AttackDataName' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileDataTable, M_fMovementSpeed) == 0x000010, "Member 'FTresGumiShipProjectileDataTable::M_fMovementSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileDataTable, M_fRange) == 0x000014, "Member 'FTresGumiShipProjectileDataTable::M_fRange' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileDataTable, M_fHomingAngle) == 0x000018, "Member 'FTresGumiShipProjectileDataTable::M_fHomingAngle' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileDataTable, M_fDoHomingInDegree) == 0x00001C, "Member 'FTresGumiShipProjectileDataTable::M_fDoHomingInDegree' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileDataTable, M_vScale) == 0x000020, "Member 'FTresGumiShipProjectileDataTable::M_vScale' has a wrong offset!");
static_assert(offsetof(FTresGumiShipProjectileDataTable, M_pMuzzleFlashEffect) == 0x000030, "Member 'FTresGumiShipProjectileDataTable::M_pMuzzleFlashEffect' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipWeaponDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipWeaponDataTable final : public FTableRowBase
{
public:
	float                                         M_fShootPerSecond;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDelayTimeOfStartShoot;                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDispersion;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRollDispersion;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fForwardOffset;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATresGumiShipProjectileBase> M_ProjectileType;                                  // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipWeaponDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipWeaponDataTable");
static_assert(sizeof(FTresGumiShipWeaponDataTable) == 0x11413080, "Wrong size on FTresGumiShipWeaponDataTable");
static_assert(offsetof(FTresGumiShipWeaponDataTable, M_fShootPerSecond) == 0x000008, "Member 'FTresGumiShipWeaponDataTable::M_fShootPerSecond' has a wrong offset!");
static_assert(offsetof(FTresGumiShipWeaponDataTable, M_fDelayTimeOfStartShoot) == 0x00000C, "Member 'FTresGumiShipWeaponDataTable::M_fDelayTimeOfStartShoot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipWeaponDataTable, M_fDispersion) == 0x000010, "Member 'FTresGumiShipWeaponDataTable::M_fDispersion' has a wrong offset!");
static_assert(offsetof(FTresGumiShipWeaponDataTable, M_fRollDispersion) == 0x000014, "Member 'FTresGumiShipWeaponDataTable::M_fRollDispersion' has a wrong offset!");
static_assert(offsetof(FTresGumiShipWeaponDataTable, M_fForwardOffset) == 0x000018, "Member 'FTresGumiShipWeaponDataTable::M_fForwardOffset' has a wrong offset!");
static_assert(offsetof(FTresGumiShipWeaponDataTable, M_ProjectileType) == 0x000020, "Member 'FTresGumiShipWeaponDataTable::M_ProjectileType' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipHitEffectDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipHitEffectDataTable final : public FTableRowBase
{
public:
	class UParticleSystem*                        M_pHitEffect;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bUseScaleFromCameraDistTo;                       // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipHitEffectDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipHitEffectDataTable");
static_assert(sizeof(FTresGumiShipHitEffectDataTable) == 0x11413080, "Wrong size on FTresGumiShipHitEffectDataTable");
static_assert(offsetof(FTresGumiShipHitEffectDataTable, M_pHitEffect) == 0x000008, "Member 'FTresGumiShipHitEffectDataTable::M_pHitEffect' has a wrong offset!");
static_assert(offsetof(FTresGumiShipHitEffectDataTable, M_bUseScaleFromCameraDistTo) == 0x000010, "Member 'FTresGumiShipHitEffectDataTable::M_bUseScaleFromCameraDistTo' has a wrong offset!");

// ScriptStruct TresGame.EX354_DownShotInfo
// 0x11561FE0 (0x11561FE0 - 0x0000)
struct alignas(0x11561FE0) FEX354_DownShotInfo final
{
public:
	float                                         M_fVelocity;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLandMoveStartHeight;                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLandMoveHeight;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxLandMoveTime;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRotateVelocity;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bKeepVelocityOnHoming;                           // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fNoHomingDistance;                               // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX354_DownShotInfo) == 0x11561FE0, "Wrong alignment on FEX354_DownShotInfo");
static_assert(sizeof(FEX354_DownShotInfo) == 0x11561FE0, "Wrong size on FEX354_DownShotInfo");
static_assert(offsetof(FEX354_DownShotInfo, M_fVelocity) == 0x000000, "Member 'FEX354_DownShotInfo::M_fVelocity' has a wrong offset!");
static_assert(offsetof(FEX354_DownShotInfo, M_fLandMoveStartHeight) == 0x000004, "Member 'FEX354_DownShotInfo::M_fLandMoveStartHeight' has a wrong offset!");
static_assert(offsetof(FEX354_DownShotInfo, M_fLandMoveHeight) == 0x000008, "Member 'FEX354_DownShotInfo::M_fLandMoveHeight' has a wrong offset!");
static_assert(offsetof(FEX354_DownShotInfo, M_fMaxLandMoveTime) == 0x00000C, "Member 'FEX354_DownShotInfo::M_fMaxLandMoveTime' has a wrong offset!");
static_assert(offsetof(FEX354_DownShotInfo, M_fRotateVelocity) == 0x000010, "Member 'FEX354_DownShotInfo::M_fRotateVelocity' has a wrong offset!");
static_assert(offsetof(FEX354_DownShotInfo, M_bKeepVelocityOnHoming) == 0x000014, "Member 'FEX354_DownShotInfo::M_bKeepVelocityOnHoming' has a wrong offset!");
static_assert(offsetof(FEX354_DownShotInfo, M_fNoHomingDistance) == 0x000018, "Member 'FEX354_DownShotInfo::M_fNoHomingDistance' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipEnemyUsableAttackMethodData
// 0x0001 (0x0001 - 0x0000)
struct FTresGumiShipEnemyUsableAttackMethodData final
{
public:
	ETresGumiShipEnemyStateID                     M_eAttackStateID;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipEnemyUsableAttackMethodData) == 0x000001, "Wrong alignment on FTresGumiShipEnemyUsableAttackMethodData");
static_assert(sizeof(FTresGumiShipEnemyUsableAttackMethodData) == 0x000001, "Wrong size on FTresGumiShipEnemyUsableAttackMethodData");
static_assert(offsetof(FTresGumiShipEnemyUsableAttackMethodData, M_eAttackStateID) == 0x000000, "Member 'FTresGumiShipEnemyUsableAttackMethodData::M_eAttackStateID' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipEnemyBaseParameterDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipEnemyBaseParameterDataTable final : public FTableRowBase
{
public:
	int32                                         M_nMaxHitPoint;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nScorePoint;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxRotateSpeed;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPitchLimitAngle;                                // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresGumiShipDropPrizeData             M_DropPrizeSettingData;                            // 0x0018(0x00A0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipEnemyBaseParameterDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipEnemyBaseParameterDataTable");
static_assert(sizeof(FTresGumiShipEnemyBaseParameterDataTable) == 0x11413080, "Wrong size on FTresGumiShipEnemyBaseParameterDataTable");
static_assert(offsetof(FTresGumiShipEnemyBaseParameterDataTable, M_nMaxHitPoint) == 0x000008, "Member 'FTresGumiShipEnemyBaseParameterDataTable::M_nMaxHitPoint' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyBaseParameterDataTable, M_nScorePoint) == 0x00000C, "Member 'FTresGumiShipEnemyBaseParameterDataTable::M_nScorePoint' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyBaseParameterDataTable, M_fMaxRotateSpeed) == 0x000010, "Member 'FTresGumiShipEnemyBaseParameterDataTable::M_fMaxRotateSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyBaseParameterDataTable, M_fPitchLimitAngle) == 0x000014, "Member 'FTresGumiShipEnemyBaseParameterDataTable::M_fPitchLimitAngle' has a wrong offset!");
static_assert(offsetof(FTresGumiShipEnemyBaseParameterDataTable, M_DropPrizeSettingData) == 0x000018, "Member 'FTresGumiShipEnemyBaseParameterDataTable::M_DropPrizeSettingData' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipReactionResistance
// 0x0001 (0x0001 - 0x0000)
struct FTresGumiShipReactionResistance final
{
public:
	bool                                          M_bBrow;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipReactionResistance) == 0x000001, "Wrong alignment on FTresGumiShipReactionResistance");
static_assert(sizeof(FTresGumiShipReactionResistance) == 0x000001, "Wrong size on FTresGumiShipReactionResistance");
static_assert(offsetof(FTresGumiShipReactionResistance, M_bBrow) == 0x000000, "Member 'FTresGumiShipReactionResistance::M_bBrow' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipReactionParameter
// 0x0008 (0x0008 - 0x0000)
struct FTresGumiShipReactionParameter final
{
public:
	float                                         M_fMass;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGumiShipObjectSize                       M_eSizeType;                                       // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresGumiShipReactionResistance        M_ReactionResistance;                              // 0x0005(0x0001)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresGumiShipBadStateResistance        M_BadStateResistance;                              // 0x0006(0x0001)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipReactionParameter) == 0x000004, "Wrong alignment on FTresGumiShipReactionParameter");
static_assert(sizeof(FTresGumiShipReactionParameter) == 0x000008, "Wrong size on FTresGumiShipReactionParameter");
static_assert(offsetof(FTresGumiShipReactionParameter, M_fMass) == 0x000000, "Member 'FTresGumiShipReactionParameter::M_fMass' has a wrong offset!");
static_assert(offsetof(FTresGumiShipReactionParameter, M_eSizeType) == 0x000004, "Member 'FTresGumiShipReactionParameter::M_eSizeType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipReactionParameter, M_ReactionResistance) == 0x000005, "Member 'FTresGumiShipReactionParameter::M_ReactionResistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipReactionParameter, M_BadStateResistance) == 0x000006, "Member 'FTresGumiShipReactionParameter::M_BadStateResistance' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipDamageEvent
// 0x0000 (0x112F5920 - 0x112F5920)
struct FTresGumiShipDamageEvent final : public FPointDamageEvent
{
};
static_assert(alignof(FTresGumiShipDamageEvent) == 0x112F5920, "Wrong alignment on FTresGumiShipDamageEvent");
static_assert(sizeof(FTresGumiShipDamageEvent) == 0x112F5920, "Wrong size on FTresGumiShipDamageEvent");

// ScriptStruct TresGame.TresGumiShipDirectParam
// 0x0040 (0x0040 - 0x0000)
struct FTresGumiShipDirectParam final
{
public:
	class UParticleSystem*                        M_pScudEffctType;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vEffectOffset;                                   // 0x0008(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_ParamName;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTresCameraShake>           M_pShakeType;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bRebuildWhenDirect;                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x17];                                      // 0x0029(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipDirectParam) == 0x000008, "Wrong alignment on FTresGumiShipDirectParam");
static_assert(sizeof(FTresGumiShipDirectParam) == 0x000040, "Wrong size on FTresGumiShipDirectParam");
static_assert(offsetof(FTresGumiShipDirectParam, M_pScudEffctType) == 0x000000, "Member 'FTresGumiShipDirectParam::M_pScudEffctType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDirectParam, M_vEffectOffset) == 0x000008, "Member 'FTresGumiShipDirectParam::M_vEffectOffset' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDirectParam, M_ParamName) == 0x000018, "Member 'FTresGumiShipDirectParam::M_ParamName' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDirectParam, M_pShakeType) == 0x000020, "Member 'FTresGumiShipDirectParam::M_pShakeType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDirectParam, M_bRebuildWhenDirect) == 0x000028, "Member 'FTresGumiShipDirectParam::M_bRebuildWhenDirect' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipDirectEventBase
// 0x0048 (0x0048 - 0x0000)
struct FTresGumiShipDirectEventBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresGumiShipDirectParam               M_DirectParam;                                     // 0x0008(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipDirectEventBase) == 0x000001, "Wrong alignment on FTresGumiShipDirectEventBase");
static_assert(sizeof(FTresGumiShipDirectEventBase) == 0x000048, "Wrong size on FTresGumiShipDirectEventBase");
static_assert(offsetof(FTresGumiShipDirectEventBase, M_DirectParam) == 0x000008, "Member 'FTresGumiShipDirectEventBase::M_DirectParam' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBetweenSpeedEvent
// 0x11AC0 (0x11B08 - 0x0048)
struct alignas(0x11B08) FTresGumiShipBetweenSpeedEvent final : public FTresGumiShipDirectEventBase
{
public:
	float                                         M_fBottomSpeed;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTopSpeed;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipBetweenSpeedEvent) == 0x011B08, "Wrong alignment on FTresGumiShipBetweenSpeedEvent");
static_assert(sizeof(FTresGumiShipBetweenSpeedEvent) == 0x011B08, "Wrong size on FTresGumiShipBetweenSpeedEvent");
static_assert(offsetof(FTresGumiShipBetweenSpeedEvent, M_fBottomSpeed) == 0x000048, "Member 'FTresGumiShipBetweenSpeedEvent::M_fBottomSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBetweenSpeedEvent, M_fTopSpeed) == 0x00004C, "Member 'FTresGumiShipBetweenSpeedEvent::M_fTopSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipTouchSpeedPointEvent
// 0x0008 (0x0050 - 0x0048)
struct FTresGumiShipTouchSpeedPointEvent final : public FTresGumiShipDirectEventBase
{
public:
	float                                         M_fSpeedPoint;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bUpOnly;                                         // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipTouchSpeedPointEvent) == 0x000004, "Wrong alignment on FTresGumiShipTouchSpeedPointEvent");
static_assert(sizeof(FTresGumiShipTouchSpeedPointEvent) == 0x000050, "Wrong size on FTresGumiShipTouchSpeedPointEvent");
static_assert(offsetof(FTresGumiShipTouchSpeedPointEvent, M_fSpeedPoint) == 0x000048, "Member 'FTresGumiShipTouchSpeedPointEvent::M_fSpeedPoint' has a wrong offset!");
static_assert(offsetof(FTresGumiShipTouchSpeedPointEvent, M_bUpOnly) == 0x00004C, "Member 'FTresGumiShipTouchSpeedPointEvent::M_bUpOnly' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipLimitAreaData
// 0x11524F80 (0x11524F80 - 0x0000)
struct alignas(0x11524F80) FTresGumiShipLimitAreaData final
{
public:
	ETresGumiShipLimitType                        M_eType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fValue;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipLimitAreaData) == 0x11524F80, "Wrong alignment on FTresGumiShipLimitAreaData");
static_assert(sizeof(FTresGumiShipLimitAreaData) == 0x11524F80, "Wrong size on FTresGumiShipLimitAreaData");
static_assert(offsetof(FTresGumiShipLimitAreaData, M_eType) == 0x000000, "Member 'FTresGumiShipLimitAreaData::M_eType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipLimitAreaData, M_fValue) == 0x000004, "Member 'FTresGumiShipLimitAreaData::M_fValue' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipSplinePathMoveParameter
// 0x0018 (0x0018 - 0x0000)
struct FTresGumiShipSplinePathMoveParameter final
{
public:
	float                                         M_fPathMoveSpeed;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxPathMoveSpeed;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPathMoveAcceleration;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fPathMoveDeceleration;                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fStartDistanceRate;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bReversePath : 1;                                // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bLoopPath : 1;                                   // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipSplinePathMoveParameter) == 0x000004, "Wrong alignment on FTresGumiShipSplinePathMoveParameter");
static_assert(sizeof(FTresGumiShipSplinePathMoveParameter) == 0x000018, "Wrong size on FTresGumiShipSplinePathMoveParameter");
static_assert(offsetof(FTresGumiShipSplinePathMoveParameter, M_fPathMoveSpeed) == 0x000000, "Member 'FTresGumiShipSplinePathMoveParameter::M_fPathMoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSplinePathMoveParameter, M_fMaxPathMoveSpeed) == 0x000004, "Member 'FTresGumiShipSplinePathMoveParameter::M_fMaxPathMoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSplinePathMoveParameter, M_fPathMoveAcceleration) == 0x000008, "Member 'FTresGumiShipSplinePathMoveParameter::M_fPathMoveAcceleration' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSplinePathMoveParameter, M_fPathMoveDeceleration) == 0x00000C, "Member 'FTresGumiShipSplinePathMoveParameter::M_fPathMoveDeceleration' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSplinePathMoveParameter, M_fStartDistanceRate) == 0x000010, "Member 'FTresGumiShipSplinePathMoveParameter::M_fStartDistanceRate' has a wrong offset!");

// ScriptStruct TresGame.TresRemyFlambeDataTable
// 0x0000 (0x11572B90 - 0x11572B90)
struct FTresRemyFlambeDataTable final : public FTresRemyCookingGameDataTableBase
{
public:
	float                                         LeftStickFlambeValue;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRemyFlambeDataTable) == 0x11572B90, "Wrong alignment on FTresRemyFlambeDataTable");
static_assert(sizeof(FTresRemyFlambeDataTable) == 0x11572B90, "Wrong size on FTresRemyFlambeDataTable");
static_assert(offsetof(FTresRemyFlambeDataTable, LeftStickFlambeValue) == 0x000020, "Member 'FTresRemyFlambeDataTable::LeftStickFlambeValue' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipSplineAdditionalData
// 0x11525C30 (0x11525C30 - 0x0000)
struct alignas(0x11525C30) FTresGumiShipSplineAdditionalData final
{
public:
	ETresGumiShipSplineEventType                  M_eEventType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fKeyDistanceRate;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipSplineAdditionalData) == 0x11525C30, "Wrong alignment on FTresGumiShipSplineAdditionalData");
static_assert(sizeof(FTresGumiShipSplineAdditionalData) == 0x11525C30, "Wrong size on FTresGumiShipSplineAdditionalData");
static_assert(offsetof(FTresGumiShipSplineAdditionalData, M_eEventType) == 0x000000, "Member 'FTresGumiShipSplineAdditionalData::M_eEventType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSplineAdditionalData, M_fKeyDistanceRate) == 0x000004, "Member 'FTresGumiShipSplineAdditionalData::M_fKeyDistanceRate' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipStateArgs
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresGumiShipStateArgs final
{
public:
	int32                                         M_dArg;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fArg;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vArg;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_RotArg;                                          // 0x0014(0x112E9AF0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          M_bArg;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipStateArgs) == 0x112E9AF0, "Wrong alignment on FTresGumiShipStateArgs");
static_assert(sizeof(FTresGumiShipStateArgs) == 0x112E9AF0, "Wrong size on FTresGumiShipStateArgs");
static_assert(offsetof(FTresGumiShipStateArgs, M_dArg) == 0x000000, "Member 'FTresGumiShipStateArgs::M_dArg' has a wrong offset!");
static_assert(offsetof(FTresGumiShipStateArgs, M_fArg) == 0x000004, "Member 'FTresGumiShipStateArgs::M_fArg' has a wrong offset!");
static_assert(offsetof(FTresGumiShipStateArgs, M_vArg) == 0x000008, "Member 'FTresGumiShipStateArgs::M_vArg' has a wrong offset!");
static_assert(offsetof(FTresGumiShipStateArgs, M_RotArg) == 0x000014, "Member 'FTresGumiShipStateArgs::M_RotArg' has a wrong offset!");
static_assert(offsetof(FTresGumiShipStateArgs, M_bArg) == 0x000020, "Member 'FTresGumiShipStateArgs::M_bArg' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGenericProjectileParam
// 0x11526310 (0x11526310 - 0x0000)
struct alignas(0x11526310) FTresGumiShipGenericProjectileParam final
{
public:
	class UParticleSystem*                        M_pAttachEffectType;                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_ProjectileDataName;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0xD8];                                      // 0x0010(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipGenericProjectileParam) == 0x11526310, "Wrong alignment on FTresGumiShipGenericProjectileParam");
static_assert(sizeof(FTresGumiShipGenericProjectileParam) == 0x11526310, "Wrong size on FTresGumiShipGenericProjectileParam");
static_assert(offsetof(FTresGumiShipGenericProjectileParam, M_pAttachEffectType) == 0x000000, "Member 'FTresGumiShipGenericProjectileParam::M_pAttachEffectType' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGenericProjectileParam, M_ProjectileDataName) == 0x000008, "Member 'FTresGumiShipGenericProjectileParam::M_ProjectileDataName' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickConstellationTable
// 0x113470 (0x115264F0 - 0x11413080)
struct alignas(0x115264F0) FTresGumiShipGimmickConstellationTable final : public FTableRowBase
{
public:
	ETresGumiShipConstellationCode                M_ConstellationCode;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_NameStrId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipGimmickConstellationTable) == 0x115264F0, "Wrong alignment on FTresGumiShipGimmickConstellationTable");
static_assert(sizeof(FTresGumiShipGimmickConstellationTable) == 0x115264F0, "Wrong size on FTresGumiShipGimmickConstellationTable");
static_assert(offsetof(FTresGumiShipGimmickConstellationTable, M_ConstellationCode) == 0x000008, "Member 'FTresGumiShipGimmickConstellationTable::M_ConstellationCode' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickConstellationTable, M_NameStrId) == 0x000010, "Member 'FTresGumiShipGimmickConstellationTable::M_NameStrId' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickDashRingTable
// 0x113650 (0x115266D0 - 0x11413080)
struct alignas(0x115266D0) FTresGumiShipGimmickDashRingTable final : public FTableRowBase
{
public:
	bool                                          M_Type;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Accelerat;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AcceleratTime;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RingRenge;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDashDistance;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipGimmickDashRingTable) == 0x115266D0, "Wrong alignment on FTresGumiShipGimmickDashRingTable");
static_assert(sizeof(FTresGumiShipGimmickDashRingTable) == 0x115266D0, "Wrong size on FTresGumiShipGimmickDashRingTable");
static_assert(offsetof(FTresGumiShipGimmickDashRingTable, M_Type) == 0x000008, "Member 'FTresGumiShipGimmickDashRingTable::M_Type' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickDashRingTable, M_Accelerat) == 0x00000C, "Member 'FTresGumiShipGimmickDashRingTable::M_Accelerat' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickDashRingTable, M_AcceleratTime) == 0x000010, "Member 'FTresGumiShipGimmickDashRingTable::M_AcceleratTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickDashRingTable, M_RingRenge) == 0x000014, "Member 'FTresGumiShipGimmickDashRingTable::M_RingRenge' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickDashRingTable, M_fDashDistance) == 0x000018, "Member 'FTresGumiShipGimmickDashRingTable::M_fDashDistance' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickCrystalTable
// 0x113D60 (0x11526DE0 - 0x11413080)
struct alignas(0x11526DE0) FTresGumiShipGimmickCrystalTable final : public FTableRowBase
{
public:
	float                                         M_fRecoveryPointRate;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRotSpeed;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_pBrokenVFX;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bRevival;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fRevivalTime;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDistance;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fScaleMax;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fScaleMid;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fScaleMin;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipGimmickCrystalTable) == 0x11526DE0, "Wrong alignment on FTresGumiShipGimmickCrystalTable");
static_assert(sizeof(FTresGumiShipGimmickCrystalTable) == 0x11526DE0, "Wrong size on FTresGumiShipGimmickCrystalTable");
static_assert(offsetof(FTresGumiShipGimmickCrystalTable, M_fRecoveryPointRate) == 0x000008, "Member 'FTresGumiShipGimmickCrystalTable::M_fRecoveryPointRate' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCrystalTable, M_fRotSpeed) == 0x00000C, "Member 'FTresGumiShipGimmickCrystalTable::M_fRotSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCrystalTable, M_pBrokenVFX) == 0x000010, "Member 'FTresGumiShipGimmickCrystalTable::M_pBrokenVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCrystalTable, M_bRevival) == 0x000018, "Member 'FTresGumiShipGimmickCrystalTable::M_bRevival' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCrystalTable, M_fRevivalTime) == 0x00001C, "Member 'FTresGumiShipGimmickCrystalTable::M_fRevivalTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCrystalTable, M_fDistance) == 0x000020, "Member 'FTresGumiShipGimmickCrystalTable::M_fDistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCrystalTable, M_fScaleMax) == 0x000024, "Member 'FTresGumiShipGimmickCrystalTable::M_fScaleMax' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCrystalTable, M_fScaleMid) == 0x000028, "Member 'FTresGumiShipGimmickCrystalTable::M_fScaleMid' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCrystalTable, M_fScaleMin) == 0x00002C, "Member 'FTresGumiShipGimmickCrystalTable::M_fScaleMin' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickTreasureTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipGimmickTreasureTable final : public FTableRowBase
{
public:
	class UParticleSystem*                        M_pEmissionVFX;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_pAcquisitionVFX;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        M_pGearVFX;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTreasureDistance;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTreasureAngleSpeed;                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxAngle;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fGlowMashMin;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fGlowMashMax;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             M_SECoreLoopStart;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             M_SECoreLoopError;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             M_SECoreLoopEnd;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             M_SECoreColorChange;                               // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             M_SEGearSuccess;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipGimmickTreasureTable) == 0x11413080, "Wrong alignment on FTresGumiShipGimmickTreasureTable");
static_assert(sizeof(FTresGumiShipGimmickTreasureTable) == 0x11413080, "Wrong size on FTresGumiShipGimmickTreasureTable");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_pEmissionVFX) == 0x000008, "Member 'FTresGumiShipGimmickTreasureTable::M_pEmissionVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_pAcquisitionVFX) == 0x000010, "Member 'FTresGumiShipGimmickTreasureTable::M_pAcquisitionVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_pGearVFX) == 0x000018, "Member 'FTresGumiShipGimmickTreasureTable::M_pGearVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_fTreasureDistance) == 0x000020, "Member 'FTresGumiShipGimmickTreasureTable::M_fTreasureDistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_fTreasureAngleSpeed) == 0x000024, "Member 'FTresGumiShipGimmickTreasureTable::M_fTreasureAngleSpeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_fMaxAngle) == 0x000028, "Member 'FTresGumiShipGimmickTreasureTable::M_fMaxAngle' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_fGlowMashMin) == 0x00002C, "Member 'FTresGumiShipGimmickTreasureTable::M_fGlowMashMin' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_fGlowMashMax) == 0x000030, "Member 'FTresGumiShipGimmickTreasureTable::M_fGlowMashMax' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_SECoreLoopStart) == 0x000038, "Member 'FTresGumiShipGimmickTreasureTable::M_SECoreLoopStart' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_SECoreLoopError) == 0x000040, "Member 'FTresGumiShipGimmickTreasureTable::M_SECoreLoopError' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_SECoreLoopEnd) == 0x000048, "Member 'FTresGumiShipGimmickTreasureTable::M_SECoreLoopEnd' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_SECoreColorChange) == 0x000050, "Member 'FTresGumiShipGimmickTreasureTable::M_SECoreColorChange' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickTreasureTable, M_SEGearSuccess) == 0x000058, "Member 'FTresGumiShipGimmickTreasureTable::M_SEGearSuccess' has a wrong offset!");

// ScriptStruct TresGame.TresSceneColorCsvData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresSceneColorCsvData final : public FTableRowBase
{
public:
	float                                         KHSSceneEmmisive;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightIntensity;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDirectIntensity;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientIntensity;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TintColor;                                         // 0x0018(0x112EAE80)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSceneColorCsvData) == 0x11413080, "Wrong alignment on FTresSceneColorCsvData");
static_assert(sizeof(FTresSceneColorCsvData) == 0x11413080, "Wrong size on FTresSceneColorCsvData");
static_assert(offsetof(FTresSceneColorCsvData, KHSSceneEmmisive) == 0x000008, "Member 'FTresSceneColorCsvData::KHSSceneEmmisive' has a wrong offset!");
static_assert(offsetof(FTresSceneColorCsvData, LightIntensity) == 0x00000C, "Member 'FTresSceneColorCsvData::LightIntensity' has a wrong offset!");
static_assert(offsetof(FTresSceneColorCsvData, InDirectIntensity) == 0x000010, "Member 'FTresSceneColorCsvData::InDirectIntensity' has a wrong offset!");
static_assert(offsetof(FTresSceneColorCsvData, AmbientIntensity) == 0x000014, "Member 'FTresSceneColorCsvData::AmbientIntensity' has a wrong offset!");
static_assert(offsetof(FTresSceneColorCsvData, TintColor) == 0x000018, "Member 'FTresSceneColorCsvData::TintColor' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickSwCannonTable
// 0x114BC0 (0x11527C40 - 0x11413080)
struct alignas(0x11527C40) FTresGumiShipGimmickSwCannonTable final : public FTableRowBase
{
public:
	class UParticleSystem*                        M_pSwDeadVFX;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vSwDeadOffset;                                   // 0x0010(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSwDistance;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresGumiShipDropPrizeData             M_SwItem;                                          // 0x0020(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         M_fAnglespeed;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxYaw;                                         // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxPitch;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMinPitch;                                       // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSwPcDistance;                                   // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_CannonHP;                                        // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLaserSavingTime;                                // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTriggerReleaseTime;                             // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTriggerWaitTime;                                // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSwRespawnTime;                                  // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipGimmickSwCannonTable) == 0x11527C40, "Wrong alignment on FTresGumiShipGimmickSwCannonTable");
static_assert(sizeof(FTresGumiShipGimmickSwCannonTable) == 0x11527C40, "Wrong size on FTresGumiShipGimmickSwCannonTable");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_pSwDeadVFX) == 0x000008, "Member 'FTresGumiShipGimmickSwCannonTable::M_pSwDeadVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_vSwDeadOffset) == 0x000010, "Member 'FTresGumiShipGimmickSwCannonTable::M_vSwDeadOffset' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_fSwDistance) == 0x00001C, "Member 'FTresGumiShipGimmickSwCannonTable::M_fSwDistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_SwItem) == 0x000020, "Member 'FTresGumiShipGimmickSwCannonTable::M_SwItem' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_fAnglespeed) == 0x0000C0, "Member 'FTresGumiShipGimmickSwCannonTable::M_fAnglespeed' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_fMaxYaw) == 0x0000C4, "Member 'FTresGumiShipGimmickSwCannonTable::M_fMaxYaw' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_fMaxPitch) == 0x0000C8, "Member 'FTresGumiShipGimmickSwCannonTable::M_fMaxPitch' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_fMinPitch) == 0x0000CC, "Member 'FTresGumiShipGimmickSwCannonTable::M_fMinPitch' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_fSwPcDistance) == 0x0000D0, "Member 'FTresGumiShipGimmickSwCannonTable::M_fSwPcDistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_CannonHP) == 0x0000D4, "Member 'FTresGumiShipGimmickSwCannonTable::M_CannonHP' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_fLaserSavingTime) == 0x0000D8, "Member 'FTresGumiShipGimmickSwCannonTable::M_fLaserSavingTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_fTriggerReleaseTime) == 0x0000DC, "Member 'FTresGumiShipGimmickSwCannonTable::M_fTriggerReleaseTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_fTriggerWaitTime) == 0x0000E0, "Member 'FTresGumiShipGimmickSwCannonTable::M_fTriggerWaitTime' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickSwCannonTable, M_fSwRespawnTime) == 0x0000E4, "Member 'FTresGumiShipGimmickSwCannonTable::M_fSwRespawnTime' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipGimmickCannonTable
// 0x115480 (0x11528500 - 0x11413080)
struct alignas(0x11528500) FTresGumiShipGimmickCannonTable final : public FTableRowBase
{
public:
	class UParticleSystem*                        M_pDeadVFX;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_vDeadOffset;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCannonDistance;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresGumiShipDropPrizeData             M_Item;                                            // 0x0020(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         M_fPcDistance;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_MultiCannon;                                     // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_CannonHP;                                        // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRespawnTime;                                    // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipGimmickCannonTable) == 0x11528500, "Wrong alignment on FTresGumiShipGimmickCannonTable");
static_assert(sizeof(FTresGumiShipGimmickCannonTable) == 0x11528500, "Wrong size on FTresGumiShipGimmickCannonTable");
static_assert(offsetof(FTresGumiShipGimmickCannonTable, M_pDeadVFX) == 0x000008, "Member 'FTresGumiShipGimmickCannonTable::M_pDeadVFX' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCannonTable, M_vDeadOffset) == 0x000010, "Member 'FTresGumiShipGimmickCannonTable::M_vDeadOffset' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCannonTable, M_fCannonDistance) == 0x00001C, "Member 'FTresGumiShipGimmickCannonTable::M_fCannonDistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCannonTable, M_Item) == 0x000020, "Member 'FTresGumiShipGimmickCannonTable::M_Item' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCannonTable, M_fPcDistance) == 0x0000C0, "Member 'FTresGumiShipGimmickCannonTable::M_fPcDistance' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCannonTable, M_MultiCannon) == 0x0000C4, "Member 'FTresGumiShipGimmickCannonTable::M_MultiCannon' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCannonTable, M_CannonHP) == 0x0000C8, "Member 'FTresGumiShipGimmickCannonTable::M_CannonHP' has a wrong offset!");
static_assert(offsetof(FTresGumiShipGimmickCannonTable, M_fRespawnTime) == 0x0000CC, "Member 'FTresGumiShipGimmickCannonTable::M_fRespawnTime' has a wrong offset!");

// ScriptStruct TresGame.TresTsAwardData
// 0x0020 (0x0020 - 0x0000)
struct FTresTsAwardData final
{
public:
	class FName                                   M_Key;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_DevelopName;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsGet;                                           // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTsAwardData) == 0x000008, "Wrong alignment on FTresTsAwardData");
static_assert(sizeof(FTresTsAwardData) == 0x000020, "Wrong size on FTresTsAwardData");
static_assert(offsetof(FTresTsAwardData, M_Key) == 0x000000, "Member 'FTresTsAwardData::M_Key' has a wrong offset!");
static_assert(offsetof(FTresTsAwardData, M_DevelopName) == 0x000008, "Member 'FTresTsAwardData::M_DevelopName' has a wrong offset!");
static_assert(offsetof(FTresTsAwardData, M_IsGet) == 0x000018, "Member 'FTresTsAwardData::M_IsGet' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipItemlotteryDataTable
// 0x117040 (0x1152A0C0 - 0x11413080)
struct alignas(0x1152A0C0) FTresGumiShipItemlotteryDataTable final : public FTableRowBase
{
public:
	struct FTresGumiShipDropPrizeData             M_Itemlottery;                                     // 0x0008(0x00A0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EGUMI_SHIP_DROPITEM_RARITY                    M_Rarity;                                          // 0x00A8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ApperProb;                                       // 0x00AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipItemlotteryDataTable) == 0x1152A0C0, "Wrong alignment on FTresGumiShipItemlotteryDataTable");
static_assert(sizeof(FTresGumiShipItemlotteryDataTable) == 0x1152A0C0, "Wrong size on FTresGumiShipItemlotteryDataTable");
static_assert(offsetof(FTresGumiShipItemlotteryDataTable, M_Itemlottery) == 0x000008, "Member 'FTresGumiShipItemlotteryDataTable::M_Itemlottery' has a wrong offset!");
static_assert(offsetof(FTresGumiShipItemlotteryDataTable, M_Rarity) == 0x0000A8, "Member 'FTresGumiShipItemlotteryDataTable::M_Rarity' has a wrong offset!");
static_assert(offsetof(FTresGumiShipItemlotteryDataTable, M_ApperProb) == 0x0000AC, "Member 'FTresGumiShipItemlotteryDataTable::M_ApperProb' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipBattleMisisonBonusWithConditionF
// 0x1152A3E0 (0x1152A3E0 - 0x0000)
struct alignas(0x1152A3E0) FTresGumiShipBattleMisisonBonusWithConditionF final
{
public:
	float                                         M_fBonusPoint;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_dConditionValue;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipBattleMisisonBonusWithConditionF) == 0x1152A3E0, "Wrong alignment on FTresGumiShipBattleMisisonBonusWithConditionF");
static_assert(sizeof(FTresGumiShipBattleMisisonBonusWithConditionF) == 0x1152A3E0, "Wrong size on FTresGumiShipBattleMisisonBonusWithConditionF");
static_assert(offsetof(FTresGumiShipBattleMisisonBonusWithConditionF, M_fBonusPoint) == 0x000000, "Member 'FTresGumiShipBattleMisisonBonusWithConditionF::M_fBonusPoint' has a wrong offset!");
static_assert(offsetof(FTresGumiShipBattleMisisonBonusWithConditionF, M_dConditionValue) == 0x000004, "Member 'FTresGumiShipBattleMisisonBonusWithConditionF::M_dConditionValue' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipMovemnetParam
// 0x11B7A (0x11B7A - 0x0000)
struct alignas(0x11B7A) FTresGumiShipMovemnetParam final
{
public:
	uint8                                         Pad_0[0x34];                                       // 0x0000(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipMovemnetParam) == 0x011B7A, "Wrong alignment on FTresGumiShipMovemnetParam");
static_assert(sizeof(FTresGumiShipMovemnetParam) == 0x011B7A, "Wrong size on FTresGumiShipMovemnetParam");

// ScriptStruct TresGame.TresWinniePuzzleBoundStyleParam
// 0x115991E0 (0x115991E0 - 0x0000)
struct alignas(0x115991E0) FTresWinniePuzzleBoundStyleParam final
{
public:
	EWinniePuzzleBoundStartMoveDirection          StartMoveDirection;                                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MoveStartColumn;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveEndColumnNumDiff;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryRow;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryColumn;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstTargetRow;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoundTimes;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleBoundStyleParam) == 0x115991E0, "Wrong alignment on FTresWinniePuzzleBoundStyleParam");
static_assert(sizeof(FTresWinniePuzzleBoundStyleParam) == 0x115991E0, "Wrong size on FTresWinniePuzzleBoundStyleParam");
static_assert(offsetof(FTresWinniePuzzleBoundStyleParam, StartMoveDirection) == 0x000000, "Member 'FTresWinniePuzzleBoundStyleParam::StartMoveDirection' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBoundStyleParam, MoveStartColumn) == 0x000004, "Member 'FTresWinniePuzzleBoundStyleParam::MoveStartColumn' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBoundStyleParam, MoveEndColumnNumDiff) == 0x000008, "Member 'FTresWinniePuzzleBoundStyleParam::MoveEndColumnNumDiff' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBoundStyleParam, EntryRow) == 0x00000C, "Member 'FTresWinniePuzzleBoundStyleParam::EntryRow' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBoundStyleParam, EntryColumn) == 0x000010, "Member 'FTresWinniePuzzleBoundStyleParam::EntryColumn' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBoundStyleParam, FirstTargetRow) == 0x000014, "Member 'FTresWinniePuzzleBoundStyleParam::FirstTargetRow' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBoundStyleParam, BoundTimes) == 0x000018, "Member 'FTresWinniePuzzleBoundStyleParam::BoundTimes' has a wrong offset!");

// ScriptStruct TresGame.LockAtChangeInfo
// 0x1152BE80 (0x1152BE80 - 0x0000)
struct alignas(0x1152BE80) FLockAtChangeInfo final
{
public:
	float                                         M_fChangeDot;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      M_eInterpFunction;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fInterpSec;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fInterpExp;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLockAtChangeInfo) == 0x1152BE80, "Wrong alignment on FLockAtChangeInfo");
static_assert(sizeof(FLockAtChangeInfo) == 0x1152BE80, "Wrong size on FLockAtChangeInfo");
static_assert(offsetof(FLockAtChangeInfo, M_fChangeDot) == 0x000000, "Member 'FLockAtChangeInfo::M_fChangeDot' has a wrong offset!");
static_assert(offsetof(FLockAtChangeInfo, M_eInterpFunction) == 0x000004, "Member 'FLockAtChangeInfo::M_eInterpFunction' has a wrong offset!");
static_assert(offsetof(FLockAtChangeInfo, M_fInterpSec) == 0x000008, "Member 'FLockAtChangeInfo::M_fInterpSec' has a wrong offset!");
static_assert(offsetof(FLockAtChangeInfo, M_fInterpExp) == 0x00000C, "Member 'FLockAtChangeInfo::M_fInterpExp' has a wrong offset!");

// ScriptStruct TresGame.TresStoryEpisodeData
// 0x0048 (0x0048 - 0x0000)
struct FTresStoryEpisodeData final
{
public:
	struct FTresUIGameFlagText                    EpisodeText;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconAsset;                                         // 0x0028(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresStoryEpisodeData) == 0x000008, "Wrong alignment on FTresStoryEpisodeData");
static_assert(sizeof(FTresStoryEpisodeData) == 0x000048, "Wrong size on FTresStoryEpisodeData");
static_assert(offsetof(FTresStoryEpisodeData, EpisodeText) == 0x000000, "Member 'FTresStoryEpisodeData::EpisodeText' has a wrong offset!");
static_assert(offsetof(FTresStoryEpisodeData, IconAsset) == 0x000028, "Member 'FTresStoryEpisodeData::IconAsset' has a wrong offset!");

// ScriptStruct TresGame.TresTinyShipPlanData
// 0x119D20 (0x1152CDA0 - 0x11413080)
struct FTresTinyShipPlanData final : public FTableRowBase
{
public:
	struct FTresGummiShipHeader                   M_header;                                          // 0x0008(0x1152CDA0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTresGummiShipSticker                  M_Sticker[0x8];                                    // 0x0028(0x001C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTresGummiShipPartsStruct>      M_body;                                            // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTinyShipPlanData) == 0x1152CDA0, "Wrong alignment on FTresTinyShipPlanData");
static_assert(sizeof(FTresTinyShipPlanData) == 0x1152CDA0, "Wrong size on FTresTinyShipPlanData");
static_assert(offsetof(FTresTinyShipPlanData, M_header) == 0x000008, "Member 'FTresTinyShipPlanData::M_header' has a wrong offset!");
static_assert(offsetof(FTresTinyShipPlanData, M_Sticker) == 0x000028, "Member 'FTresTinyShipPlanData::M_Sticker' has a wrong offset!");
static_assert(offsetof(FTresTinyShipPlanData, M_body) == 0x000108, "Member 'FTresTinyShipPlanData::M_body' has a wrong offset!");

// ScriptStruct TresGame.TresFoodCompleteMealEffectDataTable
// 0x132180 (0x11545200 - 0x11413080)
struct alignas(0x11545200) FTresFoodCompleteMealEffectDataTable final : public FTableRowBase
{
public:
	ETresAbilityKind                              M_AbilityPlus;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_Level;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFoodCompleteMealEffectDataTable) == 0x11545200, "Wrong alignment on FTresFoodCompleteMealEffectDataTable");
static_assert(sizeof(FTresFoodCompleteMealEffectDataTable) == 0x11545200, "Wrong size on FTresFoodCompleteMealEffectDataTable");
static_assert(offsetof(FTresFoodCompleteMealEffectDataTable, M_AbilityPlus) == 0x000008, "Member 'FTresFoodCompleteMealEffectDataTable::M_AbilityPlus' has a wrong offset!");
static_assert(offsetof(FTresFoodCompleteMealEffectDataTable, M_Level) == 0x00000C, "Member 'FTresFoodCompleteMealEffectDataTable::M_Level' has a wrong offset!");

// ScriptStruct TresGame.TresGummiShipPlanData
// 0x119D20 (0x1152CDA0 - 0x11413080)
struct FTresGummiShipPlanData final : public FTableRowBase
{
public:
	struct FTresGummiShipHeader                   M_header;                                          // 0x0008(0x1152CDA0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTresGummiShipAbility                  M_Ability;                                         // 0x0028(0x0016)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresGummiShipSticker                  M_Sticker[0x8];                                    // 0x0040(0x001C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTresGummiShipPartsStruct>      M_body;                                            // 0x0120(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiShipPlanData) == 0x1152CDA0, "Wrong alignment on FTresGummiShipPlanData");
static_assert(sizeof(FTresGummiShipPlanData) == 0x1152CDA0, "Wrong size on FTresGummiShipPlanData");
static_assert(offsetof(FTresGummiShipPlanData, M_header) == 0x000008, "Member 'FTresGummiShipPlanData::M_header' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPlanData, M_Ability) == 0x000028, "Member 'FTresGummiShipPlanData::M_Ability' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPlanData, M_Sticker) == 0x000040, "Member 'FTresGummiShipPlanData::M_Sticker' has a wrong offset!");
static_assert(offsetof(FTresGummiShipPlanData, M_body) == 0x000120, "Member 'FTresGummiShipPlanData::M_body' has a wrong offset!");

// ScriptStruct TresGame.TresGummiPartsStruct
// 0x1152E940 (0x1152E940 - 0x0000)
struct FTresGummiPartsStruct final
{
public:
	uint8                                         M_nSizeX;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nSizeY;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_nSizeZ;                                          // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         M_nCost;                                           // 0x0004(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nHP;                                             // 0x0006(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nSpeed;                                          // 0x0008(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nPower;                                          // 0x000A(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nRoll;                                           // 0x000C(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nAttack;                                         // 0x000E(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nTurn;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isMaterial;                                      // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isPattern;                                       // 0x0013(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isSticker;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isColorChange;                                   // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isFlip;                                          // 0x0016(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isAnim;                                          // 0x0017(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isUVAnim;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fPreviewScale;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresGummiGraphicData                  M_GraphicData;                                     // 0x0020(0x1152E940)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiPartsStruct) == 0x1152E940, "Wrong alignment on FTresGummiPartsStruct");
static_assert(sizeof(FTresGummiPartsStruct) == 0x1152E940, "Wrong size on FTresGummiPartsStruct");
static_assert(offsetof(FTresGummiPartsStruct, M_nSizeX) == 0x000000, "Member 'FTresGummiPartsStruct::M_nSizeX' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_nSizeY) == 0x000001, "Member 'FTresGummiPartsStruct::M_nSizeY' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_nSizeZ) == 0x000002, "Member 'FTresGummiPartsStruct::M_nSizeZ' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_nCost) == 0x000004, "Member 'FTresGummiPartsStruct::M_nCost' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_nHP) == 0x000006, "Member 'FTresGummiPartsStruct::M_nHP' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_nSpeed) == 0x000008, "Member 'FTresGummiPartsStruct::M_nSpeed' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_nPower) == 0x00000A, "Member 'FTresGummiPartsStruct::M_nPower' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_nRoll) == 0x00000C, "Member 'FTresGummiPartsStruct::M_nRoll' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_nAttack) == 0x00000E, "Member 'FTresGummiPartsStruct::M_nAttack' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_nTurn) == 0x000010, "Member 'FTresGummiPartsStruct::M_nTurn' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_isMaterial) == 0x000012, "Member 'FTresGummiPartsStruct::M_isMaterial' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_isPattern) == 0x000013, "Member 'FTresGummiPartsStruct::M_isPattern' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_isSticker) == 0x000014, "Member 'FTresGummiPartsStruct::M_isSticker' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_isColorChange) == 0x000015, "Member 'FTresGummiPartsStruct::M_isColorChange' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_isFlip) == 0x000016, "Member 'FTresGummiPartsStruct::M_isFlip' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_isAnim) == 0x000017, "Member 'FTresGummiPartsStruct::M_isAnim' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_isUVAnim) == 0x000018, "Member 'FTresGummiPartsStruct::M_isUVAnim' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_fPreviewScale) == 0x00001C, "Member 'FTresGummiPartsStruct::M_fPreviewScale' has a wrong offset!");
static_assert(offsetof(FTresGummiPartsStruct, M_GraphicData) == 0x000020, "Member 'FTresGummiPartsStruct::M_GraphicData' has a wrong offset!");

// ScriptStruct TresGame.TresSplineMeshExtensionStaticMeshInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresSplineMeshExtensionStaticMeshInfo final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEX_SplineActor*                      Spline;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReverseMeshFront;                                // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSplineMeshExtensionStaticMeshInfo) == 0x000008, "Wrong alignment on FTresSplineMeshExtensionStaticMeshInfo");
static_assert(sizeof(FTresSplineMeshExtensionStaticMeshInfo) == 0x000018, "Wrong size on FTresSplineMeshExtensionStaticMeshInfo");
static_assert(offsetof(FTresSplineMeshExtensionStaticMeshInfo, StaticMesh) == 0x000000, "Member 'FTresSplineMeshExtensionStaticMeshInfo::StaticMesh' has a wrong offset!");
static_assert(offsetof(FTresSplineMeshExtensionStaticMeshInfo, Spline) == 0x000008, "Member 'FTresSplineMeshExtensionStaticMeshInfo::Spline' has a wrong offset!");
static_assert(offsetof(FTresSplineMeshExtensionStaticMeshInfo, IsReverseMeshFront) == 0x000010, "Member 'FTresSplineMeshExtensionStaticMeshInfo::IsReverseMeshFront' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleLinearLerpMoveParam
// 0x5494 (0x5494 - 0x0000)
struct alignas(0x5494) FTresWinniePuzzleLinearLerpMoveParam final
{
public:
	uint8                                         Pad_0[0x100];                                      // 0x0000(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleLinearLerpMoveParam) == 0x005494, "Wrong alignment on FTresWinniePuzzleLinearLerpMoveParam");
static_assert(sizeof(FTresWinniePuzzleLinearLerpMoveParam) == 0x005494, "Wrong size on FTresWinniePuzzleLinearLerpMoveParam");

// ScriptStruct TresGame.TresGummiPlanInfoData
// 0x115325F0 (0x115325F0 - 0x0000)
struct alignas(0x115325F0) FTresGummiPlanInfoData final
{
public:
	class FString                                 M_PlanName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nNowCost;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nMaxCost;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nNowHP;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nMaxHP;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nNowAttack;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nMaxAttack;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nNowPower;                                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nMaxPower;                                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nNowTurn;                                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nMaxTurn;                                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nNowRoll;                                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nMaxRoll;                                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nNowSpeed;                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nMaxSpeed;                                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nNowAbility;                                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nMaxAbility;                                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiPlanInfoData) == 0x115325F0, "Wrong alignment on FTresGummiPlanInfoData");
static_assert(sizeof(FTresGummiPlanInfoData) == 0x115325F0, "Wrong size on FTresGummiPlanInfoData");
static_assert(offsetof(FTresGummiPlanInfoData, M_PlanName) == 0x000000, "Member 'FTresGummiPlanInfoData::M_PlanName' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nNowCost) == 0x000010, "Member 'FTresGummiPlanInfoData::M_nNowCost' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nMaxCost) == 0x000014, "Member 'FTresGummiPlanInfoData::M_nMaxCost' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nNowHP) == 0x000018, "Member 'FTresGummiPlanInfoData::M_nNowHP' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nMaxHP) == 0x00001C, "Member 'FTresGummiPlanInfoData::M_nMaxHP' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nNowAttack) == 0x000020, "Member 'FTresGummiPlanInfoData::M_nNowAttack' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nMaxAttack) == 0x000024, "Member 'FTresGummiPlanInfoData::M_nMaxAttack' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nNowPower) == 0x000028, "Member 'FTresGummiPlanInfoData::M_nNowPower' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nMaxPower) == 0x00002C, "Member 'FTresGummiPlanInfoData::M_nMaxPower' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nNowTurn) == 0x000030, "Member 'FTresGummiPlanInfoData::M_nNowTurn' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nMaxTurn) == 0x000034, "Member 'FTresGummiPlanInfoData::M_nMaxTurn' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nNowRoll) == 0x000038, "Member 'FTresGummiPlanInfoData::M_nNowRoll' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nMaxRoll) == 0x00003C, "Member 'FTresGummiPlanInfoData::M_nMaxRoll' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nNowSpeed) == 0x000040, "Member 'FTresGummiPlanInfoData::M_nNowSpeed' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nMaxSpeed) == 0x000044, "Member 'FTresGummiPlanInfoData::M_nMaxSpeed' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nNowAbility) == 0x000048, "Member 'FTresGummiPlanInfoData::M_nNowAbility' has a wrong offset!");
static_assert(offsetof(FTresGummiPlanInfoData, M_nMaxAbility) == 0x00004C, "Member 'FTresGummiPlanInfoData::M_nMaxAbility' has a wrong offset!");

// ScriptStruct TresGame.TresGummiGraphicDataTable
// 0x11FFB0 (0x11533030 - 0x11413080)
struct alignas(0x11533030) FTresGummiGraphicDataTable final : public FTableRowBase
{
public:
	class USkeletalMesh*                          M_pSkeltalMesh;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_BaseColorTexture;                                // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BaseColorTexUVIndex;                             // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_EmissiveColor;                                   // 0x001C(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_EmissiveMaskChannel;                             // 0x002C(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_EmissiveMaskTexture;                             // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EmissiveMaskTexUVIndex;                          // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EMS_AdjustColor;                                 // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EMS_SineMax;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EMS_SineMin;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EMS_SineSpeed;                                   // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_EMS_UseColorTable;                               // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_NormalTexture;                                   // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_NormalTexUVIndex;                                // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_AOTexture;                                       // 0x0070(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AOTexUVIndex;                                    // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_CT1_PaletteTexture;                              // 0x0080(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT2_PaletteNum;                                  // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_CT3_MaskTexture;                                 // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT4_MaskTexUVIndex;                              // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT5_MaskTexUVTiling;                             // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_CT_CustomColor;                                  // 0x00A0(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT_PaletteUse;                                   // 0x00B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_PTN1_MaskTexture;                                // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture1_R_Color;                       // 0x00C0(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture2_G_Color;                       // 0x00D0(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture3_B_Color;                       // 0x00E0(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture4_A_Color;                       // 0x00F0(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_PTN2_NormalTexture;                              // 0x0100(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_PTN3_SetTexture;                                 // 0x0108(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PTN4_TexUVIndex;                                 // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PTN5_TexUVTiling;                                // 0x0114(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PTN_MetalicToSpecular;                           // 0x0118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_MaskTexture;                                     // 0x0120(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MaskTexUVIndex;                                  // 0x0128(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_R1_ColorMulti;                                   // 0x012C(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R2_Metallic;                                     // 0x013C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R3_Specular;                                     // 0x0140(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R4_Roughness;                                    // 0x0144(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_R5_Emissive;                                     // 0x0148(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_R_MaskChannel_1;                                 // 0x0158(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R_NormalStrength;                                // 0x0168(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R_PatternID;                                     // 0x016C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R_UVTiling;                                      // 0x0170(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_R_UVIndex;                                       // 0x0174(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_G1_ColorMulti;                                   // 0x0178(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G2_Metallic;                                     // 0x0188(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G3_Specular;                                     // 0x018C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G4_Roughness;                                    // 0x0190(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_G5_Emissive;                                     // 0x0194(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_G_MaskChannel_1;                                 // 0x01A4(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G_NormalStrength;                                // 0x01B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G_PatternID;                                     // 0x01B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G_UVTiling;                                      // 0x01BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_G_UVIndex;                                       // 0x01C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_B1_ColorMulti;                                   // 0x01C4(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B2_Metallic;                                     // 0x01D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B3_Specular;                                     // 0x01D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B4_Roughness;                                    // 0x01DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_B5_Emissive;                                     // 0x01E0(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_B_MaskChannel_1;                                 // 0x01F0(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B_NormalStrength;                                // 0x0200(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B_PatternID;                                     // 0x0204(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B_UVTiling;                                      // 0x0208(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_B_UVIndex;                                       // 0x020C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_A1_ColorMulti;                                   // 0x0210(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A2_Metallic;                                     // 0x0220(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A3_Specular;                                     // 0x0224(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A4_Roughness;                                    // 0x0228(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_A5_Emissive;                                     // 0x022C(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_A_MaskChannel_1;                                 // 0x023C(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A_NormalStrength;                                // 0x024C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A_PatternID;                                     // 0x0250(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A_UVTiling;                                      // 0x0254(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_A_UVIndex;                                       // 0x0258(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_LightAttenuationChannel;                         // 0x025C(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_LightAttenuationTexture;                         // 0x0270(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LightAttenuationTexUVIndex;                      // 0x0278(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateAxisX;                                     // 0x027C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateAxisY;                                     // 0x0280(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateAxisZ;                                     // 0x0284(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotateSpeed;                                     // 0x0288(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_UVScrollSpeedU;                                  // 0x028C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_UVScrollSpeedV;                                  // 0x0290(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGummiGraphicDataTable) == 0x11533030, "Wrong alignment on FTresGummiGraphicDataTable");
static_assert(sizeof(FTresGummiGraphicDataTable) == 0x11533030, "Wrong size on FTresGummiGraphicDataTable");
static_assert(offsetof(FTresGummiGraphicDataTable, M_pSkeltalMesh) == 0x000008, "Member 'FTresGummiGraphicDataTable::M_pSkeltalMesh' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_BaseColorTexture) == 0x000010, "Member 'FTresGummiGraphicDataTable::M_BaseColorTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_BaseColorTexUVIndex) == 0x000018, "Member 'FTresGummiGraphicDataTable::M_BaseColorTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_EmissiveColor) == 0x00001C, "Member 'FTresGummiGraphicDataTable::M_EmissiveColor' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_EmissiveMaskChannel) == 0x00002C, "Member 'FTresGummiGraphicDataTable::M_EmissiveMaskChannel' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_EmissiveMaskTexture) == 0x000040, "Member 'FTresGummiGraphicDataTable::M_EmissiveMaskTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_EmissiveMaskTexUVIndex) == 0x000048, "Member 'FTresGummiGraphicDataTable::M_EmissiveMaskTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_EMS_AdjustColor) == 0x00004C, "Member 'FTresGummiGraphicDataTable::M_EMS_AdjustColor' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_EMS_SineMax) == 0x000050, "Member 'FTresGummiGraphicDataTable::M_EMS_SineMax' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_EMS_SineMin) == 0x000054, "Member 'FTresGummiGraphicDataTable::M_EMS_SineMin' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_EMS_SineSpeed) == 0x000058, "Member 'FTresGummiGraphicDataTable::M_EMS_SineSpeed' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_EMS_UseColorTable) == 0x00005C, "Member 'FTresGummiGraphicDataTable::M_EMS_UseColorTable' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_NormalTexture) == 0x000060, "Member 'FTresGummiGraphicDataTable::M_NormalTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_NormalTexUVIndex) == 0x000068, "Member 'FTresGummiGraphicDataTable::M_NormalTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_AOTexture) == 0x000070, "Member 'FTresGummiGraphicDataTable::M_AOTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_AOTexUVIndex) == 0x000078, "Member 'FTresGummiGraphicDataTable::M_AOTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_CT1_PaletteTexture) == 0x000080, "Member 'FTresGummiGraphicDataTable::M_CT1_PaletteTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_CT2_PaletteNum) == 0x000088, "Member 'FTresGummiGraphicDataTable::M_CT2_PaletteNum' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_CT3_MaskTexture) == 0x000090, "Member 'FTresGummiGraphicDataTable::M_CT3_MaskTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_CT4_MaskTexUVIndex) == 0x000098, "Member 'FTresGummiGraphicDataTable::M_CT4_MaskTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_CT5_MaskTexUVTiling) == 0x00009C, "Member 'FTresGummiGraphicDataTable::M_CT5_MaskTexUVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_CT_CustomColor) == 0x0000A0, "Member 'FTresGummiGraphicDataTable::M_CT_CustomColor' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_CT_PaletteUse) == 0x0000B0, "Member 'FTresGummiGraphicDataTable::M_CT_PaletteUse' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_PTN1_MaskTexture) == 0x0000B8, "Member 'FTresGummiGraphicDataTable::M_PTN1_MaskTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_PTN1_MaskTexture1_R_Color) == 0x0000C0, "Member 'FTresGummiGraphicDataTable::M_PTN1_MaskTexture1_R_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_PTN1_MaskTexture2_G_Color) == 0x0000D0, "Member 'FTresGummiGraphicDataTable::M_PTN1_MaskTexture2_G_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_PTN1_MaskTexture3_B_Color) == 0x0000E0, "Member 'FTresGummiGraphicDataTable::M_PTN1_MaskTexture3_B_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_PTN1_MaskTexture4_A_Color) == 0x0000F0, "Member 'FTresGummiGraphicDataTable::M_PTN1_MaskTexture4_A_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_PTN2_NormalTexture) == 0x000100, "Member 'FTresGummiGraphicDataTable::M_PTN2_NormalTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_PTN3_SetTexture) == 0x000108, "Member 'FTresGummiGraphicDataTable::M_PTN3_SetTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_PTN4_TexUVIndex) == 0x000110, "Member 'FTresGummiGraphicDataTable::M_PTN4_TexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_PTN5_TexUVTiling) == 0x000114, "Member 'FTresGummiGraphicDataTable::M_PTN5_TexUVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_PTN_MetalicToSpecular) == 0x000118, "Member 'FTresGummiGraphicDataTable::M_PTN_MetalicToSpecular' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_MaskTexture) == 0x000120, "Member 'FTresGummiGraphicDataTable::M_MaskTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_MaskTexUVIndex) == 0x000128, "Member 'FTresGummiGraphicDataTable::M_MaskTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_R1_ColorMulti) == 0x00012C, "Member 'FTresGummiGraphicDataTable::M_R1_ColorMulti' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_R2_Metallic) == 0x00013C, "Member 'FTresGummiGraphicDataTable::M_R2_Metallic' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_R3_Specular) == 0x000140, "Member 'FTresGummiGraphicDataTable::M_R3_Specular' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_R4_Roughness) == 0x000144, "Member 'FTresGummiGraphicDataTable::M_R4_Roughness' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_R5_Emissive) == 0x000148, "Member 'FTresGummiGraphicDataTable::M_R5_Emissive' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_R_MaskChannel_1) == 0x000158, "Member 'FTresGummiGraphicDataTable::M_R_MaskChannel_1' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_R_NormalStrength) == 0x000168, "Member 'FTresGummiGraphicDataTable::M_R_NormalStrength' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_R_PatternID) == 0x00016C, "Member 'FTresGummiGraphicDataTable::M_R_PatternID' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_R_UVTiling) == 0x000170, "Member 'FTresGummiGraphicDataTable::M_R_UVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_R_UVIndex) == 0x000174, "Member 'FTresGummiGraphicDataTable::M_R_UVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_G1_ColorMulti) == 0x000178, "Member 'FTresGummiGraphicDataTable::M_G1_ColorMulti' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_G2_Metallic) == 0x000188, "Member 'FTresGummiGraphicDataTable::M_G2_Metallic' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_G3_Specular) == 0x00018C, "Member 'FTresGummiGraphicDataTable::M_G3_Specular' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_G4_Roughness) == 0x000190, "Member 'FTresGummiGraphicDataTable::M_G4_Roughness' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_G5_Emissive) == 0x000194, "Member 'FTresGummiGraphicDataTable::M_G5_Emissive' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_G_MaskChannel_1) == 0x0001A4, "Member 'FTresGummiGraphicDataTable::M_G_MaskChannel_1' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_G_NormalStrength) == 0x0001B4, "Member 'FTresGummiGraphicDataTable::M_G_NormalStrength' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_G_PatternID) == 0x0001B8, "Member 'FTresGummiGraphicDataTable::M_G_PatternID' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_G_UVTiling) == 0x0001BC, "Member 'FTresGummiGraphicDataTable::M_G_UVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_G_UVIndex) == 0x0001C0, "Member 'FTresGummiGraphicDataTable::M_G_UVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_B1_ColorMulti) == 0x0001C4, "Member 'FTresGummiGraphicDataTable::M_B1_ColorMulti' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_B2_Metallic) == 0x0001D4, "Member 'FTresGummiGraphicDataTable::M_B2_Metallic' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_B3_Specular) == 0x0001D8, "Member 'FTresGummiGraphicDataTable::M_B3_Specular' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_B4_Roughness) == 0x0001DC, "Member 'FTresGummiGraphicDataTable::M_B4_Roughness' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_B5_Emissive) == 0x0001E0, "Member 'FTresGummiGraphicDataTable::M_B5_Emissive' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_B_MaskChannel_1) == 0x0001F0, "Member 'FTresGummiGraphicDataTable::M_B_MaskChannel_1' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_B_NormalStrength) == 0x000200, "Member 'FTresGummiGraphicDataTable::M_B_NormalStrength' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_B_PatternID) == 0x000204, "Member 'FTresGummiGraphicDataTable::M_B_PatternID' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_B_UVTiling) == 0x000208, "Member 'FTresGummiGraphicDataTable::M_B_UVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_B_UVIndex) == 0x00020C, "Member 'FTresGummiGraphicDataTable::M_B_UVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_A1_ColorMulti) == 0x000210, "Member 'FTresGummiGraphicDataTable::M_A1_ColorMulti' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_A2_Metallic) == 0x000220, "Member 'FTresGummiGraphicDataTable::M_A2_Metallic' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_A3_Specular) == 0x000224, "Member 'FTresGummiGraphicDataTable::M_A3_Specular' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_A4_Roughness) == 0x000228, "Member 'FTresGummiGraphicDataTable::M_A4_Roughness' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_A5_Emissive) == 0x00022C, "Member 'FTresGummiGraphicDataTable::M_A5_Emissive' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_A_MaskChannel_1) == 0x00023C, "Member 'FTresGummiGraphicDataTable::M_A_MaskChannel_1' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_A_NormalStrength) == 0x00024C, "Member 'FTresGummiGraphicDataTable::M_A_NormalStrength' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_A_PatternID) == 0x000250, "Member 'FTresGummiGraphicDataTable::M_A_PatternID' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_A_UVTiling) == 0x000254, "Member 'FTresGummiGraphicDataTable::M_A_UVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_A_UVIndex) == 0x000258, "Member 'FTresGummiGraphicDataTable::M_A_UVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_LightAttenuationChannel) == 0x00025C, "Member 'FTresGummiGraphicDataTable::M_LightAttenuationChannel' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_LightAttenuationTexture) == 0x000270, "Member 'FTresGummiGraphicDataTable::M_LightAttenuationTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_LightAttenuationTexUVIndex) == 0x000278, "Member 'FTresGummiGraphicDataTable::M_LightAttenuationTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_RotateAxisX) == 0x00027C, "Member 'FTresGummiGraphicDataTable::M_RotateAxisX' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_RotateAxisY) == 0x000280, "Member 'FTresGummiGraphicDataTable::M_RotateAxisY' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_RotateAxisZ) == 0x000284, "Member 'FTresGummiGraphicDataTable::M_RotateAxisZ' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_RotateSpeed) == 0x000288, "Member 'FTresGummiGraphicDataTable::M_RotateSpeed' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_UVScrollSpeedU) == 0x00028C, "Member 'FTresGummiGraphicDataTable::M_UVScrollSpeedU' has a wrong offset!");
static_assert(offsetof(FTresGummiGraphicDataTable, M_UVScrollSpeedV) == 0x000290, "Member 'FTresGummiGraphicDataTable::M_UVScrollSpeedV' has a wrong offset!");

// ScriptStruct TresGame.TresGummiMaterialDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGummiMaterialDataTable final : public FTableRowBase
{
public:
	class UMaterialInstance*                      M_MaterialInstance_Base;                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      M_MaterialInstance_Deco;                           // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_CT1_PaletteTexture;                              // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT2_PaletteNum;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_CT3_MaskTexture_Base;                            // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_CT3_MaskTexture_Deco;                            // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT4_MaskTexUVIndex;                              // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT5_MaskTexUVTiling;                             // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_CT_CustomColor;                                  // 0x0040(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CT_PaletteUse;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isPattern;                                       // 0x0054(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isSticker;                                       // 0x0055(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isColorChange;                                   // 0x0056(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGummiMaterialDataTable) == 0x11413080, "Wrong alignment on FTresGummiMaterialDataTable");
static_assert(sizeof(FTresGummiMaterialDataTable) == 0x11413080, "Wrong size on FTresGummiMaterialDataTable");
static_assert(offsetof(FTresGummiMaterialDataTable, M_MaterialInstance_Base) == 0x000008, "Member 'FTresGummiMaterialDataTable::M_MaterialInstance_Base' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_MaterialInstance_Deco) == 0x000010, "Member 'FTresGummiMaterialDataTable::M_MaterialInstance_Deco' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_CT1_PaletteTexture) == 0x000018, "Member 'FTresGummiMaterialDataTable::M_CT1_PaletteTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_CT2_PaletteNum) == 0x000020, "Member 'FTresGummiMaterialDataTable::M_CT2_PaletteNum' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_CT3_MaskTexture_Base) == 0x000028, "Member 'FTresGummiMaterialDataTable::M_CT3_MaskTexture_Base' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_CT3_MaskTexture_Deco) == 0x000030, "Member 'FTresGummiMaterialDataTable::M_CT3_MaskTexture_Deco' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_CT4_MaskTexUVIndex) == 0x000038, "Member 'FTresGummiMaterialDataTable::M_CT4_MaskTexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_CT5_MaskTexUVTiling) == 0x00003C, "Member 'FTresGummiMaterialDataTable::M_CT5_MaskTexUVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_CT_CustomColor) == 0x000040, "Member 'FTresGummiMaterialDataTable::M_CT_CustomColor' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_CT_PaletteUse) == 0x000050, "Member 'FTresGummiMaterialDataTable::M_CT_PaletteUse' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_isPattern) == 0x000054, "Member 'FTresGummiMaterialDataTable::M_isPattern' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_isSticker) == 0x000055, "Member 'FTresGummiMaterialDataTable::M_isSticker' has a wrong offset!");
static_assert(offsetof(FTresGummiMaterialDataTable, M_isColorChange) == 0x000056, "Member 'FTresGummiMaterialDataTable::M_isColorChange' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleVibrationParam
// 0x541B (0x541B - 0x0000)
struct alignas(0x541B) FTresWinniePuzzleVibrationParam final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleVibrationParam) == 0x00541B, "Wrong alignment on FTresWinniePuzzleVibrationParam");
static_assert(sizeof(FTresWinniePuzzleVibrationParam) == 0x00541B, "Wrong size on FTresWinniePuzzleVibrationParam");

// ScriptStruct TresGame.TresGummiMissionDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGummiMissionDataTable final : public FTableRowBase
{
public:
	class FName                                   M_nMemo;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isUse;                                           // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_nDispIndex;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGummiMissionRarity                       M_nRarity;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_nTitleTextID;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresGummiMissionReleaseCondition             M_nReleaseCondition;                               // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_nAfterConditionTextID;                           // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_nBeforeConditionTextID;                          // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_nAfterGetItemTextID;                             // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_nBeforeGetItemTextID;                            // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_nMissionClearNum;                                // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_isHideClearNum;                                  // 0x007C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefGumiParts                         M_nReward1;                                        // 0x007D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        M_nReward1Num;                                     // 0x007E(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiMaterial>              M_nReward2;                                        // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiPattern>               M_nReward3;                                        // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiSticker>               M_nReward4;                                        // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiShipBP>                M_nReward5;                                        // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiEtc>                   M_nReward6;                                        // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiMissionDataTable) == 0x11413080, "Wrong alignment on FTresGummiMissionDataTable");
static_assert(sizeof(FTresGummiMissionDataTable) == 0x11413080, "Wrong size on FTresGummiMissionDataTable");
static_assert(offsetof(FTresGummiMissionDataTable, M_nMemo) == 0x000008, "Member 'FTresGummiMissionDataTable::M_nMemo' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_isUse) == 0x000010, "Member 'FTresGummiMissionDataTable::M_isUse' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nDispIndex) == 0x000014, "Member 'FTresGummiMissionDataTable::M_nDispIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nRarity) == 0x000018, "Member 'FTresGummiMissionDataTable::M_nRarity' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nTitleTextID) == 0x000020, "Member 'FTresGummiMissionDataTable::M_nTitleTextID' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nReleaseCondition) == 0x000030, "Member 'FTresGummiMissionDataTable::M_nReleaseCondition' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nAfterConditionTextID) == 0x000038, "Member 'FTresGummiMissionDataTable::M_nAfterConditionTextID' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nBeforeConditionTextID) == 0x000048, "Member 'FTresGummiMissionDataTable::M_nBeforeConditionTextID' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nAfterGetItemTextID) == 0x000058, "Member 'FTresGummiMissionDataTable::M_nAfterGetItemTextID' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nBeforeGetItemTextID) == 0x000068, "Member 'FTresGummiMissionDataTable::M_nBeforeGetItemTextID' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nMissionClearNum) == 0x000078, "Member 'FTresGummiMissionDataTable::M_nMissionClearNum' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_isHideClearNum) == 0x00007C, "Member 'FTresGummiMissionDataTable::M_isHideClearNum' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nReward1) == 0x00007D, "Member 'FTresGummiMissionDataTable::M_nReward1' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nReward1Num) == 0x00007E, "Member 'FTresGummiMissionDataTable::M_nReward1Num' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nReward2) == 0x000080, "Member 'FTresGummiMissionDataTable::M_nReward2' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nReward3) == 0x000090, "Member 'FTresGummiMissionDataTable::M_nReward3' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nReward4) == 0x0000A0, "Member 'FTresGummiMissionDataTable::M_nReward4' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nReward5) == 0x0000B0, "Member 'FTresGummiMissionDataTable::M_nReward5' has a wrong offset!");
static_assert(offsetof(FTresGummiMissionDataTable, M_nReward6) == 0x0000C0, "Member 'FTresGummiMissionDataTable::M_nReward6' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_LivelyFlarePillarPoint
// 0x11E81 (0x11E81 - 0x0000)
struct alignas(0x11E81) FTresEnemy_e_ex773_LivelyFlarePillarPoint final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_LivelyFlarePillarPoint) == 0x011E81, "Wrong alignment on FTresEnemy_e_ex773_LivelyFlarePillarPoint");
static_assert(sizeof(FTresEnemy_e_ex773_LivelyFlarePillarPoint) == 0x011E81, "Wrong size on FTresEnemy_e_ex773_LivelyFlarePillarPoint");

// ScriptStruct TresGame.TresGummiPatternDataTable
// 0x126320 (0x115393A0 - 0x11413080)
struct alignas(0x115393A0) FTresGummiPatternDataTable final : public FTableRowBase
{
public:
	class UTexture2D*                             M_PTN1_MaskTexture;                                // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture1_R_Color;                       // 0x0010(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture2_G_Color;                       // 0x0020(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture3_B_Color;                       // 0x0030(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_PTN1_MaskTexture4_A_Color;                       // 0x0040(0x112EAE80)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_PTN2_NormalTexture;                              // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             M_PTN3_SetTexture;                                 // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PTN4_TexUVIndex;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PTN5_TexUVTiling;                                // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PTN_MetalicToSpecular;                           // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGummiPatternDataTable) == 0x115393A0, "Wrong alignment on FTresGummiPatternDataTable");
static_assert(sizeof(FTresGummiPatternDataTable) == 0x115393A0, "Wrong size on FTresGummiPatternDataTable");
static_assert(offsetof(FTresGummiPatternDataTable, M_PTN1_MaskTexture) == 0x000008, "Member 'FTresGummiPatternDataTable::M_PTN1_MaskTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiPatternDataTable, M_PTN1_MaskTexture1_R_Color) == 0x000010, "Member 'FTresGummiPatternDataTable::M_PTN1_MaskTexture1_R_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiPatternDataTable, M_PTN1_MaskTexture2_G_Color) == 0x000020, "Member 'FTresGummiPatternDataTable::M_PTN1_MaskTexture2_G_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiPatternDataTable, M_PTN1_MaskTexture3_B_Color) == 0x000030, "Member 'FTresGummiPatternDataTable::M_PTN1_MaskTexture3_B_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiPatternDataTable, M_PTN1_MaskTexture4_A_Color) == 0x000040, "Member 'FTresGummiPatternDataTable::M_PTN1_MaskTexture4_A_Color' has a wrong offset!");
static_assert(offsetof(FTresGummiPatternDataTable, M_PTN2_NormalTexture) == 0x000050, "Member 'FTresGummiPatternDataTable::M_PTN2_NormalTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiPatternDataTable, M_PTN3_SetTexture) == 0x000058, "Member 'FTresGummiPatternDataTable::M_PTN3_SetTexture' has a wrong offset!");
static_assert(offsetof(FTresGummiPatternDataTable, M_PTN4_TexUVIndex) == 0x000060, "Member 'FTresGummiPatternDataTable::M_PTN4_TexUVIndex' has a wrong offset!");
static_assert(offsetof(FTresGummiPatternDataTable, M_PTN5_TexUVTiling) == 0x000064, "Member 'FTresGummiPatternDataTable::M_PTN5_TexUVTiling' has a wrong offset!");
static_assert(offsetof(FTresGummiPatternDataTable, M_PTN_MetalicToSpecular) == 0x000068, "Member 'FTresGummiPatternDataTable::M_PTN_MetalicToSpecular' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_FlareShotHvnGroupParam
// 0x0048 (0x0048 - 0x0000)
struct FTresEnemy_e_ex771_FlareShotHvnGroupParam final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_FireOmenEff;                                     // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresEnemy_e_ex771_FlareShotHvnParam> M_FlareShotHvnParamArray;                          // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex771_FlareShotHvnGroupParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex771_FlareShotHvnGroupParam");
static_assert(sizeof(FTresEnemy_e_ex771_FlareShotHvnGroupParam) == 0x000048, "Wrong size on FTresEnemy_e_ex771_FlareShotHvnGroupParam");
static_assert(offsetof(FTresEnemy_e_ex771_FlareShotHvnGroupParam, M_FireOmenEff) == 0x000030, "Member 'FTresEnemy_e_ex771_FlareShotHvnGroupParam::M_FireOmenEff' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex771_FlareShotHvnGroupParam, M_FlareShotHvnParamArray) == 0x000038, "Member 'FTresEnemy_e_ex771_FlareShotHvnGroupParam::M_FlareShotHvnParamArray' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipRankDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGumiShipRankDataTable final : public FTableRowBase
{
public:
	int32                                         M_nRank;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nPrize;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nNextPrize;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nGummiShipCostAdd;                               // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nTinyShipCostAdd;                                // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         M_nAbilityPointAdd;                                // 0x001C(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_nTinyUseAdd;                                     // 0x001E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          M_nFormationAdd;                                   // 0x001F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefGumiEtc                           M_nAbilityKind[0x5];                               // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresGumiShipRankDataTable) == 0x11413080, "Wrong alignment on FTresGumiShipRankDataTable");
static_assert(sizeof(FTresGumiShipRankDataTable) == 0x11413080, "Wrong size on FTresGumiShipRankDataTable");
static_assert(offsetof(FTresGumiShipRankDataTable, M_nRank) == 0x000008, "Member 'FTresGumiShipRankDataTable::M_nRank' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRankDataTable, M_nPrize) == 0x00000C, "Member 'FTresGumiShipRankDataTable::M_nPrize' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRankDataTable, M_nNextPrize) == 0x000010, "Member 'FTresGumiShipRankDataTable::M_nNextPrize' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRankDataTable, M_nGummiShipCostAdd) == 0x000014, "Member 'FTresGumiShipRankDataTable::M_nGummiShipCostAdd' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRankDataTable, M_nTinyShipCostAdd) == 0x000018, "Member 'FTresGumiShipRankDataTable::M_nTinyShipCostAdd' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRankDataTable, M_nAbilityPointAdd) == 0x00001C, "Member 'FTresGumiShipRankDataTable::M_nAbilityPointAdd' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRankDataTable, M_nTinyUseAdd) == 0x00001E, "Member 'FTresGumiShipRankDataTable::M_nTinyUseAdd' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRankDataTable, M_nFormationAdd) == 0x00001F, "Member 'FTresGumiShipRankDataTable::M_nFormationAdd' has a wrong offset!");
static_assert(offsetof(FTresGumiShipRankDataTable, M_nAbilityKind) == 0x000020, "Member 'FTresGumiShipRankDataTable::M_nAbilityKind' has a wrong offset!");

// ScriptStruct TresGame.TresGummiStickerDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGummiStickerDataTable final : public FTableRowBase
{
public:
	class FName                                   M_nTextureName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiStickerDataTable) == 0x11413080, "Wrong alignment on FTresGummiStickerDataTable");
static_assert(sizeof(FTresGummiStickerDataTable) == 0x11413080, "Wrong size on FTresGummiStickerDataTable");
static_assert(offsetof(FTresGummiStickerDataTable, M_nTextureName) == 0x000008, "Member 'FTresGummiStickerDataTable::M_nTextureName' has a wrong offset!");

// ScriptStruct TresGame.TresGummiStickerTextureDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGummiStickerTextureDataTable final : public FTableRowBase
{
public:
	class UTexture2D*                             M_nTexture;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiStickerTextureDataTable) == 0x11413080, "Wrong alignment on FTresGummiStickerTextureDataTable");
static_assert(sizeof(FTresGummiStickerTextureDataTable) == 0x11413080, "Wrong size on FTresGummiStickerTextureDataTable");
static_assert(offsetof(FTresGummiStickerTextureDataTable, M_nTexture) == 0x000008, "Member 'FTresGummiStickerTextureDataTable::M_nTexture' has a wrong offset!");

// ScriptStruct TresGame.TresGummiTreasureDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresGummiTreasureDataTable final : public FTableRowBase
{
public:
	TArray<ETresItemDefGumiParts>                 M_nTreasureGummiParts;                             // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiEtc>                   M_nTreasureSpecialWeapon;                          // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresItemDefGumiShipBP>                M_nTreasurePlan;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGummiTreasureDataTable) == 0x11413080, "Wrong alignment on FTresGummiTreasureDataTable");
static_assert(sizeof(FTresGummiTreasureDataTable) == 0x11413080, "Wrong size on FTresGummiTreasureDataTable");
static_assert(offsetof(FTresGummiTreasureDataTable, M_nTreasureGummiParts) == 0x000008, "Member 'FTresGummiTreasureDataTable::M_nTreasureGummiParts' has a wrong offset!");
static_assert(offsetof(FTresGummiTreasureDataTable, M_nTreasureSpecialWeapon) == 0x000018, "Member 'FTresGummiTreasureDataTable::M_nTreasureSpecialWeapon' has a wrong offset!");
static_assert(offsetof(FTresGummiTreasureDataTable, M_nTreasurePlan) == 0x000028, "Member 'FTresGummiTreasureDataTable::M_nTreasurePlan' has a wrong offset!");

// ScriptStruct TresGame.TornadoVacuumSet
// 0x11C57 (0x11C57 - 0x0000)
struct alignas(0x11C57) FTornadoVacuumSet final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTornadoVacuumSet) == 0x011C57, "Wrong alignment on FTornadoVacuumSet");
static_assert(sizeof(FTornadoVacuumSet) == 0x011C57, "Wrong size on FTornadoVacuumSet");

// ScriptStruct TresGame.TresUIShopVoice
// 0x11589D70 (0x11589D70 - 0x0000)
struct alignas(0x11589D70) FTresUIShopVoice final
{
public:
	TSoftObjectPtr<class USoundBase>              VoiceSound;                                        // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubtitleTextID;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixedSubtitleDisplayTime;                          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIShopVoice) == 0x11589D70, "Wrong alignment on FTresUIShopVoice");
static_assert(sizeof(FTresUIShopVoice) == 0x11589D70, "Wrong size on FTresUIShopVoice");
static_assert(offsetof(FTresUIShopVoice, VoiceSound) == 0x000000, "Member 'FTresUIShopVoice::VoiceSound' has a wrong offset!");
static_assert(offsetof(FTresUIShopVoice, SubtitleTextID) == 0x000020, "Member 'FTresUIShopVoice::SubtitleTextID' has a wrong offset!");
static_assert(offsetof(FTresUIShopVoice, FixedSubtitleDisplayTime) == 0x000030, "Member 'FTresUIShopVoice::FixedSubtitleDisplayTime' has a wrong offset!");

// ScriptStruct TresGame.TresInt32_Range
// 0x11570400 (0x11570400 - 0x0000)
struct alignas(0x11570400) FTresInt32_Range final
{
public:
	int32                                         M_nMinValue;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_nMaxValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresInt32_Range) == 0x11570400, "Wrong alignment on FTresInt32_Range");
static_assert(sizeof(FTresInt32_Range) == 0x11570400, "Wrong size on FTresInt32_Range");
static_assert(offsetof(FTresInt32_Range, M_nMinValue) == 0x000000, "Member 'FTresInt32_Range::M_nMinValue' has a wrong offset!");
static_assert(offsetof(FTresInt32_Range, M_nMaxValue) == 0x000004, "Member 'FTresInt32_Range::M_nMaxValue' has a wrong offset!");

// ScriptStruct TresGame.TresSubCommandData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresSubCommandData final : public FTableRowBase
{
public:
	ETresCommandKind                              SubCommand1;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCommandKind                              SubCommand2;                                       // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCommandKind                              SubCommand3;                                       // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCommandKind                              SubCommand4;                                       // 0x000B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCommandKind                              SubCommand5;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCommandKind                              SubCommand6;                                       // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCommandKind                              SubCommand7;                                       // 0x000E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCommandKind                              SubCommand8;                                       // 0x000F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCommandKind                              SubCommand9;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x4F];                                      // 0x0011(0x004F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSubCommandData) == 0x11413080, "Wrong alignment on FTresSubCommandData");
static_assert(sizeof(FTresSubCommandData) == 0x11413080, "Wrong size on FTresSubCommandData");
static_assert(offsetof(FTresSubCommandData, SubCommand1) == 0x000008, "Member 'FTresSubCommandData::SubCommand1' has a wrong offset!");
static_assert(offsetof(FTresSubCommandData, SubCommand2) == 0x000009, "Member 'FTresSubCommandData::SubCommand2' has a wrong offset!");
static_assert(offsetof(FTresSubCommandData, SubCommand3) == 0x00000A, "Member 'FTresSubCommandData::SubCommand3' has a wrong offset!");
static_assert(offsetof(FTresSubCommandData, SubCommand4) == 0x00000B, "Member 'FTresSubCommandData::SubCommand4' has a wrong offset!");
static_assert(offsetof(FTresSubCommandData, SubCommand5) == 0x00000C, "Member 'FTresSubCommandData::SubCommand5' has a wrong offset!");
static_assert(offsetof(FTresSubCommandData, SubCommand6) == 0x00000D, "Member 'FTresSubCommandData::SubCommand6' has a wrong offset!");
static_assert(offsetof(FTresSubCommandData, SubCommand7) == 0x00000E, "Member 'FTresSubCommandData::SubCommand7' has a wrong offset!");
static_assert(offsetof(FTresSubCommandData, SubCommand8) == 0x00000F, "Member 'FTresSubCommandData::SubCommand8' has a wrong offset!");
static_assert(offsetof(FTresSubCommandData, SubCommand9) == 0x000010, "Member 'FTresSubCommandData::SubCommand9' has a wrong offset!");

// ScriptStruct TresGame.TresHudCommandData
// 0x129B20 (0x1153CBA0 - 0x11413080)
struct alignas(0x1153CBA0) FTresHudCommandData final : public FTableRowBase
{
public:
	class FName                                   MagicSubCommandDataKey;                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemSubCommandDataKey;                             // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkSubCommandDataKey;                             // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShortcutCommandDataKey;                            // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheatRightShortcutCommandDataKey;                  // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheatLeftShortcutCommandDataKey;                   // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeaponShortcutDataKey;                             // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresHudCommandData) == 0x1153CBA0, "Wrong alignment on FTresHudCommandData");
static_assert(sizeof(FTresHudCommandData) == 0x1153CBA0, "Wrong size on FTresHudCommandData");
static_assert(offsetof(FTresHudCommandData, MagicSubCommandDataKey) == 0x000008, "Member 'FTresHudCommandData::MagicSubCommandDataKey' has a wrong offset!");
static_assert(offsetof(FTresHudCommandData, ItemSubCommandDataKey) == 0x000010, "Member 'FTresHudCommandData::ItemSubCommandDataKey' has a wrong offset!");
static_assert(offsetof(FTresHudCommandData, LinkSubCommandDataKey) == 0x000018, "Member 'FTresHudCommandData::LinkSubCommandDataKey' has a wrong offset!");
static_assert(offsetof(FTresHudCommandData, ShortcutCommandDataKey) == 0x000020, "Member 'FTresHudCommandData::ShortcutCommandDataKey' has a wrong offset!");
static_assert(offsetof(FTresHudCommandData, CheatRightShortcutCommandDataKey) == 0x000028, "Member 'FTresHudCommandData::CheatRightShortcutCommandDataKey' has a wrong offset!");
static_assert(offsetof(FTresHudCommandData, CheatLeftShortcutCommandDataKey) == 0x000030, "Member 'FTresHudCommandData::CheatLeftShortcutCommandDataKey' has a wrong offset!");
static_assert(offsetof(FTresHudCommandData, WeaponShortcutDataKey) == 0x000038, "Member 'FTresHudCommandData::WeaponShortcutDataKey' has a wrong offset!");

// ScriptStruct TresGame.TresInterpGroupInstUpdateSettings
// 0x0010 (0x0010 - 0x0000)
struct FTresInterpGroupInstUpdateSettings final
{
public:
	class USkeletalMeshComponent*                 M_SkeletalMeshComponent;                           // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeshComponentUpdateFlag                      M_UpdateFlag;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_UpdateRateOptimizations;                         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresInterpGroupInstUpdateSettings) == 0x000008, "Wrong alignment on FTresInterpGroupInstUpdateSettings");
static_assert(sizeof(FTresInterpGroupInstUpdateSettings) == 0x000010, "Wrong size on FTresInterpGroupInstUpdateSettings");
static_assert(offsetof(FTresInterpGroupInstUpdateSettings, M_SkeletalMeshComponent) == 0x000000, "Member 'FTresInterpGroupInstUpdateSettings::M_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FTresInterpGroupInstUpdateSettings, M_UpdateFlag) == 0x000008, "Member 'FTresInterpGroupInstUpdateSettings::M_UpdateFlag' has a wrong offset!");
static_assert(offsetof(FTresInterpGroupInstUpdateSettings, M_UpdateRateOptimizations) == 0x000009, "Member 'FTresInterpGroupInstUpdateSettings::M_UpdateRateOptimizations' has a wrong offset!");

// ScriptStruct TresGame.TresTrackAttachKey
// 0x1153E360 (0x1153E360 - 0x0000)
struct alignas(0x1153E360) FTresTrackAttachKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bAttach : 1;                                     // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_ParentActor;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_BoneSocketName;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               M_AttachLocationType;                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         M_bWeldSimulatedBodies : 1;                        // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bAbsoluteLocation : 1;                           // 0x001C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bAbsoluteRotation : 1;                           // 0x001C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bAbsoluteScale : 1;                              // 0x001C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bUseGroupName : 1;                               // 0x001C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_AttachGroupName;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTrackAttachKey) == 0x1153E360, "Wrong alignment on FTresTrackAttachKey");
static_assert(sizeof(FTresTrackAttachKey) == 0x1153E360, "Wrong size on FTresTrackAttachKey");
static_assert(offsetof(FTresTrackAttachKey, M_Time) == 0x000000, "Member 'FTresTrackAttachKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresTrackAttachKey, M_ParentActor) == 0x000008, "Member 'FTresTrackAttachKey::M_ParentActor' has a wrong offset!");
static_assert(offsetof(FTresTrackAttachKey, M_BoneSocketName) == 0x000010, "Member 'FTresTrackAttachKey::M_BoneSocketName' has a wrong offset!");
static_assert(offsetof(FTresTrackAttachKey, M_AttachLocationType) == 0x000018, "Member 'FTresTrackAttachKey::M_AttachLocationType' has a wrong offset!");
static_assert(offsetof(FTresTrackAttachKey, M_AttachGroupName) == 0x000020, "Member 'FTresTrackAttachKey::M_AttachGroupName' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackShadowQualityControlKey
// 0x0008 (0x0008 - 0x0000)
struct FTresInterpTrackShadowQualityControlKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_ShadowQuality                           M_Quality;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresInterpTrackShadowQualityControlKey) == 0x000004, "Wrong alignment on FTresInterpTrackShadowQualityControlKey");
static_assert(sizeof(FTresInterpTrackShadowQualityControlKey) == 0x000008, "Wrong size on FTresInterpTrackShadowQualityControlKey");
static_assert(offsetof(FTresInterpTrackShadowQualityControlKey, M_Time) == 0x000000, "Member 'FTresInterpTrackShadowQualityControlKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackShadowQualityControlKey, M_Quality) == 0x000004, "Member 'FTresInterpTrackShadowQualityControlKey::M_Quality' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackBonamikTeleportKey
// 0x1153F950 (0x1153F950 - 0x0000)
struct alignas(0x1153F950) FTresInterpTrackBonamikTeleportKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Distance;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_PreRoll;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresInterpTrackBonamikTeleportKey) == 0x1153F950, "Wrong alignment on FTresInterpTrackBonamikTeleportKey");
static_assert(sizeof(FTresInterpTrackBonamikTeleportKey) == 0x1153F950, "Wrong size on FTresInterpTrackBonamikTeleportKey");
static_assert(offsetof(FTresInterpTrackBonamikTeleportKey, M_Time) == 0x000000, "Member 'FTresInterpTrackBonamikTeleportKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikTeleportKey, M_Distance) == 0x000004, "Member 'FTresInterpTrackBonamikTeleportKey::M_Distance' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackBonamikTeleportKey, M_PreRoll) == 0x000008, "Member 'FTresInterpTrackBonamikTeleportKey::M_PreRoll' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackBonamikWindControlKey
// 0x0004 (0x0004 - 0x0000)
struct FTresInterpTrackBonamikWindControlKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresInterpTrackBonamikWindControlKey) == 0x000004, "Wrong alignment on FTresInterpTrackBonamikWindControlKey");
static_assert(sizeof(FTresInterpTrackBonamikWindControlKey) == 0x000004, "Wrong size on FTresInterpTrackBonamikWindControlKey");
static_assert(offsetof(FTresInterpTrackBonamikWindControlKey, M_Time) == 0x000000, "Member 'FTresInterpTrackBonamikWindControlKey::M_Time' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackDrawMaterialKey
// 0x1153FE30 (0x1153FE30 - 0x0000)
struct alignas(0x1153FE30) FTresInterpTrackDrawMaterialKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     M_Material;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_ParameterName;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_X;                                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Y;                                               // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_W;                                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_H;                                               // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresInterpTrackDrawMaterialKey) == 0x1153FE30, "Wrong alignment on FTresInterpTrackDrawMaterialKey");
static_assert(sizeof(FTresInterpTrackDrawMaterialKey) == 0x1153FE30, "Wrong size on FTresInterpTrackDrawMaterialKey");
static_assert(offsetof(FTresInterpTrackDrawMaterialKey, M_Time) == 0x000000, "Member 'FTresInterpTrackDrawMaterialKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackDrawMaterialKey, M_Material) == 0x000008, "Member 'FTresInterpTrackDrawMaterialKey::M_Material' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackDrawMaterialKey, M_ParameterName) == 0x000010, "Member 'FTresInterpTrackDrawMaterialKey::M_ParameterName' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackDrawMaterialKey, M_X) == 0x000018, "Member 'FTresInterpTrackDrawMaterialKey::M_X' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackDrawMaterialKey, M_Y) == 0x00001C, "Member 'FTresInterpTrackDrawMaterialKey::M_Y' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackDrawMaterialKey, M_W) == 0x000020, "Member 'FTresInterpTrackDrawMaterialKey::M_W' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackDrawMaterialKey, M_H) == 0x000024, "Member 'FTresInterpTrackDrawMaterialKey::M_H' has a wrong offset!");

// ScriptStruct TresGame.TresEffectTriggerTrackKey
// 0x115409B0 (0x115409B0 - 0x0000)
struct alignas(0x115409B0) FTresEffectTriggerTrackKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresEffectTriggerTrack_TriggerType           M_TriggerType;                                     // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_FadeTime;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bChangeColor : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ParticleColor;                                     // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParticleAlpha;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEffectTriggerTrackKey) == 0x115409B0, "Wrong alignment on FTresEffectTriggerTrackKey");
static_assert(sizeof(FTresEffectTriggerTrackKey) == 0x115409B0, "Wrong size on FTresEffectTriggerTrackKey");
static_assert(offsetof(FTresEffectTriggerTrackKey, M_Time) == 0x000000, "Member 'FTresEffectTriggerTrackKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresEffectTriggerTrackKey, M_TriggerType) == 0x000004, "Member 'FTresEffectTriggerTrackKey::M_TriggerType' has a wrong offset!");
static_assert(offsetof(FTresEffectTriggerTrackKey, M_FadeTime) == 0x000008, "Member 'FTresEffectTriggerTrackKey::M_FadeTime' has a wrong offset!");
static_assert(offsetof(FTresEffectTriggerTrackKey, ParticleColor) == 0x000010, "Member 'FTresEffectTriggerTrackKey::ParticleColor' has a wrong offset!");
static_assert(offsetof(FTresEffectTriggerTrackKey, ParticleAlpha) == 0x00001C, "Member 'FTresEffectTriggerTrackKey::ParticleAlpha' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_FlareShotTornadoEntryParam
// 0x49FE (0x49FE - 0x0000)
struct alignas(0x49FE) FTresEnemy_e_ex773_FlareShotTornadoEntryParam final
{
public:
	uint8                                         Pad_0[0x54];                                       // 0x0000(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_FlareShotTornadoEntryParam) == 0x0049FE, "Wrong alignment on FTresEnemy_e_ex773_FlareShotTornadoEntryParam");
static_assert(sizeof(FTresEnemy_e_ex773_FlareShotTornadoEntryParam) == 0x0049FE, "Wrong size on FTresEnemy_e_ex773_FlareShotTornadoEntryParam");

// ScriptStruct TresGame.TresInterpTrackFadeKey
// 0x0008 (0x0008 - 0x0000)
struct FTresInterpTrackFadeKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresFadeTrack_Color                          M_Color;                                           // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresInterpTrackFadeKey) == 0x000004, "Wrong alignment on FTresInterpTrackFadeKey");
static_assert(sizeof(FTresInterpTrackFadeKey) == 0x000008, "Wrong size on FTresInterpTrackFadeKey");
static_assert(offsetof(FTresInterpTrackFadeKey, M_Time) == 0x000000, "Member 'FTresInterpTrackFadeKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackFadeKey, M_Color) == 0x000004, "Member 'FTresInterpTrackFadeKey::M_Color' has a wrong offset!");

// ScriptStruct TresGame.TresFullBodyAnimationTrackKey
// 0x115416E0 (0x115416E0 - 0x0000)
struct alignas(0x115416E0) FTresFullBodyAnimationTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimName;                                          // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimAsset;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimStartOffset;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimEndOffset;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectGroup;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reverse;                                           // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RootTrans;                                         // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RootRotate;                                        // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableRootTransExtract;                           // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMoveScaleXY;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMoveScaleZ;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshScale;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BonamikReset;                                      // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonamikPreRoll;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonamikPreRollForAttachment;                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulateMotionBuilderClip;                         // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotionBuilderClipFirstLoop;                        // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionBuilderClipStop;                             // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcedLOD;                                         // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFullBodyAnimationTrackKey) == 0x115416E0, "Wrong alignment on FTresFullBodyAnimationTrackKey");
static_assert(sizeof(FTresFullBodyAnimationTrackKey) == 0x115416E0, "Wrong size on FTresFullBodyAnimationTrackKey");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, Time) == 0x000000, "Member 'FTresFullBodyAnimationTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, AnimName) == 0x000008, "Member 'FTresFullBodyAnimationTrackKey::AnimName' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, AnimAsset) == 0x000010, "Member 'FTresFullBodyAnimationTrackKey::AnimAsset' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, BlendInTime) == 0x000018, "Member 'FTresFullBodyAnimationTrackKey::BlendInTime' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, BlendOutTime) == 0x00001C, "Member 'FTresFullBodyAnimationTrackKey::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, AnimStartOffset) == 0x000020, "Member 'FTresFullBodyAnimationTrackKey::AnimStartOffset' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, AnimEndOffset) == 0x000024, "Member 'FTresFullBodyAnimationTrackKey::AnimEndOffset' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, PlayRate) == 0x000028, "Member 'FTresFullBodyAnimationTrackKey::PlayRate' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, Loop) == 0x00002C, "Member 'FTresFullBodyAnimationTrackKey::Loop' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, EffectGroup) == 0x000030, "Member 'FTresFullBodyAnimationTrackKey::EffectGroup' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, Reverse) == 0x000034, "Member 'FTresFullBodyAnimationTrackKey::Reverse' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, RootTrans) == 0x000035, "Member 'FTresFullBodyAnimationTrackKey::RootTrans' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, RootRotate) == 0x000036, "Member 'FTresFullBodyAnimationTrackKey::RootRotate' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, DisableRootTransExtract) == 0x000037, "Member 'FTresFullBodyAnimationTrackKey::DisableRootTransExtract' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, RootMoveScaleXY) == 0x000038, "Member 'FTresFullBodyAnimationTrackKey::RootMoveScaleXY' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, RootMoveScaleZ) == 0x00003C, "Member 'FTresFullBodyAnimationTrackKey::RootMoveScaleZ' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, MeshScale) == 0x000040, "Member 'FTresFullBodyAnimationTrackKey::MeshScale' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, BonamikReset) == 0x000044, "Member 'FTresFullBodyAnimationTrackKey::BonamikReset' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, BonamikPreRoll) == 0x000048, "Member 'FTresFullBodyAnimationTrackKey::BonamikPreRoll' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, BonamikPreRollForAttachment) == 0x00004C, "Member 'FTresFullBodyAnimationTrackKey::BonamikPreRollForAttachment' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, SimulateMotionBuilderClip) == 0x000050, "Member 'FTresFullBodyAnimationTrackKey::SimulateMotionBuilderClip' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, MotionBuilderClipFirstLoop) == 0x000054, "Member 'FTresFullBodyAnimationTrackKey::MotionBuilderClipFirstLoop' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, MotionBuilderClipStop) == 0x000058, "Member 'FTresFullBodyAnimationTrackKey::MotionBuilderClipStop' has a wrong offset!");
static_assert(offsetof(FTresFullBodyAnimationTrackKey, ForcedLOD) == 0x00005C, "Member 'FTresFullBodyAnimationTrackKey::ForcedLOD' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackIndirectLightingCacheQualityControlKey
// 0x0008 (0x0008 - 0x0000)
struct FTresInterpTrackIndirectLightingCacheQualityControlKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndirectLightingCacheQuality                 M_Quality;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresInterpTrackIndirectLightingCacheQualityControlKey) == 0x000004, "Wrong alignment on FTresInterpTrackIndirectLightingCacheQualityControlKey");
static_assert(sizeof(FTresInterpTrackIndirectLightingCacheQualityControlKey) == 0x000008, "Wrong size on FTresInterpTrackIndirectLightingCacheQualityControlKey");
static_assert(offsetof(FTresInterpTrackIndirectLightingCacheQualityControlKey, M_Time) == 0x000000, "Member 'FTresInterpTrackIndirectLightingCacheQualityControlKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackIndirectLightingCacheQualityControlKey, M_Quality) == 0x000004, "Member 'FTresInterpTrackIndirectLightingCacheQualityControlKey::M_Quality' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackLightPropertiesKey
// 0x11542770 (0x11542770 - 0x0000)
struct alignas(0x11542770) FTresInterpTrackLightPropertiesKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_MinRoughness;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShadowResolutionScale;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_ShadowBias;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DynamicShadowDistanceMovableLight;               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DynamicShadowDistanceStationaryLight;            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_DynamicShadowCascades;                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CascadeDistributionExponent;                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresInterpTrackLightPropertiesKey) == 0x11542770, "Wrong alignment on FTresInterpTrackLightPropertiesKey");
static_assert(sizeof(FTresInterpTrackLightPropertiesKey) == 0x11542770, "Wrong size on FTresInterpTrackLightPropertiesKey");
static_assert(offsetof(FTresInterpTrackLightPropertiesKey, M_Time) == 0x000000, "Member 'FTresInterpTrackLightPropertiesKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackLightPropertiesKey, M_MinRoughness) == 0x000004, "Member 'FTresInterpTrackLightPropertiesKey::M_MinRoughness' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackLightPropertiesKey, M_ShadowResolutionScale) == 0x000008, "Member 'FTresInterpTrackLightPropertiesKey::M_ShadowResolutionScale' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackLightPropertiesKey, M_ShadowBias) == 0x00000C, "Member 'FTresInterpTrackLightPropertiesKey::M_ShadowBias' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackLightPropertiesKey, M_DynamicShadowDistanceMovableLight) == 0x000010, "Member 'FTresInterpTrackLightPropertiesKey::M_DynamicShadowDistanceMovableLight' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackLightPropertiesKey, M_DynamicShadowDistanceStationaryLight) == 0x000014, "Member 'FTresInterpTrackLightPropertiesKey::M_DynamicShadowDistanceStationaryLight' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackLightPropertiesKey, M_DynamicShadowCascades) == 0x000018, "Member 'FTresInterpTrackLightPropertiesKey::M_DynamicShadowCascades' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackLightPropertiesKey, M_CascadeDistributionExponent) == 0x00001C, "Member 'FTresInterpTrackLightPropertiesKey::M_CascadeDistributionExponent' has a wrong offset!");

// ScriptStruct TresGame.TresInterpTrackSceneCapture2DKey
// 0x11543720 (0x11543720 - 0x0000)
struct alignas(0x11543720) FTresInterpTrackSceneCapture2DKey final
{
public:
	float                                         M_Time;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_TargetCamGroup;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_CaptureEveryFrame;                               // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_CaptureRange;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CaptureOffsetTime;                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresInterpTrackSceneCapture2DKey) == 0x11543720, "Wrong alignment on FTresInterpTrackSceneCapture2DKey");
static_assert(sizeof(FTresInterpTrackSceneCapture2DKey) == 0x11543720, "Wrong size on FTresInterpTrackSceneCapture2DKey");
static_assert(offsetof(FTresInterpTrackSceneCapture2DKey, M_Time) == 0x000000, "Member 'FTresInterpTrackSceneCapture2DKey::M_Time' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackSceneCapture2DKey, M_TargetCamGroup) == 0x000008, "Member 'FTresInterpTrackSceneCapture2DKey::M_TargetCamGroup' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackSceneCapture2DKey, M_CaptureEveryFrame) == 0x000010, "Member 'FTresInterpTrackSceneCapture2DKey::M_CaptureEveryFrame' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackSceneCapture2DKey, M_CaptureRange) == 0x000014, "Member 'FTresInterpTrackSceneCapture2DKey::M_CaptureRange' has a wrong offset!");
static_assert(offsetof(FTresInterpTrackSceneCapture2DKey, M_CaptureOffsetTime) == 0x000018, "Member 'FTresInterpTrackSceneCapture2DKey::M_CaptureOffsetTime' has a wrong offset!");

// ScriptStruct TresGame.TresSlotAnimationTrackKey
// 0x11543C90 (0x11543C90 - 0x0000)
struct alignas(0x11543C90) FTresSlotAnimationTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        AnimAsset;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimStartOffset;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimEndOffset;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectGroup;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reverse;                                           // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RootTrans;                                         // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RootRotate;                                        // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableRootTransExtract;                           // 0x002F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMoveScaleXY;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMoveScaleZ;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshScale;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BonamikReset;                                      // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonamikPreRoll;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonamikPreRollForAttachment;                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulateMotionBuilderClip;                         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotionBuilderClipFirstLoop;                        // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionBuilderClipStop;                             // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcedLOD;                                         // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSlotAnimationTrackKey) == 0x11543C90, "Wrong alignment on FTresSlotAnimationTrackKey");
static_assert(sizeof(FTresSlotAnimationTrackKey) == 0x11543C90, "Wrong size on FTresSlotAnimationTrackKey");
static_assert(offsetof(FTresSlotAnimationTrackKey, Time) == 0x000000, "Member 'FTresSlotAnimationTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, AnimAsset) == 0x000008, "Member 'FTresSlotAnimationTrackKey::AnimAsset' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, BlendInTime) == 0x000010, "Member 'FTresSlotAnimationTrackKey::BlendInTime' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, BlendOutTime) == 0x000014, "Member 'FTresSlotAnimationTrackKey::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, AnimStartOffset) == 0x000018, "Member 'FTresSlotAnimationTrackKey::AnimStartOffset' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, AnimEndOffset) == 0x00001C, "Member 'FTresSlotAnimationTrackKey::AnimEndOffset' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, PlayRate) == 0x000020, "Member 'FTresSlotAnimationTrackKey::PlayRate' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, Loop) == 0x000024, "Member 'FTresSlotAnimationTrackKey::Loop' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, EffectGroup) == 0x000028, "Member 'FTresSlotAnimationTrackKey::EffectGroup' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, Reverse) == 0x00002C, "Member 'FTresSlotAnimationTrackKey::Reverse' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, RootTrans) == 0x00002D, "Member 'FTresSlotAnimationTrackKey::RootTrans' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, RootRotate) == 0x00002E, "Member 'FTresSlotAnimationTrackKey::RootRotate' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, DisableRootTransExtract) == 0x00002F, "Member 'FTresSlotAnimationTrackKey::DisableRootTransExtract' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, RootMoveScaleXY) == 0x000030, "Member 'FTresSlotAnimationTrackKey::RootMoveScaleXY' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, RootMoveScaleZ) == 0x000034, "Member 'FTresSlotAnimationTrackKey::RootMoveScaleZ' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, MeshScale) == 0x000038, "Member 'FTresSlotAnimationTrackKey::MeshScale' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, BonamikReset) == 0x00003C, "Member 'FTresSlotAnimationTrackKey::BonamikReset' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, BonamikPreRoll) == 0x000040, "Member 'FTresSlotAnimationTrackKey::BonamikPreRoll' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, BonamikPreRollForAttachment) == 0x000044, "Member 'FTresSlotAnimationTrackKey::BonamikPreRollForAttachment' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, SimulateMotionBuilderClip) == 0x000048, "Member 'FTresSlotAnimationTrackKey::SimulateMotionBuilderClip' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, MotionBuilderClipFirstLoop) == 0x00004C, "Member 'FTresSlotAnimationTrackKey::MotionBuilderClipFirstLoop' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, MotionBuilderClipStop) == 0x000050, "Member 'FTresSlotAnimationTrackKey::MotionBuilderClipStop' has a wrong offset!");
static_assert(offsetof(FTresSlotAnimationTrackKey, ForcedLOD) == 0x000054, "Member 'FTresSlotAnimationTrackKey::ForcedLOD' has a wrong offset!");

// ScriptStruct TresGame.TresEquipItemDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresEquipItemDataTable final : public FTableRowBase
{
public:
	class FName                                   M_KeyName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_Comment;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AP;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttackPlus;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MagicPlus;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_DefensePlus;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistPhysical;                              // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistFire;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistBlizzard;                              // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistThunder;                               // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistWater;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistAero;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistDark;                                  // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttrResistNoType;                                // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETresAbilityKind>                      M_AppendAbility;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTresEquipDataBase>      M_EquipSubclass;                                   // 0x0060(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEquipItemDataTable) == 0x11413080, "Wrong alignment on FTresEquipItemDataTable");
static_assert(sizeof(FTresEquipItemDataTable) == 0x11413080, "Wrong size on FTresEquipItemDataTable");
static_assert(offsetof(FTresEquipItemDataTable, M_KeyName) == 0x000008, "Member 'FTresEquipItemDataTable::M_KeyName' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_Comment) == 0x000010, "Member 'FTresEquipItemDataTable::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AP) == 0x000020, "Member 'FTresEquipItemDataTable::M_AP' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AttackPlus) == 0x000024, "Member 'FTresEquipItemDataTable::M_AttackPlus' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_MagicPlus) == 0x000028, "Member 'FTresEquipItemDataTable::M_MagicPlus' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_DefensePlus) == 0x00002C, "Member 'FTresEquipItemDataTable::M_DefensePlus' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AttrResistPhysical) == 0x000030, "Member 'FTresEquipItemDataTable::M_AttrResistPhysical' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AttrResistFire) == 0x000034, "Member 'FTresEquipItemDataTable::M_AttrResistFire' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AttrResistBlizzard) == 0x000038, "Member 'FTresEquipItemDataTable::M_AttrResistBlizzard' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AttrResistThunder) == 0x00003C, "Member 'FTresEquipItemDataTable::M_AttrResistThunder' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AttrResistWater) == 0x000040, "Member 'FTresEquipItemDataTable::M_AttrResistWater' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AttrResistAero) == 0x000044, "Member 'FTresEquipItemDataTable::M_AttrResistAero' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AttrResistDark) == 0x000048, "Member 'FTresEquipItemDataTable::M_AttrResistDark' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AttrResistNoType) == 0x00004C, "Member 'FTresEquipItemDataTable::M_AttrResistNoType' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_AppendAbility) == 0x000050, "Member 'FTresEquipItemDataTable::M_AppendAbility' has a wrong offset!");
static_assert(offsetof(FTresEquipItemDataTable, M_EquipSubclass) == 0x000060, "Member 'FTresEquipItemDataTable::M_EquipSubclass' has a wrong offset!");

// ScriptStruct TresGame.TresItemDataTable
// 0x133E00 (0x11546E80 - 0x11413080)
struct alignas(0x11546E80) FTresItemDataTable final : public FTableRowBase
{
public:
	class FName                                   M_KeyName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemCategory                             M_Category;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_UIPriority;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_Comment;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemCategoryIcon                         M_CategoryIcon;                                    // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemRank                                 M_ItemRank;                                        // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                M_IconAsset;                                       // 0x0030(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_NameTextID;                                      // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_HelpTextID;                                      // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_BuyPrice;                                        // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_SellPrice;                                       // 0x0074(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ShopLevel;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_GumiShopLevel;                                   // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bNeedMogCard : 1;                                // 0x0080(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_UnlockFlagIndex;                                 // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bCanSell : 1;                                    // 0x0088(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bCanDrop : 1;                                    // 0x0088(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bCanbeSoldOut : 1;                               // 0x0088(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_MaxNum;                                          // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresItemDataTable) == 0x11546E80, "Wrong alignment on FTresItemDataTable");
static_assert(sizeof(FTresItemDataTable) == 0x11546E80, "Wrong size on FTresItemDataTable");
static_assert(offsetof(FTresItemDataTable, M_KeyName) == 0x000008, "Member 'FTresItemDataTable::M_KeyName' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_Category) == 0x000010, "Member 'FTresItemDataTable::M_Category' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_UIPriority) == 0x000014, "Member 'FTresItemDataTable::M_UIPriority' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_Comment) == 0x000018, "Member 'FTresItemDataTable::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_CategoryIcon) == 0x000028, "Member 'FTresItemDataTable::M_CategoryIcon' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_ItemRank) == 0x000029, "Member 'FTresItemDataTable::M_ItemRank' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_IconAsset) == 0x000030, "Member 'FTresItemDataTable::M_IconAsset' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_NameTextID) == 0x000050, "Member 'FTresItemDataTable::M_NameTextID' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_HelpTextID) == 0x000060, "Member 'FTresItemDataTable::M_HelpTextID' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_BuyPrice) == 0x000070, "Member 'FTresItemDataTable::M_BuyPrice' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_SellPrice) == 0x000074, "Member 'FTresItemDataTable::M_SellPrice' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_ShopLevel) == 0x000078, "Member 'FTresItemDataTable::M_ShopLevel' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_GumiShopLevel) == 0x00007C, "Member 'FTresItemDataTable::M_GumiShopLevel' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_UnlockFlagIndex) == 0x000084, "Member 'FTresItemDataTable::M_UnlockFlagIndex' has a wrong offset!");
static_assert(offsetof(FTresItemDataTable, M_MaxNum) == 0x00008C, "Member 'FTresItemDataTable::M_MaxNum' has a wrong offset!");

// ScriptStruct TresGame.MognetMedalPrizeWork
// 0x11547C40 (0x11547C40 - 0x0000)
struct alignas(0x11547C40) FMognetMedalPrizeWork final
{
public:
	ETresDropItemID                               M_Type;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_NumDropMin;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumDropMax;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMognetMedalPrizeWork) == 0x11547C40, "Wrong alignment on FMognetMedalPrizeWork");
static_assert(sizeof(FMognetMedalPrizeWork) == 0x11547C40, "Wrong size on FMognetMedalPrizeWork");
static_assert(offsetof(FMognetMedalPrizeWork, M_Type) == 0x000000, "Member 'FMognetMedalPrizeWork::M_Type' has a wrong offset!");
static_assert(offsetof(FMognetMedalPrizeWork, M_NumDropMin) == 0x000004, "Member 'FMognetMedalPrizeWork::M_NumDropMin' has a wrong offset!");
static_assert(offsetof(FMognetMedalPrizeWork, M_NumDropMax) == 0x000008, "Member 'FMognetMedalPrizeWork::M_NumDropMax' has a wrong offset!");

// ScriptStruct TresGame.TresItemWeaponEnhanceIconDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresItemWeaponEnhanceIconDataTable final : public FTableRowBase
{
public:
	ETresItemDefWeapon                            M_WeaponID;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                PickerIconAsset;                                   // 0x0010(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                KeybladeIconAsset;                                 // 0x0030(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresItemWeaponEnhanceIconDataTable) == 0x11413080, "Wrong alignment on FTresItemWeaponEnhanceIconDataTable");
static_assert(sizeof(FTresItemWeaponEnhanceIconDataTable) == 0x11413080, "Wrong size on FTresItemWeaponEnhanceIconDataTable");
static_assert(offsetof(FTresItemWeaponEnhanceIconDataTable, M_WeaponID) == 0x000008, "Member 'FTresItemWeaponEnhanceIconDataTable::M_WeaponID' has a wrong offset!");
static_assert(offsetof(FTresItemWeaponEnhanceIconDataTable, PickerIconAsset) == 0x000010, "Member 'FTresItemWeaponEnhanceIconDataTable::PickerIconAsset' has a wrong offset!");
static_assert(offsetof(FTresItemWeaponEnhanceIconDataTable, KeybladeIconAsset) == 0x000030, "Member 'FTresItemWeaponEnhanceIconDataTable::KeybladeIconAsset' has a wrong offset!");

// ScriptStruct TresGame.EX359_LaserOnTimeInfo
// 0x11566E20 (0x11566E20 - 0x0000)
struct alignas(0x11566E20) FEX359_LaserOnTimeInfo final
{
public:
	float                                         M_fNotifyTime;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fModifySpawnTFTime;                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bModifySpawnTF;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_iNotify;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_LaserOnTimeInfo) == 0x11566E20, "Wrong alignment on FEX359_LaserOnTimeInfo");
static_assert(sizeof(FEX359_LaserOnTimeInfo) == 0x11566E20, "Wrong size on FEX359_LaserOnTimeInfo");
static_assert(offsetof(FEX359_LaserOnTimeInfo, M_fNotifyTime) == 0x000000, "Member 'FEX359_LaserOnTimeInfo::M_fNotifyTime' has a wrong offset!");
static_assert(offsetof(FEX359_LaserOnTimeInfo, M_fModifySpawnTFTime) == 0x000004, "Member 'FEX359_LaserOnTimeInfo::M_fModifySpawnTFTime' has a wrong offset!");
static_assert(offsetof(FEX359_LaserOnTimeInfo, M_bModifySpawnTF) == 0x000008, "Member 'FEX359_LaserOnTimeInfo::M_bModifySpawnTF' has a wrong offset!");
static_assert(offsetof(FEX359_LaserOnTimeInfo, M_iNotify) == 0x00000C, "Member 'FEX359_LaserOnTimeInfo::M_iNotify' has a wrong offset!");

// ScriptStruct TresGame.TresItemMotifDataTable
// 0x135F80 (0x11549000 - 0x11413080)
struct alignas(0x11549000) FTresItemMotifDataTable final : public FTableRowBase
{
public:
	int32                                         M_FlagIndex;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_Comment;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bSevenPrincessFlag : 1;                          // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_GameFlagName;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_GameFlagLabel;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_PrevMotifName;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_NameTextID;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_HelptTextID;                                     // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_UIPriority;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresItemMotifDataTable) == 0x11549000, "Wrong alignment on FTresItemMotifDataTable");
static_assert(sizeof(FTresItemMotifDataTable) == 0x11549000, "Wrong size on FTresItemMotifDataTable");
static_assert(offsetof(FTresItemMotifDataTable, M_FlagIndex) == 0x000008, "Member 'FTresItemMotifDataTable::M_FlagIndex' has a wrong offset!");
static_assert(offsetof(FTresItemMotifDataTable, M_Comment) == 0x000010, "Member 'FTresItemMotifDataTable::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresItemMotifDataTable, M_GameFlagName) == 0x000028, "Member 'FTresItemMotifDataTable::M_GameFlagName' has a wrong offset!");
static_assert(offsetof(FTresItemMotifDataTable, M_GameFlagLabel) == 0x000030, "Member 'FTresItemMotifDataTable::M_GameFlagLabel' has a wrong offset!");
static_assert(offsetof(FTresItemMotifDataTable, M_PrevMotifName) == 0x000038, "Member 'FTresItemMotifDataTable::M_PrevMotifName' has a wrong offset!");
static_assert(offsetof(FTresItemMotifDataTable, M_NameTextID) == 0x000040, "Member 'FTresItemMotifDataTable::M_NameTextID' has a wrong offset!");
static_assert(offsetof(FTresItemMotifDataTable, M_HelptTextID) == 0x000050, "Member 'FTresItemMotifDataTable::M_HelptTextID' has a wrong offset!");
static_assert(offsetof(FTresItemMotifDataTable, M_UIPriority) == 0x000060, "Member 'FTresItemMotifDataTable::M_UIPriority' has a wrong offset!");

// ScriptStruct TresGame.TresItemCollectDataTable
// 0x136550 (0x115495D0 - 0x11413080)
struct alignas(0x115495D0) FTresItemCollectDataTable final : public FTableRowBase
{
public:
	int32                                         M_FlagIndex;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemCollectCondition                     M_Condition;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ConditionN;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefMaterial                          M_ConditionX;                                      // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefMaterial                          M_ConditionY;                                      // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemRank                                 M_ConditionR;                                      // 0x0016(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemCollectRewardKind                    M_RewardKind;                                      // 0x0017(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_RewardItem;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_NameTextID;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_HelptTextID;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresItemCollectDataTable) == 0x115495D0, "Wrong alignment on FTresItemCollectDataTable");
static_assert(sizeof(FTresItemCollectDataTable) == 0x115495D0, "Wrong size on FTresItemCollectDataTable");
static_assert(offsetof(FTresItemCollectDataTable, M_FlagIndex) == 0x000008, "Member 'FTresItemCollectDataTable::M_FlagIndex' has a wrong offset!");
static_assert(offsetof(FTresItemCollectDataTable, M_Condition) == 0x00000C, "Member 'FTresItemCollectDataTable::M_Condition' has a wrong offset!");
static_assert(offsetof(FTresItemCollectDataTable, M_ConditionN) == 0x000010, "Member 'FTresItemCollectDataTable::M_ConditionN' has a wrong offset!");
static_assert(offsetof(FTresItemCollectDataTable, M_ConditionX) == 0x000014, "Member 'FTresItemCollectDataTable::M_ConditionX' has a wrong offset!");
static_assert(offsetof(FTresItemCollectDataTable, M_ConditionY) == 0x000015, "Member 'FTresItemCollectDataTable::M_ConditionY' has a wrong offset!");
static_assert(offsetof(FTresItemCollectDataTable, M_ConditionR) == 0x000016, "Member 'FTresItemCollectDataTable::M_ConditionR' has a wrong offset!");
static_assert(offsetof(FTresItemCollectDataTable, M_RewardKind) == 0x000017, "Member 'FTresItemCollectDataTable::M_RewardKind' has a wrong offset!");
static_assert(offsetof(FTresItemCollectDataTable, M_RewardItem) == 0x000018, "Member 'FTresItemCollectDataTable::M_RewardItem' has a wrong offset!");
static_assert(offsetof(FTresItemCollectDataTable, M_NameTextID) == 0x000020, "Member 'FTresItemCollectDataTable::M_NameTextID' has a wrong offset!");
static_assert(offsetof(FTresItemCollectDataTable, M_HelptTextID) == 0x000030, "Member 'FTresItemCollectDataTable::M_HelptTextID' has a wrong offset!");

// ScriptStruct TresGame.TresItemSynthesisDataTable
// 0x1C60 (0x11549F90 - 0x11548330)
struct alignas(0x11549F90) FTresItemSynthesisDataTable final : public FTresItemSynthesisDataTableBase
{
public:
	int32                                         M_FlagIndex;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_RewardItem;                                      // 0x0070(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemSynthesisCondition                   M_Condition;                                       // 0x0078(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_ConditionName;                                   // 0x0080(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresItemSynthesisDataTable) == 0x11549F90, "Wrong alignment on FTresItemSynthesisDataTable");
static_assert(sizeof(FTresItemSynthesisDataTable) == 0x11549F90, "Wrong size on FTresItemSynthesisDataTable");
static_assert(offsetof(FTresItemSynthesisDataTable, M_FlagIndex) == 0x000068, "Member 'FTresItemSynthesisDataTable::M_FlagIndex' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTable, M_RewardItem) == 0x000070, "Member 'FTresItemSynthesisDataTable::M_RewardItem' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTable, M_Condition) == 0x000078, "Member 'FTresItemSynthesisDataTable::M_Condition' has a wrong offset!");
static_assert(offsetof(FTresItemSynthesisDataTable, M_ConditionName) == 0x000080, "Member 'FTresItemSynthesisDataTable::M_ConditionName' has a wrong offset!");

// ScriptStruct TresGame.TresKeywordGlossaryData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresKeywordGlossaryData final : public FTableRowBase
{
public:
	struct FTresUIGameFlagText                    KeywordText;                                       // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 DetailTextID;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresKeywordGlossaryData) == 0x11413080, "Wrong alignment on FTresKeywordGlossaryData");
static_assert(sizeof(FTresKeywordGlossaryData) == 0x11413080, "Wrong size on FTresKeywordGlossaryData");
static_assert(offsetof(FTresKeywordGlossaryData, KeywordText) == 0x000008, "Member 'FTresKeywordGlossaryData::KeywordText' has a wrong offset!");
static_assert(offsetof(FTresKeywordGlossaryData, DetailTextID) == 0x000030, "Member 'FTresKeywordGlossaryData::DetailTextID' has a wrong offset!");
static_assert(offsetof(FTresKeywordGlossaryData, Version) == 0x000040, "Member 'FTresKeywordGlossaryData::Version' has a wrong offset!");

// ScriptStruct TresGame.TresLevelEntityAppearInfo
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresLevelEntityAppearInfo final
{
public:
	ETresLevelEntityAppearMode                    M_AppearMode;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_AppearWaitMin;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AppearWaitMax;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_Visible;                                         // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_CoopNo;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Location;                                        // 0x0014(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_Rotation;                                        // 0x0020(0x112E9AF0)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLevelEntityAppearInfo) == 0x112E9AF0, "Wrong alignment on FTresLevelEntityAppearInfo");
static_assert(sizeof(FTresLevelEntityAppearInfo) == 0x112E9AF0, "Wrong size on FTresLevelEntityAppearInfo");
static_assert(offsetof(FTresLevelEntityAppearInfo, M_AppearMode) == 0x000000, "Member 'FTresLevelEntityAppearInfo::M_AppearMode' has a wrong offset!");
static_assert(offsetof(FTresLevelEntityAppearInfo, M_AppearWaitMin) == 0x000004, "Member 'FTresLevelEntityAppearInfo::M_AppearWaitMin' has a wrong offset!");
static_assert(offsetof(FTresLevelEntityAppearInfo, M_AppearWaitMax) == 0x000008, "Member 'FTresLevelEntityAppearInfo::M_AppearWaitMax' has a wrong offset!");
static_assert(offsetof(FTresLevelEntityAppearInfo, M_Visible) == 0x00000C, "Member 'FTresLevelEntityAppearInfo::M_Visible' has a wrong offset!");
static_assert(offsetof(FTresLevelEntityAppearInfo, M_CoopNo) == 0x000010, "Member 'FTresLevelEntityAppearInfo::M_CoopNo' has a wrong offset!");
static_assert(offsetof(FTresLevelEntityAppearInfo, M_Location) == 0x000014, "Member 'FTresLevelEntityAppearInfo::M_Location' has a wrong offset!");
static_assert(offsetof(FTresLevelEntityAppearInfo, M_Rotation) == 0x000020, "Member 'FTresLevelEntityAppearInfo::M_Rotation' has a wrong offset!");

// ScriptStruct TresGame.TresEncountSpawnRequest
// 0x0060 (0x0060 - 0x0000)
struct FTresEncountSpawnRequest final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     M_Class;                                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATresEncountVolume*                     M_EncountVolume;                                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_Groups;                                          // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  M_Template;                                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEncountSpawnRequest) == 0x000008, "Wrong alignment on FTresEncountSpawnRequest");
static_assert(sizeof(FTresEncountSpawnRequest) == 0x000060, "Wrong size on FTresEncountSpawnRequest");
static_assert(offsetof(FTresEncountSpawnRequest, M_Class) == 0x000030, "Member 'FTresEncountSpawnRequest::M_Class' has a wrong offset!");
static_assert(offsetof(FTresEncountSpawnRequest, M_EncountVolume) == 0x000038, "Member 'FTresEncountSpawnRequest::M_EncountVolume' has a wrong offset!");
static_assert(offsetof(FTresEncountSpawnRequest, M_Groups) == 0x000040, "Member 'FTresEncountSpawnRequest::M_Groups' has a wrong offset!");
static_assert(offsetof(FTresEncountSpawnRequest, M_Template) == 0x000050, "Member 'FTresEncountSpawnRequest::M_Template' has a wrong offset!");

// ScriptStruct TresGame.TresLevelEntityRestartTarget
// 0x0010 (0x0010 - 0x0000)
struct FTresLevelEntityRestartTarget final
{
public:
	class ATresLevelEntityControlVolume*          M_SequenceOwner;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresLevelEntityRestartSequence               M_Sequence;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLevelEntityRestartTarget) == 0x000008, "Wrong alignment on FTresLevelEntityRestartTarget");
static_assert(sizeof(FTresLevelEntityRestartTarget) == 0x000010, "Wrong size on FTresLevelEntityRestartTarget");
static_assert(offsetof(FTresLevelEntityRestartTarget, M_SequenceOwner) == 0x000000, "Member 'FTresLevelEntityRestartTarget::M_SequenceOwner' has a wrong offset!");
static_assert(offsetof(FTresLevelEntityRestartTarget, M_Sequence) == 0x000008, "Member 'FTresLevelEntityRestartTarget::M_Sequence' has a wrong offset!");

// ScriptStruct TresGame.TresLgRxPhaseData
// 0x0028 (0x0028 - 0x0000)
struct FTresLgRxPhaseData final
{
public:
	int32                                         M_Damage;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AttackRate;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttackCountMin;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_AttackCountMax;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_HeavyAttackRate;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresLgRxRushData>              M_RushData;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLgRxPhaseData) == 0x000008, "Wrong alignment on FTresLgRxPhaseData");
static_assert(sizeof(FTresLgRxPhaseData) == 0x000028, "Wrong size on FTresLgRxPhaseData");
static_assert(offsetof(FTresLgRxPhaseData, M_Damage) == 0x000000, "Member 'FTresLgRxPhaseData::M_Damage' has a wrong offset!");
static_assert(offsetof(FTresLgRxPhaseData, M_AttackRate) == 0x000004, "Member 'FTresLgRxPhaseData::M_AttackRate' has a wrong offset!");
static_assert(offsetof(FTresLgRxPhaseData, M_AttackCountMin) == 0x000008, "Member 'FTresLgRxPhaseData::M_AttackCountMin' has a wrong offset!");
static_assert(offsetof(FTresLgRxPhaseData, M_AttackCountMax) == 0x00000C, "Member 'FTresLgRxPhaseData::M_AttackCountMax' has a wrong offset!");
static_assert(offsetof(FTresLgRxPhaseData, M_HeavyAttackRate) == 0x000010, "Member 'FTresLgRxPhaseData::M_HeavyAttackRate' has a wrong offset!");
static_assert(offsetof(FTresLgRxPhaseData, M_RushData) == 0x000018, "Member 'FTresLgRxPhaseData::M_RushData' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnRuleChildGenerator
// 0x1156FE90 (0x1156FE90 - 0x0000)
struct alignas(0x1156FE90) FTresSpawnRuleChildGenerator final
{
public:
	TSubclassOf<class AActor>                     GeneratedClass;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSpawnRuleChildGenerator) == 0x1156FE90, "Wrong alignment on FTresSpawnRuleChildGenerator");
static_assert(sizeof(FTresSpawnRuleChildGenerator) == 0x1156FE90, "Wrong size on FTresSpawnRuleChildGenerator");
static_assert(offsetof(FTresSpawnRuleChildGenerator, GeneratedClass) == 0x000000, "Member 'FTresSpawnRuleChildGenerator::GeneratedClass' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleChildGenerator, Size) == 0x000008, "Member 'FTresSpawnRuleChildGenerator::Size' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleChildGenerator, Num) == 0x00000C, "Member 'FTresSpawnRuleChildGenerator::Num' has a wrong offset!");

// ScriptStruct TresGame.TresLSIScoreEntryStages
// 0x0010 (0x0010 - 0x0000)
struct FTresLSIScoreEntryStages final
{
public:
	int32                                         Stages;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLSIScoreEntryStages) == 0x000004, "Wrong alignment on FTresLSIScoreEntryStages");
static_assert(sizeof(FTresLSIScoreEntryStages) == 0x000010, "Wrong size on FTresLSIScoreEntryStages");
static_assert(offsetof(FTresLSIScoreEntryStages, Stages) == 0x000000, "Member 'FTresLSIScoreEntryStages::Stages' has a wrong offset!");

// ScriptStruct TresGame.TresUILoadingScreenData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresUILoadingScreenData final : public FTableRowBase
{
public:
	class FName                                   DefinitionName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresWorldCode                                WorldCode;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NeedFlagName;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIValueCompareType                       NeedCmpType;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NeedFlagLabelName;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisableFlagName;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIValueCompareType                       DisableCmpType;                                    // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisableFlagLabelName;                              // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LotValue;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceAtSuccess;                                    // 0x004C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x004D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUILoadingScreenData) == 0x11413080, "Wrong alignment on FTresUILoadingScreenData");
static_assert(sizeof(FTresUILoadingScreenData) == 0x11413080, "Wrong size on FTresUILoadingScreenData");
static_assert(offsetof(FTresUILoadingScreenData, DefinitionName) == 0x000008, "Member 'FTresUILoadingScreenData::DefinitionName' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenData, WorldCode) == 0x000010, "Member 'FTresUILoadingScreenData::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenData, NeedFlagName) == 0x000018, "Member 'FTresUILoadingScreenData::NeedFlagName' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenData, NeedCmpType) == 0x000020, "Member 'FTresUILoadingScreenData::NeedCmpType' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenData, NeedFlagLabelName) == 0x000028, "Member 'FTresUILoadingScreenData::NeedFlagLabelName' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenData, DisableFlagName) == 0x000030, "Member 'FTresUILoadingScreenData::DisableFlagName' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenData, DisableCmpType) == 0x000038, "Member 'FTresUILoadingScreenData::DisableCmpType' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenData, DisableFlagLabelName) == 0x000040, "Member 'FTresUILoadingScreenData::DisableFlagLabelName' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenData, LotValue) == 0x000048, "Member 'FTresUILoadingScreenData::LotValue' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenData, ForceAtSuccess) == 0x00004C, "Member 'FTresUILoadingScreenData::ForceAtSuccess' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenData, Version) == 0x00004D, "Member 'FTresUILoadingScreenData::Version' has a wrong offset!");

// ScriptStruct TresGame.TresLSIScoreEntryMusicalFarmer
// 0x1154D830 (0x1154D830 - 0x0000)
struct alignas(0x1154D830) FTresLSIScoreEntryMusicalFarmer final
{
public:
	ETresLSIMusicFarmerMode                       Mode;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresLSIScoreEntryMusicalFarmer) == 0x1154D830, "Wrong alignment on FTresLSIScoreEntryMusicalFarmer");
static_assert(sizeof(FTresLSIScoreEntryMusicalFarmer) == 0x1154D830, "Wrong size on FTresLSIScoreEntryMusicalFarmer");
static_assert(offsetof(FTresLSIScoreEntryMusicalFarmer, Mode) == 0x000000, "Member 'FTresLSIScoreEntryMusicalFarmer::Mode' has a wrong offset!");
static_assert(offsetof(FTresLSIScoreEntryMusicalFarmer, Score) == 0x000004, "Member 'FTresLSIScoreEntryMusicalFarmer::Score' has a wrong offset!");

// ScriptStruct TresGame.TresCockpitShortcutCmdInfo
// 0x0034 (0x0034 - 0x0000)
struct FTresCockpitShortcutCmdInfo final
{
public:
	struct FTresCockpitCmd                        M_cockpitCmdList[0x4];                             // 0x0000(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCockpitShortcutCmdInfo) == 0x000001, "Wrong alignment on FTresCockpitShortcutCmdInfo");
static_assert(sizeof(FTresCockpitShortcutCmdInfo) == 0x000034, "Wrong size on FTresCockpitShortcutCmdInfo");
static_assert(offsetof(FTresCockpitShortcutCmdInfo, M_cockpitCmdList) == 0x000000, "Member 'FTresCockpitShortcutCmdInfo::M_cockpitCmdList' has a wrong offset!");

// ScriptStruct TresGame.TresMapSetObjData
// 0x0010 (0x0010 - 0x0000)
struct FTresMapSetObjData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresMapSetObjType                            Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresMapSetObjData) == 0x000004, "Wrong alignment on FTresMapSetObjData");
static_assert(sizeof(FTresMapSetObjData) == 0x000010, "Wrong size on FTresMapSetObjData");
static_assert(offsetof(FTresMapSetObjData, Name) == 0x000000, "Member 'FTresMapSetObjData::Name' has a wrong offset!");
static_assert(offsetof(FTresMapSetObjData, Type) == 0x000008, "Member 'FTresMapSetObjData::Type' has a wrong offset!");

// ScriptStruct TresGame.TresMapSetDataArray
// 0x0010 (0x0010 - 0x0000)
struct FTresMapSetDataArray final
{
public:
	TArray<struct FTresMapSetData>                DataArray;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMapSetDataArray) == 0x000008, "Wrong alignment on FTresMapSetDataArray");
static_assert(sizeof(FTresMapSetDataArray) == 0x000010, "Wrong size on FTresMapSetDataArray");
static_assert(offsetof(FTresMapSetDataArray, DataArray) == 0x000000, "Member 'FTresMapSetDataArray::DataArray' has a wrong offset!");

// ScriptStruct TresGame.TresRemyRestaurantRankDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresRemyRestaurantRankDataTable final : public FTableRowBase
{
public:
	ERemyRestaurantRank                           Rank;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NecessaryPoint;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemyMilestone                                Milestone;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemyKitchenGrade                             KitchenGrade;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRemyRestaurantRankDataTable) == 0x11413080, "Wrong alignment on FTresRemyRestaurantRankDataTable");
static_assert(sizeof(FTresRemyRestaurantRankDataTable) == 0x11413080, "Wrong size on FTresRemyRestaurantRankDataTable");
static_assert(offsetof(FTresRemyRestaurantRankDataTable, Rank) == 0x000008, "Member 'FTresRemyRestaurantRankDataTable::Rank' has a wrong offset!");
static_assert(offsetof(FTresRemyRestaurantRankDataTable, NecessaryPoint) == 0x00000C, "Member 'FTresRemyRestaurantRankDataTable::NecessaryPoint' has a wrong offset!");
static_assert(offsetof(FTresRemyRestaurantRankDataTable, Milestone) == 0x000010, "Member 'FTresRemyRestaurantRankDataTable::Milestone' has a wrong offset!");
static_assert(offsetof(FTresRemyRestaurantRankDataTable, KitchenGrade) == 0x000011, "Member 'FTresRemyRestaurantRankDataTable::KitchenGrade' has a wrong offset!");

// ScriptStruct TresGame.TresMBClipElement
// 0x1154E370 (0x1154E370 - 0x0000)
struct alignas(0x1154E370) FTresMBClipElement final
{
public:
	int32                                         M_CameraIndex;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Start;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Stop;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bFadeOut;                                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_FadeoutTime;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bFadeOutCaptureEveryFrame;                       // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_FadeOutCaptureOffsetTime;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PreBlankTime;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PostBlankTime;                                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMBClipElement) == 0x1154E370, "Wrong alignment on FTresMBClipElement");
static_assert(sizeof(FTresMBClipElement) == 0x1154E370, "Wrong size on FTresMBClipElement");
static_assert(offsetof(FTresMBClipElement, M_CameraIndex) == 0x000000, "Member 'FTresMBClipElement::M_CameraIndex' has a wrong offset!");
static_assert(offsetof(FTresMBClipElement, M_Start) == 0x000004, "Member 'FTresMBClipElement::M_Start' has a wrong offset!");
static_assert(offsetof(FTresMBClipElement, M_Stop) == 0x000008, "Member 'FTresMBClipElement::M_Stop' has a wrong offset!");
static_assert(offsetof(FTresMBClipElement, M_bFadeOut) == 0x00000C, "Member 'FTresMBClipElement::M_bFadeOut' has a wrong offset!");
static_assert(offsetof(FTresMBClipElement, M_FadeoutTime) == 0x000010, "Member 'FTresMBClipElement::M_FadeoutTime' has a wrong offset!");
static_assert(offsetof(FTresMBClipElement, M_bFadeOutCaptureEveryFrame) == 0x000014, "Member 'FTresMBClipElement::M_bFadeOutCaptureEveryFrame' has a wrong offset!");
static_assert(offsetof(FTresMBClipElement, M_FadeOutCaptureOffsetTime) == 0x000018, "Member 'FTresMBClipElement::M_FadeOutCaptureOffsetTime' has a wrong offset!");
static_assert(offsetof(FTresMBClipElement, M_PreBlankTime) == 0x00001C, "Member 'FTresMBClipElement::M_PreBlankTime' has a wrong offset!");
static_assert(offsetof(FTresMBClipElement, M_PostBlankTime) == 0x000020, "Member 'FTresMBClipElement::M_PostBlankTime' has a wrong offset!");

// ScriptStruct TresGame.MovableCrabParam
// 0x1155E850 (0x1155E850 - 0x0000)
struct alignas(0x1155E850) FMovableCrabParam final
{
public:
	float                                         M_directionChangeInterval;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_turnRate;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_turnRateOnHitWall;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_turnRateTimeOnHitWall;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_moveRange;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_moveRangePredictRate;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_defaultVelocity;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_maxDeltaAngle;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_gravityScaleOnMove;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovableCrabParam) == 0x1155E850, "Wrong alignment on FMovableCrabParam");
static_assert(sizeof(FMovableCrabParam) == 0x1155E850, "Wrong size on FMovableCrabParam");
static_assert(offsetof(FMovableCrabParam, M_directionChangeInterval) == 0x000000, "Member 'FMovableCrabParam::M_directionChangeInterval' has a wrong offset!");
static_assert(offsetof(FMovableCrabParam, M_turnRate) == 0x000004, "Member 'FMovableCrabParam::M_turnRate' has a wrong offset!");
static_assert(offsetof(FMovableCrabParam, M_turnRateOnHitWall) == 0x000008, "Member 'FMovableCrabParam::M_turnRateOnHitWall' has a wrong offset!");
static_assert(offsetof(FMovableCrabParam, M_turnRateTimeOnHitWall) == 0x00000C, "Member 'FMovableCrabParam::M_turnRateTimeOnHitWall' has a wrong offset!");
static_assert(offsetof(FMovableCrabParam, M_moveRange) == 0x000010, "Member 'FMovableCrabParam::M_moveRange' has a wrong offset!");
static_assert(offsetof(FMovableCrabParam, M_moveRangePredictRate) == 0x000014, "Member 'FMovableCrabParam::M_moveRangePredictRate' has a wrong offset!");
static_assert(offsetof(FMovableCrabParam, M_defaultVelocity) == 0x000018, "Member 'FMovableCrabParam::M_defaultVelocity' has a wrong offset!");
static_assert(offsetof(FMovableCrabParam, M_maxDeltaAngle) == 0x00001C, "Member 'FMovableCrabParam::M_maxDeltaAngle' has a wrong offset!");
static_assert(offsetof(FMovableCrabParam, M_gravityScaleOnMove) == 0x000020, "Member 'FMovableCrabParam::M_gravityScaleOnMove' has a wrong offset!");

// ScriptStruct TresGame.TresTutorialData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresTutorialData final : public FTableRowBase
{
public:
	class FString                                 TextId;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DetailTextID;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    GameFlag;                                          // 0x0028(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	ETresGameHelp                                 GameHelp;                                          // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTutorialData) == 0x11413080, "Wrong alignment on FTresTutorialData");
static_assert(sizeof(FTresTutorialData) == 0x11413080, "Wrong size on FTresTutorialData");
static_assert(offsetof(FTresTutorialData, TextId) == 0x000008, "Member 'FTresTutorialData::TextId' has a wrong offset!");
static_assert(offsetof(FTresTutorialData, DetailTextID) == 0x000018, "Member 'FTresTutorialData::DetailTextID' has a wrong offset!");
static_assert(offsetof(FTresTutorialData, GameFlag) == 0x000028, "Member 'FTresTutorialData::GameFlag' has a wrong offset!");
static_assert(offsetof(FTresTutorialData, GameHelp) == 0x000040, "Member 'FTresTutorialData::GameHelp' has a wrong offset!");

// ScriptStruct TresGame.TresMBCameraElement
// 0x1154EED0 (0x1154EED0 - 0x0000)
struct alignas(0x1154EED0) FTresMBCameraElement final
{
public:
	int32                                         M_Index;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_InterestIndex;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_roll;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_FOV;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_CurveIndex[0x2];                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMBCameraElement) == 0x1154EED0, "Wrong alignment on FTresMBCameraElement");
static_assert(sizeof(FTresMBCameraElement) == 0x1154EED0, "Wrong size on FTresMBCameraElement");
static_assert(offsetof(FTresMBCameraElement, M_Index) == 0x000000, "Member 'FTresMBCameraElement::M_Index' has a wrong offset!");
static_assert(offsetof(FTresMBCameraElement, M_InterestIndex) == 0x000004, "Member 'FTresMBCameraElement::M_InterestIndex' has a wrong offset!");
static_assert(offsetof(FTresMBCameraElement, M_roll) == 0x000008, "Member 'FTresMBCameraElement::M_roll' has a wrong offset!");
static_assert(offsetof(FTresMBCameraElement, M_FOV) == 0x00000C, "Member 'FTresMBCameraElement::M_FOV' has a wrong offset!");
static_assert(offsetof(FTresMBCameraElement, M_CurveIndex) == 0x000010, "Member 'FTresMBCameraElement::M_CurveIndex' has a wrong offset!");

// ScriptStruct TresGame.TresMBModelElement
// 0x1154F250 (0x1154F250 - 0x0000)
struct alignas(0x1154F250) FTresMBModelElement final
{
public:
	class FName                                   M_ModelName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_ParentIndex;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Scaling;                                         // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Rotation;                                        // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_Translation;                                     // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_CurveIndex[0x9];                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresMBModelElement) == 0x1154F250, "Wrong alignment on FTresMBModelElement");
static_assert(sizeof(FTresMBModelElement) == 0x1154F250, "Wrong size on FTresMBModelElement");
static_assert(offsetof(FTresMBModelElement, M_ModelName) == 0x000000, "Member 'FTresMBModelElement::M_ModelName' has a wrong offset!");
static_assert(offsetof(FTresMBModelElement, M_ParentIndex) == 0x000008, "Member 'FTresMBModelElement::M_ParentIndex' has a wrong offset!");
static_assert(offsetof(FTresMBModelElement, M_Scaling) == 0x00000C, "Member 'FTresMBModelElement::M_Scaling' has a wrong offset!");
static_assert(offsetof(FTresMBModelElement, M_Rotation) == 0x000018, "Member 'FTresMBModelElement::M_Rotation' has a wrong offset!");
static_assert(offsetof(FTresMBModelElement, M_Translation) == 0x000024, "Member 'FTresMBModelElement::M_Translation' has a wrong offset!");
static_assert(offsetof(FTresMBModelElement, M_CurveIndex) == 0x000030, "Member 'FTresMBModelElement::M_CurveIndex' has a wrong offset!");

// ScriptStruct TresGame.TresMemoryArchiveData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresMemoryArchiveData final : public FTableRowBase
{
public:
	class FName                                   MapName;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EpisodeNameTextID;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                IconAsset;                                         // 0x0020(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresMemoryArchiveData) == 0x11413080, "Wrong alignment on FTresMemoryArchiveData");
static_assert(sizeof(FTresMemoryArchiveData) == 0x11413080, "Wrong size on FTresMemoryArchiveData");
static_assert(offsetof(FTresMemoryArchiveData, MapName) == 0x000008, "Member 'FTresMemoryArchiveData::MapName' has a wrong offset!");
static_assert(offsetof(FTresMemoryArchiveData, EpisodeNameTextID) == 0x000010, "Member 'FTresMemoryArchiveData::EpisodeNameTextID' has a wrong offset!");
static_assert(offsetof(FTresMemoryArchiveData, IconAsset) == 0x000020, "Member 'FTresMemoryArchiveData::IconAsset' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamOnRateInfo
// 0x115508B0 (0x115508B0 - 0x0000)
struct alignas(0x115508B0) FEX359_BeamOnRateInfo final
{
public:
	float                                         M_fTimingRate;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iNotify;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_BeamOnRateInfo) == 0x115508B0, "Wrong alignment on FEX359_BeamOnRateInfo");
static_assert(sizeof(FEX359_BeamOnRateInfo) == 0x115508B0, "Wrong size on FEX359_BeamOnRateInfo");
static_assert(offsetof(FEX359_BeamOnRateInfo, M_fTimingRate) == 0x000000, "Member 'FEX359_BeamOnRateInfo::M_fTimingRate' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnRateInfo, M_iNotify) == 0x000004, "Member 'FEX359_BeamOnRateInfo::M_iNotify' has a wrong offset!");

// ScriptStruct TresGame.TresProjectileGenerator_e_ex054_TargetParam
// 0x0010 (0x0010 - 0x0000)
struct FTresProjectileGenerator_e_ex054_TargetParam final
{
public:
	class ATresCharPawnBase*                      M_pTarget;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresProjectileGenerator_e_ex054_TargetParam) == 0x000008, "Wrong alignment on FTresProjectileGenerator_e_ex054_TargetParam");
static_assert(sizeof(FTresProjectileGenerator_e_ex054_TargetParam) == 0x000010, "Wrong size on FTresProjectileGenerator_e_ex054_TargetParam");
static_assert(offsetof(FTresProjectileGenerator_e_ex054_TargetParam, M_pTarget) == 0x000000, "Member 'FTresProjectileGenerator_e_ex054_TargetParam::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.TresAnims_e_ex113_Move2_UpDown
// 0x0018 (0x0018 - 0x0000)
struct FTresAnims_e_ex113_Move2_UpDown final
{
public:
	class UAnimationAsset*                        StartAnimData;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        LoopAnimData;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        EndAnimData;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresAnims_e_ex113_Move2_UpDown) == 0x000008, "Wrong alignment on FTresAnims_e_ex113_Move2_UpDown");
static_assert(sizeof(FTresAnims_e_ex113_Move2_UpDown) == 0x000018, "Wrong size on FTresAnims_e_ex113_Move2_UpDown");
static_assert(offsetof(FTresAnims_e_ex113_Move2_UpDown, StartAnimData) == 0x000000, "Member 'FTresAnims_e_ex113_Move2_UpDown::StartAnimData' has a wrong offset!");
static_assert(offsetof(FTresAnims_e_ex113_Move2_UpDown, LoopAnimData) == 0x000008, "Member 'FTresAnims_e_ex113_Move2_UpDown::LoopAnimData' has a wrong offset!");
static_assert(offsetof(FTresAnims_e_ex113_Move2_UpDown, EndAnimData) == 0x000010, "Member 'FTresAnims_e_ex113_Move2_UpDown::EndAnimData' has a wrong offset!");

// ScriptStruct TresGame.TresMovementComponentPostPhysicsTickFunction
// 0x11D07 (0x11D5F - 0x0058)
struct alignas(0x11D5F) FTresMovementComponentPostPhysicsTickFunction final : public FTickFunction
{
};
static_assert(alignof(FTresMovementComponentPostPhysicsTickFunction) == 0x011D5F, "Wrong alignment on FTresMovementComponentPostPhysicsTickFunction");
static_assert(sizeof(FTresMovementComponentPostPhysicsTickFunction) == 0x011D5F, "Wrong size on FTresMovementComponentPostPhysicsTickFunction");

// ScriptStruct TresGame.TresPhotoHologramEffectInstance
// 0x0030 (0x0030 - 0x0000)
struct FTresPhotoHologramEffectInstance final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       M_pPSCList;                                        // 0x0010(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ATresPhotoHologramActor> M_pOwner;                                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPhotoHologramEffectInstance) == 0x000008, "Wrong alignment on FTresPhotoHologramEffectInstance");
static_assert(sizeof(FTresPhotoHologramEffectInstance) == 0x000030, "Wrong size on FTresPhotoHologramEffectInstance");
static_assert(offsetof(FTresPhotoHologramEffectInstance, M_pPSCList) == 0x000010, "Member 'FTresPhotoHologramEffectInstance::M_pPSCList' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectInstance, M_pOwner) == 0x000020, "Member 'FTresPhotoHologramEffectInstance::M_pOwner' has a wrong offset!");

// ScriptStruct TresGame.TresRailSlideWork
// 0x00F0 (0x00F0 - 0x0000)
struct FTresRailSlideWork final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_LeadActor;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQEX_SplineActor*                      M_RailSlideActor;                                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_SplineComponent*                  M_RailSlideComponent;                              // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEX_SplineActor*                      M_LastRailSlideActor;                              // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_SplineComponent*                  M_LastRailSlideComponent;                          // 0x0040(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEX_SplineActor*                      M_PauseCheckActor;                                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_SplineComponent*                  M_PauseCheckComponent;                             // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x98];                                      // 0x0058(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRailSlideWork) == 0x000008, "Wrong alignment on FTresRailSlideWork");
static_assert(sizeof(FTresRailSlideWork) == 0x0000F0, "Wrong size on FTresRailSlideWork");
static_assert(offsetof(FTresRailSlideWork, M_LeadActor) == 0x000008, "Member 'FTresRailSlideWork::M_LeadActor' has a wrong offset!");
static_assert(offsetof(FTresRailSlideWork, M_RailSlideActor) == 0x000028, "Member 'FTresRailSlideWork::M_RailSlideActor' has a wrong offset!");
static_assert(offsetof(FTresRailSlideWork, M_RailSlideComponent) == 0x000030, "Member 'FTresRailSlideWork::M_RailSlideComponent' has a wrong offset!");
static_assert(offsetof(FTresRailSlideWork, M_LastRailSlideActor) == 0x000038, "Member 'FTresRailSlideWork::M_LastRailSlideActor' has a wrong offset!");
static_assert(offsetof(FTresRailSlideWork, M_LastRailSlideComponent) == 0x000040, "Member 'FTresRailSlideWork::M_LastRailSlideComponent' has a wrong offset!");
static_assert(offsetof(FTresRailSlideWork, M_PauseCheckActor) == 0x000048, "Member 'FTresRailSlideWork::M_PauseCheckActor' has a wrong offset!");
static_assert(offsetof(FTresRailSlideWork, M_PauseCheckComponent) == 0x000050, "Member 'FTresRailSlideWork::M_PauseCheckComponent' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_EncloseFlareHvnEntryParam
// 0x49A2 (0x49A2 - 0x0000)
struct alignas(0x49A2) FTresEnemy_e_ex771_EncloseFlareHvnEntryParam final
{
public:
	uint8                                         Pad_0[0x2C];                                       // 0x0000(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_EncloseFlareHvnEntryParam) == 0x0049A2, "Wrong alignment on FTresEnemy_e_ex771_EncloseFlareHvnEntryParam");
static_assert(sizeof(FTresEnemy_e_ex771_EncloseFlareHvnEntryParam) == 0x0049A2, "Wrong size on FTresEnemy_e_ex771_EncloseFlareHvnEntryParam");

// ScriptStruct TresGame.TresNaviMapData
// 0x13F2D0 (0x11552350 - 0x11413080)
struct alignas(0x11552350) FTresNaviMapData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture>                TextureAsset;                                      // 0x0008(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Origin;                                            // 0x002C(0x112E95F0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemKeyName;                                       // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleCorrect;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresNaviMapData) == 0x11552350, "Wrong alignment on FTresNaviMapData");
static_assert(sizeof(FTresNaviMapData) == 0x11552350, "Wrong size on FTresNaviMapData");
static_assert(offsetof(FTresNaviMapData, TextureAsset) == 0x000008, "Member 'FTresNaviMapData::TextureAsset' has a wrong offset!");
static_assert(offsetof(FTresNaviMapData, Scale) == 0x000028, "Member 'FTresNaviMapData::Scale' has a wrong offset!");
static_assert(offsetof(FTresNaviMapData, Origin) == 0x00002C, "Member 'FTresNaviMapData::Origin' has a wrong offset!");
static_assert(offsetof(FTresNaviMapData, ItemKeyName) == 0x000038, "Member 'FTresNaviMapData::ItemKeyName' has a wrong offset!");
static_assert(offsetof(FTresNaviMapData, AngleCorrect) == 0x000040, "Member 'FTresNaviMapData::AngleCorrect' has a wrong offset!");

// ScriptStruct TresGame.TresNavLinkExtendedInfo
// 0x0018 (0x0018 - 0x0000)
struct FTresNavLinkExtendedInfo final
{
public:
	uint32                                        ElementSize;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Version;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresNavLinkExtendedInfo) == 0x000008, "Wrong alignment on FTresNavLinkExtendedInfo");
static_assert(sizeof(FTresNavLinkExtendedInfo) == 0x000018, "Wrong size on FTresNavLinkExtendedInfo");
static_assert(offsetof(FTresNavLinkExtendedInfo, ElementSize) == 0x000000, "Member 'FTresNavLinkExtendedInfo::ElementSize' has a wrong offset!");
static_assert(offsetof(FTresNavLinkExtendedInfo, Version) == 0x000004, "Member 'FTresNavLinkExtendedInfo::Version' has a wrong offset!");
static_assert(offsetof(FTresNavLinkExtendedInfo, Data) == 0x000008, "Member 'FTresNavLinkExtendedInfo::Data' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_ExFlareTornadoParam
// 0x4A00 (0x4A00 - 0x0000)
struct alignas(0x4A00) FTresEnemy_e_ex773_ExFlareTornadoParam final
{
public:
	uint8                                         Pad_0[0x130];                                      // 0x0000(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_ExFlareTornadoParam) == 0x004A00, "Wrong alignment on FTresEnemy_e_ex773_ExFlareTornadoParam");
static_assert(sizeof(FTresEnemy_e_ex773_ExFlareTornadoParam) == 0x004A00, "Wrong size on FTresEnemy_e_ex773_ExFlareTornadoParam");

// ScriptStruct TresGame.TresNextTodoData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresNextTodoData final : public FTableRowBase
{
public:
	ETresWorldCode                                WorldCode;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresUIGameFlagData                    GameFlag;                                          // 0x0010(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 TextId;                                            // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresNextTodoData) == 0x11413080, "Wrong alignment on FTresNextTodoData");
static_assert(sizeof(FTresNextTodoData) == 0x11413080, "Wrong size on FTresNextTodoData");
static_assert(offsetof(FTresNextTodoData, WorldCode) == 0x000008, "Member 'FTresNextTodoData::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresNextTodoData, GameFlag) == 0x000010, "Member 'FTresNextTodoData::GameFlag' has a wrong offset!");
static_assert(offsetof(FTresNextTodoData, TextId) == 0x000028, "Member 'FTresNextTodoData::TextId' has a wrong offset!");
static_assert(offsetof(FTresNextTodoData, Version) == 0x000038, "Member 'FTresNextTodoData::Version' has a wrong offset!");

// ScriptStruct TresGame.TresE_EX781BreakSlashPatternWaveParam
// 0x1156CF50 (0x1156CF50 - 0x0000)
struct alignas(0x1156CF50) FTresE_EX781BreakSlashPatternWaveParam final
{
public:
	float                                         M_IntervalTime;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_SwordWaveRot;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_LookAheadTime;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_BulletID;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresE_EX781BreakSlashPatternWaveParam) == 0x1156CF50, "Wrong alignment on FTresE_EX781BreakSlashPatternWaveParam");
static_assert(sizeof(FTresE_EX781BreakSlashPatternWaveParam) == 0x1156CF50, "Wrong size on FTresE_EX781BreakSlashPatternWaveParam");
static_assert(offsetof(FTresE_EX781BreakSlashPatternWaveParam, M_IntervalTime) == 0x000000, "Member 'FTresE_EX781BreakSlashPatternWaveParam::M_IntervalTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX781BreakSlashPatternWaveParam, M_SwordWaveRot) == 0x000004, "Member 'FTresE_EX781BreakSlashPatternWaveParam::M_SwordWaveRot' has a wrong offset!");
static_assert(offsetof(FTresE_EX781BreakSlashPatternWaveParam, M_LookAheadTime) == 0x000008, "Member 'FTresE_EX781BreakSlashPatternWaveParam::M_LookAheadTime' has a wrong offset!");
static_assert(offsetof(FTresE_EX781BreakSlashPatternWaveParam, M_BulletID) == 0x00000C, "Member 'FTresE_EX781BreakSlashPatternWaveParam::M_BulletID' has a wrong offset!");

// ScriptStruct TresGame.TresNpcAILeadSubCharaSlot
// 0x0002 (0x0002 - 0x0000)
struct FTresNpcAILeadSubCharaSlot final
{
public:
	ETresChrUniqueID                              Slot0;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresChrUniqueID                              Slot1;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresNpcAILeadSubCharaSlot) == 0x000001, "Wrong alignment on FTresNpcAILeadSubCharaSlot");
static_assert(sizeof(FTresNpcAILeadSubCharaSlot) == 0x000002, "Wrong size on FTresNpcAILeadSubCharaSlot");
static_assert(offsetof(FTresNpcAILeadSubCharaSlot, Slot0) == 0x000000, "Member 'FTresNpcAILeadSubCharaSlot::Slot0' has a wrong offset!");
static_assert(offsetof(FTresNpcAILeadSubCharaSlot, Slot1) == 0x000001, "Member 'FTresNpcAILeadSubCharaSlot::Slot1' has a wrong offset!");

// ScriptStruct TresGame.TresNpcTractionParam
// 0x11553400 (0x11553400 - 0x0000)
struct alignas(0x11553400) FTresNpcTractionParam final
{
public:
	uint8                                         M_bTractionXY : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTractionZUp : 1;                                // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTractionZDown : 1;                              // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTractionNear : 1;                               // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bTractionFar : 1;                                // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_TractionDisMin;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TractionDisMax;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TractionMaxSpeed;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TractionAcc;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresNpcTractionParam) == 0x11553400, "Wrong alignment on FTresNpcTractionParam");
static_assert(sizeof(FTresNpcTractionParam) == 0x11553400, "Wrong size on FTresNpcTractionParam");
static_assert(offsetof(FTresNpcTractionParam, M_TractionDisMin) == 0x000004, "Member 'FTresNpcTractionParam::M_TractionDisMin' has a wrong offset!");
static_assert(offsetof(FTresNpcTractionParam, M_TractionDisMax) == 0x000008, "Member 'FTresNpcTractionParam::M_TractionDisMax' has a wrong offset!");
static_assert(offsetof(FTresNpcTractionParam, M_TractionMaxSpeed) == 0x00000C, "Member 'FTresNpcTractionParam::M_TractionMaxSpeed' has a wrong offset!");
static_assert(offsetof(FTresNpcTractionParam, M_TractionAcc) == 0x000010, "Member 'FTresNpcTractionParam::M_TractionAcc' has a wrong offset!");

// ScriptStruct TresGame.TresComNpcMaterialInfo
// 0x11554040 (0x11554040 - 0x0000)
struct alignas(0x11554040) FTresComNpcMaterialInfo final
{
public:
	class FName                                   M_MaterialName;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_ParamName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fValue;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresComNpcMaterialInfo) == 0x11554040, "Wrong alignment on FTresComNpcMaterialInfo");
static_assert(sizeof(FTresComNpcMaterialInfo) == 0x11554040, "Wrong size on FTresComNpcMaterialInfo");
static_assert(offsetof(FTresComNpcMaterialInfo, M_MaterialName) == 0x000000, "Member 'FTresComNpcMaterialInfo::M_MaterialName' has a wrong offset!");
static_assert(offsetof(FTresComNpcMaterialInfo, M_ParamName) == 0x000008, "Member 'FTresComNpcMaterialInfo::M_ParamName' has a wrong offset!");
static_assert(offsetof(FTresComNpcMaterialInfo, M_fValue) == 0x000010, "Member 'FTresComNpcMaterialInfo::M_fValue' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex711_BouncyPetsParam
// 0x11554500 (0x11554500 - 0x0000)
struct alignas(0x11554500) FTresEnemy_e_ex711_BouncyPetsParam final
{
public:
	int32                                         M_BouncyPetsNum;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DistMin;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DistMax;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HeightMin;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HeightMax;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevolutionSpeed;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevolutionOffsetYaw;                             // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex711_BouncyPetsParam) == 0x11554500, "Wrong alignment on FTresEnemy_e_ex711_BouncyPetsParam");
static_assert(sizeof(FTresEnemy_e_ex711_BouncyPetsParam) == 0x11554500, "Wrong size on FTresEnemy_e_ex711_BouncyPetsParam");
static_assert(offsetof(FTresEnemy_e_ex711_BouncyPetsParam, M_BouncyPetsNum) == 0x000000, "Member 'FTresEnemy_e_ex711_BouncyPetsParam::M_BouncyPetsNum' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_BouncyPetsParam, M_DistMin) == 0x000004, "Member 'FTresEnemy_e_ex711_BouncyPetsParam::M_DistMin' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_BouncyPetsParam, M_DistMax) == 0x000008, "Member 'FTresEnemy_e_ex711_BouncyPetsParam::M_DistMax' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_BouncyPetsParam, M_HeightMin) == 0x00000C, "Member 'FTresEnemy_e_ex711_BouncyPetsParam::M_HeightMin' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_BouncyPetsParam, M_HeightMax) == 0x000010, "Member 'FTresEnemy_e_ex711_BouncyPetsParam::M_HeightMax' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_BouncyPetsParam, M_RevolutionSpeed) == 0x000014, "Member 'FTresEnemy_e_ex711_BouncyPetsParam::M_RevolutionSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_BouncyPetsParam, M_RevolutionOffsetYaw) == 0x000018, "Member 'FTresEnemy_e_ex711_BouncyPetsParam::M_RevolutionOffsetYaw' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex711_OuterScaffoldParam
// 0x115549A0 (0x115549A0 - 0x0000)
struct alignas(0x115549A0) FTresEnemy_e_ex711_OuterScaffoldParam final
{
public:
	int32                                         M_ScaffoldNum;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HeightMin;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_HeightMax;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DistMin;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DistMax;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RotSpeed;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RevolutionSpeed;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TornadoRotSpeed;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_TornadoRevolutionSpeed;                          // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex711_OuterScaffoldParam) == 0x115549A0, "Wrong alignment on FTresEnemy_e_ex711_OuterScaffoldParam");
static_assert(sizeof(FTresEnemy_e_ex711_OuterScaffoldParam) == 0x115549A0, "Wrong size on FTresEnemy_e_ex711_OuterScaffoldParam");
static_assert(offsetof(FTresEnemy_e_ex711_OuterScaffoldParam, M_ScaffoldNum) == 0x000000, "Member 'FTresEnemy_e_ex711_OuterScaffoldParam::M_ScaffoldNum' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_OuterScaffoldParam, M_HeightMin) == 0x000004, "Member 'FTresEnemy_e_ex711_OuterScaffoldParam::M_HeightMin' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_OuterScaffoldParam, M_HeightMax) == 0x000008, "Member 'FTresEnemy_e_ex711_OuterScaffoldParam::M_HeightMax' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_OuterScaffoldParam, M_DistMin) == 0x00000C, "Member 'FTresEnemy_e_ex711_OuterScaffoldParam::M_DistMin' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_OuterScaffoldParam, M_DistMax) == 0x000010, "Member 'FTresEnemy_e_ex711_OuterScaffoldParam::M_DistMax' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_OuterScaffoldParam, M_RotSpeed) == 0x000014, "Member 'FTresEnemy_e_ex711_OuterScaffoldParam::M_RotSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_OuterScaffoldParam, M_RevolutionSpeed) == 0x000018, "Member 'FTresEnemy_e_ex711_OuterScaffoldParam::M_RevolutionSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_OuterScaffoldParam, M_TornadoRotSpeed) == 0x00001C, "Member 'FTresEnemy_e_ex711_OuterScaffoldParam::M_TornadoRotSpeed' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex711_OuterScaffoldParam, M_TornadoRevolutionSpeed) == 0x000020, "Member 'FTresEnemy_e_ex711_OuterScaffoldParam::M_TornadoRevolutionSpeed' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_CrushingPattern
// 0x112F6AF0 (0x112F6AF0 - 0x0000)
struct FTresEnemy_e_ex771_CrushingPattern final
{
public:
	class FName                                   M_Comment;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   M_Keys;                                            // 0x0008(0x112F6AF0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 M_pro_CrushingParamNoArray;                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex771_CrushingPattern) == 0x112F6AF0, "Wrong alignment on FTresEnemy_e_ex771_CrushingPattern");
static_assert(sizeof(FTresEnemy_e_ex771_CrushingPattern) == 0x112F6AF0, "Wrong size on FTresEnemy_e_ex771_CrushingPattern");
static_assert(offsetof(FTresEnemy_e_ex771_CrushingPattern, M_Comment) == 0x000000, "Member 'FTresEnemy_e_ex771_CrushingPattern::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex771_CrushingPattern, M_Keys) == 0x000008, "Member 'FTresEnemy_e_ex771_CrushingPattern::M_Keys' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex771_CrushingPattern, M_pro_CrushingParamNoArray) == 0x000020, "Member 'FTresEnemy_e_ex771_CrushingPattern::M_pro_CrushingParamNoArray' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex771_CrushingParam
// 0x112E95F0 (0x112E95F0 - 0x0000)
struct FTresEnemy_e_ex771_CrushingParam final
{
public:
	class FName                                   M_Comment;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     M_Material;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_Size;                                            // 0x0010(0x112E95F0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AnimTime;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_BreakBlendMode                          M_Mode;                                            // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_CrushingParam) == 0x112E95F0, "Wrong alignment on FTresEnemy_e_ex771_CrushingParam");
static_assert(sizeof(FTresEnemy_e_ex771_CrushingParam) == 0x112E95F0, "Wrong size on FTresEnemy_e_ex771_CrushingParam");
static_assert(offsetof(FTresEnemy_e_ex771_CrushingParam, M_Comment) == 0x000000, "Member 'FTresEnemy_e_ex771_CrushingParam::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex771_CrushingParam, M_Material) == 0x000008, "Member 'FTresEnemy_e_ex771_CrushingParam::M_Material' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex771_CrushingParam, M_Size) == 0x000010, "Member 'FTresEnemy_e_ex771_CrushingParam::M_Size' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex771_CrushingParam, M_AnimTime) == 0x000018, "Member 'FTresEnemy_e_ex771_CrushingParam::M_AnimTime' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex771_CrushingParam, M_Mode) == 0x00001C, "Member 'FTresEnemy_e_ex771_CrushingParam::M_Mode' has a wrong offset!");

// ScriptStruct TresGame.TresParam_e_ex773_SpawnParam
// 0x0010 (0x0010 - 0x0000)
struct FTresParam_e_ex773_SpawnParam final
{
public:
	float                                         Interval;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     SpawnClass;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresParam_e_ex773_SpawnParam) == 0x000008, "Wrong alignment on FTresParam_e_ex773_SpawnParam");
static_assert(sizeof(FTresParam_e_ex773_SpawnParam) == 0x000010, "Wrong size on FTresParam_e_ex773_SpawnParam");
static_assert(offsetof(FTresParam_e_ex773_SpawnParam, Interval) == 0x000000, "Member 'FTresParam_e_ex773_SpawnParam::Interval' has a wrong offset!");
static_assert(offsetof(FTresParam_e_ex773_SpawnParam, SpawnClass) == 0x000008, "Member 'FTresParam_e_ex773_SpawnParam::SpawnClass' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_CrushingPattern
// 0x112F6AF0 (0x112F6AF0 - 0x0000)
struct FTresEnemy_e_ex773_CrushingPattern final
{
public:
	class FName                                   M_Comment;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   M_Keys;                                            // 0x0008(0x112F6AF0)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 M_pro_CrushingParamNoArray;                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex773_CrushingPattern) == 0x112F6AF0, "Wrong alignment on FTresEnemy_e_ex773_CrushingPattern");
static_assert(sizeof(FTresEnemy_e_ex773_CrushingPattern) == 0x112F6AF0, "Wrong size on FTresEnemy_e_ex773_CrushingPattern");
static_assert(offsetof(FTresEnemy_e_ex773_CrushingPattern, M_Comment) == 0x000000, "Member 'FTresEnemy_e_ex773_CrushingPattern::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex773_CrushingPattern, M_Keys) == 0x000008, "Member 'FTresEnemy_e_ex773_CrushingPattern::M_Keys' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex773_CrushingPattern, M_pro_CrushingParamNoArray) == 0x000020, "Member 'FTresEnemy_e_ex773_CrushingPattern::M_pro_CrushingParamNoArray' has a wrong offset!");

// ScriptStruct TresGame.TresPhilharmonicData
// 0x143720 (0x115567A0 - 0x11413080)
struct alignas(0x115567A0) FTresPhilharmonicData final : public FTableRowBase
{
public:
	class FName                                   MapName;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProgramMoviePath;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProgramNameTextID;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPhilharmonicData) == 0x115567A0, "Wrong alignment on FTresPhilharmonicData");
static_assert(sizeof(FTresPhilharmonicData) == 0x115567A0, "Wrong size on FTresPhilharmonicData");
static_assert(offsetof(FTresPhilharmonicData, MapName) == 0x000008, "Member 'FTresPhilharmonicData::MapName' has a wrong offset!");
static_assert(offsetof(FTresPhilharmonicData, ProgramMoviePath) == 0x000010, "Member 'FTresPhilharmonicData::ProgramMoviePath' has a wrong offset!");
static_assert(offsetof(FTresPhilharmonicData, ProgramNameTextID) == 0x000020, "Member 'FTresPhilharmonicData::ProgramNameTextID' has a wrong offset!");

// ScriptStruct TresGame.TresPhotoHologramEditEffectDef
// 0x0010 (0x0010 - 0x0000)
struct FTresPhotoHologramEditEffectDef final
{
public:
	float                                         TargetMaxRootSize;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        EditMarkerEffectData;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPhotoHologramEditEffectDef) == 0x000008, "Wrong alignment on FTresPhotoHologramEditEffectDef");
static_assert(sizeof(FTresPhotoHologramEditEffectDef) == 0x000010, "Wrong size on FTresPhotoHologramEditEffectDef");
static_assert(offsetof(FTresPhotoHologramEditEffectDef, TargetMaxRootSize) == 0x000000, "Member 'FTresPhotoHologramEditEffectDef::TargetMaxRootSize' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEditEffectDef, EditMarkerEffectData) == 0x000008, "Member 'FTresPhotoHologramEditEffectDef::EditMarkerEffectData' has a wrong offset!");

// ScriptStruct TresGame.TresPhotoHologramEffectData
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresPhotoHologramEffectData final
{
public:
	class UParticleSystem*                        AttachEffect;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_ATTACH_OBJECT_NAME                      AttachType;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndSocketName;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0020(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x002C(0x112E9AF0)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ScaleOffset;                                       // 0x0038(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarmupTime;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PauseEffect;                                       // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PauseTime;                                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_ATTACH_EFFECT_END_TYPE                  AttachEffectEndType;                               // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOut;                                           // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresHologramWorldInitParam>    WorldInitParamList;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EffectInvisibleInPhoto;                            // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAsWeaponEffect;                                  // 0x0069(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPhotoHologramEffectData) == 0x112E9AF0, "Wrong alignment on FTresPhotoHologramEffectData");
static_assert(sizeof(FTresPhotoHologramEffectData) == 0x112E9AF0, "Wrong size on FTresPhotoHologramEffectData");
static_assert(offsetof(FTresPhotoHologramEffectData, AttachEffect) == 0x000000, "Member 'FTresPhotoHologramEffectData::AttachEffect' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, AttachType) == 0x000008, "Member 'FTresPhotoHologramEffectData::AttachType' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, SocketName) == 0x000010, "Member 'FTresPhotoHologramEffectData::SocketName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, EndSocketName) == 0x000018, "Member 'FTresPhotoHologramEffectData::EndSocketName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, LocationOffset) == 0x000020, "Member 'FTresPhotoHologramEffectData::LocationOffset' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, RotationOffset) == 0x00002C, "Member 'FTresPhotoHologramEffectData::RotationOffset' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, ScaleOffset) == 0x000038, "Member 'FTresPhotoHologramEffectData::ScaleOffset' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, WarmupTime) == 0x000044, "Member 'FTresPhotoHologramEffectData::WarmupTime' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, PauseEffect) == 0x000048, "Member 'FTresPhotoHologramEffectData::PauseEffect' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, PauseTime) == 0x00004C, "Member 'FTresPhotoHologramEffectData::PauseTime' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, AttachEffectEndType) == 0x000050, "Member 'FTresPhotoHologramEffectData::AttachEffectEndType' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, FadeOut) == 0x000054, "Member 'FTresPhotoHologramEffectData::FadeOut' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, WorldInitParamList) == 0x000058, "Member 'FTresPhotoHologramEffectData::WorldInitParamList' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, EffectInvisibleInPhoto) == 0x000068, "Member 'FTresPhotoHologramEffectData::EffectInvisibleInPhoto' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramEffectData, IsAsWeaponEffect) == 0x000069, "Member 'FTresPhotoHologramEffectData::IsAsWeaponEffect' has a wrong offset!");

// ScriptStruct TresGame.TresPhotoHologramPoseDataTable
// 0x144090 (0x11557110 - 0x11413080)
struct alignas(0x11557110) FTresPhotoHologramPoseDataTable final : public FTableRowBase
{
public:
	class FName                                   M_AnimName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_StartTime;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_LocationOffSet;                                  // 0x0014(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               M_RotationOffset;                                  // 0x0020(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                M_FocusDefaultLocation;                            // 0x002C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_Comment;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_MapSetId;                                        // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PoseNameNamespaceKey;                              // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoseIndex;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bWeaponVisible;                                  // 0x0064(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_ValidWeaponTag;                                  // 0x0068(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_ValidBodyCollTag;                                // 0x0070(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_ExtraValidBodyCollTagList;                       // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          M_bEnableWeaponOnOff;                              // 0x0088(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETresHologramSubAnimReplaceType>       M_WeaponOffHandReplacement;                        // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_FacialTypeList;                                  // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresPhotoHologramEffectData>   M_EffectData;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETresCharWearForm                             M_WearForm;                                        // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQEX_BonamikChangingParameter> M_BonamikGroupParams;                              // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresHologramCharaWindParam>    M_BonamikCharaWind;                                // 0x00D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   M_SetPosePreEvent;                                 // 0x00E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_SetPosePostEvent;                                // 0x00F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AfterPoseEvent;                                  // 0x00F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresPhotoHologramPoseDataTable) == 0x11557110, "Wrong alignment on FTresPhotoHologramPoseDataTable");
static_assert(sizeof(FTresPhotoHologramPoseDataTable) == 0x11557110, "Wrong size on FTresPhotoHologramPoseDataTable");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_AnimName) == 0x000008, "Member 'FTresPhotoHologramPoseDataTable::M_AnimName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_StartTime) == 0x000010, "Member 'FTresPhotoHologramPoseDataTable::M_StartTime' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_LocationOffSet) == 0x000014, "Member 'FTresPhotoHologramPoseDataTable::M_LocationOffSet' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_RotationOffset) == 0x000020, "Member 'FTresPhotoHologramPoseDataTable::M_RotationOffset' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_FocusDefaultLocation) == 0x00002C, "Member 'FTresPhotoHologramPoseDataTable::M_FocusDefaultLocation' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_Comment) == 0x000038, "Member 'FTresPhotoHologramPoseDataTable::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_MapSetId) == 0x000048, "Member 'FTresPhotoHologramPoseDataTable::M_MapSetId' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, PoseNameNamespaceKey) == 0x000050, "Member 'FTresPhotoHologramPoseDataTable::PoseNameNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, PoseIndex) == 0x000060, "Member 'FTresPhotoHologramPoseDataTable::PoseIndex' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_bWeaponVisible) == 0x000064, "Member 'FTresPhotoHologramPoseDataTable::M_bWeaponVisible' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_ValidWeaponTag) == 0x000068, "Member 'FTresPhotoHologramPoseDataTable::M_ValidWeaponTag' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_ValidBodyCollTag) == 0x000070, "Member 'FTresPhotoHologramPoseDataTable::M_ValidBodyCollTag' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_ExtraValidBodyCollTagList) == 0x000078, "Member 'FTresPhotoHologramPoseDataTable::M_ExtraValidBodyCollTagList' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_bEnableWeaponOnOff) == 0x000088, "Member 'FTresPhotoHologramPoseDataTable::M_bEnableWeaponOnOff' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_WeaponOffHandReplacement) == 0x000090, "Member 'FTresPhotoHologramPoseDataTable::M_WeaponOffHandReplacement' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_FacialTypeList) == 0x0000A0, "Member 'FTresPhotoHologramPoseDataTable::M_FacialTypeList' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_EffectData) == 0x0000B0, "Member 'FTresPhotoHologramPoseDataTable::M_EffectData' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_WearForm) == 0x0000C0, "Member 'FTresPhotoHologramPoseDataTable::M_WearForm' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_BonamikGroupParams) == 0x0000C8, "Member 'FTresPhotoHologramPoseDataTable::M_BonamikGroupParams' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_BonamikCharaWind) == 0x0000D8, "Member 'FTresPhotoHologramPoseDataTable::M_BonamikCharaWind' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_SetPosePreEvent) == 0x0000E8, "Member 'FTresPhotoHologramPoseDataTable::M_SetPosePreEvent' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_SetPosePostEvent) == 0x0000F0, "Member 'FTresPhotoHologramPoseDataTable::M_SetPosePostEvent' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramPoseDataTable, M_AfterPoseEvent) == 0x0000F8, "Member 'FTresPhotoHologramPoseDataTable::M_AfterPoseEvent' has a wrong offset!");

// ScriptStruct TresGame.TresPhotoHologramMapData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresPhotoHologramMapData final : public FTableRowBase
{
public:
	class FString                                 M_Comment;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresWorldCode                                WorldCode;                                         // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                WorldIconAsset;                                    // 0x0020(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerStartLabelName;                              // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapNameNamespaceKey;                               // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AreaNameNamespaceKey;                              // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaIndex;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                IconAsset;                                         // 0x0078(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UIPriority;                                        // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ExtraLoadingScreenDataName;                        // 0x00A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NewMarkIndex;                                    // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_UnlockGameFlagName;                              // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_UnlockGameFlagLabelName;                         // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_SaveIndex;                                       // 0x00C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharaNumMax;                                       // 0x00C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectNumMax;                                      // 0x00C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBonamikIgnoreGroundCollision;                    // 0x00CC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPhotoHologramMapData) == 0x11413080, "Wrong alignment on FTresPhotoHologramMapData");
static_assert(sizeof(FTresPhotoHologramMapData) == 0x11413080, "Wrong size on FTresPhotoHologramMapData");
static_assert(offsetof(FTresPhotoHologramMapData, M_Comment) == 0x000008, "Member 'FTresPhotoHologramMapData::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, Index) == 0x000018, "Member 'FTresPhotoHologramMapData::Index' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, WorldCode) == 0x00001C, "Member 'FTresPhotoHologramMapData::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, WorldIconAsset) == 0x000020, "Member 'FTresPhotoHologramMapData::WorldIconAsset' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, PlayerStartLabelName) == 0x000040, "Member 'FTresPhotoHologramMapData::PlayerStartLabelName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, MapName) == 0x000048, "Member 'FTresPhotoHologramMapData::MapName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, MapNameNamespaceKey) == 0x000050, "Member 'FTresPhotoHologramMapData::MapNameNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, AreaNameNamespaceKey) == 0x000060, "Member 'FTresPhotoHologramMapData::AreaNameNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, AreaIndex) == 0x000070, "Member 'FTresPhotoHologramMapData::AreaIndex' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, IconAsset) == 0x000078, "Member 'FTresPhotoHologramMapData::IconAsset' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, UIPriority) == 0x000098, "Member 'FTresPhotoHologramMapData::UIPriority' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, ExtraLoadingScreenDataName) == 0x0000A0, "Member 'FTresPhotoHologramMapData::ExtraLoadingScreenDataName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, M_NewMarkIndex) == 0x0000A8, "Member 'FTresPhotoHologramMapData::M_NewMarkIndex' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, M_UnlockGameFlagName) == 0x0000B0, "Member 'FTresPhotoHologramMapData::M_UnlockGameFlagName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, M_UnlockGameFlagLabelName) == 0x0000B8, "Member 'FTresPhotoHologramMapData::M_UnlockGameFlagLabelName' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, M_SaveIndex) == 0x0000C0, "Member 'FTresPhotoHologramMapData::M_SaveIndex' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, CharaNumMax) == 0x0000C4, "Member 'FTresPhotoHologramMapData::CharaNumMax' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, ObjectNumMax) == 0x0000C8, "Member 'FTresPhotoHologramMapData::ObjectNumMax' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramMapData, IsBonamikIgnoreGroundCollision) == 0x0000CC, "Member 'FTresPhotoHologramMapData::IsBonamikIgnoreGroundCollision' has a wrong offset!");

// ScriptStruct TresGame.TresUIWindowSetting
// 0x112E95F0 (0x112E95F0 - 0x0000)
struct FTresUIWindowSetting final
{
public:
	ETresUIWindowWaitType                         WaitType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIWindowPositionType                     PositionType;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Position;                                          // 0x0004(0x112E95F0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIWindowSetting) == 0x112E95F0, "Wrong alignment on FTresUIWindowSetting");
static_assert(sizeof(FTresUIWindowSetting) == 0x112E95F0, "Wrong size on FTresUIWindowSetting");
static_assert(offsetof(FTresUIWindowSetting, WaitType) == 0x000000, "Member 'FTresUIWindowSetting::WaitType' has a wrong offset!");
static_assert(offsetof(FTresUIWindowSetting, PositionType) == 0x000001, "Member 'FTresUIWindowSetting::PositionType' has a wrong offset!");
static_assert(offsetof(FTresUIWindowSetting, Position) == 0x000004, "Member 'FTresUIWindowSetting::Position' has a wrong offset!");

// ScriptStruct TresGame.TresPhotoHologramCameraEffectTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresPhotoHologramCameraEffectTable final : public FTableRowBase
{
public:
	class FString                                 M_Comment;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHologramActorCategory                        M_Category;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_EffectNameNamespaceKey;                          // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                M_IconAsset;                                       // 0x0030(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_UIPriority;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_MapSetId;                                        // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NewMarkIndex;                                    // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_EffectGroupID;                                   // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_IsSepiaType;                                     // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPhotoHologramCameraEffectTable) == 0x11413080, "Wrong alignment on FTresPhotoHologramCameraEffectTable");
static_assert(sizeof(FTresPhotoHologramCameraEffectTable) == 0x11413080, "Wrong size on FTresPhotoHologramCameraEffectTable");
static_assert(offsetof(FTresPhotoHologramCameraEffectTable, M_Comment) == 0x000008, "Member 'FTresPhotoHologramCameraEffectTable::M_Comment' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramCameraEffectTable, M_Category) == 0x000018, "Member 'FTresPhotoHologramCameraEffectTable::M_Category' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramCameraEffectTable, M_EffectNameNamespaceKey) == 0x000020, "Member 'FTresPhotoHologramCameraEffectTable::M_EffectNameNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramCameraEffectTable, M_IconAsset) == 0x000030, "Member 'FTresPhotoHologramCameraEffectTable::M_IconAsset' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramCameraEffectTable, M_UIPriority) == 0x000050, "Member 'FTresPhotoHologramCameraEffectTable::M_UIPriority' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramCameraEffectTable, M_MapSetId) == 0x000058, "Member 'FTresPhotoHologramCameraEffectTable::M_MapSetId' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramCameraEffectTable, M_NewMarkIndex) == 0x000060, "Member 'FTresPhotoHologramCameraEffectTable::M_NewMarkIndex' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramCameraEffectTable, M_EffectGroupID) == 0x000064, "Member 'FTresPhotoHologramCameraEffectTable::M_EffectGroupID' has a wrong offset!");
static_assert(offsetof(FTresPhotoHologramCameraEffectTable, M_IsSepiaType) == 0x000068, "Member 'FTresPhotoHologramCameraEffectTable::M_IsSepiaType' has a wrong offset!");

// ScriptStruct TresGame.TresDetectCollShapeAssetUnit2D
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresDetectCollShapeAssetUnit2D final
{
public:
	ETresDetectCollShape2D                        ShapeType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Size;                                              // 0x0004(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRocation;                                  // 0x001C(0x112E9AF0)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresDetectCollShapeAssetUnit2D) == 0x112E9AF0, "Wrong alignment on FTresDetectCollShapeAssetUnit2D");
static_assert(sizeof(FTresDetectCollShapeAssetUnit2D) == 0x112E9AF0, "Wrong size on FTresDetectCollShapeAssetUnit2D");
static_assert(offsetof(FTresDetectCollShapeAssetUnit2D, ShapeType) == 0x000000, "Member 'FTresDetectCollShapeAssetUnit2D::ShapeType' has a wrong offset!");
static_assert(offsetof(FTresDetectCollShapeAssetUnit2D, Size) == 0x000004, "Member 'FTresDetectCollShapeAssetUnit2D::Size' has a wrong offset!");
static_assert(offsetof(FTresDetectCollShapeAssetUnit2D, RelativeLocation) == 0x000010, "Member 'FTresDetectCollShapeAssetUnit2D::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FTresDetectCollShapeAssetUnit2D, RelativeRocation) == 0x00001C, "Member 'FTresDetectCollShapeAssetUnit2D::RelativeRocation' has a wrong offset!");

// ScriptStruct TresGame.TresSnapData
// 0x1155C9C0 (0x1155C9C0 - 0x0000)
struct alignas(0x1155C9C0) FTresSnapData final
{
public:
	bool                                          Snap;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightOffset;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayHeightStartOffset;                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayHeightEndOffset;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSnapData) == 0x1155C9C0, "Wrong alignment on FTresSnapData");
static_assert(sizeof(FTresSnapData) == 0x1155C9C0, "Wrong size on FTresSnapData");
static_assert(offsetof(FTresSnapData, Snap) == 0x000000, "Member 'FTresSnapData::Snap' has a wrong offset!");
static_assert(offsetof(FTresSnapData, HeightOffset) == 0x000004, "Member 'FTresSnapData::HeightOffset' has a wrong offset!");
static_assert(offsetof(FTresSnapData, LayHeightStartOffset) == 0x000008, "Member 'FTresSnapData::LayHeightStartOffset' has a wrong offset!");
static_assert(offsetof(FTresSnapData, LayHeightEndOffset) == 0x00000C, "Member 'FTresSnapData::LayHeightEndOffset' has a wrong offset!");

// ScriptStruct TresGame.TresPlayerAttackStateParameterDataTable
// 0x149C40 (0x1155CCC0 - 0x11413080)
struct alignas(0x1155CCC0) FTresPlayerAttackStateParameterDataTable final : public FTableRowBase
{
public:
	class FName                                   M_MotionName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fAnimStartTime;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bUseTractionMove;                                // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bUseRootMoveScale;                               // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsJumpAttack;                                   // 0x0016(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsDownAttack;                                   // 0x0017(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bNotFallingUntilStartAttack;                     // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bStabSuppression;                                // 0x0019(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fTractionSpeedXY;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTractionSpeedZ;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fTractionRateZ;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRootMoveLength;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fCloseRangeXY;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsFinish;                                       // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsAerial;                                       // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsInvincible;                                   // 0x0032(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsImmpbile;                                     // 0x0033(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsFaceTrgUntil;                                 // 0x0034(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIgnoreCoolDown;                                 // 0x0035(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fInvincibleTimer;                                // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bIsWarp;                                         // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fWarpTimer;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_WarpMotionName;                                  // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_dWarpAuraEffectGroup;                            // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_dEffectGroup;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_dVoiceGroup;                                     // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresPlayerAttackStateParameterDataTable) == 0x1155CCC0, "Wrong alignment on FTresPlayerAttackStateParameterDataTable");
static_assert(sizeof(FTresPlayerAttackStateParameterDataTable) == 0x1155CCC0, "Wrong size on FTresPlayerAttackStateParameterDataTable");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_MotionName) == 0x000008, "Member 'FTresPlayerAttackStateParameterDataTable::M_MotionName' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_fAnimStartTime) == 0x000010, "Member 'FTresPlayerAttackStateParameterDataTable::M_fAnimStartTime' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bUseTractionMove) == 0x000014, "Member 'FTresPlayerAttackStateParameterDataTable::M_bUseTractionMove' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bUseRootMoveScale) == 0x000015, "Member 'FTresPlayerAttackStateParameterDataTable::M_bUseRootMoveScale' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bIsJumpAttack) == 0x000016, "Member 'FTresPlayerAttackStateParameterDataTable::M_bIsJumpAttack' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bIsDownAttack) == 0x000017, "Member 'FTresPlayerAttackStateParameterDataTable::M_bIsDownAttack' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bNotFallingUntilStartAttack) == 0x000018, "Member 'FTresPlayerAttackStateParameterDataTable::M_bNotFallingUntilStartAttack' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bStabSuppression) == 0x000019, "Member 'FTresPlayerAttackStateParameterDataTable::M_bStabSuppression' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_fTractionSpeedXY) == 0x00001C, "Member 'FTresPlayerAttackStateParameterDataTable::M_fTractionSpeedXY' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_fTractionSpeedZ) == 0x000020, "Member 'FTresPlayerAttackStateParameterDataTable::M_fTractionSpeedZ' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_fTractionRateZ) == 0x000024, "Member 'FTresPlayerAttackStateParameterDataTable::M_fTractionRateZ' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_fRootMoveLength) == 0x000028, "Member 'FTresPlayerAttackStateParameterDataTable::M_fRootMoveLength' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_fCloseRangeXY) == 0x00002C, "Member 'FTresPlayerAttackStateParameterDataTable::M_fCloseRangeXY' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bIsFinish) == 0x000030, "Member 'FTresPlayerAttackStateParameterDataTable::M_bIsFinish' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bIsAerial) == 0x000031, "Member 'FTresPlayerAttackStateParameterDataTable::M_bIsAerial' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bIsInvincible) == 0x000032, "Member 'FTresPlayerAttackStateParameterDataTable::M_bIsInvincible' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bIsImmpbile) == 0x000033, "Member 'FTresPlayerAttackStateParameterDataTable::M_bIsImmpbile' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bIsFaceTrgUntil) == 0x000034, "Member 'FTresPlayerAttackStateParameterDataTable::M_bIsFaceTrgUntil' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bIgnoreCoolDown) == 0x000035, "Member 'FTresPlayerAttackStateParameterDataTable::M_bIgnoreCoolDown' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_fInvincibleTimer) == 0x000038, "Member 'FTresPlayerAttackStateParameterDataTable::M_fInvincibleTimer' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_bIsWarp) == 0x00003C, "Member 'FTresPlayerAttackStateParameterDataTable::M_bIsWarp' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_fWarpTimer) == 0x000040, "Member 'FTresPlayerAttackStateParameterDataTable::M_fWarpTimer' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_WarpMotionName) == 0x000048, "Member 'FTresPlayerAttackStateParameterDataTable::M_WarpMotionName' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_dWarpAuraEffectGroup) == 0x000050, "Member 'FTresPlayerAttackStateParameterDataTable::M_dWarpAuraEffectGroup' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_dEffectGroup) == 0x000054, "Member 'FTresPlayerAttackStateParameterDataTable::M_dEffectGroup' has a wrong offset!");
static_assert(offsetof(FTresPlayerAttackStateParameterDataTable, M_dVoiceGroup) == 0x000058, "Member 'FTresPlayerAttackStateParameterDataTable::M_dVoiceGroup' has a wrong offset!");

// ScriptStruct TresGame.TresUnlockFlagDataTable
// 0x178330 (0x1158B3B0 - 0x11413080)
struct alignas(0x1158B3B0) FTresUnlockFlagDataTable final : public FTableRowBase
{
public:
	class FName                                   GameFlagName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GameFlagLabel;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUnlockFlagDataTable) == 0x1158B3B0, "Wrong alignment on FTresUnlockFlagDataTable");
static_assert(sizeof(FTresUnlockFlagDataTable) == 0x1158B3B0, "Wrong size on FTresUnlockFlagDataTable");
static_assert(offsetof(FTresUnlockFlagDataTable, GameFlagName) == 0x000008, "Member 'FTresUnlockFlagDataTable::GameFlagName' has a wrong offset!");
static_assert(offsetof(FTresUnlockFlagDataTable, GameFlagLabel) == 0x000010, "Member 'FTresUnlockFlagDataTable::GameFlagLabel' has a wrong offset!");

// ScriptStruct TresGame.TresGimmickPrizeVelocityData
// 0x1155DCE0 (0x1155DCE0 - 0x0000)
struct alignas(0x1155DCE0) FTresGimmickPrizeVelocityData final
{
public:
	uint8                                         M_bSetDirection : 1;                               // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bApplyParentRotation : 1;                        // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_InitSpeed;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_InitSpeedRand;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PitchMin;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PitchMax;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_YawMin;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_YawMax;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AirResistance;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGimmickPrizeVelocityData) == 0x1155DCE0, "Wrong alignment on FTresGimmickPrizeVelocityData");
static_assert(sizeof(FTresGimmickPrizeVelocityData) == 0x1155DCE0, "Wrong size on FTresGimmickPrizeVelocityData");
static_assert(offsetof(FTresGimmickPrizeVelocityData, M_InitSpeed) == 0x000004, "Member 'FTresGimmickPrizeVelocityData::M_InitSpeed' has a wrong offset!");
static_assert(offsetof(FTresGimmickPrizeVelocityData, M_InitSpeedRand) == 0x000008, "Member 'FTresGimmickPrizeVelocityData::M_InitSpeedRand' has a wrong offset!");
static_assert(offsetof(FTresGimmickPrizeVelocityData, M_PitchMin) == 0x00000C, "Member 'FTresGimmickPrizeVelocityData::M_PitchMin' has a wrong offset!");
static_assert(offsetof(FTresGimmickPrizeVelocityData, M_PitchMax) == 0x000010, "Member 'FTresGimmickPrizeVelocityData::M_PitchMax' has a wrong offset!");
static_assert(offsetof(FTresGimmickPrizeVelocityData, M_YawMin) == 0x000014, "Member 'FTresGimmickPrizeVelocityData::M_YawMin' has a wrong offset!");
static_assert(offsetof(FTresGimmickPrizeVelocityData, M_YawMax) == 0x000018, "Member 'FTresGimmickPrizeVelocityData::M_YawMax' has a wrong offset!");
static_assert(offsetof(FTresGimmickPrizeVelocityData, M_AirResistance) == 0x00001C, "Member 'FTresGimmickPrizeVelocityData::M_AirResistance' has a wrong offset!");

// ScriptStruct TresGame.TresProj_MagicReaction
// 0x0010 (0x0010 - 0x0000)
struct FTresProj_MagicReaction final
{
public:
	TSubclassOf<class ATresProjectileBase>        M_ReactionSpawnProjectileClass;                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_ReactionOnlySameTeam : 1;                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresProj_MagicReaction) == 0x000008, "Wrong alignment on FTresProj_MagicReaction");
static_assert(sizeof(FTresProj_MagicReaction) == 0x000010, "Wrong size on FTresProj_MagicReaction");
static_assert(offsetof(FTresProj_MagicReaction, M_ReactionSpawnProjectileClass) == 0x000000, "Member 'FTresProj_MagicReaction::M_ReactionSpawnProjectileClass' has a wrong offset!");

// ScriptStruct TresGame.EX105_JOINT_INFO
// 0x0018 (0x0018 - 0x0000)
struct FEX105_JOINT_INFO final
{
public:
	class ATresProjectileBase*                    PCube;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX105_JOINT_INFO) == 0x000008, "Wrong alignment on FEX105_JOINT_INFO");
static_assert(sizeof(FEX105_JOINT_INFO) == 0x000018, "Wrong size on FEX105_JOINT_INFO");
static_assert(offsetof(FEX105_JOINT_INFO, PCube) == 0x000000, "Member 'FEX105_JOINT_INFO::PCube' has a wrong offset!");

// ScriptStruct TresGame.WaveHitWork_e_ex310
// 0x0110 (0x0110 - 0x0000)
struct FWaveHitWork_e_ex310 final
{
public:
	class ATresCharPawnBase*                      POwner;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x108];                                      // 0x0008(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaveHitWork_e_ex310) == 0x000008, "Wrong alignment on FWaveHitWork_e_ex310");
static_assert(sizeof(FWaveHitWork_e_ex310) == 0x000110, "Wrong size on FWaveHitWork_e_ex310");
static_assert(offsetof(FWaveHitWork_e_ex310, POwner) == 0x000000, "Member 'FWaveHitWork_e_ex310::POwner' has a wrong offset!");

// ScriptStruct TresGame.WaveOneCollInfo_e_ex310
// 0x0010 (0x0010 - 0x0000)
struct FWaveOneCollInfo_e_ex310 final
{
public:
	TArray<struct FOneCollInfo_e_ex310>           OneCollInfoArray;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaveOneCollInfo_e_ex310) == 0x000008, "Wrong alignment on FWaveOneCollInfo_e_ex310");
static_assert(sizeof(FWaveOneCollInfo_e_ex310) == 0x000010, "Wrong size on FWaveOneCollInfo_e_ex310");
static_assert(offsetof(FWaveOneCollInfo_e_ex310, OneCollInfoArray) == 0x000000, "Member 'FWaveOneCollInfo_e_ex310::OneCollInfoArray' has a wrong offset!");

// ScriptStruct TresGame.EX354_ChargeShotBounceInfo
// 0x11560F70 (0x11560F70 - 0x0000)
struct alignas(0x11560F70) FEX354_ChargeShotBounceInfo final
{
public:
	TArray<int32>                                 M_iMaxBounceCountArray;                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          M_bCountReflectAsBounce;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fMaxBounceCountDistance;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 M_fVelocityArray;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UEnvQuery*                              M_EQS_Bounce;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fEQSWaitTime;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX354_ChargeShotBounceInfo) == 0x11560F70, "Wrong alignment on FEX354_ChargeShotBounceInfo");
static_assert(sizeof(FEX354_ChargeShotBounceInfo) == 0x11560F70, "Wrong size on FEX354_ChargeShotBounceInfo");
static_assert(offsetof(FEX354_ChargeShotBounceInfo, M_iMaxBounceCountArray) == 0x000000, "Member 'FEX354_ChargeShotBounceInfo::M_iMaxBounceCountArray' has a wrong offset!");
static_assert(offsetof(FEX354_ChargeShotBounceInfo, M_bCountReflectAsBounce) == 0x000010, "Member 'FEX354_ChargeShotBounceInfo::M_bCountReflectAsBounce' has a wrong offset!");
static_assert(offsetof(FEX354_ChargeShotBounceInfo, M_fMaxBounceCountDistance) == 0x000014, "Member 'FEX354_ChargeShotBounceInfo::M_fMaxBounceCountDistance' has a wrong offset!");
static_assert(offsetof(FEX354_ChargeShotBounceInfo, M_fVelocityArray) == 0x000018, "Member 'FEX354_ChargeShotBounceInfo::M_fVelocityArray' has a wrong offset!");
static_assert(offsetof(FEX354_ChargeShotBounceInfo, M_EQS_Bounce) == 0x000028, "Member 'FEX354_ChargeShotBounceInfo::M_EQS_Bounce' has a wrong offset!");
static_assert(offsetof(FEX354_ChargeShotBounceInfo, M_fEQSWaitTime) == 0x000030, "Member 'FEX354_ChargeShotBounceInfo::M_fEQSWaitTime' has a wrong offset!");

// ScriptStruct TresGame.EX354_ClusterShotHitActorInfo
// 0x0010 (0x0010 - 0x0000)
struct FEX354_ClusterShotHitActorInfo final
{
public:
	class AActor*                                 M_HitActor;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX354_ClusterShotHitActorInfo) == 0x000008, "Wrong alignment on FEX354_ClusterShotHitActorInfo");
static_assert(sizeof(FEX354_ClusterShotHitActorInfo) == 0x000010, "Wrong size on FEX354_ClusterShotHitActorInfo");
static_assert(offsetof(FEX354_ClusterShotHitActorInfo, M_HitActor) == 0x000000, "Member 'FEX354_ClusterShotHitActorInfo::M_HitActor' has a wrong offset!");

// ScriptStruct TresGame.TresClaymoreIdleInfo_e_ex355
// 0x11562BD0 (0x11562BD0 - 0x0000)
struct alignas(0x11562BD0) FTresClaymoreIdleInfo_e_ex355 final
{
public:
	float                                         M_fRotationSpeed;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevolveSpeed;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevolveRadius;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRevolveHeight;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresClaymoreIdleInfo_e_ex355) == 0x11562BD0, "Wrong alignment on FTresClaymoreIdleInfo_e_ex355");
static_assert(sizeof(FTresClaymoreIdleInfo_e_ex355) == 0x11562BD0, "Wrong size on FTresClaymoreIdleInfo_e_ex355");
static_assert(offsetof(FTresClaymoreIdleInfo_e_ex355, M_fRotationSpeed) == 0x000000, "Member 'FTresClaymoreIdleInfo_e_ex355::M_fRotationSpeed' has a wrong offset!");
static_assert(offsetof(FTresClaymoreIdleInfo_e_ex355, M_fRevolveSpeed) == 0x000004, "Member 'FTresClaymoreIdleInfo_e_ex355::M_fRevolveSpeed' has a wrong offset!");
static_assert(offsetof(FTresClaymoreIdleInfo_e_ex355, M_fRevolveRadius) == 0x000008, "Member 'FTresClaymoreIdleInfo_e_ex355::M_fRevolveRadius' has a wrong offset!");
static_assert(offsetof(FTresClaymoreIdleInfo_e_ex355, M_fRevolveHeight) == 0x00000C, "Member 'FTresClaymoreIdleInfo_e_ex355::M_fRevolveHeight' has a wrong offset!");

// ScriptStruct TresGame.EX359_BeamOnTimeInfoSet
// 0x0040 (0x0040 - 0x0000)
struct FEX359_BeamOnTimeInfoSet final
{
public:
	TArray<struct FEX359_BeamOnTimeInfo>          M_BeamOnTimeInfoArray;                             // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEX359_BeamInfoSet                     M_BeamInfoSet;                                     // 0x0010(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_Target;                                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_SpawnActor;                                      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEX359_BeamOnTimeInfoSet) == 0x000008, "Wrong alignment on FEX359_BeamOnTimeInfoSet");
static_assert(sizeof(FEX359_BeamOnTimeInfoSet) == 0x000040, "Wrong size on FEX359_BeamOnTimeInfoSet");
static_assert(offsetof(FEX359_BeamOnTimeInfoSet, M_BeamOnTimeInfoArray) == 0x000000, "Member 'FEX359_BeamOnTimeInfoSet::M_BeamOnTimeInfoArray' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnTimeInfoSet, M_BeamInfoSet) == 0x000010, "Member 'FEX359_BeamOnTimeInfoSet::M_BeamInfoSet' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnTimeInfoSet, M_Owner) == 0x000028, "Member 'FEX359_BeamOnTimeInfoSet::M_Owner' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnTimeInfoSet, M_Target) == 0x000030, "Member 'FEX359_BeamOnTimeInfoSet::M_Target' has a wrong offset!");
static_assert(offsetof(FEX359_BeamOnTimeInfoSet, M_SpawnActor) == 0x000038, "Member 'FEX359_BeamOnTimeInfoSet::M_SpawnActor' has a wrong offset!");

// ScriptStruct TresGame.EX359_GuardBeamInfoSet
// 0x0260 (0x0260 - 0x0000)
struct FEX359_GuardBeamInfoSet final
{
public:
	struct FEX359_BeamInfo                        M_BeamInfo;                                        // 0x0000(0x0140)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         M_fSpawnWaitTime;                                  // 0x0140(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iBeamSpawnNum;                                   // 0x0144(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingAccel;                                    // 0x0148(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fHomingMaxVelocity;                              // 0x014C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRotateAccel;                                    // 0x0150(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fRotateMaxVelocity;                              // 0x0154(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpreadWaitTime;                                 // 0x0158(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpreadTime;                                     // 0x015C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpreadRadius;                                   // 0x0160(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fOpenWaitTime;                                   // 0x0164(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fOpenTime;                                       // 0x0168(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fOpenRadius;                                     // 0x016C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEX359_SpawnDirType                           M_OpenDirType;                                     // 0x0170(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fOpenDirOffset;                                  // 0x0174(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fOpenDirDetermineTime;                           // 0x0178(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bDetermineOpenDirByTime;                         // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_iOpenBeamNum;                                    // 0x0180(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fShotWaitTime;                                   // 0x0184(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x10];                                     // 0x0188(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_Target;                                          // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_SpawnActor;                                      // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ATresProjectileBase*>            M_ProjArray;                                       // 0x01B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FEX359_LaserRainTriangleGuardInfoSet   M_GuardInfoSet;                                    // 0x01C0(0x0010)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D0[0x90];                                     // 0x01D0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEX359_GuardBeamInfoSet) == 0x000008, "Wrong alignment on FEX359_GuardBeamInfoSet");
static_assert(sizeof(FEX359_GuardBeamInfoSet) == 0x000260, "Wrong size on FEX359_GuardBeamInfoSet");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_BeamInfo) == 0x000000, "Member 'FEX359_GuardBeamInfoSet::M_BeamInfo' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fSpawnWaitTime) == 0x000140, "Member 'FEX359_GuardBeamInfoSet::M_fSpawnWaitTime' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_iBeamSpawnNum) == 0x000144, "Member 'FEX359_GuardBeamInfoSet::M_iBeamSpawnNum' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fHomingAccel) == 0x000148, "Member 'FEX359_GuardBeamInfoSet::M_fHomingAccel' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fHomingMaxVelocity) == 0x00014C, "Member 'FEX359_GuardBeamInfoSet::M_fHomingMaxVelocity' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fRotateAccel) == 0x000150, "Member 'FEX359_GuardBeamInfoSet::M_fRotateAccel' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fRotateMaxVelocity) == 0x000154, "Member 'FEX359_GuardBeamInfoSet::M_fRotateMaxVelocity' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fSpreadWaitTime) == 0x000158, "Member 'FEX359_GuardBeamInfoSet::M_fSpreadWaitTime' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fSpreadTime) == 0x00015C, "Member 'FEX359_GuardBeamInfoSet::M_fSpreadTime' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fSpreadRadius) == 0x000160, "Member 'FEX359_GuardBeamInfoSet::M_fSpreadRadius' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fOpenWaitTime) == 0x000164, "Member 'FEX359_GuardBeamInfoSet::M_fOpenWaitTime' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fOpenTime) == 0x000168, "Member 'FEX359_GuardBeamInfoSet::M_fOpenTime' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fOpenRadius) == 0x00016C, "Member 'FEX359_GuardBeamInfoSet::M_fOpenRadius' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_OpenDirType) == 0x000170, "Member 'FEX359_GuardBeamInfoSet::M_OpenDirType' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fOpenDirOffset) == 0x000174, "Member 'FEX359_GuardBeamInfoSet::M_fOpenDirOffset' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fOpenDirDetermineTime) == 0x000178, "Member 'FEX359_GuardBeamInfoSet::M_fOpenDirDetermineTime' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_bDetermineOpenDirByTime) == 0x00017C, "Member 'FEX359_GuardBeamInfoSet::M_bDetermineOpenDirByTime' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_iOpenBeamNum) == 0x000180, "Member 'FEX359_GuardBeamInfoSet::M_iOpenBeamNum' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_fShotWaitTime) == 0x000184, "Member 'FEX359_GuardBeamInfoSet::M_fShotWaitTime' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_Owner) == 0x000198, "Member 'FEX359_GuardBeamInfoSet::M_Owner' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_Target) == 0x0001A0, "Member 'FEX359_GuardBeamInfoSet::M_Target' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_SpawnActor) == 0x0001A8, "Member 'FEX359_GuardBeamInfoSet::M_SpawnActor' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_ProjArray) == 0x0001B0, "Member 'FEX359_GuardBeamInfoSet::M_ProjArray' has a wrong offset!");
static_assert(offsetof(FEX359_GuardBeamInfoSet, M_GuardInfoSet) == 0x0001C0, "Member 'FEX359_GuardBeamInfoSet::M_GuardInfoSet' has a wrong offset!");

// ScriptStruct TresGame.EX359_ThrowInfo
// 0x11565F20 (0x11565F20 - 0x0000)
struct alignas(0x11565F20) FEX359_ThrowInfo final
{
public:
	float                                         M_fStopTime;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bStopTime;                                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fLifeTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bLifeTime;                                       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_iNoStopOnHit;                                    // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_iNoDestroyOnHit;                                 // 0x000E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_fLifeTimeAfterHit;                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEX359_ThrowInfo) == 0x11565F20, "Wrong alignment on FEX359_ThrowInfo");
static_assert(sizeof(FEX359_ThrowInfo) == 0x11565F20, "Wrong size on FEX359_ThrowInfo");
static_assert(offsetof(FEX359_ThrowInfo, M_fStopTime) == 0x000000, "Member 'FEX359_ThrowInfo::M_fStopTime' has a wrong offset!");
static_assert(offsetof(FEX359_ThrowInfo, M_bStopTime) == 0x000004, "Member 'FEX359_ThrowInfo::M_bStopTime' has a wrong offset!");
static_assert(offsetof(FEX359_ThrowInfo, M_fLifeTime) == 0x000008, "Member 'FEX359_ThrowInfo::M_fLifeTime' has a wrong offset!");
static_assert(offsetof(FEX359_ThrowInfo, M_bLifeTime) == 0x00000C, "Member 'FEX359_ThrowInfo::M_bLifeTime' has a wrong offset!");
static_assert(offsetof(FEX359_ThrowInfo, M_iNoStopOnHit) == 0x00000D, "Member 'FEX359_ThrowInfo::M_iNoStopOnHit' has a wrong offset!");
static_assert(offsetof(FEX359_ThrowInfo, M_iNoDestroyOnHit) == 0x00000E, "Member 'FEX359_ThrowInfo::M_iNoDestroyOnHit' has a wrong offset!");
static_assert(offsetof(FEX359_ThrowInfo, M_fLifeTimeAfterHit) == 0x000010, "Member 'FEX359_ThrowInfo::M_fLifeTimeAfterHit' has a wrong offset!");

// ScriptStruct TresGame.EX359_LaserOnTimeInfoSet
// 0x0048 (0x0048 - 0x0000)
struct FEX359_LaserOnTimeInfoSet final
{
public:
	TArray<struct FEX359_LaserOnTimeInfo>         M_LaserOnTimeInfoArray;                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEX359_LaserInfoSet                    M_LaserInfoSet;                                    // 0x0010(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresCharPawnBase*                      M_Owner;                                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_Target;                                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 M_SpawnActor;                                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEX359_LaserOnTimeInfoSet) == 0x000008, "Wrong alignment on FEX359_LaserOnTimeInfoSet");
static_assert(sizeof(FEX359_LaserOnTimeInfoSet) == 0x000048, "Wrong size on FEX359_LaserOnTimeInfoSet");
static_assert(offsetof(FEX359_LaserOnTimeInfoSet, M_LaserOnTimeInfoArray) == 0x000000, "Member 'FEX359_LaserOnTimeInfoSet::M_LaserOnTimeInfoArray' has a wrong offset!");
static_assert(offsetof(FEX359_LaserOnTimeInfoSet, M_LaserInfoSet) == 0x000010, "Member 'FEX359_LaserOnTimeInfoSet::M_LaserInfoSet' has a wrong offset!");
static_assert(offsetof(FEX359_LaserOnTimeInfoSet, M_Owner) == 0x000030, "Member 'FEX359_LaserOnTimeInfoSet::M_Owner' has a wrong offset!");
static_assert(offsetof(FEX359_LaserOnTimeInfoSet, M_Target) == 0x000038, "Member 'FEX359_LaserOnTimeInfoSet::M_Target' has a wrong offset!");
static_assert(offsetof(FEX359_LaserOnTimeInfoSet, M_SpawnActor) == 0x000040, "Member 'FEX359_LaserOnTimeInfoSet::M_SpawnActor' has a wrong offset!");

// ScriptStruct TresGame.WaveInfo_e_ex359
// 0x11567BC0 (0x11567BC0 - 0x0000)
struct alignas(0x11567BC0) FWaveInfo_e_ex359 final
{
public:
	int32                                         INotifyParam;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VOffset;                                           // 0x0004(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPolarOffset;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FLength;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVelocity;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FYaw;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FAttackInterval;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FHeightAdjustVelocity_Up;                          // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FHeightAdjustVelocity_Down;                        // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FHeightAdjustOffset;                               // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaveInfo_e_ex359) == 0x11567BC0, "Wrong alignment on FWaveInfo_e_ex359");
static_assert(sizeof(FWaveInfo_e_ex359) == 0x11567BC0, "Wrong size on FWaveInfo_e_ex359");
static_assert(offsetof(FWaveInfo_e_ex359, INotifyParam) == 0x000000, "Member 'FWaveInfo_e_ex359::INotifyParam' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex359, VOffset) == 0x000004, "Member 'FWaveInfo_e_ex359::VOffset' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex359, bPolarOffset) == 0x000010, "Member 'FWaveInfo_e_ex359::bPolarOffset' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex359, FLength) == 0x000014, "Member 'FWaveInfo_e_ex359::FLength' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex359, FVelocity) == 0x000018, "Member 'FWaveInfo_e_ex359::FVelocity' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex359, FYaw) == 0x00001C, "Member 'FWaveInfo_e_ex359::FYaw' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex359, FAttackInterval) == 0x000020, "Member 'FWaveInfo_e_ex359::FAttackInterval' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex359, FHeightAdjustVelocity_Up) == 0x000024, "Member 'FWaveInfo_e_ex359::FHeightAdjustVelocity_Up' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex359, FHeightAdjustVelocity_Down) == 0x000028, "Member 'FWaveInfo_e_ex359::FHeightAdjustVelocity_Down' has a wrong offset!");
static_assert(offsetof(FWaveInfo_e_ex359, FHeightAdjustOffset) == 0x00002C, "Member 'FWaveInfo_e_ex359::FHeightAdjustOffset' has a wrong offset!");

// ScriptStruct TresGame.WaveSet_e_ex359
// 0x0020 (0x0020 - 0x0000)
struct FWaveSet_e_ex359 final
{
public:
	TSubclassOf<class ATresProjectile_e_ex359_Wave> PWaveSpawner;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATresProjectile_e_ex359_Wave_OneCollision> POneCollision;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWaveInfo_e_ex359>              WaveInfoArray;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaveSet_e_ex359) == 0x000008, "Wrong alignment on FWaveSet_e_ex359");
static_assert(sizeof(FWaveSet_e_ex359) == 0x000020, "Wrong size on FWaveSet_e_ex359");
static_assert(offsetof(FWaveSet_e_ex359, PWaveSpawner) == 0x000000, "Member 'FWaveSet_e_ex359::PWaveSpawner' has a wrong offset!");
static_assert(offsetof(FWaveSet_e_ex359, POneCollision) == 0x000008, "Member 'FWaveSet_e_ex359::POneCollision' has a wrong offset!");
static_assert(offsetof(FWaveSet_e_ex359, WaveInfoArray) == 0x000010, "Member 'FWaveSet_e_ex359::WaveInfoArray' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleBonusGaugeIncreaseRateParam
// 0x11593FA0 (0x11593FA0 - 0x0000)
struct alignas(0x11593FA0) FTresWinniePuzzleBonusGaugeIncreaseRateParam final
{
public:
	int32                                         BonusUnitsNum;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleBonusGaugeIncreaseRateParam) == 0x11593FA0, "Wrong alignment on FTresWinniePuzzleBonusGaugeIncreaseRateParam");
static_assert(sizeof(FTresWinniePuzzleBonusGaugeIncreaseRateParam) == 0x11593FA0, "Wrong size on FTresWinniePuzzleBonusGaugeIncreaseRateParam");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeIncreaseRateParam, BonusUnitsNum) == 0x000000, "Member 'FTresWinniePuzzleBonusGaugeIncreaseRateParam::BonusUnitsNum' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeIncreaseRateParam, Rate) == 0x000004, "Member 'FTresWinniePuzzleBonusGaugeIncreaseRateParam::Rate' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx771_FlareAttractParam
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx771_FlareAttractParam final
{
public:
	class ATresActor_e_ex771_Attract*             M_pAttract;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_pTarget;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx771_FlareAttractParam) == 0x000008, "Wrong alignment on FTresEnemyEx771_FlareAttractParam");
static_assert(sizeof(FTresEnemyEx771_FlareAttractParam) == 0x000010, "Wrong size on FTresEnemyEx771_FlareAttractParam");
static_assert(offsetof(FTresEnemyEx771_FlareAttractParam, M_pAttract) == 0x000000, "Member 'FTresEnemyEx771_FlareAttractParam::M_pAttract' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx771_FlareAttractParam, M_pTarget) == 0x000008, "Member 'FTresEnemyEx771_FlareAttractParam::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx771_FlarePillarAttractParam
// 0x0020 (0x0020 - 0x0000)
struct FTresEnemyEx771_FlarePillarAttractParam final
{
public:
	class ATresActor_e_ex771_Attract*             M_pAttract;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_pTarget;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx771_FlarePillarAttractParam) == 0x000008, "Wrong alignment on FTresEnemyEx771_FlarePillarAttractParam");
static_assert(sizeof(FTresEnemyEx771_FlarePillarAttractParam) == 0x000020, "Wrong size on FTresEnemyEx771_FlarePillarAttractParam");
static_assert(offsetof(FTresEnemyEx771_FlarePillarAttractParam, M_pAttract) == 0x000000, "Member 'FTresEnemyEx771_FlarePillarAttractParam::M_pAttract' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx771_FlarePillarAttractParam, M_pTarget) == 0x000008, "Member 'FTresEnemyEx771_FlarePillarAttractParam::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx771_BlowParam
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx771_BlowParam final
{
public:
	class ATresActor_e_ex771_Attract*             M_pBlow;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_pTarget;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx771_BlowParam) == 0x000008, "Wrong alignment on FTresEnemyEx771_BlowParam");
static_assert(sizeof(FTresEnemyEx771_BlowParam) == 0x000010, "Wrong size on FTresEnemyEx771_BlowParam");
static_assert(offsetof(FTresEnemyEx771_BlowParam, M_pBlow) == 0x000000, "Member 'FTresEnemyEx771_BlowParam::M_pBlow' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx771_BlowParam, M_pTarget) == 0x000008, "Member 'FTresEnemyEx771_BlowParam::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.TresParamProjectileComboHitSoloParam
// 0x11568B00 (0x11568B00 - 0x0000)
struct alignas(0x11568B00) FTresParamProjectileComboHitSoloParam final
{
public:
	float                                         Interval;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresParamProjectileComboHitSoloParam) == 0x11568B00, "Wrong alignment on FTresParamProjectileComboHitSoloParam");
static_assert(sizeof(FTresParamProjectileComboHitSoloParam) == 0x11568B00, "Wrong size on FTresParamProjectileComboHitSoloParam");
static_assert(offsetof(FTresParamProjectileComboHitSoloParam, Interval) == 0x000000, "Member 'FTresParamProjectileComboHitSoloParam::Interval' has a wrong offset!");

// ScriptStruct TresGame.TresParamProjectileComboHit
// 0x11568940 (0x11568940 - 0x0000)
struct alignas(0x11568940) FTresParamProjectileComboHit final
{
public:
	TSubclassOf<class ATresProjectile_e_ex773_ComboHit> GeneratedClass;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresParamProjectileComboHitSoloParam> SpawnParam;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                SpawnOffset;                                       // 0x0018(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BaseAtkId;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastAtkId;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresParamProjectileComboHit) == 0x11568940, "Wrong alignment on FTresParamProjectileComboHit");
static_assert(sizeof(FTresParamProjectileComboHit) == 0x11568940, "Wrong size on FTresParamProjectileComboHit");
static_assert(offsetof(FTresParamProjectileComboHit, GeneratedClass) == 0x000000, "Member 'FTresParamProjectileComboHit::GeneratedClass' has a wrong offset!");
static_assert(offsetof(FTresParamProjectileComboHit, SpawnParam) == 0x000008, "Member 'FTresParamProjectileComboHit::SpawnParam' has a wrong offset!");
static_assert(offsetof(FTresParamProjectileComboHit, SpawnOffset) == 0x000018, "Member 'FTresParamProjectileComboHit::SpawnOffset' has a wrong offset!");
static_assert(offsetof(FTresParamProjectileComboHit, BaseAtkId) == 0x000028, "Member 'FTresParamProjectileComboHit::BaseAtkId' has a wrong offset!");
static_assert(offsetof(FTresParamProjectileComboHit, LastAtkId) == 0x000030, "Member 'FTresParamProjectileComboHit::LastAtkId' has a wrong offset!");

// ScriptStruct TresGame.Tres_e_ex773_Eclipse13_WaveData
// 0x0010 (0x0010 - 0x0000)
struct FTres_e_ex773_Eclipse13_WaveData final
{
public:
	float                                         StartWait;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTres_e_ex773_Eclipse13_WaveAsset*      Asset;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTres_e_ex773_Eclipse13_WaveData) == 0x000008, "Wrong alignment on FTres_e_ex773_Eclipse13_WaveData");
static_assert(sizeof(FTres_e_ex773_Eclipse13_WaveData) == 0x000010, "Wrong size on FTres_e_ex773_Eclipse13_WaveData");
static_assert(offsetof(FTres_e_ex773_Eclipse13_WaveData, StartWait) == 0x000000, "Member 'FTres_e_ex773_Eclipse13_WaveData::StartWait' has a wrong offset!");
static_assert(offsetof(FTres_e_ex773_Eclipse13_WaveData, Asset) == 0x000008, "Member 'FTres_e_ex773_Eclipse13_WaveData::Asset' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx773_FlarePillarAttractParam
// 0x0020 (0x0020 - 0x0000)
struct FTresEnemyEx773_FlarePillarAttractParam final
{
public:
	class ATresActor_e_ex773_Attract*             M_pAttract;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_pTarget;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemyEx773_FlarePillarAttractParam) == 0x000008, "Wrong alignment on FTresEnemyEx773_FlarePillarAttractParam");
static_assert(sizeof(FTresEnemyEx773_FlarePillarAttractParam) == 0x000020, "Wrong size on FTresEnemyEx773_FlarePillarAttractParam");
static_assert(offsetof(FTresEnemyEx773_FlarePillarAttractParam, M_pAttract) == 0x000000, "Member 'FTresEnemyEx773_FlarePillarAttractParam::M_pAttract' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx773_FlarePillarAttractParam, M_pTarget) == 0x000008, "Member 'FTresEnemyEx773_FlarePillarAttractParam::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.TresEnemyEx773_BlowParam
// 0x0010 (0x0010 - 0x0000)
struct FTresEnemyEx773_BlowParam final
{
public:
	class ATresActor_e_ex773_Attract*             M_pBlow;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 M_pTarget;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemyEx773_BlowParam) == 0x000008, "Wrong alignment on FTresEnemyEx773_BlowParam");
static_assert(sizeof(FTresEnemyEx773_BlowParam) == 0x000010, "Wrong size on FTresEnemyEx773_BlowParam");
static_assert(offsetof(FTresEnemyEx773_BlowParam, M_pBlow) == 0x000000, "Member 'FTresEnemyEx773_BlowParam::M_pBlow' has a wrong offset!");
static_assert(offsetof(FTresEnemyEx773_BlowParam, M_pTarget) == 0x000008, "Member 'FTresEnemyEx773_BlowParam::M_pTarget' has a wrong offset!");

// ScriptStruct TresGame.BX901_RailSlideProjDropInfo
// 0x11569970 (0x11569970 - 0x0000)
struct alignas(0x11569970) FBX901_RailSlideProjDropInfo final
{
public:
	ETresDropItemID                               M_DropPrize1;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_NumDropPrize1;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_DropPrize2;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_NumDropPrize2;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresDropItemID                               M_DropItemID;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_DropItemRate;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBX901_RailSlideProjDropInfo) == 0x11569970, "Wrong alignment on FBX901_RailSlideProjDropInfo");
static_assert(sizeof(FBX901_RailSlideProjDropInfo) == 0x11569970, "Wrong size on FBX901_RailSlideProjDropInfo");
static_assert(offsetof(FBX901_RailSlideProjDropInfo, M_DropPrize1) == 0x000000, "Member 'FBX901_RailSlideProjDropInfo::M_DropPrize1' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjDropInfo, M_NumDropPrize1) == 0x000004, "Member 'FBX901_RailSlideProjDropInfo::M_NumDropPrize1' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjDropInfo, M_DropPrize2) == 0x000008, "Member 'FBX901_RailSlideProjDropInfo::M_DropPrize2' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjDropInfo, M_NumDropPrize2) == 0x00000C, "Member 'FBX901_RailSlideProjDropInfo::M_NumDropPrize2' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjDropInfo, M_DropItemID) == 0x000010, "Member 'FBX901_RailSlideProjDropInfo::M_DropItemID' has a wrong offset!");
static_assert(offsetof(FBX901_RailSlideProjDropInfo, M_DropItemRate) == 0x000014, "Member 'FBX901_RailSlideProjDropInfo::M_DropItemRate' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex054_DischargeInfo
// 0x11E7B (0x11E7B - 0x0000)
struct alignas(0x11E7B) FTresEnemy_e_ex054_DischargeInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex054_DischargeInfo) == 0x011E7B, "Wrong alignment on FTresEnemy_e_ex054_DischargeInfo");
static_assert(sizeof(FTresEnemy_e_ex054_DischargeInfo) == 0x011E7B, "Wrong size on FTresEnemy_e_ex054_DischargeInfo");

// ScriptStruct TresGame.TresEnemy_e_ex771_EncloseFlareParam
// 0x4999 (0x4999 - 0x0000)
struct alignas(0x4999) FTresEnemy_e_ex771_EncloseFlareParam final
{
public:
	uint8                                         Pad_0[0x5C];                                       // 0x0000(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_EncloseFlareParam) == 0x004999, "Wrong alignment on FTresEnemy_e_ex771_EncloseFlareParam");
static_assert(sizeof(FTresEnemy_e_ex771_EncloseFlareParam) == 0x004999, "Wrong size on FTresEnemy_e_ex771_EncloseFlareParam");

// ScriptStruct TresGame.TresEnemy_e_ex771_EncloseFlareEntryParam
// 0x499B (0x499B - 0x0000)
struct alignas(0x499B) FTresEnemy_e_ex771_EncloseFlareEntryParam final
{
public:
	uint8                                         Pad_0[0x34];                                       // 0x0000(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_EncloseFlareEntryParam) == 0x00499B, "Wrong alignment on FTresEnemy_e_ex771_EncloseFlareEntryParam");
static_assert(sizeof(FTresEnemy_e_ex771_EncloseFlareEntryParam) == 0x00499B, "Wrong size on FTresEnemy_e_ex771_EncloseFlareEntryParam");

// ScriptStruct TresGame.TresEnemy_e_ex771_EncloseFlareHvnParam
// 0x49A0 (0x49A0 - 0x0000)
struct alignas(0x49A0) FTresEnemy_e_ex771_EncloseFlareHvnParam final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_EncloseFlareHvnParam) == 0x0049A0, "Wrong alignment on FTresEnemy_e_ex771_EncloseFlareHvnParam");
static_assert(sizeof(FTresEnemy_e_ex771_EncloseFlareHvnParam) == 0x0049A0, "Wrong size on FTresEnemy_e_ex771_EncloseFlareHvnParam");

// ScriptStruct TresGame.TresEnemy_e_ex771_FlareShotSphereEntryParam
// 0x49A9 (0x49A9 - 0x0000)
struct alignas(0x49A9) FTresEnemy_e_ex771_FlareShotSphereEntryParam final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_FlareShotSphereEntryParam) == 0x0049A9, "Wrong alignment on FTresEnemy_e_ex771_FlareShotSphereEntryParam");
static_assert(sizeof(FTresEnemy_e_ex771_FlareShotSphereEntryParam) == 0x0049A9, "Wrong size on FTresEnemy_e_ex771_FlareShotSphereEntryParam");

// ScriptStruct TresGame.TresEnemy_e_ex771_FlareShotTornadoEntryParam
// 0x49BB (0x49BB - 0x0000)
struct alignas(0x49BB) FTresEnemy_e_ex771_FlareShotTornadoEntryParam final
{
public:
	uint8                                         Pad_0[0x54];                                       // 0x0000(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_FlareShotTornadoEntryParam) == 0x0049BB, "Wrong alignment on FTresEnemy_e_ex771_FlareShotTornadoEntryParam");
static_assert(sizeof(FTresEnemy_e_ex771_FlareShotTornadoEntryParam) == 0x0049BB, "Wrong size on FTresEnemy_e_ex771_FlareShotTornadoEntryParam");

// ScriptStruct TresGame.TresEnemy_e_ex771_ExFlareTornadoEntryParam
// 0x49BF (0x49BF - 0x0000)
struct alignas(0x49BF) FTresEnemy_e_ex771_ExFlareTornadoEntryParam final
{
public:
	uint8                                         Pad_0[0xE8];                                       // 0x0000(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_ExFlareTornadoEntryParam) == 0x0049BF, "Wrong alignment on FTresEnemy_e_ex771_ExFlareTornadoEntryParam");
static_assert(sizeof(FTresEnemy_e_ex771_ExFlareTornadoEntryParam) == 0x0049BF, "Wrong size on FTresEnemy_e_ex771_ExFlareTornadoEntryParam");

// ScriptStruct TresGame.TresEnemy_e_ex771_FlareTornadoEntryParam
// 0x11E80 (0x11E80 - 0x0000)
struct alignas(0x11E80) FTresEnemy_e_ex771_FlareTornadoEntryParam final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_FlareTornadoEntryParam) == 0x011E80, "Wrong alignment on FTresEnemy_e_ex771_FlareTornadoEntryParam");
static_assert(sizeof(FTresEnemy_e_ex771_FlareTornadoEntryParam) == 0x011E80, "Wrong size on FTresEnemy_e_ex771_FlareTornadoEntryParam");

// ScriptStruct TresGame.TresEnemy_e_ex771_LivelyFlarePillarPoint
// 0x11E81 (0x11E81 - 0x0000)
struct alignas(0x11E81) FTresEnemy_e_ex771_LivelyFlarePillarPoint final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_LivelyFlarePillarPoint) == 0x011E81, "Wrong alignment on FTresEnemy_e_ex771_LivelyFlarePillarPoint");
static_assert(sizeof(FTresEnemy_e_ex771_LivelyFlarePillarPoint) == 0x011E81, "Wrong size on FTresEnemy_e_ex771_LivelyFlarePillarPoint");

// ScriptStruct TresGame.TresEnemy_e_ex771_LivelyFlarePillarParam
// 0x0030 (0x0030 - 0x0000)
struct FTresEnemy_e_ex771_LivelyFlarePillarParam final
{
public:
	class AActor*                                 M_Target;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATresProjectileBase*                    M_LivelyFlarePillar;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex771_LivelyFlarePillarParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex771_LivelyFlarePillarParam");
static_assert(sizeof(FTresEnemy_e_ex771_LivelyFlarePillarParam) == 0x000030, "Wrong size on FTresEnemy_e_ex771_LivelyFlarePillarParam");
static_assert(offsetof(FTresEnemy_e_ex771_LivelyFlarePillarParam, M_Target) == 0x000000, "Member 'FTresEnemy_e_ex771_LivelyFlarePillarParam::M_Target' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex771_LivelyFlarePillarParam, M_LivelyFlarePillar) == 0x000008, "Member 'FTresEnemy_e_ex771_LivelyFlarePillarParam::M_LivelyFlarePillar' has a wrong offset!");

// ScriptStruct TresGame.TresHudSpecialShipTargetInfo
// 0x508A (0x508A - 0x0000)
struct alignas(0x508A) FTresHudSpecialShipTargetInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHudSpecialShipTargetInfo) == 0x00508A, "Wrong alignment on FTresHudSpecialShipTargetInfo");
static_assert(sizeof(FTresHudSpecialShipTargetInfo) == 0x00508A, "Wrong size on FTresHudSpecialShipTargetInfo");

// ScriptStruct TresGame.TresEnemy_e_ex773_EncloseFlareParam
// 0x49DC (0x49DC - 0x0000)
struct alignas(0x49DC) FTresEnemy_e_ex773_EncloseFlareParam final
{
public:
	uint8                                         Pad_0[0x5C];                                       // 0x0000(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_EncloseFlareParam) == 0x0049DC, "Wrong alignment on FTresEnemy_e_ex773_EncloseFlareParam");
static_assert(sizeof(FTresEnemy_e_ex773_EncloseFlareParam) == 0x0049DC, "Wrong size on FTresEnemy_e_ex773_EncloseFlareParam");

// ScriptStruct TresGame.TresEnemy_e_ex773_FlareShotEntryParam
// 0x11E7C (0x11E7C - 0x0000)
struct alignas(0x11E7C) FTresEnemy_e_ex773_FlareShotEntryParam final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_FlareShotEntryParam) == 0x011E7C, "Wrong alignment on FTresEnemy_e_ex773_FlareShotEntryParam");
static_assert(sizeof(FTresEnemy_e_ex773_FlareShotEntryParam) == 0x011E7C, "Wrong size on FTresEnemy_e_ex773_FlareShotEntryParam");

// ScriptStruct TresGame.TresEnemy_e_ex773_FlareShotHvnEntryParam
// 0x11E7F (0x11E7F - 0x0000)
struct alignas(0x11E7F) FTresEnemy_e_ex773_FlareShotHvnEntryParam final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_FlareShotHvnEntryParam) == 0x011E7F, "Wrong alignment on FTresEnemy_e_ex773_FlareShotHvnEntryParam");
static_assert(sizeof(FTresEnemy_e_ex773_FlareShotHvnEntryParam) == 0x011E7F, "Wrong size on FTresEnemy_e_ex773_FlareShotHvnEntryParam");

// ScriptStruct TresGame.TresEnemy_e_ex773_FlareShotTornadoParam
// 0x0090 (0x0090 - 0x0000)
struct FTresEnemy_e_ex773_FlareShotTornadoParam final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_FireOmenEff;                                     // 0x0058(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x20];                                      // 0x0060(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ATresProjectileBase>> M_FlareShotArray;                                  // 0x0080(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex773_FlareShotTornadoParam) == 0x000008, "Wrong alignment on FTresEnemy_e_ex773_FlareShotTornadoParam");
static_assert(sizeof(FTresEnemy_e_ex773_FlareShotTornadoParam) == 0x000090, "Wrong size on FTresEnemy_e_ex773_FlareShotTornadoParam");
static_assert(offsetof(FTresEnemy_e_ex773_FlareShotTornadoParam, M_FireOmenEff) == 0x000058, "Member 'FTresEnemy_e_ex773_FlareShotTornadoParam::M_FireOmenEff' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex773_FlareShotTornadoParam, M_FlareShotArray) == 0x000080, "Member 'FTresEnemy_e_ex773_FlareShotTornadoParam::M_FlareShotArray' has a wrong offset!");

// ScriptStruct TresGame.TresEnemy_e_ex773_FlareTornadoParam
// 0x4A07 (0x4A07 - 0x0000)
struct alignas(0x4A07) FTresEnemy_e_ex773_FlareTornadoParam final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresEnemy_e_ex773_FlareTornadoParam) == 0x004A07, "Wrong alignment on FTresEnemy_e_ex773_FlareTornadoParam");
static_assert(sizeof(FTresEnemy_e_ex773_FlareTornadoParam) == 0x004A07, "Wrong size on FTresEnemy_e_ex773_FlareTornadoParam");

// ScriptStruct TresGame.TresEnemy_e_ex773_LivelyFlarePillarGenClass
// 0x1156CAE0 (0x1156CAE0 - 0x0000)
struct alignas(0x1156CAE0) FTresEnemy_e_ex773_LivelyFlarePillarGenClass final
{
public:
	class FName                                   ClassName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEnemy_e_ex773_LivelyFlarePillarGenClass) == 0x1156CAE0, "Wrong alignment on FTresEnemy_e_ex773_LivelyFlarePillarGenClass");
static_assert(sizeof(FTresEnemy_e_ex773_LivelyFlarePillarGenClass) == 0x1156CAE0, "Wrong size on FTresEnemy_e_ex773_LivelyFlarePillarGenClass");
static_assert(offsetof(FTresEnemy_e_ex773_LivelyFlarePillarGenClass, ClassName) == 0x000000, "Member 'FTresEnemy_e_ex773_LivelyFlarePillarGenClass::ClassName' has a wrong offset!");
static_assert(offsetof(FTresEnemy_e_ex773_LivelyFlarePillarGenClass, AttackName) == 0x000008, "Member 'FTresEnemy_e_ex773_LivelyFlarePillarGenClass::AttackName' has a wrong offset!");

// ScriptStruct TresGame.TresProjEffectSet_e_ex310
// 0x0098 (0x0098 - 0x0000)
struct FTresProjEffectSet_e_ex310 final
{
public:
	class UParticleSystem*                        M_AppearEffect;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AppearEffectAttach;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AppearVisibleDelayTime;                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsEnableAppearScaleAnim : 1;                    // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsDelayAppearScaleAnim : 1;                     // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_AppearScaleAnimTime;                             // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AppearScaleAnimStartScale;                       // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsEnableAppearDitherAnim : 1;                   // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsDelayAppearDitherAnim : 1;                    // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_AppearDitherAnimTime;                            // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AppearDitherAnimStartValue;                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_DisappearEffect;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_DisappearEffectAttach;                           // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DisappearVisibleDelayTime;                       // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsEnableDisappearScaleAnim : 1;                 // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_DisappearScaleAnimTime;                          // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DisappearScaleAnimEndScale;                      // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsEnableDisappearDitherAnim : 1;                // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_DisappearDitherAnimTime;                         // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DisappearDitherAnimEndValue;                     // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsNotifyOnlyVisible : 1;                        // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_pEffect;                                         // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresSkeletalMeshComponent*             MyMesh;                                            // 0x0068(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x28];                                      // 0x0070(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresProjEffectSet_e_ex310) == 0x000008, "Wrong alignment on FTresProjEffectSet_e_ex310");
static_assert(sizeof(FTresProjEffectSet_e_ex310) == 0x000098, "Wrong size on FTresProjEffectSet_e_ex310");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_AppearEffect) == 0x000000, "Member 'FTresProjEffectSet_e_ex310::M_AppearEffect' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_AppearEffectAttach) == 0x000008, "Member 'FTresProjEffectSet_e_ex310::M_AppearEffectAttach' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_AppearVisibleDelayTime) == 0x000010, "Member 'FTresProjEffectSet_e_ex310::M_AppearVisibleDelayTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_AppearScaleAnimTime) == 0x000018, "Member 'FTresProjEffectSet_e_ex310::M_AppearScaleAnimTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_AppearScaleAnimStartScale) == 0x00001C, "Member 'FTresProjEffectSet_e_ex310::M_AppearScaleAnimStartScale' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_AppearDitherAnimTime) == 0x000024, "Member 'FTresProjEffectSet_e_ex310::M_AppearDitherAnimTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_AppearDitherAnimStartValue) == 0x000028, "Member 'FTresProjEffectSet_e_ex310::M_AppearDitherAnimStartValue' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_DisappearEffect) == 0x000030, "Member 'FTresProjEffectSet_e_ex310::M_DisappearEffect' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_DisappearEffectAttach) == 0x000038, "Member 'FTresProjEffectSet_e_ex310::M_DisappearEffectAttach' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_DisappearVisibleDelayTime) == 0x000040, "Member 'FTresProjEffectSet_e_ex310::M_DisappearVisibleDelayTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_DisappearScaleAnimTime) == 0x000048, "Member 'FTresProjEffectSet_e_ex310::M_DisappearScaleAnimTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_DisappearScaleAnimEndScale) == 0x00004C, "Member 'FTresProjEffectSet_e_ex310::M_DisappearScaleAnimEndScale' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_DisappearDitherAnimTime) == 0x000054, "Member 'FTresProjEffectSet_e_ex310::M_DisappearDitherAnimTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_DisappearDitherAnimEndValue) == 0x000058, "Member 'FTresProjEffectSet_e_ex310::M_DisappearDitherAnimEndValue' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, M_pEffect) == 0x000060, "Member 'FTresProjEffectSet_e_ex310::M_pEffect' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex310, MyMesh) == 0x000068, "Member 'FTresProjEffectSet_e_ex310::MyMesh' has a wrong offset!");

// ScriptStruct TresGame.TresProjEffectSet_e_ex359
// 0x0098 (0x0098 - 0x0000)
struct FTresProjEffectSet_e_ex359 final
{
public:
	class UParticleSystem*                        M_AppearEffect;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_AppearEffectAttach;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AppearVisibleDelayTime;                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsEnableAppearScaleAnim : 1;                    // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsDelayAppearScaleAnim : 1;                     // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_AppearScaleAnimTime;                             // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AppearScaleAnimStartScale;                       // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsEnableAppearDitherAnim : 1;                   // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         M_bIsDelayAppearDitherAnim : 1;                    // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_AppearDitherAnimTime;                            // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_AppearDitherAnimStartValue;                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        M_DisappearEffect;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   M_DisappearEffectAttach;                           // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DisappearVisibleDelayTime;                       // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsEnableDisappearScaleAnim : 1;                 // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_DisappearScaleAnimTime;                          // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DisappearScaleAnimEndScale;                      // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsEnableDisappearDitherAnim : 1;                // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_DisappearDitherAnimTime;                         // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_DisappearDitherAnimEndValue;                     // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bIsNotifyOnlyVisible : 1;                        // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               M_pEffect;                                         // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresSkeletalMeshComponent*             MyMesh;                                            // 0x0068(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x28];                                      // 0x0070(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresProjEffectSet_e_ex359) == 0x000008, "Wrong alignment on FTresProjEffectSet_e_ex359");
static_assert(sizeof(FTresProjEffectSet_e_ex359) == 0x000098, "Wrong size on FTresProjEffectSet_e_ex359");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_AppearEffect) == 0x000000, "Member 'FTresProjEffectSet_e_ex359::M_AppearEffect' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_AppearEffectAttach) == 0x000008, "Member 'FTresProjEffectSet_e_ex359::M_AppearEffectAttach' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_AppearVisibleDelayTime) == 0x000010, "Member 'FTresProjEffectSet_e_ex359::M_AppearVisibleDelayTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_AppearScaleAnimTime) == 0x000018, "Member 'FTresProjEffectSet_e_ex359::M_AppearScaleAnimTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_AppearScaleAnimStartScale) == 0x00001C, "Member 'FTresProjEffectSet_e_ex359::M_AppearScaleAnimStartScale' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_AppearDitherAnimTime) == 0x000024, "Member 'FTresProjEffectSet_e_ex359::M_AppearDitherAnimTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_AppearDitherAnimStartValue) == 0x000028, "Member 'FTresProjEffectSet_e_ex359::M_AppearDitherAnimStartValue' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_DisappearEffect) == 0x000030, "Member 'FTresProjEffectSet_e_ex359::M_DisappearEffect' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_DisappearEffectAttach) == 0x000038, "Member 'FTresProjEffectSet_e_ex359::M_DisappearEffectAttach' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_DisappearVisibleDelayTime) == 0x000040, "Member 'FTresProjEffectSet_e_ex359::M_DisappearVisibleDelayTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_DisappearScaleAnimTime) == 0x000048, "Member 'FTresProjEffectSet_e_ex359::M_DisappearScaleAnimTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_DisappearScaleAnimEndScale) == 0x00004C, "Member 'FTresProjEffectSet_e_ex359::M_DisappearScaleAnimEndScale' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_DisappearDitherAnimTime) == 0x000054, "Member 'FTresProjEffectSet_e_ex359::M_DisappearDitherAnimTime' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_DisappearDitherAnimEndValue) == 0x000058, "Member 'FTresProjEffectSet_e_ex359::M_DisappearDitherAnimEndValue' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, M_pEffect) == 0x000060, "Member 'FTresProjEffectSet_e_ex359::M_pEffect' has a wrong offset!");
static_assert(offsetof(FTresProjEffectSet_e_ex359, MyMesh) == 0x000068, "Member 'FTresProjEffectSet_e_ex359::MyMesh' has a wrong offset!");

// ScriptStruct TresGame.TresProjectileAssetUnit
// 0x0010 (0x0010 - 0x0000)
struct FTresProjectileAssetUnit final
{
public:
	class FName                                   ProjectileName;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATresProjectileBase>        ProjectileData;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresProjectileAssetUnit) == 0x000008, "Wrong alignment on FTresProjectileAssetUnit");
static_assert(sizeof(FTresProjectileAssetUnit) == 0x000010, "Wrong size on FTresProjectileAssetUnit");
static_assert(offsetof(FTresProjectileAssetUnit, ProjectileName) == 0x000000, "Member 'FTresProjectileAssetUnit::ProjectileName' has a wrong offset!");
static_assert(offsetof(FTresProjectileAssetUnit, ProjectileData) == 0x000008, "Member 'FTresProjectileAssetUnit::ProjectileData' has a wrong offset!");

// ScriptStruct TresGame.TresLotterySpawnActorData
// 0x1156FE90 (0x1156FE90 - 0x0000)
struct FTresLotterySpawnActorData final
{
public:
	TSubclassOf<class AActor>                     SpawnClass;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Power;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresSpawnRuleChildGenerator           ChildGeneratorRule;                                // 0x0010(0x1156FE90)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresLotterySpawnActorData) == 0x1156FE90, "Wrong alignment on FTresLotterySpawnActorData");
static_assert(sizeof(FTresLotterySpawnActorData) == 0x1156FE90, "Wrong size on FTresLotterySpawnActorData");
static_assert(offsetof(FTresLotterySpawnActorData, SpawnClass) == 0x000000, "Member 'FTresLotterySpawnActorData::SpawnClass' has a wrong offset!");
static_assert(offsetof(FTresLotterySpawnActorData, Power) == 0x000008, "Member 'FTresLotterySpawnActorData::Power' has a wrong offset!");
static_assert(offsetof(FTresLotterySpawnActorData, ChildGeneratorRule) == 0x000010, "Member 'FTresLotterySpawnActorData::ChildGeneratorRule' has a wrong offset!");

// ScriptStruct TresGame.TresFloat32_Range
// 0x11570230 (0x11570230 - 0x0000)
struct alignas(0x11570230) FTresFloat32_Range final
{
public:
	float                                         M_fMinValue;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fMaxValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFloat32_Range) == 0x11570230, "Wrong alignment on FTresFloat32_Range");
static_assert(sizeof(FTresFloat32_Range) == 0x11570230, "Wrong size on FTresFloat32_Range");
static_assert(offsetof(FTresFloat32_Range, M_fMinValue) == 0x000000, "Member 'FTresFloat32_Range::M_fMinValue' has a wrong offset!");
static_assert(offsetof(FTresFloat32_Range, M_fMaxValue) == 0x000004, "Member 'FTresFloat32_Range::M_fMaxValue' has a wrong offset!");

// ScriptStruct TresGame.TresRemyRewardDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresRemyRewardDataTable final : public FTableRowBase
{
public:
	int16                                         CookingSuccessPoints;                              // 0x0008(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         CookingGreatSuccessPoints;                         // 0x000A(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefAccessory                         Milestone1Reward;                                  // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefBattleItem                        Milestone2Reward;                                  // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         CircumductionNum;                                  // 0x000E(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFoodstuff                         CircumductionReward;                               // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresItemDefFood                              CookingFailedReward;                               // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemyRecipeType                               SpecialFoodStuffRecipeType;                        // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRemyRewardDataTable) == 0x11413080, "Wrong alignment on FTresRemyRewardDataTable");
static_assert(sizeof(FTresRemyRewardDataTable) == 0x11413080, "Wrong size on FTresRemyRewardDataTable");
static_assert(offsetof(FTresRemyRewardDataTable, CookingSuccessPoints) == 0x000008, "Member 'FTresRemyRewardDataTable::CookingSuccessPoints' has a wrong offset!");
static_assert(offsetof(FTresRemyRewardDataTable, CookingGreatSuccessPoints) == 0x00000A, "Member 'FTresRemyRewardDataTable::CookingGreatSuccessPoints' has a wrong offset!");
static_assert(offsetof(FTresRemyRewardDataTable, Milestone1Reward) == 0x00000C, "Member 'FTresRemyRewardDataTable::Milestone1Reward' has a wrong offset!");
static_assert(offsetof(FTresRemyRewardDataTable, Milestone2Reward) == 0x00000D, "Member 'FTresRemyRewardDataTable::Milestone2Reward' has a wrong offset!");
static_assert(offsetof(FTresRemyRewardDataTable, CircumductionNum) == 0x00000E, "Member 'FTresRemyRewardDataTable::CircumductionNum' has a wrong offset!");
static_assert(offsetof(FTresRemyRewardDataTable, CircumductionReward) == 0x000010, "Member 'FTresRemyRewardDataTable::CircumductionReward' has a wrong offset!");
static_assert(offsetof(FTresRemyRewardDataTable, CookingFailedReward) == 0x000011, "Member 'FTresRemyRewardDataTable::CookingFailedReward' has a wrong offset!");
static_assert(offsetof(FTresRemyRewardDataTable, SpecialFoodStuffRecipeType) == 0x000012, "Member 'FTresRemyRewardDataTable::SpecialFoodStuffRecipeType' has a wrong offset!");

// ScriptStruct TresGame.TresRemyAnimationDataTable
// 0x15F7E0 (0x11572860 - 0x11413080)
struct alignas(0x11572860) FTresRemyAnimationDataTable final : public FTableRowBase
{
public:
	ERemyAnimationType                            AnimationType;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimationName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresRemyAnimationDataTable) == 0x11572860, "Wrong alignment on FTresRemyAnimationDataTable");
static_assert(sizeof(FTresRemyAnimationDataTable) == 0x11572860, "Wrong size on FTresRemyAnimationDataTable");
static_assert(offsetof(FTresRemyAnimationDataTable, AnimationType) == 0x000008, "Member 'FTresRemyAnimationDataTable::AnimationType' has a wrong offset!");
static_assert(offsetof(FTresRemyAnimationDataTable, AnimationName) == 0x000010, "Member 'FTresRemyAnimationDataTable::AnimationName' has a wrong offset!");

// ScriptStruct TresGame.TresRemyCuttingDataTable
// 0x1080 (0x11573C10 - 0x11572B90)
struct alignas(0x11573C10) FTresRemyCuttingDataTable final : public FTresRemyCookingGameDataTableBase
{
public:
	ERemyCuttingFoodType                          FoodType;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StickCuttingValue;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickReloadValue;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadStickNoInputValue;                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReloadCutTimesRangeStart;                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReloadCutTimesRangeEnd;                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ERemyCookingCommand>                   ReloadCommand1;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ERemyCookingCommand>                   ReloadCommand2;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ReloadTime;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRemyCuttingDataTable) == 0x11573C10, "Wrong alignment on FTresRemyCuttingDataTable");
static_assert(sizeof(FTresRemyCuttingDataTable) == 0x11573C10, "Wrong size on FTresRemyCuttingDataTable");
static_assert(offsetof(FTresRemyCuttingDataTable, FoodType) == 0x000020, "Member 'FTresRemyCuttingDataTable::FoodType' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingDataTable, StickCuttingValue) == 0x000024, "Member 'FTresRemyCuttingDataTable::StickCuttingValue' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingDataTable, StickReloadValue) == 0x000028, "Member 'FTresRemyCuttingDataTable::StickReloadValue' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingDataTable, ReloadStickNoInputValue) == 0x00002C, "Member 'FTresRemyCuttingDataTable::ReloadStickNoInputValue' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingDataTable, ReloadCutTimesRangeStart) == 0x000030, "Member 'FTresRemyCuttingDataTable::ReloadCutTimesRangeStart' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingDataTable, ReloadCutTimesRangeEnd) == 0x000034, "Member 'FTresRemyCuttingDataTable::ReloadCutTimesRangeEnd' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingDataTable, ReloadCommand1) == 0x000038, "Member 'FTresRemyCuttingDataTable::ReloadCommand1' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingDataTable, ReloadCommand2) == 0x000048, "Member 'FTresRemyCuttingDataTable::ReloadCommand2' has a wrong offset!");
static_assert(offsetof(FTresRemyCuttingDataTable, ReloadTime) == 0x000058, "Member 'FTresRemyCuttingDataTable::ReloadTime' has a wrong offset!");

// ScriptStruct TresGame.TresRemyStoveFireParticleParam
// 0x11F01 (0x11F01 - 0x0000)
struct alignas(0x11F01) FTresRemyStoveFireParticleParam final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRemyStoveFireParticleParam) == 0x011F01, "Wrong alignment on FTresRemyStoveFireParticleParam");
static_assert(sizeof(FTresRemyStoveFireParticleParam) == 0x011F01, "Wrong size on FTresRemyStoveFireParticleParam");

// ScriptStruct TresGame.TresTaggedTextureSet
// 0x0028 (0x0028 - 0x0000)
struct FTresTaggedTextureSet final
{
public:
	class FName                                   M_Tag;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresTextureReference>          M_TextureReferences;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     M_Textures;                                        // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresTaggedTextureSet) == 0x000008, "Wrong alignment on FTresTaggedTextureSet");
static_assert(sizeof(FTresTaggedTextureSet) == 0x000028, "Wrong size on FTresTaggedTextureSet");
static_assert(offsetof(FTresTaggedTextureSet, M_Tag) == 0x000000, "Member 'FTresTaggedTextureSet::M_Tag' has a wrong offset!");
static_assert(offsetof(FTresTaggedTextureSet, M_TextureReferences) == 0x000008, "Member 'FTresTaggedTextureSet::M_TextureReferences' has a wrong offset!");
static_assert(offsetof(FTresTaggedTextureSet, M_Textures) == 0x000018, "Member 'FTresTaggedTextureSet::M_Textures' has a wrong offset!");

// ScriptStruct TresGame.TresScalabilityCsvData
// 0x1631B0 (0x11576230 - 0x11413080)
struct alignas(0x11576230) FTresScalabilityCsvData final : public FTableRowBase
{
public:
	int32                                         MotionBlur;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AAQuality;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DepthOfFieldQuality;                               // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmbientOcclusionLevels;                            // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EyeAdaptationQuality;                              // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SSRQuality;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranslucencyVolumeBlur;                            // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranslucencyLightingVolumeDim;                     // 0x0024(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQuality;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresScalabilityCsvData) == 0x11576230, "Wrong alignment on FTresScalabilityCsvData");
static_assert(sizeof(FTresScalabilityCsvData) == 0x11576230, "Wrong size on FTresScalabilityCsvData");
static_assert(offsetof(FTresScalabilityCsvData, MotionBlur) == 0x000008, "Member 'FTresScalabilityCsvData::MotionBlur' has a wrong offset!");
static_assert(offsetof(FTresScalabilityCsvData, AAQuality) == 0x00000C, "Member 'FTresScalabilityCsvData::AAQuality' has a wrong offset!");
static_assert(offsetof(FTresScalabilityCsvData, DepthOfFieldQuality) == 0x000010, "Member 'FTresScalabilityCsvData::DepthOfFieldQuality' has a wrong offset!");
static_assert(offsetof(FTresScalabilityCsvData, AmbientOcclusionLevels) == 0x000014, "Member 'FTresScalabilityCsvData::AmbientOcclusionLevels' has a wrong offset!");
static_assert(offsetof(FTresScalabilityCsvData, EyeAdaptationQuality) == 0x000018, "Member 'FTresScalabilityCsvData::EyeAdaptationQuality' has a wrong offset!");
static_assert(offsetof(FTresScalabilityCsvData, SSRQuality) == 0x00001C, "Member 'FTresScalabilityCsvData::SSRQuality' has a wrong offset!");
static_assert(offsetof(FTresScalabilityCsvData, TranslucencyVolumeBlur) == 0x000020, "Member 'FTresScalabilityCsvData::TranslucencyVolumeBlur' has a wrong offset!");
static_assert(offsetof(FTresScalabilityCsvData, TranslucencyLightingVolumeDim) == 0x000024, "Member 'FTresScalabilityCsvData::TranslucencyLightingVolumeDim' has a wrong offset!");
static_assert(offsetof(FTresScalabilityCsvData, ShadowQuality) == 0x000028, "Member 'FTresScalabilityCsvData::ShadowQuality' has a wrong offset!");

// ScriptStruct TresGame.TresSharedFixedCameraParam
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresSharedFixedCameraParam final
{
public:
	float                                         FieldOfView;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0004(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x0010(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSharedFixedCameraParam) == 0x112E9AF0, "Wrong alignment on FTresSharedFixedCameraParam");
static_assert(sizeof(FTresSharedFixedCameraParam) == 0x112E9AF0, "Wrong size on FTresSharedFixedCameraParam");
static_assert(offsetof(FTresSharedFixedCameraParam, FieldOfView) == 0x000000, "Member 'FTresSharedFixedCameraParam::FieldOfView' has a wrong offset!");
static_assert(offsetof(FTresSharedFixedCameraParam, WorldLocation) == 0x000004, "Member 'FTresSharedFixedCameraParam::WorldLocation' has a wrong offset!");
static_assert(offsetof(FTresSharedFixedCameraParam, WorldRotation) == 0x000010, "Member 'FTresSharedFixedCameraParam::WorldRotation' has a wrong offset!");

// ScriptStruct TresGame.TresSignProjectileAttackStartDelayParam_e_ex357
// 0x11576EB0 (0x11576EB0 - 0x0000)
struct alignas(0x11576EB0) FTresSignProjectileAttackStartDelayParam_e_ex357 final
{
public:
	class FName                                   AttackCollisionGroupName;                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackStartDelayTime;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSignProjectileAttackStartDelayParam_e_ex357) == 0x11576EB0, "Wrong alignment on FTresSignProjectileAttackStartDelayParam_e_ex357");
static_assert(sizeof(FTresSignProjectileAttackStartDelayParam_e_ex357) == 0x11576EB0, "Wrong size on FTresSignProjectileAttackStartDelayParam_e_ex357");
static_assert(offsetof(FTresSignProjectileAttackStartDelayParam_e_ex357, AttackCollisionGroupName) == 0x000000, "Member 'FTresSignProjectileAttackStartDelayParam_e_ex357::AttackCollisionGroupName' has a wrong offset!");
static_assert(offsetof(FTresSignProjectileAttackStartDelayParam_e_ex357, AttackStartDelayTime) == 0x000008, "Member 'FTresSignProjectileAttackStartDelayParam_e_ex357::AttackStartDelayTime' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnPointBuildSettings
// 0x0018 (0x0018 - 0x0000)
struct FTresSpawnPointBuildSettings final
{
public:
	class FName                                   M_Id;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresSpawnPointSize                           M_Size;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_Radius;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Height;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresSpawnPointBuildMethod                    M_Method;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSpawnPointBuildSettings) == 0x000004, "Wrong alignment on FTresSpawnPointBuildSettings");
static_assert(sizeof(FTresSpawnPointBuildSettings) == 0x000018, "Wrong size on FTresSpawnPointBuildSettings");
static_assert(offsetof(FTresSpawnPointBuildSettings, M_Id) == 0x000000, "Member 'FTresSpawnPointBuildSettings::M_Id' has a wrong offset!");
static_assert(offsetof(FTresSpawnPointBuildSettings, M_Size) == 0x000008, "Member 'FTresSpawnPointBuildSettings::M_Size' has a wrong offset!");
static_assert(offsetof(FTresSpawnPointBuildSettings, M_Radius) == 0x00000C, "Member 'FTresSpawnPointBuildSettings::M_Radius' has a wrong offset!");
static_assert(offsetof(FTresSpawnPointBuildSettings, M_Height) == 0x000010, "Member 'FTresSpawnPointBuildSettings::M_Height' has a wrong offset!");
static_assert(offsetof(FTresSpawnPointBuildSettings, M_Method) == 0x000014, "Member 'FTresSpawnPointBuildSettings::M_Method' has a wrong offset!");

// ScriptStruct TresGame.TresFNpcAIAttackDefInfo
// 0x0010 (0x0010 - 0x0000)
struct FTresFNpcAIAttackDefInfo final
{
public:
	class FName                                   M_AttackParamKey;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresFNpcAIAttackDefType                      M_AttackDefType;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_AttackAbilityKind;                               // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresFNpcAIAttackDefInfo) == 0x000004, "Wrong alignment on FTresFNpcAIAttackDefInfo");
static_assert(sizeof(FTresFNpcAIAttackDefInfo) == 0x000010, "Wrong size on FTresFNpcAIAttackDefInfo");
static_assert(offsetof(FTresFNpcAIAttackDefInfo, M_AttackParamKey) == 0x000000, "Member 'FTresFNpcAIAttackDefInfo::M_AttackParamKey' has a wrong offset!");
static_assert(offsetof(FTresFNpcAIAttackDefInfo, M_AttackDefType) == 0x000008, "Member 'FTresFNpcAIAttackDefInfo::M_AttackDefType' has a wrong offset!");
static_assert(offsetof(FTresFNpcAIAttackDefInfo, M_AttackAbilityKind) == 0x000009, "Member 'FTresFNpcAIAttackDefInfo::M_AttackAbilityKind' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnPointManualCreated
// 0x0020 (0x0020 - 0x0000)
struct FTresSpawnPointManualCreated final
{
public:
	class FName                                   M_Id;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Radius;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Height;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresSpawnPointElement                 M_Element;                                         // 0x0010(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresSpawnPointManualCreated) == 0x000004, "Wrong alignment on FTresSpawnPointManualCreated");
static_assert(sizeof(FTresSpawnPointManualCreated) == 0x000020, "Wrong size on FTresSpawnPointManualCreated");
static_assert(offsetof(FTresSpawnPointManualCreated, M_Id) == 0x000000, "Member 'FTresSpawnPointManualCreated::M_Id' has a wrong offset!");
static_assert(offsetof(FTresSpawnPointManualCreated, M_Radius) == 0x000008, "Member 'FTresSpawnPointManualCreated::M_Radius' has a wrong offset!");
static_assert(offsetof(FTresSpawnPointManualCreated, M_Height) == 0x00000C, "Member 'FTresSpawnPointManualCreated::M_Height' has a wrong offset!");
static_assert(offsetof(FTresSpawnPointManualCreated, M_Element) == 0x000010, "Member 'FTresSpawnPointManualCreated::M_Element' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnPointSet
// 0x0020 (0x0020 - 0x0000)
struct FTresSpawnPointSet final
{
public:
	class FName                                   M_Id;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Radius;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_Height;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresSpawnPointElement>         M_Elements;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSpawnPointSet) == 0x000008, "Wrong alignment on FTresSpawnPointSet");
static_assert(sizeof(FTresSpawnPointSet) == 0x000020, "Wrong size on FTresSpawnPointSet");
static_assert(offsetof(FTresSpawnPointSet, M_Id) == 0x000000, "Member 'FTresSpawnPointSet::M_Id' has a wrong offset!");
static_assert(offsetof(FTresSpawnPointSet, M_Radius) == 0x000008, "Member 'FTresSpawnPointSet::M_Radius' has a wrong offset!");
static_assert(offsetof(FTresSpawnPointSet, M_Height) == 0x00000C, "Member 'FTresSpawnPointSet::M_Height' has a wrong offset!");
static_assert(offsetof(FTresSpawnPointSet, M_Elements) == 0x000010, "Member 'FTresSpawnPointSet::M_Elements' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnActorDataForGenerator
// 0x1156FE58 (0x1156FE90 - 0x0038)
struct FTresSpawnActorDataForGenerator final : public FTresSpawnActorData
{
public:
	struct FTresSpawnRuleChildGenerator           ChildParam;                                        // 0x0038(0x1156FE90)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSpawnActorDataForGenerator) == 0x1156FE90, "Wrong alignment on FTresSpawnActorDataForGenerator");
static_assert(sizeof(FTresSpawnActorDataForGenerator) == 0x1156FE90, "Wrong size on FTresSpawnActorDataForGenerator");
static_assert(offsetof(FTresSpawnActorDataForGenerator, ChildParam) == 0x000038, "Member 'FTresSpawnActorDataForGenerator::ChildParam' has a wrong offset!");

// ScriptStruct TresGame.TresSpawnRuleFromSplineSection
// 0x1156FE90 (0x1156FE90 - 0x0000)
struct FTresSpawnRuleFromSplineSection final
{
public:
	class ASQEX_SplineActor*                      StartActor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEX_SplineActor*                      EndActor;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             GeneratedClassArray;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     GeneratedClass;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     FirstGeneratedClass;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     LastGeneratedClass;                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresGeneratorPlacePaternFromSplineBase* PlacePatern;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0044(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresRotatorRuleBase*                   RotatorRule;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresSpawnRuleChildGenerator           ChildRule;                                         // 0x0058(0x1156FE90)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSpawnRuleFromSplineSection) == 0x1156FE90, "Wrong alignment on FTresSpawnRuleFromSplineSection");
static_assert(sizeof(FTresSpawnRuleFromSplineSection) == 0x1156FE90, "Wrong size on FTresSpawnRuleFromSplineSection");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, StartActor) == 0x000000, "Member 'FTresSpawnRuleFromSplineSection::StartActor' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, EndActor) == 0x000008, "Member 'FTresSpawnRuleFromSplineSection::EndActor' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, GeneratedClassArray) == 0x000010, "Member 'FTresSpawnRuleFromSplineSection::GeneratedClassArray' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, GeneratedClass) == 0x000020, "Member 'FTresSpawnRuleFromSplineSection::GeneratedClass' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, FirstGeneratedClass) == 0x000028, "Member 'FTresSpawnRuleFromSplineSection::FirstGeneratedClass' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, LastGeneratedClass) == 0x000030, "Member 'FTresSpawnRuleFromSplineSection::LastGeneratedClass' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, PlacePatern) == 0x000038, "Member 'FTresSpawnRuleFromSplineSection::PlacePatern' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, Interval) == 0x000040, "Member 'FTresSpawnRuleFromSplineSection::Interval' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, Offset) == 0x000044, "Member 'FTresSpawnRuleFromSplineSection::Offset' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, RotatorRule) == 0x000050, "Member 'FTresSpawnRuleFromSplineSection::RotatorRule' has a wrong offset!");
static_assert(offsetof(FTresSpawnRuleFromSplineSection, ChildRule) == 0x000058, "Member 'FTresSpawnRuleFromSplineSection::ChildRule' has a wrong offset!");

// ScriptStruct TresGame.TresSqexSplineNearestInfo
// 0x0028 (0x0028 - 0x0000)
struct FTresSqexSplineNearestInfo final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NearPos;                                           // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEX_SplineActor*                      SplineActor;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEX_SplineActor*                      NextSplineActor;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_SplineComponent*                  SplineComponent;                                   // 0x0020(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresSqexSplineNearestInfo) == 0x000008, "Wrong alignment on FTresSqexSplineNearestInfo");
static_assert(sizeof(FTresSqexSplineNearestInfo) == 0x000028, "Wrong size on FTresSqexSplineNearestInfo");
static_assert(offsetof(FTresSqexSplineNearestInfo, Time) == 0x000000, "Member 'FTresSqexSplineNearestInfo::Time' has a wrong offset!");
static_assert(offsetof(FTresSqexSplineNearestInfo, NearPos) == 0x000004, "Member 'FTresSqexSplineNearestInfo::NearPos' has a wrong offset!");
static_assert(offsetof(FTresSqexSplineNearestInfo, SplineActor) == 0x000010, "Member 'FTresSqexSplineNearestInfo::SplineActor' has a wrong offset!");
static_assert(offsetof(FTresSqexSplineNearestInfo, NextSplineActor) == 0x000018, "Member 'FTresSqexSplineNearestInfo::NextSplineActor' has a wrong offset!");
static_assert(offsetof(FTresSqexSplineNearestInfo, SplineComponent) == 0x000020, "Member 'FTresSqexSplineNearestInfo::SplineComponent' has a wrong offset!");

// ScriptStruct TresGame.TresStateAsset
// 0x0018 (0x0018 - 0x0000)
struct FTresStateAsset final
{
public:
	TSubclassOf<class UTresStateBase>             MyStateClass;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MyStateName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresStateID                                  MyStateID;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresStateAsset) == 0x000008, "Wrong alignment on FTresStateAsset");
static_assert(sizeof(FTresStateAsset) == 0x000018, "Wrong size on FTresStateAsset");
static_assert(offsetof(FTresStateAsset, MyStateClass) == 0x000000, "Member 'FTresStateAsset::MyStateClass' has a wrong offset!");
static_assert(offsetof(FTresStateAsset, MyStateName) == 0x000008, "Member 'FTresStateAsset::MyStateName' has a wrong offset!");
static_assert(offsetof(FTresStateAsset, MyStateID) == 0x000010, "Member 'FTresStateAsset::MyStateID' has a wrong offset!");

// ScriptStruct TresGame.TresStoryData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresStoryData final : public FTableRowBase
{
public:
	class FString                                 WorldNameTextID;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresStoryEpisodeData>          EpisodeData;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresStoryData) == 0x11413080, "Wrong alignment on FTresStoryData");
static_assert(sizeof(FTresStoryData) == 0x11413080, "Wrong size on FTresStoryData");
static_assert(offsetof(FTresStoryData, WorldNameTextID) == 0x000008, "Member 'FTresStoryData::WorldNameTextID' has a wrong offset!");
static_assert(offsetof(FTresStoryData, EpisodeData) == 0x000018, "Member 'FTresStoryData::EpisodeData' has a wrong offset!");
static_assert(offsetof(FTresStoryData, Version) == 0x000028, "Member 'FTresStoryData::Version' has a wrong offset!");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanTimeDilationFactor
// 0x0000 (0x4CD6 - 0x4CD6)
struct FTresTaggedActorPropertyValue_OceanTimeDilationFactor final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanTimeDilationFactor) == 0x004CD6, "Wrong alignment on FTresTaggedActorPropertyValue_OceanTimeDilationFactor");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanTimeDilationFactor) == 0x004CD6, "Wrong size on FTresTaggedActorPropertyValue_OceanTimeDilationFactor");

// ScriptStruct TresGame.TresWinniePuzzleDecreaseStyleParam
// 0x11598950 (0x11598950 - 0x0000)
struct alignas(0x11598950) FTresWinniePuzzleDecreaseStyleParam final
{
public:
	int32                                         ColumnNum;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DecreaseColumnNum1st;                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DecreaseColumnNum2nd;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColumnDiffPerDecrease;                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleDecreaseStyleParam) == 0x11598950, "Wrong alignment on FTresWinniePuzzleDecreaseStyleParam");
static_assert(sizeof(FTresWinniePuzzleDecreaseStyleParam) == 0x11598950, "Wrong size on FTresWinniePuzzleDecreaseStyleParam");
static_assert(offsetof(FTresWinniePuzzleDecreaseStyleParam, ColumnNum) == 0x000000, "Member 'FTresWinniePuzzleDecreaseStyleParam::ColumnNum' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleDecreaseStyleParam, DecreaseColumnNum1st) == 0x000004, "Member 'FTresWinniePuzzleDecreaseStyleParam::DecreaseColumnNum1st' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleDecreaseStyleParam, DecreaseColumnNum2nd) == 0x000008, "Member 'FTresWinniePuzzleDecreaseStyleParam::DecreaseColumnNum2nd' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleDecreaseStyleParam, ColumnDiffPerDecrease) == 0x00000C, "Member 'FTresWinniePuzzleDecreaseStyleParam::ColumnDiffPerDecrease' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleCharacterBonusDecreaseParam
// 0x115981C0 (0x115981C0 - 0x0000)
struct alignas(0x115981C0) FTresWinniePuzzleCharacterBonusDecreaseParam final
{
public:
	TArray<struct FTresWinniePuzzleDecreaseStyleParam> StyleParam;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresWinniePuzzleDecreaseStyleParam> StyleParamAdditionalInvocation;                    // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MinColumn;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveWaitTime1st;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveWaitTime1stWhenReserved;                       // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveWaitTime2nd;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveHeightMin;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveHeightMax;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDelayTimeCorrectionValue;                      // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTimeTo2ndMove;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GotoFillUnitsPhaseWaitTime;                        // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleCharacterBonusDecreaseParam) == 0x115981C0, "Wrong alignment on FTresWinniePuzzleCharacterBonusDecreaseParam");
static_assert(sizeof(FTresWinniePuzzleCharacterBonusDecreaseParam) == 0x115981C0, "Wrong size on FTresWinniePuzzleCharacterBonusDecreaseParam");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, StyleParam) == 0x000000, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::StyleParam' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, StyleParamAdditionalInvocation) == 0x000010, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::StyleParamAdditionalInvocation' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, MinColumn) == 0x000020, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::MinColumn' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, MoveWaitTime1st) == 0x000024, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::MoveWaitTime1st' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, MoveWaitTime1stWhenReserved) == 0x000028, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::MoveWaitTime1stWhenReserved' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, MoveWaitTime2nd) == 0x00002C, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::MoveWaitTime2nd' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, MoveHeightMin) == 0x000030, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::MoveHeightMin' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, MoveHeightMax) == 0x000034, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::MoveHeightMax' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, MoveSpeed) == 0x000038, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, MoveDelayTimeCorrectionValue) == 0x00003C, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::MoveDelayTimeCorrectionValue' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, WaitTimeTo2ndMove) == 0x000040, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::WaitTimeTo2ndMove' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusDecreaseParam, GotoFillUnitsPhaseWaitTime) == 0x000044, "Member 'FTresWinniePuzzleCharacterBonusDecreaseParam::GotoFillUnitsPhaseWaitTime' has a wrong offset!");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanOppositeWaveSuppression
// 0x0004 (0x4CDA - 0x4CD6)
struct alignas(0x4CDA) FTresTaggedActorPropertyValue_OceanOppositeWaveSuppression final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanOppositeWaveSuppression) == 0x004CDA, "Wrong alignment on FTresTaggedActorPropertyValue_OceanOppositeWaveSuppression");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanOppositeWaveSuppression) == 0x004CDA, "Wrong size on FTresTaggedActorPropertyValue_OceanOppositeWaveSuppression");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanWindSpeed
// 0x000A (0x4CE0 - 0x4CD6)
struct alignas(0x4CE0) FTresTaggedActorPropertyValue_OceanWindSpeed final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanWindSpeed) == 0x004CE0, "Wrong alignment on FTresTaggedActorPropertyValue_OceanWindSpeed");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanWindSpeed) == 0x004CE0, "Wrong size on FTresTaggedActorPropertyValue_OceanWindSpeed");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanSteepness
// 0x000C (0x4CE2 - 0x4CD6)
struct alignas(0x4CE2) FTresTaggedActorPropertyValue_OceanSteepness final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanSteepness) == 0x004CE2, "Wrong alignment on FTresTaggedActorPropertyValue_OceanSteepness");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanSteepness) == 0x004CE2, "Wrong size on FTresTaggedActorPropertyValue_OceanSteepness");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanAmplitude
// 0x000E (0x4CE4 - 0x4CD6)
struct alignas(0x4CE4) FTresTaggedActorPropertyValue_OceanAmplitude final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanAmplitude) == 0x004CE4, "Wrong alignment on FTresTaggedActorPropertyValue_OceanAmplitude");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanAmplitude) == 0x004CE4, "Wrong size on FTresTaggedActorPropertyValue_OceanAmplitude");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanWavelength
// 0x0010 (0x4CE6 - 0x4CD6)
struct alignas(0x4CE6) FTresTaggedActorPropertyValue_OceanWavelength final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanWavelength) == 0x004CE6, "Wrong alignment on FTresTaggedActorPropertyValue_OceanWavelength");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanWavelength) == 0x004CE6, "Wrong size on FTresTaggedActorPropertyValue_OceanWavelength");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_OceanWorldMaxX
// 0x0014 (0x4CEA - 0x4CD6)
struct alignas(0x4CEA) FTresTaggedActorPropertyValue_OceanWorldMaxX final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_OceanWorldMaxX) == 0x004CEA, "Wrong alignment on FTresTaggedActorPropertyValue_OceanWorldMaxX");
static_assert(sizeof(FTresTaggedActorPropertyValue_OceanWorldMaxX) == 0x004CEA, "Wrong size on FTresTaggedActorPropertyValue_OceanWorldMaxX");

// ScriptStruct TresGame.TresTaggedActorPropertyValue_DistanceCulling
// 0x001C (0x4CF2 - 0x4CD6)
struct alignas(0x4CF2) FTresTaggedActorPropertyValue_DistanceCulling final : public FTresTaggedActorPropertyValueBase
{
};
static_assert(alignof(FTresTaggedActorPropertyValue_DistanceCulling) == 0x004CF2, "Wrong alignment on FTresTaggedActorPropertyValue_DistanceCulling");
static_assert(sizeof(FTresTaggedActorPropertyValue_DistanceCulling) == 0x004CF2, "Wrong size on FTresTaggedActorPropertyValue_DistanceCulling");

// ScriptStruct TresGame.TresTheaterSceneData
// 0x169F70 (0x1157CFF0 - 0x11413080)
struct alignas(0x1157CFF0) FTresTheaterSceneData final : public FTableRowBase
{
public:
	class FName                                   Chapter;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresTheaterMapInfo>            MapInfo;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 SceneNameNamespaceKey;                             // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    GameFlag;                                          // 0x0030(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSecret;                                           // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NDispPriorty;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresTheaterSceneData) == 0x1157CFF0, "Wrong alignment on FTresTheaterSceneData");
static_assert(sizeof(FTresTheaterSceneData) == 0x1157CFF0, "Wrong size on FTresTheaterSceneData");
static_assert(offsetof(FTresTheaterSceneData, Chapter) == 0x000008, "Member 'FTresTheaterSceneData::Chapter' has a wrong offset!");
static_assert(offsetof(FTresTheaterSceneData, MapInfo) == 0x000010, "Member 'FTresTheaterSceneData::MapInfo' has a wrong offset!");
static_assert(offsetof(FTresTheaterSceneData, SceneNameNamespaceKey) == 0x000020, "Member 'FTresTheaterSceneData::SceneNameNamespaceKey' has a wrong offset!");
static_assert(offsetof(FTresTheaterSceneData, GameFlag) == 0x000030, "Member 'FTresTheaterSceneData::GameFlag' has a wrong offset!");
static_assert(offsetof(FTresTheaterSceneData, bSecret) == 0x000048, "Member 'FTresTheaterSceneData::bSecret' has a wrong offset!");
static_assert(offsetof(FTresTheaterSceneData, NDispPriorty) == 0x00004C, "Member 'FTresTheaterSceneData::NDispPriorty' has a wrong offset!");

// ScriptStruct TresGame.TresRailSlideMoveInfo
// 0x0020 (0x0020 - 0x0000)
struct FTresRailSlideMoveInfo final
{
public:
	class ASQEX_SplineActor*                      M_StartActor;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEX_SplineActor*                      M_EndActor;                                        // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_SplineComponent*                  M_Component;                                       // 0x0010(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresRailSlideMoveInfo) == 0x000008, "Wrong alignment on FTresRailSlideMoveInfo");
static_assert(sizeof(FTresRailSlideMoveInfo) == 0x000020, "Wrong size on FTresRailSlideMoveInfo");
static_assert(offsetof(FTresRailSlideMoveInfo, M_StartActor) == 0x000000, "Member 'FTresRailSlideMoveInfo::M_StartActor' has a wrong offset!");
static_assert(offsetof(FTresRailSlideMoveInfo, M_EndActor) == 0x000008, "Member 'FTresRailSlideMoveInfo::M_EndActor' has a wrong offset!");
static_assert(offsetof(FTresRailSlideMoveInfo, M_Component) == 0x000010, "Member 'FTresRailSlideMoveInfo::M_Component' has a wrong offset!");

// ScriptStruct TresGame.TresEquipmentSetNameTable
// 0x11590C80 (0x11590C80 - 0x0000)
struct alignas(0x11590C80) FTresEquipmentSetNameTable final
{
public:
	ETresWeaponForm                               M_FormType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresWeaponGrowLvl                            M_GrowLevel;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_EquipSetName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEquipmentSetNameTable) == 0x11590C80, "Wrong alignment on FTresEquipmentSetNameTable");
static_assert(sizeof(FTresEquipmentSetNameTable) == 0x11590C80, "Wrong size on FTresEquipmentSetNameTable");
static_assert(offsetof(FTresEquipmentSetNameTable, M_FormType) == 0x000000, "Member 'FTresEquipmentSetNameTable::M_FormType' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetNameTable, M_GrowLevel) == 0x000001, "Member 'FTresEquipmentSetNameTable::M_GrowLevel' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetNameTable, M_EquipSetName) == 0x000008, "Member 'FTresEquipmentSetNameTable::M_EquipSetName' has a wrong offset!");

// ScriptStruct TresGame.TresEquipmentSetTable
// 0x00E0 (0x00E0 - 0x0000)
struct FTresEquipmentSetTable final
{
public:
	class FName                                   EquipName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EquipSetName[0x19];                                // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresEquipmentSetNameTable>     M_EquipSetNames;                                   // 0x00D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresEquipmentSetTable) == 0x000008, "Wrong alignment on FTresEquipmentSetTable");
static_assert(sizeof(FTresEquipmentSetTable) == 0x0000E0, "Wrong size on FTresEquipmentSetTable");
static_assert(offsetof(FTresEquipmentSetTable, EquipName) == 0x000000, "Member 'FTresEquipmentSetTable::EquipName' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetTable, EquipSetName) == 0x000008, "Member 'FTresEquipmentSetTable::EquipSetName' has a wrong offset!");
static_assert(offsetof(FTresEquipmentSetTable, M_EquipSetNames) == 0x0000D0, "Member 'FTresEquipmentSetTable::M_EquipSetNames' has a wrong offset!");

// ScriptStruct TresGame.TresCollShapeAssetUnit
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresCollShapeAssetUnit final
{
public:
	class FName                                   M_GrpName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresCollision                                ShapeType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Size;                                              // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0018(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRocation;                                  // 0x0024(0x112E9AF0)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0030(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCollShapeAssetUnit) == 0x112E9AF0, "Wrong alignment on FTresCollShapeAssetUnit");
static_assert(sizeof(FTresCollShapeAssetUnit) == 0x112E9AF0, "Wrong size on FTresCollShapeAssetUnit");
static_assert(offsetof(FTresCollShapeAssetUnit, M_GrpName) == 0x000000, "Member 'FTresCollShapeAssetUnit::M_GrpName' has a wrong offset!");
static_assert(offsetof(FTresCollShapeAssetUnit, ShapeType) == 0x000008, "Member 'FTresCollShapeAssetUnit::ShapeType' has a wrong offset!");
static_assert(offsetof(FTresCollShapeAssetUnit, Size) == 0x00000C, "Member 'FTresCollShapeAssetUnit::Size' has a wrong offset!");
static_assert(offsetof(FTresCollShapeAssetUnit, RelativeLocation) == 0x000018, "Member 'FTresCollShapeAssetUnit::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FTresCollShapeAssetUnit, RelativeRocation) == 0x000024, "Member 'FTresCollShapeAssetUnit::RelativeRocation' has a wrong offset!");
static_assert(offsetof(FTresCollShapeAssetUnit, Scale) == 0x000030, "Member 'FTresCollShapeAssetUnit::Scale' has a wrong offset!");
static_assert(offsetof(FTresCollShapeAssetUnit, Mesh) == 0x000040, "Member 'FTresCollShapeAssetUnit::Mesh' has a wrong offset!");

// ScriptStruct TresGame.TresVector2DInt
// 0x1157EE60 (0x1157EE60 - 0x0000)
struct alignas(0x1157EE60) FTresVector2DInt final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresVector2DInt) == 0x1157EE60, "Wrong alignment on FTresVector2DInt");
static_assert(sizeof(FTresVector2DInt) == 0x1157EE60, "Wrong size on FTresVector2DInt");
static_assert(offsetof(FTresVector2DInt, X) == 0x000000, "Member 'FTresVector2DInt::X' has a wrong offset!");
static_assert(offsetof(FTresVector2DInt, Y) == 0x000004, "Member 'FTresVector2DInt::Y' has a wrong offset!");

// ScriptStruct TresGame.TresVectorInt
// 0x1157F030 (0x1157F030 - 0x0000)
struct alignas(0x1157F030) FTresVectorInt final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresVectorInt) == 0x1157F030, "Wrong alignment on FTresVectorInt");
static_assert(sizeof(FTresVectorInt) == 0x1157F030, "Wrong size on FTresVectorInt");
static_assert(offsetof(FTresVectorInt, X) == 0x000000, "Member 'FTresVectorInt::X' has a wrong offset!");
static_assert(offsetof(FTresVectorInt, Y) == 0x000004, "Member 'FTresVectorInt::Y' has a wrong offset!");
static_assert(offsetof(FTresVectorInt, Z) == 0x000008, "Member 'FTresVectorInt::Z' has a wrong offset!");

// ScriptStruct TresGame.TresUIActorMaterialParamSettingCoefficient
// 0x1157F290 (0x1157F290 - 0x0000)
struct alignas(0x1157F290) FTresUIActorMaterialParamSettingCoefficient final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIActorMaterialParamSettingCoefficient) == 0x1157F290, "Wrong alignment on FTresUIActorMaterialParamSettingCoefficient");
static_assert(sizeof(FTresUIActorMaterialParamSettingCoefficient) == 0x1157F290, "Wrong size on FTresUIActorMaterialParamSettingCoefficient");
static_assert(offsetof(FTresUIActorMaterialParamSettingCoefficient, ParameterName) == 0x000000, "Member 'FTresUIActorMaterialParamSettingCoefficient::ParameterName' has a wrong offset!");
static_assert(offsetof(FTresUIActorMaterialParamSettingCoefficient, Value) == 0x000008, "Member 'FTresUIActorMaterialParamSettingCoefficient::Value' has a wrong offset!");

// ScriptStruct TresGame.TresUICharacterData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresUICharacterData final : public FTableRowBase
{
public:
	ETresChrUniqueID                              ChrUniqueID;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresPlayerUniqueID                           PlayerUniqueID;                                    // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIFaceUniqueID                           FaceUniqueID;                                      // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresWorldCode                                WorldCode;                                         // 0x000B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTresUIDataAssetStatus>  StatusData;                                        // 0x0010(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                MenuFaceIcon;                                      // 0x0030(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresUIGameFlagText>            Names;                                             // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUICharacterData) == 0x11413080, "Wrong alignment on FTresUICharacterData");
static_assert(sizeof(FTresUICharacterData) == 0x11413080, "Wrong size on FTresUICharacterData");
static_assert(offsetof(FTresUICharacterData, ChrUniqueID) == 0x000008, "Member 'FTresUICharacterData::ChrUniqueID' has a wrong offset!");
static_assert(offsetof(FTresUICharacterData, PlayerUniqueID) == 0x000009, "Member 'FTresUICharacterData::PlayerUniqueID' has a wrong offset!");
static_assert(offsetof(FTresUICharacterData, FaceUniqueID) == 0x00000A, "Member 'FTresUICharacterData::FaceUniqueID' has a wrong offset!");
static_assert(offsetof(FTresUICharacterData, WorldCode) == 0x00000B, "Member 'FTresUICharacterData::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresUICharacterData, StatusData) == 0x000010, "Member 'FTresUICharacterData::StatusData' has a wrong offset!");
static_assert(offsetof(FTresUICharacterData, MenuFaceIcon) == 0x000030, "Member 'FTresUICharacterData::MenuFaceIcon' has a wrong offset!");
static_assert(offsetof(FTresUICharacterData, Names) == 0x000050, "Member 'FTresUICharacterData::Names' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleBombScoreOffsetParam
// 0x0010 (0x0010 - 0x0000)
struct FTresWinniePuzzleBombScoreOffsetParam final
{
public:
	int32                                         Column;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0004(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleBombScoreOffsetParam) == 0x000004, "Wrong alignment on FTresWinniePuzzleBombScoreOffsetParam");
static_assert(sizeof(FTresWinniePuzzleBombScoreOffsetParam) == 0x000010, "Wrong size on FTresWinniePuzzleBombScoreOffsetParam");
static_assert(offsetof(FTresWinniePuzzleBombScoreOffsetParam, Column) == 0x000000, "Member 'FTresWinniePuzzleBombScoreOffsetParam::Column' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBombScoreOffsetParam, Offset) == 0x000004, "Member 'FTresWinniePuzzleBombScoreOffsetParam::Offset' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleCharacterBonusBombParam
// 0x00E0 (0x00E0 - 0x0000)
struct FTresWinniePuzzleCharacterBonusBombParam final
{
public:
	int32                                         FailTimes;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailTimesAdditionalInvocation;                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TargetExcludeRows;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 TargetExcludeColumns;                              // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         MoveWaitTime;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatMoveDistance;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuccessFloatMoveDistance;                          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatMoveVerticalAngle;                            // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatMoveHorizontalAngle;                          // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatMoveSpeed;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatMoveDelayTimeCorrectionValue;                 // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatTime;                                         // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FloatMoveCurve;                                    // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveHeightMin;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveHeightMax;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDelayTimeCorrectionValue;                      // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GotoFillUnitsPhaseWaitTime;                        // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresWinniePuzzleBombScoreOffsetParam> ScoreOffset;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresWinniePuzzleBombScoreOffsetParam> ScoreOffsetOnSuccess;                              // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                ReservationLocation;                               // 0x0088(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FirstAppearLocation;                               // 0x0094(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FirstLocationWhenBonusOccurring;                   // 0x00A0(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        AppearParticle;                                    // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        MoveParticle;                                      // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_ParticleAttachDataAsset*          ComeOutParticleOnReadyAttachData;                  // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_ParticleAttachDataAsset*          ComeOutParticleOnDiveAttachData;                   // 0x00C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresWinniePuzzleBombInterferedParam   InterferedParam;                                   // 0x00D0(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleCharacterBonusBombParam) == 0x000008, "Wrong alignment on FTresWinniePuzzleCharacterBonusBombParam");
static_assert(sizeof(FTresWinniePuzzleCharacterBonusBombParam) == 0x0000E0, "Wrong size on FTresWinniePuzzleCharacterBonusBombParam");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FailTimes) == 0x000000, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FailTimes' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FailTimesAdditionalInvocation) == 0x000004, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FailTimesAdditionalInvocation' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, TargetExcludeRows) == 0x000008, "Member 'FTresWinniePuzzleCharacterBonusBombParam::TargetExcludeRows' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, TargetExcludeColumns) == 0x000018, "Member 'FTresWinniePuzzleCharacterBonusBombParam::TargetExcludeColumns' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, MoveWaitTime) == 0x000028, "Member 'FTresWinniePuzzleCharacterBonusBombParam::MoveWaitTime' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FloatMoveDistance) == 0x00002C, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FloatMoveDistance' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, SuccessFloatMoveDistance) == 0x000030, "Member 'FTresWinniePuzzleCharacterBonusBombParam::SuccessFloatMoveDistance' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FloatMoveVerticalAngle) == 0x000034, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FloatMoveVerticalAngle' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FloatMoveHorizontalAngle) == 0x000038, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FloatMoveHorizontalAngle' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FloatMoveSpeed) == 0x00003C, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FloatMoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FloatMoveDelayTimeCorrectionValue) == 0x000040, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FloatMoveDelayTimeCorrectionValue' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FloatTime) == 0x000044, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FloatTime' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FloatMoveCurve) == 0x000048, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FloatMoveCurve' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, MoveHeightMin) == 0x000050, "Member 'FTresWinniePuzzleCharacterBonusBombParam::MoveHeightMin' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, MoveHeightMax) == 0x000054, "Member 'FTresWinniePuzzleCharacterBonusBombParam::MoveHeightMax' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, MoveSpeed) == 0x000058, "Member 'FTresWinniePuzzleCharacterBonusBombParam::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, MoveDelayTimeCorrectionValue) == 0x00005C, "Member 'FTresWinniePuzzleCharacterBonusBombParam::MoveDelayTimeCorrectionValue' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, GotoFillUnitsPhaseWaitTime) == 0x000060, "Member 'FTresWinniePuzzleCharacterBonusBombParam::GotoFillUnitsPhaseWaitTime' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, ScoreOffset) == 0x000068, "Member 'FTresWinniePuzzleCharacterBonusBombParam::ScoreOffset' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, ScoreOffsetOnSuccess) == 0x000078, "Member 'FTresWinniePuzzleCharacterBonusBombParam::ScoreOffsetOnSuccess' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, ReservationLocation) == 0x000088, "Member 'FTresWinniePuzzleCharacterBonusBombParam::ReservationLocation' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FirstAppearLocation) == 0x000094, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FirstAppearLocation' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, FirstLocationWhenBonusOccurring) == 0x0000A0, "Member 'FTresWinniePuzzleCharacterBonusBombParam::FirstLocationWhenBonusOccurring' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, AppearParticle) == 0x0000B0, "Member 'FTresWinniePuzzleCharacterBonusBombParam::AppearParticle' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, MoveParticle) == 0x0000B8, "Member 'FTresWinniePuzzleCharacterBonusBombParam::MoveParticle' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, ComeOutParticleOnReadyAttachData) == 0x0000C0, "Member 'FTresWinniePuzzleCharacterBonusBombParam::ComeOutParticleOnReadyAttachData' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, ComeOutParticleOnDiveAttachData) == 0x0000C8, "Member 'FTresWinniePuzzleCharacterBonusBombParam::ComeOutParticleOnDiveAttachData' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBombParam, InterferedParam) == 0x0000D0, "Member 'FTresWinniePuzzleCharacterBonusBombParam::InterferedParam' has a wrong offset!");

// ScriptStruct TresGame.TresUIStyleData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresUIStyleData final : public FTableRowBase
{
public:
	ETresCommandKind                              M_CommandKind;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USwfMovie>               M_SwfAsset;                                        // 0x0010(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIStyleData) == 0x11413080, "Wrong alignment on FTresUIStyleData");
static_assert(sizeof(FTresUIStyleData) == 0x11413080, "Wrong size on FTresUIStyleData");
static_assert(offsetof(FTresUIStyleData, M_CommandKind) == 0x000008, "Member 'FTresUIStyleData::M_CommandKind' has a wrong offset!");
static_assert(offsetof(FTresUIStyleData, M_SwfAsset) == 0x000010, "Member 'FTresUIStyleData::M_SwfAsset' has a wrong offset!");

// ScriptStruct TresGame.TresCockpitStyleInfo
// 0x0020 (0x0020 - 0x0000)
struct FTresCockpitStyleInfo final
{
public:
	TArray<class FString>                         M_strBtnLocKeyAry;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETresUIPadButtonType>                  M_eBtnTypeAry;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCockpitStyleInfo) == 0x000008, "Wrong alignment on FTresCockpitStyleInfo");
static_assert(sizeof(FTresCockpitStyleInfo) == 0x000020, "Wrong size on FTresCockpitStyleInfo");
static_assert(offsetof(FTresCockpitStyleInfo, M_strBtnLocKeyAry) == 0x000000, "Member 'FTresCockpitStyleInfo::M_strBtnLocKeyAry' has a wrong offset!");
static_assert(offsetof(FTresCockpitStyleInfo, M_eBtnTypeAry) == 0x000010, "Member 'FTresCockpitStyleInfo::M_eBtnTypeAry' has a wrong offset!");

// ScriptStruct TresGame.TresUIMainCommandData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresUIMainCommandData final : public FTableRowBase
{
public:
	ETresCommandKind                              M_CommandKind;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIHudCommandExKind                       M_CommandExKind;                                   // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIMainCommandTitleKind                   M_TitleKind;                                       // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USwfMovie>               M_SwfAsset;                                        // 0x0010(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresCockpitStyleInfo                  M_styleInfo;                                       // 0x0030(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIMainCommandData) == 0x11413080, "Wrong alignment on FTresUIMainCommandData");
static_assert(sizeof(FTresUIMainCommandData) == 0x11413080, "Wrong size on FTresUIMainCommandData");
static_assert(offsetof(FTresUIMainCommandData, M_CommandKind) == 0x000008, "Member 'FTresUIMainCommandData::M_CommandKind' has a wrong offset!");
static_assert(offsetof(FTresUIMainCommandData, M_CommandExKind) == 0x000009, "Member 'FTresUIMainCommandData::M_CommandExKind' has a wrong offset!");
static_assert(offsetof(FTresUIMainCommandData, M_TitleKind) == 0x00000A, "Member 'FTresUIMainCommandData::M_TitleKind' has a wrong offset!");
static_assert(offsetof(FTresUIMainCommandData, M_SwfAsset) == 0x000010, "Member 'FTresUIMainCommandData::M_SwfAsset' has a wrong offset!");
static_assert(offsetof(FTresUIMainCommandData, M_styleInfo) == 0x000030, "Member 'FTresUIMainCommandData::M_styleInfo' has a wrong offset!");

// ScriptStruct TresGame.TresCodeMenuChallengeRankData
// 0x16DA90 (0x11580B10 - 0x11413080)
struct alignas(0x11580B10) FTresCodeMenuChallengeRankData final : public FTableRowBase
{
public:
	ETresDlcChallengeRank                         M_Code;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                M_IconAsset;                                       // 0x0010(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_RankName;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresCodeMenuChallengeRankData) == 0x11580B10, "Wrong alignment on FTresCodeMenuChallengeRankData");
static_assert(sizeof(FTresCodeMenuChallengeRankData) == 0x11580B10, "Wrong size on FTresCodeMenuChallengeRankData");
static_assert(offsetof(FTresCodeMenuChallengeRankData, M_Code) == 0x000008, "Member 'FTresCodeMenuChallengeRankData::M_Code' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuChallengeRankData, M_IconAsset) == 0x000010, "Member 'FTresCodeMenuChallengeRankData::M_IconAsset' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuChallengeRankData, M_RankName) == 0x000030, "Member 'FTresCodeMenuChallengeRankData::M_RankName' has a wrong offset!");

// ScriptStruct TresGame.TresCodeMenuCheatData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresCodeMenuCheatData final : public FTableRowBase
{
public:
	ETresDlcCheatCode                             M_Code;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_NameId;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_DetailId;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUICheatCategory                          M_Category;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCodeMenuCheatData) == 0x11413080, "Wrong alignment on FTresCodeMenuCheatData");
static_assert(sizeof(FTresCodeMenuCheatData) == 0x11413080, "Wrong size on FTresCodeMenuCheatData");
static_assert(offsetof(FTresCodeMenuCheatData, M_Code) == 0x000008, "Member 'FTresCodeMenuCheatData::M_Code' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuCheatData, M_NameId) == 0x000010, "Member 'FTresCodeMenuCheatData::M_NameId' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuCheatData, M_DetailId) == 0x000020, "Member 'FTresCodeMenuCheatData::M_DetailId' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuCheatData, M_Category) == 0x000030, "Member 'FTresCodeMenuCheatData::M_Category' has a wrong offset!");

// ScriptStruct TresGame.SlideShowFrameData
// 0x0008 (0x0008 - 0x0000)
struct FSlideShowFrameData final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlideShowFrameData) == 0x000008, "Wrong alignment on FSlideShowFrameData");
static_assert(sizeof(FSlideShowFrameData) == 0x000008, "Wrong size on FSlideShowFrameData");
static_assert(offsetof(FSlideShowFrameData, Texture) == 0x000000, "Member 'FSlideShowFrameData::Texture' has a wrong offset!");

// ScriptStruct TresGame.SlideShowIconData
// 0x115822B0 (0x115822B0 - 0x0000)
struct alignas(0x115822B0) FSlideShowIconData final
{
public:
	TSoftObjectPtr<class UTexture>                Texture;                                           // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_Code;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlideShowIconData) == 0x115822B0, "Wrong alignment on FSlideShowIconData");
static_assert(sizeof(FSlideShowIconData) == 0x115822B0, "Wrong size on FSlideShowIconData");
static_assert(offsetof(FSlideShowIconData, Texture) == 0x000000, "Member 'FSlideShowIconData::Texture' has a wrong offset!");
static_assert(offsetof(FSlideShowIconData, M_Code) == 0x000020, "Member 'FSlideShowIconData::M_Code' has a wrong offset!");

// ScriptStruct TresGame.SlideShowCutData
// 0x115827B0 (0x115827B0 - 0x0000)
struct alignas(0x115827B0) FSlideShowCutData final
{
public:
	class FString                                 M_CutId;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_SlideId;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlideShowCutData) == 0x115827B0, "Wrong alignment on FSlideShowCutData");
static_assert(sizeof(FSlideShowCutData) == 0x115827B0, "Wrong size on FSlideShowCutData");
static_assert(offsetof(FSlideShowCutData, M_CutId) == 0x000000, "Member 'FSlideShowCutData::M_CutId' has a wrong offset!");
static_assert(offsetof(FSlideShowCutData, M_SlideId) == 0x000010, "Member 'FSlideShowCutData::M_SlideId' has a wrong offset!");

// ScriptStruct TresGame.SlideShowData
// 0x0050 (0x0050 - 0x0000)
struct FSlideShowData final
{
public:
	class USwfMovie*                              M_SwfAssetSequence;                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_NumPhotos;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_Duration;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_MaxFrame;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUISlideShowDataType                      M_DataType;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             M_BGM;                                             // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 M_BgmTextId;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSlideShowCutData>              M_Cuts;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 M_InitPhotos;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlideShowData) == 0x000008, "Wrong alignment on FSlideShowData");
static_assert(sizeof(FSlideShowData) == 0x000050, "Wrong size on FSlideShowData");
static_assert(offsetof(FSlideShowData, M_SwfAssetSequence) == 0x000000, "Member 'FSlideShowData::M_SwfAssetSequence' has a wrong offset!");
static_assert(offsetof(FSlideShowData, M_NumPhotos) == 0x000008, "Member 'FSlideShowData::M_NumPhotos' has a wrong offset!");
static_assert(offsetof(FSlideShowData, M_Duration) == 0x00000C, "Member 'FSlideShowData::M_Duration' has a wrong offset!");
static_assert(offsetof(FSlideShowData, M_MaxFrame) == 0x000010, "Member 'FSlideShowData::M_MaxFrame' has a wrong offset!");
static_assert(offsetof(FSlideShowData, M_DataType) == 0x000014, "Member 'FSlideShowData::M_DataType' has a wrong offset!");
static_assert(offsetof(FSlideShowData, M_BGM) == 0x000018, "Member 'FSlideShowData::M_BGM' has a wrong offset!");
static_assert(offsetof(FSlideShowData, M_BgmTextId) == 0x000020, "Member 'FSlideShowData::M_BgmTextId' has a wrong offset!");
static_assert(offsetof(FSlideShowData, M_Cuts) == 0x000030, "Member 'FSlideShowData::M_Cuts' has a wrong offset!");
static_assert(offsetof(FSlideShowData, M_InitPhotos) == 0x000040, "Member 'FSlideShowData::M_InitPhotos' has a wrong offset!");

// ScriptStruct TresGame.TresUILoadingScreenDataDefinitions
// 0x1706C0 (0x11583740 - 0x11413080)
struct alignas(0x11583740) FTresUILoadingScreenDataDefinitions final : public FTableRowBase
{
public:
	ETresUICharaID                                FromChara;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharaTextID;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                ImageAsset;                                        // 0x0020(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommentTextID;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUILoadingScreenDataDefinitions) == 0x11583740, "Wrong alignment on FTresUILoadingScreenDataDefinitions");
static_assert(sizeof(FTresUILoadingScreenDataDefinitions) == 0x11583740, "Wrong size on FTresUILoadingScreenDataDefinitions");
static_assert(offsetof(FTresUILoadingScreenDataDefinitions, FromChara) == 0x000008, "Member 'FTresUILoadingScreenDataDefinitions::FromChara' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenDataDefinitions, CharaTextID) == 0x000010, "Member 'FTresUILoadingScreenDataDefinitions::CharaTextID' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenDataDefinitions, ImageAsset) == 0x000020, "Member 'FTresUILoadingScreenDataDefinitions::ImageAsset' has a wrong offset!");
static_assert(offsetof(FTresUILoadingScreenDataDefinitions, CommentTextID) == 0x000040, "Member 'FTresUILoadingScreenDataDefinitions::CommentTextID' has a wrong offset!");

// ScriptStruct TresGame.TresUIMissionGageTable
// 0x170CE0 (0x11583D60 - 0x11413080)
struct alignas(0x11583D60) FTresUIMissionGageTable final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USwfMovie>               IconAsset;                                         // 0x0008(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InitialValue;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MaxValue;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIMissionGageColorType                   GageColorType;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GageTextLocSpaceKey;                               // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIMissionGageTable) == 0x11583D60, "Wrong alignment on FTresUIMissionGageTable");
static_assert(sizeof(FTresUIMissionGageTable) == 0x11583D60, "Wrong size on FTresUIMissionGageTable");
static_assert(offsetof(FTresUIMissionGageTable, IconAsset) == 0x000008, "Member 'FTresUIMissionGageTable::IconAsset' has a wrong offset!");
static_assert(offsetof(FTresUIMissionGageTable, InitialValue) == 0x000028, "Member 'FTresUIMissionGageTable::InitialValue' has a wrong offset!");
static_assert(offsetof(FTresUIMissionGageTable, MaxValue) == 0x00002C, "Member 'FTresUIMissionGageTable::MaxValue' has a wrong offset!");
static_assert(offsetof(FTresUIMissionGageTable, GageColorType) == 0x000030, "Member 'FTresUIMissionGageTable::GageColorType' has a wrong offset!");
static_assert(offsetof(FTresUIMissionGageTable, GageTextLocSpaceKey) == 0x000038, "Member 'FTresUIMissionGageTable::GageTextLocSpaceKey' has a wrong offset!");

// ScriptStruct TresGame.TresUIMobileDictionaryEnemyCategory
// 0x115841A0 (0x115841A0 - 0x0000)
struct alignas(0x115841A0) FTresUIMobileDictionaryEnemyCategory final
{
public:
	ETresUIDictionaryEnemyCategory                Category;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextId;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIMobileDictionaryEnemyCategory) == 0x115841A0, "Wrong alignment on FTresUIMobileDictionaryEnemyCategory");
static_assert(sizeof(FTresUIMobileDictionaryEnemyCategory) == 0x115841A0, "Wrong size on FTresUIMobileDictionaryEnemyCategory");
static_assert(offsetof(FTresUIMobileDictionaryEnemyCategory, Category) == 0x000000, "Member 'FTresUIMobileDictionaryEnemyCategory::Category' has a wrong offset!");
static_assert(offsetof(FTresUIMobileDictionaryEnemyCategory, TextId) == 0x000008, "Member 'FTresUIMobileDictionaryEnemyCategory::TextId' has a wrong offset!");

// ScriptStruct TresGame.TresUIMobileDictionaryCharacterCategory
// 0x0020 (0x0020 - 0x0000)
struct FTresUIMobileDictionaryCharacterCategory final
{
public:
	ETresWorldCode                                WorldCode;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextId;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIMobileDictionaryCharacterCategory) == 0x000008, "Wrong alignment on FTresUIMobileDictionaryCharacterCategory");
static_assert(sizeof(FTresUIMobileDictionaryCharacterCategory) == 0x000020, "Wrong size on FTresUIMobileDictionaryCharacterCategory");
static_assert(offsetof(FTresUIMobileDictionaryCharacterCategory, WorldCode) == 0x000000, "Member 'FTresUIMobileDictionaryCharacterCategory::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresUIMobileDictionaryCharacterCategory, TextId) == 0x000008, "Member 'FTresUIMobileDictionaryCharacterCategory::TextId' has a wrong offset!");
static_assert(offsetof(FTresUIMobileDictionaryCharacterCategory, Version) == 0x000018, "Member 'FTresUIMobileDictionaryCharacterCategory::Version' has a wrong offset!");

// ScriptStruct TresGame.TresUICampMenuCuisineFavoriteItem
// 0x0030 (0x0030 - 0x0000)
struct FTresUICampMenuCuisineFavoriteItem final
{
public:
	class UGFxObject*                             Icon;                                              // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             TextIcon;                                          // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             Name;                                              // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             TextName;                                          // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             Num;                                               // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             TextNum;                                           // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUICampMenuCuisineFavoriteItem) == 0x000008, "Wrong alignment on FTresUICampMenuCuisineFavoriteItem");
static_assert(sizeof(FTresUICampMenuCuisineFavoriteItem) == 0x000030, "Wrong size on FTresUICampMenuCuisineFavoriteItem");
static_assert(offsetof(FTresUICampMenuCuisineFavoriteItem, Icon) == 0x000000, "Member 'FTresUICampMenuCuisineFavoriteItem::Icon' has a wrong offset!");
static_assert(offsetof(FTresUICampMenuCuisineFavoriteItem, TextIcon) == 0x000008, "Member 'FTresUICampMenuCuisineFavoriteItem::TextIcon' has a wrong offset!");
static_assert(offsetof(FTresUICampMenuCuisineFavoriteItem, Name) == 0x000010, "Member 'FTresUICampMenuCuisineFavoriteItem::Name' has a wrong offset!");
static_assert(offsetof(FTresUICampMenuCuisineFavoriteItem, TextName) == 0x000018, "Member 'FTresUICampMenuCuisineFavoriteItem::TextName' has a wrong offset!");
static_assert(offsetof(FTresUICampMenuCuisineFavoriteItem, Num) == 0x000020, "Member 'FTresUICampMenuCuisineFavoriteItem::Num' has a wrong offset!");
static_assert(offsetof(FTresUICampMenuCuisineFavoriteItem, TextNum) == 0x000028, "Member 'FTresUICampMenuCuisineFavoriteItem::TextNum' has a wrong offset!");

// ScriptStruct TresGame.TresCodeMenuScoreData
// 0x0040 (0x0040 - 0x0000)
struct FTresCodeMenuScoreData final
{
public:
	class UGFxObject*                             M_pRecord;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pObj;                                            // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pLabel1;                                         // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pLabelName1;                                     // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pLabelName2;                                     // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pLabelName3;                                     // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pLabelNum;                                       // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCodeMenuScoreData) == 0x000008, "Wrong alignment on FTresCodeMenuScoreData");
static_assert(sizeof(FTresCodeMenuScoreData) == 0x000040, "Wrong size on FTresCodeMenuScoreData");
static_assert(offsetof(FTresCodeMenuScoreData, M_pRecord) == 0x000000, "Member 'FTresCodeMenuScoreData::M_pRecord' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuScoreData, M_pObj) == 0x000008, "Member 'FTresCodeMenuScoreData::M_pObj' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuScoreData, M_pLabel1) == 0x000010, "Member 'FTresCodeMenuScoreData::M_pLabel1' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuScoreData, M_pLabelName1) == 0x000018, "Member 'FTresCodeMenuScoreData::M_pLabelName1' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuScoreData, M_pLabelName2) == 0x000020, "Member 'FTresCodeMenuScoreData::M_pLabelName2' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuScoreData, M_pLabelName3) == 0x000028, "Member 'FTresCodeMenuScoreData::M_pLabelName3' has a wrong offset!");
static_assert(offsetof(FTresCodeMenuScoreData, M_pLabelNum) == 0x000030, "Member 'FTresCodeMenuScoreData::M_pLabelNum' has a wrong offset!");

// ScriptStruct TresGame.TresUIP_Hologram_CharaPageInfo
// 0x4F64 (0x4F64 - 0x0000)
struct alignas(0x4F64) FTresUIP_Hologram_CharaPageInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIP_Hologram_CharaPageInfo) == 0x004F64, "Wrong alignment on FTresUIP_Hologram_CharaPageInfo");
static_assert(sizeof(FTresUIP_Hologram_CharaPageInfo) == 0x004F64, "Wrong size on FTresUIP_Hologram_CharaPageInfo");

// ScriptStruct TresGame.TresUIP_Hologram_DataTableItem
// 0x11FA2 (0x11FA2 - 0x0000)
struct alignas(0x11FA2) FTresUIP_Hologram_DataTableItem final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIP_Hologram_DataTableItem) == 0x011FA2, "Wrong alignment on FTresUIP_Hologram_DataTableItem");
static_assert(sizeof(FTresUIP_Hologram_DataTableItem) == 0x011FA2, "Wrong size on FTresUIP_Hologram_DataTableItem");

// ScriptStruct TresGame.TresUIP_Hologram_CharaInfoIcon
// 0x0018 (0x0018 - 0x0000)
struct FTresUIP_Hologram_CharaInfoIcon final
{
public:
	class UGFxObject*                             M_IconRoot;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresASProxyTresControlsIcon*           M_IconImg;                                         // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_NewMark;                                         // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIP_Hologram_CharaInfoIcon) == 0x000008, "Wrong alignment on FTresUIP_Hologram_CharaInfoIcon");
static_assert(sizeof(FTresUIP_Hologram_CharaInfoIcon) == 0x000018, "Wrong size on FTresUIP_Hologram_CharaInfoIcon");
static_assert(offsetof(FTresUIP_Hologram_CharaInfoIcon, M_IconRoot) == 0x000000, "Member 'FTresUIP_Hologram_CharaInfoIcon::M_IconRoot' has a wrong offset!");
static_assert(offsetof(FTresUIP_Hologram_CharaInfoIcon, M_IconImg) == 0x000008, "Member 'FTresUIP_Hologram_CharaInfoIcon::M_IconImg' has a wrong offset!");
static_assert(offsetof(FTresUIP_Hologram_CharaInfoIcon, M_NewMark) == 0x000010, "Member 'FTresUIP_Hologram_CharaInfoIcon::M_NewMark' has a wrong offset!");

// ScriptStruct TresGame.TresHudBaymaxDarkCubeInfo
// 0x4F76 (0x4F76 - 0x0000)
struct alignas(0x4F76) FTresHudBaymaxDarkCubeInfo final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHudBaymaxDarkCubeInfo) == 0x004F76, "Wrong alignment on FTresHudBaymaxDarkCubeInfo");
static_assert(sizeof(FTresHudBaymaxDarkCubeInfo) == 0x004F76, "Wrong size on FTresHudBaymaxDarkCubeInfo");

// ScriptStruct TresGame.TresHudBaymaxCharaMarkerInfo
// 0x4F78 (0x4F78 - 0x0000)
struct alignas(0x4F78) FTresHudBaymaxCharaMarkerInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHudBaymaxCharaMarkerInfo) == 0x004F78, "Wrong alignment on FTresHudBaymaxCharaMarkerInfo");
static_assert(sizeof(FTresHudBaymaxCharaMarkerInfo) == 0x004F78, "Wrong size on FTresHudBaymaxCharaMarkerInfo");

// ScriptStruct TresGame.TresHudBaymaxLocationMarkerInfo
// 0x4F80 (0x4F80 - 0x0000)
struct alignas(0x4F80) FTresHudBaymaxLocationMarkerInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHudBaymaxLocationMarkerInfo) == 0x004F80, "Wrong alignment on FTresHudBaymaxLocationMarkerInfo");
static_assert(sizeof(FTresHudBaymaxLocationMarkerInfo) == 0x004F80, "Wrong size on FTresHudBaymaxLocationMarkerInfo");

// ScriptStruct TresGame.TresHudBaymaxPointInfo
// 0x4F93 (0x4F93 - 0x0000)
struct alignas(0x4F93) FTresHudBaymaxPointInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHudBaymaxPointInfo) == 0x004F93, "Wrong alignment on FTresHudBaymaxPointInfo");
static_assert(sizeof(FTresHudBaymaxPointInfo) == 0x004F93, "Wrong size on FTresHudBaymaxPointInfo");

// ScriptStruct TresGame.TresHudBmmTargetInfo
// 0x4F95 (0x4F95 - 0x0000)
struct alignas(0x4F95) FTresHudBmmTargetInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHudBmmTargetInfo) == 0x004F95, "Wrong alignment on FTresHudBmmTargetInfo");
static_assert(sizeof(FTresHudBmmTargetInfo) == 0x004F95, "Wrong size on FTresHudBmmTargetInfo");

// ScriptStruct TresGame.TresCockpitActionCmdSelect
// 0x4F99 (0x4F99 - 0x0000)
struct alignas(0x4F99) FTresCockpitActionCmdSelect final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCockpitActionCmdSelect) == 0x004F99, "Wrong alignment on FTresCockpitActionCmdSelect");
static_assert(sizeof(FTresCockpitActionCmdSelect) == 0x004F99, "Wrong size on FTresCockpitActionCmdSelect");

// ScriptStruct TresGame.TresCockpitFriend
// 0x11FA7 (0x11FA7 - 0x0000)
struct alignas(0x11FA7) FTresCockpitFriend final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresCockpitFriend) == 0x011FA7, "Wrong alignment on FTresCockpitFriend");
static_assert(sizeof(FTresCockpitFriend) == 0x011FA7, "Wrong size on FTresCockpitFriend");

// ScriptStruct TresGame.TresHudGigasMarkerInfo
// 0x11FA9 (0x11FA9 - 0x0000)
struct alignas(0x11FA9) FTresHudGigasMarkerInfo final
{
public:
	uint8                                         Pad_0[0x34];                                       // 0x0000(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHudGigasMarkerInfo) == 0x011FA9, "Wrong alignment on FTresHudGigasMarkerInfo");
static_assert(sizeof(FTresHudGigasMarkerInfo) == 0x011FA9, "Wrong size on FTresHudGigasMarkerInfo");

// ScriptStruct TresGame.TresGumiShipDestroyMovieClip
// 0x0018 (0x0018 - 0x0000)
struct FTresGumiShipDestroyMovieClip final
{
public:
	class UGFxObject*                             M_pRoot;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pNum;                                            // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pNumEff;                                         // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipDestroyMovieClip) == 0x000008, "Wrong alignment on FTresGumiShipDestroyMovieClip");
static_assert(sizeof(FTresGumiShipDestroyMovieClip) == 0x000018, "Wrong size on FTresGumiShipDestroyMovieClip");
static_assert(offsetof(FTresGumiShipDestroyMovieClip, M_pRoot) == 0x000000, "Member 'FTresGumiShipDestroyMovieClip::M_pRoot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDestroyMovieClip, M_pNum) == 0x000008, "Member 'FTresGumiShipDestroyMovieClip::M_pNum' has a wrong offset!");
static_assert(offsetof(FTresGumiShipDestroyMovieClip, M_pNumEff) == 0x000010, "Member 'FTresGumiShipDestroyMovieClip::M_pNumEff' has a wrong offset!");

// ScriptStruct TresGame.TresGumiShipSPWeaponGauge
// 0x0018 (0x0018 - 0x0000)
struct FTresGumiShipSPWeaponGauge final
{
public:
	class UGFxObject*                             M_pRoot;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pGaugeBody;                                      // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             M_pGaugeEff;                                       // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresGumiShipSPWeaponGauge) == 0x000008, "Wrong alignment on FTresGumiShipSPWeaponGauge");
static_assert(sizeof(FTresGumiShipSPWeaponGauge) == 0x000018, "Wrong size on FTresGumiShipSPWeaponGauge");
static_assert(offsetof(FTresGumiShipSPWeaponGauge, M_pRoot) == 0x000000, "Member 'FTresGumiShipSPWeaponGauge::M_pRoot' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSPWeaponGauge, M_pGaugeBody) == 0x000008, "Member 'FTresGumiShipSPWeaponGauge::M_pGaugeBody' has a wrong offset!");
static_assert(offsetof(FTresGumiShipSPWeaponGauge, M_pGaugeEff) == 0x000010, "Member 'FTresGumiShipSPWeaponGauge::M_pGaugeEff' has a wrong offset!");

// ScriptStruct TresGame.TresHudPlaneTargetInfo
// 0x11FB9 (0x11FB9 - 0x0000)
struct alignas(0x11FB9) FTresHudPlaneTargetInfo final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHudPlaneTargetInfo) == 0x011FB9, "Wrong alignment on FTresHudPlaneTargetInfo");
static_assert(sizeof(FTresHudPlaneTargetInfo) == 0x011FB9, "Wrong size on FTresHudPlaneTargetInfo");

// ScriptStruct TresGame.HudRalph_RalphBtn
// 0x0028 (0x0028 - 0x0000)
struct FHudRalph_RalphBtn final
{
public:
	class UGFxObject*                             Root;                                              // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             Icon;                                              // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             IconS;                                             // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresASProxyTresControlsBitmapNumber*   StockBitmapNumber;                                 // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHudRalph_RalphBtn) == 0x000008, "Wrong alignment on FHudRalph_RalphBtn");
static_assert(sizeof(FHudRalph_RalphBtn) == 0x000028, "Wrong size on FHudRalph_RalphBtn");
static_assert(offsetof(FHudRalph_RalphBtn, Root) == 0x000000, "Member 'FHudRalph_RalphBtn::Root' has a wrong offset!");
static_assert(offsetof(FHudRalph_RalphBtn, Icon) == 0x000008, "Member 'FHudRalph_RalphBtn::Icon' has a wrong offset!");
static_assert(offsetof(FHudRalph_RalphBtn, IconS) == 0x000010, "Member 'FHudRalph_RalphBtn::IconS' has a wrong offset!");
static_assert(offsetof(FHudRalph_RalphBtn, StockBitmapNumber) == 0x000018, "Member 'FHudRalph_RalphBtn::StockBitmapNumber' has a wrong offset!");

// ScriptStruct TresGame.TresHudSRideTargetInfo
// 0xC707 (0xC707 - 0x0000)
struct alignas(0xC707) FTresHudSRideTargetInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresHudSRideTargetInfo) == 0x00C707, "Wrong alignment on FTresHudSRideTargetInfo");
static_assert(sizeof(FTresHudSRideTargetInfo) == 0x00C707, "Wrong size on FTresHudSRideTargetInfo");

// ScriptStruct TresGame.TresUIP_HudTarget_ButtonCount
// 0x0020 (0x0020 - 0x0000)
struct FTresUIP_HudTarget_ButtonCount final
{
public:
	class UGFxObject*                             Root;                                              // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             ColorSet;                                          // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresASProxyTresControlsBitmapNumber*   Seconds;                                           // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTresASProxyTresControlsBitmapNumber*   DecimalSeconds;                                    // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIP_HudTarget_ButtonCount) == 0x000008, "Wrong alignment on FTresUIP_HudTarget_ButtonCount");
static_assert(sizeof(FTresUIP_HudTarget_ButtonCount) == 0x000020, "Wrong size on FTresUIP_HudTarget_ButtonCount");
static_assert(offsetof(FTresUIP_HudTarget_ButtonCount, Root) == 0x000000, "Member 'FTresUIP_HudTarget_ButtonCount::Root' has a wrong offset!");
static_assert(offsetof(FTresUIP_HudTarget_ButtonCount, ColorSet) == 0x000008, "Member 'FTresUIP_HudTarget_ButtonCount::ColorSet' has a wrong offset!");
static_assert(offsetof(FTresUIP_HudTarget_ButtonCount, Seconds) == 0x000010, "Member 'FTresUIP_HudTarget_ButtonCount::Seconds' has a wrong offset!");
static_assert(offsetof(FTresUIP_HudTarget_ButtonCount, DecimalSeconds) == 0x000018, "Member 'FTresUIP_HudTarget_ButtonCount::DecimalSeconds' has a wrong offset!");

// ScriptStruct TresGame.TresUIGigasGameAward
// 0x115884C0 (0x115884C0 - 0x0000)
struct alignas(0x115884C0) FTresUIGigasGameAward final
{
public:
	class FString                                 LocalizeKey;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUIGigasGameAward) == 0x115884C0, "Wrong alignment on FTresUIGigasGameAward");
static_assert(sizeof(FTresUIGigasGameAward) == 0x115884C0, "Wrong size on FTresUIGigasGameAward");
static_assert(offsetof(FTresUIGigasGameAward, LocalizeKey) == 0x000000, "Member 'FTresUIGigasGameAward::LocalizeKey' has a wrong offset!");
static_assert(offsetof(FTresUIGigasGameAward, Score) == 0x000010, "Member 'FTresUIGigasGameAward::Score' has a wrong offset!");

// ScriptStruct TresGame.TresUIGameProgressSection
// 0x0030 (0x0030 - 0x0000)
struct FTresUIGameProgressSection final
{
public:
	struct FTresUIGameFlagData                    Start;                                             // 0x0000(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresUIGameFlagData                    End;                                               // 0x0018(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIGameProgressSection) == 0x000001, "Wrong alignment on FTresUIGameProgressSection");
static_assert(sizeof(FTresUIGameProgressSection) == 0x000030, "Wrong size on FTresUIGameProgressSection");
static_assert(offsetof(FTresUIGameProgressSection, Start) == 0x000000, "Member 'FTresUIGameProgressSection::Start' has a wrong offset!");
static_assert(offsetof(FTresUIGameProgressSection, End) == 0x000018, "Member 'FTresUIGameProgressSection::End' has a wrong offset!");

// ScriptStruct TresGame.TresUISaveMenuRestrictionData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresUISaveMenuRestrictionData final : public FTableRowBase
{
public:
	class FName                                   SavePointName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTresUIGameProgressSection             RestrictionAreaSelectSection;                      // 0x0010(0x0030)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresUIGameProgressSection             RestrictionWorldMapSection;                        // 0x0040(0x0030)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTresUIGameProgressSection             RestrictionRestaurantSection;                      // 0x0070(0x0030)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	ETresUIDataVersion                            Version;                                           // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresUISaveMenuRestrictionData) == 0x11413080, "Wrong alignment on FTresUISaveMenuRestrictionData");
static_assert(sizeof(FTresUISaveMenuRestrictionData) == 0x11413080, "Wrong size on FTresUISaveMenuRestrictionData");
static_assert(offsetof(FTresUISaveMenuRestrictionData, SavePointName) == 0x000008, "Member 'FTresUISaveMenuRestrictionData::SavePointName' has a wrong offset!");
static_assert(offsetof(FTresUISaveMenuRestrictionData, RestrictionAreaSelectSection) == 0x000010, "Member 'FTresUISaveMenuRestrictionData::RestrictionAreaSelectSection' has a wrong offset!");
static_assert(offsetof(FTresUISaveMenuRestrictionData, RestrictionWorldMapSection) == 0x000040, "Member 'FTresUISaveMenuRestrictionData::RestrictionWorldMapSection' has a wrong offset!");
static_assert(offsetof(FTresUISaveMenuRestrictionData, RestrictionRestaurantSection) == 0x000070, "Member 'FTresUISaveMenuRestrictionData::RestrictionRestaurantSection' has a wrong offset!");
static_assert(offsetof(FTresUISaveMenuRestrictionData, Version) == 0x0000A0, "Member 'FTresUISaveMenuRestrictionData::Version' has a wrong offset!");

// ScriptStruct TresGame.TresUIShopInfo
// 0x0050 (0x0050 - 0x0000)
struct FTresUIShopInfo final
{
public:
	class FString                                 NameTextID;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Staff;                                             // 0x0010(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresUIShopVoice>               TalkWelcome;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresUIShopVoice>               TalkNewArrival;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIShopInfo) == 0x000008, "Wrong alignment on FTresUIShopInfo");
static_assert(sizeof(FTresUIShopInfo) == 0x000050, "Wrong size on FTresUIShopInfo");
static_assert(offsetof(FTresUIShopInfo, NameTextID) == 0x000000, "Member 'FTresUIShopInfo::NameTextID' has a wrong offset!");
static_assert(offsetof(FTresUIShopInfo, Staff) == 0x000010, "Member 'FTresUIShopInfo::Staff' has a wrong offset!");
static_assert(offsetof(FTresUIShopInfo, TalkWelcome) == 0x000030, "Member 'FTresUIShopInfo::TalkWelcome' has a wrong offset!");
static_assert(offsetof(FTresUIShopInfo, TalkNewArrival) == 0x000040, "Member 'FTresUIShopInfo::TalkNewArrival' has a wrong offset!");

// ScriptStruct TresGame.TresUIDoFParams
// 0x1158A6D0 (0x1158A6D0 - 0x0000)
struct alignas(0x1158A6D0) FTresUIDoFParams final
{
public:
	float                                         DepthOfFieldFocalDistance;                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFocalRegion;                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldNearTransitionRegion;                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFarTransitionRegion;                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldScale;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldNearBlurSize;                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFarBlurSize;                           // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIDoFParams) == 0x1158A6D0, "Wrong alignment on FTresUIDoFParams");
static_assert(sizeof(FTresUIDoFParams) == 0x1158A6D0, "Wrong size on FTresUIDoFParams");
static_assert(offsetof(FTresUIDoFParams, DepthOfFieldFocalDistance) == 0x000000, "Member 'FTresUIDoFParams::DepthOfFieldFocalDistance' has a wrong offset!");
static_assert(offsetof(FTresUIDoFParams, DepthOfFieldFocalRegion) == 0x000004, "Member 'FTresUIDoFParams::DepthOfFieldFocalRegion' has a wrong offset!");
static_assert(offsetof(FTresUIDoFParams, DepthOfFieldNearTransitionRegion) == 0x000008, "Member 'FTresUIDoFParams::DepthOfFieldNearTransitionRegion' has a wrong offset!");
static_assert(offsetof(FTresUIDoFParams, DepthOfFieldFarTransitionRegion) == 0x00000C, "Member 'FTresUIDoFParams::DepthOfFieldFarTransitionRegion' has a wrong offset!");
static_assert(offsetof(FTresUIDoFParams, DepthOfFieldScale) == 0x000010, "Member 'FTresUIDoFParams::DepthOfFieldScale' has a wrong offset!");
static_assert(offsetof(FTresUIDoFParams, DepthOfFieldNearBlurSize) == 0x000014, "Member 'FTresUIDoFParams::DepthOfFieldNearBlurSize' has a wrong offset!");
static_assert(offsetof(FTresUIDoFParams, DepthOfFieldFarBlurSize) == 0x000018, "Member 'FTresUIDoFParams::DepthOfFieldFarBlurSize' has a wrong offset!");

// ScriptStruct TresGame.TresUIBlurParams
// 0x1158AB70 (0x1158AB70 - 0x0000)
struct alignas(0x1158AB70) FTresUIBlurParams final
{
public:
	float                                         FUIBlurIntensity;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FUIBlurSize;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FUIBlurHoleSize;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FUIBlurCharaAdaptationRate;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FUIBlurHoleEdgeSize;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FUILensDistortionSize;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FUILensDistortionPower;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FUILensDistortionEdgeSize;                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FUILensDistortionContrast;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIBlurParams) == 0x1158AB70, "Wrong alignment on FTresUIBlurParams");
static_assert(sizeof(FTresUIBlurParams) == 0x1158AB70, "Wrong size on FTresUIBlurParams");
static_assert(offsetof(FTresUIBlurParams, FUIBlurIntensity) == 0x000000, "Member 'FTresUIBlurParams::FUIBlurIntensity' has a wrong offset!");
static_assert(offsetof(FTresUIBlurParams, FUIBlurSize) == 0x000004, "Member 'FTresUIBlurParams::FUIBlurSize' has a wrong offset!");
static_assert(offsetof(FTresUIBlurParams, FUIBlurHoleSize) == 0x000008, "Member 'FTresUIBlurParams::FUIBlurHoleSize' has a wrong offset!");
static_assert(offsetof(FTresUIBlurParams, FUIBlurCharaAdaptationRate) == 0x00000C, "Member 'FTresUIBlurParams::FUIBlurCharaAdaptationRate' has a wrong offset!");
static_assert(offsetof(FTresUIBlurParams, FUIBlurHoleEdgeSize) == 0x000010, "Member 'FTresUIBlurParams::FUIBlurHoleEdgeSize' has a wrong offset!");
static_assert(offsetof(FTresUIBlurParams, FUILensDistortionSize) == 0x000014, "Member 'FTresUIBlurParams::FUILensDistortionSize' has a wrong offset!");
static_assert(offsetof(FTresUIBlurParams, FUILensDistortionPower) == 0x000018, "Member 'FTresUIBlurParams::FUILensDistortionPower' has a wrong offset!");
static_assert(offsetof(FTresUIBlurParams, FUILensDistortionEdgeSize) == 0x00001C, "Member 'FTresUIBlurParams::FUILensDistortionEdgeSize' has a wrong offset!");
static_assert(offsetof(FTresUIBlurParams, FUILensDistortionContrast) == 0x000020, "Member 'FTresUIBlurParams::FUILensDistortionContrast' has a wrong offset!");

// ScriptStruct TresGame.TresUIWorldIconName
// 0x0038 (0x0038 - 0x0000)
struct FTresUIWorldIconName final
{
public:
	ETresWorldCode                                WorldCode;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WorldNameKey;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                IconAsset;                                         // 0x0018(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresUIWorldIconName) == 0x000008, "Wrong alignment on FTresUIWorldIconName");
static_assert(sizeof(FTresUIWorldIconName) == 0x000038, "Wrong size on FTresUIWorldIconName");
static_assert(offsetof(FTresUIWorldIconName, WorldCode) == 0x000000, "Member 'FTresUIWorldIconName::WorldCode' has a wrong offset!");
static_assert(offsetof(FTresUIWorldIconName, WorldNameKey) == 0x000008, "Member 'FTresUIWorldIconName::WorldNameKey' has a wrong offset!");
static_assert(offsetof(FTresUIWorldIconName, IconAsset) == 0x000018, "Member 'FTresUIWorldIconName::IconAsset' has a wrong offset!");

// ScriptStruct TresGame.TresVFXAreaCustomTableData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresVFXAreaCustomTableData final : public FTableRowBase
{
public:
	class FString                                 Description;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AreaBaseColor;                                     // 0x0018(0x112EAE80)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AreaBrightColor;                                   // 0x0028(0x112EAE80)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AreaDarkColor;                                     // 0x0038(0x112EAE80)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaColorSynthesis;                                // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTresAreaEffectCurveData               CurveDatas;                                        // 0x0050(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTresAreaEffectData>            AreaEffectData;                                    // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresVFXAreaCustomTableData) == 0x11413080, "Wrong alignment on FTresVFXAreaCustomTableData");
static_assert(sizeof(FTresVFXAreaCustomTableData) == 0x11413080, "Wrong size on FTresVFXAreaCustomTableData");
static_assert(offsetof(FTresVFXAreaCustomTableData, Description) == 0x000008, "Member 'FTresVFXAreaCustomTableData::Description' has a wrong offset!");
static_assert(offsetof(FTresVFXAreaCustomTableData, AreaBaseColor) == 0x000018, "Member 'FTresVFXAreaCustomTableData::AreaBaseColor' has a wrong offset!");
static_assert(offsetof(FTresVFXAreaCustomTableData, AreaBrightColor) == 0x000028, "Member 'FTresVFXAreaCustomTableData::AreaBrightColor' has a wrong offset!");
static_assert(offsetof(FTresVFXAreaCustomTableData, AreaDarkColor) == 0x000038, "Member 'FTresVFXAreaCustomTableData::AreaDarkColor' has a wrong offset!");
static_assert(offsetof(FTresVFXAreaCustomTableData, AreaColorSynthesis) == 0x000048, "Member 'FTresVFXAreaCustomTableData::AreaColorSynthesis' has a wrong offset!");
static_assert(offsetof(FTresVFXAreaCustomTableData, CurveDatas) == 0x000050, "Member 'FTresVFXAreaCustomTableData::CurveDatas' has a wrong offset!");
static_assert(offsetof(FTresVFXAreaCustomTableData, AreaEffectData) == 0x000070, "Member 'FTresVFXAreaCustomTableData::AreaEffectData' has a wrong offset!");

// ScriptStruct TresGame.TresVictoryBonusUnit
// 0x0002 (0x0002 - 0x0000)
struct FTresVictoryBonusUnit final
{
public:
	ETresVictoryBonusKind                         M_Bonus;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETresAbilityKind                              M_Ability;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresVictoryBonusUnit) == 0x000001, "Wrong alignment on FTresVictoryBonusUnit");
static_assert(sizeof(FTresVictoryBonusUnit) == 0x000002, "Wrong size on FTresVictoryBonusUnit");
static_assert(offsetof(FTresVictoryBonusUnit, M_Bonus) == 0x000000, "Member 'FTresVictoryBonusUnit::M_Bonus' has a wrong offset!");
static_assert(offsetof(FTresVictoryBonusUnit, M_Ability) == 0x000001, "Member 'FTresVictoryBonusUnit::M_Ability' has a wrong offset!");

// ScriptStruct TresGame.TresVoiceGroupUnit
// 0x0010 (0x0010 - 0x0000)
struct FTresVoiceGroupUnit final
{
public:
	int32                                         M_GroupNo;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             M_pVoice;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresVoiceGroupUnit) == 0x000008, "Wrong alignment on FTresVoiceGroupUnit");
static_assert(sizeof(FTresVoiceGroupUnit) == 0x000010, "Wrong size on FTresVoiceGroupUnit");
static_assert(offsetof(FTresVoiceGroupUnit, M_GroupNo) == 0x000000, "Member 'FTresVoiceGroupUnit::M_GroupNo' has a wrong offset!");
static_assert(offsetof(FTresVoiceGroupUnit, M_pVoice) == 0x000008, "Member 'FTresVoiceGroupUnit::M_pVoice' has a wrong offset!");

// ScriptStruct TresGame.TresVoiceGroup
// 0x0028 (0x0028 - 0x0000)
struct FTresVoiceGroup final
{
public:
	class FName                                   M_GroupName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bPlayOnGroupNotFound : 1;                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             M_pDefaultVoice;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresVoiceGroupUnit>            M_Table;                                           // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresVoiceGroup) == 0x000008, "Wrong alignment on FTresVoiceGroup");
static_assert(sizeof(FTresVoiceGroup) == 0x000028, "Wrong size on FTresVoiceGroup");
static_assert(offsetof(FTresVoiceGroup, M_GroupName) == 0x000000, "Member 'FTresVoiceGroup::M_GroupName' has a wrong offset!");
static_assert(offsetof(FTresVoiceGroup, M_pDefaultVoice) == 0x000010, "Member 'FTresVoiceGroup::M_pDefaultVoice' has a wrong offset!");
static_assert(offsetof(FTresVoiceGroup, M_Table) == 0x000018, "Member 'FTresVoiceGroup::M_Table' has a wrong offset!");

// ScriptStruct TresGame.TresFriendWarpPointData
// 0x1158F400 (0x1158F400 - 0x0000)
struct alignas(0x1158F400) FTresFriendWarpPointData final
{
public:
	class AActor*                                 M_WarpPoint;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bUsedRangeXY : 1;                                // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_WarpPointRangeXY;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_bUsedRangeZ : 1;                                 // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_WarpPointRangeZ;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresFriendWarpPointData) == 0x1158F400, "Wrong alignment on FTresFriendWarpPointData");
static_assert(sizeof(FTresFriendWarpPointData) == 0x1158F400, "Wrong size on FTresFriendWarpPointData");
static_assert(offsetof(FTresFriendWarpPointData, M_WarpPoint) == 0x000000, "Member 'FTresFriendWarpPointData::M_WarpPoint' has a wrong offset!");
static_assert(offsetof(FTresFriendWarpPointData, M_WarpPointRangeXY) == 0x00000C, "Member 'FTresFriendWarpPointData::M_WarpPointRangeXY' has a wrong offset!");
static_assert(offsetof(FTresFriendWarpPointData, M_WarpPointRangeZ) == 0x000014, "Member 'FTresFriendWarpPointData::M_WarpPointRangeZ' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleCharacterBonusBoundParam
// 0x0060 (0x0060 - 0x0000)
struct FTresWinniePuzzleCharacterBonusBoundParam final
{
public:
	float                                         MoveWaitTime;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveHeightMin;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveHeightMax;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDelayTimeCorrectionValue;                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitBoundAnimationTime;                            // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GotoFillUnitsPhaseWaitTime;                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresWinniePuzzleBoundStyleParam> StyleParam;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresWinniePuzzleBoundStyleParam> StyleParamAdditionalInvocation;                    // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          UseSpecialMove;                                    // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        BoundParticle;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceWithBoundPointWhenSpawnBoundParticle;      // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReservationLocation;                               // 0x0054(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleCharacterBonusBoundParam) == 0x000008, "Wrong alignment on FTresWinniePuzzleCharacterBonusBoundParam");
static_assert(sizeof(FTresWinniePuzzleCharacterBonusBoundParam) == 0x000060, "Wrong size on FTresWinniePuzzleCharacterBonusBoundParam");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, MoveWaitTime) == 0x000000, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::MoveWaitTime' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, MoveHeightMin) == 0x000004, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::MoveHeightMin' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, MoveHeightMax) == 0x000008, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::MoveHeightMax' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, MoveSpeed) == 0x00000C, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, MoveDelayTimeCorrectionValue) == 0x000010, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::MoveDelayTimeCorrectionValue' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, WaitBoundAnimationTime) == 0x000014, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::WaitBoundAnimationTime' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, GotoFillUnitsPhaseWaitTime) == 0x000018, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::GotoFillUnitsPhaseWaitTime' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, StyleParam) == 0x000020, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::StyleParam' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, StyleParamAdditionalInvocation) == 0x000030, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::StyleParamAdditionalInvocation' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, UseSpecialMove) == 0x000040, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::UseSpecialMove' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, BoundParticle) == 0x000048, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::BoundParticle' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, DistanceWithBoundPointWhenSpawnBoundParticle) == 0x000050, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::DistanceWithBoundPointWhenSpawnBoundParticle' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleCharacterBonusBoundParam, ReservationLocation) == 0x000054, "Member 'FTresWinniePuzzleCharacterBonusBoundParam::ReservationLocation' has a wrong offset!");

// ScriptStruct TresGame.TresWeightedShuffleBag
// 0x12044 (0x12044 - 0x0000)
struct alignas(0x12044) FTresWeightedShuffleBag final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWeightedShuffleBag) == 0x012044, "Wrong alignment on FTresWeightedShuffleBag");
static_assert(sizeof(FTresWeightedShuffleBag) == 0x012044, "Wrong size on FTresWeightedShuffleBag");

// ScriptStruct TresGame.TresWinnieVoiceDataTable
// 0x17F570 (0x115925F0 - 0x11413080)
struct alignas(0x115925F0) FTresWinnieVoiceDataTable final : public FTableRowBase
{
public:
	EWinniePuzzleVoice                            VoiceType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWinniePuzzleVoicePriority                    Priority;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnablePlayCounter;                                 // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayCounterRandomValueMin;                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCounterRandomValueMax;                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinnieVoiceDataTable) == 0x115925F0, "Wrong alignment on FTresWinnieVoiceDataTable");
static_assert(sizeof(FTresWinnieVoiceDataTable) == 0x115925F0, "Wrong size on FTresWinnieVoiceDataTable");
static_assert(offsetof(FTresWinnieVoiceDataTable, VoiceType) == 0x000008, "Member 'FTresWinnieVoiceDataTable::VoiceType' has a wrong offset!");
static_assert(offsetof(FTresWinnieVoiceDataTable, Priority) == 0x000009, "Member 'FTresWinnieVoiceDataTable::Priority' has a wrong offset!");
static_assert(offsetof(FTresWinnieVoiceDataTable, EnablePlayCounter) == 0x00000A, "Member 'FTresWinnieVoiceDataTable::EnablePlayCounter' has a wrong offset!");
static_assert(offsetof(FTresWinnieVoiceDataTable, PlayCounterRandomValueMin) == 0x00000C, "Member 'FTresWinnieVoiceDataTable::PlayCounterRandomValueMin' has a wrong offset!");
static_assert(offsetof(FTresWinnieVoiceDataTable, PlayCounterRandomValueMax) == 0x000010, "Member 'FTresWinnieVoiceDataTable::PlayCounterRandomValueMax' has a wrong offset!");

// ScriptStruct TresGame.TresWinnieSoundEffectDataTable
// 0x0000 (0x11413080 - 0x11413080)
struct FTresWinnieSoundEffectDataTable final : public FTableRowBase
{
public:
	EWinniePuzzleSoundEffect                      SoundEffectType;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             SoundEffect;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinnieSoundEffectDataTable) == 0x11413080, "Wrong alignment on FTresWinnieSoundEffectDataTable");
static_assert(sizeof(FTresWinnieSoundEffectDataTable) == 0x11413080, "Wrong size on FTresWinnieSoundEffectDataTable");
static_assert(offsetof(FTresWinnieSoundEffectDataTable, SoundEffectType) == 0x000008, "Member 'FTresWinnieSoundEffectDataTable::SoundEffectType' has a wrong offset!");
static_assert(offsetof(FTresWinnieSoundEffectDataTable, SoundEffect) == 0x000010, "Member 'FTresWinnieSoundEffectDataTable::SoundEffect' has a wrong offset!");

// ScriptStruct TresGame.TresWinnieCharacterAnimationData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresWinnieCharacterAnimationData final : public FTresWinnieAnimationData
{
public:
	EWinnieCharacterAnimationType                 AnimationType;                                     // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinnieCharacterAnimationData) == 0x11413080, "Wrong alignment on FTresWinnieCharacterAnimationData");
static_assert(sizeof(FTresWinnieCharacterAnimationData) == 0x11413080, "Wrong size on FTresWinnieCharacterAnimationData");
static_assert(offsetof(FTresWinnieCharacterAnimationData, AnimationType) == 0x000018, "Member 'FTresWinnieCharacterAnimationData::AnimationType' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleChallengeModeAutoIncreaseSpeedCoeffParam
// 0x11593330 (0x11593330 - 0x0000)
struct alignas(0x11593330) FTresWinniePuzzleChallengeModeAutoIncreaseSpeedCoeffParam final
{
public:
	float                                         RemainingTime;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseSpeedCoeff;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleChallengeModeAutoIncreaseSpeedCoeffParam) == 0x11593330, "Wrong alignment on FTresWinniePuzzleChallengeModeAutoIncreaseSpeedCoeffParam");
static_assert(sizeof(FTresWinniePuzzleChallengeModeAutoIncreaseSpeedCoeffParam) == 0x11593330, "Wrong size on FTresWinniePuzzleChallengeModeAutoIncreaseSpeedCoeffParam");
static_assert(offsetof(FTresWinniePuzzleChallengeModeAutoIncreaseSpeedCoeffParam, RemainingTime) == 0x000000, "Member 'FTresWinniePuzzleChallengeModeAutoIncreaseSpeedCoeffParam::RemainingTime' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleChallengeModeAutoIncreaseSpeedCoeffParam, DecreaseSpeedCoeff) == 0x000004, "Member 'FTresWinniePuzzleChallengeModeAutoIncreaseSpeedCoeffParam::DecreaseSpeedCoeff' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleBucketUnitPlacingParam
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FTresWinniePuzzleBucketUnitPlacingParam final
{
public:
	struct FVector2D                              LocationOffsetXY;                                  // 0x0000(0x112E95F0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0008(0x112E9AF0)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0014(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleBucketUnitPlacingParam) == 0x112E9AF0, "Wrong alignment on FTresWinniePuzzleBucketUnitPlacingParam");
static_assert(sizeof(FTresWinniePuzzleBucketUnitPlacingParam) == 0x112E9AF0, "Wrong size on FTresWinniePuzzleBucketUnitPlacingParam");
static_assert(offsetof(FTresWinniePuzzleBucketUnitPlacingParam, LocationOffsetXY) == 0x000000, "Member 'FTresWinniePuzzleBucketUnitPlacingParam::LocationOffsetXY' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBucketUnitPlacingParam, Rotation) == 0x000008, "Member 'FTresWinniePuzzleBucketUnitPlacingParam::Rotation' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBucketUnitPlacingParam, Scale) == 0x000014, "Member 'FTresWinniePuzzleBucketUnitPlacingParam::Scale' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleBonusGaugeAlwaysDecreasingParam
// 0x0020 (0x0020 - 0x0000)
struct FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DecreasingBaseSpeed;                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DecreasingSpeedChangeCurve;                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreasingBaseSpeedOnSecond;                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DecreasingSpeedChangeCurveOnSecond;                // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam) == 0x000008, "Wrong alignment on FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam");
static_assert(sizeof(FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam) == 0x000020, "Wrong size on FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam, IsEnable) == 0x000000, "Member 'FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam::IsEnable' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam, DecreasingBaseSpeed) == 0x000004, "Member 'FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam::DecreasingBaseSpeed' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam, DecreasingSpeedChangeCurve) == 0x000008, "Member 'FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam::DecreasingSpeedChangeCurve' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam, DecreasingBaseSpeedOnSecond) == 0x000010, "Member 'FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam::DecreasingBaseSpeedOnSecond' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam, DecreasingSpeedChangeCurveOnSecond) == 0x000018, "Member 'FTresWinniePuzzleBonusGaugeAlwaysDecreasingParam::DecreasingSpeedChangeCurveOnSecond' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleBonusGaugeIncreaseByComboParam
// 0x115945C0 (0x115945C0 - 0x0000)
struct alignas(0x115945C0) FTresWinniePuzzleBonusGaugeIncreaseByComboParam final
{
public:
	int32                                         ComboValue;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseValue;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleBonusGaugeIncreaseByComboParam) == 0x115945C0, "Wrong alignment on FTresWinniePuzzleBonusGaugeIncreaseByComboParam");
static_assert(sizeof(FTresWinniePuzzleBonusGaugeIncreaseByComboParam) == 0x115945C0, "Wrong size on FTresWinniePuzzleBonusGaugeIncreaseByComboParam");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeIncreaseByComboParam, ComboValue) == 0x000000, "Member 'FTresWinniePuzzleBonusGaugeIncreaseByComboParam::ComboValue' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeIncreaseByComboParam, IncreaseValue) == 0x000004, "Member 'FTresWinniePuzzleBonusGaugeIncreaseByComboParam::IncreaseValue' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam
// 0x115942B0 (0x115942B0 - 0x0000)
struct alignas(0x115942B0) FTresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam final
{
public:
	int32                                         InvolvedUnitsNum;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseValue;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam) == 0x115942B0, "Wrong alignment on FTresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam");
static_assert(sizeof(FTresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam) == 0x115942B0, "Wrong size on FTresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam, InvolvedUnitsNum) == 0x000000, "Member 'FTresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam::InvolvedUnitsNum' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam, IncreaseValue) == 0x000004, "Member 'FTresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam::IncreaseValue' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleComboBonusGaugeIncreaseParam
// 0x0038 (0x0038 - 0x0000)
struct FTresWinniePuzzleComboBonusGaugeIncreaseParam final
{
public:
	TArray<struct FTresWinniePuzzleBonusGaugeIncreaseByComboParam> IncreaseByComboParam;                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresWinniePuzzleBonusGaugeIncreaseByInvolvedUnitsNumParam> IncreaseByInvolvedUnitsNumParam;                   // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTresWinniePuzzleBonusGaugeIncreaseRateParam> IncreaseRateParam;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          EnableIncreaseRateWhenGetCombo2OrMore;             // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleComboBonusGaugeIncreaseParam) == 0x000008, "Wrong alignment on FTresWinniePuzzleComboBonusGaugeIncreaseParam");
static_assert(sizeof(FTresWinniePuzzleComboBonusGaugeIncreaseParam) == 0x000038, "Wrong size on FTresWinniePuzzleComboBonusGaugeIncreaseParam");
static_assert(offsetof(FTresWinniePuzzleComboBonusGaugeIncreaseParam, IncreaseByComboParam) == 0x000000, "Member 'FTresWinniePuzzleComboBonusGaugeIncreaseParam::IncreaseByComboParam' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleComboBonusGaugeIncreaseParam, IncreaseByInvolvedUnitsNumParam) == 0x000010, "Member 'FTresWinniePuzzleComboBonusGaugeIncreaseParam::IncreaseByInvolvedUnitsNumParam' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleComboBonusGaugeIncreaseParam, IncreaseRateParam) == 0x000020, "Member 'FTresWinniePuzzleComboBonusGaugeIncreaseParam::IncreaseRateParam' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleComboBonusGaugeIncreaseParam, EnableIncreaseRateWhenGetCombo2OrMore) == 0x000030, "Member 'FTresWinniePuzzleComboBonusGaugeIncreaseParam::EnableIncreaseRateWhenGetCombo2OrMore' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleHoneypotGaugeIncreaseValueParam
// 0x11594F70 (0x11594F70 - 0x0000)
struct alignas(0x11594F70) FTresWinniePuzzleHoneypotGaugeIncreaseValueParam final
{
public:
	int32                                         HoneypotComboNum;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IncreaseValue;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleHoneypotGaugeIncreaseValueParam) == 0x11594F70, "Wrong alignment on FTresWinniePuzzleHoneypotGaugeIncreaseValueParam");
static_assert(sizeof(FTresWinniePuzzleHoneypotGaugeIncreaseValueParam) == 0x11594F70, "Wrong size on FTresWinniePuzzleHoneypotGaugeIncreaseValueParam");
static_assert(offsetof(FTresWinniePuzzleHoneypotGaugeIncreaseValueParam, HoneypotComboNum) == 0x000000, "Member 'FTresWinniePuzzleHoneypotGaugeIncreaseValueParam::HoneypotComboNum' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleHoneypotGaugeIncreaseValueParam, IncreaseValue) == 0x000004, "Member 'FTresWinniePuzzleHoneypotGaugeIncreaseValueParam::IncreaseValue' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleChallengeModeHoneypotGaugeParam
// 0x0014 (0x0014 - 0x0000)
struct FTresWinniePuzzleChallengeModeHoneypotGaugeParam final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeValueIncValueRate;                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GaugeValueDecSpeed;                                // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnMaxNum;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnInSameRow;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleChallengeModeHoneypotGaugeParam) == 0x000004, "Wrong alignment on FTresWinniePuzzleChallengeModeHoneypotGaugeParam");
static_assert(sizeof(FTresWinniePuzzleChallengeModeHoneypotGaugeParam) == 0x000014, "Wrong size on FTresWinniePuzzleChallengeModeHoneypotGaugeParam");
static_assert(offsetof(FTresWinniePuzzleChallengeModeHoneypotGaugeParam, Level) == 0x000000, "Member 'FTresWinniePuzzleChallengeModeHoneypotGaugeParam::Level' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleChallengeModeHoneypotGaugeParam, GaugeValueIncValueRate) == 0x000004, "Member 'FTresWinniePuzzleChallengeModeHoneypotGaugeParam::GaugeValueIncValueRate' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleChallengeModeHoneypotGaugeParam, GaugeValueDecSpeed) == 0x000008, "Member 'FTresWinniePuzzleChallengeModeHoneypotGaugeParam::GaugeValueDecSpeed' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleChallengeModeHoneypotGaugeParam, SpawnMaxNum) == 0x00000C, "Member 'FTresWinniePuzzleChallengeModeHoneypotGaugeParam::SpawnMaxNum' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleChallengeModeHoneypotGaugeParam, SpawnInSameRow) == 0x000010, "Member 'FTresWinniePuzzleChallengeModeHoneypotGaugeParam::SpawnInSameRow' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleHoneypotGaugeParam
// 0x0030 (0x0030 - 0x0000)
struct FTresWinniePuzzleHoneypotGaugeParam final
{
public:
	int32                                         GaugeValueMax;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTresWinniePuzzleHoneypotGaugeIncreaseValueParam> GaugeIncreaseValueParam;                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         GaugeIncreaseSpeed;                                // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeIncreaseEffectLifetime;                       // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTresWinniePuzzleChallengeModeHoneypotGaugeParam> ChallengeModeParam;                                // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleHoneypotGaugeParam) == 0x000008, "Wrong alignment on FTresWinniePuzzleHoneypotGaugeParam");
static_assert(sizeof(FTresWinniePuzzleHoneypotGaugeParam) == 0x000030, "Wrong size on FTresWinniePuzzleHoneypotGaugeParam");
static_assert(offsetof(FTresWinniePuzzleHoneypotGaugeParam, GaugeValueMax) == 0x000000, "Member 'FTresWinniePuzzleHoneypotGaugeParam::GaugeValueMax' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleHoneypotGaugeParam, GaugeIncreaseValueParam) == 0x000008, "Member 'FTresWinniePuzzleHoneypotGaugeParam::GaugeIncreaseValueParam' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleHoneypotGaugeParam, GaugeIncreaseSpeed) == 0x000018, "Member 'FTresWinniePuzzleHoneypotGaugeParam::GaugeIncreaseSpeed' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleHoneypotGaugeParam, GaugeIncreaseEffectLifetime) == 0x00001C, "Member 'FTresWinniePuzzleHoneypotGaugeParam::GaugeIncreaseEffectLifetime' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleHoneypotGaugeParam, ChallengeModeParam) == 0x000020, "Member 'FTresWinniePuzzleHoneypotGaugeParam::ChallengeModeParam' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleHoneypotFillRowsParam
// 0x0010 (0x0010 - 0x0000)
struct FTresWinniePuzzleHoneypotFillRowsParam final
{
public:
	TArray<int32>                                 RowIdxes;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleHoneypotFillRowsParam) == 0x000008, "Wrong alignment on FTresWinniePuzzleHoneypotFillRowsParam");
static_assert(sizeof(FTresWinniePuzzleHoneypotFillRowsParam) == 0x000010, "Wrong size on FTresWinniePuzzleHoneypotFillRowsParam");
static_assert(offsetof(FTresWinniePuzzleHoneypotFillRowsParam, RowIdxes) == 0x000000, "Member 'FTresWinniePuzzleHoneypotFillRowsParam::RowIdxes' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleHoneypotFillProbabilityParam
// 0x115953B0 (0x115953B0 - 0x0000)
struct alignas(0x115953B0) FTresWinniePuzzleHoneypotFillProbabilityParam final
{
public:
	int32                                         DiffNumBetweenMaxAndExist;                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnNewOneProbability;                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleHoneypotFillProbabilityParam) == 0x115953B0, "Wrong alignment on FTresWinniePuzzleHoneypotFillProbabilityParam");
static_assert(sizeof(FTresWinniePuzzleHoneypotFillProbabilityParam) == 0x115953B0, "Wrong size on FTresWinniePuzzleHoneypotFillProbabilityParam");
static_assert(offsetof(FTresWinniePuzzleHoneypotFillProbabilityParam, DiffNumBetweenMaxAndExist) == 0x000000, "Member 'FTresWinniePuzzleHoneypotFillProbabilityParam::DiffNumBetweenMaxAndExist' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleHoneypotFillProbabilityParam, SpawnNewOneProbability) == 0x000004, "Member 'FTresWinniePuzzleHoneypotFillProbabilityParam::SpawnNewOneProbability' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleGhostUnitStraightMoveJudgementRowRange
// 0x11595580 (0x11595580 - 0x0000)
struct alignas(0x11595580) FTresWinniePuzzleGhostUnitStraightMoveJudgementRowRange final
{
public:
	int32                                         StartRow;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndRow;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleGhostUnitStraightMoveJudgementRowRange) == 0x11595580, "Wrong alignment on FTresWinniePuzzleGhostUnitStraightMoveJudgementRowRange");
static_assert(sizeof(FTresWinniePuzzleGhostUnitStraightMoveJudgementRowRange) == 0x11595580, "Wrong size on FTresWinniePuzzleGhostUnitStraightMoveJudgementRowRange");
static_assert(offsetof(FTresWinniePuzzleGhostUnitStraightMoveJudgementRowRange, StartRow) == 0x000000, "Member 'FTresWinniePuzzleGhostUnitStraightMoveJudgementRowRange::StartRow' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleGhostUnitStraightMoveJudgementRowRange, EndRow) == 0x000004, "Member 'FTresWinniePuzzleGhostUnitStraightMoveJudgementRowRange::EndRow' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleGhostUnitParam
// 0x12069 (0x12069 - 0x0000)
struct alignas(0x12069) FTresWinniePuzzleGhostUnitParam final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleGhostUnitParam) == 0x012069, "Wrong alignment on FTresWinniePuzzleGhostUnitParam");
static_assert(sizeof(FTresWinniePuzzleGhostUnitParam) == 0x012069, "Wrong size on FTresWinniePuzzleGhostUnitParam");

// ScriptStruct TresGame.TresWinniePuzzleTotalScoreEvalution
// 0x0018 (0x0018 - 0x0000)
struct FTresWinniePuzzleTotalScoreEvalution final
{
public:
	int32                                         TotalScore;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWinniePuzzleTotalScoreEvalution              Evalution;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 GotItemNumList;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleTotalScoreEvalution) == 0x000008, "Wrong alignment on FTresWinniePuzzleTotalScoreEvalution");
static_assert(sizeof(FTresWinniePuzzleTotalScoreEvalution) == 0x000018, "Wrong size on FTresWinniePuzzleTotalScoreEvalution");
static_assert(offsetof(FTresWinniePuzzleTotalScoreEvalution, TotalScore) == 0x000000, "Member 'FTresWinniePuzzleTotalScoreEvalution::TotalScore' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleTotalScoreEvalution, Evalution) == 0x000004, "Member 'FTresWinniePuzzleTotalScoreEvalution::Evalution' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleTotalScoreEvalution, GotItemNumList) == 0x000008, "Member 'FTresWinniePuzzleTotalScoreEvalution::GotItemNumList' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleChallengeModeLimitTimeIncreaseParam
// 0x11595E30 (0x11595E30 - 0x0000)
struct alignas(0x11595E30) FTresWinniePuzzleChallengeModeLimitTimeIncreaseParam final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseTime;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleChallengeModeLimitTimeIncreaseParam) == 0x11595E30, "Wrong alignment on FTresWinniePuzzleChallengeModeLimitTimeIncreaseParam");
static_assert(sizeof(FTresWinniePuzzleChallengeModeLimitTimeIncreaseParam) == 0x11595E30, "Wrong size on FTresWinniePuzzleChallengeModeLimitTimeIncreaseParam");
static_assert(offsetof(FTresWinniePuzzleChallengeModeLimitTimeIncreaseParam, Level) == 0x000000, "Member 'FTresWinniePuzzleChallengeModeLimitTimeIncreaseParam::Level' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleChallengeModeLimitTimeIncreaseParam, IncreaseTime) == 0x000004, "Member 'FTresWinniePuzzleChallengeModeLimitTimeIncreaseParam::IncreaseTime' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleVoiceParam
// 0x1206D (0x1206D - 0x0000)
struct alignas(0x1206D) FTresWinniePuzzleVoiceParam final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleVoiceParam) == 0x01206D, "Wrong alignment on FTresWinniePuzzleVoiceParam");
static_assert(sizeof(FTresWinniePuzzleVoiceParam) == 0x01206D, "Wrong size on FTresWinniePuzzleVoiceParam");

// ScriptStruct TresGame.TresWinniePuzzleSpecialUnitParam
// 0x0018 (0x0018 - 0x0000)
struct FTresWinniePuzzleSpecialUnitParam final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNum;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnColumnsOffsetMax;                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Particle;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleSpecialUnitParam) == 0x000008, "Wrong alignment on FTresWinniePuzzleSpecialUnitParam");
static_assert(sizeof(FTresWinniePuzzleSpecialUnitParam) == 0x000018, "Wrong size on FTresWinniePuzzleSpecialUnitParam");
static_assert(offsetof(FTresWinniePuzzleSpecialUnitParam, Enable) == 0x000000, "Member 'FTresWinniePuzzleSpecialUnitParam::Enable' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleSpecialUnitParam, MaxNum) == 0x000004, "Member 'FTresWinniePuzzleSpecialUnitParam::MaxNum' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleSpecialUnitParam, SpawnColumnsOffsetMax) == 0x000008, "Member 'FTresWinniePuzzleSpecialUnitParam::SpawnColumnsOffsetMax' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleSpecialUnitParam, Particle) == 0x000010, "Member 'FTresWinniePuzzleSpecialUnitParam::Particle' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleSpecialMoveParam
// 0x0028 (0x0028 - 0x0000)
struct FTresWinniePuzzleSpecialMoveParam final
{
public:
	bool                                          UseSpecialMove;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InvokeClusterMinUnitsNum;                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         P1DistanceFromStartMin;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         P1DistanceFromStartMax;                            // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAngleRangeStartValue;                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAngleRangeEndValue;                            // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        MoveLocusParticle;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWinniePuzzleSpecialMoveParam) == 0x000008, "Wrong alignment on FTresWinniePuzzleSpecialMoveParam");
static_assert(sizeof(FTresWinniePuzzleSpecialMoveParam) == 0x000028, "Wrong size on FTresWinniePuzzleSpecialMoveParam");
static_assert(offsetof(FTresWinniePuzzleSpecialMoveParam, UseSpecialMove) == 0x000000, "Member 'FTresWinniePuzzleSpecialMoveParam::UseSpecialMove' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleSpecialMoveParam, InvokeClusterMinUnitsNum) == 0x000004, "Member 'FTresWinniePuzzleSpecialMoveParam::InvokeClusterMinUnitsNum' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleSpecialMoveParam, P1DistanceFromStartMin) == 0x000008, "Member 'FTresWinniePuzzleSpecialMoveParam::P1DistanceFromStartMin' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleSpecialMoveParam, P1DistanceFromStartMax) == 0x00000C, "Member 'FTresWinniePuzzleSpecialMoveParam::P1DistanceFromStartMax' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleSpecialMoveParam, MoveAngleRangeStartValue) == 0x000010, "Member 'FTresWinniePuzzleSpecialMoveParam::MoveAngleRangeStartValue' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleSpecialMoveParam, MoveAngleRangeEndValue) == 0x000014, "Member 'FTresWinniePuzzleSpecialMoveParam::MoveAngleRangeEndValue' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleSpecialMoveParam, MoveSpeed) == 0x000018, "Member 'FTresWinniePuzzleSpecialMoveParam::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FTresWinniePuzzleSpecialMoveParam, MoveLocusParticle) == 0x000020, "Member 'FTresWinniePuzzleSpecialMoveParam::MoveLocusParticle' has a wrong offset!");

// ScriptStruct TresGame.TresWinniePuzzleUnitCoord
// 0x12076 (0x12076 - 0x0000)
struct alignas(0x12076) FTresWinniePuzzleUnitCoord final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleUnitCoord) == 0x012076, "Wrong alignment on FTresWinniePuzzleUnitCoord");
static_assert(sizeof(FTresWinniePuzzleUnitCoord) == 0x012076, "Wrong size on FTresWinniePuzzleUnitCoord");

// ScriptStruct TresGame.TresWinniePuzzlePlayerRollParam
// 0x5411 (0x5411 - 0x0000)
struct alignas(0x5411) FTresWinniePuzzlePlayerRollParam final
{
public:
	uint8                                         Pad_0[0x34];                                       // 0x0000(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzlePlayerRollParam) == 0x005411, "Wrong alignment on FTresWinniePuzzlePlayerRollParam");
static_assert(sizeof(FTresWinniePuzzlePlayerRollParam) == 0x005411, "Wrong size on FTresWinniePuzzlePlayerRollParam");

// ScriptStruct TresGame.TresWinniePuzzleScalingParam
// 0x5413 (0x5413 - 0x0000)
struct alignas(0x5413) FTresWinniePuzzleScalingParam final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleScalingParam) == 0x005413, "Wrong alignment on FTresWinniePuzzleScalingParam");
static_assert(sizeof(FTresWinniePuzzleScalingParam) == 0x005413, "Wrong size on FTresWinniePuzzleScalingParam");

// ScriptStruct TresGame.TresWinniePuzzleQueueableCountParam
// 0x5415 (0x5415 - 0x0000)
struct alignas(0x5415) FTresWinniePuzzleQueueableCountParam final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleQueueableCountParam) == 0x005415, "Wrong alignment on FTresWinniePuzzleQueueableCountParam");
static_assert(sizeof(FTresWinniePuzzleQueueableCountParam) == 0x005415, "Wrong size on FTresWinniePuzzleQueueableCountParam");

// ScriptStruct TresGame.TresWinniePuzzleCountInfo
// 0x5417 (0x5417 - 0x0000)
struct alignas(0x5417) FTresWinniePuzzleCountInfo final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleCountInfo) == 0x005417, "Wrong alignment on FTresWinniePuzzleCountInfo");
static_assert(sizeof(FTresWinniePuzzleCountInfo) == 0x005417, "Wrong size on FTresWinniePuzzleCountInfo");

// ScriptStruct TresGame.TresWinniePuzzleLinearMultipleMoveParam
// 0x5419 (0x5419 - 0x0000)
struct alignas(0x5419) FTresWinniePuzzleLinearMultipleMoveParam final
{
public:
	uint8                                         Pad_0[0x130];                                      // 0x0000(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleLinearMultipleMoveParam) == 0x005419, "Wrong alignment on FTresWinniePuzzleLinearMultipleMoveParam");
static_assert(sizeof(FTresWinniePuzzleLinearMultipleMoveParam) == 0x005419, "Wrong size on FTresWinniePuzzleLinearMultipleMoveParam");

// ScriptStruct TresGame.TresWinniePuzzleCurvedMoveParam
// 0x541D (0x541D - 0x0000)
struct alignas(0x541D) FTresWinniePuzzleCurvedMoveParam final
{
public:
	uint8                                         Pad_0[0x140];                                      // 0x0000(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTresWinniePuzzleCurvedMoveParam) == 0x00541D, "Wrong alignment on FTresWinniePuzzleCurvedMoveParam");
static_assert(sizeof(FTresWinniePuzzleCurvedMoveParam) == 0x00541D, "Wrong size on FTresWinniePuzzleCurvedMoveParam");

// ScriptStruct TresGame.TresWorldMapObjData
// 0x0000 (0x11413080 - 0x11413080)
struct FTresWorldMapObjData final : public FTableRowBase
{
public:
	TSubclassOf<class ATresWorldMapObject>        M_MapObj;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTresWorldMapObjData) == 0x11413080, "Wrong alignment on FTresWorldMapObjData");
static_assert(sizeof(FTresWorldMapObjData) == 0x11413080, "Wrong size on FTresWorldMapObjData");
static_assert(offsetof(FTresWorldMapObjData, M_MapObj) == 0x000008, "Member 'FTresWorldMapObjData::M_MapObj' has a wrong offset!");

}

