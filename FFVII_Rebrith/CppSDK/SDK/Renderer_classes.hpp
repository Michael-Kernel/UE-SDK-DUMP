#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Renderer

#include "Basic.hpp"

#include "Renderer_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class Renderer.SQEX_BreakSimulationActor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEX_BreakSimulationActor final : public AActor
{
public:
	uint8                                         Pad_3E0[0x2C];                                     // 0x03E0(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RangeMin;                                          // 0x040C(0x112E95F0)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RangeMax;                                          // 0x0414(0x112E95F0)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionX;                                       // 0x041C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionY;                                       // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ASQEX_BreakSimulationActor* GetBreakSimulationActor(class UObject* WorldContextObject);

	void ClearBreakPatterns();
	void PutBreakAnimPattern(const struct FVector& WorldPosition, const struct FVector2D& Size, float Time, class UMaterialInterface* Material, ESQEX_BreakBlendMode BlendMode);
	void PutBreakPattern(const struct FVector& WorldPosition, const struct FVector2D& Size, class UMaterialInterface* Material, ESQEX_BreakBlendMode BlendMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BreakSimulationActor">();
	}
	static class ASQEX_BreakSimulationActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_BreakSimulationActor>();
	}
};
static_assert(alignof(ASQEX_BreakSimulationActor) == 0x1EF72E00, "Wrong alignment on ASQEX_BreakSimulationActor");
static_assert(sizeof(ASQEX_BreakSimulationActor) == 0x1EF72E00, "Wrong size on ASQEX_BreakSimulationActor");
static_assert(offsetof(ASQEX_BreakSimulationActor, RangeMin) == 0x00040C, "Member 'ASQEX_BreakSimulationActor::RangeMin' has a wrong offset!");
static_assert(offsetof(ASQEX_BreakSimulationActor, RangeMax) == 0x000414, "Member 'ASQEX_BreakSimulationActor::RangeMax' has a wrong offset!");
static_assert(offsetof(ASQEX_BreakSimulationActor, ResolutionX) == 0x00041C, "Member 'ASQEX_BreakSimulationActor::ResolutionX' has a wrong offset!");
static_assert(offsetof(ASQEX_BreakSimulationActor, ResolutionY) == 0x000420, "Member 'ASQEX_BreakSimulationActor::ResolutionY' has a wrong offset!");

// Class Renderer.SQEX_MaelstromActor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEX_MaelstromActor final : public AStaticMeshActor
{
public:
	float                                         MaxDepth;                                          // 0x03F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Iris;                                              // 0x03F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x03F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x03FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_MaelstromActor">();
	}
	static class ASQEX_MaelstromActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_MaelstromActor>();
	}
};
static_assert(alignof(ASQEX_MaelstromActor) == 0x1EF72E00, "Wrong alignment on ASQEX_MaelstromActor");
static_assert(sizeof(ASQEX_MaelstromActor) == 0x1EF72E00, "Wrong size on ASQEX_MaelstromActor");
static_assert(offsetof(ASQEX_MaelstromActor, MaxDepth) == 0x0003F0, "Member 'ASQEX_MaelstromActor::MaxDepth' has a wrong offset!");
static_assert(offsetof(ASQEX_MaelstromActor, Iris) == 0x0003F4, "Member 'ASQEX_MaelstromActor::Iris' has a wrong offset!");
static_assert(offsetof(ASQEX_MaelstromActor, SizeX) == 0x0003F8, "Member 'ASQEX_MaelstromActor::SizeX' has a wrong offset!");
static_assert(offsetof(ASQEX_MaelstromActor, SizeY) == 0x0003FC, "Member 'ASQEX_MaelstromActor::SizeY' has a wrong offset!");

// Class Renderer.SQEX_OceanDistanceFieldVolume
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEX_OceanDistanceFieldVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_OceanDistanceFieldVolume">();
	}
	static class ASQEX_OceanDistanceFieldVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_OceanDistanceFieldVolume>();
	}
};
static_assert(alignof(ASQEX_OceanDistanceFieldVolume) == 0x1EF72E00, "Wrong alignment on ASQEX_OceanDistanceFieldVolume");
static_assert(sizeof(ASQEX_OceanDistanceFieldVolume) == 0x1EF72E00, "Wrong size on ASQEX_OceanDistanceFieldVolume");

// Class Renderer.SQEX_OceanIslandTriggerBox
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEX_OceanIslandTriggerBox final : public ATriggerBox
{
public:
	class UTexture2D*                             HeightMap;                                         // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Position;                                          // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            DebugMesh;                                         // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              DebugMaterial;                                     // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugVisible;                                      // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_411[0xF];                                      // 0x0411(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_OceanIslandTriggerBox">();
	}
	static class ASQEX_OceanIslandTriggerBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_OceanIslandTriggerBox>();
	}
};
static_assert(alignof(ASQEX_OceanIslandTriggerBox) == 0x1EF72E00, "Wrong alignment on ASQEX_OceanIslandTriggerBox");
static_assert(sizeof(ASQEX_OceanIslandTriggerBox) == 0x1EF72E00, "Wrong size on ASQEX_OceanIslandTriggerBox");
static_assert(offsetof(ASQEX_OceanIslandTriggerBox, HeightMap) == 0x0003F0, "Member 'ASQEX_OceanIslandTriggerBox::HeightMap' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanIslandTriggerBox, Position) == 0x0003F8, "Member 'ASQEX_OceanIslandTriggerBox::Position' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanIslandTriggerBox, Contrast) == 0x0003FC, "Member 'ASQEX_OceanIslandTriggerBox::Contrast' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanIslandTriggerBox, DebugMesh) == 0x000400, "Member 'ASQEX_OceanIslandTriggerBox::DebugMesh' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanIslandTriggerBox, DebugMaterial) == 0x000408, "Member 'ASQEX_OceanIslandTriggerBox::DebugMaterial' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanIslandTriggerBox, DebugVisible) == 0x000410, "Member 'ASQEX_OceanIslandTriggerBox::DebugVisible' has a wrong offset!");

// Class Renderer.OceanIslandTriggerBoxCollisionComponent
// 0x0000 (0x112E9AF0 - 0x112E9AF0)
class UOceanIslandTriggerBoxCollisionComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanIslandTriggerBoxCollisionComponent">();
	}
	static class UOceanIslandTriggerBoxCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanIslandTriggerBoxCollisionComponent>();
	}
};
static_assert(alignof(UOceanIslandTriggerBoxCollisionComponent) == 0x112E9AF0, "Wrong alignment on UOceanIslandTriggerBoxCollisionComponent");
static_assert(sizeof(UOceanIslandTriggerBoxCollisionComponent) == 0x112E9AF0, "Wrong size on UOceanIslandTriggerBoxCollisionComponent");

// Class Renderer.SQEX_OceanShoreActor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEX_OceanShoreActor final : public AActor
{
public:
	uint8                                         Pad_3E0[0x8];                                      // 0x03E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResolutionX;                                       // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionY;                                       // 0x03EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints;                                         // 0x03F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAmplitude;                                      // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAmplitude;                                      // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDiameter;                                       // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDiameter;                                       // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLifeTime;                                       // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLifetime;                                       // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const bool Initialize();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_OceanShoreActor">();
	}
	static class ASQEX_OceanShoreActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_OceanShoreActor>();
	}
};
static_assert(alignof(ASQEX_OceanShoreActor) == 0x1EF72E00, "Wrong alignment on ASQEX_OceanShoreActor");
static_assert(sizeof(ASQEX_OceanShoreActor) == 0x1EF72E00, "Wrong size on ASQEX_OceanShoreActor");
static_assert(offsetof(ASQEX_OceanShoreActor, ResolutionX) == 0x0003E8, "Member 'ASQEX_OceanShoreActor::ResolutionX' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanShoreActor, ResolutionY) == 0x0003EC, "Member 'ASQEX_OceanShoreActor::ResolutionY' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanShoreActor, NumPoints) == 0x0003F0, "Member 'ASQEX_OceanShoreActor::NumPoints' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanShoreActor, MinAmplitude) == 0x0003F4, "Member 'ASQEX_OceanShoreActor::MinAmplitude' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanShoreActor, MaxAmplitude) == 0x0003F8, "Member 'ASQEX_OceanShoreActor::MaxAmplitude' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanShoreActor, MinDiameter) == 0x0003FC, "Member 'ASQEX_OceanShoreActor::MinDiameter' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanShoreActor, MaxDiameter) == 0x000400, "Member 'ASQEX_OceanShoreActor::MaxDiameter' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanShoreActor, MinLifeTime) == 0x000404, "Member 'ASQEX_OceanShoreActor::MinLifeTime' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanShoreActor, MaxLifetime) == 0x000408, "Member 'ASQEX_OceanShoreActor::MaxLifetime' has a wrong offset!");

// Class Renderer.SQEX_OceanSimulatorActor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEX_OceanSimulatorActor final : public AActor
{
public:
	uint8                                         Pad_3E0[0x8];                                      // 0x03E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResolutionX;                                       // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionY;                                       // 0x03EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMips;                                           // 0x03F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldMinX;                                         // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldMinY;                                         // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldMaxX;                                         // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldMaxY;                                         // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wavelength;                                        // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amplitude;                                         // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Steepness;                                         // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSpeed;                                         // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindAngle;                                         // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallWaveSuppression;                              // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OppositeWaveSuppression;                           // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OmegaPeriod;                                       // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDilationFactor;                                // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveGen;                                           // 0x0428(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulationUpdate;                                  // 0x042C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42D[0x3];                                      // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentSimulationTime;                             // 0x0430(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentDeltaTime;                                  // 0x0434(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FreezeSimulationTime;                              // 0x0438(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x3];                                      // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GetDisplacementCallCount;                          // 0x043C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CPUReadBack;                                       // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOceanSimulationSamplerFilter                 TextureFilter;                                     // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_442[0x2];                                      // 0x0442(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeightMapResolutionX;                              // 0x0444(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeightMapResolutionY;                              // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             HeightMap;                                         // 0x0450(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Position;                                          // 0x0458(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x045C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              IslandRangeMin;                                    // 0x0460(0x112E95F0)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              IslandRangeMax;                                    // 0x0468(0x112E95F0)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOceanDistanceField>            DistanceFields;                                    // 0x0470(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	struct FVector4                               OMP_NoiseOffset;                                   // 0x0480(0x112E9300)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_HeightMap_Enable;                              // 0x0490(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_df_rimpower;                                   // 0x0494(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_df_height;                                     // 0x0498(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_SandOffset;                                    // 0x049C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_FadeDistance;                                  // 0x04A0(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_FadeContrast;                                  // 0x04A4(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_OceanTilingMid;                                // 0x04A8(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_OceanTilingFar;                                // 0x04AC(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_Tilie;                                         // 0x04B0(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_Tilie1;                                        // 0x04B4(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_Offset_1;                                      // 0x04B8(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_Offset_2;                                      // 0x04BC(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_df_speed;                                      // 0x04C0(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_df_Random_Mask;                                // 0x04C4(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_Noise_Scale;                                   // 0x04C8(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_LargeWaveTiling;                               // 0x04CC(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_mip_1;                                         // 0x04D0(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_mip_2;                                         // 0x04D4(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_Intensity;                                     // 0x04D8(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_WaveIntensity;                                 // 0x04DC(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_WaveDetail;                                    // 0x04E0(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_FadeDistance_2;                                // 0x04E4(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_Normal_Fade;                                   // 0x04E8(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_NormalFadeDistance;                            // 0x04EC(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OMP_NormalFadeContrast;                            // 0x04F0(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             OffshoreWaveAlbedo;                                // 0x04F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OffshoreWaveNormal;                                // 0x0500(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OffshoreWaveNoise;                                 // 0x0508(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmplitudeCoef;                                     // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSpeedCoef;                                     // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OppositeWaveSuppressionCoefMin;                    // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OppositeWaveSuppressionCoefMax;                    // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_520[0x10];                                     // 0x0520(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void GetOceanBaseHeight(const class UObject* WorldContextObject, float* BaseHeight);
	static void GetOceanDisplacement(const struct FVector& WorldPosition, bool* Success, struct FVector* Offset, struct FVector* Normal);
	static void GetOceanMaxAmplitude(const struct FVector& WorldPosition, float* MaxAmplitude);

	const struct FVector2D GetWindDirection() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_OceanSimulatorActor">();
	}
	static class ASQEX_OceanSimulatorActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_OceanSimulatorActor>();
	}
};
static_assert(alignof(ASQEX_OceanSimulatorActor) == 0x1EF72E00, "Wrong alignment on ASQEX_OceanSimulatorActor");
static_assert(sizeof(ASQEX_OceanSimulatorActor) == 0x1EF72E00, "Wrong size on ASQEX_OceanSimulatorActor");
static_assert(offsetof(ASQEX_OceanSimulatorActor, ResolutionX) == 0x0003E8, "Member 'ASQEX_OceanSimulatorActor::ResolutionX' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, ResolutionY) == 0x0003EC, "Member 'ASQEX_OceanSimulatorActor::ResolutionY' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, NumMips) == 0x0003F0, "Member 'ASQEX_OceanSimulatorActor::NumMips' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, WorldMinX) == 0x0003F4, "Member 'ASQEX_OceanSimulatorActor::WorldMinX' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, WorldMinY) == 0x0003F8, "Member 'ASQEX_OceanSimulatorActor::WorldMinY' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, WorldMaxX) == 0x0003FC, "Member 'ASQEX_OceanSimulatorActor::WorldMaxX' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, WorldMaxY) == 0x000400, "Member 'ASQEX_OceanSimulatorActor::WorldMaxY' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, Wavelength) == 0x000404, "Member 'ASQEX_OceanSimulatorActor::Wavelength' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, Amplitude) == 0x000408, "Member 'ASQEX_OceanSimulatorActor::Amplitude' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, Steepness) == 0x00040C, "Member 'ASQEX_OceanSimulatorActor::Steepness' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, WindSpeed) == 0x000410, "Member 'ASQEX_OceanSimulatorActor::WindSpeed' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, WindAngle) == 0x000414, "Member 'ASQEX_OceanSimulatorActor::WindAngle' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, SmallWaveSuppression) == 0x000418, "Member 'ASQEX_OceanSimulatorActor::SmallWaveSuppression' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OppositeWaveSuppression) == 0x00041C, "Member 'ASQEX_OceanSimulatorActor::OppositeWaveSuppression' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OmegaPeriod) == 0x000420, "Member 'ASQEX_OceanSimulatorActor::OmegaPeriod' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, TimeDilationFactor) == 0x000424, "Member 'ASQEX_OceanSimulatorActor::TimeDilationFactor' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, WaveGen) == 0x000428, "Member 'ASQEX_OceanSimulatorActor::WaveGen' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, SimulationUpdate) == 0x00042C, "Member 'ASQEX_OceanSimulatorActor::SimulationUpdate' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, CurrentSimulationTime) == 0x000430, "Member 'ASQEX_OceanSimulatorActor::CurrentSimulationTime' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, CurrentDeltaTime) == 0x000434, "Member 'ASQEX_OceanSimulatorActor::CurrentDeltaTime' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, FreezeSimulationTime) == 0x000438, "Member 'ASQEX_OceanSimulatorActor::FreezeSimulationTime' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, GetDisplacementCallCount) == 0x00043C, "Member 'ASQEX_OceanSimulatorActor::GetDisplacementCallCount' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, CPUReadBack) == 0x000440, "Member 'ASQEX_OceanSimulatorActor::CPUReadBack' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, TextureFilter) == 0x000441, "Member 'ASQEX_OceanSimulatorActor::TextureFilter' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, HeightMapResolutionX) == 0x000444, "Member 'ASQEX_OceanSimulatorActor::HeightMapResolutionX' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, HeightMapResolutionY) == 0x000448, "Member 'ASQEX_OceanSimulatorActor::HeightMapResolutionY' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, HeightMap) == 0x000450, "Member 'ASQEX_OceanSimulatorActor::HeightMap' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, Position) == 0x000458, "Member 'ASQEX_OceanSimulatorActor::Position' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, Contrast) == 0x00045C, "Member 'ASQEX_OceanSimulatorActor::Contrast' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, IslandRangeMin) == 0x000460, "Member 'ASQEX_OceanSimulatorActor::IslandRangeMin' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, IslandRangeMax) == 0x000468, "Member 'ASQEX_OceanSimulatorActor::IslandRangeMax' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, DistanceFields) == 0x000470, "Member 'ASQEX_OceanSimulatorActor::DistanceFields' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_NoiseOffset) == 0x000480, "Member 'ASQEX_OceanSimulatorActor::OMP_NoiseOffset' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_HeightMap_Enable) == 0x000490, "Member 'ASQEX_OceanSimulatorActor::OMP_HeightMap_Enable' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_df_rimpower) == 0x000494, "Member 'ASQEX_OceanSimulatorActor::OMP_df_rimpower' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_df_height) == 0x000498, "Member 'ASQEX_OceanSimulatorActor::OMP_df_height' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_SandOffset) == 0x00049C, "Member 'ASQEX_OceanSimulatorActor::OMP_SandOffset' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_FadeDistance) == 0x0004A0, "Member 'ASQEX_OceanSimulatorActor::OMP_FadeDistance' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_FadeContrast) == 0x0004A4, "Member 'ASQEX_OceanSimulatorActor::OMP_FadeContrast' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_OceanTilingMid) == 0x0004A8, "Member 'ASQEX_OceanSimulatorActor::OMP_OceanTilingMid' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_OceanTilingFar) == 0x0004AC, "Member 'ASQEX_OceanSimulatorActor::OMP_OceanTilingFar' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_Tilie) == 0x0004B0, "Member 'ASQEX_OceanSimulatorActor::OMP_Tilie' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_Tilie1) == 0x0004B4, "Member 'ASQEX_OceanSimulatorActor::OMP_Tilie1' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_Offset_1) == 0x0004B8, "Member 'ASQEX_OceanSimulatorActor::OMP_Offset_1' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_Offset_2) == 0x0004BC, "Member 'ASQEX_OceanSimulatorActor::OMP_Offset_2' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_df_speed) == 0x0004C0, "Member 'ASQEX_OceanSimulatorActor::OMP_df_speed' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_df_Random_Mask) == 0x0004C4, "Member 'ASQEX_OceanSimulatorActor::OMP_df_Random_Mask' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_Noise_Scale) == 0x0004C8, "Member 'ASQEX_OceanSimulatorActor::OMP_Noise_Scale' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_LargeWaveTiling) == 0x0004CC, "Member 'ASQEX_OceanSimulatorActor::OMP_LargeWaveTiling' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_mip_1) == 0x0004D0, "Member 'ASQEX_OceanSimulatorActor::OMP_mip_1' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_mip_2) == 0x0004D4, "Member 'ASQEX_OceanSimulatorActor::OMP_mip_2' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_Intensity) == 0x0004D8, "Member 'ASQEX_OceanSimulatorActor::OMP_Intensity' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_WaveIntensity) == 0x0004DC, "Member 'ASQEX_OceanSimulatorActor::OMP_WaveIntensity' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_WaveDetail) == 0x0004E0, "Member 'ASQEX_OceanSimulatorActor::OMP_WaveDetail' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_FadeDistance_2) == 0x0004E4, "Member 'ASQEX_OceanSimulatorActor::OMP_FadeDistance_2' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_Normal_Fade) == 0x0004E8, "Member 'ASQEX_OceanSimulatorActor::OMP_Normal_Fade' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_NormalFadeDistance) == 0x0004EC, "Member 'ASQEX_OceanSimulatorActor::OMP_NormalFadeDistance' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OMP_NormalFadeContrast) == 0x0004F0, "Member 'ASQEX_OceanSimulatorActor::OMP_NormalFadeContrast' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OffshoreWaveAlbedo) == 0x0004F8, "Member 'ASQEX_OceanSimulatorActor::OffshoreWaveAlbedo' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OffshoreWaveNormal) == 0x000500, "Member 'ASQEX_OceanSimulatorActor::OffshoreWaveNormal' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OffshoreWaveNoise) == 0x000508, "Member 'ASQEX_OceanSimulatorActor::OffshoreWaveNoise' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, AmplitudeCoef) == 0x000510, "Member 'ASQEX_OceanSimulatorActor::AmplitudeCoef' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, WindSpeedCoef) == 0x000514, "Member 'ASQEX_OceanSimulatorActor::WindSpeedCoef' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OppositeWaveSuppressionCoefMin) == 0x000518, "Member 'ASQEX_OceanSimulatorActor::OppositeWaveSuppressionCoefMin' has a wrong offset!");
static_assert(offsetof(ASQEX_OceanSimulatorActor, OppositeWaveSuppressionCoefMax) == 0x00051C, "Member 'ASQEX_OceanSimulatorActor::OppositeWaveSuppressionCoefMax' has a wrong offset!");

// Class Renderer.SQEX_WaterRippleActor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEX_WaterRippleActor final : public AActor
{
public:
	uint8                                         Pad_3E0[0x8];                                      // 0x03E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResolutionX;                                       // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionY;                                       // 0x03EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WaterReflection;                                   // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const bool Initialize();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_WaterRippleActor">();
	}
	static class ASQEX_WaterRippleActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_WaterRippleActor>();
	}
};
static_assert(alignof(ASQEX_WaterRippleActor) == 0x1EF72E00, "Wrong alignment on ASQEX_WaterRippleActor");
static_assert(sizeof(ASQEX_WaterRippleActor) == 0x1EF72E00, "Wrong size on ASQEX_WaterRippleActor");
static_assert(offsetof(ASQEX_WaterRippleActor, ResolutionX) == 0x0003E8, "Member 'ASQEX_WaterRippleActor::ResolutionX' has a wrong offset!");
static_assert(offsetof(ASQEX_WaterRippleActor, ResolutionY) == 0x0003EC, "Member 'ASQEX_WaterRippleActor::ResolutionY' has a wrong offset!");
static_assert(offsetof(ASQEX_WaterRippleActor, WaterReflection) == 0x0003F0, "Member 'ASQEX_WaterRippleActor::WaterReflection' has a wrong offset!");

}

