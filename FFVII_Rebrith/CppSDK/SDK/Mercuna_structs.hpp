#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mercuna

#include "Basic.hpp"


namespace SDK
{

// Enum Mercuna.EMercunaPathEvent
// NumValues: 0x0004
enum class EMercunaPathEvent : uint8
{
	Ready                                    = 0,
	Updated                                  = 1,
	Invalid                                  = 2,
	EMercunaPathEvent_MAX                    = 3,
};

// Enum Mercuna.EMercunaMoveResult
// NumValues: 0x0006
enum class EMercunaMoveResult : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	Cancelled                                = 2,
	Blocked                                  = 3,
	Invalid                                  = 4,
	EMercunaMoveResult_MAX                   = 5,
};

// Enum Mercuna.EMerOctreeDebugDrawMode
// NumValues: 0x0008
enum class EMerOctreeDebugDrawMode : uint8
{
	DISABLED                                 = 0,
	UNNAVIGABLE                              = 1,
	NAVIGABLE                                = 2,
	BOTH                                     = 3,
	REGION                                   = 4,
	REACHABLE                                = 5,
	PATHFIND                                 = 6,
	EMerOctreeDebugDrawMode_MAX              = 7,
};

// Enum Mercuna.EMercunaPointDistribution
// NumValues: 0x0003
enum class EMercunaPointDistribution : uint8
{
	Uniform                                  = 0,
	Random                                   = 1,
	EMercunaPointDistribution_MAX            = 2,
};

// Enum Mercuna.EMercunaMoveGoal
// NumValues: 0x0004
enum class EMercunaMoveGoal : uint8
{
	Actor                                    = 0,
	Vector                                   = 1,
	None                                     = 2,
	EMercunaMoveGoal_MAX                     = 3,
};

// Enum Mercuna.EMerObstacleType
// NumValues: 0x0003
enum class EMerObstacleType : uint8
{
	AUTO                                     = 0,
	SPHERE                                   = 1,
	EMerObstacleType_MAX                     = 2,
};

// ScriptStruct Mercuna.MercunaNavigationConfiguration
// 0x000C (0x000C - 0x0000)
struct FMercunaNavigationConfiguration final
{
public:
	float                                         MaxPitch;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRoll;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveOnlyInLookDirection;                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopAtDestination;                                 // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMercunaNavigationConfiguration) == 0x000004, "Wrong alignment on FMercunaNavigationConfiguration");
static_assert(sizeof(FMercunaNavigationConfiguration) == 0x00000C, "Wrong size on FMercunaNavigationConfiguration");
static_assert(offsetof(FMercunaNavigationConfiguration, MaxPitch) == 0x000000, "Member 'FMercunaNavigationConfiguration::MaxPitch' has a wrong offset!");
static_assert(offsetof(FMercunaNavigationConfiguration, MaxRoll) == 0x000004, "Member 'FMercunaNavigationConfiguration::MaxRoll' has a wrong offset!");
static_assert(offsetof(FMercunaNavigationConfiguration, MoveOnlyInLookDirection) == 0x000008, "Member 'FMercunaNavigationConfiguration::MoveOnlyInLookDirection' has a wrong offset!");
static_assert(offsetof(FMercunaNavigationConfiguration, StopAtDestination) == 0x000009, "Member 'FMercunaNavigationConfiguration::StopAtDestination' has a wrong offset!");

// ScriptStruct Mercuna.MercunaMoveRequest
// 0x0030 (0x0030 - 0x0000)
struct FMercunaMoveRequest final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 GoalActor;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMercunaMoveRequest) == 0x000008, "Wrong alignment on FMercunaMoveRequest");
static_assert(sizeof(FMercunaMoveRequest) == 0x000030, "Wrong size on FMercunaMoveRequest");
static_assert(offsetof(FMercunaMoveRequest, GoalActor) == 0x000008, "Member 'FMercunaMoveRequest::GoalActor' has a wrong offset!");

}

