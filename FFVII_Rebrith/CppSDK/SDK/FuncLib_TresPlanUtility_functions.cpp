#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FuncLib_TresPlanUtility

#include "Basic.hpp"

#include "FuncLib_TresPlanUtility_classes.hpp"
#include "FuncLib_TresPlanUtility_parameters.hpp"


namespace SDK
{

// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.BuildString (Transform)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           AppendTo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Prefix                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       In_LSI_Position                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class FString                           Suffix                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UFuncLib_TresPlanUtility_C::BuildString__Transform_(const class FString& AppendTo, const class FString& Prefix, const struct FTransform& In_LSI_Position, const class FString& Suffix, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncLib_TresPlanUtility_C", "BuildString (Transform)");

	Params::FuncLib_TresPlanUtility_C_BuildString__Transform_ Parms{};

	Parms.AppendTo = std::move(AppendTo);
	Parms.Prefix = std::move(Prefix);
	Parms.In_LSI_Position = std::move(In_LSI_Position);
	Parms.Suffix = std::move(Suffix);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.BuildString (String)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           AppendTo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Prefix                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           In_String                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Suffix                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UFuncLib_TresPlanUtility_C::BuildString__String_(const class FString& AppendTo, const class FString& Prefix, const class FString& In_String, const class FString& Suffix, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncLib_TresPlanUtility_C", "BuildString (String)");

	Params::FuncLib_TresPlanUtility_C_BuildString__String_ Parms{};

	Parms.AppendTo = std::move(AppendTo);
	Parms.Prefix = std::move(Prefix);
	Parms.In_String = std::move(In_String);
	Parms.Suffix = std::move(Suffix);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.CalcBallisticVelocity2D
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Gravity                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InRange                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector2D                        Velocity                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFuncLib_TresPlanUtility_C::CalcBallisticVelocity2D(const struct FVector2D& Target, float Power, float Gravity, class UObject* __WorldContext, bool* InRange, struct FVector2D* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncLib_TresPlanUtility_C", "CalcBallisticVelocity2D");

	Params::FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D Parms{};

	Parms.Target = std::move(Target);
	Parms.Power = Power;
	Parms.Gravity = Gravity;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (InRange != nullptr)
		*InRange = Parms.InRange;

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.ReflectVector
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          InVector                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReflectionNormal                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutVector                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFuncLib_TresPlanUtility_C::ReflectVector(const struct FVector& InVector, const struct FVector& ReflectionNormal, class UObject* __WorldContext, struct FVector* OutVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncLib_TresPlanUtility_C", "ReflectVector");

	Params::FuncLib_TresPlanUtility_C_ReflectVector Parms{};

	Parms.InVector = std::move(InVector);
	Parms.ReflectionNormal = std::move(ReflectionNormal);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutVector != nullptr)
		*OutVector = std::move(Parms.OutVector);
}


// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.Mask(Vector)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Z                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          MaskedValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NewVector                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFuncLib_TresPlanUtility_C::Mask_Vector_(const struct FVector& Vector, bool X, bool Y, bool Z, const struct FVector& MaskedValue, class UObject* __WorldContext, struct FVector* NewVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncLib_TresPlanUtility_C", "Mask(Vector)");

	Params::FuncLib_TresPlanUtility_C_Mask_Vector_ Parms{};

	Parms.Vector = std::move(Vector);
	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.MaskedValue = std::move(MaskedValue);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (NewVector != nullptr)
		*NewVector = std::move(Parms.NewVector);
}


// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.Mask(Rotator)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Rotator                                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    X_Roll_                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Y_Pitch_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Z_Yaw_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         MaskedValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         NewRotator                                             (Parm, OutParm, IsPlainOldData, NoDestructor)

void UFuncLib_TresPlanUtility_C::Mask_Rotator_(const struct FRotator& Rotator, bool X_Roll_, bool Y_Pitch_, bool Z_Yaw_, const struct FRotator& MaskedValue, class UObject* __WorldContext, struct FRotator* NewRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncLib_TresPlanUtility_C", "Mask(Rotator)");

	Params::FuncLib_TresPlanUtility_C_Mask_Rotator_ Parms{};

	Parms.Rotator = std::move(Rotator);
	Parms.X_Roll_ = X_Roll_;
	Parms.Y_Pitch_ = Y_Pitch_;
	Parms.Z_Yaw_ = Z_Yaw_;
	Parms.MaskedValue = std::move(MaskedValue);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (NewRotator != nullptr)
		*NewRotator = std::move(Parms.NewRotator);
}


// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.TresPlanCheckActor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlayer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFriend                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsEnemy                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<ETresChrUniqueID>                IsCharID                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<ETresEnemyUniqueID>              IsEnemyID                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFuncLib_TresPlanUtility_C::TresPlanCheckActor(class AActor* Actor, bool IsPlayer, bool IsFriend, bool IsEnemy, TArray<ETresChrUniqueID>& IsCharID, TArray<ETresEnemyUniqueID>& IsEnemyID, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncLib_TresPlanUtility_C", "TresPlanCheckActor");

	Params::FuncLib_TresPlanUtility_C_TresPlanCheckActor Parms{};

	Parms.Actor = Actor;
	Parms.IsPlayer = IsPlayer;
	Parms.IsFriend = IsFriend;
	Parms.IsEnemy = IsEnemy;
	Parms.IsCharID = std::move(IsCharID);
	Parms.IsEnemyID = std::move(IsEnemyID);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	IsCharID = std::move(Parms.IsCharID);
	IsEnemyID = std::move(Parms.IsEnemyID);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.TresSetEnableBodyCollisionComponent
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFuncLib_TresPlanUtility_C::TresSetEnableBodyCollisionComponent(class UPrimitiveComponent* Target, bool Enable, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncLib_TresPlanUtility_C", "TresSetEnableBodyCollisionComponent");

	Params::FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent Parms{};

	Parms.Target = Target;
	Parms.Enable = Enable;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}

}

