#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TresPlayerStateEventCamera_Ariel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TresGame_structs.hpp"
#include "TresGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TresPlayerStateEventCamera_Ariel.BP_TresPlayerStateEventCamera_Ariel_C
// 0x112E9AA0 (0x112E9AF0 - 0x0050)
class UBP_TresPlayerStateEventCamera_Ariel_C final : public UTresPlayerStateEvent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0050(0x6F26)(Transient, DuplicateTransient)
	class ATresCharPawnBase*                      Ariel_pawnbase;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_OTS;                                        // 0x0060(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresNote*                              Target;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Puddle_Pos_count;                                  // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot;                                               // 0x007C(0x112E9AF0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ATresCameraRotTarget*                   Camera_2T;                                         // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Finish_rot;                                        // 0x0090(0x112E9AF0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Finish_Distance;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Finish_Offset;                                     // 0x00A0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dive_Check;                                        // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinishEndTime;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CountStop;                                         // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresDisneyMagicPawnAriel*              DisneyMagicPawnAriel;                              // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rainbow;                                           // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rainbowstart;                                      // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RainbowEnd;                                        // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Finish_Location;                                   // 0x00C8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetRadius;                                      // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Change_rot;                                        // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Left_HIt;                                          // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Right_Hit;                                         // 0x00DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Camera_Pitch;                                      // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresCameraAnim*                        Camera_anim;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATresCameraRotTarget*                   Camera_RotTarget;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Finish_flag;                                       // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_TresPlayerStateEventCamera_Ariel(int32 EntryPoint);
	void ReceivePlayerDtorState(ETresStateID StateID);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveAnimNotifyEndBpEvent(class ATresCharPawnBase* SendActor, class FName AnimSeqName, ETresAnimNotifyBpEventID EventID, int32 Param);
	void ReceiveAnimNotifyStartBpEvent(class ATresCharPawnBase* SendActor, class FName AnimSeqName, ETresAnimNotifyBpEventID EventID, int32 Param);
	void ReceivePlayerSpecificAction(ETresPlayerSpecificActionID ActionID, int32 SubID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TresPlayerStateEventCamera_Ariel_C">();
	}
	static class UBP_TresPlayerStateEventCamera_Ariel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TresPlayerStateEventCamera_Ariel_C>();
	}
};
static_assert(alignof(UBP_TresPlayerStateEventCamera_Ariel_C) == 0x112E9AF0, "Wrong alignment on UBP_TresPlayerStateEventCamera_Ariel_C");
static_assert(sizeof(UBP_TresPlayerStateEventCamera_Ariel_C) == 0x112E9AF0, "Wrong size on UBP_TresPlayerStateEventCamera_Ariel_C");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, UberGraphFrame) == 0x000050, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Ariel_pawnbase) == 0x000058, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Ariel_pawnbase' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Target_OTS) == 0x000060, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Target_OTS' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Target) == 0x000070, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Target' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Puddle_Pos_count) == 0x000078, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Puddle_Pos_count' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Rot) == 0x00007C, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Rot' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Camera_2T) == 0x000088, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Camera_2T' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Finish_rot) == 0x000090, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Finish_rot' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Finish_Distance) == 0x00009C, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Finish_Distance' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Finish_Offset) == 0x0000A0, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Finish_Offset' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Dive_Check) == 0x0000AC, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Dive_Check' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, FinishEndTime) == 0x0000B0, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::FinishEndTime' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, CountStop) == 0x0000B4, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::CountStop' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, DisneyMagicPawnAriel) == 0x0000B8, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::DisneyMagicPawnAriel' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Rainbow) == 0x0000C0, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Rainbow' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Rainbowstart) == 0x0000C4, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Rainbowstart' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, RainbowEnd) == 0x0000C5, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::RainbowEnd' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Finish_Location) == 0x0000C8, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Finish_Location' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, TargetRadius) == 0x0000D4, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::TargetRadius' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Change_rot) == 0x0000D8, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Change_rot' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Left_HIt) == 0x0000DC, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Left_HIt' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Right_Hit) == 0x0000DD, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Right_Hit' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Camera_Pitch) == 0x0000E0, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Camera_Pitch' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Camera_anim) == 0x0000E8, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Camera_anim' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Camera_RotTarget) == 0x0000F0, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Camera_RotTarget' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ariel_C, Finish_flag) == 0x0000F8, "Member 'UBP_TresPlayerStateEventCamera_Ariel_C::Finish_flag' has a wrong offset!");

}

