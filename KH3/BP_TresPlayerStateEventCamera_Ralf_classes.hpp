#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TresPlayerStateEventCamera_Ralf

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TresGame_structs.hpp"
#include "TresGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TresPlayerStateEventCamera_Ralf.BP_TresPlayerStateEventCamera_Ralf_C
// 0x112E9AA0 (0x112E9AF0 - 0x0050)
class UBP_TresPlayerStateEventCamera_Ralf_C final : public UTresPlayerStateEvent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0050(0x6F26)(Transient, DuplicateTransient)
	class ATresCharPawnBase*                      Tres_Char_Pawn_base;                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ON_ralf_finish;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraAnim*                            Camera_Animation;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ON_ralf_start;                                     // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Float;                                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           NewVar_0;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Last_Cut;                                          // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Take_over;                                         // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param;                                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Offset;                                            // 0x00A0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Minumum;                                           // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Offset_0;                                          // 0x00B0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Offset_1;                                          // 0x00BC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Continue;                                          // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Attach;                                            // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresCameraAnim*                        Camera_anim;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATresCameraAnim*                        Camera_anim_0;                                     // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATresCameraRotTarget*                   Camera_Rot;                                        // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATresCameraTargetOTS*                   Camera_OTS;                                        // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot;                                               // 0x00F0(0x112E9AF0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Target_Offset;                                     // 0x00FC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enemy_Visible;                                     // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_TresPlayerStateEventCamera_Ralf(int32 EntryPoint);
	void Ralph_Explosion_Start();
	void ReceiveAnimNotifyEndBpEvent(class ATresCharPawnBase* SendActor, class FName AnimSeqName, ETresAnimNotifyBpEventID EventID, int32 Param_0);
	void ReceivePlayerDtorState(ETresStateID StateID);
	void ReceiveAnimNotifyStartBpEvent(class ATresCharPawnBase* SendActor, class FName AnimSeqName, ETresAnimNotifyBpEventID EventID, int32 Param_0);
	void ReceivePlayerSpecificAction(ETresPlayerSpecificActionID ActionID, int32 SubID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TresPlayerStateEventCamera_Ralf_C">();
	}
	static class UBP_TresPlayerStateEventCamera_Ralf_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TresPlayerStateEventCamera_Ralf_C>();
	}
};
static_assert(alignof(UBP_TresPlayerStateEventCamera_Ralf_C) == 0x112E9AF0, "Wrong alignment on UBP_TresPlayerStateEventCamera_Ralf_C");
static_assert(sizeof(UBP_TresPlayerStateEventCamera_Ralf_C) == 0x112E9AF0, "Wrong size on UBP_TresPlayerStateEventCamera_Ralf_C");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, UberGraphFrame) == 0x000050, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Tres_Char_Pawn_base) == 0x000058, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Tres_Char_Pawn_base' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, ON_ralf_finish) == 0x000060, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::ON_ralf_finish' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Camera_Animation) == 0x000068, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Camera_Animation' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Actor) == 0x000070, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Actor' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, ON_ralf_start) == 0x000078, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::ON_ralf_start' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Name_0) == 0x000080, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Name_0' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Float) == 0x000088, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Float' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, NewVar_0) == 0x000090, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Last_Cut) == 0x000098, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Last_Cut' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Take_over) == 0x000099, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Take_over' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Param) == 0x00009C, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Param' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Offset) == 0x0000A0, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Offset' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Minumum) == 0x0000AC, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Minumum' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Offset_0) == 0x0000B0, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Offset_0' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Offset_1) == 0x0000BC, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Offset_1' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Continue) == 0x0000C8, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Continue' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Attach) == 0x0000C9, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Attach' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Camera_anim) == 0x0000D0, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Camera_anim' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Camera_anim_0) == 0x0000D8, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Camera_anim_0' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Camera_Rot) == 0x0000E0, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Camera_Rot' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Camera_OTS) == 0x0000E8, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Camera_OTS' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Rot) == 0x0000F0, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Rot' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Target_Offset) == 0x0000FC, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Target_Offset' has a wrong offset!");
static_assert(offsetof(UBP_TresPlayerStateEventCamera_Ralf_C, Enemy_Visible) == 0x000108, "Member 'UBP_TresPlayerStateEventCamera_Ralf_C::Enemy_Visible' has a wrong offset!");

}

