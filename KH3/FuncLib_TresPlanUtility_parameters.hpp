#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FuncLib_TresPlanUtility

#include "Basic.hpp"

#include "TresGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.BuildString (Transform)
// 0x4DD28000 (0x4DD28000 - 0x0000)
struct alignas(0x4DD28000) FuncLib_TresPlanUtility_C_BuildString__Transform_ final
{
public:
	class FString                                 AppendTo;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FTransform                             In_LSI_Position;                                   // 0x0020(0x112E9D50)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class FString                                 Suffix;                                            // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0088(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0094(0x112E9AF0)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_BuildString_Vector_ReturnValue;           // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_BuildString_Rotator_ReturnValue;          // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_BuildString_Vector_ReturnValue2;          // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(FuncLib_TresPlanUtility_C_BuildString__Transform_) == 0x4DD28000, "Wrong alignment on FuncLib_TresPlanUtility_C_BuildString__Transform_");
static_assert(sizeof(FuncLib_TresPlanUtility_C_BuildString__Transform_) == 0x4DD28000, "Wrong size on FuncLib_TresPlanUtility_C_BuildString__Transform_");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, AppendTo) == 0x000000, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::AppendTo' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, Prefix) == 0x000010, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::Prefix' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, In_LSI_Position) == 0x000020, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::In_LSI_Position' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, Suffix) == 0x000050, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::Suffix' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, __WorldContext) == 0x000060, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::__WorldContext' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, ReturnValue) == 0x000068, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, CallFunc_Concat_StrStr_ReturnValue) == 0x000078, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, CallFunc_BreakTransform_Location) == 0x000088, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, CallFunc_BreakTransform_Rotation) == 0x000094, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, CallFunc_BreakTransform_Scale) == 0x0000A0, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, CallFunc_BuildString_Vector_ReturnValue) == 0x0000B0, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::CallFunc_BuildString_Vector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, CallFunc_BuildString_Rotator_ReturnValue) == 0x0000C0, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::CallFunc_BuildString_Rotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, CallFunc_BuildString_Vector_ReturnValue2) == 0x0000D0, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::CallFunc_BuildString_Vector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__Transform_, CallFunc_Concat_StrStr_ReturnValue2) == 0x0000E0, "Member 'FuncLib_TresPlanUtility_C_BuildString__Transform_::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");

// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.BuildString (String)
// 0x10101 (0x10101 - 0x0000)
struct alignas(0x10101) FuncLib_TresPlanUtility_C_BuildString__String_ final
{
public:
	class FString                                 AppendTo;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 In_String;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Suffix;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue3;               // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(FuncLib_TresPlanUtility_C_BuildString__String_) == 0x010101, "Wrong alignment on FuncLib_TresPlanUtility_C_BuildString__String_");
static_assert(sizeof(FuncLib_TresPlanUtility_C_BuildString__String_) == 0x010101, "Wrong size on FuncLib_TresPlanUtility_C_BuildString__String_");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__String_, AppendTo) == 0x000000, "Member 'FuncLib_TresPlanUtility_C_BuildString__String_::AppendTo' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__String_, Prefix) == 0x000010, "Member 'FuncLib_TresPlanUtility_C_BuildString__String_::Prefix' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__String_, In_String) == 0x000020, "Member 'FuncLib_TresPlanUtility_C_BuildString__String_::In_String' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__String_, Suffix) == 0x000030, "Member 'FuncLib_TresPlanUtility_C_BuildString__String_::Suffix' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__String_, __WorldContext) == 0x000040, "Member 'FuncLib_TresPlanUtility_C_BuildString__String_::__WorldContext' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__String_, ReturnValue) == 0x000048, "Member 'FuncLib_TresPlanUtility_C_BuildString__String_::ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__String_, CallFunc_Concat_StrStr_ReturnValue) == 0x000058, "Member 'FuncLib_TresPlanUtility_C_BuildString__String_::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__String_, CallFunc_Concat_StrStr_ReturnValue2) == 0x000068, "Member 'FuncLib_TresPlanUtility_C_BuildString__String_::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_BuildString__String_, CallFunc_Concat_StrStr_ReturnValue3) == 0x000078, "Member 'FuncLib_TresPlanUtility_C_BuildString__String_::CallFunc_Concat_StrStr_ReturnValue3' has a wrong offset!");

// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.CalcBallisticVelocity2D
// 0x1CC22000 (0x1CC22000 - 0x0000)
struct alignas(0x1CC22000) FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D final
{
public:
	struct FVector2D                              Target;                                            // 0x0000(0x112E95F0)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Power;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRange;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Velocity;                                          // 0x001C(0x112E95F0)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_angle;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Loca_ts;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_d;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_c;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_b;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_a;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_Dist_Z;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_Dist_X;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Sin_ReturnValue;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0068(0x112E95F0)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue2;                // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue3;                // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue4;                // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue4;           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue5;                // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D) == 0x1CC22000, "Wrong alignment on FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D");
static_assert(sizeof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D) == 0x1CC22000, "Wrong size on FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Target) == 0x000000, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Target' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Power) == 0x000008, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Power' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Gravity) == 0x00000C, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Gravity' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, __WorldContext) == 0x000010, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::__WorldContext' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, InRange) == 0x000018, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::InRange' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Velocity) == 0x00001C, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Velocity' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Local_angle) == 0x000024, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Local_angle' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Loca_ts) == 0x000028, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Loca_ts' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Local_d) == 0x00002C, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Local_d' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Local_c) == 0x000030, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Local_c' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Local_b) == 0x000034, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Local_b' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Local_a) == 0x000038, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Local_a' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Local_Dist_Z) == 0x00003C, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Local_Dist_Z' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, Local_Dist_X) == 0x000040, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::Local_Dist_X' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_BreakVector2D_X) == 0x000044, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_BreakVector2D_Y) == 0x000048, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_Abs_ReturnValue) == 0x000050, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_Less_FloatFloat_ReturnValue) == 0x000054, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_Sin_ReturnValue) == 0x000058, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00005C, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_Cos_ReturnValue) == 0x000060, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000064, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_MakeVector2D_ReturnValue) == 0x000068, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000070, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, K2Node_MathExpression_ReturnValue) == 0x000074, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, K2Node_MathExpression_ReturnValue2) == 0x000078, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::K2Node_MathExpression_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x00007C, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, K2Node_MathExpression_ReturnValue3) == 0x000080, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::K2Node_MathExpression_ReturnValue3' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, K2Node_MathExpression_ReturnValue4) == 0x000084, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::K2Node_MathExpression_ReturnValue4' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, CallFunc_Divide_FloatFloat_ReturnValue4) == 0x000088, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::CallFunc_Divide_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D, K2Node_MathExpression_ReturnValue5) == 0x00008C, "Member 'FuncLib_TresPlanUtility_C_CalcBallisticVelocity2D::K2Node_MathExpression_ReturnValue5' has a wrong offset!");

// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.ReflectVector
// 0x1CC22000 (0x1CC22000 - 0x0000)
struct alignas(0x1CC22000) FuncLib_TresPlanUtility_C_ReflectVector final
{
public:
	struct FVector                                InVector;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReflectionNormal;                                  // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutVector;                                         // 0x0020(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FuncLib_TresPlanUtility_C_ReflectVector) == 0x1CC22000, "Wrong alignment on FuncLib_TresPlanUtility_C_ReflectVector");
static_assert(sizeof(FuncLib_TresPlanUtility_C_ReflectVector) == 0x1CC22000, "Wrong size on FuncLib_TresPlanUtility_C_ReflectVector");
static_assert(offsetof(FuncLib_TresPlanUtility_C_ReflectVector, InVector) == 0x000000, "Member 'FuncLib_TresPlanUtility_C_ReflectVector::InVector' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_ReflectVector, ReflectionNormal) == 0x00000C, "Member 'FuncLib_TresPlanUtility_C_ReflectVector::ReflectionNormal' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_ReflectVector, __WorldContext) == 0x000018, "Member 'FuncLib_TresPlanUtility_C_ReflectVector::__WorldContext' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_ReflectVector, OutVector) == 0x000020, "Member 'FuncLib_TresPlanUtility_C_ReflectVector::OutVector' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_ReflectVector, CallFunc_Normal_ReturnValue) == 0x00002C, "Member 'FuncLib_TresPlanUtility_C_ReflectVector::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_ReflectVector, CallFunc_Dot_VectorVector_ReturnValue) == 0x000038, "Member 'FuncLib_TresPlanUtility_C_ReflectVector::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_ReflectVector, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'FuncLib_TresPlanUtility_C_ReflectVector::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_ReflectVector, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'FuncLib_TresPlanUtility_C_ReflectVector::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_ReflectVector, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00004C, "Member 'FuncLib_TresPlanUtility_C_ReflectVector::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.Mask(Vector)
// 0x4DD28000 (0x4DD28000 - 0x0000)
struct alignas(0x4DD28000) FuncLib_TresPlanUtility_C_Mask_Vector_ final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          X;                                                 // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Y;                                                 // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Z;                                                 // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MaskedValue;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewVector;                                         // 0x0028(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue2;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue3;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FuncLib_TresPlanUtility_C_Mask_Vector_) == 0x4DD28000, "Wrong alignment on FuncLib_TresPlanUtility_C_Mask_Vector_");
static_assert(sizeof(FuncLib_TresPlanUtility_C_Mask_Vector_) == 0x4DD28000, "Wrong size on FuncLib_TresPlanUtility_C_Mask_Vector_");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, Vector) == 0x000000, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::Vector' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, X) == 0x00000C, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::X' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, Y) == 0x00000D, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::Y' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, Z) == 0x00000E, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::Z' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, MaskedValue) == 0x000010, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::MaskedValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, __WorldContext) == 0x000020, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::__WorldContext' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, NewVector) == 0x000028, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::NewVector' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, CallFunc_BreakVector_X) == 0x000034, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, CallFunc_BreakVector_Y) == 0x000038, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, CallFunc_BreakVector_Z) == 0x00003C, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, CallFunc_BreakVector_X2) == 0x000040, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, CallFunc_BreakVector_Y2) == 0x000044, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, CallFunc_BreakVector_Z2) == 0x000048, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, CallFunc_SelectFloat_ReturnValue) == 0x00004C, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, CallFunc_SelectFloat_ReturnValue2) == 0x000050, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::CallFunc_SelectFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, CallFunc_SelectFloat_ReturnValue3) == 0x000054, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::CallFunc_SelectFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Vector_, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'FuncLib_TresPlanUtility_C_Mask_Vector_::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.Mask(Rotator)
// 0x112E9AF0 (0x112E9AF0 - 0x0000)
struct FuncLib_TresPlanUtility_C_Mask_Rotator_ final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x112E9AF0)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          X_Roll_;                                           // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Y_Pitch_;                                          // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Z_Yaw_;                                            // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MaskedValue;                                       // 0x0010(0x112E9AF0)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewRotator;                                        // 0x0028(0x112E9AF0)(Parm, OutParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll2;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch2;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw2;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue2;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue3;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0058(0x112E9AF0)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(FuncLib_TresPlanUtility_C_Mask_Rotator_) == 0x112E9AF0, "Wrong alignment on FuncLib_TresPlanUtility_C_Mask_Rotator_");
static_assert(sizeof(FuncLib_TresPlanUtility_C_Mask_Rotator_) == 0x112E9AF0, "Wrong size on FuncLib_TresPlanUtility_C_Mask_Rotator_");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, Rotator) == 0x000000, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::Rotator' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, X_Roll_) == 0x00000C, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::X_Roll_' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, Y_Pitch_) == 0x00000D, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::Y_Pitch_' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, Z_Yaw_) == 0x00000E, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::Z_Yaw_' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, MaskedValue) == 0x000010, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::MaskedValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, __WorldContext) == 0x000020, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::__WorldContext' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, NewRotator) == 0x000028, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::NewRotator' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, CallFunc_BreakRotator_Roll) == 0x000034, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, CallFunc_BreakRotator_Pitch) == 0x000038, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, CallFunc_BreakRotator_Yaw) == 0x00003C, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, CallFunc_BreakRotator_Roll2) == 0x000040, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::CallFunc_BreakRotator_Roll2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, CallFunc_BreakRotator_Pitch2) == 0x000044, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::CallFunc_BreakRotator_Pitch2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, CallFunc_BreakRotator_Yaw2) == 0x000048, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::CallFunc_BreakRotator_Yaw2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, CallFunc_SelectFloat_ReturnValue) == 0x00004C, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, CallFunc_SelectFloat_ReturnValue2) == 0x000050, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::CallFunc_SelectFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, CallFunc_SelectFloat_ReturnValue3) == 0x000054, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::CallFunc_SelectFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_Mask_Rotator_, CallFunc_MakeRotator_ReturnValue) == 0x000058, "Member 'FuncLib_TresPlanUtility_C_Mask_Rotator_::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.TresPlanCheckActor
// 0x3C23D70A (0x3C23D70A - 0x0000)
struct alignas(0x3C23D70A) FuncLib_TresPlanUtility_C_TresPlanCheckActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFriend;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEnemy;                                           // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETresChrUniqueID>                      IsCharID;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<ETresEnemyUniqueID>                    IsEnemyID;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue2;           // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SqEX_IsObjTypePlayer_ReturnValue;         // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ATresPawnBase*                          K2Node_DynamicCast_AsTres_Pawn_Base;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETresEnemyUniqueID                            CallFunc_BP_GetEnemyUniqueID_ReturnValue;          // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETresChrUniqueID                              CallFunc_BP_GetChrUniqueID_ReturnValue;            // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SqEX_IsObjTypeEnemy_ReturnValue;          // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue2;              // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SqEX_IsObjTypeFriend_ReturnValue;         // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FuncLib_TresPlanUtility_C_TresPlanCheckActor) == 0x3C23D70A, "Wrong alignment on FuncLib_TresPlanUtility_C_TresPlanCheckActor");
static_assert(sizeof(FuncLib_TresPlanUtility_C_TresPlanCheckActor) == 0x3C23D70A, "Wrong size on FuncLib_TresPlanUtility_C_TresPlanCheckActor");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, Actor) == 0x000000, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::Actor' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, IsPlayer) == 0x000008, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::IsPlayer' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, IsFriend) == 0x000009, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::IsFriend' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, IsEnemy) == 0x00000A, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::IsEnemy' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, IsCharID) == 0x000010, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::IsCharID' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, IsEnemyID) == 0x000020, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::IsEnemyID' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, __WorldContext) == 0x000030, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::__WorldContext' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, Result) == 0x000038, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::Result' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_Array_Length_ReturnValue2) == 0x000040, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000044, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_EqualEqual_IntInt_ReturnValue2) == 0x000045, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_EqualEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_SqEX_IsObjTypePlayer_ReturnValue) == 0x000046, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_SqEX_IsObjTypePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, K2Node_DynamicCast_AsTres_Pawn_Base) == 0x000048, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::K2Node_DynamicCast_AsTres_Pawn_Base' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_BooleanAND_ReturnValue) == 0x000051, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_BP_GetEnemyUniqueID_ReturnValue) == 0x000052, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_BP_GetEnemyUniqueID_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000053, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_Array_Contains_ReturnValue) == 0x000054, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_BP_GetChrUniqueID_ReturnValue) == 0x000055, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_BP_GetChrUniqueID_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_SqEX_IsObjTypeEnemy_ReturnValue) == 0x000056, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_SqEX_IsObjTypeEnemy_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000057, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_BooleanAND_ReturnValue2) == 0x000058, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_Array_Contains_ReturnValue2) == 0x000059, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_Array_Contains_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_SqEX_IsObjTypeFriend_ReturnValue) == 0x00005A, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_SqEX_IsObjTypeFriend_ReturnValue' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresPlanCheckActor, CallFunc_BooleanAND_ReturnValue3) == 0x00005B, "Member 'FuncLib_TresPlanUtility_C_TresPlanCheckActor::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");

// Function FuncLib_TresPlanUtility.FuncLib_TresPlanUtility_C.TresSetEnableBodyCollisionComponent
// 0x4DD28000 (0x4DD28000 - 0x0000)
struct alignas(0x4DD28000) FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent) == 0x4DD28000, "Wrong alignment on FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent");
static_assert(sizeof(FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent) == 0x4DD28000, "Wrong size on FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent, Target) == 0x000000, "Member 'FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent::Target' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent, Enable) == 0x000008, "Member 'FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent::Enable' has a wrong offset!");
static_assert(offsetof(FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent, __WorldContext) == 0x000010, "Member 'FuncLib_TresPlanUtility_C_TresSetEnableBodyCollisionComponent::__WorldContext' has a wrong offset!");

}

