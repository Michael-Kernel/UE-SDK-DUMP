#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: G_tt_movielight

#include "Basic.hpp"

#include "G_TresGimmickActorBase_classes.hpp"
#include "Engine_structs.hpp"
#include "G_tt_movielight_stData_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass g_tt_movielight.g_tt_movielight_C
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class AG_tt_movielight_C final : public AG_TresGimmickActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_G_tt_movielight_C;                  // 0x05C8(0x6F26)(Transient, DuplicateTransient)
	class UTresPlanTimer_C*                       TresPlanTimer_Wait;                                // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTresVideoComponent*                    TresVideo;                                         // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_IsPaused;                                     // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E9[0x3];                                      // 0x05E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_WaitTime;                                     // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnFinishMovie;                                     // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnStartMovie;                                      // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Temp_PlayIndex;                                    // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_614[0x4];                                      // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FG_tt_movielight_stData>        MoviePaths_Step1;                                  // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FG_tt_movielight_stData>        MoviePaths_Step2;                                  // 0x0628(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          Random;                                            // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Temp_IsStep2;                                      // 0x0639(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnFinishMovie__DelegateSignature();
	void OnStartMovie__DelegateSignature(class FName PlayingMovie);
	void ExecuteUbergraph_g_tt_movielight(int32 EntryPoint);
	void BndEvt__TresPlanTimer_Wait_K2Node_ComponentBoundEvent_1_OnTimer__DelegateSignature();
	void BndEvt__TresVideo_K2Node_ComponentBoundEvent_0_TresVideoPrepareFinishSignature__DelegateSignature();
	void BndEvt__TresVideo_BuildingBuilding_K2Node_ComponentBoundEvent_0_TresVideoPlayFinishSignature__DelegateSignature();
	void Reset_Playing();
	void BPEV_OnStartGimmickForPlan(bool PlayAnimation);
	void BPEV_OnStopGimmickForPlan(bool PlayAnimation);
	void SetStep2();
	void GetMovieNum(int32* Num);
	void GetMovieData(int32 Index_0, class FString* Path, class FName* RemoteName);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"g_tt_movielight_C">();
	}
	static class AG_tt_movielight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AG_tt_movielight_C>();
	}
};
static_assert(alignof(AG_tt_movielight_C) == 0x1EF72E00, "Wrong alignment on AG_tt_movielight_C");
static_assert(sizeof(AG_tt_movielight_C) == 0x1EF72E00, "Wrong size on AG_tt_movielight_C");
static_assert(offsetof(AG_tt_movielight_C, UberGraphFrame_G_tt_movielight_C) == 0x0005C8, "Member 'AG_tt_movielight_C::UberGraphFrame_G_tt_movielight_C' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, TresPlanTimer_Wait) == 0x0005D0, "Member 'AG_tt_movielight_C::TresPlanTimer_Wait' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, TresVideo) == 0x0005D8, "Member 'AG_tt_movielight_C::TresVideo' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, SpotLight) == 0x0005E0, "Member 'AG_tt_movielight_C::SpotLight' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, Temp_IsPaused) == 0x0005E8, "Member 'AG_tt_movielight_C::Temp_IsPaused' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, Temp_WaitTime) == 0x0005EC, "Member 'AG_tt_movielight_C::Temp_WaitTime' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, OnFinishMovie) == 0x0005F0, "Member 'AG_tt_movielight_C::OnFinishMovie' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, OnStartMovie) == 0x000600, "Member 'AG_tt_movielight_C::OnStartMovie' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, Temp_PlayIndex) == 0x000610, "Member 'AG_tt_movielight_C::Temp_PlayIndex' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, MoviePaths_Step1) == 0x000618, "Member 'AG_tt_movielight_C::MoviePaths_Step1' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, MoviePaths_Step2) == 0x000628, "Member 'AG_tt_movielight_C::MoviePaths_Step2' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, Random) == 0x000638, "Member 'AG_tt_movielight_C::Random' has a wrong offset!");
static_assert(offsetof(AG_tt_movielight_C, Temp_IsStep2) == 0x000639, "Member 'AG_tt_movielight_C::Temp_IsStep2' has a wrong offset!");

}

