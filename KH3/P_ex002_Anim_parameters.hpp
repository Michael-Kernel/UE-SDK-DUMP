#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: P_ex002_Anim

#include "Basic.hpp"


namespace SDK::Params
{

// Function p_ex002_Anim.p_ex002_Anim_C.ExecuteUbergraph_p_ex002_Anim
// 0xC020000 (0xC020000 - 0x0000)
struct alignas(0xC020000) P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim) == 0xC020000, "Wrong alignment on P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim");
static_assert(sizeof(P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim) == 0xC020000, "Wrong size on P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim");
static_assert(offsetof(P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim, EntryPoint) == 0x000000, "Member 'P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim::EntryPoint' has a wrong offset!");
static_assert(offsetof(P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim, CallFunc_Ease_ReturnValue) == 0x000004, "Member 'P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim, K2Node_Event_DeltaTimeX) == 0x000008, "Member 'P_ex002_Anim_C_ExecuteUbergraph_p_ex002_Anim::K2Node_Event_DeltaTimeX' has a wrong offset!");

// Function p_ex002_Anim.p_ex002_Anim_C.BlueprintUpdateAnimation
// 0x8000000 (0x8000000 - 0x0000)
struct alignas(0x8000000) P_ex002_Anim_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(P_ex002_Anim_C_BlueprintUpdateAnimation) == 0x8000000, "Wrong alignment on P_ex002_Anim_C_BlueprintUpdateAnimation");
static_assert(sizeof(P_ex002_Anim_C_BlueprintUpdateAnimation) == 0x8000000, "Wrong size on P_ex002_Anim_C_BlueprintUpdateAnimation");
static_assert(offsetof(P_ex002_Anim_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'P_ex002_Anim_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

}

