#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KBDRt

#include "Basic.hpp"

#include "BonamikRt_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function KBDRt.SQEX_KBD_Component.SQEX_ApplyKBDAssetElement
// 0x0018 (0x0018 - 0x0000)
struct SQEX_KBD_Component_SQEX_ApplyKBDAssetElement final
{
public:
	class FName                                   ElementName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReset;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsResetPose;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRoll;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepReferences;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_ApplyKBDAssetElement) == 0x000004, "Wrong alignment on SQEX_KBD_Component_SQEX_ApplyKBDAssetElement");
static_assert(sizeof(SQEX_KBD_Component_SQEX_ApplyKBDAssetElement) == 0x000018, "Wrong size on SQEX_KBD_Component_SQEX_ApplyKBDAssetElement");
static_assert(offsetof(SQEX_KBD_Component_SQEX_ApplyKBDAssetElement, ElementName) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_ApplyKBDAssetElement::ElementName' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_ApplyKBDAssetElement, bIsReset) == 0x000008, "Member 'SQEX_KBD_Component_SQEX_ApplyKBDAssetElement::bIsReset' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_ApplyKBDAssetElement, bIsResetPose) == 0x000009, "Member 'SQEX_KBD_Component_SQEX_ApplyKBDAssetElement::bIsResetPose' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_ApplyKBDAssetElement, PreRoll) == 0x00000C, "Member 'SQEX_KBD_Component_SQEX_ApplyKBDAssetElement::PreRoll' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_ApplyKBDAssetElement, KeepReferences) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_ApplyKBDAssetElement::KeepReferences' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_ApplyKBDAssetElement, ReturnValue) == 0x000011, "Member 'SQEX_KBD_Component_SQEX_ApplyKBDAssetElement::ReturnValue' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_AddReference
// 0xE4B5 (0xE4B5 - 0x0000)
struct alignas(0xE4B5) SQEX_KBD_Component_SQEX_Bonamik_AddReference final
{
public:
	class USQEX_KBD_Component*                    OtherComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReferenceGroupName;                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_AddReference) == 0x00E4B5, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_AddReference");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_AddReference) == 0x00E4B5, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_AddReference");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_AddReference, OtherComponent) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_AddReference::OtherComponent' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_AddReference, ReferenceGroupName) == 0x000008, "Member 'SQEX_KBD_Component_SQEX_Bonamik_AddReference::ReferenceGroupName' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_AddReferenceCommon
// 0x0008 (0x0008 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_AddReferenceCommon final
{
public:
	class USQEX_KBD_Component*                    OtherComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_AddReferenceCommon) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_AddReferenceCommon");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_AddReferenceCommon) == 0x000008, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_AddReferenceCommon");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_AddReferenceCommon, OtherComponent) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_AddReferenceCommon::OtherComponent' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_ClearEmissiveWind
// 0x0008 (0x0008 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_ClearEmissiveWind final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_ClearEmissiveWind) == 0x000004, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_ClearEmissiveWind");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_ClearEmissiveWind) == 0x000008, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_ClearEmissiveWind");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_ClearEmissiveWind, BlendTime) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_ClearEmissiveWind::BlendTime' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_ClearEmissiveWind, bApplyToChildren) == 0x000004, "Member 'SQEX_KBD_Component_SQEX_Bonamik_ClearEmissiveWind::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_DisablePresetWind
// 0x0010 (0x0010 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_DisablePresetWind final
{
public:
	TArray<class FName>                           PresetNames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_DisablePresetWind) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_DisablePresetWind");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_DisablePresetWind) == 0x000010, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_DisablePresetWind");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_DisablePresetWind, PresetNames) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_DisablePresetWind::PresetNames' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_EnableBnm3VariableFPSSupport
// 0x0001 (0x0001 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_EnableBnm3VariableFPSSupport final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_EnableBnm3VariableFPSSupport) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_EnableBnm3VariableFPSSupport");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_EnableBnm3VariableFPSSupport) == 0x000001, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_EnableBnm3VariableFPSSupport");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_EnableBnm3VariableFPSSupport, bEnable) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_EnableBnm3VariableFPSSupport::bEnable' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_EnablePresetWind
// 0x0010 (0x0010 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_EnablePresetWind final
{
public:
	TArray<class FName>                           PresetNames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_EnablePresetWind) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_EnablePresetWind");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_EnablePresetWind) == 0x000010, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_EnablePresetWind");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_EnablePresetWind, PresetNames) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_EnablePresetWind::PresetNames' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_GetTeleportDistance
// 0xB78C (0xB78C - 0x0000)
struct alignas(0xB78C) SQEX_KBD_Component_SQEX_Bonamik_GetTeleportDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_GetTeleportDistance) == 0x00B78C, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_GetTeleportDistance");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_GetTeleportDistance) == 0x00B78C, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_GetTeleportDistance");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_GetTeleportDistance, ReturnValue) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_GetTeleportDistance::ReturnValue' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_GetWeight
// 0xB78D (0xB78D - 0x0000)
struct alignas(0xB78D) SQEX_KBD_Component_SQEX_Bonamik_GetWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_GetWeight) == 0x00B78D, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_GetWeight");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_GetWeight) == 0x00B78D, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_GetWeight");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_GetWeight, ReturnValue) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_GetWeight::ReturnValue' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_IsAutoDisable
// 0x0001 (0x0001 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_IsAutoDisable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_IsAutoDisable) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_IsAutoDisable");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_IsAutoDisable) == 0x000001, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_IsAutoDisable");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_IsAutoDisable, ReturnValue) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_IsAutoDisable::ReturnValue' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_IsSetup
// 0x0001 (0x0001 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_IsSetup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_IsSetup) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_IsSetup");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_IsSetup) == 0x000001, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_IsSetup");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_IsSetup, ReturnValue) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_IsSetup::ReturnValue' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_RemoveReference
// 0xE4B5 (0xE4B5 - 0x0000)
struct alignas(0xE4B5) SQEX_KBD_Component_SQEX_Bonamik_RemoveReference final
{
public:
	class USQEX_KBD_Component*                    OtherComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReferenceGroupName;                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_RemoveReference) == 0x00E4B5, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_RemoveReference");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_RemoveReference) == 0x00E4B5, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_RemoveReference");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_RemoveReference, OtherComponent) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_RemoveReference::OtherComponent' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_RemoveReference, ReferenceGroupName) == 0x000008, "Member 'SQEX_KBD_Component_SQEX_Bonamik_RemoveReference::ReferenceGroupName' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_RemoveReferenceCommon
// 0x0008 (0x0008 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_RemoveReferenceCommon final
{
public:
	class USQEX_KBD_Component*                    OtherComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_RemoveReferenceCommon) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_RemoveReferenceCommon");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_RemoveReferenceCommon) == 0x000008, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_RemoveReferenceCommon");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_RemoveReferenceCommon, OtherComponent) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_RemoveReferenceCommon::OtherComponent' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_Reset
// 0x0002 (0x0002 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_Reset final
{
public:
	bool                                          bResetPose;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_Reset) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_Reset");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_Reset) == 0x000002, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_Reset");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_Reset, bResetPose) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_Reset::bResetPose' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_Reset, bApplyToChildren) == 0x000001, "Member 'SQEX_KBD_Component_SQEX_Bonamik_Reset::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_RestoreGroupParam
// 0x0010 (0x0010 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_RestoreGroupParam final
{
public:
	TArray<struct FSQEX_BonamikChangingParameter> GroupParam;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_RestoreGroupParam) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_RestoreGroupParam");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_RestoreGroupParam) == 0x000010, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_RestoreGroupParam");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_RestoreGroupParam, GroupParam) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_RestoreGroupParam::GroupParam' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetAnimPos
// 0x0008 (0x0008 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetAnimPos final
{
public:
	int32                                         BoneIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSet;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetAnimPos) == 0x000004, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetAnimPos");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetAnimPos) == 0x000008, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetAnimPos");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetAnimPos, BoneIndex) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetAnimPos::BoneIndex' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetAnimPos, bForceSet) == 0x000004, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetAnimPos::bForceSet' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetAutoDisable
// 0x0001 (0x0001 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetAutoDisable final
{
public:
	bool                                          AutoDisable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetAutoDisable) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetAutoDisable");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetAutoDisable) == 0x000001, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetAutoDisable");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetAutoDisable, AutoDisable) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetAutoDisable::AutoDisable' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetEmissiveWind
// 0x0038 (0x0038 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind final
{
public:
	TArray<class FString>                         Groups;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DirectionSpace;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DirectionVec;                                      // 0x0014(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseStrength;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveAmplitude;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveFreq;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind) == 0x000038, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind, Groups) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind::Groups' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind, DirectionSpace) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind::DirectionSpace' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind, DirectionVec) == 0x000014, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind::DirectionVec' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind, BaseStrength) == 0x000020, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind::BaseStrength' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind, WaveAmplitude) == 0x000024, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind::WaveAmplitude' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind, WaveFreq) == 0x000028, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind::WaveFreq' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind, BlendTime) == 0x00002C, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind::BlendTime' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind, bApplyToChildren) == 0x000030, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEmissiveWind::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetEnable
// 0x0001 (0x0001 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetEnable final
{
public:
	bool                                          NewEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetEnable) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetEnable");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetEnable) == 0x000001, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetEnable");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEnable, NewEnable) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEnable::NewEnable' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetEnableGroundCollision
// 0x0018 (0x0018 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollision final
{
public:
	TArray<class FString>                         Groups;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bNewEnable;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollision) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollision");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollision) == 0x000018, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollision");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollision, Groups) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollision::Groups' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollision, bNewEnable) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollision::bNewEnable' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetEnableGroundCollisionAll
// 0x0001 (0x0001 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollisionAll final
{
public:
	bool                                          bNewEnable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollisionAll) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollisionAll");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollisionAll) == 0x000001, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollisionAll");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollisionAll, bNewEnable) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetEnableGroundCollisionAll::bNewEnable' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetGravity
// 0x000C (0x000C - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetGravity final
{
public:
	struct FVector                                Gravity;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetGravity) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetGravity");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetGravity) == 0x00000C, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetGravity");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetGravity, Gravity) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetGravity::Gravity' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetGroupParam
// 0x0010 (0x0010 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetGroupParam final
{
public:
	TArray<struct FSQEX_BonamikChangingParameter> GroupParam;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetGroupParam) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetGroupParam");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetGroupParam) == 0x000010, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetGroupParam");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetGroupParam, GroupParam) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetGroupParam::GroupParam' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetGroupWeight
// 0x0020 (0x0020 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight final
{
public:
	TArray<class FString>                         Groups;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightChangeTime;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetWhenNonZeroWeight;                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoDisable;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight) == 0x000020, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight, Groups) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight::Groups' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight, Weight) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight::Weight' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight, WeightChangeTime) == 0x000014, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight::WeightChangeTime' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight, ResetWhenNonZeroWeight) == 0x000018, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight::ResetWhenNonZeroWeight' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight, AutoDisable) == 0x000019, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetGroupWeight::AutoDisable' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetInnerConeScale
// 0x0018 (0x0018 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale final
{
public:
	TArray<class FString>                         Groups;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale) == 0x000018, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale, Groups) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale::Groups' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale, Scale) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale::Scale' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale, bApplyToChildren) == 0x000014, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetInnerConeScale::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetLocalForceScale
// 0x0018 (0x0018 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale final
{
public:
	TArray<class FString>                         Groups;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale) == 0x000018, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale, Groups) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale::Groups' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale, Scale) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale::Scale' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale, bApplyToChildren) == 0x000014, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetLocalForceScale::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetMassScale
// 0x0018 (0x0018 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetMassScale final
{
public:
	TArray<class FString>                         Groups;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetMassScale) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetMassScale");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetMassScale) == 0x000018, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetMassScale");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetMassScale, Groups) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetMassScale::Groups' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetMassScale, Scale) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetMassScale::Scale' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetMassScale, bApplyToChildren) == 0x000014, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetMassScale::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetOuterConeScale
// 0x0018 (0x0018 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale final
{
public:
	TArray<class FString>                         Groups;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale) == 0x000018, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale, Groups) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale::Groups' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale, Scale) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale::Scale' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale, bApplyToChildren) == 0x000014, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetOuterConeScale::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetPreRoll
// 0x0008 (0x0008 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetPreRoll final
{
public:
	int32                                         Step;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetPreRoll) == 0x000004, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetPreRoll");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetPreRoll) == 0x000008, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetPreRoll");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetPreRoll, Step) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetPreRoll::Step' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetPreRoll, bApplyToChildren) == 0x000004, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetPreRoll::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetPresetWindScale
// 0x17365 (0x17365 - 0x0000)
struct alignas(0x17365) SQEX_KBD_Component_SQEX_Bonamik_SetPresetWindScale final
{
public:
	TArray<class FName>                           PresetNames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetPresetWindScale) == 0x017365, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetPresetWindScale");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetPresetWindScale) == 0x017365, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetPresetWindScale");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetPresetWindScale, PresetNames) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetPresetWindScale::PresetNames' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetPresetWindScale, Scale) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetPresetWindScale::Scale' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetSpeedRate
// 0x000C (0x000C - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate final
{
public:
	float                                         SpeedRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedRateChangeTime;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate) == 0x000004, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate) == 0x00000C, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate, SpeedRate) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate::SpeedRate' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate, SpeedRateChangeTime) == 0x000004, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate::SpeedRateChangeTime' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate, bApplyToChildren) == 0x000008, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetSpeedRate::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetTeleportDistance
// 0x000C (0x000C - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeleportPreRollStep;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance) == 0x000004, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance) == 0x00000C, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance, Distance) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance::Distance' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance, TeleportPreRollStep) == 0x000004, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance::TeleportPreRollStep' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance, bApplyToChildren) == 0x000008, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetTeleportDistance::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetUpdateOnlyRendered
// 0x0001 (0x0001 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyRendered final
{
public:
	bool                                          bUpdateOnlyRendered;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyRendered) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyRendered");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyRendered) == 0x000001, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyRendered");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyRendered, bUpdateOnlyRendered) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyRendered::bUpdateOnlyRendered' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetUpdateOnlyVisible
// 0x0001 (0x0001 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyVisible final
{
public:
	bool                                          bUpdateOnlyVisible;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyVisible) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyVisible");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyVisible) == 0x000001, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyVisible");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyVisible, bUpdateOnlyVisible) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetUpdateOnlyVisible::bUpdateOnlyVisible' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetWeight
// 0x000C (0x000C - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetWeight final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightChangeTime;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetWhenNonZeroWeight;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoDisable;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetWeight) == 0x000004, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetWeight");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetWeight) == 0x00000C, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetWeight");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetWeight, Weight) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetWeight::Weight' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetWeight, WeightChangeTime) == 0x000004, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetWeight::WeightChangeTime' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetWeight, ResetWhenNonZeroWeight) == 0x000008, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetWeight::ResetWhenNonZeroWeight' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetWeight, AutoDisable) == 0x000009, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetWeight::AutoDisable' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_SetWorldWindScale
// 0x0018 (0x0018 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale final
{
public:
	TArray<class FString>                         Groups;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale) == 0x000018, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale, Groups) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale::Groups' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale, Scale) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale::Scale' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale, bApplyToChildren) == 0x000014, "Member 'SQEX_KBD_Component_SQEX_Bonamik_SetWorldWindScale::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_TurnOff
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0xD0) SQEX_KBD_Component_SQEX_Bonamik_TurnOff final
{
public:
	bool                                          PreserveLatestResult;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Groups;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_TurnOff) == 0x0000D0, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_TurnOff");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_TurnOff) == 0x0000D0, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_TurnOff");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_TurnOff, PreserveLatestResult) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_TurnOff::PreserveLatestResult' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_TurnOff, Groups) == 0x000008, "Member 'SQEX_KBD_Component_SQEX_Bonamik_TurnOff::Groups' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_TurnOff, BlendTime) == 0x000018, "Member 'SQEX_KBD_Component_SQEX_Bonamik_TurnOff::BlendTime' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_SetEmissiveWindScale
// 0x0018 (0x0018 - 0x0000)
struct SQEX_KBD_Component_SQEX_SetEmissiveWindScale final
{
public:
	TArray<class FString>                         Groups;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToChildren;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEX_KBD_Component_SQEX_SetEmissiveWindScale) == 0x000008, "Wrong alignment on SQEX_KBD_Component_SQEX_SetEmissiveWindScale");
static_assert(sizeof(SQEX_KBD_Component_SQEX_SetEmissiveWindScale) == 0x000018, "Wrong size on SQEX_KBD_Component_SQEX_SetEmissiveWindScale");
static_assert(offsetof(SQEX_KBD_Component_SQEX_SetEmissiveWindScale, Groups) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_SetEmissiveWindScale::Groups' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_SetEmissiveWindScale, Scale) == 0x000010, "Member 'SQEX_KBD_Component_SQEX_SetEmissiveWindScale::Scale' has a wrong offset!");
static_assert(offsetof(SQEX_KBD_Component_SQEX_SetEmissiveWindScale, bApplyToChildren) == 0x000014, "Member 'SQEX_KBD_Component_SQEX_SetEmissiveWindScale::bApplyToChildren' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_GetGravity
// 0x000C (0x000C - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_GetGravity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_GetGravity) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_GetGravity");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_GetGravity) == 0x00000C, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_GetGravity");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_GetGravity, ReturnValue) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_GetGravity::ReturnValue' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_GetNumReferences
// 0xB78A (0xB78A - 0x0000)
struct alignas(0xB78A) SQEX_KBD_Component_SQEX_Bonamik_GetNumReferences final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_GetNumReferences) == 0x00B78A, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_GetNumReferences");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_GetNumReferences) == 0x00B78A, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_GetNumReferences");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_GetNumReferences, ReturnValue) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_GetNumReferences::ReturnValue' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_GetSpeedRate
// 0xB78B (0xB78B - 0x0000)
struct alignas(0xB78B) SQEX_KBD_Component_SQEX_Bonamik_GetSpeedRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_GetSpeedRate) == 0x00B78B, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_GetSpeedRate");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_GetSpeedRate) == 0x00B78B, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_GetSpeedRate");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_GetSpeedRate, ReturnValue) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_GetSpeedRate::ReturnValue' has a wrong offset!");

// Function KBDRt.SQEX_KBD_Component.SQEX_Bonamik_IsEnable
// 0x0001 (0x0001 - 0x0000)
struct SQEX_KBD_Component_SQEX_Bonamik_IsEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEX_KBD_Component_SQEX_Bonamik_IsEnable) == 0x000001, "Wrong alignment on SQEX_KBD_Component_SQEX_Bonamik_IsEnable");
static_assert(sizeof(SQEX_KBD_Component_SQEX_Bonamik_IsEnable) == 0x000001, "Wrong size on SQEX_KBD_Component_SQEX_Bonamik_IsEnable");
static_assert(offsetof(SQEX_KBD_Component_SQEX_Bonamik_IsEnable, ReturnValue) == 0x000000, "Member 'SQEX_KBD_Component_SQEX_Bonamik_IsEnable::ReturnValue' has a wrong offset!");

}

