#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Foliage

#include "Basic.hpp"

#include "Foliage_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Foliage.FoliageInstancedStaticMeshComponent
// 0x0000 (0x11635BE0 - 0x11635BE0)
class UFoliageInstancedStaticMeshComponent final : public UHierarchicalInstancedStaticMeshComponent
{
public:
	UMulticastDelegateProperty_                   OnInstanceTakePointDamage;                         // 0x0C20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnInstanceTakeRadialDamage;                        // 0x0C30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageInstancedStaticMeshComponent">();
	}
	static class UFoliageInstancedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageInstancedStaticMeshComponent>();
	}
};
static_assert(alignof(UFoliageInstancedStaticMeshComponent) == 0x11635BE0, "Wrong alignment on UFoliageInstancedStaticMeshComponent");
static_assert(sizeof(UFoliageInstancedStaticMeshComponent) == 0x11635BE0, "Wrong size on UFoliageInstancedStaticMeshComponent");
static_assert(offsetof(UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage) == 0x000C20, "Member 'UFoliageInstancedStaticMeshComponent::OnInstanceTakePointDamage' has a wrong offset!");
static_assert(offsetof(UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage) == 0x000C30, "Member 'UFoliageInstancedStaticMeshComponent::OnInstanceTakeRadialDamage' has a wrong offset!");

// Class Foliage.FoliageStatistics
// 0x0000 (0x0040 - 0x0040)
class UFoliageStatistics final : public UBlueprintFunctionLibrary
{
public:
	static int32 FoliageOverlappingBoxCount(class UObject* WorldContextObject, const class UStaticMesh* StaticMesh, const struct FBox& Box);
	static int32 FoliageOverlappingSphereCount(class UObject* WorldContextObject, const class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageStatistics">();
	}
	static class UFoliageStatistics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageStatistics>();
	}
};
static_assert(alignof(UFoliageStatistics) == 0x000008, "Wrong alignment on UFoliageStatistics");
static_assert(sizeof(UFoliageStatistics) == 0x000040, "Wrong size on UFoliageStatistics");

// Class Foliage.FoliageType
// 0x112F0870 (0x112F08B0 - 0x0040)
#pragma pack(push, 0x1)
class alignas(0x112F08B0) UFoliageType : public UObject
{
public:
	struct FGuid                                  UpdateGuid;                                        // 0x0040(0x112E8D20)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityAdjustmentFactor;                           // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFoliageScaling                               Scaling;                                           // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         ScaleX;                                            // 0x0060(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ScaleY;                                            // 0x0068(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ScaleZ;                                            // 0x0070(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFoliageVertexColorChannelMask         VertexColorMaskByChannel[0x4];                     // 0x0078(0x000C)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EFoliageVertexColorMask                       VertexColorMask;                                   // 0x00A8(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VertexColorMaskThreshold;                          // 0x00AC(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VertexColorMaskInvert : 1;                         // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         ZOffset;                                           // 0x00B4(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AlignToNormal : 1;                                 // 0x00BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlignMaxAngle;                                     // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RandomYaw : 1;                                     // 0x00C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomPitchAngle;                                  // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         GroundSlopeAngle;                                  // 0x00CC(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Height;                                            // 0x00D4(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LandscapeLayers;                                   // 0x00E0(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FName                                   LandscapeLayer;                                    // 0x00F0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CollisionWithWorld : 1;                            // 0x00F8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CollisionScale;                                    // 0x00FC(0x000C)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumLayerWeight;                                // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       MeshBounds;                                        // 0x010C(0x112EB690)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LowBoundOriginRadius;                              // 0x0128(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            Mobility;                                          // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt32Interval                         CullDistance;                                      // 0x0138(0x112F08B0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableStaticLighting : 1;                         // 0x0140(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastShadow : 1;                                    // 0x0140(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectDynamicIndirectLighting : 1;                // 0x0140(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectDistanceFieldLighting : 1;                  // 0x0140(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastDynamicShadow : 1;                            // 0x0140(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastStaticShadow : 1;                             // 0x0140(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowAsTwoSided : 1;                         // 0x0140(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EIndirectLightingCacheQuality                 SqexIndirectLightCacheQuality;                     // 0x0144(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SQEXTranslucencySortPriority;                      // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SqexOcclusionCullLayerNum;                         // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bReceivesDecals : 1;                               // 0x0150(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideLightMapRes : 1;                          // 0x0150(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverriddenLightMapRes;                             // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseAsOccluder : 1;                                // 0x0158(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyInstance                          BodyInstance;                                      // 0x0160(0x11389E60)(Edit, NativeAccessSpecifierPublic)
	EHasCustomNavigableGeometry                   CustomNavigableGeometry;                           // 0x0390(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x0391(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         bRenderCustomDepth : 1;                            // 0x0394(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomDepthStencilValue;                           // 0x0398(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionRadius;                                   // 0x039C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadeRadius;                                       // 0x03A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSteps;                                          // 0x03A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSeedDensity;                                // 0x03A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageSpreadDistance;                             // 0x03AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadVariance;                                    // 0x03B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeedsPerStep;                                      // 0x03B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistributionSeed;                                  // 0x03B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInitialSeedOffset;                              // 0x03BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanGrowInShade;                                   // 0x03C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnsInShade;                                    // 0x03C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C2[0x2];                                      // 0x03C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxInitialAge;                                     // 0x03C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAge;                                            // 0x03C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlapPriority;                                   // 0x03CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ProceduralScale;                                   // 0x03D0(0x112F06E0)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     ScaleCurve;                                        // 0x03D8(0x11102)(Edit, NativeAccessSpecifierPublic)
	int32                                         ChangeCount;                                       // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReapplyDensity : 1;                                // 0x0454(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyRadius : 1;                                 // 0x0454(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyAlignToNormal : 1;                          // 0x0454(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyRandomYaw : 1;                              // 0x0454(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaling : 1;                                // 0x0454(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaleX : 1;                                 // 0x0454(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaleY : 1;                                 // 0x0454(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaleZ : 1;                                 // 0x0454(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyRandomPitchAngle : 1;                       // 0x0455(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyGroundSlope : 1;                            // 0x0455(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyHeight : 1;                                 // 0x0455(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyLandscapeLayers : 1;                        // 0x0455(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyZOffset : 1;                                // 0x0455(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyCollisionWithWorld : 1;                     // 0x0455(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyVertexColorMask : 1;                        // 0x0455(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableDensityScaling : 1;                         // 0x0455(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_456[0x2];                                      // 0x0456(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageType">();
	}
	static class UFoliageType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageType>();
	}
};
#pragma pack(pop)
static_assert(alignof(UFoliageType) == 0x112F08B0, "Wrong alignment on UFoliageType");
static_assert(sizeof(UFoliageType) == 0x112F08B0, "Wrong size on UFoliageType");
static_assert(offsetof(UFoliageType, UpdateGuid) == 0x000040, "Member 'UFoliageType::UpdateGuid' has a wrong offset!");
static_assert(offsetof(UFoliageType, Density) == 0x000050, "Member 'UFoliageType::Density' has a wrong offset!");
static_assert(offsetof(UFoliageType, DensityAdjustmentFactor) == 0x000054, "Member 'UFoliageType::DensityAdjustmentFactor' has a wrong offset!");
static_assert(offsetof(UFoliageType, Radius) == 0x000058, "Member 'UFoliageType::Radius' has a wrong offset!");
static_assert(offsetof(UFoliageType, Scaling) == 0x00005C, "Member 'UFoliageType::Scaling' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleX) == 0x000060, "Member 'UFoliageType::ScaleX' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleY) == 0x000068, "Member 'UFoliageType::ScaleY' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleZ) == 0x000070, "Member 'UFoliageType::ScaleZ' has a wrong offset!");
static_assert(offsetof(UFoliageType, VertexColorMaskByChannel) == 0x000078, "Member 'UFoliageType::VertexColorMaskByChannel' has a wrong offset!");
static_assert(offsetof(UFoliageType, VertexColorMask) == 0x0000A8, "Member 'UFoliageType::VertexColorMask' has a wrong offset!");
static_assert(offsetof(UFoliageType, VertexColorMaskThreshold) == 0x0000AC, "Member 'UFoliageType::VertexColorMaskThreshold' has a wrong offset!");
static_assert(offsetof(UFoliageType, ZOffset) == 0x0000B4, "Member 'UFoliageType::ZOffset' has a wrong offset!");
static_assert(offsetof(UFoliageType, AlignMaxAngle) == 0x0000C0, "Member 'UFoliageType::AlignMaxAngle' has a wrong offset!");
static_assert(offsetof(UFoliageType, RandomPitchAngle) == 0x0000C8, "Member 'UFoliageType::RandomPitchAngle' has a wrong offset!");
static_assert(offsetof(UFoliageType, GroundSlopeAngle) == 0x0000CC, "Member 'UFoliageType::GroundSlopeAngle' has a wrong offset!");
static_assert(offsetof(UFoliageType, Height) == 0x0000D4, "Member 'UFoliageType::Height' has a wrong offset!");
static_assert(offsetof(UFoliageType, LandscapeLayers) == 0x0000E0, "Member 'UFoliageType::LandscapeLayers' has a wrong offset!");
static_assert(offsetof(UFoliageType, LandscapeLayer) == 0x0000F0, "Member 'UFoliageType::LandscapeLayer' has a wrong offset!");
static_assert(offsetof(UFoliageType, CollisionScale) == 0x0000FC, "Member 'UFoliageType::CollisionScale' has a wrong offset!");
static_assert(offsetof(UFoliageType, MinimumLayerWeight) == 0x000108, "Member 'UFoliageType::MinimumLayerWeight' has a wrong offset!");
static_assert(offsetof(UFoliageType, MeshBounds) == 0x00010C, "Member 'UFoliageType::MeshBounds' has a wrong offset!");
static_assert(offsetof(UFoliageType, LowBoundOriginRadius) == 0x000128, "Member 'UFoliageType::LowBoundOriginRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, Mobility) == 0x000134, "Member 'UFoliageType::Mobility' has a wrong offset!");
static_assert(offsetof(UFoliageType, CullDistance) == 0x000138, "Member 'UFoliageType::CullDistance' has a wrong offset!");
static_assert(offsetof(UFoliageType, SqexIndirectLightCacheQuality) == 0x000144, "Member 'UFoliageType::SqexIndirectLightCacheQuality' has a wrong offset!");
static_assert(offsetof(UFoliageType, SQEXTranslucencySortPriority) == 0x000148, "Member 'UFoliageType::SQEXTranslucencySortPriority' has a wrong offset!");
static_assert(offsetof(UFoliageType, SqexOcclusionCullLayerNum) == 0x00014C, "Member 'UFoliageType::SqexOcclusionCullLayerNum' has a wrong offset!");
static_assert(offsetof(UFoliageType, OverriddenLightMapRes) == 0x000154, "Member 'UFoliageType::OverriddenLightMapRes' has a wrong offset!");
static_assert(offsetof(UFoliageType, BodyInstance) == 0x000160, "Member 'UFoliageType::BodyInstance' has a wrong offset!");
static_assert(offsetof(UFoliageType, CustomNavigableGeometry) == 0x000390, "Member 'UFoliageType::CustomNavigableGeometry' has a wrong offset!");
static_assert(offsetof(UFoliageType, LightingChannels) == 0x000391, "Member 'UFoliageType::LightingChannels' has a wrong offset!");
static_assert(offsetof(UFoliageType, CustomDepthStencilValue) == 0x000398, "Member 'UFoliageType::CustomDepthStencilValue' has a wrong offset!");
static_assert(offsetof(UFoliageType, CollisionRadius) == 0x00039C, "Member 'UFoliageType::CollisionRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, ShadeRadius) == 0x0003A0, "Member 'UFoliageType::ShadeRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, NumSteps) == 0x0003A4, "Member 'UFoliageType::NumSteps' has a wrong offset!");
static_assert(offsetof(UFoliageType, InitialSeedDensity) == 0x0003A8, "Member 'UFoliageType::InitialSeedDensity' has a wrong offset!");
static_assert(offsetof(UFoliageType, AverageSpreadDistance) == 0x0003AC, "Member 'UFoliageType::AverageSpreadDistance' has a wrong offset!");
static_assert(offsetof(UFoliageType, SpreadVariance) == 0x0003B0, "Member 'UFoliageType::SpreadVariance' has a wrong offset!");
static_assert(offsetof(UFoliageType, SeedsPerStep) == 0x0003B4, "Member 'UFoliageType::SeedsPerStep' has a wrong offset!");
static_assert(offsetof(UFoliageType, DistributionSeed) == 0x0003B8, "Member 'UFoliageType::DistributionSeed' has a wrong offset!");
static_assert(offsetof(UFoliageType, MaxInitialSeedOffset) == 0x0003BC, "Member 'UFoliageType::MaxInitialSeedOffset' has a wrong offset!");
static_assert(offsetof(UFoliageType, bCanGrowInShade) == 0x0003C0, "Member 'UFoliageType::bCanGrowInShade' has a wrong offset!");
static_assert(offsetof(UFoliageType, bSpawnsInShade) == 0x0003C1, "Member 'UFoliageType::bSpawnsInShade' has a wrong offset!");
static_assert(offsetof(UFoliageType, MaxInitialAge) == 0x0003C4, "Member 'UFoliageType::MaxInitialAge' has a wrong offset!");
static_assert(offsetof(UFoliageType, MaxAge) == 0x0003C8, "Member 'UFoliageType::MaxAge' has a wrong offset!");
static_assert(offsetof(UFoliageType, OverlapPriority) == 0x0003CC, "Member 'UFoliageType::OverlapPriority' has a wrong offset!");
static_assert(offsetof(UFoliageType, ProceduralScale) == 0x0003D0, "Member 'UFoliageType::ProceduralScale' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleCurve) == 0x0003D8, "Member 'UFoliageType::ScaleCurve' has a wrong offset!");
static_assert(offsetof(UFoliageType, ChangeCount) == 0x000450, "Member 'UFoliageType::ChangeCount' has a wrong offset!");

// Class Foliage.FoliageType_InstancedStaticMesh
// 0x0000 (0x112F08B0 - 0x112F08B0)
class UFoliageType_InstancedStaticMesh final : public UFoliageType
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0458(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             OverrideMaterials;                                 // 0x0460(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TSubclassOf<class UFoliageInstancedStaticMeshComponent> ComponentClass;                                    // 0x0470(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_478[0x8];                                      // 0x0478(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageType_InstancedStaticMesh">();
	}
	static class UFoliageType_InstancedStaticMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageType_InstancedStaticMesh>();
	}
};
static_assert(alignof(UFoliageType_InstancedStaticMesh) == 0x112F08B0, "Wrong alignment on UFoliageType_InstancedStaticMesh");
static_assert(sizeof(UFoliageType_InstancedStaticMesh) == 0x112F08B0, "Wrong size on UFoliageType_InstancedStaticMesh");
static_assert(offsetof(UFoliageType_InstancedStaticMesh, Mesh) == 0x000458, "Member 'UFoliageType_InstancedStaticMesh::Mesh' has a wrong offset!");
static_assert(offsetof(UFoliageType_InstancedStaticMesh, OverrideMaterials) == 0x000460, "Member 'UFoliageType_InstancedStaticMesh::OverrideMaterials' has a wrong offset!");
static_assert(offsetof(UFoliageType_InstancedStaticMesh, ComponentClass) == 0x000470, "Member 'UFoliageType_InstancedStaticMesh::ComponentClass' has a wrong offset!");

// Class Foliage.InstancedFoliageActor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class AInstancedFoliageActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InstancedFoliageActor">();
	}
	static class AInstancedFoliageActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInstancedFoliageActor>();
	}
};
static_assert(alignof(AInstancedFoliageActor) == 0x1EF72E00, "Wrong alignment on AInstancedFoliageActor");
static_assert(sizeof(AInstancedFoliageActor) == 0x1EF72E00, "Wrong size on AInstancedFoliageActor");

// Class Foliage.InteractiveFoliageActor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class AInteractiveFoliageActor final : public AStaticMeshActor
{
public:
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x03F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                TouchingActorEntryPosition;                        // 0x03F8(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                FoliageVelocity;                                   // 0x0404(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                FoliageForce;                                      // 0x0410(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                FoliagePosition;                                   // 0x041C(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FoliageDamageImpulseScale;                         // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageTouchImpulseScale;                          // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageStiffness;                                  // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageStiffnessQuadratic;                         // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageDamping;                                    // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageImpulse;                                  // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTouchImpulse;                                   // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForce;                                          // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractiveFoliageActor">();
	}
	static class AInteractiveFoliageActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInteractiveFoliageActor>();
	}
};
static_assert(alignof(AInteractiveFoliageActor) == 0x1EF72E00, "Wrong alignment on AInteractiveFoliageActor");
static_assert(sizeof(AInteractiveFoliageActor) == 0x1EF72E00, "Wrong size on AInteractiveFoliageActor");
static_assert(offsetof(AInteractiveFoliageActor, CapsuleComponent) == 0x0003F0, "Member 'AInteractiveFoliageActor::CapsuleComponent' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, TouchingActorEntryPosition) == 0x0003F8, "Member 'AInteractiveFoliageActor::TouchingActorEntryPosition' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageVelocity) == 0x000404, "Member 'AInteractiveFoliageActor::FoliageVelocity' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageForce) == 0x000410, "Member 'AInteractiveFoliageActor::FoliageForce' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliagePosition) == 0x00041C, "Member 'AInteractiveFoliageActor::FoliagePosition' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageDamageImpulseScale) == 0x000428, "Member 'AInteractiveFoliageActor::FoliageDamageImpulseScale' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageTouchImpulseScale) == 0x00042C, "Member 'AInteractiveFoliageActor::FoliageTouchImpulseScale' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageStiffness) == 0x000430, "Member 'AInteractiveFoliageActor::FoliageStiffness' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageStiffnessQuadratic) == 0x000434, "Member 'AInteractiveFoliageActor::FoliageStiffnessQuadratic' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageDamping) == 0x000438, "Member 'AInteractiveFoliageActor::FoliageDamping' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, MaxDamageImpulse) == 0x00043C, "Member 'AInteractiveFoliageActor::MaxDamageImpulse' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, MaxTouchImpulse) == 0x000440, "Member 'AInteractiveFoliageActor::MaxTouchImpulse' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, MaxForce) == 0x000444, "Member 'AInteractiveFoliageActor::MaxForce' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, Mass) == 0x000448, "Member 'AInteractiveFoliageActor::Mass' has a wrong offset!");

// Class Foliage.InteractiveFoliageComponent
// 0x0000 (0x11635BE0 - 0x11635BE0)
class UInteractiveFoliageComponent final : public UStaticMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractiveFoliageComponent">();
	}
	static class UInteractiveFoliageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInteractiveFoliageComponent>();
	}
};
static_assert(alignof(UInteractiveFoliageComponent) == 0x11635BE0, "Wrong alignment on UInteractiveFoliageComponent");
static_assert(sizeof(UInteractiveFoliageComponent) == 0x11635BE0, "Wrong size on UInteractiveFoliageComponent");

// Class Foliage.ProceduralFoliageBlockingVolume
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class AProceduralFoliageBlockingVolume final : public AVolume
{
public:
	class AProceduralFoliageVolume*               ProceduralFoliageVolume;                           // 0x0420(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageBlockingVolume">();
	}
	static class AProceduralFoliageBlockingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProceduralFoliageBlockingVolume>();
	}
};
static_assert(alignof(AProceduralFoliageBlockingVolume) == 0x1EF72E00, "Wrong alignment on AProceduralFoliageBlockingVolume");
static_assert(sizeof(AProceduralFoliageBlockingVolume) == 0x1EF72E00, "Wrong size on AProceduralFoliageBlockingVolume");
static_assert(offsetof(AProceduralFoliageBlockingVolume, ProceduralFoliageVolume) == 0x000420, "Member 'AProceduralFoliageBlockingVolume::ProceduralFoliageVolume' has a wrong offset!");

// Class Foliage.ProceduralFoliageComponent
// 0x112DB993 (0x112E8D20 - 0xD38D)
class UProceduralFoliageComponent final : public UActorComponent
{
public:
	class UProceduralFoliageSpawner*              FoliageSpawner;                                    // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileOverlap;                                       // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVolume*                                SpawningVolume;                                    // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ProceduralGuid;                                    // 0x0218(0x112E8D20)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageComponent">();
	}
	static class UProceduralFoliageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralFoliageComponent>();
	}
};
static_assert(alignof(UProceduralFoliageComponent) == 0x112E8D20, "Wrong alignment on UProceduralFoliageComponent");
static_assert(sizeof(UProceduralFoliageComponent) == 0x112E8D20, "Wrong size on UProceduralFoliageComponent");
static_assert(offsetof(UProceduralFoliageComponent, FoliageSpawner) == 0x000200, "Member 'UProceduralFoliageComponent::FoliageSpawner' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageComponent, TileOverlap) == 0x000208, "Member 'UProceduralFoliageComponent::TileOverlap' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageComponent, SpawningVolume) == 0x000210, "Member 'UProceduralFoliageComponent::SpawningVolume' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageComponent, ProceduralGuid) == 0x000218, "Member 'UProceduralFoliageComponent::ProceduralGuid' has a wrong offset!");

// Class Foliage.ProceduralFoliageSpawner
// 0x0048 (0x0088 - 0x0040)
class UProceduralFoliageSpawner final : public UObject
{
public:
	int32                                         RandomSeed;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileSize;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumUniqueTiles;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumQuadTreeSize;                               // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFoliageTypeObject>             FoliageTypes;                                      // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bNeedsSimulation;                                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x1F];                                      // 0x0069(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Simulate(int32 NumSteps);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageSpawner">();
	}
	static class UProceduralFoliageSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralFoliageSpawner>();
	}
};
static_assert(alignof(UProceduralFoliageSpawner) == 0x000008, "Wrong alignment on UProceduralFoliageSpawner");
static_assert(sizeof(UProceduralFoliageSpawner) == 0x000088, "Wrong size on UProceduralFoliageSpawner");
static_assert(offsetof(UProceduralFoliageSpawner, RandomSeed) == 0x000040, "Member 'UProceduralFoliageSpawner::RandomSeed' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, TileSize) == 0x000044, "Member 'UProceduralFoliageSpawner::TileSize' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, NumUniqueTiles) == 0x000048, "Member 'UProceduralFoliageSpawner::NumUniqueTiles' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, MinimumQuadTreeSize) == 0x00004C, "Member 'UProceduralFoliageSpawner::MinimumQuadTreeSize' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, FoliageTypes) == 0x000058, "Member 'UProceduralFoliageSpawner::FoliageTypes' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, bNeedsSimulation) == 0x000068, "Member 'UProceduralFoliageSpawner::bNeedsSimulation' has a wrong offset!");

// Class Foliage.ProceduralFoliageTile
// 0x0130 (0x0170 - 0x0040)
class UProceduralFoliageTile final : public UObject
{
public:
	class UProceduralFoliageSpawner*              FoliageSpawner;                                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0xA0];                                      // 0x0048(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProceduralFoliageInstance>     InstancesArray;                                    // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x78];                                      // 0x00F8(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageTile">();
	}
	static class UProceduralFoliageTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralFoliageTile>();
	}
};
static_assert(alignof(UProceduralFoliageTile) == 0x000008, "Wrong alignment on UProceduralFoliageTile");
static_assert(sizeof(UProceduralFoliageTile) == 0x000170, "Wrong size on UProceduralFoliageTile");
static_assert(offsetof(UProceduralFoliageTile, FoliageSpawner) == 0x000040, "Member 'UProceduralFoliageTile::FoliageSpawner' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageTile, InstancesArray) == 0x0000E8, "Member 'UProceduralFoliageTile::InstancesArray' has a wrong offset!");

// Class Foliage.ProceduralFoliageVolume
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class AProceduralFoliageVolume final : public AVolume
{
public:
	class UProceduralFoliageComponent*            ProceduralComponent;                               // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageVolume">();
	}
	static class AProceduralFoliageVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProceduralFoliageVolume>();
	}
};
static_assert(alignof(AProceduralFoliageVolume) == 0x1EF72E00, "Wrong alignment on AProceduralFoliageVolume");
static_assert(sizeof(AProceduralFoliageVolume) == 0x1EF72E00, "Wrong size on AProceduralFoliageVolume");
static_assert(offsetof(AProceduralFoliageVolume, ProceduralComponent) == 0x000420, "Member 'AProceduralFoliageVolume::ProceduralComponent' has a wrong offset!");

}

