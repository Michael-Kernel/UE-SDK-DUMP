#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum CriWareRuntime.EAtomComponentStatus
// NumValues: 0x0006
enum class EAtomComponentStatus : uint8
{
	Stop                                     = 0,
	Prep                                     = 1,
	Playing                                  = 2,
	PlayEnd                                  = 3,
	Error                                    = 4,
	EAtomComponentStatus_MAX                 = 5,
};

// Enum CriWareRuntime.ECriFsLoaderStatus
// NumValues: 0x0005
enum class ECriFsLoaderStatus : uint8
{
	Stop                                     = 0,
	Loading                                  = 1,
	Complete                                 = 2,
	Error                                    = 3,
	ECriFsLoaderStatus_MAX                   = 4,
};

// Enum CriWareRuntime.EManaComponentStatus
// NumValues: 0x000A
enum class EManaComponentStatus : uint8
{
	Stop                                     = 0,
	DecHdr                                   = 1,
	WaitPrep                                 = 2,
	Prep                                     = 3,
	Ready                                    = 4,
	Playing                                  = 5,
	PlayEnd                                  = 6,
	Error                                    = 7,
	StopProcessing                           = 8,
	EManaComponentStatus_MAX                 = 9,
};

// Enum CriWareRuntime.EManaSubtitlesEncoding
// NumValues: 0x0005
enum class EManaSubtitlesEncoding : uint8
{
	Default                                  = 0,
	ANSI                                     = 1,
	Utf8                                     = 2,
	Utf16                                    = 3,
	EManaSubtitlesEncoding_MAX               = 4,
};

// Enum CriWareRuntime.EEngineIniFileType
// NumValues: 0x0009
enum class EEngineIniFileType : uint8
{
	EngBaseEngineIni                         = 0,
	EngWindowsEngineIni                      = 1,
	EngPS4EngineIni                          = 2,
	EngXboxOneEngineIni                      = 3,
	ProjDefaultEngineIni                     = 4,
	ProjWindowsEngineIni                     = 5,
	ProjPS4EngineIni                         = 6,
	ProjXboxOneEngineIni                     = 7,
	EEngineIniFileType_MAX                   = 8,
};

// Enum CriWareRuntime.EManaComponentTextureType
// NumValues: 0x0006
enum class EManaComponentTextureType : uint8
{
	Texture_Y                                = 0,
	Texture_U                                = 1,
	Texture_V                                = 2,
	Texture_A                                = 3,
	Texture_UV                               = 4,
	Texture_MAX                              = 5,
};

// Enum CriWareRuntime.EManaMovieType
// NumValues: 0x0005
enum class EManaMovieType : uint8
{
	SofdecPrime                              = 0,
	H264                                     = 1,
	Num                                      = 2,
	Unknown                                  = 255,
	EManaMovieType_MAX                       = 256,
};

// ScriptStruct CriWareRuntime.AtomSelectorParam
// 0x1148A850 (0x1148A850 - 0x0000)
struct alignas(0x1148A850) FAtomSelectorParam final
{
public:
	class FString                                 Selector;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomSelectorParam) == 0x1148A850, "Wrong alignment on FAtomSelectorParam");
static_assert(sizeof(FAtomSelectorParam) == 0x1148A850, "Wrong size on FAtomSelectorParam");
static_assert(offsetof(FAtomSelectorParam, Selector) == 0x000000, "Member 'FAtomSelectorParam::Selector' has a wrong offset!");
static_assert(offsetof(FAtomSelectorParam, Label) == 0x000010, "Member 'FAtomSelectorParam::Label' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueIdTrackKeyframe
// 0x1168F000 (0x1168F000 - 0x0000)
struct alignas(0x1168F000) FAtomCueIdTrackKeyframe final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueIdTrackKeyframe) == 0x1168F000, "Wrong alignment on FAtomCueIdTrackKeyframe");
static_assert(sizeof(FAtomCueIdTrackKeyframe) == 0x1168F000, "Wrong size on FAtomCueIdTrackKeyframe");
static_assert(offsetof(FAtomCueIdTrackKeyframe, Time) == 0x000000, "Member 'FAtomCueIdTrackKeyframe::Time' has a wrong offset!");
static_assert(offsetof(FAtomCueIdTrackKeyframe, CueId) == 0x000004, "Member 'FAtomCueIdTrackKeyframe::CueId' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomTrackKeyframe
// 0x0010 (0x0010 - 0x0000)
struct FAtomTrackKeyframe final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          Cue;                                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomTrackKeyframe) == 0x000008, "Wrong alignment on FAtomTrackKeyframe");
static_assert(sizeof(FAtomTrackKeyframe) == 0x000010, "Wrong size on FAtomTrackKeyframe");
static_assert(offsetof(FAtomTrackKeyframe, Time) == 0x000000, "Member 'FAtomTrackKeyframe::Time' has a wrong offset!");
static_assert(offsetof(FAtomTrackKeyframe, Cue) == 0x000008, "Member 'FAtomTrackKeyframe::Cue' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaVideoTrackInfo
// 0x112EA720 (0x112EA720 - 0x0000)
struct FManaVideoTrackInfo final
{
public:
	struct FIntPoint                              TextureDimension;                                  // 0x0000(0x112EA720)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              DisplayDimension;                                  // 0x0008(0x112EA720)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRate;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFrames;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlphaMovie;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaMovieType                                Type;                                              // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FManaVideoTrackInfo) == 0x112EA720, "Wrong alignment on FManaVideoTrackInfo");
static_assert(sizeof(FManaVideoTrackInfo) == 0x112EA720, "Wrong size on FManaVideoTrackInfo");
static_assert(offsetof(FManaVideoTrackInfo, TextureDimension) == 0x000000, "Member 'FManaVideoTrackInfo::TextureDimension' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, DisplayDimension) == 0x000008, "Member 'FManaVideoTrackInfo::DisplayDimension' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, FrameRate) == 0x000010, "Member 'FManaVideoTrackInfo::FrameRate' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, TotalFrames) == 0x000014, "Member 'FManaVideoTrackInfo::TotalFrames' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, bIsAlphaMovie) == 0x000018, "Member 'FManaVideoTrackInfo::bIsAlphaMovie' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, Type) == 0x000019, "Member 'FManaVideoTrackInfo::Type' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAisacControlParam
// 0x1148AB60 (0x1148AB60 - 0x0000)
struct alignas(0x1148AB60) FAtomAisacControlParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomAisacControlParam) == 0x1148AB60, "Wrong alignment on FAtomAisacControlParam");
static_assert(sizeof(FAtomAisacControlParam) == 0x1148AB60, "Wrong size on FAtomAisacControlParam");
static_assert(offsetof(FAtomAisacControlParam, Name) == 0x000000, "Member 'FAtomAisacControlParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomAisacControlParam, Value) == 0x000010, "Member 'FAtomAisacControlParam::Value' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomTriggerRow
// 0x0000 (0x11413080 - 0x11413080)
struct FAtomTriggerRow final : public FTableRowBase
{
public:
	float                                         Time;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Bone;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Cue;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomTriggerRow) == 0x11413080, "Wrong alignment on FAtomTriggerRow");
static_assert(sizeof(FAtomTriggerRow) == 0x11413080, "Wrong size on FAtomTriggerRow");
static_assert(offsetof(FAtomTriggerRow, Time) == 0x000008, "Member 'FAtomTriggerRow::Time' has a wrong offset!");
static_assert(offsetof(FAtomTriggerRow, Bone) == 0x000010, "Member 'FAtomTriggerRow::Bone' has a wrong offset!");
static_assert(offsetof(FAtomTriggerRow, Cue) == 0x000018, "Member 'FAtomTriggerRow::Cue' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaEventPointInfo
// 0x1148C8C0 (0x1148C8C0 - 0x0000)
struct alignas(0x1148C8C0) FManaEventPointInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parameter;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManaEventPointInfo) == 0x1148C8C0, "Wrong alignment on FManaEventPointInfo");
static_assert(sizeof(FManaEventPointInfo) == 0x1148C8C0, "Wrong size on FManaEventPointInfo");
static_assert(offsetof(FManaEventPointInfo, Name) == 0x000000, "Member 'FManaEventPointInfo::Name' has a wrong offset!");
static_assert(offsetof(FManaEventPointInfo, Time) == 0x000010, "Member 'FManaEventPointInfo::Time' has a wrong offset!");
static_assert(offsetof(FManaEventPointInfo, Type) == 0x000014, "Member 'FManaEventPointInfo::Type' has a wrong offset!");
static_assert(offsetof(FManaEventPointInfo, Parameter) == 0x000018, "Member 'FManaEventPointInfo::Parameter' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueNameTrackKeyframe
// 0x1168F1D0 (0x1168F1D0 - 0x0000)
struct alignas(0x1168F1D0) FAtomCueNameTrackKeyframe final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueNameTrackKeyframe) == 0x1168F1D0, "Wrong alignment on FAtomCueNameTrackKeyframe");
static_assert(sizeof(FAtomCueNameTrackKeyframe) == 0x1168F1D0, "Wrong size on FAtomCueNameTrackKeyframe");
static_assert(offsetof(FAtomCueNameTrackKeyframe, Time) == 0x000000, "Member 'FAtomCueNameTrackKeyframe::Time' has a wrong offset!");
static_assert(offsetof(FAtomCueNameTrackKeyframe, CueName) == 0x000008, "Member 'FAtomCueNameTrackKeyframe::CueName' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomSelectorTrackKeyframe
// 0x1168F3A0 (0x1168F3A0 - 0x0000)
struct alignas(0x1168F3A0) FAtomSelectorTrackKeyframe final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SelectorLabel;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomSelectorTrackKeyframe) == 0x1168F3A0, "Wrong alignment on FAtomSelectorTrackKeyframe");
static_assert(sizeof(FAtomSelectorTrackKeyframe) == 0x1168F3A0, "Wrong size on FAtomSelectorTrackKeyframe");
static_assert(offsetof(FAtomSelectorTrackKeyframe, Time) == 0x000000, "Member 'FAtomSelectorTrackKeyframe::Time' has a wrong offset!");
static_assert(offsetof(FAtomSelectorTrackKeyframe, SelectorLabel) == 0x000008, "Member 'FAtomSelectorTrackKeyframe::SelectorLabel' has a wrong offset!");

// ScriptStruct CriWareRuntime.MovieSceneAtomSectionTemplateData
// 0x1168F6C0 (0x1168F6C0 - 0x0000)
struct alignas(0x1168F6C0) FMovieSceneAtomSectionTemplateData final
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtomStartOffset;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            AtomRange;                                         // 0x000C(0x112EFEC0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRichCurve                             AtomPitchMultiplierCurve;                          // 0x0020(0x11102)(NativeAccessSpecifierPublic)
	struct FRichCurve                             AtomVolumeCurve;                                   // 0x0090(0x11102)(NativeAccessSpecifierPublic)
	int32                                         RowIndex;                                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneAtomSectionTemplateData) == 0x1168F6C0, "Wrong alignment on FMovieSceneAtomSectionTemplateData");
static_assert(sizeof(FMovieSceneAtomSectionTemplateData) == 0x1168F6C0, "Wrong size on FMovieSceneAtomSectionTemplateData");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, Sound) == 0x000000, "Member 'FMovieSceneAtomSectionTemplateData::Sound' has a wrong offset!");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, AtomStartOffset) == 0x000008, "Member 'FMovieSceneAtomSectionTemplateData::AtomStartOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, AtomRange) == 0x00000C, "Member 'FMovieSceneAtomSectionTemplateData::AtomRange' has a wrong offset!");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, AtomPitchMultiplierCurve) == 0x000020, "Member 'FMovieSceneAtomSectionTemplateData::AtomPitchMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, AtomVolumeCurve) == 0x000090, "Member 'FMovieSceneAtomSectionTemplateData::AtomVolumeCurve' has a wrong offset!");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, RowIndex) == 0x000100, "Member 'FMovieSceneAtomSectionTemplateData::RowIndex' has a wrong offset!");

// ScriptStruct CriWareRuntime.MovieSceneAtomSectionTemplate
// 0x1167D560 (0x1168F6C0 - 0x12160)
struct FMovieSceneAtomSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneAtomSectionTemplateData     AtomData;                                          // 0x0020(0x1168F6C0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneAtomSectionTemplate) == 0x1168F6C0, "Wrong alignment on FMovieSceneAtomSectionTemplate");
static_assert(sizeof(FMovieSceneAtomSectionTemplate) == 0x1168F6C0, "Wrong size on FMovieSceneAtomSectionTemplate");
static_assert(offsetof(FMovieSceneAtomSectionTemplate, AtomData) == 0x000020, "Member 'FMovieSceneAtomSectionTemplate::AtomData' has a wrong offset!");

}

