#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BonamikRt

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "BonamikRt_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class BonamikRt.SQEX_Bonamik_Component
// 0x0000 (0x112E9AF0 - 0x112E9AF0)
class USQEX_Bonamik_Component final : public USceneComponent
{
public:
	uint8                                         Pad_418[0x18];                                     // 0x0418(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasSkeletalMeshSkippedTransforms;                 // 0x0430(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEX_BonamikAsset*                     M_BonamikAsset;                                    // 0x0438(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0440(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterMovementComponent*            CharacterMovementComponent;                        // 0x0448(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_450[0x8];                                      // 0x0450(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          M_BonamikEnable;                                   // 0x0458(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          M_BonamikAutoDisable;                              // 0x0459(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAccurateBoundsUpdate;                             // 0x045A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_45B[0x1];                                      // 0x045B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRollStepOnResume;                               // 0x045C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevScreenSize;                                    // 0x0460(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_464[0x3C];                                     // 0x0464(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SQEX_Bonamik_AddReference(class USQEX_Bonamik_Component* OtherComponent, const class FString& ReferenceGroupName);
	void SQEX_Bonamik_AddReferenceCommon(class USQEX_Bonamik_Component* OtherComponent);
	void SQEX_Bonamik_AddReferenceDefault();
	void SQEX_Bonamik_ClearAllPresetWind();
	void SQEX_Bonamik_ClearEmissiveWind(float BlendTime, bool bApplyToChildren);
	void SQEX_Bonamik_DisablePresetWind(const TArray<class FName>& PresetNames);
	void SQEX_Bonamik_EnablePresetWind(const TArray<class FName>& PresetNames);
	float SQEX_Bonamik_GetTeleportDistance();
	float SQEX_Bonamik_GetWeight();
	bool SQEX_Bonamik_IsAutoDisable();
	bool SQEX_Bonamik_IsEnable();
	bool SQEX_Bonamik_IsSetup();
	void SQEX_Bonamik_ReinitializeSimulationPose();
	void SQEX_Bonamik_RemoveReference(class USQEX_Bonamik_Component* OtherComponent, const class FString& ReferenceGroupName);
	void SQEX_Bonamik_RemoveReferenceAll();
	void SQEX_Bonamik_RemoveReferenceCommon(class USQEX_Bonamik_Component* OtherComponent);
	void SQEX_Bonamik_RemoveReferenceDefault();
	void SQEX_Bonamik_Reset(bool bResetPose, bool bApplyToChildren);
	void SQEX_Bonamik_ResetGravity();
	void SQEX_Bonamik_RestoreDefaultParameters();
	void SQEX_Bonamik_RestoreGroupParam(const TArray<struct FSQEX_BonamikChangingParameter>& GroupParam);
	void SQEX_Bonamik_SetAnimPos(int32 BoneIndex, bool bForceSet);
	void SQEX_Bonamik_SetAutoDisable(bool AutoDisable);
	void SQEX_Bonamik_SetEmissiveWind(const TArray<class FString>& Groups, int32 DirectionSpace, const struct FVector& DirectionVec, float BaseStrength, float WaveAmplitude, float WaveFreq, float BlendTime, bool bApplyToChildren);
	void SQEX_Bonamik_SetEnable(bool NewEnable);
	void SQEX_Bonamik_SetEnableGroundCollision(const TArray<class FString>& Groups, bool bNewEnable);
	void SQEX_Bonamik_SetEnableGroundCollisionAll(bool bNewEnable);
	void SQEX_Bonamik_SetGravity(const struct FVector& Gravity);
	void SQEX_Bonamik_SetGroupParam(const TArray<struct FSQEX_BonamikChangingParameter>& GroupParam);
	void SQEX_Bonamik_SetGroupWeight(const TArray<class FString>& Groups, float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetInnerConeScale(const TArray<class FString>& Groups, float Scale);
	void SQEX_Bonamik_SetLocalForceScale(const TArray<class FString>& Groups, float Scale);
	void SQEX_Bonamik_SetOuterConeScale(const TArray<class FString>& Groups, float Scale);
	void SQEX_Bonamik_SetPreRoll(int32 Step, bool bApplyToChildren);
	void SQEX_Bonamik_SetPresetWindScale(const TArray<class FName>& PresetNames, const float Scale);
	void SQEX_Bonamik_SetSpeedRate(float SpeedRate, float SpeedRateChangeTime, bool bApplyToChildren);
	void SQEX_Bonamik_SetTeleportDistance(float Distance, int32 TeleportPreRollStep, bool bApplyToChildren);
	void SQEX_Bonamik_SetUpdateOnlyRendered(bool bUpdateOnlyRendered);
	void SQEX_Bonamik_SetUpdateOnlyVisible(bool bUpdateOnlyVisible);
	void SQEX_Bonamik_SetWeight(float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetWorldWindScale(const TArray<class FString>& Groups, float Scale);
	void SQEX_Bonamik_TurnOff(bool PreserveLatestResult, const TArray<class FString>& Groups, float BlendTime);
	void SQEX_SetEmissiveWindScale(const TArray<class FString>& Groups, const float Scale, bool bApplyToChildren);

	struct FVector SQEX_Bonamik_GetGravity() const;
	float SQEX_Bonamik_GetSpeedRate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_Bonamik_Component">();
	}
	static class USQEX_Bonamik_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_Bonamik_Component>();
	}
};
static_assert(alignof(USQEX_Bonamik_Component) == 0x112E9AF0, "Wrong alignment on USQEX_Bonamik_Component");
static_assert(sizeof(USQEX_Bonamik_Component) == 0x112E9AF0, "Wrong size on USQEX_Bonamik_Component");
static_assert(offsetof(USQEX_Bonamik_Component, bHasSkeletalMeshSkippedTransforms) == 0x000430, "Member 'USQEX_Bonamik_Component::bHasSkeletalMeshSkippedTransforms' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, M_BonamikAsset) == 0x000438, "Member 'USQEX_Bonamik_Component::M_BonamikAsset' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, SkeletalMeshComponent) == 0x000440, "Member 'USQEX_Bonamik_Component::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, CharacterMovementComponent) == 0x000448, "Member 'USQEX_Bonamik_Component::CharacterMovementComponent' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, M_BonamikEnable) == 0x000458, "Member 'USQEX_Bonamik_Component::M_BonamikEnable' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, M_BonamikAutoDisable) == 0x000459, "Member 'USQEX_Bonamik_Component::M_BonamikAutoDisable' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, bAccurateBoundsUpdate) == 0x00045A, "Member 'USQEX_Bonamik_Component::bAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, PreRollStepOnResume) == 0x00045C, "Member 'USQEX_Bonamik_Component::PreRollStepOnResume' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, PrevScreenSize) == 0x000460, "Member 'USQEX_Bonamik_Component::PrevScreenSize' has a wrong offset!");

// Class BonamikRt.SQEX_GameMode
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
#pragma pack(push, 0x1)
class alignas(0x1EF72E00) ASQEX_GameMode : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_GameMode">();
	}
	static class ASQEX_GameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_GameMode>();
	}
};
#pragma pack(pop)
static_assert(alignof(ASQEX_GameMode) == 0x1EF72E00, "Wrong alignment on ASQEX_GameMode");
static_assert(sizeof(ASQEX_GameMode) == 0x1EF72E00, "Wrong size on ASQEX_GameMode");

// Class BonamikRt.SQEX_BonamikWind_Actor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
#pragma pack(push, 0x1)
class alignas(0x1EF72E00) ASQEX_BonamikWind_Actor : public AInfo
{
public:
	class USQEX_BonamikWind_Component*            M_BonamikWind_Component;                           // 0x03E0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Enable(bool Value);
	void SetWindScale(float Value);

	float GetWindScale() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind_Actor">();
	}
	static class ASQEX_BonamikWind_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_BonamikWind_Actor>();
	}
};
#pragma pack(pop)
static_assert(alignof(ASQEX_BonamikWind_Actor) == 0x1EF72E00, "Wrong alignment on ASQEX_BonamikWind_Actor");
static_assert(sizeof(ASQEX_BonamikWind_Actor) == 0x1EF72E00, "Wrong size on ASQEX_BonamikWind_Actor");
static_assert(offsetof(ASQEX_BonamikWind_Actor, M_BonamikWind_Component) == 0x0003E0, "Member 'ASQEX_BonamikWind_Actor::M_BonamikWind_Component' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikCustomWind_Actor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEX_BonamikCustomWind_Actor final : public ASQEX_BonamikWind_Actor
{
public:
	struct FCustomWindSettings                    M_WindSetting;                                     // 0x03E8(0x115E1420)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikCustomWind_Actor">();
	}
	static class ASQEX_BonamikCustomWind_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_BonamikCustomWind_Actor>();
	}
};
static_assert(alignof(ASQEX_BonamikCustomWind_Actor) == 0x1EF72E00, "Wrong alignment on ASQEX_BonamikCustomWind_Actor");
static_assert(sizeof(ASQEX_BonamikCustomWind_Actor) == 0x1EF72E00, "Wrong size on ASQEX_BonamikCustomWind_Actor");
static_assert(offsetof(ASQEX_BonamikCustomWind_Actor, M_WindSetting) == 0x0003E8, "Member 'ASQEX_BonamikCustomWind_Actor::M_WindSetting' has a wrong offset!");

// Class BonamikRt.SQEX_WorldSettings
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
#pragma pack(push, 0x1)
class alignas(0x1EF72E00) ASQEX_WorldSettings : public AWorldSettings
{
public:
	struct FSQEX_BonamikPresetWindSettings        M_BonamikPresetWindSettings[0xA];                  // 0x0680(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_WorldSettings">();
	}
	static class ASQEX_WorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_WorldSettings>();
	}
};
#pragma pack(pop)
static_assert(alignof(ASQEX_WorldSettings) == 0x1EF72E00, "Wrong alignment on ASQEX_WorldSettings");
static_assert(sizeof(ASQEX_WorldSettings) == 0x1EF72E00, "Wrong size on ASQEX_WorldSettings");
static_assert(offsetof(ASQEX_WorldSettings, M_BonamikPresetWindSettings) == 0x000680, "Member 'ASQEX_WorldSettings::M_BonamikPresetWindSettings' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikAsset
// 0x0580 (0x05C8 - 0x0048)
class USQEX_BonamikAsset final : public UDataAsset
{
public:
	class USkeletalMesh*                          M_SkeletalMesh;                                    // 0x0048(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_VersionNo;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_BonamikSceneManagerDesc          M_SceneManager;                                    // 0x0058(0x0480)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikSolverDesc>        M_Solvers;                                         // 0x04D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikBodyDesc>          M_Bodies;                                          // 0x04E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikLinkDesc>          M_Links;                                           // 0x04F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikPlaneDesc>         M_Planes;                                          // 0x0508(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikShapeMatchingDesc> M_ShapeMatchings;                                  // 0x0518(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        M_TotalKinematics;                                 // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalConstraints;                                // 0x052C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalCones;                                      // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalLinks;                                      // 0x0534(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalCollisions;                                 // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalSelfCollisions;                             // 0x053C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalChainRootParticles;                         // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalPCLinkCones;                                // 0x0544(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        M_TotalLateralLinkCones;                           // 0x0548(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bAlwaysUse60FPSsetting;                          // 0x054C(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54D[0x3];                                      // 0x054D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           M_IgnoreEffectors;                                 // 0x0550(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         M_TeleportDistance;                                // 0x0560(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_564[0x4];                                      // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_BonamikReferenceGroup;                           // 0x0568(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_ReferenceGroups;                                 // 0x0578(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         M_BonamikCheckGroundBodyPosGroups;                 // 0x0588(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	TArray<class FName>                           M_CheckGroundBodyPosGroups;                        // 0x0598(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikGroupLOD>          M_BonamikGroupLODs;                                // 0x05A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          M_BonamikAccurateBoundsUpdate;                     // 0x05B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B9[0x3];                                      // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_PreRollStepOnResume;                             // 0x05BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C0[0x8];                                      // 0x05C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikAsset">();
	}
	static class USQEX_BonamikAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikAsset>();
	}
};
static_assert(alignof(USQEX_BonamikAsset) == 0x000008, "Wrong alignment on USQEX_BonamikAsset");
static_assert(sizeof(USQEX_BonamikAsset) == 0x0005C8, "Wrong size on USQEX_BonamikAsset");
static_assert(offsetof(USQEX_BonamikAsset, M_SkeletalMesh) == 0x000048, "Member 'USQEX_BonamikAsset::M_SkeletalMesh' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_VersionNo) == 0x000050, "Member 'USQEX_BonamikAsset::M_VersionNo' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_SceneManager) == 0x000058, "Member 'USQEX_BonamikAsset::M_SceneManager' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_Solvers) == 0x0004D8, "Member 'USQEX_BonamikAsset::M_Solvers' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_Bodies) == 0x0004E8, "Member 'USQEX_BonamikAsset::M_Bodies' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_Links) == 0x0004F8, "Member 'USQEX_BonamikAsset::M_Links' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_Planes) == 0x000508, "Member 'USQEX_BonamikAsset::M_Planes' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_ShapeMatchings) == 0x000518, "Member 'USQEX_BonamikAsset::M_ShapeMatchings' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_TotalKinematics) == 0x000528, "Member 'USQEX_BonamikAsset::M_TotalKinematics' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_TotalConstraints) == 0x00052C, "Member 'USQEX_BonamikAsset::M_TotalConstraints' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_TotalCones) == 0x000530, "Member 'USQEX_BonamikAsset::M_TotalCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_TotalLinks) == 0x000534, "Member 'USQEX_BonamikAsset::M_TotalLinks' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_TotalCollisions) == 0x000538, "Member 'USQEX_BonamikAsset::M_TotalCollisions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_TotalSelfCollisions) == 0x00053C, "Member 'USQEX_BonamikAsset::M_TotalSelfCollisions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_TotalChainRootParticles) == 0x000540, "Member 'USQEX_BonamikAsset::M_TotalChainRootParticles' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_TotalPCLinkCones) == 0x000544, "Member 'USQEX_BonamikAsset::M_TotalPCLinkCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_TotalLateralLinkCones) == 0x000548, "Member 'USQEX_BonamikAsset::M_TotalLateralLinkCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_bAlwaysUse60FPSsetting) == 0x00054C, "Member 'USQEX_BonamikAsset::M_bAlwaysUse60FPSsetting' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_IgnoreEffectors) == 0x000550, "Member 'USQEX_BonamikAsset::M_IgnoreEffectors' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_TeleportDistance) == 0x000560, "Member 'USQEX_BonamikAsset::M_TeleportDistance' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_BonamikReferenceGroup) == 0x000568, "Member 'USQEX_BonamikAsset::M_BonamikReferenceGroup' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_ReferenceGroups) == 0x000578, "Member 'USQEX_BonamikAsset::M_ReferenceGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_BonamikCheckGroundBodyPosGroups) == 0x000588, "Member 'USQEX_BonamikAsset::M_BonamikCheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_CheckGroundBodyPosGroups) == 0x000598, "Member 'USQEX_BonamikAsset::M_CheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_BonamikGroupLODs) == 0x0005A8, "Member 'USQEX_BonamikAsset::M_BonamikGroupLODs' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_BonamikAccurateBoundsUpdate) == 0x0005B8, "Member 'USQEX_BonamikAsset::M_BonamikAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, M_PreRollStepOnResume) == 0x0005BC, "Member 'USQEX_BonamikAsset::M_PreRollStepOnResume' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikAssetUserData
// 0x0068 (0x00A8 - 0x0040)
class USQEX_BonamikAssetUserData final : public UAssetUserData
{
public:
	TArray<class USQEX_BonamikAsset*>             BonamikAssets;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          M_bAlwaysUse60FPSsetting;                          // 0x0050(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IgnoreEffectors;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReferenceGroups;                                   // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CheckGroundBodyPosGroups;                          // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikGroupLOD>          BonamikGroupLODs;                                  // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TeleportDistance;                                  // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccurateBoundsUpdate;                             // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRollStepOnResume;                               // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_OutOfCamera                     OutOfCamera;                                       // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikAssetUserData">();
	}
	static class USQEX_BonamikAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikAssetUserData>();
	}
};
static_assert(alignof(USQEX_BonamikAssetUserData) == 0x000008, "Wrong alignment on USQEX_BonamikAssetUserData");
static_assert(sizeof(USQEX_BonamikAssetUserData) == 0x0000A8, "Wrong size on USQEX_BonamikAssetUserData");
static_assert(offsetof(USQEX_BonamikAssetUserData, BonamikAssets) == 0x000040, "Member 'USQEX_BonamikAssetUserData::BonamikAssets' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, M_bAlwaysUse60FPSsetting) == 0x000050, "Member 'USQEX_BonamikAssetUserData::M_bAlwaysUse60FPSsetting' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, IgnoreEffectors) == 0x000058, "Member 'USQEX_BonamikAssetUserData::IgnoreEffectors' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, ReferenceGroups) == 0x000068, "Member 'USQEX_BonamikAssetUserData::ReferenceGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, CheckGroundBodyPosGroups) == 0x000078, "Member 'USQEX_BonamikAssetUserData::CheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, BonamikGroupLODs) == 0x000088, "Member 'USQEX_BonamikAssetUserData::BonamikGroupLODs' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, TeleportDistance) == 0x000098, "Member 'USQEX_BonamikAssetUserData::TeleportDistance' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, bAccurateBoundsUpdate) == 0x00009C, "Member 'USQEX_BonamikAssetUserData::bAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, PreRollStepOnResume) == 0x0000A0, "Member 'USQEX_BonamikAssetUserData::PreRollStepOnResume' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, OutOfCamera) == 0x0000A4, "Member 'USQEX_BonamikAssetUserData::OutOfCamera' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikComponentInterface
// 0x0000 (0x0040 - 0x0040)
class ISQEX_BonamikComponentInterface final : public IInterface
{
public:
	float SQEX_Bonamik_GetWeight();
	bool SQEX_Bonamik_IsSetup();
	void SQEX_Bonamik_Reset(bool bResetPose, bool bApplyToChildren);
	void SQEX_Bonamik_SetGroupWeight(const TArray<class FString>& Groups, float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetPreRoll(int32 Step, bool bApplyToChildren);
	void SQEX_Bonamik_TurnOn(const TArray<class FString>& Groups, float BlendTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikComponentInterface">();
	}
	static class ISQEX_BonamikComponentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQEX_BonamikComponentInterface>();
	}
};
static_assert(alignof(ISQEX_BonamikComponentInterface) == 0x000008, "Wrong alignment on ISQEX_BonamikComponentInterface");
static_assert(sizeof(ISQEX_BonamikComponentInterface) == 0x000040, "Wrong size on ISQEX_BonamikComponentInterface");

// Class BonamikRt.SQEX_BonamikGlobalConfig
// 0x0038 (0x0088 - 0x0050)
class USQEX_BonamikGlobalConfig final : public UDeveloperSettings
{
public:
	bool                                          bEnableTickComponent;                              // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawBonamik;                                 // 0x0051(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawWind;                                    // 0x0052(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpdate;                                     // 0x0053(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreadUpdate;                                // 0x0054(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSimulation;                                 // 0x0055(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpdateOverlaps;                             // 0x0056(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeStep;                                          // 0x0058(0x0004)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedFrameRate;                                 // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MayaAnimationFrameRate;                            // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MayaSimulationFrameRate;                           // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0068(0x000C)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSourceSpeedFactor;                             // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickWindWhenPaused;                               // 0x0078(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_GlobalOutOfCamera               OutOfCamera;                                       // 0x0079(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBDEnable;                                        // 0x007A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBDEnableInitializaiton;                          // 0x007B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBDEnableCreationOfBonamikComponent;              // 0x007C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SkipUpdateForActorType;                            // 0x0080(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SkipWaitForActorType;                              // 0x0084(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikGlobalConfig">();
	}
	static class USQEX_BonamikGlobalConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikGlobalConfig>();
	}
};
static_assert(alignof(USQEX_BonamikGlobalConfig) == 0x000008, "Wrong alignment on USQEX_BonamikGlobalConfig");
static_assert(sizeof(USQEX_BonamikGlobalConfig) == 0x000088, "Wrong size on USQEX_BonamikGlobalConfig");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableTickComponent) == 0x000050, "Member 'USQEX_BonamikGlobalConfig::bEnableTickComponent' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bDebugDrawBonamik) == 0x000051, "Member 'USQEX_BonamikGlobalConfig::bDebugDrawBonamik' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bDebugDrawWind) == 0x000052, "Member 'USQEX_BonamikGlobalConfig::bDebugDrawWind' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableUpdate) == 0x000053, "Member 'USQEX_BonamikGlobalConfig::bEnableUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bMultiThreadUpdate) == 0x000054, "Member 'USQEX_BonamikGlobalConfig::bMultiThreadUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableSimulation) == 0x000055, "Member 'USQEX_BonamikGlobalConfig::bEnableSimulation' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableUpdateOverlaps) == 0x000056, "Member 'USQEX_BonamikGlobalConfig::bEnableUpdateOverlaps' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, TimeStep) == 0x000058, "Member 'USQEX_BonamikGlobalConfig::TimeStep' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, ExpectedFrameRate) == 0x00005C, "Member 'USQEX_BonamikGlobalConfig::ExpectedFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, MayaAnimationFrameRate) == 0x000060, "Member 'USQEX_BonamikGlobalConfig::MayaAnimationFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, MayaSimulationFrameRate) == 0x000064, "Member 'USQEX_BonamikGlobalConfig::MayaSimulationFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, Gravity) == 0x000068, "Member 'USQEX_BonamikGlobalConfig::Gravity' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, WindSourceSpeedFactor) == 0x000074, "Member 'USQEX_BonamikGlobalConfig::WindSourceSpeedFactor' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bTickWindWhenPaused) == 0x000078, "Member 'USQEX_BonamikGlobalConfig::bTickWindWhenPaused' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, OutOfCamera) == 0x000079, "Member 'USQEX_BonamikGlobalConfig::OutOfCamera' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bKBDEnable) == 0x00007A, "Member 'USQEX_BonamikGlobalConfig::bKBDEnable' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bKBDEnableInitializaiton) == 0x00007B, "Member 'USQEX_BonamikGlobalConfig::bKBDEnableInitializaiton' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bKBDEnableCreationOfBonamikComponent) == 0x00007C, "Member 'USQEX_BonamikGlobalConfig::bKBDEnableCreationOfBonamikComponent' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, SkipUpdateForActorType) == 0x000080, "Member 'USQEX_BonamikGlobalConfig::SkipUpdateForActorType' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, SkipWaitForActorType) == 0x000084, "Member 'USQEX_BonamikGlobalConfig::SkipWaitForActorType' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWind
// 0x05F0 (0x0630 - 0x0040)
class USQEX_BonamikWind final : public UObject
{
public:
	uint8                                         Pad_40[0x5F0];                                     // 0x0040(0x05F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void EnableByOwnerType(bool bEnable, ESQEX_Bonamik_WindOwnerType OwnerType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind">();
	}
	static class USQEX_BonamikWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWind>();
	}
};
static_assert(alignof(USQEX_BonamikWind) == 0x000008, "Wrong alignment on USQEX_BonamikWind");
static_assert(sizeof(USQEX_BonamikWind) == 0x000630, "Wrong size on USQEX_BonamikWind");

// Class BonamikRt.SQEX_BonamikWind_Component
// 0x0000 (0x112E9AF0 - 0x112E9AF0)
class USQEX_BonamikWind_Component final : public USceneComponent
{
public:
	class USQEX_BonamikWindDesc*                  M_BonamikWindDesc;                                 // 0x0418(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_WindAreaType                    M_BonamikWindAreaType;                             // 0x0420(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_BonamikWindGlobalAddition;                       // 0x0421(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422[0x2];                                      // 0x0422(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_BonamikWindBoxAreaSize;                          // 0x0424(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_BonamikWindBoxAreaHalfSize;                      // 0x0430(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BonamikWindSphereAreaRadius;                     // 0x043C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BonamikWindAreaMargin;                           // 0x0440(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_BonamikWindAbsoluteDirection;                    // 0x0444(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_445[0x3];                                      // 0x0445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_BonamikWindDirectionYaw;                         // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BonamikWindDirectionPitch;                       // 0x044C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_BonamikWind*                      M_BonamikWind;                                     // 0x0450(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_458[0x8];                                      // 0x0458(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Enable(bool Value);
	void SetWindScale(float Value);

	float GetWindScale() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind_Component">();
	}
	static class USQEX_BonamikWind_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWind_Component>();
	}
};
static_assert(alignof(USQEX_BonamikWind_Component) == 0x112E9AF0, "Wrong alignment on USQEX_BonamikWind_Component");
static_assert(sizeof(USQEX_BonamikWind_Component) == 0x112E9AF0, "Wrong size on USQEX_BonamikWind_Component");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWindDesc) == 0x000418, "Member 'USQEX_BonamikWind_Component::M_BonamikWindDesc' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWindAreaType) == 0x000420, "Member 'USQEX_BonamikWind_Component::M_BonamikWindAreaType' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWindGlobalAddition) == 0x000421, "Member 'USQEX_BonamikWind_Component::M_BonamikWindGlobalAddition' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWindBoxAreaSize) == 0x000424, "Member 'USQEX_BonamikWind_Component::M_BonamikWindBoxAreaSize' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWindBoxAreaHalfSize) == 0x000430, "Member 'USQEX_BonamikWind_Component::M_BonamikWindBoxAreaHalfSize' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWindSphereAreaRadius) == 0x00043C, "Member 'USQEX_BonamikWind_Component::M_BonamikWindSphereAreaRadius' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWindAreaMargin) == 0x000440, "Member 'USQEX_BonamikWind_Component::M_BonamikWindAreaMargin' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWindAbsoluteDirection) == 0x000444, "Member 'USQEX_BonamikWind_Component::M_BonamikWindAbsoluteDirection' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWindDirectionYaw) == 0x000448, "Member 'USQEX_BonamikWind_Component::M_BonamikWindDirectionYaw' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWindDirectionPitch) == 0x00044C, "Member 'USQEX_BonamikWind_Component::M_BonamikWindDirectionPitch' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, M_BonamikWind) == 0x000450, "Member 'USQEX_BonamikWind_Component::M_BonamikWind' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWindCollectionAsset
// 0x0010 (0x0058 - 0x0048)
class USQEX_BonamikWindCollectionAsset final : public UDataAsset
{
public:
	TArray<struct FSQEX_BonamikPresetWindSettings> M_BonamikPresetWindSettings;                       // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWindCollectionAsset">();
	}
	static class USQEX_BonamikWindCollectionAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWindCollectionAsset>();
	}
};
static_assert(alignof(USQEX_BonamikWindCollectionAsset) == 0x000008, "Wrong alignment on USQEX_BonamikWindCollectionAsset");
static_assert(sizeof(USQEX_BonamikWindCollectionAsset) == 0x000058, "Wrong size on USQEX_BonamikWindCollectionAsset");
static_assert(offsetof(USQEX_BonamikWindCollectionAsset, M_BonamikPresetWindSettings) == 0x000048, "Member 'USQEX_BonamikWindCollectionAsset::M_BonamikPresetWindSettings' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWindDesc
// 0x00C0 (0x0108 - 0x0048)
class USQEX_BonamikWindDesc final : public UDataAsset
{
public:
	ESQEX_Bonamik_WindType                        M_WindType;                                        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_WindForce;                                       // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_RandomRange;                                     // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_RandomTime;                                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_WaveMagnitude;                                   // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_WaveFrequency;                                   // 0x0074(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_WaveMagOffset;                                   // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_WaveFreqOffset;                                  // 0x008C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_WaveTime;                                        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_CustomWaveScale;                                 // 0x009C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                M_CustomWaveOffset;                                // 0x00A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_CustomWaveTime;                                  // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 M_DataX;                                           // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 M_DataY;                                           // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 M_DataZ;                                           // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         M_PointStrength;                                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BlastRange;                                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_BlastSpeed;                                      // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PointRadius;                                     // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_PeakInRange;                                     // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_StartFrame;                                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_LoopNum;                                         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWindDesc">();
	}
	static class USQEX_BonamikWindDesc* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWindDesc>();
	}
};
static_assert(alignof(USQEX_BonamikWindDesc) == 0x000008, "Wrong alignment on USQEX_BonamikWindDesc");
static_assert(sizeof(USQEX_BonamikWindDesc) == 0x000108, "Wrong size on USQEX_BonamikWindDesc");
static_assert(offsetof(USQEX_BonamikWindDesc, M_WindType) == 0x000048, "Member 'USQEX_BonamikWindDesc::M_WindType' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_WindForce) == 0x00004C, "Member 'USQEX_BonamikWindDesc::M_WindForce' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_RandomRange) == 0x000058, "Member 'USQEX_BonamikWindDesc::M_RandomRange' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_RandomTime) == 0x000064, "Member 'USQEX_BonamikWindDesc::M_RandomTime' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_WaveMagnitude) == 0x000068, "Member 'USQEX_BonamikWindDesc::M_WaveMagnitude' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_WaveFrequency) == 0x000074, "Member 'USQEX_BonamikWindDesc::M_WaveFrequency' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_WaveMagOffset) == 0x000080, "Member 'USQEX_BonamikWindDesc::M_WaveMagOffset' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_WaveFreqOffset) == 0x00008C, "Member 'USQEX_BonamikWindDesc::M_WaveFreqOffset' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_WaveTime) == 0x000098, "Member 'USQEX_BonamikWindDesc::M_WaveTime' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_CustomWaveScale) == 0x00009C, "Member 'USQEX_BonamikWindDesc::M_CustomWaveScale' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_CustomWaveOffset) == 0x0000A8, "Member 'USQEX_BonamikWindDesc::M_CustomWaveOffset' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_CustomWaveTime) == 0x0000B4, "Member 'USQEX_BonamikWindDesc::M_CustomWaveTime' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_DataX) == 0x0000B8, "Member 'USQEX_BonamikWindDesc::M_DataX' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_DataY) == 0x0000C8, "Member 'USQEX_BonamikWindDesc::M_DataY' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_DataZ) == 0x0000D8, "Member 'USQEX_BonamikWindDesc::M_DataZ' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_PointStrength) == 0x0000E8, "Member 'USQEX_BonamikWindDesc::M_PointStrength' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_BlastRange) == 0x0000EC, "Member 'USQEX_BonamikWindDesc::M_BlastRange' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_BlastSpeed) == 0x0000F0, "Member 'USQEX_BonamikWindDesc::M_BlastSpeed' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_PointRadius) == 0x0000F4, "Member 'USQEX_BonamikWindDesc::M_PointRadius' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_PeakInRange) == 0x0000F8, "Member 'USQEX_BonamikWindDesc::M_PeakInRange' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_StartFrame) == 0x0000FC, "Member 'USQEX_BonamikWindDesc::M_StartFrame' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, M_LoopNum) == 0x000100, "Member 'USQEX_BonamikWindDesc::M_LoopNum' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWindPreset_Actor
// 0x0000 (0x1EF72E00 - 0x1EF72E00)
class ASQEX_BonamikWindPreset_Actor final : public AActor
{
public:
	class USQEX_BonamikWindCollectionAsset*       M_BonamikWindCollectionAsset;                      // 0x03E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWindPreset_Actor">();
	}
	static class ASQEX_BonamikWindPreset_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_BonamikWindPreset_Actor>();
	}
};
static_assert(alignof(ASQEX_BonamikWindPreset_Actor) == 0x1EF72E00, "Wrong alignment on ASQEX_BonamikWindPreset_Actor");
static_assert(sizeof(ASQEX_BonamikWindPreset_Actor) == 0x1EF72E00, "Wrong size on ASQEX_BonamikWindPreset_Actor");
static_assert(offsetof(ASQEX_BonamikWindPreset_Actor, M_BonamikWindCollectionAsset) == 0x0003E0, "Member 'ASQEX_BonamikWindPreset_Actor::M_BonamikWindCollectionAsset' has a wrong offset!");

}

