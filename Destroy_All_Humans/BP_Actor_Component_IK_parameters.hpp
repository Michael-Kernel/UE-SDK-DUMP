#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Actor_Component_IK

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Actor_Component_IK.BP_Actor_Component_IK_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Actor_Component_IK_C_ReceiveTick final
{
public:
	float                                         bpp__DeltaSeconds__pf;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Actor_Component_IK_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Actor_Component_IK_C_ReceiveTick");
static_assert(sizeof(BP_Actor_Component_IK_C_ReceiveTick) == 0x000004, "Wrong size on BP_Actor_Component_IK_C_ReceiveTick");
static_assert(offsetof(BP_Actor_Component_IK_C_ReceiveTick, bpp__DeltaSeconds__pf) == 0x000000, "Member 'BP_Actor_Component_IK_C_ReceiveTick::bpp__DeltaSeconds__pf' has a wrong offset!");

// Function BP_Actor_Component_IK.BP_Actor_Component_IK_C.MakeEffectorOffset
// 0x000C (0x000C - 0x0000)
struct BP_Actor_Component_IK_C_MakeEffectorOffset final
{
public:
	bool                                          bpp__IKHit__pf;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__Offset__pf;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__OutOffset__pf;                                // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Actor_Component_IK_C_MakeEffectorOffset) == 0x000004, "Wrong alignment on BP_Actor_Component_IK_C_MakeEffectorOffset");
static_assert(sizeof(BP_Actor_Component_IK_C_MakeEffectorOffset) == 0x00000C, "Wrong size on BP_Actor_Component_IK_C_MakeEffectorOffset");
static_assert(offsetof(BP_Actor_Component_IK_C_MakeEffectorOffset, bpp__IKHit__pf) == 0x000000, "Member 'BP_Actor_Component_IK_C_MakeEffectorOffset::bpp__IKHit__pf' has a wrong offset!");
static_assert(offsetof(BP_Actor_Component_IK_C_MakeEffectorOffset, bpp__Offset__pf) == 0x000004, "Member 'BP_Actor_Component_IK_C_MakeEffectorOffset::bpp__Offset__pf' has a wrong offset!");
static_assert(offsetof(BP_Actor_Component_IK_C_MakeEffectorOffset, bpp__OutOffset__pf) == 0x000008, "Member 'BP_Actor_Component_IK_C_MakeEffectorOffset::bpp__OutOffset__pf' has a wrong offset!");

// Function BP_Actor_Component_IK.BP_Actor_Component_IK_C.GroundTraceCondition
// 0x0001 (0x0001 - 0x0000)
struct BP_Actor_Component_IK_C_GroundTraceCondition final
{
public:
	bool                                          bpp__GroundTraceActive__pf;                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Actor_Component_IK_C_GroundTraceCondition) == 0x000001, "Wrong alignment on BP_Actor_Component_IK_C_GroundTraceCondition");
static_assert(sizeof(BP_Actor_Component_IK_C_GroundTraceCondition) == 0x000001, "Wrong size on BP_Actor_Component_IK_C_GroundTraceCondition");
static_assert(offsetof(BP_Actor_Component_IK_C_GroundTraceCondition, bpp__GroundTraceActive__pf) == 0x000000, "Member 'BP_Actor_Component_IK_C_GroundTraceCondition::bpp__GroundTraceActive__pf' has a wrong offset!");

// Function BP_Actor_Component_IK.BP_Actor_Component_IK_C.FootTraceCondition
// 0x0001 (0x0001 - 0x0000)
struct BP_Actor_Component_IK_C_FootTraceCondition final
{
public:
	bool                                          bpp__FootTraceActive__pf;                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Actor_Component_IK_C_FootTraceCondition) == 0x000001, "Wrong alignment on BP_Actor_Component_IK_C_FootTraceCondition");
static_assert(sizeof(BP_Actor_Component_IK_C_FootTraceCondition) == 0x000001, "Wrong size on BP_Actor_Component_IK_C_FootTraceCondition");
static_assert(offsetof(BP_Actor_Component_IK_C_FootTraceCondition, bpp__FootTraceActive__pf) == 0x000000, "Member 'BP_Actor_Component_IK_C_FootTraceCondition::bpp__FootTraceActive__pf' has a wrong offset!");

// Function BP_Actor_Component_IK.BP_Actor_Component_IK_C.FootIKTrace
// 0x0024 (0x0024 - 0x0000)
struct BP_Actor_Component_IK_C_FootIKTrace final
{
public:
	class FName                                   bpp__SocketName__pf;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__IKTraceDistance__pf;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__IKRayHit__pf;                                 // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__HipOffset__pf;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__HitNormal__pf;                                // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__FootOffset__pf;                               // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Actor_Component_IK_C_FootIKTrace) == 0x000004, "Wrong alignment on BP_Actor_Component_IK_C_FootIKTrace");
static_assert(sizeof(BP_Actor_Component_IK_C_FootIKTrace) == 0x000024, "Wrong size on BP_Actor_Component_IK_C_FootIKTrace");
static_assert(offsetof(BP_Actor_Component_IK_C_FootIKTrace, bpp__SocketName__pf) == 0x000000, "Member 'BP_Actor_Component_IK_C_FootIKTrace::bpp__SocketName__pf' has a wrong offset!");
static_assert(offsetof(BP_Actor_Component_IK_C_FootIKTrace, bpp__IKTraceDistance__pf) == 0x000008, "Member 'BP_Actor_Component_IK_C_FootIKTrace::bpp__IKTraceDistance__pf' has a wrong offset!");
static_assert(offsetof(BP_Actor_Component_IK_C_FootIKTrace, bpp__IKRayHit__pf) == 0x00000C, "Member 'BP_Actor_Component_IK_C_FootIKTrace::bpp__IKRayHit__pf' has a wrong offset!");
static_assert(offsetof(BP_Actor_Component_IK_C_FootIKTrace, bpp__HipOffset__pf) == 0x000010, "Member 'BP_Actor_Component_IK_C_FootIKTrace::bpp__HipOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_Actor_Component_IK_C_FootIKTrace, bpp__HitNormal__pf) == 0x000014, "Member 'BP_Actor_Component_IK_C_FootIKTrace::bpp__HitNormal__pf' has a wrong offset!");
static_assert(offsetof(BP_Actor_Component_IK_C_FootIKTrace, bpp__FootOffset__pf) == 0x000020, "Member 'BP_Actor_Component_IK_C_FootIKTrace::bpp__FootOffset__pf' has a wrong offset!");

// Function BP_Actor_Component_IK.BP_Actor_Component_IK_C.ExecuteUbergraph_BP_Actor_Component_IK_0
// 0x0004 (0x0004 - 0x0000)
struct BP_Actor_Component_IK_C_ExecuteUbergraph_BP_Actor_Component_IK_0 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Actor_Component_IK_C_ExecuteUbergraph_BP_Actor_Component_IK_0) == 0x000004, "Wrong alignment on BP_Actor_Component_IK_C_ExecuteUbergraph_BP_Actor_Component_IK_0");
static_assert(sizeof(BP_Actor_Component_IK_C_ExecuteUbergraph_BP_Actor_Component_IK_0) == 0x000004, "Wrong size on BP_Actor_Component_IK_C_ExecuteUbergraph_BP_Actor_Component_IK_0");
static_assert(offsetof(BP_Actor_Component_IK_C_ExecuteUbergraph_BP_Actor_Component_IK_0, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_Actor_Component_IK_C_ExecuteUbergraph_BP_Actor_Component_IK_0::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_Actor_Component_IK.BP_Actor_Component_IK_C.ComputeFootRotation
// 0x0018 (0x0018 - 0x0000)
struct BP_Actor_Component_IK_C_ComputeFootRotation final
{
public:
	struct FVector                                bpp__HitNormal__pf;                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__FootRotation__pf;                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Actor_Component_IK_C_ComputeFootRotation) == 0x000004, "Wrong alignment on BP_Actor_Component_IK_C_ComputeFootRotation");
static_assert(sizeof(BP_Actor_Component_IK_C_ComputeFootRotation) == 0x000018, "Wrong size on BP_Actor_Component_IK_C_ComputeFootRotation");
static_assert(offsetof(BP_Actor_Component_IK_C_ComputeFootRotation, bpp__HitNormal__pf) == 0x000000, "Member 'BP_Actor_Component_IK_C_ComputeFootRotation::bpp__HitNormal__pf' has a wrong offset!");
static_assert(offsetof(BP_Actor_Component_IK_C_ComputeFootRotation, bpp__FootRotation__pf) == 0x00000C, "Member 'BP_Actor_Component_IK_C_ComputeFootRotation::bpp__FootRotation__pf' has a wrong offset!");

}

