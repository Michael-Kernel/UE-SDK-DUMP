#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Crypto_Pilot_AnimBP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Crypto_Pilot_AnimBP.Crypto_Pilot_AnimBP_C.G2AShotFire
// 0x0008 (0x0008 - 0x0000)
struct Crypto_Pilot_AnimBP_C_G2AShotFire final
{
public:
	class FName                                   bpp___nSocketName__pf;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_Pilot_AnimBP_C_G2AShotFire) == 0x000004, "Wrong alignment on Crypto_Pilot_AnimBP_C_G2AShotFire");
static_assert(sizeof(Crypto_Pilot_AnimBP_C_G2AShotFire) == 0x000008, "Wrong size on Crypto_Pilot_AnimBP_C_G2AShotFire");
static_assert(offsetof(Crypto_Pilot_AnimBP_C_G2AShotFire, bpp___nSocketName__pf) == 0x000000, "Member 'Crypto_Pilot_AnimBP_C_G2AShotFire::bpp___nSocketName__pf' has a wrong offset!");

// Function Crypto_Pilot_AnimBP.Crypto_Pilot_AnimBP_C.G2AGetHit
// 0x0018 (0x0018 - 0x0000)
struct Crypto_Pilot_AnimBP_C_G2AGetHit final
{
public:
	struct FVector                                bpp___vHitDirection__pf__const;                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UBFGDamageType*                   bpp___pDamageType__pf__const;                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_Pilot_AnimBP_C_G2AGetHit) == 0x000008, "Wrong alignment on Crypto_Pilot_AnimBP_C_G2AGetHit");
static_assert(sizeof(Crypto_Pilot_AnimBP_C_G2AGetHit) == 0x000018, "Wrong size on Crypto_Pilot_AnimBP_C_G2AGetHit");
static_assert(offsetof(Crypto_Pilot_AnimBP_C_G2AGetHit, bpp___vHitDirection__pf__const) == 0x000000, "Member 'Crypto_Pilot_AnimBP_C_G2AGetHit::bpp___vHitDirection__pf__const' has a wrong offset!");
static_assert(offsetof(Crypto_Pilot_AnimBP_C_G2AGetHit, bpp___pDamageType__pf__const) == 0x000010, "Member 'Crypto_Pilot_AnimBP_C_G2AGetHit::bpp___pDamageType__pf__const' has a wrong offset!");

// Function Crypto_Pilot_AnimBP.Crypto_Pilot_AnimBP_C.ExecuteUbergraph_Crypto_Pilot_AnimBP_1
// 0x0004 (0x0004 - 0x0000)
struct Crypto_Pilot_AnimBP_C_ExecuteUbergraph_Crypto_Pilot_AnimBP_1 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_Pilot_AnimBP_C_ExecuteUbergraph_Crypto_Pilot_AnimBP_1) == 0x000004, "Wrong alignment on Crypto_Pilot_AnimBP_C_ExecuteUbergraph_Crypto_Pilot_AnimBP_1");
static_assert(sizeof(Crypto_Pilot_AnimBP_C_ExecuteUbergraph_Crypto_Pilot_AnimBP_1) == 0x000004, "Wrong size on Crypto_Pilot_AnimBP_C_ExecuteUbergraph_Crypto_Pilot_AnimBP_1");
static_assert(offsetof(Crypto_Pilot_AnimBP_C_ExecuteUbergraph_Crypto_Pilot_AnimBP_1, bpp__EntryPoint__pf) == 0x000000, "Member 'Crypto_Pilot_AnimBP_C_ExecuteUbergraph_Crypto_Pilot_AnimBP_1::bpp__EntryPoint__pf' has a wrong offset!");

// Function Crypto_Pilot_AnimBP.Crypto_Pilot_AnimBP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct Crypto_Pilot_AnimBP_C_BlueprintUpdateAnimation final
{
public:
	float                                         bpp__DeltaTimeX__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_Pilot_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on Crypto_Pilot_AnimBP_C_BlueprintUpdateAnimation");
static_assert(sizeof(Crypto_Pilot_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on Crypto_Pilot_AnimBP_C_BlueprintUpdateAnimation");
static_assert(offsetof(Crypto_Pilot_AnimBP_C_BlueprintUpdateAnimation, bpp__DeltaTimeX__pf) == 0x000000, "Member 'Crypto_Pilot_AnimBP_C_BlueprintUpdateAnimation::bpp__DeltaTimeX__pf' has a wrong offset!");

}

