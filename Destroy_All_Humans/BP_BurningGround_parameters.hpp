#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BurningGround

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_BurningGround.BP_BurningGround_C.ExecuteUbergraph_BP_BurningGround
// 0x0050 (0x0050 - 0x0000)
struct BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_vTargetLocation;                // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bHitTarget;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_CustomEvent_HitComponent;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_BurningDuration;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Radius;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_WorldspaceLocation;             // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_SplashRadius;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_WrittingActor;                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Glow;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround) == 0x000008, "Wrong alignment on BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround");
static_assert(sizeof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround) == 0x000050, "Wrong size on BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, EntryPoint) == 0x000000, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_CustomEvent_vTargetLocation) == 0x000004, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_CustomEvent_vTargetLocation' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_CustomEvent_bHitTarget) == 0x000010, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_CustomEvent_bHitTarget' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_CustomEvent_HitComponent) == 0x000018, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_CustomEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_CustomEvent_BurningDuration) == 0x000020, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_CustomEvent_BurningDuration' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_CustomEvent_Radius) == 0x000024, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_CustomEvent_Radius' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_Event_EndPlayReason) == 0x00002C, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_CustomEvent_WorldspaceLocation) == 0x000030, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_CustomEvent_WorldspaceLocation' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_CustomEvent_SplashRadius) == 0x00003C, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_CustomEvent_SplashRadius' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_CustomEvent_WrittingActor) == 0x000040, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_CustomEvent_WrittingActor' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround, K2Node_CustomEvent_Glow) == 0x000048, "Member 'BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround::K2Node_CustomEvent_Glow' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.RTHistory_Write_SingleSplash
// 0x0020 (0x0020 - 0x0000)
struct BP_BurningGround_C_RTHistory_Write_SingleSplash final
{
public:
	struct FVector                                WorldspaceLocation;                                // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplashRadius;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 WrittingActor;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Glow;                                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_RTHistory_Write_SingleSplash) == 0x000008, "Wrong alignment on BP_BurningGround_C_RTHistory_Write_SingleSplash");
static_assert(sizeof(BP_BurningGround_C_RTHistory_Write_SingleSplash) == 0x000020, "Wrong size on BP_BurningGround_C_RTHistory_Write_SingleSplash");
static_assert(offsetof(BP_BurningGround_C_RTHistory_Write_SingleSplash, WorldspaceLocation) == 0x000000, "Member 'BP_BurningGround_C_RTHistory_Write_SingleSplash::WorldspaceLocation' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_RTHistory_Write_SingleSplash, SplashRadius) == 0x00000C, "Member 'BP_BurningGround_C_RTHistory_Write_SingleSplash::SplashRadius' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_RTHistory_Write_SingleSplash, WrittingActor) == 0x000010, "Member 'BP_BurningGround_C_RTHistory_Write_SingleSplash::WrittingActor' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_RTHistory_Write_SingleSplash, Glow) == 0x000018, "Member 'BP_BurningGround_C_RTHistory_Write_SingleSplash::Glow' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_BurningGround_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_BurningGround_C_ReceiveEndPlay");
static_assert(sizeof(BP_BurningGround_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_BurningGround_C_ReceiveEndPlay");
static_assert(offsetof(BP_BurningGround_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_BurningGround_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BurningGround_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BurningGround_C_ReceiveTick");
static_assert(sizeof(BP_BurningGround_C_ReceiveTick) == 0x000004, "Wrong size on BP_BurningGround_C_ReceiveTick");
static_assert(offsetof(BP_BurningGround_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_BurningGround_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.RTHistory_Write_Channeled_Start
// 0x0020 (0x0020 - 0x0000)
struct BP_BurningGround_C_RTHistory_Write_Channeled_Start final
{
public:
	struct FVector                                VTargetLocation;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHitTarget;                                        // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BurningDuration;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_RTHistory_Write_Channeled_Start) == 0x000008, "Wrong alignment on BP_BurningGround_C_RTHistory_Write_Channeled_Start");
static_assert(sizeof(BP_BurningGround_C_RTHistory_Write_Channeled_Start) == 0x000020, "Wrong size on BP_BurningGround_C_RTHistory_Write_Channeled_Start");
static_assert(offsetof(BP_BurningGround_C_RTHistory_Write_Channeled_Start, VTargetLocation) == 0x000000, "Member 'BP_BurningGround_C_RTHistory_Write_Channeled_Start::VTargetLocation' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_RTHistory_Write_Channeled_Start, bHitTarget) == 0x00000C, "Member 'BP_BurningGround_C_RTHistory_Write_Channeled_Start::bHitTarget' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_RTHistory_Write_Channeled_Start, HitComponent) == 0x000010, "Member 'BP_BurningGround_C_RTHistory_Write_Channeled_Start::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_RTHistory_Write_Channeled_Start, BurningDuration) == 0x000018, "Member 'BP_BurningGround_C_RTHistory_Write_Channeled_Start::BurningDuration' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_RTHistory_Write_Channeled_Start, Radius) == 0x00001C, "Member 'BP_BurningGround_C_RTHistory_Write_Channeled_Start::Radius' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.SpawnTransitionMesh
// 0x0160 (0x0160 - 0x0000)
struct BP_BurningGround_C_SpawnTransitionMesh final
{
public:
	class UStaticMesh*                            InMesh;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVector                                InWorldspaceImpactLocation;                        // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BurningGround_DitheredMeshTransition_C* LocalTransitionComponent;                          // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0060(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UBP_BurningGround_DitheredMeshTransition_C* CallFunc_AddComponent_ReturnValue;                 // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBFGFoliageBurnt*                       CallFunc_AddBurntInstance_ReturnValue;             // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       CallFunc_GetBounds_ReturnValue;                    // 0x0134(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_SpawnTransitionMesh) == 0x000010, "Wrong alignment on BP_BurningGround_C_SpawnTransitionMesh");
static_assert(sizeof(BP_BurningGround_C_SpawnTransitionMesh) == 0x000160, "Wrong size on BP_BurningGround_C_SpawnTransitionMesh");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, InMesh) == 0x000000, "Member 'BP_BurningGround_C_SpawnTransitionMesh::InMesh' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, InTransform) == 0x000010, "Member 'BP_BurningGround_C_SpawnTransitionMesh::InTransform' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, InWorldspaceImpactLocation) == 0x000040, "Member 'BP_BurningGround_C_SpawnTransitionMesh::InWorldspaceImpactLocation' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, LocalTransitionComponent) == 0x000050, "Member 'BP_BurningGround_C_SpawnTransitionMesh::LocalTransitionComponent' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, Temp_struct_Variable) == 0x000060, "Member 'BP_BurningGround_C_SpawnTransitionMesh::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, CallFunc_AddComponent_ReturnValue) == 0x000090, "Member 'BP_BurningGround_C_SpawnTransitionMesh::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, CallFunc_AddBurntInstance_ReturnValue) == 0x000098, "Member 'BP_BurningGround_C_SpawnTransitionMesh::CallFunc_AddBurntInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, CallFunc_SpawnSoundAttached_ReturnValue) == 0x0000A0, "Member 'BP_BurningGround_C_SpawnTransitionMesh::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x0000A8, "Member 'BP_BurningGround_C_SpawnTransitionMesh::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, CallFunc_SetStaticMesh_ReturnValue) == 0x000130, "Member 'BP_BurningGround_C_SpawnTransitionMesh::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, CallFunc_GetBounds_ReturnValue) == 0x000134, "Member 'BP_BurningGround_C_SpawnTransitionMesh::CallFunc_GetBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000150, "Member 'BP_BurningGround_C_SpawnTransitionMesh::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, CallFunc_VSize_ReturnValue) == 0x000154, "Member 'BP_BurningGround_C_SpawnTransitionMesh::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_SpawnTransitionMesh, CallFunc_MapRangeClamped_ReturnValue) == 0x000158, "Member 'BP_BurningGround_C_SpawnTransitionMesh::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.Util_GetDrawSplatPivot
// 0x0020 (0x0020 - 0x0000)
struct BP_BurningGround_C_Util_GetDrawSplatPivot final
{
public:
	struct FVector2D                              DrawSize_0;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TwoDPivot;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_Util_GetDrawSplatPivot) == 0x000004, "Wrong alignment on BP_BurningGround_C_Util_GetDrawSplatPivot");
static_assert(sizeof(BP_BurningGround_C_Util_GetDrawSplatPivot) == 0x000020, "Wrong size on BP_BurningGround_C_Util_GetDrawSplatPivot");
static_assert(offsetof(BP_BurningGround_C_Util_GetDrawSplatPivot, DrawSize_0) == 0x000000, "Member 'BP_BurningGround_C_Util_GetDrawSplatPivot::DrawSize_0' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_GetDrawSplatPivot, TwoDPivot) == 0x000008, "Member 'BP_BurningGround_C_Util_GetDrawSplatPivot::TwoDPivot' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_GetDrawSplatPivot, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000010, "Member 'BP_BurningGround_C_Util_GetDrawSplatPivot::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_GetDrawSplatPivot, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000018, "Member 'BP_BurningGround_C_Util_GetDrawSplatPivot::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.Util_InitializeSetup
// 0x00D8 (0x00D8 - 0x0000)
struct BP_BurningGround_C_Util_InitializeSetup final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABFGGameState*                          K2Node_DynamicCast_AsBFGGame_State;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGBurningGroundManager*               CallFunc_GetBurningGroundManager_ReturnValue;      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxElement_ReturnValue;                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue1;       // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue1; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X1;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y1;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue2; // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor1;                    // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_Util_InitializeSetup) == 0x000008, "Wrong alignment on BP_BurningGround_C_Util_InitializeSetup");
static_assert(sizeof(BP_BurningGround_C_Util_InitializeSetup) == 0x0000D8, "Wrong size on BP_BurningGround_C_Util_InitializeSetup");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, K2Node_DynamicCast_AsBFGGame_State) == 0x000008, "Member 'BP_BurningGround_C_Util_InitializeSetup::K2Node_DynamicCast_AsBFGGame_State' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_BurningGround_C_Util_InitializeSetup::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_GetBurningGroundManager_ReturnValue) == 0x000018, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_GetBurningGroundManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000020, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_GetComponentBounds_Origin) == 0x000028, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_GetComponentBounds_BoxExtent) == 0x000034, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_GetComponentBounds_SphereRadius) == 0x000040, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000044, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000050, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_GetMaxElement_ReturnValue) == 0x00005C, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_GetMaxElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000060, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000068, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000074, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_BreakVector2D_X) == 0x00007C, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_BreakVector2D_Y) == 0x000080, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_Conv_VectorToVector2D_ReturnValue1) == 0x000084, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_Conv_VectorToVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x00008C, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_CreateDynamicMaterialInstance_ReturnValue1) == 0x000098, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_CreateDynamicMaterialInstance_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_BreakVector2D_X1) == 0x0000A0, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_BreakVector2D_X1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_BreakVector2D_Y1) == 0x0000A4, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_BreakVector2D_Y1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, K2Node_MakeStruct_LinearColor) == 0x0000A8, "Member 'BP_BurningGround_C_Util_InitializeSetup::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000B8, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, CallFunc_CreateDynamicMaterialInstance_ReturnValue2) == 0x0000C0, "Member 'BP_BurningGround_C_Util_InitializeSetup::CallFunc_CreateDynamicMaterialInstance_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_InitializeSetup, K2Node_MakeStruct_LinearColor1) == 0x0000C8, "Member 'BP_BurningGround_C_Util_InitializeSetup::K2Node_MakeStruct_LinearColor1' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.Update_JitterValues
// 0x0024 (0x0024 - 0x0000)
struct BP_BurningGround_C_Update_JitterValues final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X1;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y1;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue1;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_Update_JitterValues) == 0x000004, "Wrong alignment on BP_BurningGround_C_Update_JitterValues");
static_assert(sizeof(BP_BurningGround_C_Update_JitterValues) == 0x000024, "Wrong size on BP_BurningGround_C_Update_JitterValues");
static_assert(offsetof(BP_BurningGround_C_Update_JitterValues, DeltaTime) == 0x000000, "Member 'BP_BurningGround_C_Update_JitterValues::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Update_JitterValues, CallFunc_BreakVector2D_X) == 0x000004, "Member 'BP_BurningGround_C_Update_JitterValues::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Update_JitterValues, CallFunc_BreakVector2D_Y) == 0x000008, "Member 'BP_BurningGround_C_Update_JitterValues::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Update_JitterValues, CallFunc_RandomFloatInRange_ReturnValue) == 0x00000C, "Member 'BP_BurningGround_C_Update_JitterValues::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Update_JitterValues, CallFunc_FInterpTo_ReturnValue) == 0x000010, "Member 'BP_BurningGround_C_Update_JitterValues::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Update_JitterValues, CallFunc_BreakVector2D_X1) == 0x000014, "Member 'BP_BurningGround_C_Update_JitterValues::CallFunc_BreakVector2D_X1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Update_JitterValues, CallFunc_BreakVector2D_Y1) == 0x000018, "Member 'BP_BurningGround_C_Update_JitterValues::CallFunc_BreakVector2D_Y1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Update_JitterValues, CallFunc_RandomFloatInRange_ReturnValue1) == 0x00001C, "Member 'BP_BurningGround_C_Update_JitterValues::CallFunc_RandomFloatInRange_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Update_JitterValues, CallFunc_FInterpTo_ReturnValue1) == 0x000020, "Member 'BP_BurningGround_C_Update_JitterValues::CallFunc_FInterpTo_ReturnValue1' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.InitiateFoliageTransition
// 0x00B0 (0x00B0 - 0x0000)
struct BP_BurningGround_C_InitiateFoliageTransition final
{
public:
	class UBP_Foliage_Interactive_Burnable_C*     InBurnableFoliageComponent;                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InInstanceIndex;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InHitImpactPoint;                                  // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalInstanceTransform;                            // 0x0020(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetInstanceTransform_OutInstanceTransform; // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetInstanceTransform_ReturnValue;         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_InitiateFoliageTransition) == 0x000010, "Wrong alignment on BP_BurningGround_C_InitiateFoliageTransition");
static_assert(sizeof(BP_BurningGround_C_InitiateFoliageTransition) == 0x0000B0, "Wrong size on BP_BurningGround_C_InitiateFoliageTransition");
static_assert(offsetof(BP_BurningGround_C_InitiateFoliageTransition, InBurnableFoliageComponent) == 0x000000, "Member 'BP_BurningGround_C_InitiateFoliageTransition::InBurnableFoliageComponent' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_InitiateFoliageTransition, InInstanceIndex) == 0x000008, "Member 'BP_BurningGround_C_InitiateFoliageTransition::InInstanceIndex' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_InitiateFoliageTransition, InHitImpactPoint) == 0x00000C, "Member 'BP_BurningGround_C_InitiateFoliageTransition::InHitImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_InitiateFoliageTransition, LocalInstanceTransform) == 0x000020, "Member 'BP_BurningGround_C_InitiateFoliageTransition::LocalInstanceTransform' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_InitiateFoliageTransition, CallFunc_GetInstanceTransform_OutInstanceTransform) == 0x000050, "Member 'BP_BurningGround_C_InitiateFoliageTransition::CallFunc_GetInstanceTransform_OutInstanceTransform' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_InitiateFoliageTransition, CallFunc_GetInstanceTransform_ReturnValue) == 0x000080, "Member 'BP_BurningGround_C_InitiateFoliageTransition::CallFunc_GetInstanceTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_InitiateFoliageTransition, CallFunc_BreakTransform_Location) == 0x000084, "Member 'BP_BurningGround_C_InitiateFoliageTransition::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_InitiateFoliageTransition, CallFunc_BreakTransform_Rotation) == 0x000090, "Member 'BP_BurningGround_C_InitiateFoliageTransition::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_InitiateFoliageTransition, CallFunc_BreakTransform_Scale) == 0x00009C, "Member 'BP_BurningGround_C_InitiateFoliageTransition::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.StartChanneledWrite
// 0x0108 (0x0108 - 0x0000)
struct BP_BurningGround_C_StartChanneledWrite final
{
public:
	struct FVector                                InTargetLocation;                                  // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InHitTarget;                                       // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    InHitComponent;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BurningDuration;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BurningDurationSaved;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCollisionProfileName_ReturnValue;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCollisionProfileName_ReturnValue;       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ConvertWorldToRenderTarget_ReturnValue;   // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAtan2_ReturnValue;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X1;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y1;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue1;                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue2;                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue1;                        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_StartChanneledWrite) == 0x000008, "Wrong alignment on BP_BurningGround_C_StartChanneledWrite");
static_assert(sizeof(BP_BurningGround_C_StartChanneledWrite) == 0x000108, "Wrong size on BP_BurningGround_C_StartChanneledWrite");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, InTargetLocation) == 0x000000, "Member 'BP_BurningGround_C_StartChanneledWrite::InTargetLocation' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, InHitTarget) == 0x00000C, "Member 'BP_BurningGround_C_StartChanneledWrite::InHitTarget' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, InHitComponent) == 0x000010, "Member 'BP_BurningGround_C_StartChanneledWrite::InHitComponent' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, BurningDuration) == 0x000018, "Member 'BP_BurningGround_C_StartChanneledWrite::BurningDuration' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, Radius) == 0x00001C, "Member 'BP_BurningGround_C_StartChanneledWrite::Radius' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, BurningDurationSaved) == 0x000020, "Member 'BP_BurningGround_C_StartChanneledWrite::BurningDurationSaved' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector2D_X) == 0x000024, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_MakeVector2D_ReturnValue) == 0x00002C, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_GetCollisionProfileName_ReturnValue) == 0x000038, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_GetCollisionProfileName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_IsCollisionProfileName_ReturnValue) == 0x000040, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_IsCollisionProfileName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000044, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector_X) == 0x000050, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector_Y) == 0x000054, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector_Z) == 0x000058, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_VSize_ReturnValue) == 0x00005C, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_VLerp_ReturnValue) == 0x000060, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_ConvertWorldToRenderTarget_ReturnValue) == 0x00006C, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_ConvertWorldToRenderTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000074, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector_X1) == 0x000078, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector_Y1) == 0x00007C, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector_Z1) == 0x000080, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000084, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000088, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_DegAtan2_ReturnValue) == 0x00008C, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x000090, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Add_FloatFloat_ReturnValue) == 0x000094, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_FMax_ReturnValue) == 0x000098, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, Temp_int_Variable) == 0x00009C, "Member 'BP_BurningGround_C_StartChanneledWrite::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Add_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector2D_X1) == 0x0000A4, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector2D_X1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector2D_Y1) == 0x0000A8, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector2D_Y1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Lerp_ReturnValue) == 0x0000AC, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector2D_X2) == 0x0000B0, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector2D_Y2) == 0x0000B4, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_MakeVector2D_ReturnValue1) == 0x0000B8, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_MakeVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_MakeVector2D_ReturnValue2) == 0x0000C0, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_MakeVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000C8, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000C9, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000CC, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000D0, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000D4, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Lerp_ReturnValue1) == 0x0000D8, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Lerp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector2D_X3) == 0x0000DC, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector2D_Y3) == 0x0000E0, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0000E4, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector2D_X4) == 0x0000E8, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_BreakVector2D_Y4) == 0x0000EC, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000F0, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_VInterpTo_ReturnValue) == 0x0000F4, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x000100, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_StartChanneledWrite, CallFunc_FTrunc_ReturnValue) == 0x000104, "Member 'BP_BurningGround_C_StartChanneledWrite::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.DoSingleSplash
// 0x0024 (0x0024 - 0x0000)
struct BP_BurningGround_C_DoSingleSplash final
{
public:
	struct FVector                                InWorldSpacePosition;                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InSplashRadius;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InGlow;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ConvertWorldToRenderTarget_ReturnValue;   // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_DoSingleSplash) == 0x000004, "Wrong alignment on BP_BurningGround_C_DoSingleSplash");
static_assert(sizeof(BP_BurningGround_C_DoSingleSplash) == 0x000024, "Wrong size on BP_BurningGround_C_DoSingleSplash");
static_assert(offsetof(BP_BurningGround_C_DoSingleSplash, InWorldSpacePosition) == 0x000000, "Member 'BP_BurningGround_C_DoSingleSplash::InWorldSpacePosition' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_DoSingleSplash, InSplashRadius) == 0x00000C, "Member 'BP_BurningGround_C_DoSingleSplash::InSplashRadius' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_DoSingleSplash, InGlow) == 0x000010, "Member 'BP_BurningGround_C_DoSingleSplash::InGlow' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_DoSingleSplash, CallFunc_ConvertWorldToRenderTarget_ReturnValue) == 0x000014, "Member 'BP_BurningGround_C_DoSingleSplash::CallFunc_ConvertWorldToRenderTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_DoSingleSplash, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00001C, "Member 'BP_BurningGround_C_DoSingleSplash::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_DoSingleSplash, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000020, "Member 'BP_BurningGround_C_DoSingleSplash::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.HandleTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BurningGround_C_HandleTick final
{
public:
	float                                         InDelta;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_HandleTick) == 0x000004, "Wrong alignment on BP_BurningGround_C_HandleTick");
static_assert(sizeof(BP_BurningGround_C_HandleTick) == 0x000004, "Wrong size on BP_BurningGround_C_HandleTick");
static_assert(offsetof(BP_BurningGround_C_HandleTick, InDelta) == 0x000000, "Member 'BP_BurningGround_C_HandleTick::InDelta' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.BurnFoliage
// 0x0118 (0x0118 - 0x0000)
struct BP_BurningGround_C_BurnFoliage final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Foliage_Interactive_Burnable_C*     K2Node_DynamicCast_AsBP_Foliage_Interactive_Burnable; // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BurningGround_C_BurnFoliage) == 0x000008, "Wrong alignment on BP_BurningGround_C_BurnFoliage");
static_assert(sizeof(BP_BurningGround_C_BurnFoliage) == 0x000118, "Wrong size on BP_BurningGround_C_BurnFoliage");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, HitResult) == 0x000000, "Member 'BP_BurningGround_C_BurnFoliage::HitResult' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_bBlockingHit) == 0x000088, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_bInitialOverlap) == 0x000089, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_Time) == 0x00008C, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_Distance) == 0x000090, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_Location) == 0x000094, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A0, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_Normal) == 0x0000AC, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_ImpactNormal) == 0x0000B8, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_PhysMat) == 0x0000C8, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_HitActor) == 0x0000D0, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_HitComponent) == 0x0000D8, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_HitBoneName) == 0x0000E0, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_HitItem) == 0x0000E8, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_FaceIndex) == 0x0000EC, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_TraceStart) == 0x0000F0, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, CallFunc_BreakHitResult_TraceEnd) == 0x0000FC, "Member 'BP_BurningGround_C_BurnFoliage::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, K2Node_DynamicCast_AsBP_Foliage_Interactive_Burnable) == 0x000108, "Member 'BP_BurningGround_C_BurnFoliage::K2Node_DynamicCast_AsBP_Foliage_Interactive_Burnable' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_BurnFoliage, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'BP_BurningGround_C_BurnFoliage::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_BurningGround.BP_BurningGround_C.Util_ChangeGlowDuration
// 0x0020 (0x0020 - 0x0000)
struct BP_BurningGround_C_Util_ChangeGlowDuration final
{
public:
	float                                         NewDuration;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BurningGround_C_Util_ChangeGlowDuration) == 0x000004, "Wrong alignment on BP_BurningGround_C_Util_ChangeGlowDuration");
static_assert(sizeof(BP_BurningGround_C_Util_ChangeGlowDuration) == 0x000020, "Wrong size on BP_BurningGround_C_Util_ChangeGlowDuration");
static_assert(offsetof(BP_BurningGround_C_Util_ChangeGlowDuration, NewDuration) == 0x000000, "Member 'BP_BurningGround_C_Util_ChangeGlowDuration::NewDuration' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_ChangeGlowDuration, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_BurningGround_C_Util_ChangeGlowDuration::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_ChangeGlowDuration, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_BurningGround_C_Util_ChangeGlowDuration::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_ChangeGlowDuration, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_BurningGround_C_Util_ChangeGlowDuration::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BurningGround_C_Util_ChangeGlowDuration, K2Node_MakeStruct_LinearColor) == 0x000010, "Member 'BP_BurningGround_C_Util_ChangeGlowDuration::K2Node_MakeStruct_LinearColor' has a wrong offset!");

}

