#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFGVisualEffects

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BFGVisualEffects_structs.hpp"


namespace SDK::Params
{

// Function BFGVisualEffects.BFGVirtualCrowd.AddVirtualActor
// 0x0050 (0x0050 - 0x0000)
struct BFGVirtualCrowd_AddVirtualActor final
{
public:
	class USkeletalMesh*                          _pMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _Transform;                                        // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         _iInitialAnimState;                                // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCreateDamageProxy;                               // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVirtualCrowd_AddVirtualActor) == 0x000010, "Wrong alignment on BFGVirtualCrowd_AddVirtualActor");
static_assert(sizeof(BFGVirtualCrowd_AddVirtualActor) == 0x000050, "Wrong size on BFGVirtualCrowd_AddVirtualActor");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualActor, _pMesh) == 0x000000, "Member 'BFGVirtualCrowd_AddVirtualActor::_pMesh' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualActor, _Transform) == 0x000010, "Member 'BFGVirtualCrowd_AddVirtualActor::_Transform' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualActor, _iInitialAnimState) == 0x000040, "Member 'BFGVirtualCrowd_AddVirtualActor::_iInitialAnimState' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualActor, _bCreateDamageProxy) == 0x000044, "Member 'BFGVirtualCrowd_AddVirtualActor::_bCreateDamageProxy' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualActor, ReturnValue) == 0x000048, "Member 'BFGVirtualCrowd_AddVirtualActor::ReturnValue' has a wrong offset!");

// Function BFGVisualEffects.BFGVirtualCrowd.AddVirtualVariantActor
// 0x0050 (0x0050 - 0x0000)
struct BFGVirtualCrowd_AddVirtualVariantActor final
{
public:
	class UDataTable*                             _pDataTable;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _VariationName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             _Transform;                                        // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         _iInitialAnimState;                                // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCreateDamageProxy;                               // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iSubVariationId;                                  // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVirtualCrowd_AddVirtualVariantActor) == 0x000010, "Wrong alignment on BFGVirtualCrowd_AddVirtualVariantActor");
static_assert(sizeof(BFGVirtualCrowd_AddVirtualVariantActor) == 0x000050, "Wrong size on BFGVirtualCrowd_AddVirtualVariantActor");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualVariantActor, _pDataTable) == 0x000000, "Member 'BFGVirtualCrowd_AddVirtualVariantActor::_pDataTable' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualVariantActor, _VariationName) == 0x000008, "Member 'BFGVirtualCrowd_AddVirtualVariantActor::_VariationName' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualVariantActor, _Transform) == 0x000010, "Member 'BFGVirtualCrowd_AddVirtualVariantActor::_Transform' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualVariantActor, _iInitialAnimState) == 0x000040, "Member 'BFGVirtualCrowd_AddVirtualVariantActor::_iInitialAnimState' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualVariantActor, _bCreateDamageProxy) == 0x000044, "Member 'BFGVirtualCrowd_AddVirtualVariantActor::_bCreateDamageProxy' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualVariantActor, _iSubVariationId) == 0x000048, "Member 'BFGVirtualCrowd_AddVirtualVariantActor::_iSubVariationId' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_AddVirtualVariantActor, ReturnValue) == 0x00004C, "Member 'BFGVirtualCrowd_AddVirtualVariantActor::ReturnValue' has a wrong offset!");

// Function BFGVisualEffects.BFGVirtualCrowd.GetCrowdComponentByActorIndex
// 0x0010 (0x0010 - 0x0000)
struct BFGVirtualCrowd_GetCrowdComponentByActorIndex final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGVirtualCrowdComponent*              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVirtualCrowd_GetCrowdComponentByActorIndex) == 0x000008, "Wrong alignment on BFGVirtualCrowd_GetCrowdComponentByActorIndex");
static_assert(sizeof(BFGVirtualCrowd_GetCrowdComponentByActorIndex) == 0x000010, "Wrong size on BFGVirtualCrowd_GetCrowdComponentByActorIndex");
static_assert(offsetof(BFGVirtualCrowd_GetCrowdComponentByActorIndex, _iIndex) == 0x000000, "Member 'BFGVirtualCrowd_GetCrowdComponentByActorIndex::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_GetCrowdComponentByActorIndex, ReturnValue) == 0x000008, "Member 'BFGVirtualCrowd_GetCrowdComponentByActorIndex::ReturnValue' has a wrong offset!");

// Function BFGVisualEffects.BFGVirtualCrowd.GetVirtualActorByIndex
// 0x00E0 (0x00E0 - 0x0000)
struct BFGVirtualCrowd_GetVirtualActorByIndex final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBFGVirtualActor                       ReturnValue;                                       // 0x0010(0x00D0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVirtualCrowd_GetVirtualActorByIndex) == 0x000010, "Wrong alignment on BFGVirtualCrowd_GetVirtualActorByIndex");
static_assert(sizeof(BFGVirtualCrowd_GetVirtualActorByIndex) == 0x0000E0, "Wrong size on BFGVirtualCrowd_GetVirtualActorByIndex");
static_assert(offsetof(BFGVirtualCrowd_GetVirtualActorByIndex, _iIndex) == 0x000000, "Member 'BFGVirtualCrowd_GetVirtualActorByIndex::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_GetVirtualActorByIndex, ReturnValue) == 0x000010, "Member 'BFGVirtualCrowd_GetVirtualActorByIndex::ReturnValue' has a wrong offset!");

// Function BFGVisualEffects.BFGVirtualCrowd.RemoveVirtualActor
// 0x0004 (0x0004 - 0x0000)
struct BFGVirtualCrowd_RemoveVirtualActor final
{
public:
	int32                                         _iActorHandle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVirtualCrowd_RemoveVirtualActor) == 0x000004, "Wrong alignment on BFGVirtualCrowd_RemoveVirtualActor");
static_assert(sizeof(BFGVirtualCrowd_RemoveVirtualActor) == 0x000004, "Wrong size on BFGVirtualCrowd_RemoveVirtualActor");
static_assert(offsetof(BFGVirtualCrowd_RemoveVirtualActor, _iActorHandle) == 0x000000, "Member 'BFGVirtualCrowd_RemoveVirtualActor::_iActorHandle' has a wrong offset!");

// Function BFGVisualEffects.BFGVirtualCrowd.SetVirtualActorVisibility
// 0x0008 (0x0008 - 0x0000)
struct BFGVirtualCrowd_SetVirtualActorVisibility final
{
public:
	int32                                         _iActorHandle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHidden;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVirtualCrowd_SetVirtualActorVisibility) == 0x000004, "Wrong alignment on BFGVirtualCrowd_SetVirtualActorVisibility");
static_assert(sizeof(BFGVirtualCrowd_SetVirtualActorVisibility) == 0x000008, "Wrong size on BFGVirtualCrowd_SetVirtualActorVisibility");
static_assert(offsetof(BFGVirtualCrowd_SetVirtualActorVisibility, _iActorHandle) == 0x000000, "Member 'BFGVirtualCrowd_SetVirtualActorVisibility::_iActorHandle' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_SetVirtualActorVisibility, _bHidden) == 0x000004, "Member 'BFGVirtualCrowd_SetVirtualActorVisibility::_bHidden' has a wrong offset!");

// Function BFGVisualEffects.BFGVirtualCrowd.UpdateVirtualActorAnimation
// 0x000C (0x000C - 0x0000)
struct BFGVirtualCrowd_UpdateVirtualActorAnimation final
{
public:
	int32                                         _iActorHandle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iAnimState;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForceTimeUpdate;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVirtualCrowd_UpdateVirtualActorAnimation) == 0x000004, "Wrong alignment on BFGVirtualCrowd_UpdateVirtualActorAnimation");
static_assert(sizeof(BFGVirtualCrowd_UpdateVirtualActorAnimation) == 0x00000C, "Wrong size on BFGVirtualCrowd_UpdateVirtualActorAnimation");
static_assert(offsetof(BFGVirtualCrowd_UpdateVirtualActorAnimation, _iActorHandle) == 0x000000, "Member 'BFGVirtualCrowd_UpdateVirtualActorAnimation::_iActorHandle' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_UpdateVirtualActorAnimation, _iAnimState) == 0x000004, "Member 'BFGVirtualCrowd_UpdateVirtualActorAnimation::_iAnimState' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_UpdateVirtualActorAnimation, _bForceTimeUpdate) == 0x000008, "Member 'BFGVirtualCrowd_UpdateVirtualActorAnimation::_bForceTimeUpdate' has a wrong offset!");

// Function BFGVisualEffects.BFGVirtualCrowd.UpdateVirtualActorDamageProxy
// 0x0008 (0x0008 - 0x0000)
struct BFGVirtualCrowd_UpdateVirtualActorDamageProxy final
{
public:
	int32                                         _iActorHandle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bEnabled;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVirtualCrowd_UpdateVirtualActorDamageProxy) == 0x000004, "Wrong alignment on BFGVirtualCrowd_UpdateVirtualActorDamageProxy");
static_assert(sizeof(BFGVirtualCrowd_UpdateVirtualActorDamageProxy) == 0x000008, "Wrong size on BFGVirtualCrowd_UpdateVirtualActorDamageProxy");
static_assert(offsetof(BFGVirtualCrowd_UpdateVirtualActorDamageProxy, _iActorHandle) == 0x000000, "Member 'BFGVirtualCrowd_UpdateVirtualActorDamageProxy::_iActorHandle' has a wrong offset!");
static_assert(offsetof(BFGVirtualCrowd_UpdateVirtualActorDamageProxy, _bEnabled) == 0x000004, "Member 'BFGVirtualCrowd_UpdateVirtualActorDamageProxy::_bEnabled' has a wrong offset!");

}

