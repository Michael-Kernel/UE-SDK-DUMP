#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterPlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BFGCore_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterPlayer.BP_CharacterPlayer_C
// 0x01A0 (0x0C50 - 0x0AB0)
class ABP_CharacterPlayer_C final : public ABFGPlayerCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AB0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPaperSpriteComponent*                  OOB_Indicator;                                     // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       CancelHolobobWidget;                               // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SceneComponent_OOBNotifier_C*       BP_SceneComponent_OOBNotifier;                     // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Jammed;                                      // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SceneComponent_HighlightableSceneObject_C* HighlightablePivot;                                // 0x0AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  RestrictedAreaPostProcess;                         // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  DisabledWeaponsPostProcess;                        // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   OOB_Plane;                                         // 0x0AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_OverheadOpportunityWidgetComponent_C* BP_OverheadOpportunityWidgetComponent;             // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_ShieldWater;                                 // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_VO_Output;                                   // 0x0B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  LowShieldPostProcess;                              // 0x0B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_ShieldAlarm;                                 // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_ShieldRecharge;                              // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Actor_Component_IK_C*               BP_Actor_Component_IK;                             // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ActorComponent_RadarObject_NPC_C*   BP_ActorComponent_RadarObject_NPC;                 // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UActorComp_Ambience_ControlMain_C*      ActorComp_Ambience_ControlMain;                    // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UActorComp_Ambience_Triggercheck_C*     ActorComp_Ambience_Triggercheck;                   // 0x0B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Jetpack_Boost;                               // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Jetpack;                                     // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_Jepack_FX_Right;                                // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_Jepack_FX_Left;                                 // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ShieldCollision;                                   // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   FireWeapon;                                        // 0x0B80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UParticleSystemComponent*               DashEffect;                                        // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                XFX_JetpackUp_Vector;                              // 0x0BA0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Audioparam_JetpackPower;                           // 0x0BAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XFX_JetpackUp_Normalized;                          // 0x0BB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XFX_JetpackUp;                                     // 0x0BB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Audio_JetpackTargetValue;                          // 0x0BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Audio_BoostSoundStopped;                           // 0x0BBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BBD[0x3];                                      // 0x0BBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         XFX_Jetpack_AssumedRatio_GlideToFull;              // 0x0BC0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XFX_Jetpack_CoordinateOrigin;                      // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBFGDataAsset_JetpackParams*            XFX_JetpackParams;                                 // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XFX_Jetpack_MaxUpSpeed;                            // 0x0BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XFX_CurrentTakeOffTime;                            // 0x0BD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dyn_JetpackMaterial;                               // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynJetpackBagMaterial;                             // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BrainMaterialInstance;                             // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainMaterialCurrentValue;                         // 0x0BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF4[0x4];                                      // 0x0BF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBFGEffectContainer*>            Array_AllFX_Shield;                                // 0x0BF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAudioComponent*>                Array_AllSounds_Shield;                            // 0x0C08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          ShieldDamageReceived;                              // 0x0C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugMode;                                         // 0x0C19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1A[0x2];                                      // 0x0C1A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentShieldRatio;                                // 0x0C1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve_ShieldAlarm;                                 // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowShieldPostProcessVisualEffect;                  // 0x0C28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShieldWater_Fading;                                // 0x0C2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Onest_WeaponChange_happened;                       // 0x0C2D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Jammed_Now_Off;                                    // 0x0C2E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2F[0x1];                                      // 0x0C2F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastShieldDamageTime;                              // 0x0C34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shield_Play_Short;                                 // 0x0C38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C39[0x7];                                      // 0x0C39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 HolobobClass;                                      // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void HideHoleInWaterIfInvisible(bool bInvisible);
	void DisableLowShieldPostProcessFX();
	void DisableRestrictedAreaPostProcessFX();
	void DisableWeaponsPostProcessFX();
	void DirtAfterCSEffect();
	void TryTriggerShieldFullyGenerated(bool IsShieldRegenerating);
	void Achievement_ShootAndMental();
	void Effect_JetpackThrottlePressed();
	void Effect_CreateMaterialInstances();
	void Effect_JetpackOutOfFuel();
	void Effect_JetpackDeployed();
	void Effect_JetpackUpdate();
	void Effect_ShieldInWater();
	void Audio_ShieldDamaged(const class UBFGDamageType* DamageType);
	void Effect_JetpackThrottleReleased();
	void Audio_RegenerationStateChanged(bool IsEnabled);
	void Effect_PlayerShield(float ShieldDamage, const struct FHitResult& HitRes);
	void Audio_InjurySounds(float Damage);
	void Audio_WeaponChanged(bool Equip);
	void Effect_UpdateBrainGlow();
	void Effect_UpdateRestrictedAreaEffect();
	void ComputeDisabledWeaponStrength(float InDuration, float InTimer, float* OutStrength);
	void Effect_UpdateJammedPostProcessEffect();
	class UPrimitiveComponent* GetTriggerZoneIndicatorComponent();
	void Check_walk_on_physics_object(bool* WalkOnPhysics, class FString* Name_0, int32* Surface);
	void Audio_UpdateShieldWater();
	void Effect_HudVisibilityCallback(bool IsVisible);
	void Effect_BindShieldEvents();
	void Effect_UpdateLowShieldPostProcessEffect(class AActor* Actor, class UBFGActorStat_Float* Stat);
	class UStaticMeshComponent* GetTriggerZoneIndicator();
	void Audio_UpdateShieldAlarm();
	void Audio_HandoverToEach(TArray<class UAudioComponent*>& Array_AllTargetSounds, class FName TargetParameterName, float TargetValue);
	void Audio_CompileAllSpawnedSounds(TArray<class UBFGEffectContainer*>& Input_ArrayOfAllEffects, TArray<class UAudioComponent*>* Output_ArrayOfJustSounds);
	void XFX_Jetpack_Calculate_CoordinateOrigin();
	void Audio_Parameter_Handover(float DeltaSeconds);
	void XFX_Update_Jetpack_Values(float Delta_Seconds);
	void XFX_Debug_JetpackValues_Readout();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void BndEvt__m_pDashComponent_K2Node_ComponentBoundEvent_0_BFGActorComponent_Dash_Event__DelegateSignature(class UBFGActorComponent_Dash* _pDashComponent);
	void BndEvt__m_pDamageComponent_K2Node_ComponentBoundEvent_2_BFGActorComponent_PawnDamage_DamageEvent__DelegateSignature(class UBFGActorComponent_PawnDamage* _pPawnDamage, float _fDamage, class AActor* _pDamageCauser, const class UBFGDamageType* _pDamageType, const struct FVector& _rShotDirection, const struct FHitResult& _oHitResult);
	void BndEvt__m_pJetpackPilotComponent_K2Node_ComponentBoundEvent_4_BFGActorComponent_Jetpack_Event__DelegateSignature(class UBFGActorComponent_JetpackPilot* _pJetpackComponent);
	void OnEnteredWater();
	void OnShowTriggerZoneMessage(bool _bIsOutside);
	void Death_Stat_Changed(class AActor* _pActor, class UBFGActorStat_Bool* _pStat);
	void OnEnteredUFO();
	void BndEvt__m_pDamageComponent_K2Node_ComponentBoundEvent_1_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature(class UBFGActorComponent_PawnDamage* _pPawnDamage, float _fDamage, class AActor* _pDamageCauser, const class UBFGDamageType* _pDamageType, const struct FVector& _rShotDirection, const struct FHitResult& _oHitResult);
	void OnJumped();
	void BndEvt__m_pJetpackPilotComponent_K2Node_ComponentBoundEvent_3_BFGActorComponent_Jetpack_Event__DelegateSignature(class UBFGActorComponent_JetpackPilot* _pJetpackComponent);
	void BndEvt__m_pJetpackPilotComponent_K2Node_ComponentBoundEvent_6_BFGActorComponent_Jetpack_Event__DelegateSignature(class UBFGActorComponent_JetpackPilot* _pJetpackComponent);
	void BndEvt__m_pJetpackPilotComponent_K2Node_ComponentBoundEvent_7_BFGActorComponent_Jetpack_Event__DelegateSignature(class UBFGActorComponent_JetpackPilot* _pJetpackComponent);
	void BndEvt__m_pEquipmentManagerComponent_K2Node_ComponentBoundEvent_4_BFGEquipmentManager_WeaponEvent__DelegateSignature(class ABFGWeapon* _pWeapon, bool _bEnabled);
	void BndEvt__m_pJetpackPilotComponent_K2Node_ComponentBoundEvent_20_BFGActorComponent_Jetpack_Event__DelegateSignature(class UBFGActorComponent_JetpackPilot* _pJetpackComponent);
	void BndEvt__m_pJetpackPilotComponent_K2Node_ComponentBoundEvent_21_BFGActorComponent_Jetpack_Event__DelegateSignature(class UBFGActorComponent_JetpackPilot* _pJetpackComponent);
	void ShieldStatChanged(class AActor* _pActor, class UBFGActorStat_Float* _pStat);
	void OnRegenerationChanged(bool _bEnabled);
	void OnSkinChanged();
	void BndEvt__m_pDashComponent_K2Node_ComponentBoundEvent_7_BFGActorComponent_DashPhase_Event__DelegateSignature(class UBFGActorComponent_Dash* _pDashComponent, int32 _iPhase);
	void BndEvt__m_pDamageComponent_K2Node_ComponentBoundEvent_5_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature(class UBFGActorComponent_PawnDamage* _pPawnDamage, float _fDamage, class AActor* _pDamageCauser, const class UBFGDamageType* _pDamageType, const struct FVector& _rShotDirection, const struct FHitResult& _oHitResult);
	void OnStartHolobobCancel(class UBFGMentalAbility_Holobob* _pMentalAbility);
	void OnHolobobStoppedCancel(class UBFGMentalAbility_Holobob* _pMentalAbility);
	void OnHolobobStopped(class UBFGMentalAbilityBase* _pMentalAbility);
	void DirtOnCrypto_CS();
	void BP_OnCutsceneStarted();
	void VisibilityHiddenIngameChanged(bool _bValue);
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ExecuteUbergraph_BP_CharacterPlayer(int32 EntryPoint);
	void FireWeapon__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterPlayer_C">();
	}
	static class ABP_CharacterPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharacterPlayer_C>();
	}
};
static_assert(alignof(ABP_CharacterPlayer_C) == 0x000010, "Wrong alignment on ABP_CharacterPlayer_C");
static_assert(sizeof(ABP_CharacterPlayer_C) == 0x000C50, "Wrong size on ABP_CharacterPlayer_C");
static_assert(offsetof(ABP_CharacterPlayer_C, UberGraphFrame) == 0x000AB0, "Member 'ABP_CharacterPlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, OOB_Indicator) == 0x000AB8, "Member 'ABP_CharacterPlayer_C::OOB_Indicator' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, CancelHolobobWidget) == 0x000AC0, "Member 'ABP_CharacterPlayer_C::CancelHolobobWidget' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, BP_SceneComponent_OOBNotifier) == 0x000AC8, "Member 'ABP_CharacterPlayer_C::BP_SceneComponent_OOBNotifier' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Audio_Jammed) == 0x000AD0, "Member 'ABP_CharacterPlayer_C::Audio_Jammed' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, HighlightablePivot) == 0x000AD8, "Member 'ABP_CharacterPlayer_C::HighlightablePivot' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, RestrictedAreaPostProcess) == 0x000AE0, "Member 'ABP_CharacterPlayer_C::RestrictedAreaPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, DisabledWeaponsPostProcess) == 0x000AE8, "Member 'ABP_CharacterPlayer_C::DisabledWeaponsPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, OOB_Plane) == 0x000AF0, "Member 'ABP_CharacterPlayer_C::OOB_Plane' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, BP_OverheadOpportunityWidgetComponent) == 0x000AF8, "Member 'ABP_CharacterPlayer_C::BP_OverheadOpportunityWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Audio_ShieldWater) == 0x000B00, "Member 'ABP_CharacterPlayer_C::Audio_ShieldWater' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Audio_VO_Output) == 0x000B08, "Member 'ABP_CharacterPlayer_C::Audio_VO_Output' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, LowShieldPostProcess) == 0x000B10, "Member 'ABP_CharacterPlayer_C::LowShieldPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Audio_ShieldAlarm) == 0x000B18, "Member 'ABP_CharacterPlayer_C::Audio_ShieldAlarm' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Audio_ShieldRecharge) == 0x000B20, "Member 'ABP_CharacterPlayer_C::Audio_ShieldRecharge' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, BP_Actor_Component_IK) == 0x000B28, "Member 'ABP_CharacterPlayer_C::BP_Actor_Component_IK' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, BP_ActorComponent_RadarObject_NPC) == 0x000B30, "Member 'ABP_CharacterPlayer_C::BP_ActorComponent_RadarObject_NPC' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, DirectionalLight) == 0x000B38, "Member 'ABP_CharacterPlayer_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, ActorComp_Ambience_ControlMain) == 0x000B40, "Member 'ABP_CharacterPlayer_C::ActorComp_Ambience_ControlMain' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, ActorComp_Ambience_Triggercheck) == 0x000B48, "Member 'ABP_CharacterPlayer_C::ActorComp_Ambience_Triggercheck' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Audio_Jetpack_Boost) == 0x000B50, "Member 'ABP_CharacterPlayer_C::Audio_Jetpack_Boost' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Audio_Jetpack) == 0x000B58, "Member 'ABP_CharacterPlayer_C::Audio_Jetpack' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, BP_Jepack_FX_Right) == 0x000B60, "Member 'ABP_CharacterPlayer_C::BP_Jepack_FX_Right' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, BP_Jepack_FX_Left) == 0x000B68, "Member 'ABP_CharacterPlayer_C::BP_Jepack_FX_Left' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, ShieldCollision) == 0x000B70, "Member 'ABP_CharacterPlayer_C::ShieldCollision' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Arrow1) == 0x000B78, "Member 'ABP_CharacterPlayer_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, FireWeapon) == 0x000B80, "Member 'ABP_CharacterPlayer_C::FireWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, DashEffect) == 0x000B98, "Member 'ABP_CharacterPlayer_C::DashEffect' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, XFX_JetpackUp_Vector) == 0x000BA0, "Member 'ABP_CharacterPlayer_C::XFX_JetpackUp_Vector' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Audioparam_JetpackPower) == 0x000BAC, "Member 'ABP_CharacterPlayer_C::Audioparam_JetpackPower' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, XFX_JetpackUp_Normalized) == 0x000BB0, "Member 'ABP_CharacterPlayer_C::XFX_JetpackUp_Normalized' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, XFX_JetpackUp) == 0x000BB4, "Member 'ABP_CharacterPlayer_C::XFX_JetpackUp' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Audio_JetpackTargetValue) == 0x000BB8, "Member 'ABP_CharacterPlayer_C::Audio_JetpackTargetValue' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Audio_BoostSoundStopped) == 0x000BBC, "Member 'ABP_CharacterPlayer_C::Audio_BoostSoundStopped' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, XFX_Jetpack_AssumedRatio_GlideToFull) == 0x000BC0, "Member 'ABP_CharacterPlayer_C::XFX_Jetpack_AssumedRatio_GlideToFull' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, XFX_Jetpack_CoordinateOrigin) == 0x000BC4, "Member 'ABP_CharacterPlayer_C::XFX_Jetpack_CoordinateOrigin' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, XFX_JetpackParams) == 0x000BC8, "Member 'ABP_CharacterPlayer_C::XFX_JetpackParams' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, XFX_Jetpack_MaxUpSpeed) == 0x000BD0, "Member 'ABP_CharacterPlayer_C::XFX_Jetpack_MaxUpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, XFX_CurrentTakeOffTime) == 0x000BD4, "Member 'ABP_CharacterPlayer_C::XFX_CurrentTakeOffTime' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Dyn_JetpackMaterial) == 0x000BD8, "Member 'ABP_CharacterPlayer_C::Dyn_JetpackMaterial' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, DynJetpackBagMaterial) == 0x000BE0, "Member 'ABP_CharacterPlayer_C::DynJetpackBagMaterial' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, BrainMaterialInstance) == 0x000BE8, "Member 'ABP_CharacterPlayer_C::BrainMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, BrainMaterialCurrentValue) == 0x000BF0, "Member 'ABP_CharacterPlayer_C::BrainMaterialCurrentValue' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Array_AllFX_Shield) == 0x000BF8, "Member 'ABP_CharacterPlayer_C::Array_AllFX_Shield' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Array_AllSounds_Shield) == 0x000C08, "Member 'ABP_CharacterPlayer_C::Array_AllSounds_Shield' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, ShieldDamageReceived) == 0x000C18, "Member 'ABP_CharacterPlayer_C::ShieldDamageReceived' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, DebugMode) == 0x000C19, "Member 'ABP_CharacterPlayer_C::DebugMode' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, CurrentShieldRatio) == 0x000C1C, "Member 'ABP_CharacterPlayer_C::CurrentShieldRatio' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Curve_ShieldAlarm) == 0x000C20, "Member 'ABP_CharacterPlayer_C::Curve_ShieldAlarm' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, LowShieldPostProcessVisualEffect) == 0x000C28, "Member 'ABP_CharacterPlayer_C::LowShieldPostProcessVisualEffect' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, ShieldWater_Fading) == 0x000C2C, "Member 'ABP_CharacterPlayer_C::ShieldWater_Fading' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Onest_WeaponChange_happened) == 0x000C2D, "Member 'ABP_CharacterPlayer_C::Onest_WeaponChange_happened' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Jammed_Now_Off) == 0x000C2E, "Member 'ABP_CharacterPlayer_C::Jammed_Now_Off' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, DeltaTime) == 0x000C30, "Member 'ABP_CharacterPlayer_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, LastShieldDamageTime) == 0x000C34, "Member 'ABP_CharacterPlayer_C::LastShieldDamageTime' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, Shield_Play_Short) == 0x000C38, "Member 'ABP_CharacterPlayer_C::Shield_Play_Short' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPlayer_C, HolobobClass) == 0x000C40, "Member 'ABP_CharacterPlayer_C::HolobobClass' has a wrong offset!");

}

