#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BurningGroundActorComponent

#include "Basic.hpp"

#include "BP_BurningGroundActorComponent_classes.hpp"
#include "BP_BurningGroundActorComponent_parameters.hpp"


namespace SDK
{

// Function BP_BurningGroundActorComponent.BP_BurningGroundActorComponent_C.BurnFoilageObject
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit_Result                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_BurningGroundActorComponent_C::BurnFoilageObject(const struct FHitResult& Hit_Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGroundActorComponent_C", "BurnFoilageObject");

	Params::BP_BurningGroundActorComponent_C_BurnFoilageObject Parms{};

	Parms.Hit_Result = std::move(Hit_Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGroundActorComponent.BP_BurningGroundActorComponent_C.DoSingleEventWrite
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldspaceLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SplashRadius                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BurningGroundActorComponent_C::DoSingleEventWrite(const struct FVector& WorldspaceLocation, float SplashRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGroundActorComponent_C", "DoSingleEventWrite");

	Params::BP_BurningGroundActorComponent_C_DoSingleEventWrite Parms{};

	Parms.WorldspaceLocation = std::move(WorldspaceLocation);
	Parms.SplashRadius = SplashRadius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGroundActorComponent.BP_BurningGroundActorComponent_C.DoStopChanneledWrite
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BurningGroundActorComponent_C::DoStopChanneledWrite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGroundActorComponent_C", "DoStopChanneledWrite");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BurningGroundActorComponent.BP_BurningGroundActorComponent_C.DoStartChanneledWrite
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          VTargetLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHitTarget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   BurningDuration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BurningGroundActorComponent_C::DoStartChanneledWrite(const struct FVector& VTargetLocation, bool bHitTarget, const struct FHitResult& Hit, float BurningDuration, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGroundActorComponent_C", "DoStartChanneledWrite");

	Params::BP_BurningGroundActorComponent_C_DoStartChanneledWrite Parms{};

	Parms.VTargetLocation = std::move(VTargetLocation);
	Parms.bHitTarget = bHitTarget;
	Parms.Hit = std::move(Hit);
	Parms.BurningDuration = BurningDuration;
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGroundActorComponent.BP_BurningGroundActorComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_BurningGroundActorComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGroundActorComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BurningGroundActorComponent.BP_BurningGroundActorComponent_C.ExecuteUbergraph_BP_BurningGroundActorComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BurningGroundActorComponent_C::ExecuteUbergraph_BP_BurningGroundActorComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGroundActorComponent_C", "ExecuteUbergraph_BP_BurningGroundActorComponent");

	Params::BP_BurningGroundActorComponent_C_ExecuteUbergraph_BP_BurningGroundActorComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

