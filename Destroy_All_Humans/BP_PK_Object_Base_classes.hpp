#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PK_Object_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PK_Object_Base.BP_PK_Object_Base_C
// 0x0088 (0x0620 - 0x0598)
class ABP_PK_Object_Base_C final : public ABFGObject_StaticWithPhysics
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0598(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsInPKBubble;                                      // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A1[0x7];                                      // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlastMeshComponent*                    BlastMesh;                                         // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBurning;                                         // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B1[0x3];                                      // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDestructionVelocity;                            // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   BurningLight;                                      // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               BurningParticles;                                  // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BurnDownTime;                                      // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitTillBurnDown;                                  // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialLightRadius;                                // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialLightIntensity;                             // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInWater;                                         // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BurningGround_C*                    RTHistoryBBox;                                     // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WaterHitDirection;                                 // 0x05E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpringBuffer;                                      // 0x05F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterHitMagnitude;                                 // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         buoyancyTimeAccumulation;                          // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         buoyancyDuration;                                  // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         buoyancyFactor;                                    // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         buoyancyCurrentEffector;                           // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         buoyancyGameTimeMarker;                            // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDestructionDone;                                 // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PK_Object_Base(int32 EntryPoint);
	void SetOnFire();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void HitWater();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnPKPickUp();
	void OnPKDrop();
	void SetOnFireInternal();
	void EnablePhysics();
	void ExtinguishFire();
	void BurnDown(const float DeltaTime);
	void InitBuoyancy();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PK_Object_Base_C">();
	}
	static class ABP_PK_Object_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PK_Object_Base_C>();
	}
};
static_assert(alignof(ABP_PK_Object_Base_C) == 0x000008, "Wrong alignment on ABP_PK_Object_Base_C");
static_assert(sizeof(ABP_PK_Object_Base_C) == 0x000620, "Wrong size on ABP_PK_Object_Base_C");
static_assert(offsetof(ABP_PK_Object_Base_C, UberGraphFrame) == 0x000598, "Member 'ABP_PK_Object_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, IsInPKBubble) == 0x0005A0, "Member 'ABP_PK_Object_Base_C::IsInPKBubble' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, BlastMesh) == 0x0005A8, "Member 'ABP_PK_Object_Base_C::BlastMesh' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, IsBurning) == 0x0005B0, "Member 'ABP_PK_Object_Base_C::IsBurning' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, MinDestructionVelocity) == 0x0005B4, "Member 'ABP_PK_Object_Base_C::MinDestructionVelocity' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, BurningLight) == 0x0005B8, "Member 'ABP_PK_Object_Base_C::BurningLight' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, BurningParticles) == 0x0005C0, "Member 'ABP_PK_Object_Base_C::BurningParticles' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, BurnDownTime) == 0x0005C8, "Member 'ABP_PK_Object_Base_C::BurnDownTime' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, WaitTillBurnDown) == 0x0005CC, "Member 'ABP_PK_Object_Base_C::WaitTillBurnDown' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, InitialLightRadius) == 0x0005D0, "Member 'ABP_PK_Object_Base_C::InitialLightRadius' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, InitialLightIntensity) == 0x0005D4, "Member 'ABP_PK_Object_Base_C::InitialLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, IsInWater) == 0x0005D8, "Member 'ABP_PK_Object_Base_C::IsInWater' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, RTHistoryBBox) == 0x0005E0, "Member 'ABP_PK_Object_Base_C::RTHistoryBBox' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, WaterHitDirection) == 0x0005E8, "Member 'ABP_PK_Object_Base_C::WaterHitDirection' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, SpringBuffer) == 0x0005F4, "Member 'ABP_PK_Object_Base_C::SpringBuffer' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, WaterHitMagnitude) == 0x000600, "Member 'ABP_PK_Object_Base_C::WaterHitMagnitude' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, buoyancyTimeAccumulation) == 0x000604, "Member 'ABP_PK_Object_Base_C::buoyancyTimeAccumulation' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, buoyancyDuration) == 0x000608, "Member 'ABP_PK_Object_Base_C::buoyancyDuration' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, buoyancyFactor) == 0x00060C, "Member 'ABP_PK_Object_Base_C::buoyancyFactor' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, buoyancyCurrentEffector) == 0x000610, "Member 'ABP_PK_Object_Base_C::buoyancyCurrentEffector' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, buoyancyGameTimeMarker) == 0x000614, "Member 'ABP_PK_Object_Base_C::buoyancyGameTimeMarker' has a wrong offset!");
static_assert(offsetof(ABP_PK_Object_Base_C, IsDestructionDone) == 0x000618, "Member 'ABP_PK_Object_Base_C::IsDestructionDone' has a wrong offset!");

}

