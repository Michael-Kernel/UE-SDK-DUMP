#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Crypto_AnimBP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Crypto_AnimBP.Crypto_AnimBP_C.SetStopAnims
// 0x0028 (0x0028 - 0x0000)
struct Crypto_AnimBP_C_SetStopAnims final
{
public:
	class UAnimSequence*                          bpp__AnimA__pf;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__AnimA_additive__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__AnimB__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__AnimB_additive__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__BlendValue__pf;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Crypto_AnimBP_C_SetStopAnims) == 0x000008, "Wrong alignment on Crypto_AnimBP_C_SetStopAnims");
static_assert(sizeof(Crypto_AnimBP_C_SetStopAnims) == 0x000028, "Wrong size on Crypto_AnimBP_C_SetStopAnims");
static_assert(offsetof(Crypto_AnimBP_C_SetStopAnims, bpp__AnimA__pf) == 0x000000, "Member 'Crypto_AnimBP_C_SetStopAnims::bpp__AnimA__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SetStopAnims, bpp__AnimA_additive__pf) == 0x000008, "Member 'Crypto_AnimBP_C_SetStopAnims::bpp__AnimA_additive__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SetStopAnims, bpp__AnimB__pf) == 0x000010, "Member 'Crypto_AnimBP_C_SetStopAnims::bpp__AnimB__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SetStopAnims, bpp__AnimB_additive__pf) == 0x000018, "Member 'Crypto_AnimBP_C_SetStopAnims::bpp__AnimB_additive__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SetStopAnims, bpp__BlendValue__pf) == 0x000020, "Member 'Crypto_AnimBP_C_SetStopAnims::bpp__BlendValue__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.SetHitResult
// 0x0001 (0x0001 - 0x0000)
struct Crypto_AnimBP_C_SetHitResult final
{
public:
	bool                                          bpp__BlockingHit__pf;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_SetHitResult) == 0x000001, "Wrong alignment on Crypto_AnimBP_C_SetHitResult");
static_assert(sizeof(Crypto_AnimBP_C_SetHitResult) == 0x000001, "Wrong size on Crypto_AnimBP_C_SetHitResult");
static_assert(offsetof(Crypto_AnimBP_C_SetHitResult, bpp__BlockingHit__pf) == 0x000000, "Member 'Crypto_AnimBP_C_SetHitResult::bpp__BlockingHit__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.SetFloorNormal
// 0x000C (0x000C - 0x0000)
struct Crypto_AnimBP_C_SetFloorNormal final
{
public:
	struct FVector                                bpp__SetFloorNormal__pf;                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_SetFloorNormal) == 0x000004, "Wrong alignment on Crypto_AnimBP_C_SetFloorNormal");
static_assert(sizeof(Crypto_AnimBP_C_SetFloorNormal) == 0x00000C, "Wrong size on Crypto_AnimBP_C_SetFloorNormal");
static_assert(offsetof(Crypto_AnimBP_C_SetFloorNormal, bpp__SetFloorNormal__pf) == 0x000000, "Member 'Crypto_AnimBP_C_SetFloorNormal::bpp__SetFloorNormal__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.SelectTransitionAnimations
// 0x0070 (0x0070 - 0x0000)
struct Crypto_AnimBP_C_SelectTransitionAnimations final
{
public:
	class UAnimSequence*                          bpp__UB_F__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__UB_R__pf;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__UB_L__pf;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__UB_B__pf;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__LB_F__pf;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__LB_R__pf;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__LB_L__pf;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__LB_B__pf;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Direction__pf;                                // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          bpp__AnimA__pf;                                    // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__AnimA_additive__pf;                           // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__AnimB__pf;                                    // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__AnimB_additive__pf;                           // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__BlendValue__pf;                               // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Crypto_AnimBP_C_SelectTransitionAnimations) == 0x000008, "Wrong alignment on Crypto_AnimBP_C_SelectTransitionAnimations");
static_assert(sizeof(Crypto_AnimBP_C_SelectTransitionAnimations) == 0x000070, "Wrong size on Crypto_AnimBP_C_SelectTransitionAnimations");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__UB_F__pf) == 0x000000, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__UB_F__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__UB_R__pf) == 0x000008, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__UB_R__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__UB_L__pf) == 0x000010, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__UB_L__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__UB_B__pf) == 0x000018, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__UB_B__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__LB_F__pf) == 0x000020, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__LB_F__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__LB_R__pf) == 0x000028, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__LB_R__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__LB_L__pf) == 0x000030, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__LB_L__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__LB_B__pf) == 0x000038, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__LB_B__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__Direction__pf) == 0x000040, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__Direction__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__AnimA__pf) == 0x000048, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__AnimA__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__AnimA_additive__pf) == 0x000050, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__AnimA_additive__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__AnimB__pf) == 0x000058, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__AnimB__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__AnimB_additive__pf) == 0x000060, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__AnimB_additive__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectTransitionAnimations, bpp__BlendValue__pf) == 0x000068, "Member 'Crypto_AnimBP_C_SelectTransitionAnimations::bpp__BlendValue__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.SelectSpeedWarpingDirection
// 0x0008 (0x0008 - 0x0000)
struct Crypto_AnimBP_C_SelectSpeedWarpingDirection final
{
public:
	float                                         bpp__XY__pf;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Z__pf;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_SelectSpeedWarpingDirection) == 0x000004, "Wrong alignment on Crypto_AnimBP_C_SelectSpeedWarpingDirection");
static_assert(sizeof(Crypto_AnimBP_C_SelectSpeedWarpingDirection) == 0x000008, "Wrong size on Crypto_AnimBP_C_SelectSpeedWarpingDirection");
static_assert(offsetof(Crypto_AnimBP_C_SelectSpeedWarpingDirection, bpp__XY__pf) == 0x000000, "Member 'Crypto_AnimBP_C_SelectSpeedWarpingDirection::bpp__XY__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_SelectSpeedWarpingDirection, bpp__Z__pf) == 0x000004, "Member 'Crypto_AnimBP_C_SelectSpeedWarpingDirection::bpp__Z__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.IsLockOnActive
// 0x0001 (0x0001 - 0x0000)
struct Crypto_AnimBP_C_IsLockOnActive final
{
public:
	bool                                          bpp__IsLockOnActive__pf;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_IsLockOnActive) == 0x000001, "Wrong alignment on Crypto_AnimBP_C_IsLockOnActive");
static_assert(sizeof(Crypto_AnimBP_C_IsLockOnActive) == 0x000001, "Wrong size on Crypto_AnimBP_C_IsLockOnActive");
static_assert(offsetof(Crypto_AnimBP_C_IsLockOnActive, bpp__IsLockOnActive__pf) == 0x000000, "Member 'Crypto_AnimBP_C_IsLockOnActive::bpp__IsLockOnActive__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.G2AShotFire
// 0x0008 (0x0008 - 0x0000)
struct Crypto_AnimBP_C_G2AShotFire final
{
public:
	class FName                                   bpp___nSocketName__pf;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_G2AShotFire) == 0x000004, "Wrong alignment on Crypto_AnimBP_C_G2AShotFire");
static_assert(sizeof(Crypto_AnimBP_C_G2AShotFire) == 0x000008, "Wrong size on Crypto_AnimBP_C_G2AShotFire");
static_assert(offsetof(Crypto_AnimBP_C_G2AShotFire, bpp___nSocketName__pf) == 0x000000, "Member 'Crypto_AnimBP_C_G2AShotFire::bpp___nSocketName__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.G2AGetHit
// 0x0018 (0x0018 - 0x0000)
struct Crypto_AnimBP_C_G2AGetHit final
{
public:
	struct FVector                                bpp___vHitDirection__pf__const;                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UBFGDamageType*                   bpp___pDamageType__pf__const;                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_G2AGetHit) == 0x000008, "Wrong alignment on Crypto_AnimBP_C_G2AGetHit");
static_assert(sizeof(Crypto_AnimBP_C_G2AGetHit) == 0x000018, "Wrong size on Crypto_AnimBP_C_G2AGetHit");
static_assert(offsetof(Crypto_AnimBP_C_G2AGetHit, bpp___vHitDirection__pf__const) == 0x000000, "Member 'Crypto_AnimBP_C_G2AGetHit::bpp___vHitDirection__pf__const' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_G2AGetHit, bpp___pDamageType__pf__const) == 0x000010, "Member 'Crypto_AnimBP_C_G2AGetHit::bpp___pDamageType__pf__const' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.ExecuteUbergraph_Crypto_AnimBP_8
// 0x0004 (0x0004 - 0x0000)
struct Crypto_AnimBP_C_ExecuteUbergraph_Crypto_AnimBP_8 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_ExecuteUbergraph_Crypto_AnimBP_8) == 0x000004, "Wrong alignment on Crypto_AnimBP_C_ExecuteUbergraph_Crypto_AnimBP_8");
static_assert(sizeof(Crypto_AnimBP_C_ExecuteUbergraph_Crypto_AnimBP_8) == 0x000004, "Wrong size on Crypto_AnimBP_C_ExecuteUbergraph_Crypto_AnimBP_8");
static_assert(offsetof(Crypto_AnimBP_C_ExecuteUbergraph_Crypto_AnimBP_8, bpp__EntryPoint__pf) == 0x000000, "Member 'Crypto_AnimBP_C_ExecuteUbergraph_Crypto_AnimBP_8::bpp__EntryPoint__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.ComputeSpeedWarpingAdjustment
// 0x0014 (0x0014 - 0x0000)
struct Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment final
{
public:
	float                                         bpp__Speed__pf;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PlayRateIKPercentageAbove__pf;                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PlayRateIKPercentageBelow__pf;                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PlayRate__pf;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__IKAdjustmentXY__pf;                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment) == 0x000004, "Wrong alignment on Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment");
static_assert(sizeof(Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment) == 0x000014, "Wrong size on Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment");
static_assert(offsetof(Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment, bpp__Speed__pf) == 0x000000, "Member 'Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment::bpp__Speed__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment, bpp__PlayRateIKPercentageAbove__pf) == 0x000004, "Member 'Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment::bpp__PlayRateIKPercentageAbove__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment, bpp__PlayRateIKPercentageBelow__pf) == 0x000008, "Member 'Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment::bpp__PlayRateIKPercentageBelow__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment, bpp__PlayRate__pf) == 0x00000C, "Member 'Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment::bpp__PlayRate__pf' has a wrong offset!");
static_assert(offsetof(Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment, bpp__IKAdjustmentXY__pf) == 0x000010, "Member 'Crypto_AnimBP_C_ComputeSpeedWarpingAdjustment::bpp__IKAdjustmentXY__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.ComputePsiTargetDirection
// 0x0008 (0x0008 - 0x0000)
struct Crypto_AnimBP_C_ComputePsiTargetDirection final
{
public:
	class AActor*                                 bpp__PsiTarget__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_ComputePsiTargetDirection) == 0x000008, "Wrong alignment on Crypto_AnimBP_C_ComputePsiTargetDirection");
static_assert(sizeof(Crypto_AnimBP_C_ComputePsiTargetDirection) == 0x000008, "Wrong size on Crypto_AnimBP_C_ComputePsiTargetDirection");
static_assert(offsetof(Crypto_AnimBP_C_ComputePsiTargetDirection, bpp__PsiTarget__pf) == 0x000000, "Member 'Crypto_AnimBP_C_ComputePsiTargetDirection::bpp__PsiTarget__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.ComputeCardinalVelocityDelta
// 0x0004 (0x0004 - 0x0000)
struct Crypto_AnimBP_C_ComputeCardinalVelocityDelta final
{
public:
	float                                         bpp__CardinalDirectionValue__pf;                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_ComputeCardinalVelocityDelta) == 0x000004, "Wrong alignment on Crypto_AnimBP_C_ComputeCardinalVelocityDelta");
static_assert(sizeof(Crypto_AnimBP_C_ComputeCardinalVelocityDelta) == 0x000004, "Wrong size on Crypto_AnimBP_C_ComputeCardinalVelocityDelta");
static_assert(offsetof(Crypto_AnimBP_C_ComputeCardinalVelocityDelta, bpp__CardinalDirectionValue__pf) == 0x000000, "Member 'Crypto_AnimBP_C_ComputeCardinalVelocityDelta::bpp__CardinalDirectionValue__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.ComputeCardinalDirectionVelocity
// 0x0004 (0x0004 - 0x0000)
struct Crypto_AnimBP_C_ComputeCardinalDirectionVelocity final
{
public:
	float                                         bpp__HorizontalMoveDirection__pf;                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_ComputeCardinalDirectionVelocity) == 0x000004, "Wrong alignment on Crypto_AnimBP_C_ComputeCardinalDirectionVelocity");
static_assert(sizeof(Crypto_AnimBP_C_ComputeCardinalDirectionVelocity) == 0x000004, "Wrong size on Crypto_AnimBP_C_ComputeCardinalDirectionVelocity");
static_assert(offsetof(Crypto_AnimBP_C_ComputeCardinalDirectionVelocity, bpp__HorizontalMoveDirection__pf) == 0x000000, "Member 'Crypto_AnimBP_C_ComputeCardinalDirectionVelocity::bpp__HorizontalMoveDirection__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.ComputeCardinalAccelerationDelta
// 0x0004 (0x0004 - 0x0000)
struct Crypto_AnimBP_C_ComputeCardinalAccelerationDelta final
{
public:
	float                                         bpp__CardinalDirectionValue__pf;                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_ComputeCardinalAccelerationDelta) == 0x000004, "Wrong alignment on Crypto_AnimBP_C_ComputeCardinalAccelerationDelta");
static_assert(sizeof(Crypto_AnimBP_C_ComputeCardinalAccelerationDelta) == 0x000004, "Wrong size on Crypto_AnimBP_C_ComputeCardinalAccelerationDelta");
static_assert(offsetof(Crypto_AnimBP_C_ComputeCardinalAccelerationDelta, bpp__CardinalDirectionValue__pf) == 0x000000, "Member 'Crypto_AnimBP_C_ComputeCardinalAccelerationDelta::bpp__CardinalDirectionValue__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct Crypto_AnimBP_C_BlueprintUpdateAnimation final
{
public:
	float                                         bpp__DeltaTimeX__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on Crypto_AnimBP_C_BlueprintUpdateAnimation");
static_assert(sizeof(Crypto_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on Crypto_AnimBP_C_BlueprintUpdateAnimation");
static_assert(offsetof(Crypto_AnimBP_C_BlueprintUpdateAnimation, bpp__DeltaTimeX__pf) == 0x000000, "Member 'Crypto_AnimBP_C_BlueprintUpdateAnimation::bpp__DeltaTimeX__pf' has a wrong offset!");

// Function Crypto_AnimBP.Crypto_AnimBP_C.AdditionalPitchOffset
// 0x0004 (0x0004 - 0x0000)
struct Crypto_AnimBP_C_AdditionalPitchOffset final
{
public:
	float                                         bpp__AdditionalPitchOffset__pf;                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Crypto_AnimBP_C_AdditionalPitchOffset) == 0x000004, "Wrong alignment on Crypto_AnimBP_C_AdditionalPitchOffset");
static_assert(sizeof(Crypto_AnimBP_C_AdditionalPitchOffset) == 0x000004, "Wrong size on Crypto_AnimBP_C_AdditionalPitchOffset");
static_assert(offsetof(Crypto_AnimBP_C_AdditionalPitchOffset, bpp__AdditionalPitchOffset__pf) == 0x000000, "Member 'Crypto_AnimBP_C_AdditionalPitchOffset::bpp__AdditionalPitchOffset__pf' has a wrong offset!");

}

