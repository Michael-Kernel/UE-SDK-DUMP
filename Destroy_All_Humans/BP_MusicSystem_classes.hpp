#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MusicSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Enum_MusicType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MusicSystem.BP_MusicSystem_C
// 0x00A0 (0x0478 - 0x03D8)
class ABP_MusicSystem_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        ChallengeMusic_3_;                                 // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        StealthMusic_2_;                                   // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CombatMusic_1_;                                    // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        DefaultMusic_0_;                                   // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_MusicSystem_Data_C*                 MusicSystemData;                                   // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBFGAlertSystemManager*                 AlertSystemManager;                                // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllSystemsReady;                                   // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x3];                                      // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResponseLevel_ThisTick;                            // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResponseLevel_LastTick;                            // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MusicType_Running;                                 // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Pointer_ThisTick;                                  // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Pointer_LastTick;                                  // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMode;                                         // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Launch_Music_System;                               // 0x0431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_432[0x2];                                      // 0x0432(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Override;                                          // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeTime;                                          // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Holobob_Gameplay_Tag;                              // 0x0440(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Stealth_Override_Affected_By_High_Alert_State;     // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timer;                                             // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Seconds;                                     // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Music_Switch_Delay;                                // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EndingSound;                                       // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MusicSystem(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Music_Override_By_Quest(Enum_MusicType Force_Music_Type);
	void Fadeout_Track(class UAudioComponent* Which_Track, float Override_FadeTime);
	void Fadein_Track(class UAudioComponent* Which_Track);
	void Fadeout_AllTracks();
	void Fadein_and_Fadeout(int32 WhichTrack);
	void Start_Track(class UAudioComponent* Which_Track);
	void Starts_and_Stops(int32 WhichTrackA);
	void Stop_Track(class UAudioComponent* Which_Track);
	void MusicSystem_Activated_By_Quest();
	void Activate_Tick_If_Applicable();
	void Print_if_DebugMode_is_On(const class FString& InString);
	void Get_The_Player(bool* Valid, class ABFGPlayerCharacter** Output_Player);
	void Fadeout_Track_Challenge(float Override_FadeTime);
	void Play_Ending_Oneshot();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MusicSystem_C">();
	}
	static class ABP_MusicSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MusicSystem_C>();
	}
};
static_assert(alignof(ABP_MusicSystem_C) == 0x000008, "Wrong alignment on ABP_MusicSystem_C");
static_assert(sizeof(ABP_MusicSystem_C) == 0x000478, "Wrong size on ABP_MusicSystem_C");
static_assert(offsetof(ABP_MusicSystem_C, UberGraphFrame) == 0x0003D8, "Member 'ABP_MusicSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, ChallengeMusic_3_) == 0x0003E0, "Member 'ABP_MusicSystem_C::ChallengeMusic_3_' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, StealthMusic_2_) == 0x0003E8, "Member 'ABP_MusicSystem_C::StealthMusic_2_' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, CombatMusic_1_) == 0x0003F0, "Member 'ABP_MusicSystem_C::CombatMusic_1_' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, DefaultMusic_0_) == 0x0003F8, "Member 'ABP_MusicSystem_C::DefaultMusic_0_' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, DefaultSceneRoot) == 0x000400, "Member 'ABP_MusicSystem_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, MusicSystemData) == 0x000408, "Member 'ABP_MusicSystem_C::MusicSystemData' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, AlertSystemManager) == 0x000410, "Member 'ABP_MusicSystem_C::AlertSystemManager' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, AllSystemsReady) == 0x000418, "Member 'ABP_MusicSystem_C::AllSystemsReady' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, ResponseLevel_ThisTick) == 0x00041C, "Member 'ABP_MusicSystem_C::ResponseLevel_ThisTick' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, ResponseLevel_LastTick) == 0x000420, "Member 'ABP_MusicSystem_C::ResponseLevel_LastTick' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, MusicType_Running) == 0x000424, "Member 'ABP_MusicSystem_C::MusicType_Running' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, Pointer_ThisTick) == 0x000428, "Member 'ABP_MusicSystem_C::Pointer_ThisTick' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, Pointer_LastTick) == 0x00042C, "Member 'ABP_MusicSystem_C::Pointer_LastTick' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, DebugMode) == 0x000430, "Member 'ABP_MusicSystem_C::DebugMode' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, Launch_Music_System) == 0x000431, "Member 'ABP_MusicSystem_C::Launch_Music_System' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, Override) == 0x000434, "Member 'ABP_MusicSystem_C::Override' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, FadeTime) == 0x000438, "Member 'ABP_MusicSystem_C::FadeTime' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, Holobob_Gameplay_Tag) == 0x000440, "Member 'ABP_MusicSystem_C::Holobob_Gameplay_Tag' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, Stealth_Override_Affected_By_High_Alert_State) == 0x000460, "Member 'ABP_MusicSystem_C::Stealth_Override_Affected_By_High_Alert_State' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, Timer) == 0x000464, "Member 'ABP_MusicSystem_C::Timer' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, Delta_Seconds) == 0x000468, "Member 'ABP_MusicSystem_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, Music_Switch_Delay) == 0x00046C, "Member 'ABP_MusicSystem_C::Music_Switch_Delay' has a wrong offset!");
static_assert(offsetof(ABP_MusicSystem_C, EndingSound) == 0x000470, "Member 'ABP_MusicSystem_C::EndingSound' has a wrong offset!");

}

