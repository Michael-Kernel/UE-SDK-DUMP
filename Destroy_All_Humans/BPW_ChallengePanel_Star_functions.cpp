#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPW_ChallengePanel_Star

#include "Basic.hpp"

#include "BPW_ChallengePanel_Star_classes.hpp"
#include "BPW_ChallengePanel_Star_parameters.hpp"


namespace SDK
{

// Function BPW_ChallengePanel_Star.BPW_ChallengePanel_Star_C.Unlock
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPW_ChallengePanel_Star_C::Unlock(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_ChallengePanel_Star_C", "Unlock");

	Params::BPW_ChallengePanel_Star_C_Unlock Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_ChallengePanel_Star.BPW_ChallengePanel_Star_C.ApplyInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Format                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FBFGDataAsset_ChallengeInfo_StarDetailsStarDetails                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UBPW_ChallengePanel_Star_C::ApplyInfo(const class FText& Format, const struct FBFGDataAsset_ChallengeInfo_StarDetails& StarDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_ChallengePanel_Star_C", "ApplyInfo");

	Params::BPW_ChallengePanel_Star_C_ApplyInfo Parms{};

	Parms.Format = std::move(Format);
	Parms.StarDetails = std::move(StarDetails);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_ChallengePanel_Star.BPW_ChallengePanel_Star_C.SetBonus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Bonus                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UBPW_ChallengePanel_Star_C::SetBonus(const class FText& Bonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_ChallengePanel_Star_C", "SetBonus");

	Params::BPW_ChallengePanel_Star_C_SetBonus Parms{};

	Parms.Bonus = std::move(Bonus);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_ChallengePanel_Star.BPW_ChallengePanel_Star_C.SetCondition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void UBPW_ChallengePanel_Star_C::SetCondition(const class FText& Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_ChallengePanel_Star_C", "SetCondition");

	Params::BPW_ChallengePanel_Star_C_SetCondition Parms{};

	Parms.Condition = std::move(Condition);

	UObject::ProcessEvent(Func, &Parms);
}

}

