#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPW_Crosshair_AnalProbe

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BPW_Crosshair_AnalProbe.BPW_Crosshair_AnalProbe_C
// 0x0030 (0x0328 - 0x02F8)
class UBPW_Crosshair_AnalProbe_C final : public UBFGWidget_HUD
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_146;                                         // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageArrow;                                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageArrowHighlight;                               // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           PanelArrows;                                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         FMaxDistance;                                      // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateMiniGame(bool bActivate);
	void UpdateMiniGame(float FMiniGameValue, float FMinigameSuccessThreshold);
	void Construct();
	void WeaponAndAbilitySharedTargetChanged(bool _bNewValue);
	void ExecuteUbergraph_BPW_Crosshair_AnalProbe(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPW_Crosshair_AnalProbe_C">();
	}
	static class UBPW_Crosshair_AnalProbe_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPW_Crosshair_AnalProbe_C>();
	}
};
static_assert(alignof(UBPW_Crosshair_AnalProbe_C) == 0x000008, "Wrong alignment on UBPW_Crosshair_AnalProbe_C");
static_assert(sizeof(UBPW_Crosshair_AnalProbe_C) == 0x000328, "Wrong size on UBPW_Crosshair_AnalProbe_C");
static_assert(offsetof(UBPW_Crosshair_AnalProbe_C, UberGraphFrame) == 0x0002F8, "Member 'UBPW_Crosshair_AnalProbe_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPW_Crosshair_AnalProbe_C, Image_146) == 0x000300, "Member 'UBPW_Crosshair_AnalProbe_C::Image_146' has a wrong offset!");
static_assert(offsetof(UBPW_Crosshair_AnalProbe_C, ImageArrow) == 0x000308, "Member 'UBPW_Crosshair_AnalProbe_C::ImageArrow' has a wrong offset!");
static_assert(offsetof(UBPW_Crosshair_AnalProbe_C, ImageArrowHighlight) == 0x000310, "Member 'UBPW_Crosshair_AnalProbe_C::ImageArrowHighlight' has a wrong offset!");
static_assert(offsetof(UBPW_Crosshair_AnalProbe_C, PanelArrows) == 0x000318, "Member 'UBPW_Crosshair_AnalProbe_C::PanelArrows' has a wrong offset!");
static_assert(offsetof(UBPW_Crosshair_AnalProbe_C, FMaxDistance) == 0x000320, "Member 'UBPW_Crosshair_AnalProbe_C::FMaxDistance' has a wrong offset!");

}

