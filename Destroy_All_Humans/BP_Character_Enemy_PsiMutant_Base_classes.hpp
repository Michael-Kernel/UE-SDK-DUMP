#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character_Enemy_PsiMutant_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Enum_WhichBehaviorSound_structs.hpp"
#include "BFGCore_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character_Enemy_PsiMutant_Base.BP_Character_Enemy_PsiMutant_Base_C
// 0x00E0 (0x0CC0 - 0x0BE0)
class ABP_Character_Enemy_PsiMutant_Base_C final : public ABFGNPCCharacterEnemyPsi
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BE0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_CryptoWeapnHitEffectsComponent_C*   BP_CryptoWeapnHitEffectsComponent;                 // 0x0BE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ActorComponent_RadarObject_NPC_C*   BP_ActorComponent_RadarObject_NPC;                 // 0x0BF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ActorComponent_NPCBehaviorVO_C*     BP_ActorComponent_NPCBehaviorVO;                   // 0x0BF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VO_Output_Subfluff;                                // 0x0C00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VO_Output_Behaviour2;                              // 0x0C08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VO_Output_Behaviour;                               // 0x0C10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HealthWidgetComponent_C*            BP_HealthWidgetComponent;                          // 0x0C18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBFGActorComponent_RadarObject_ExactRadius* BFGActorComponent_RadarObject_ExactRadius;         // 0x0C20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBFGActorComponent_HolobobSuppressionAura* BFGActorComponent_HolobobSuppressionAura;          // 0x0C28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDH1ArmorComponent*                     DH1Armor;                                          // 0x0C30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EBFGBehaviourState_NPC                        OldState;                                          // 0x0C38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C39[0x7];                                      // 0x0C39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<Enum_WhichBehaviorSound, class USoundBase*> Map_WhichVOSoundbase;                              // 0x0C40(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	Enum_WhichBehaviorSound                       VO_WhichSituation;                                 // 0x0C90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_WhichBehaviorSound                       VO_OldSituation;                                   // 0x0C91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C92[0x2];                                      // 0x0C92(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VO_Output_LastUsed;                                // 0x0C94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMode;                                         // 0x0C98(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C99[0x3];                                      // 0x0C99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartDuration;                                     // 0x0C9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Play_Zappo_VO_now;                          // 0x0CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_Injured_VO_now;                        // 0x0CA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_PKHeld_VO_now;                         // 0x0CA2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_PKThrown_VO_now;                       // 0x0CA3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_Probed_VO_now;                         // 0x0CA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_SurvivedProbe_VO_now;                  // 0x0CA5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_Deathrayed_VO_now;                     // 0x0CA6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_Brainext_VO_now;                       // 0x0CA7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_Bumped_VO_now;                         // 0x0CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_BlockLOS_VO_now;                       // 0x0CA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_AlertState_VO_now;                     // 0x0CAA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Fadeout_Zappo_VO;                           // 0x0CAB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Zappo_VO_Fading_Out;                            // 0x0CAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NoMoreVO;                                          // 0x0CAD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBFGBehaviourState_NPC                        CurrentState;                                      // 0x0CAE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IHaveBeenCurious;                                  // 0x0CAF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         NumberOfCurious;                                   // 0x0CB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Character_Enemy_PsiMutant_Base(int32 EntryPoint);
	void TriggerVO(class FName _event);
	void OnFireExinguished();
	void OnSetOnFire();
	void BndEvt__m_pDamageComponent_K2Node_ComponentBoundEvent_0_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature(class UBFGActorComponent_PawnDamage* _pPawnDamage, float _fDamage, class AActor* _pDamageCauser, const class UBFGDamageType* _pDamageType, const struct FVector& _rShotDirection, const struct FHitResult& _oHitResult);
	void BndEvt__m_pGameplayEffectTagsComponent_K2Node_ComponentBoundEvent_3_BFGGameplayEffectTags_Event__DelegateSignature(const struct FGameplayTag& _rTag);
	void BndEvt__m_pGameplayEffectTagsComponent_K2Node_ComponentBoundEvent_1_BFGGameplayEffectTags_Event__DelegateSignature(const struct FGameplayTag& _rTag);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnDeadStateChanged(bool _bNewState);
	void OnAIStateChanged(EBFGBehaviourState_NPC _newState);
	void Play_Behaviour_VO();
	void Stop_all_Behaviour_VOs();
	void CheckIfElectrocuteDamage(const class UBFGDamageType* IncomingDamage, bool* YesElectrocute, bool* YesProbed, bool* YesDeathrayed);
	void DetermineVOSituation(EBFGBehaviourState_NPC Selection, bool* Succcess);
	void Handle_VO_Output_Play(class USoundBase* WhichSound, float FadeinSec, float StarttimeSec);
	void Handle_VO_Output_isplaying(bool* IsPlaying);
	void Handle_VO_Output_Stop(float FadeoutSec);
	void Stop_All_Behaviour_VO();
	void DoWePlayCurious(bool IsExitCurious, bool* ShouldWe);

	struct FVector GetBrainSpawnLocation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_Enemy_PsiMutant_Base_C">();
	}
	static class ABP_Character_Enemy_PsiMutant_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_Enemy_PsiMutant_Base_C>();
	}
};
static_assert(alignof(ABP_Character_Enemy_PsiMutant_Base_C) == 0x000010, "Wrong alignment on ABP_Character_Enemy_PsiMutant_Base_C");
static_assert(sizeof(ABP_Character_Enemy_PsiMutant_Base_C) == 0x000CC0, "Wrong size on ABP_Character_Enemy_PsiMutant_Base_C");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, UberGraphFrame) == 0x000BE0, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, BP_CryptoWeapnHitEffectsComponent) == 0x000BE8, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::BP_CryptoWeapnHitEffectsComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, BP_ActorComponent_RadarObject_NPC) == 0x000BF0, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::BP_ActorComponent_RadarObject_NPC' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, BP_ActorComponent_NPCBehaviorVO) == 0x000BF8, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::BP_ActorComponent_NPCBehaviorVO' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, VO_Output_Subfluff) == 0x000C00, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::VO_Output_Subfluff' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, VO_Output_Behaviour2) == 0x000C08, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::VO_Output_Behaviour2' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, VO_Output_Behaviour) == 0x000C10, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::VO_Output_Behaviour' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, BP_HealthWidgetComponent) == 0x000C18, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::BP_HealthWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, BFGActorComponent_RadarObject_ExactRadius) == 0x000C20, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::BFGActorComponent_RadarObject_ExactRadius' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, BFGActorComponent_HolobobSuppressionAura) == 0x000C28, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::BFGActorComponent_HolobobSuppressionAura' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, DH1Armor) == 0x000C30, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::DH1Armor' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, OldState) == 0x000C38, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::OldState' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Map_WhichVOSoundbase) == 0x000C40, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Map_WhichVOSoundbase' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, VO_WhichSituation) == 0x000C90, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::VO_WhichSituation' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, VO_OldSituation) == 0x000C91, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::VO_OldSituation' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, VO_Output_LastUsed) == 0x000C94, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::VO_Output_LastUsed' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, DebugMode) == 0x000C98, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::DebugMode' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, StartDuration) == 0x000C9C, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::StartDuration' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_Zappo_VO_now) == 0x000CA0, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_Zappo_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_Injured_VO_now) == 0x000CA1, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_Injured_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_PKHeld_VO_now) == 0x000CA2, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_PKHeld_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_PKThrown_VO_now) == 0x000CA3, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_PKThrown_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_Probed_VO_now) == 0x000CA4, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_Probed_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_SurvivedProbe_VO_now) == 0x000CA5, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_SurvivedProbe_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_Deathrayed_VO_now) == 0x000CA6, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_Deathrayed_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_Brainext_VO_now) == 0x000CA7, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_Brainext_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_Bumped_VO_now) == 0x000CA8, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_Bumped_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_BlockLOS_VO_now) == 0x000CA9, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_BlockLOS_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Play_AlertState_VO_now) == 0x000CAA, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Play_AlertState_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Should_Fadeout_Zappo_VO) == 0x000CAB, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Should_Fadeout_Zappo_VO' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, Is_Zappo_VO_Fading_Out) == 0x000CAC, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::Is_Zappo_VO_Fading_Out' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, NoMoreVO) == 0x000CAD, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::NoMoreVO' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, CurrentState) == 0x000CAE, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::CurrentState' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, IHaveBeenCurious) == 0x000CAF, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::IHaveBeenCurious' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_PsiMutant_Base_C, NumberOfCurious) == 0x000CB0, "Member 'ABP_Character_Enemy_PsiMutant_Base_C::NumberOfCurious' has a wrong offset!");

}

