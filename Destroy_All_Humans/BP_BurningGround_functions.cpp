#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BurningGround

#include "Basic.hpp"

#include "BP_BurningGround_classes.hpp"
#include "BP_BurningGround_parameters.hpp"


namespace SDK
{

// Function BP_BurningGround.BP_BurningGround_C.ExecuteUbergraph_BP_BurningGround
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::ExecuteUbergraph_BP_BurningGround(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "ExecuteUbergraph_BP_BurningGround");

	Params::BP_BurningGround_C_ExecuteUbergraph_BP_BurningGround Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BurningGround_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BurningGround.BP_BurningGround_C.RTHistory_Write_SingleSplash
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldspaceLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SplashRadius                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           WrittingActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Glow                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::RTHistory_Write_SingleSplash(const struct FVector& WorldspaceLocation, float SplashRadius, class AActor* WrittingActor, float Glow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "RTHistory_Write_SingleSplash");

	Params::BP_BurningGround_C_RTHistory_Write_SingleSplash Parms{};

	Parms.WorldspaceLocation = std::move(WorldspaceLocation);
	Parms.SplashRadius = SplashRadius;
	Parms.WrittingActor = WrittingActor;
	Parms.Glow = Glow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "ReceiveEndPlay");

	Params::BP_BurningGround_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "ReceiveTick");

	Params::BP_BurningGround_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.RTHistory_Write_Channeled_Start
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          VTargetLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHitTarget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BurningDuration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::RTHistory_Write_Channeled_Start(const struct FVector& VTargetLocation, bool bHitTarget, class UPrimitiveComponent* HitComponent, float BurningDuration, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "RTHistory_Write_Channeled_Start");

	Params::BP_BurningGround_C_RTHistory_Write_Channeled_Start Parms{};

	Parms.VTargetLocation = std::move(VTargetLocation);
	Parms.bHitTarget = bHitTarget;
	Parms.HitComponent = HitComponent;
	Parms.BurningDuration = BurningDuration;
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.RTHistory_Write_Channeled_Stop
// (BlueprintCallable, BlueprintEvent)

void ABP_BurningGround_C::RTHistory_Write_Channeled_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "RTHistory_Write_Channeled_Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BurningGround.BP_BurningGround_C.SpawnTransitionMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      InMesh                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       InTransform                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FVector                          InWorldspaceImpactLocation                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::SpawnTransitionMesh(class UStaticMesh* InMesh, const struct FTransform& InTransform, const struct FVector& InWorldspaceImpactLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "SpawnTransitionMesh");

	Params::BP_BurningGround_C_SpawnTransitionMesh Parms{};

	Parms.InMesh = InMesh;
	Parms.InTransform = std::move(InTransform);
	Parms.InWorldspaceImpactLocation = std::move(InWorldspaceImpactLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.Util_GetDrawSplatPivot
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        DrawSize_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        TwoDPivot                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::Util_GetDrawSplatPivot(const struct FVector2D& DrawSize_0, struct FVector2D* TwoDPivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "Util_GetDrawSplatPivot");

	Params::BP_BurningGround_C_Util_GetDrawSplatPivot Parms{};

	Parms.DrawSize_0 = std::move(DrawSize_0);

	UObject::ProcessEvent(Func, &Parms);

	if (TwoDPivot != nullptr)
		*TwoDPivot = std::move(Parms.TwoDPivot);
}


// Function BP_BurningGround.BP_BurningGround_C.Util_InitializeSetup
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BurningGround_C::Util_InitializeSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "Util_InitializeSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BurningGround.BP_BurningGround_C.Update_JitterValues
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::Update_JitterValues(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "Update_JitterValues");

	Params::BP_BurningGround_C_Update_JitterValues Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.InitiateFoliageTransition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_Foliage_Interactive_Burnable_C*InBurnableFoliageComponent                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InInstanceIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InHitImpactPoint                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::InitiateFoliageTransition(class UBP_Foliage_Interactive_Burnable_C* InBurnableFoliageComponent, int32 InInstanceIndex, const struct FVector& InHitImpactPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "InitiateFoliageTransition");

	Params::BP_BurningGround_C_InitiateFoliageTransition Parms{};

	Parms.InBurnableFoliageComponent = InBurnableFoliageComponent;
	Parms.InInstanceIndex = InInstanceIndex;
	Parms.InHitImpactPoint = std::move(InHitImpactPoint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.StartChanneledWrite
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InTargetLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InHitTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UPrimitiveComponent*              InHitComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BurningDuration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::StartChanneledWrite(const struct FVector& InTargetLocation, bool InHitTarget, class UPrimitiveComponent* InHitComponent, float BurningDuration, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "StartChanneledWrite");

	Params::BP_BurningGround_C_StartChanneledWrite Parms{};

	Parms.InTargetLocation = std::move(InTargetLocation);
	Parms.InHitTarget = InHitTarget;
	Parms.InHitComponent = InHitComponent;
	Parms.BurningDuration = BurningDuration;
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.DoSingleSplash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InWorldSpacePosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InSplashRadius                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InGlow                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::DoSingleSplash(const struct FVector& InWorldSpacePosition, float InSplashRadius, float InGlow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "DoSingleSplash");

	Params::BP_BurningGround_C_DoSingleSplash Parms{};

	Parms.InWorldSpacePosition = std::move(InWorldSpacePosition);
	Parms.InSplashRadius = InSplashRadius;
	Parms.InGlow = InGlow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.HandleTick
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InDelta                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::HandleTick(float InDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "HandleTick");

	Params::BP_BurningGround_C_HandleTick Parms{};

	Parms.InDelta = InDelta;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.BurnFoliage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_BurningGround_C::BurnFoliage(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "BurnFoliage");

	Params::BP_BurningGround_C_BurnFoliage Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BurningGround.BP_BurningGround_C.Util_ChangeGlowDuration
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewDuration                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BurningGround_C::Util_ChangeGlowDuration(float NewDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BurningGround_C", "Util_ChangeGlowDuration");

	Params::BP_BurningGround_C_Util_ChangeGlowDuration Parms{};

	Parms.NewDuration = NewDuration;

	UObject::ProcessEvent(Func, &Parms);
}

}

