#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryCollectionCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GeometryCollectionCore.EGeometryCollectionCacheType
// NumValues: 0x0005
enum class EGeometryCollectionCacheType : uint8
{
	None                                     = 0,
	Record                                   = 1,
	Play                                     = 2,
	RecordAndPlay                            = 3,
	EGeometryCollectionCacheType_MAX         = 4,
};

// ScriptStruct GeometryCollectionCore.SolverCollisionData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x04) FSolverCollisionData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolverCollisionData) == 0x000004, "Wrong alignment on FSolverCollisionData");
static_assert(sizeof(FSolverCollisionData) == 0x000050, "Wrong size on FSolverCollisionData");

// ScriptStruct GeometryCollectionCore.SolverTrailingData
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x04) FSolverTrailingData final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolverTrailingData) == 0x000004, "Wrong alignment on FSolverTrailingData");
static_assert(sizeof(FSolverTrailingData) == 0x000038, "Wrong size on FSolverTrailingData");

// ScriptStruct GeometryCollectionCore.RecordedFrame
// 0x0068 (0x0068 - 0x0000)
struct FRecordedFrame final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TransformIndices;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PreviousTransformIndices;                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  DisabledFlags;                                     // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSolverCollisionData>           Collisions;                                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSolverTrailingData>            Trailings;                                         // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecordedFrame) == 0x000008, "Wrong alignment on FRecordedFrame");
static_assert(sizeof(FRecordedFrame) == 0x000068, "Wrong size on FRecordedFrame");
static_assert(offsetof(FRecordedFrame, Transforms) == 0x000000, "Member 'FRecordedFrame::Transforms' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, TransformIndices) == 0x000010, "Member 'FRecordedFrame::TransformIndices' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, PreviousTransformIndices) == 0x000020, "Member 'FRecordedFrame::PreviousTransformIndices' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, DisabledFlags) == 0x000030, "Member 'FRecordedFrame::DisabledFlags' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, Collisions) == 0x000040, "Member 'FRecordedFrame::Collisions' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, Trailings) == 0x000050, "Member 'FRecordedFrame::Trailings' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, Timestamp) == 0x000060, "Member 'FRecordedFrame::Timestamp' has a wrong offset!");

// ScriptStruct GeometryCollectionCore.RecordedTransformTrack
// 0x0010 (0x0010 - 0x0000)
struct FRecordedTransformTrack final
{
public:
	TArray<struct FRecordedFrame>                 Records;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecordedTransformTrack) == 0x000008, "Wrong alignment on FRecordedTransformTrack");
static_assert(sizeof(FRecordedTransformTrack) == 0x000010, "Wrong size on FRecordedTransformTrack");
static_assert(offsetof(FRecordedTransformTrack, Records) == 0x000000, "Member 'FRecordedTransformTrack::Records' has a wrong offset!");

}

