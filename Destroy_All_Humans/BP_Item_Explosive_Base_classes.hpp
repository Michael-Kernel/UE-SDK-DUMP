#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Item_Explosive_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Item_Destructable_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Item_Explosive_Base.BP_Item_Explosive_Base_C
// 0x0030 (0x0C90 - 0x0C60)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Item_Explosive_Base_C : public ABP_Item_Destructable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Item_Explosive_Base_C;           // 0x0C58(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsMentallyExplodable_;                             // 0x0C60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Shaking_;                                          // 0x0C61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C62[0x6];                                      // 0x0C62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGActorComponent_MentallyInteractable* MentallyInteractableLocal;                         // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoShake;                                           // 0x0C70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C71[0x3];                                      // 0x0C71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HumansHitCounter;                                  // 0x0C74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginalScale;                                     // 0x0C78(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Item_Explosive_Base(int32 EntryPoint);
	void BndEvt__m_pExplosiveComponent_K2Node_ComponentBoundEvent_3_ActorComponent_ExplosiveItemExplosion__DelegateSignature(TArray<class AActor*>& _aHitActorList);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__m_pMentallyInteractableComponent_K2Node_ComponentBoundEvent_2_Action_InteractAction__DelegateSignature(class UBFGActorComponent_MentallyInteractable* _pMentallyInteractable, class AController* _pController);
	void BndEvt__m_pMentallyInteractableComponent_K2Node_ComponentBoundEvent_1_Action_InteractAction__DelegateSignature(class UBFGActorComponent_MentallyInteractable* _pMentallyInteractable, class AController* _pController);
	void BndEvt__m_pMentallyInteractableComponent_K2Node_ComponentBoundEvent_0_Action_InteractAction__DelegateSignature(class UBFGActorComponent_MentallyInteractable* _pMentallyInteractable, class AController* _pController);
	void MentalShake();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Item_Explosive_Base_C">();
	}
	static class ABP_Item_Explosive_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Item_Explosive_Base_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Item_Explosive_Base_C) == 0x000010, "Wrong alignment on ABP_Item_Explosive_Base_C");
static_assert(sizeof(ABP_Item_Explosive_Base_C) == 0x000C90, "Wrong size on ABP_Item_Explosive_Base_C");
static_assert(offsetof(ABP_Item_Explosive_Base_C, UberGraphFrame_BP_Item_Explosive_Base_C) == 0x000C58, "Member 'ABP_Item_Explosive_Base_C::UberGraphFrame_BP_Item_Explosive_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_Item_Explosive_Base_C, IsMentallyExplodable_) == 0x000C60, "Member 'ABP_Item_Explosive_Base_C::IsMentallyExplodable_' has a wrong offset!");
static_assert(offsetof(ABP_Item_Explosive_Base_C, Shaking_) == 0x000C61, "Member 'ABP_Item_Explosive_Base_C::Shaking_' has a wrong offset!");
static_assert(offsetof(ABP_Item_Explosive_Base_C, MentallyInteractableLocal) == 0x000C68, "Member 'ABP_Item_Explosive_Base_C::MentallyInteractableLocal' has a wrong offset!");
static_assert(offsetof(ABP_Item_Explosive_Base_C, DoShake) == 0x000C70, "Member 'ABP_Item_Explosive_Base_C::DoShake' has a wrong offset!");
static_assert(offsetof(ABP_Item_Explosive_Base_C, HumansHitCounter) == 0x000C74, "Member 'ABP_Item_Explosive_Base_C::HumansHitCounter' has a wrong offset!");
static_assert(offsetof(ABP_Item_Explosive_Base_C, OriginalScale) == 0x000C78, "Member 'ABP_Item_Explosive_Base_C::OriginalScale' has a wrong offset!");

}

