#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnalProbeBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BFGCore_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AnalProbeBP.AnalProbeBP_C
// 0x0020 (0x0828 - 0x0808)
class AAnalProbeBP_C final : public ABFGWeapon_AnalProbe
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0808(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   Light_center;                                      // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimationTriggerd;                                // 0x0820(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMinigameActive;                                   // 0x0821(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void HandleActivationMiniGameOnCrosshair();
	void HandleMiniGame();
	void ReceiveTick(float DeltaSeconds);
	void OnWeaponFire(class FName _nSocketName);
	void OnFailedFireAttempt(EWeaponFireAttemptResult _weaponFireResult);
	void ExecuteUbergraph_AnalProbeBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnalProbeBP_C">();
	}
	static class AAnalProbeBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAnalProbeBP_C>();
	}
};
static_assert(alignof(AAnalProbeBP_C) == 0x000008, "Wrong alignment on AAnalProbeBP_C");
static_assert(sizeof(AAnalProbeBP_C) == 0x000828, "Wrong size on AAnalProbeBP_C");
static_assert(offsetof(AAnalProbeBP_C, UberGraphFrame) == 0x000808, "Member 'AAnalProbeBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAnalProbeBP_C, Light_center) == 0x000810, "Member 'AAnalProbeBP_C::Light_center' has a wrong offset!");
static_assert(offsetof(AAnalProbeBP_C, SkeletalMesh) == 0x000818, "Member 'AAnalProbeBP_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AAnalProbeBP_C, bAnimationTriggerd) == 0x000820, "Member 'AAnalProbeBP_C::bAnimationTriggerd' has a wrong offset!");
static_assert(offsetof(AAnalProbeBP_C, bMinigameActive) == 0x000821, "Member 'AAnalProbeBP_C::bMinigameActive' has a wrong offset!");

}

