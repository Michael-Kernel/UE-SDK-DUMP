#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CryptoWeapnHitEffectsComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CryptoWeapnHitEffectsComponent.BP_CryptoWeapnHitEffectsComponent_C
// 0x00A8 (0x01D0 - 0x0128)
class UBP_CryptoWeapnHitEffectsComponent_C final : public UActorComponent
{
public:
	bool                                          ZapomaticEffect;                                   // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             MeshOriginalMaterials;                             // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             SkeletonMeshMaterials;                             // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             SihouetteMaterials;                                // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInterface*                     SilhouetteMaterial;                                // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             SkeletonMeshElecMaterials;                         // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInterface*                     SkeletonMaterial;                                  // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZappedTimer;                                       // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ZappedMaterialCurrentState;                        // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIondetonator;                                    // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     IonizedMaterial;                                   // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDisintegrated;                                   // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MeshDisintegrationMaterial;                        // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     SkeletonDisintegrationMaterial;                    // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisintegratorMeshDelay;                            // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisintegratorDissolveTimer;                        // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IonDetonatorDelay;                                 // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IonDetonatorTimer;                                 // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DisintegratorEffectOffset;                         // 0x01C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetupZappedMaterials(class UMeshComponent* Mesh, class UMeshComponent* Skeleton);
	void SwapZappedMaterials(TArray<class UMaterialInterface*>& MeshMaterials, TArray<class UMaterialInterface*>& SkeletonMaterials, class UMeshComponent* Mesh, class UMeshComponent* Skeleton);
	void UpdateZappingEffect(float DeltaTime, class UMeshComponent* Mesh, class UMeshComponent* Skeleton);
	void SetupIonDetonation(class UBFGActorComponent_Effect* MPEffectComponent, class UMeshComponent* Mesh, class UMeshComponent* Skeleton);
	void UpdateDisintegratorEffect(float DeltaTime, class UMeshComponent* Mesh, class UMeshComponent* Skeleton, class UBFGActorComponent_Effect* MPEffectComponent, class UBFGActorComponent_GameplayEffectTags* MPGameplayEffectTagsComponent);
	void SetupDisintegration(class UBFGActorComponent_Effect* MPEffectComponent, class UMeshComponent* Mesh, class UMeshComponent* Skeleton);
	void UpdateIondetonatorEffect(float DeltaTime, class UMeshComponent* Skeleton, class UBFGActorComponent_Effect* MPEffectComponent, class UBFGActorComponent_GameplayEffectTags* MPGameplayEffectTagsComponent);
	void UpdateBlackboard(class UBFGActorComponent_Effect* MPEffectComponent, const class UMeshComponent* Mesh);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CryptoWeapnHitEffectsComponent_C">();
	}
	static class UBP_CryptoWeapnHitEffectsComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CryptoWeapnHitEffectsComponent_C>();
	}
};
static_assert(alignof(UBP_CryptoWeapnHitEffectsComponent_C) == 0x000008, "Wrong alignment on UBP_CryptoWeapnHitEffectsComponent_C");
static_assert(sizeof(UBP_CryptoWeapnHitEffectsComponent_C) == 0x0001D0, "Wrong size on UBP_CryptoWeapnHitEffectsComponent_C");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, ZapomaticEffect) == 0x000128, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::ZapomaticEffect' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, MeshOriginalMaterials) == 0x000130, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::MeshOriginalMaterials' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, SkeletonMeshMaterials) == 0x000140, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::SkeletonMeshMaterials' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, SihouetteMaterials) == 0x000150, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::SihouetteMaterials' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, SilhouetteMaterial) == 0x000160, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::SilhouetteMaterial' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, SkeletonMeshElecMaterials) == 0x000168, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::SkeletonMeshElecMaterials' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, SkeletonMaterial) == 0x000178, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::SkeletonMaterial' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, ZappedTimer) == 0x000180, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::ZappedTimer' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, ZappedMaterialCurrentState) == 0x000184, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::ZappedMaterialCurrentState' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, IsIondetonator) == 0x000188, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::IsIondetonator' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, IonizedMaterial) == 0x000190, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::IonizedMaterial' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, IsDisintegrated) == 0x000198, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::IsDisintegrated' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, MeshDisintegrationMaterial) == 0x0001A0, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::MeshDisintegrationMaterial' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, SkeletonDisintegrationMaterial) == 0x0001A8, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::SkeletonDisintegrationMaterial' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, DisintegratorMeshDelay) == 0x0001B0, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::DisintegratorMeshDelay' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, DisintegratorDissolveTimer) == 0x0001B4, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::DisintegratorDissolveTimer' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, IonDetonatorDelay) == 0x0001B8, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::IonDetonatorDelay' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, IonDetonatorTimer) == 0x0001BC, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::IonDetonatorTimer' has a wrong offset!");
static_assert(offsetof(UBP_CryptoWeapnHitEffectsComponent_C, DisintegratorEffectOffset) == 0x0001C0, "Member 'UBP_CryptoWeapnHitEffectsComponent_C::DisintegratorEffectOffset' has a wrong offset!");

}

