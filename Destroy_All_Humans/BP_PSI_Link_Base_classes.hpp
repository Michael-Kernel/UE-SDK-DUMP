#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PSI_Link_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BFGCore_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PSI_Link_Base.BP_PSI_Link_Base_C
// 0x00C8 (0x0538 - 0x0470)
class ABP_PSI_Link_Base_C : public ABFGEffectActor_Beam
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0470(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               PFX_PSI_Link_source;                               // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight_target;                                 // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight_source;                                 // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lightning_Beam;                                    // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TickDelta;                                         // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Local_offset_target;                               // 0x04A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Local_offset_source;                               // 0x04B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_light_offset;                               // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dyn_beam_material;                                 // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Beam_soureMaterial;                                // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SourceLight_color;                                 // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetLight_color;                                 // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SourceLight_intensity;                             // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetLight_intensity;                             // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SourceLight_attenuation_radius;                    // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetLight_attenuation_radius;                    // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BaseLocation;                                      // 0x0500(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Current_Source_Unit_Mesh;                          // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeadPivotOffset;                                   // 0x0518(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Link_thickness;                                    // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TargetEffect;                                      // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        TargetEffectTemplate;                              // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateBeamFVX(const struct FVector& Target, const struct FVector& Source, const struct FVector& Pivot_Offset);
	void UserConstructionScript();
	void UpdateBeam(class AActor* _pTargetActor, const struct FVector& _vTargetLocation, const struct FVector& _vTargetNormal);
	void ReceiveBeginPlay();
	void StopBeam();
	void StartBeam();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ExecuteUbergraph_BP_PSI_Link_Base(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PSI_Link_Base_C">();
	}
	static class ABP_PSI_Link_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PSI_Link_Base_C>();
	}
};
static_assert(alignof(ABP_PSI_Link_Base_C) == 0x000008, "Wrong alignment on ABP_PSI_Link_Base_C");
static_assert(sizeof(ABP_PSI_Link_Base_C) == 0x000538, "Wrong size on ABP_PSI_Link_Base_C");
static_assert(offsetof(ABP_PSI_Link_Base_C, UberGraphFrame) == 0x000470, "Member 'ABP_PSI_Link_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, PFX_PSI_Link_source) == 0x000478, "Member 'ABP_PSI_Link_Base_C::PFX_PSI_Link_source' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, PointLight_target) == 0x000480, "Member 'ABP_PSI_Link_Base_C::PointLight_target' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, PointLight_source) == 0x000488, "Member 'ABP_PSI_Link_Base_C::PointLight_source' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, Lightning_Beam) == 0x000490, "Member 'ABP_PSI_Link_Base_C::Lightning_Beam' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, DefaultSceneRoot) == 0x000498, "Member 'ABP_PSI_Link_Base_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, TickDelta) == 0x0004A0, "Member 'ABP_PSI_Link_Base_C::TickDelta' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, Local_offset_target) == 0x0004A4, "Member 'ABP_PSI_Link_Base_C::Local_offset_target' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, Local_offset_source) == 0x0004B0, "Member 'ABP_PSI_Link_Base_C::Local_offset_source' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, Target_light_offset) == 0x0004BC, "Member 'ABP_PSI_Link_Base_C::Target_light_offset' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, Dyn_beam_material) == 0x0004C0, "Member 'ABP_PSI_Link_Base_C::Dyn_beam_material' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, Beam_soureMaterial) == 0x0004C8, "Member 'ABP_PSI_Link_Base_C::Beam_soureMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, SourceLight_color) == 0x0004D0, "Member 'ABP_PSI_Link_Base_C::SourceLight_color' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, TargetLight_color) == 0x0004E0, "Member 'ABP_PSI_Link_Base_C::TargetLight_color' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, SourceLight_intensity) == 0x0004F0, "Member 'ABP_PSI_Link_Base_C::SourceLight_intensity' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, TargetLight_intensity) == 0x0004F4, "Member 'ABP_PSI_Link_Base_C::TargetLight_intensity' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, SourceLight_attenuation_radius) == 0x0004F8, "Member 'ABP_PSI_Link_Base_C::SourceLight_attenuation_radius' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, TargetLight_attenuation_radius) == 0x0004FC, "Member 'ABP_PSI_Link_Base_C::TargetLight_attenuation_radius' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, BaseLocation) == 0x000500, "Member 'ABP_PSI_Link_Base_C::BaseLocation' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, Current_Source_Unit_Mesh) == 0x000510, "Member 'ABP_PSI_Link_Base_C::Current_Source_Unit_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, HeadPivotOffset) == 0x000518, "Member 'ABP_PSI_Link_Base_C::HeadPivotOffset' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, Link_thickness) == 0x000524, "Member 'ABP_PSI_Link_Base_C::Link_thickness' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, TargetEffect) == 0x000528, "Member 'ABP_PSI_Link_Base_C::TargetEffect' has a wrong offset!");
static_assert(offsetof(ABP_PSI_Link_Base_C, TargetEffectTemplate) == 0x000530, "Member 'ABP_PSI_Link_Base_C::TargetEffectTemplate' has a wrong offset!");

}

