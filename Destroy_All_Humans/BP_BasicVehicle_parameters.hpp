#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BasicVehicle

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_BasicVehicle.BP_BasicVehicle_C.Audio_Activate
// 0x0002 (0x0002 - 0x0000)
struct BP_BasicVehicle_C_Audio_Activate final
{
public:
	bool                                          bpp__bForce__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__NowActive__pf;                                // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_BasicVehicle_C_Audio_Activate) == 0x000001, "Wrong alignment on BP_BasicVehicle_C_Audio_Activate");
static_assert(sizeof(BP_BasicVehicle_C_Audio_Activate) == 0x000002, "Wrong size on BP_BasicVehicle_C_Audio_Activate");
static_assert(offsetof(BP_BasicVehicle_C_Audio_Activate, bpp__bForce__pf) == 0x000000, "Member 'BP_BasicVehicle_C_Audio_Activate::bpp__bForce__pf' has a wrong offset!");
static_assert(offsetof(BP_BasicVehicle_C_Audio_Activate, bpp__NowActive__pf) == 0x000001, "Member 'BP_BasicVehicle_C_Audio_Activate::bpp__NowActive__pf' has a wrong offset!");

// Function BP_BasicVehicle.BP_BasicVehicle_C.Audio_HasComponents
// 0x0001 (0x0001 - 0x0000)
struct BP_BasicVehicle_C_Audio_HasComponents final
{
public:
	bool                                          bpp__bHasComponents__pf;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_BasicVehicle_C_Audio_HasComponents) == 0x000001, "Wrong alignment on BP_BasicVehicle_C_Audio_HasComponents");
static_assert(sizeof(BP_BasicVehicle_C_Audio_HasComponents) == 0x000001, "Wrong size on BP_BasicVehicle_C_Audio_HasComponents");
static_assert(offsetof(BP_BasicVehicle_C_Audio_HasComponents, bpp__bHasComponents__pf) == 0x000000, "Member 'BP_BasicVehicle_C_Audio_HasComponents::bpp__bHasComponents__pf' has a wrong offset!");

// Function BP_BasicVehicle.BP_BasicVehicle_C.ExecuteUbergraph_BP_BasicVehicle_3
// 0x0004 (0x0004 - 0x0000)
struct BP_BasicVehicle_C_ExecuteUbergraph_BP_BasicVehicle_3 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_BasicVehicle_C_ExecuteUbergraph_BP_BasicVehicle_3) == 0x000004, "Wrong alignment on BP_BasicVehicle_C_ExecuteUbergraph_BP_BasicVehicle_3");
static_assert(sizeof(BP_BasicVehicle_C_ExecuteUbergraph_BP_BasicVehicle_3) == 0x000004, "Wrong size on BP_BasicVehicle_C_ExecuteUbergraph_BP_BasicVehicle_3");
static_assert(offsetof(BP_BasicVehicle_C_ExecuteUbergraph_BP_BasicVehicle_3, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_BasicVehicle_C_ExecuteUbergraph_BP_BasicVehicle_3::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_BasicVehicle.BP_BasicVehicle_C.GetReplacementWheeledVehicleType
// 0x0008 (0x0008 - 0x0000)
struct BP_BasicVehicle_C_GetReplacementWheeledVehicleType final
{
public:
	TSubclassOf<class ABFGWheeledVehicle>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_BasicVehicle_C_GetReplacementWheeledVehicleType) == 0x000008, "Wrong alignment on BP_BasicVehicle_C_GetReplacementWheeledVehicleType");
static_assert(sizeof(BP_BasicVehicle_C_GetReplacementWheeledVehicleType) == 0x000008, "Wrong size on BP_BasicVehicle_C_GetReplacementWheeledVehicleType");
static_assert(offsetof(BP_BasicVehicle_C_GetReplacementWheeledVehicleType, ReturnValue) == 0x000000, "Member 'BP_BasicVehicle_C_GetReplacementWheeledVehicleType::ReturnValue' has a wrong offset!");

// Function BP_BasicVehicle.BP_BasicVehicle_C.HonkAtObstacleInFront
// 0x0004 (0x0004 - 0x0000)
struct BP_BasicVehicle_C_HonkAtObstacleInFront final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_BasicVehicle_C_HonkAtObstacleInFront) == 0x000004, "Wrong alignment on BP_BasicVehicle_C_HonkAtObstacleInFront");
static_assert(sizeof(BP_BasicVehicle_C_HonkAtObstacleInFront) == 0x000004, "Wrong size on BP_BasicVehicle_C_HonkAtObstacleInFront");
static_assert(offsetof(BP_BasicVehicle_C_HonkAtObstacleInFront, ReturnValue) == 0x000000, "Member 'BP_BasicVehicle_C_HonkAtObstacleInFront::ReturnValue' has a wrong offset!");

// Function BP_BasicVehicle.BP_BasicVehicle_C.OnTransmogrifyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BP_BasicVehicle_C_OnTransmogrifyStateChanged final
{
public:
	bool                                          bpp___bActive__pf;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_BasicVehicle_C_OnTransmogrifyStateChanged) == 0x000001, "Wrong alignment on BP_BasicVehicle_C_OnTransmogrifyStateChanged");
static_assert(sizeof(BP_BasicVehicle_C_OnTransmogrifyStateChanged) == 0x000001, "Wrong size on BP_BasicVehicle_C_OnTransmogrifyStateChanged");
static_assert(offsetof(BP_BasicVehicle_C_OnTransmogrifyStateChanged, bpp___bActive__pf) == 0x000000, "Member 'BP_BasicVehicle_C_OnTransmogrifyStateChanged::bpp___bActive__pf' has a wrong offset!");

// Function BP_BasicVehicle.BP_BasicVehicle_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BasicVehicle_C_ReceiveTick final
{
public:
	float                                         bpp__DeltaSeconds__pf;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_BasicVehicle_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BasicVehicle_C_ReceiveTick");
static_assert(sizeof(BP_BasicVehicle_C_ReceiveTick) == 0x000004, "Wrong size on BP_BasicVehicle_C_ReceiveTick");
static_assert(offsetof(BP_BasicVehicle_C_ReceiveTick, bpp__DeltaSeconds__pf) == 0x000000, "Member 'BP_BasicVehicle_C_ReceiveTick::bpp__DeltaSeconds__pf' has a wrong offset!");

}

