#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnalProbeBP

#include "Basic.hpp"

#include "BFGCore_structs.hpp"


namespace SDK::Params
{

// Function AnalProbeBP.AnalProbeBP_C.HandleActivationMiniGameOnCrosshair
// 0x0018 (0x0018 - 0x0000)
struct AnalProbeBP_C_HandleActivationMiniGameOnCrosshair final
{
public:
	bool                                          CallFunc_IsMinigameActive_ReturnValue;             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPW_Crosshair_AnalProbe_C*             K2Node_DynamicCast_AsBPW_Crosshair_Anal_Probe;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMinigameActive_ReturnValue1;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnalProbeBP_C_HandleActivationMiniGameOnCrosshair) == 0x000008, "Wrong alignment on AnalProbeBP_C_HandleActivationMiniGameOnCrosshair");
static_assert(sizeof(AnalProbeBP_C_HandleActivationMiniGameOnCrosshair) == 0x000018, "Wrong size on AnalProbeBP_C_HandleActivationMiniGameOnCrosshair");
static_assert(offsetof(AnalProbeBP_C_HandleActivationMiniGameOnCrosshair, CallFunc_IsMinigameActive_ReturnValue) == 0x000000, "Member 'AnalProbeBP_C_HandleActivationMiniGameOnCrosshair::CallFunc_IsMinigameActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_HandleActivationMiniGameOnCrosshair, K2Node_DynamicCast_AsBPW_Crosshair_Anal_Probe) == 0x000008, "Member 'AnalProbeBP_C_HandleActivationMiniGameOnCrosshair::K2Node_DynamicCast_AsBPW_Crosshair_Anal_Probe' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_HandleActivationMiniGameOnCrosshair, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnalProbeBP_C_HandleActivationMiniGameOnCrosshair::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_HandleActivationMiniGameOnCrosshair, CallFunc_IsMinigameActive_ReturnValue1) == 0x000011, "Member 'AnalProbeBP_C_HandleActivationMiniGameOnCrosshair::CallFunc_IsMinigameActive_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_HandleActivationMiniGameOnCrosshair, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000012, "Member 'AnalProbeBP_C_HandleActivationMiniGameOnCrosshair::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function AnalProbeBP.AnalProbeBP_C.HandleMiniGame
// 0x0018 (0x0018 - 0x0000)
struct AnalProbeBP_C_HandleMiniGame final
{
public:
	float                                         CallFunc_GetMinigameSuccessThreshold_ReturnValue;  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMinigameValue_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPW_Crosshair_AnalProbe_C*             K2Node_DynamicCast_AsBPW_Crosshair_Anal_Probe;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnalProbeBP_C_HandleMiniGame) == 0x000008, "Wrong alignment on AnalProbeBP_C_HandleMiniGame");
static_assert(sizeof(AnalProbeBP_C_HandleMiniGame) == 0x000018, "Wrong size on AnalProbeBP_C_HandleMiniGame");
static_assert(offsetof(AnalProbeBP_C_HandleMiniGame, CallFunc_GetMinigameSuccessThreshold_ReturnValue) == 0x000000, "Member 'AnalProbeBP_C_HandleMiniGame::CallFunc_GetMinigameSuccessThreshold_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_HandleMiniGame, CallFunc_GetMinigameValue_ReturnValue) == 0x000004, "Member 'AnalProbeBP_C_HandleMiniGame::CallFunc_GetMinigameValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_HandleMiniGame, K2Node_DynamicCast_AsBPW_Crosshair_Anal_Probe) == 0x000008, "Member 'AnalProbeBP_C_HandleMiniGame::K2Node_DynamicCast_AsBPW_Crosshair_Anal_Probe' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_HandleMiniGame, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnalProbeBP_C_HandleMiniGame::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnalProbeBP.AnalProbeBP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct AnalProbeBP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnalProbeBP_C_ReceiveTick) == 0x000004, "Wrong alignment on AnalProbeBP_C_ReceiveTick");
static_assert(sizeof(AnalProbeBP_C_ReceiveTick) == 0x000004, "Wrong size on AnalProbeBP_C_ReceiveTick");
static_assert(offsetof(AnalProbeBP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'AnalProbeBP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function AnalProbeBP.AnalProbeBP_C.OnWeaponFire
// 0x0008 (0x0008 - 0x0000)
struct AnalProbeBP_C_OnWeaponFire final
{
public:
	class FName                                   _nSocketName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnalProbeBP_C_OnWeaponFire) == 0x000004, "Wrong alignment on AnalProbeBP_C_OnWeaponFire");
static_assert(sizeof(AnalProbeBP_C_OnWeaponFire) == 0x000008, "Wrong size on AnalProbeBP_C_OnWeaponFire");
static_assert(offsetof(AnalProbeBP_C_OnWeaponFire, _nSocketName) == 0x000000, "Member 'AnalProbeBP_C_OnWeaponFire::_nSocketName' has a wrong offset!");

// Function AnalProbeBP.AnalProbeBP_C.OnFailedFireAttempt
// 0x0001 (0x0001 - 0x0000)
struct AnalProbeBP_C_OnFailedFireAttempt final
{
public:
	EWeaponFireAttemptResult                      _weaponFireResult;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnalProbeBP_C_OnFailedFireAttempt) == 0x000001, "Wrong alignment on AnalProbeBP_C_OnFailedFireAttempt");
static_assert(sizeof(AnalProbeBP_C_OnFailedFireAttempt) == 0x000001, "Wrong size on AnalProbeBP_C_OnFailedFireAttempt");
static_assert(offsetof(AnalProbeBP_C_OnFailedFireAttempt, _weaponFireResult) == 0x000000, "Member 'AnalProbeBP_C_OnFailedFireAttempt::_weaponFireResult' has a wrong offset!");

// Function AnalProbeBP.AnalProbeBP_C.ExecuteUbergraph_AnalProbeBP
// 0x0040 (0x0040 - 0x0000)
struct AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event__nSocketName;                         // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponFireAttemptResult                      K2Node_Event__weaponFireResult;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP) == 0x000008, "Wrong alignment on AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP");
static_assert(sizeof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP) == 0x000040, "Wrong size on AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP");
static_assert(offsetof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP, EntryPoint) == 0x000000, "Member 'AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP, CallFunc_SpawnSound2D_ReturnValue) == 0x000008, "Member 'AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP, K2Node_Event__nSocketName) == 0x000014, "Member 'AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP::K2Node_Event__nSocketName' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP, K2Node_Event__weaponFireResult) == 0x000028, "Member 'AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP::K2Node_Event__weaponFireResult' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000030, "Member 'AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000039, "Member 'AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP, CallFunc_BooleanOR_ReturnValue) == 0x00003A, "Member 'AnalProbeBP_C_ExecuteUbergraph_AnalProbeBP::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

