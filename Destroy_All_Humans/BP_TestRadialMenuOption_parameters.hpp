#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TestRadialMenuOption

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_TestRadialMenuOption.BP_TestRadialMenuOption_C.ExecuteUbergraph_BP_TestRadialMenuOption
// 0x0098 (0x0098 - 0x0000)
struct BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event__bEnabled;                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor1;                     // 0x0030(0x0028)()
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0058(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption) == 0x000008, "Wrong alignment on BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption");
static_assert(sizeof(BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption) == 0x000098, "Wrong size on BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption");
static_assert(offsetof(BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption, EntryPoint) == 0x000000, "Member 'BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption, K2Node_Event__bEnabled) == 0x000004, "Member 'BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption::K2Node_Event__bEnabled' has a wrong offset!");
static_assert(offsetof(BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption, K2Node_MakeStruct_SlateColor1) == 0x000030, "Member 'BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption::K2Node_MakeStruct_SlateColor1' has a wrong offset!");
static_assert(offsetof(BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption, K2Node_Event_MyGeometry) == 0x000058, "Member 'BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption, K2Node_Event_InDeltaTime) == 0x000090, "Member 'BP_TestRadialMenuOption_C_ExecuteUbergraph_BP_TestRadialMenuOption::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function BP_TestRadialMenuOption.BP_TestRadialMenuOption_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_TestRadialMenuOption_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestRadialMenuOption_C_Tick) == 0x000004, "Wrong alignment on BP_TestRadialMenuOption_C_Tick");
static_assert(sizeof(BP_TestRadialMenuOption_C_Tick) == 0x00003C, "Wrong size on BP_TestRadialMenuOption_C_Tick");
static_assert(offsetof(BP_TestRadialMenuOption_C_Tick, MyGeometry) == 0x000000, "Member 'BP_TestRadialMenuOption_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_TestRadialMenuOption_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_TestRadialMenuOption_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_TestRadialMenuOption.BP_TestRadialMenuOption_C.Highlight
// 0x0001 (0x0001 - 0x0000)
struct BP_TestRadialMenuOption_C_Highlight final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TestRadialMenuOption_C_Highlight) == 0x000001, "Wrong alignment on BP_TestRadialMenuOption_C_Highlight");
static_assert(sizeof(BP_TestRadialMenuOption_C_Highlight) == 0x000001, "Wrong size on BP_TestRadialMenuOption_C_Highlight");
static_assert(offsetof(BP_TestRadialMenuOption_C_Highlight, _bEnabled) == 0x000000, "Member 'BP_TestRadialMenuOption_C_Highlight::_bEnabled' has a wrong offset!");

}

