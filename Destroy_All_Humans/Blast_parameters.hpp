#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Blast

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Blast_structs.hpp"


namespace SDK::Params
{

// Function Blast.BlastMeshComponent.ApplyCapsuleDamageAll
// 0x0030 (0x0030 - 0x0000)
struct BlastMeshComponent_ApplyCapsuleDamageAll final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRadius;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRadius;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseStrength;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpulseVelChange;                                 // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlastDamageResult                            ReturnValue;                                       // 0x002D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlastMeshComponent_ApplyCapsuleDamageAll) == 0x000004, "Wrong alignment on BlastMeshComponent_ApplyCapsuleDamageAll");
static_assert(sizeof(BlastMeshComponent_ApplyCapsuleDamageAll) == 0x000030, "Wrong size on BlastMeshComponent_ApplyCapsuleDamageAll");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamageAll, Origin) == 0x000000, "Member 'BlastMeshComponent_ApplyCapsuleDamageAll::Origin' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamageAll, Rot) == 0x00000C, "Member 'BlastMeshComponent_ApplyCapsuleDamageAll::Rot' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamageAll, HalfHeight) == 0x000018, "Member 'BlastMeshComponent_ApplyCapsuleDamageAll::HalfHeight' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamageAll, MinRadius) == 0x00001C, "Member 'BlastMeshComponent_ApplyCapsuleDamageAll::MinRadius' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamageAll, MaxRadius) == 0x000020, "Member 'BlastMeshComponent_ApplyCapsuleDamageAll::MaxRadius' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamageAll, Damage) == 0x000024, "Member 'BlastMeshComponent_ApplyCapsuleDamageAll::Damage' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamageAll, ImpulseStrength) == 0x000028, "Member 'BlastMeshComponent_ApplyCapsuleDamageAll::ImpulseStrength' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamageAll, bImpulseVelChange) == 0x00002C, "Member 'BlastMeshComponent_ApplyCapsuleDamageAll::bImpulseVelChange' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamageAll, ReturnValue) == 0x00002D, "Member 'BlastMeshComponent_ApplyCapsuleDamageAll::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.ApplyDamageComponentOverlapAll
// 0x0028 (0x0028 - 0x0000)
struct BlastMeshComponent_ApplyDamageComponentOverlapAll final
{
public:
	class UBlastBaseDamageComponent*              DamageComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBlastDamageResult                            ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlastMeshComponent_ApplyDamageComponentOverlapAll) == 0x000008, "Wrong alignment on BlastMeshComponent_ApplyDamageComponentOverlapAll");
static_assert(sizeof(BlastMeshComponent_ApplyDamageComponentOverlapAll) == 0x000028, "Wrong size on BlastMeshComponent_ApplyDamageComponentOverlapAll");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponentOverlapAll, DamageComponent) == 0x000000, "Member 'BlastMeshComponent_ApplyDamageComponentOverlapAll::DamageComponent' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponentOverlapAll, Origin) == 0x000008, "Member 'BlastMeshComponent_ApplyDamageComponentOverlapAll::Origin' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponentOverlapAll, Rot) == 0x000014, "Member 'BlastMeshComponent_ApplyDamageComponentOverlapAll::Rot' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponentOverlapAll, ReturnValue) == 0x000020, "Member 'BlastMeshComponent_ApplyDamageComponentOverlapAll::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.ApplyRadialDamageAll
// 0x0020 (0x0020 - 0x0000)
struct BlastMeshComponent_ApplyRadialDamageAll final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRadius;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRadius;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseStrength;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpulseVelChange;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlastDamageResult                            ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlastMeshComponent_ApplyRadialDamageAll) == 0x000004, "Wrong alignment on BlastMeshComponent_ApplyRadialDamageAll");
static_assert(sizeof(BlastMeshComponent_ApplyRadialDamageAll) == 0x000020, "Wrong size on BlastMeshComponent_ApplyRadialDamageAll");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamageAll, Origin) == 0x000000, "Member 'BlastMeshComponent_ApplyRadialDamageAll::Origin' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamageAll, MinRadius) == 0x00000C, "Member 'BlastMeshComponent_ApplyRadialDamageAll::MinRadius' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamageAll, MaxRadius) == 0x000010, "Member 'BlastMeshComponent_ApplyRadialDamageAll::MaxRadius' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamageAll, Damage) == 0x000014, "Member 'BlastMeshComponent_ApplyRadialDamageAll::Damage' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamageAll, ImpulseStrength) == 0x000018, "Member 'BlastMeshComponent_ApplyRadialDamageAll::ImpulseStrength' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamageAll, bImpulseVelChange) == 0x00001C, "Member 'BlastMeshComponent_ApplyRadialDamageAll::bImpulseVelChange' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamageAll, ReturnValue) == 0x00001D, "Member 'BlastMeshComponent_ApplyRadialDamageAll::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.ApplyCapsuleDamage
// 0x0030 (0x0030 - 0x0000)
struct BlastMeshComponent_ApplyCapsuleDamage final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRadius;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRadius;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseStrength;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpulseVelChange;                                 // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlastDamageResult                            ReturnValue;                                       // 0x002D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlastMeshComponent_ApplyCapsuleDamage) == 0x000004, "Wrong alignment on BlastMeshComponent_ApplyCapsuleDamage");
static_assert(sizeof(BlastMeshComponent_ApplyCapsuleDamage) == 0x000030, "Wrong size on BlastMeshComponent_ApplyCapsuleDamage");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamage, Origin) == 0x000000, "Member 'BlastMeshComponent_ApplyCapsuleDamage::Origin' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamage, Rot) == 0x00000C, "Member 'BlastMeshComponent_ApplyCapsuleDamage::Rot' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamage, HalfHeight) == 0x000018, "Member 'BlastMeshComponent_ApplyCapsuleDamage::HalfHeight' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamage, MinRadius) == 0x00001C, "Member 'BlastMeshComponent_ApplyCapsuleDamage::MinRadius' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamage, MaxRadius) == 0x000020, "Member 'BlastMeshComponent_ApplyCapsuleDamage::MaxRadius' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamage, Damage) == 0x000024, "Member 'BlastMeshComponent_ApplyCapsuleDamage::Damage' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamage, ImpulseStrength) == 0x000028, "Member 'BlastMeshComponent_ApplyCapsuleDamage::ImpulseStrength' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamage, bImpulseVelChange) == 0x00002C, "Member 'BlastMeshComponent_ApplyCapsuleDamage::bImpulseVelChange' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyCapsuleDamage, ReturnValue) == 0x00002D, "Member 'BlastMeshComponent_ApplyCapsuleDamage::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.ApplyDamageComponent
// 0x0030 (0x0030 - 0x0000)
struct BlastMeshComponent_ApplyDamageComponent final
{
public:
	class UBlastBaseDamageComponent*              DamageComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlastDamageResult                            ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlastMeshComponent_ApplyDamageComponent) == 0x000008, "Wrong alignment on BlastMeshComponent_ApplyDamageComponent");
static_assert(sizeof(BlastMeshComponent_ApplyDamageComponent) == 0x000030, "Wrong size on BlastMeshComponent_ApplyDamageComponent");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponent, DamageComponent) == 0x000000, "Member 'BlastMeshComponent_ApplyDamageComponent::DamageComponent' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponent, Origin) == 0x000008, "Member 'BlastMeshComponent_ApplyDamageComponent::Origin' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponent, Rot) == 0x000014, "Member 'BlastMeshComponent_ApplyDamageComponent::Rot' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponent, BoneName) == 0x000020, "Member 'BlastMeshComponent_ApplyDamageComponent::BoneName' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponent, ReturnValue) == 0x000028, "Member 'BlastMeshComponent_ApplyDamageComponent::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.ApplyDamageComponentOverlap
// 0x0028 (0x0028 - 0x0000)
struct BlastMeshComponent_ApplyDamageComponentOverlap final
{
public:
	class UBlastBaseDamageComponent*              DamageComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBlastDamageResult                            ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlastMeshComponent_ApplyDamageComponentOverlap) == 0x000008, "Wrong alignment on BlastMeshComponent_ApplyDamageComponentOverlap");
static_assert(sizeof(BlastMeshComponent_ApplyDamageComponentOverlap) == 0x000028, "Wrong size on BlastMeshComponent_ApplyDamageComponentOverlap");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponentOverlap, DamageComponent) == 0x000000, "Member 'BlastMeshComponent_ApplyDamageComponentOverlap::DamageComponent' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponentOverlap, Origin) == 0x000008, "Member 'BlastMeshComponent_ApplyDamageComponentOverlap::Origin' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponentOverlap, Rot) == 0x000014, "Member 'BlastMeshComponent_ApplyDamageComponentOverlap::Rot' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyDamageComponentOverlap, ReturnValue) == 0x000020, "Member 'BlastMeshComponent_ApplyDamageComponentOverlap::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.ApplyRadialDamage
// 0x0020 (0x0020 - 0x0000)
struct BlastMeshComponent_ApplyRadialDamage final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRadius;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRadius;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseStrength;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpulseVelChange;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlastDamageResult                            ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlastMeshComponent_ApplyRadialDamage) == 0x000004, "Wrong alignment on BlastMeshComponent_ApplyRadialDamage");
static_assert(sizeof(BlastMeshComponent_ApplyRadialDamage) == 0x000020, "Wrong size on BlastMeshComponent_ApplyRadialDamage");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamage, Origin) == 0x000000, "Member 'BlastMeshComponent_ApplyRadialDamage::Origin' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamage, MinRadius) == 0x00000C, "Member 'BlastMeshComponent_ApplyRadialDamage::MinRadius' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamage, MaxRadius) == 0x000010, "Member 'BlastMeshComponent_ApplyRadialDamage::MaxRadius' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamage, Damage) == 0x000014, "Member 'BlastMeshComponent_ApplyRadialDamage::Damage' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamage, ImpulseStrength) == 0x000018, "Member 'BlastMeshComponent_ApplyRadialDamage::ImpulseStrength' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamage, bImpulseVelChange) == 0x00001C, "Member 'BlastMeshComponent_ApplyRadialDamage::bImpulseVelChange' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_ApplyRadialDamage, ReturnValue) == 0x00001D, "Member 'BlastMeshComponent_ApplyRadialDamage::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.OnHit
// 0x00B0 (0x00B0 - 0x0000)
struct BlastMeshComponent_OnHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlastMeshComponent_OnHit) == 0x000008, "Wrong alignment on BlastMeshComponent_OnHit");
static_assert(sizeof(BlastMeshComponent_OnHit) == 0x0000B0, "Wrong size on BlastMeshComponent_OnHit");
static_assert(offsetof(BlastMeshComponent_OnHit, HitComponent) == 0x000000, "Member 'BlastMeshComponent_OnHit::HitComponent' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_OnHit, OtherActor) == 0x000008, "Member 'BlastMeshComponent_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_OnHit, OtherComp) == 0x000010, "Member 'BlastMeshComponent_OnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_OnHit, NormalImpulse) == 0x000018, "Member 'BlastMeshComponent_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_OnHit, Hit) == 0x000024, "Member 'BlastMeshComponent_OnHit::Hit' has a wrong offset!");

// Function Blast.BlastMeshComponent.SetBlastMesh
// 0x0008 (0x0008 - 0x0000)
struct BlastMeshComponent_SetBlastMesh final
{
public:
	class UBlastMesh*                             NewBlastMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_SetBlastMesh) == 0x000008, "Wrong alignment on BlastMeshComponent_SetBlastMesh");
static_assert(sizeof(BlastMeshComponent_SetBlastMesh) == 0x000008, "Wrong size on BlastMeshComponent_SetBlastMesh");
static_assert(offsetof(BlastMeshComponent_SetBlastMesh, NewBlastMesh) == 0x000000, "Member 'BlastMeshComponent_SetBlastMesh::NewBlastMesh' has a wrong offset!");

// Function Blast.BlastMeshComponent.SetDynamicChunkCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct BlastMeshComponent_SetDynamicChunkCollisionEnabled final
{
public:
	ECollisionEnabled                             NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_SetDynamicChunkCollisionEnabled) == 0x000001, "Wrong alignment on BlastMeshComponent_SetDynamicChunkCollisionEnabled");
static_assert(sizeof(BlastMeshComponent_SetDynamicChunkCollisionEnabled) == 0x000001, "Wrong size on BlastMeshComponent_SetDynamicChunkCollisionEnabled");
static_assert(offsetof(BlastMeshComponent_SetDynamicChunkCollisionEnabled, NewType) == 0x000000, "Member 'BlastMeshComponent_SetDynamicChunkCollisionEnabled::NewType' has a wrong offset!");

// Function Blast.BlastMeshComponent.SetDynamicChunkCollisionObjectType
// 0x0001 (0x0001 - 0x0000)
struct BlastMeshComponent_SetDynamicChunkCollisionObjectType final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_SetDynamicChunkCollisionObjectType) == 0x000001, "Wrong alignment on BlastMeshComponent_SetDynamicChunkCollisionObjectType");
static_assert(sizeof(BlastMeshComponent_SetDynamicChunkCollisionObjectType) == 0x000001, "Wrong size on BlastMeshComponent_SetDynamicChunkCollisionObjectType");
static_assert(offsetof(BlastMeshComponent_SetDynamicChunkCollisionObjectType, Channel) == 0x000000, "Member 'BlastMeshComponent_SetDynamicChunkCollisionObjectType::Channel' has a wrong offset!");

// Function Blast.BlastMeshComponent.SetDynamicChunkCollisionProfileName
// 0x0008 (0x0008 - 0x0000)
struct BlastMeshComponent_SetDynamicChunkCollisionProfileName final
{
public:
	class FName                                   InCollisionProfileName;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_SetDynamicChunkCollisionProfileName) == 0x000004, "Wrong alignment on BlastMeshComponent_SetDynamicChunkCollisionProfileName");
static_assert(sizeof(BlastMeshComponent_SetDynamicChunkCollisionProfileName) == 0x000008, "Wrong size on BlastMeshComponent_SetDynamicChunkCollisionProfileName");
static_assert(offsetof(BlastMeshComponent_SetDynamicChunkCollisionProfileName, InCollisionProfileName) == 0x000000, "Member 'BlastMeshComponent_SetDynamicChunkCollisionProfileName::InCollisionProfileName' has a wrong offset!");

// Function Blast.BlastMeshComponent.SetDynamicChunkCollisionResponseToAllChannels
// 0x0001 (0x0001 - 0x0000)
struct BlastMeshComponent_SetDynamicChunkCollisionResponseToAllChannels final
{
public:
	ECollisionResponse                            NewResponse;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_SetDynamicChunkCollisionResponseToAllChannels) == 0x000001, "Wrong alignment on BlastMeshComponent_SetDynamicChunkCollisionResponseToAllChannels");
static_assert(sizeof(BlastMeshComponent_SetDynamicChunkCollisionResponseToAllChannels) == 0x000001, "Wrong size on BlastMeshComponent_SetDynamicChunkCollisionResponseToAllChannels");
static_assert(offsetof(BlastMeshComponent_SetDynamicChunkCollisionResponseToAllChannels, NewResponse) == 0x000000, "Member 'BlastMeshComponent_SetDynamicChunkCollisionResponseToAllChannels::NewResponse' has a wrong offset!");

// Function Blast.BlastMeshComponent.SetDynamicChunkCollisionResponseToChannel
// 0x0002 (0x0002 - 0x0000)
struct BlastMeshComponent_SetDynamicChunkCollisionResponseToChannel final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            NewResponse;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_SetDynamicChunkCollisionResponseToChannel) == 0x000001, "Wrong alignment on BlastMeshComponent_SetDynamicChunkCollisionResponseToChannel");
static_assert(sizeof(BlastMeshComponent_SetDynamicChunkCollisionResponseToChannel) == 0x000002, "Wrong size on BlastMeshComponent_SetDynamicChunkCollisionResponseToChannel");
static_assert(offsetof(BlastMeshComponent_SetDynamicChunkCollisionResponseToChannel, Channel) == 0x000000, "Member 'BlastMeshComponent_SetDynamicChunkCollisionResponseToChannel::Channel' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_SetDynamicChunkCollisionResponseToChannel, NewResponse) == 0x000001, "Member 'BlastMeshComponent_SetDynamicChunkCollisionResponseToChannel::NewResponse' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetActorBoneName
// 0x0010 (0x0010 - 0x0000)
struct BlastMeshComponent_GetActorBoneName final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetActorBoneName) == 0x000004, "Wrong alignment on BlastMeshComponent_GetActorBoneName");
static_assert(sizeof(BlastMeshComponent_GetActorBoneName) == 0x000010, "Wrong size on BlastMeshComponent_GetActorBoneName");
static_assert(offsetof(BlastMeshComponent_GetActorBoneName, ActorName) == 0x000000, "Member 'BlastMeshComponent_GetActorBoneName::ActorName' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetActorBoneName, ReturnValue) == 0x000008, "Member 'BlastMeshComponent_GetActorBoneName::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetActorCOMWorldPosition
// 0x0014 (0x0014 - 0x0000)
struct BlastMeshComponent_GetActorCOMWorldPosition final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetActorCOMWorldPosition) == 0x000004, "Wrong alignment on BlastMeshComponent_GetActorCOMWorldPosition");
static_assert(sizeof(BlastMeshComponent_GetActorCOMWorldPosition) == 0x000014, "Wrong size on BlastMeshComponent_GetActorCOMWorldPosition");
static_assert(offsetof(BlastMeshComponent_GetActorCOMWorldPosition, ActorName) == 0x000000, "Member 'BlastMeshComponent_GetActorCOMWorldPosition::ActorName' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetActorCOMWorldPosition, ReturnValue) == 0x000008, "Member 'BlastMeshComponent_GetActorCOMWorldPosition::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetActorForChunk
// 0x000C (0x000C - 0x0000)
struct BlastMeshComponent_GetActorForChunk final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetActorForChunk) == 0x000004, "Wrong alignment on BlastMeshComponent_GetActorForChunk");
static_assert(sizeof(BlastMeshComponent_GetActorForChunk) == 0x00000C, "Wrong size on BlastMeshComponent_GetActorForChunk");
static_assert(offsetof(BlastMeshComponent_GetActorForChunk, ChunkIndex) == 0x000000, "Member 'BlastMeshComponent_GetActorForChunk::ChunkIndex' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetActorForChunk, ReturnValue) == 0x000004, "Member 'BlastMeshComponent_GetActorForChunk::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetActorMass
// 0x000C (0x000C - 0x0000)
struct BlastMeshComponent_GetActorMass final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetActorMass) == 0x000004, "Wrong alignment on BlastMeshComponent_GetActorMass");
static_assert(sizeof(BlastMeshComponent_GetActorMass) == 0x00000C, "Wrong size on BlastMeshComponent_GetActorMass");
static_assert(offsetof(BlastMeshComponent_GetActorMass, ActorName) == 0x000000, "Member 'BlastMeshComponent_GetActorMass::ActorName' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetActorMass, ReturnValue) == 0x000008, "Member 'BlastMeshComponent_GetActorMass::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetActorWorldAngularVelocity
// 0x0014 (0x0014 - 0x0000)
struct BlastMeshComponent_GetActorWorldAngularVelocity final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetActorWorldAngularVelocity) == 0x000004, "Wrong alignment on BlastMeshComponent_GetActorWorldAngularVelocity");
static_assert(sizeof(BlastMeshComponent_GetActorWorldAngularVelocity) == 0x000014, "Wrong size on BlastMeshComponent_GetActorWorldAngularVelocity");
static_assert(offsetof(BlastMeshComponent_GetActorWorldAngularVelocity, ActorName) == 0x000000, "Member 'BlastMeshComponent_GetActorWorldAngularVelocity::ActorName' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetActorWorldAngularVelocity, ReturnValue) == 0x000008, "Member 'BlastMeshComponent_GetActorWorldAngularVelocity::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetActorWorldAngularVelocityInDegrees
// 0x0014 (0x0014 - 0x0000)
struct BlastMeshComponent_GetActorWorldAngularVelocityInDegrees final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetActorWorldAngularVelocityInDegrees) == 0x000004, "Wrong alignment on BlastMeshComponent_GetActorWorldAngularVelocityInDegrees");
static_assert(sizeof(BlastMeshComponent_GetActorWorldAngularVelocityInDegrees) == 0x000014, "Wrong size on BlastMeshComponent_GetActorWorldAngularVelocityInDegrees");
static_assert(offsetof(BlastMeshComponent_GetActorWorldAngularVelocityInDegrees, ActorName) == 0x000000, "Member 'BlastMeshComponent_GetActorWorldAngularVelocityInDegrees::ActorName' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetActorWorldAngularVelocityInDegrees, ReturnValue) == 0x000008, "Member 'BlastMeshComponent_GetActorWorldAngularVelocityInDegrees::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetActorWorldAngularVelocityInRadians
// 0x0014 (0x0014 - 0x0000)
struct BlastMeshComponent_GetActorWorldAngularVelocityInRadians final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetActorWorldAngularVelocityInRadians) == 0x000004, "Wrong alignment on BlastMeshComponent_GetActorWorldAngularVelocityInRadians");
static_assert(sizeof(BlastMeshComponent_GetActorWorldAngularVelocityInRadians) == 0x000014, "Wrong size on BlastMeshComponent_GetActorWorldAngularVelocityInRadians");
static_assert(offsetof(BlastMeshComponent_GetActorWorldAngularVelocityInRadians, ActorName) == 0x000000, "Member 'BlastMeshComponent_GetActorWorldAngularVelocityInRadians::ActorName' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetActorWorldAngularVelocityInRadians, ReturnValue) == 0x000008, "Member 'BlastMeshComponent_GetActorWorldAngularVelocityInRadians::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetActorWorldBounds
// 0x0024 (0x0024 - 0x0000)
struct BlastMeshComponent_GetActorWorldBounds final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0008(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetActorWorldBounds) == 0x000004, "Wrong alignment on BlastMeshComponent_GetActorWorldBounds");
static_assert(sizeof(BlastMeshComponent_GetActorWorldBounds) == 0x000024, "Wrong size on BlastMeshComponent_GetActorWorldBounds");
static_assert(offsetof(BlastMeshComponent_GetActorWorldBounds, ActorName) == 0x000000, "Member 'BlastMeshComponent_GetActorWorldBounds::ActorName' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetActorWorldBounds, ReturnValue) == 0x000008, "Member 'BlastMeshComponent_GetActorWorldBounds::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetActorWorldTransform
// 0x0040 (0x0040 - 0x0000)
struct BlastMeshComponent_GetActorWorldTransform final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetActorWorldTransform) == 0x000010, "Wrong alignment on BlastMeshComponent_GetActorWorldTransform");
static_assert(sizeof(BlastMeshComponent_GetActorWorldTransform) == 0x000040, "Wrong size on BlastMeshComponent_GetActorWorldTransform");
static_assert(offsetof(BlastMeshComponent_GetActorWorldTransform, ActorName) == 0x000000, "Member 'BlastMeshComponent_GetActorWorldTransform::ActorName' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetActorWorldTransform, ReturnValue) == 0x000010, "Member 'BlastMeshComponent_GetActorWorldTransform::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetActorWorldVelocity
// 0x0014 (0x0014 - 0x0000)
struct BlastMeshComponent_GetActorWorldVelocity final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetActorWorldVelocity) == 0x000004, "Wrong alignment on BlastMeshComponent_GetActorWorldVelocity");
static_assert(sizeof(BlastMeshComponent_GetActorWorldVelocity) == 0x000014, "Wrong size on BlastMeshComponent_GetActorWorldVelocity");
static_assert(offsetof(BlastMeshComponent_GetActorWorldVelocity, ActorName) == 0x000000, "Member 'BlastMeshComponent_GetActorWorldVelocity::ActorName' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetActorWorldVelocity, ReturnValue) == 0x000008, "Member 'BlastMeshComponent_GetActorWorldVelocity::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetChunkActorRelativeTransform
// 0x0040 (0x0040 - 0x0000)
struct BlastMeshComponent_GetChunkActorRelativeTransform final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetChunkActorRelativeTransform) == 0x000010, "Wrong alignment on BlastMeshComponent_GetChunkActorRelativeTransform");
static_assert(sizeof(BlastMeshComponent_GetChunkActorRelativeTransform) == 0x000040, "Wrong size on BlastMeshComponent_GetChunkActorRelativeTransform");
static_assert(offsetof(BlastMeshComponent_GetChunkActorRelativeTransform, ChunkIndex) == 0x000000, "Member 'BlastMeshComponent_GetChunkActorRelativeTransform::ChunkIndex' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetChunkActorRelativeTransform, ReturnValue) == 0x000010, "Member 'BlastMeshComponent_GetChunkActorRelativeTransform::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetChunkCenterWorldPosition
// 0x0010 (0x0010 - 0x0000)
struct BlastMeshComponent_GetChunkCenterWorldPosition final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetChunkCenterWorldPosition) == 0x000004, "Wrong alignment on BlastMeshComponent_GetChunkCenterWorldPosition");
static_assert(sizeof(BlastMeshComponent_GetChunkCenterWorldPosition) == 0x000010, "Wrong size on BlastMeshComponent_GetChunkCenterWorldPosition");
static_assert(offsetof(BlastMeshComponent_GetChunkCenterWorldPosition, ChunkIndex) == 0x000000, "Member 'BlastMeshComponent_GetChunkCenterWorldPosition::ChunkIndex' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetChunkCenterWorldPosition, ReturnValue) == 0x000004, "Member 'BlastMeshComponent_GetChunkCenterWorldPosition::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetChunkWorldAngularVelocity
// 0x0010 (0x0010 - 0x0000)
struct BlastMeshComponent_GetChunkWorldAngularVelocity final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetChunkWorldAngularVelocity) == 0x000004, "Wrong alignment on BlastMeshComponent_GetChunkWorldAngularVelocity");
static_assert(sizeof(BlastMeshComponent_GetChunkWorldAngularVelocity) == 0x000010, "Wrong size on BlastMeshComponent_GetChunkWorldAngularVelocity");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldAngularVelocity, ChunkIndex) == 0x000000, "Member 'BlastMeshComponent_GetChunkWorldAngularVelocity::ChunkIndex' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldAngularVelocity, ReturnValue) == 0x000004, "Member 'BlastMeshComponent_GetChunkWorldAngularVelocity::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetChunkWorldAngularVelocityInDegrees
// 0x0010 (0x0010 - 0x0000)
struct BlastMeshComponent_GetChunkWorldAngularVelocityInDegrees final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetChunkWorldAngularVelocityInDegrees) == 0x000004, "Wrong alignment on BlastMeshComponent_GetChunkWorldAngularVelocityInDegrees");
static_assert(sizeof(BlastMeshComponent_GetChunkWorldAngularVelocityInDegrees) == 0x000010, "Wrong size on BlastMeshComponent_GetChunkWorldAngularVelocityInDegrees");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldAngularVelocityInDegrees, ChunkIndex) == 0x000000, "Member 'BlastMeshComponent_GetChunkWorldAngularVelocityInDegrees::ChunkIndex' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldAngularVelocityInDegrees, ReturnValue) == 0x000004, "Member 'BlastMeshComponent_GetChunkWorldAngularVelocityInDegrees::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetChunkWorldAngularVelocityInRadians
// 0x0010 (0x0010 - 0x0000)
struct BlastMeshComponent_GetChunkWorldAngularVelocityInRadians final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetChunkWorldAngularVelocityInRadians) == 0x000004, "Wrong alignment on BlastMeshComponent_GetChunkWorldAngularVelocityInRadians");
static_assert(sizeof(BlastMeshComponent_GetChunkWorldAngularVelocityInRadians) == 0x000010, "Wrong size on BlastMeshComponent_GetChunkWorldAngularVelocityInRadians");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldAngularVelocityInRadians, ChunkIndex) == 0x000000, "Member 'BlastMeshComponent_GetChunkWorldAngularVelocityInRadians::ChunkIndex' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldAngularVelocityInRadians, ReturnValue) == 0x000004, "Member 'BlastMeshComponent_GetChunkWorldAngularVelocityInRadians::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetChunkWorldBounds
// 0x0020 (0x0020 - 0x0000)
struct BlastMeshComponent_GetChunkWorldBounds final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       ReturnValue;                                       // 0x0004(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetChunkWorldBounds) == 0x000004, "Wrong alignment on BlastMeshComponent_GetChunkWorldBounds");
static_assert(sizeof(BlastMeshComponent_GetChunkWorldBounds) == 0x000020, "Wrong size on BlastMeshComponent_GetChunkWorldBounds");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldBounds, ChunkIndex) == 0x000000, "Member 'BlastMeshComponent_GetChunkWorldBounds::ChunkIndex' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldBounds, ReturnValue) == 0x000004, "Member 'BlastMeshComponent_GetChunkWorldBounds::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetChunkWorldTransform
// 0x0040 (0x0040 - 0x0000)
struct BlastMeshComponent_GetChunkWorldTransform final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetChunkWorldTransform) == 0x000010, "Wrong alignment on BlastMeshComponent_GetChunkWorldTransform");
static_assert(sizeof(BlastMeshComponent_GetChunkWorldTransform) == 0x000040, "Wrong size on BlastMeshComponent_GetChunkWorldTransform");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldTransform, ChunkIndex) == 0x000000, "Member 'BlastMeshComponent_GetChunkWorldTransform::ChunkIndex' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldTransform, ReturnValue) == 0x000010, "Member 'BlastMeshComponent_GetChunkWorldTransform::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetChunkWorldVelocity
// 0x0010 (0x0010 - 0x0000)
struct BlastMeshComponent_GetChunkWorldVelocity final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetChunkWorldVelocity) == 0x000004, "Wrong alignment on BlastMeshComponent_GetChunkWorldVelocity");
static_assert(sizeof(BlastMeshComponent_GetChunkWorldVelocity) == 0x000010, "Wrong size on BlastMeshComponent_GetChunkWorldVelocity");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldVelocity, ChunkIndex) == 0x000000, "Member 'BlastMeshComponent_GetChunkWorldVelocity::ChunkIndex' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_GetChunkWorldVelocity, ReturnValue) == 0x000004, "Member 'BlastMeshComponent_GetChunkWorldVelocity::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.GetDynamicChunkCollisionProfileName
// 0x0008 (0x0008 - 0x0000)
struct BlastMeshComponent_GetDynamicChunkCollisionProfileName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_GetDynamicChunkCollisionProfileName) == 0x000004, "Wrong alignment on BlastMeshComponent_GetDynamicChunkCollisionProfileName");
static_assert(sizeof(BlastMeshComponent_GetDynamicChunkCollisionProfileName) == 0x000008, "Wrong size on BlastMeshComponent_GetDynamicChunkCollisionProfileName");
static_assert(offsetof(BlastMeshComponent_GetDynamicChunkCollisionProfileName, ReturnValue) == 0x000000, "Member 'BlastMeshComponent_GetDynamicChunkCollisionProfileName::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshComponent.HasChunkInSphere
// 0x0014 (0x0014 - 0x0000)
struct BlastMeshComponent_HasChunkInSphere final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshComponent_HasChunkInSphere) == 0x000004, "Wrong alignment on BlastMeshComponent_HasChunkInSphere");
static_assert(sizeof(BlastMeshComponent_HasChunkInSphere) == 0x000014, "Wrong size on BlastMeshComponent_HasChunkInSphere");
static_assert(offsetof(BlastMeshComponent_HasChunkInSphere, Center) == 0x000000, "Member 'BlastMeshComponent_HasChunkInSphere::Center' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_HasChunkInSphere, Radius) == 0x00000C, "Member 'BlastMeshComponent_HasChunkInSphere::Radius' has a wrong offset!");
static_assert(offsetof(BlastMeshComponent_HasChunkInSphere, ReturnValue) == 0x000010, "Member 'BlastMeshComponent_HasChunkInSphere::ReturnValue' has a wrong offset!");

// Function Blast.BlastBlueprintFunctionLibrary.IsValidToApplyForces
// 0x0018 (0x0018 - 0x0000)
struct BlastBlueprintFunctionLibrary_IsValidToApplyForces final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlastBlueprintFunctionLibrary_IsValidToApplyForces) == 0x000008, "Wrong alignment on BlastBlueprintFunctionLibrary_IsValidToApplyForces");
static_assert(sizeof(BlastBlueprintFunctionLibrary_IsValidToApplyForces) == 0x000018, "Wrong size on BlastBlueprintFunctionLibrary_IsValidToApplyForces");
static_assert(offsetof(BlastBlueprintFunctionLibrary_IsValidToApplyForces, Component) == 0x000000, "Member 'BlastBlueprintFunctionLibrary_IsValidToApplyForces::Component' has a wrong offset!");
static_assert(offsetof(BlastBlueprintFunctionLibrary_IsValidToApplyForces, BoneName) == 0x000008, "Member 'BlastBlueprintFunctionLibrary_IsValidToApplyForces::BoneName' has a wrong offset!");
static_assert(offsetof(BlastBlueprintFunctionLibrary_IsValidToApplyForces, ReturnValue) == 0x000010, "Member 'BlastBlueprintFunctionLibrary_IsValidToApplyForces::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshRecordedComponent.GetBlastMeshFromSoftPath
// 0x0020 (0x0020 - 0x0000)
struct BlastMeshRecordedComponent_GetBlastMeshFromSoftPath final
{
public:
	struct FSoftObjectPath                        _path;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlastMesh*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshRecordedComponent_GetBlastMeshFromSoftPath) == 0x000008, "Wrong alignment on BlastMeshRecordedComponent_GetBlastMeshFromSoftPath");
static_assert(sizeof(BlastMeshRecordedComponent_GetBlastMeshFromSoftPath) == 0x000020, "Wrong size on BlastMeshRecordedComponent_GetBlastMeshFromSoftPath");
static_assert(offsetof(BlastMeshRecordedComponent_GetBlastMeshFromSoftPath, _path) == 0x000000, "Member 'BlastMeshRecordedComponent_GetBlastMeshFromSoftPath::_path' has a wrong offset!");
static_assert(offsetof(BlastMeshRecordedComponent_GetBlastMeshFromSoftPath, ReturnValue) == 0x000018, "Member 'BlastMeshRecordedComponent_GetBlastMeshFromSoftPath::ReturnValue' has a wrong offset!");

// Function Blast.BlastMeshRecordedComponent.OnCreatedBlastMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct BlastMeshRecordedComponent_OnCreatedBlastMeshComponent final
{
public:
	class UBlastMeshComponent*                    _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshRecordedComponent_OnCreatedBlastMeshComponent) == 0x000008, "Wrong alignment on BlastMeshRecordedComponent_OnCreatedBlastMeshComponent");
static_assert(sizeof(BlastMeshRecordedComponent_OnCreatedBlastMeshComponent) == 0x000008, "Wrong size on BlastMeshRecordedComponent_OnCreatedBlastMeshComponent");
static_assert(offsetof(BlastMeshRecordedComponent_OnCreatedBlastMeshComponent, _pComponent) == 0x000000, "Member 'BlastMeshRecordedComponent_OnCreatedBlastMeshComponent::_pComponent' has a wrong offset!");

// Function Blast.BlastMeshRecordedComponent.OnEffectEvent
// 0x000C (0x000C - 0x0000)
struct BlastMeshRecordedComponent_OnEffectEvent final
{
public:
	ECachedBlastRecordingEvent                    _eEvent;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iCustomData;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iCustomData2;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshRecordedComponent_OnEffectEvent) == 0x000004, "Wrong alignment on BlastMeshRecordedComponent_OnEffectEvent");
static_assert(sizeof(BlastMeshRecordedComponent_OnEffectEvent) == 0x00000C, "Wrong size on BlastMeshRecordedComponent_OnEffectEvent");
static_assert(offsetof(BlastMeshRecordedComponent_OnEffectEvent, _eEvent) == 0x000000, "Member 'BlastMeshRecordedComponent_OnEffectEvent::_eEvent' has a wrong offset!");
static_assert(offsetof(BlastMeshRecordedComponent_OnEffectEvent, _iCustomData) == 0x000004, "Member 'BlastMeshRecordedComponent_OnEffectEvent::_iCustomData' has a wrong offset!");
static_assert(offsetof(BlastMeshRecordedComponent_OnEffectEvent, _iCustomData2) == 0x000008, "Member 'BlastMeshRecordedComponent_OnEffectEvent::_iCustomData2' has a wrong offset!");

// Function Blast.BlastMeshRecordedComponent.OnRemovedBlastMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct BlastMeshRecordedComponent_OnRemovedBlastMeshComponent final
{
public:
	class UBlastMeshComponent*                    _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshRecordedComponent_OnRemovedBlastMeshComponent) == 0x000008, "Wrong alignment on BlastMeshRecordedComponent_OnRemovedBlastMeshComponent");
static_assert(sizeof(BlastMeshRecordedComponent_OnRemovedBlastMeshComponent) == 0x000008, "Wrong size on BlastMeshRecordedComponent_OnRemovedBlastMeshComponent");
static_assert(offsetof(BlastMeshRecordedComponent_OnRemovedBlastMeshComponent, _pComponent) == 0x000000, "Member 'BlastMeshRecordedComponent_OnRemovedBlastMeshComponent::_pComponent' has a wrong offset!");

// Function Blast.BlastMeshRecordedComponent.UpdateRecordingAndPlayback
// 0x0004 (0x0004 - 0x0000)
struct BlastMeshRecordedComponent_UpdateRecordingAndPlayback final
{
public:
	float                                         _fTimeDelta;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshRecordedComponent_UpdateRecordingAndPlayback) == 0x000004, "Wrong alignment on BlastMeshRecordedComponent_UpdateRecordingAndPlayback");
static_assert(sizeof(BlastMeshRecordedComponent_UpdateRecordingAndPlayback) == 0x000004, "Wrong size on BlastMeshRecordedComponent_UpdateRecordingAndPlayback");
static_assert(offsetof(BlastMeshRecordedComponent_UpdateRecordingAndPlayback, _fTimeDelta) == 0x000000, "Member 'BlastMeshRecordedComponent_UpdateRecordingAndPlayback::_fTimeDelta' has a wrong offset!");

// Function Blast.BlastMeshRecordedComponent.HasValidCachedData
// 0x0001 (0x0001 - 0x0000)
struct BlastMeshRecordedComponent_HasValidCachedData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMeshRecordedComponent_HasValidCachedData) == 0x000001, "Wrong alignment on BlastMeshRecordedComponent_HasValidCachedData");
static_assert(sizeof(BlastMeshRecordedComponent_HasValidCachedData) == 0x000001, "Wrong size on BlastMeshRecordedComponent_HasValidCachedData");
static_assert(offsetof(BlastMeshRecordedComponent_HasValidCachedData, ReturnValue) == 0x000000, "Member 'BlastMeshRecordedComponent_HasValidCachedData::ReturnValue' has a wrong offset!");

}

