#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPW_ChallengePanel_Star

#include "Basic.hpp"

#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BPW_ChallengePanel_Star.BPW_ChallengePanel_Star_C
// 0x0020 (0x0260 - 0x0240)
class UBPW_ChallengePanel_Star_C final : public UUserWidget
{
public:
	class UWidgetAnimation*                       Animation_HideDetails;                             // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Img_Star;                                          // 0x0248(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         RTB_Bonus;                                         // 0x0250(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         RTB_Condition;                                     // 0x0258(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void Unlock(bool Value);
	void ApplyInfo(const class FText& Format, const struct FBFGDataAsset_ChallengeInfo_StarDetails& StarDetails);
	void SetBonus(const class FText& Bonus);
	void SetCondition(const class FText& Condition);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPW_ChallengePanel_Star_C">();
	}
	static class UBPW_ChallengePanel_Star_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPW_ChallengePanel_Star_C>();
	}
};
static_assert(alignof(UBPW_ChallengePanel_Star_C) == 0x000008, "Wrong alignment on UBPW_ChallengePanel_Star_C");
static_assert(sizeof(UBPW_ChallengePanel_Star_C) == 0x000260, "Wrong size on UBPW_ChallengePanel_Star_C");
static_assert(offsetof(UBPW_ChallengePanel_Star_C, Animation_HideDetails) == 0x000240, "Member 'UBPW_ChallengePanel_Star_C::Animation_HideDetails' has a wrong offset!");
static_assert(offsetof(UBPW_ChallengePanel_Star_C, Img_Star) == 0x000248, "Member 'UBPW_ChallengePanel_Star_C::Img_Star' has a wrong offset!");
static_assert(offsetof(UBPW_ChallengePanel_Star_C, RTB_Bonus) == 0x000250, "Member 'UBPW_ChallengePanel_Star_C::RTB_Bonus' has a wrong offset!");
static_assert(offsetof(UBPW_ChallengePanel_Star_C, RTB_Condition) == 0x000258, "Member 'UBPW_ChallengePanel_Star_C::RTB_Condition' has a wrong offset!");

}

