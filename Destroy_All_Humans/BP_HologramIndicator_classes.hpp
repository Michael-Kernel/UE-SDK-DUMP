#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HologramIndicator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HologramIndicator.BP_HologramIndicator_C
// 0x0050 (0x0428 - 0x03D8)
class ABP_HologramIndicator_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               PFX_Indicator;                                     // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        BG_Decal;                                          // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Hologram;                                          // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectAge;                                         // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Initialize;                                        // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      ControlCurve;                                      // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               M_Hologram;                                        // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               M_BG;                                              // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_HologramIndicator(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HologramIndicator_C">();
	}
	static class ABP_HologramIndicator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HologramIndicator_C>();
	}
};
static_assert(alignof(ABP_HologramIndicator_C) == 0x000008, "Wrong alignment on ABP_HologramIndicator_C");
static_assert(sizeof(ABP_HologramIndicator_C) == 0x000428, "Wrong size on ABP_HologramIndicator_C");
static_assert(offsetof(ABP_HologramIndicator_C, UberGraphFrame) == 0x0003D8, "Member 'ABP_HologramIndicator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, PFX_Indicator) == 0x0003E0, "Member 'ABP_HologramIndicator_C::PFX_Indicator' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, BG_Decal) == 0x0003E8, "Member 'ABP_HologramIndicator_C::BG_Decal' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, Hologram) == 0x0003F0, "Member 'ABP_HologramIndicator_C::Hologram' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, DefaultSceneRoot) == 0x0003F8, "Member 'ABP_HologramIndicator_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, Radius) == 0x000400, "Member 'ABP_HologramIndicator_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, Duration) == 0x000404, "Member 'ABP_HologramIndicator_C::Duration' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, EffectAge) == 0x000408, "Member 'ABP_HologramIndicator_C::EffectAge' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, Initialize) == 0x00040C, "Member 'ABP_HologramIndicator_C::Initialize' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, ControlCurve) == 0x000410, "Member 'ABP_HologramIndicator_C::ControlCurve' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, M_Hologram) == 0x000418, "Member 'ABP_HologramIndicator_C::M_Hologram' has a wrong offset!");
static_assert(offsetof(ABP_HologramIndicator_C, M_BG) == 0x000420, "Member 'ABP_HologramIndicator_C::M_BG' has a wrong offset!");

}

