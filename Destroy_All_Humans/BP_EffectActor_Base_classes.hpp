#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EffectActor_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EffectActor_Base.BP_EffectActor_Base_C
// 0x0010 (0x0458 - 0x0448)
class ABP_EffectActor_Base_C : public ABFGEffectActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0448(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void GetBlackboardVector(class FName BlackB_Variable, struct FVector* BB_Value);
	void GetBlackboardName(class FName BlackB_Variable, class FName* BB_Value);
	void GetBlackboardInt(class FName BlackB_Variable, int32* BB_Value);
	void GetBlackboardFloat(class FName BlackB_Variable, float* BB_Value);
	void GetBlackboardBool(class FName BlackB_Variable, bool* BB_Value);
	void OnTriggerEffect();
	void ExecuteUbergraph_BP_EffectActor_Base(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EffectActor_Base_C">();
	}
	static class ABP_EffectActor_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EffectActor_Base_C>();
	}
};
static_assert(alignof(ABP_EffectActor_Base_C) == 0x000008, "Wrong alignment on ABP_EffectActor_Base_C");
static_assert(sizeof(ABP_EffectActor_Base_C) == 0x000458, "Wrong size on ABP_EffectActor_Base_C");
static_assert(offsetof(ABP_EffectActor_Base_C, UberGraphFrame) == 0x000448, "Member 'ABP_EffectActor_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_Base_C, DefaultSceneRoot) == 0x000450, "Member 'ABP_EffectActor_Base_C::DefaultSceneRoot' has a wrong offset!");

}

