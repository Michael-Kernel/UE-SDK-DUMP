#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MissionTriggerZone_CustomShape_OOB

#include "Basic.hpp"

#include "BP_MissionTriggerZone_CustomShape_OOB_classes.hpp"
#include "BP_MissionTriggerZone_CustomShape_OOB_parameters.hpp"


namespace SDK
{

// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.ExecuteUbergraph_BP_MissionTriggerZone_CustomShape_OOB
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MissionTriggerZone_CustomShape_OOB_C::ExecuteUbergraph_BP_MissionTriggerZone_CustomShape_OOB(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "ExecuteUbergraph_BP_MissionTriggerZone_CustomShape_OOB");

	Params::BP_MissionTriggerZone_CustomShape_OOB_C_ExecuteUbergraph_BP_MissionTriggerZone_CustomShape_OOB Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.OnStateChange
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           _pActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETriggerState                           _eLastState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETriggerState                           _eCurrentState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MissionTriggerZone_CustomShape_OOB_C::OnStateChange(class AActor* _pActor, ETriggerState _eLastState, ETriggerState _eCurrentState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "OnStateChange");

	Params::BP_MissionTriggerZone_CustomShape_OOB_C_OnStateChange Parms{};

	Parms._pActor = _pActor;
	Parms._eLastState = _eLastState;
	Parms._eCurrentState = _eCurrentState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MissionTriggerZone_CustomShape_OOB_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.CalculateVertices
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSplinePoint>             Reference_Array                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FSplinePoint>             Point_Array_1                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                                    Use_Index_Plus_Slot_1                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FSplinePoint>             Point_Array_2                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                                    Use_Index_Plus_Slot_2                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FSplinePoint>             Point_Array_3                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                                    Use_Index_Plus_Slot_3                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MissionTriggerZone_CustomShape_OOB_C::CalculateVertices(TArray<struct FSplinePoint>& Reference_Array, TArray<struct FSplinePoint>& Point_Array_1, bool Use_Index_Plus_Slot_1, TArray<struct FSplinePoint>& Point_Array_2, bool Use_Index_Plus_Slot_2, TArray<struct FSplinePoint>& Point_Array_3, bool Use_Index_Plus_Slot_3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "CalculateVertices");

	Params::BP_MissionTriggerZone_CustomShape_OOB_C_CalculateVertices Parms{};

	Parms.Reference_Array = std::move(Reference_Array);
	Parms.Point_Array_1 = std::move(Point_Array_1);
	Parms.Use_Index_Plus_Slot_1 = Use_Index_Plus_Slot_1;
	Parms.Point_Array_2 = std::move(Point_Array_2);
	Parms.Use_Index_Plus_Slot_2 = Use_Index_Plus_Slot_2;
	Parms.Point_Array_3 = std::move(Point_Array_3);
	Parms.Use_Index_Plus_Slot_3 = Use_Index_Plus_Slot_3;

	UObject::ProcessEvent(Func, &Parms);

	Reference_Array = std::move(Parms.Reference_Array);
	Point_Array_1 = std::move(Parms.Point_Array_1);
	Point_Array_2 = std::move(Parms.Point_Array_2);
	Point_Array_3 = std::move(Parms.Point_Array_3);
}


// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.CalculateOuterBounds
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MissionTriggerZone_CustomShape_OOB_C::CalculateOuterBounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "CalculateOuterBounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.CalculateCentroids
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSplinePoint>             NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                          Centroid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MissionTriggerZone_CustomShape_OOB_C::CalculateCentroids(TArray<struct FSplinePoint>& NewParam, struct FVector* Centroid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "CalculateCentroids");

	Params::BP_MissionTriggerZone_CustomShape_OOB_C_CalculateCentroids Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);

	NewParam = std::move(Parms.NewParam);

	if (Centroid != nullptr)
		*Centroid = std::move(Parms.Centroid);
}


// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.ConvertSplinePointToVector
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FSplinePoint>             In_Array                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FVector>                  OutVector                                              (Parm, OutParm, ZeroConstructor)

void ABP_MissionTriggerZone_CustomShape_OOB_C::ConvertSplinePointToVector(TArray<struct FSplinePoint>& In_Array, TArray<struct FVector>* OutVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "ConvertSplinePointToVector");

	Params::BP_MissionTriggerZone_CustomShape_OOB_C_ConvertSplinePointToVector Parms{};

	Parms.In_Array = std::move(In_Array);

	UObject::ProcessEvent(Func, &Parms);

	In_Array = std::move(Parms.In_Array);

	if (OutVector != nullptr)
		*OutVector = std::move(Parms.OutVector);
}


// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.ReverseWinding
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           In_Triangles                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<int32>                           OutTriangles                                           (Parm, OutParm, ZeroConstructor)

void ABP_MissionTriggerZone_CustomShape_OOB_C::ReverseWinding(TArray<int32>& In_Triangles, TArray<int32>* OutTriangles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "ReverseWinding");

	Params::BP_MissionTriggerZone_CustomShape_OOB_C_ReverseWinding Parms{};

	Parms.In_Triangles = std::move(In_Triangles);

	UObject::ProcessEvent(Func, &Parms);

	In_Triangles = std::move(Parms.In_Triangles);

	if (OutTriangles != nullptr)
		*OutTriangles = std::move(Parms.OutTriangles);
}


// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.DrawDebugLines
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSplinePoint>             Spline_Points_Inner_Bounds_Bottom                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FSplinePoint>             Spline_Points_Inner_Bounds_Top                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FSplinePoint>             Spline_Points_Outer_Bounds_Bottom                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FSplinePoint>             Spline_Points_Outer_Bounds_Top                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void ABP_MissionTriggerZone_CustomShape_OOB_C::DrawDebugLines(TArray<struct FSplinePoint>& Spline_Points_Inner_Bounds_Bottom, TArray<struct FSplinePoint>& Spline_Points_Inner_Bounds_Top, TArray<struct FSplinePoint>& Spline_Points_Outer_Bounds_Bottom, TArray<struct FSplinePoint>& Spline_Points_Outer_Bounds_Top)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "DrawDebugLines");

	Params::BP_MissionTriggerZone_CustomShape_OOB_C_DrawDebugLines Parms{};

	Parms.Spline_Points_Inner_Bounds_Bottom = std::move(Spline_Points_Inner_Bounds_Bottom);
	Parms.Spline_Points_Inner_Bounds_Top = std::move(Spline_Points_Inner_Bounds_Top);
	Parms.Spline_Points_Outer_Bounds_Bottom = std::move(Spline_Points_Outer_Bounds_Bottom);
	Parms.Spline_Points_Outer_Bounds_Top = std::move(Spline_Points_Outer_Bounds_Top);

	UObject::ProcessEvent(Func, &Parms);

	Spline_Points_Inner_Bounds_Bottom = std::move(Parms.Spline_Points_Inner_Bounds_Bottom);
	Spline_Points_Inner_Bounds_Top = std::move(Parms.Spline_Points_Inner_Bounds_Top);
	Spline_Points_Outer_Bounds_Bottom = std::move(Parms.Spline_Points_Outer_Bounds_Bottom);
	Spline_Points_Outer_Bounds_Top = std::move(Parms.Spline_Points_Outer_Bounds_Top);
}


// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.DrawLoops
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSplinePoint>             Spline_Points                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void ABP_MissionTriggerZone_CustomShape_OOB_C::DrawLoops(TArray<struct FSplinePoint>& Spline_Points)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "DrawLoops");

	Params::BP_MissionTriggerZone_CustomShape_OOB_C_DrawLoops Parms{};

	Parms.Spline_Points = std::move(Spline_Points);

	UObject::ProcessEvent(Func, &Parms);

	Spline_Points = std::move(Parms.Spline_Points);
}


// Function BP_MissionTriggerZone_CustomShape_OOB.BP_MissionTriggerZone_CustomShape_OOB_C.DrawWalls
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSplinePoint>             Spline_Points_Bottom                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FSplinePoint>             Spline_Points_Top                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void ABP_MissionTriggerZone_CustomShape_OOB_C::DrawWalls(TArray<struct FSplinePoint>& Spline_Points_Bottom, TArray<struct FSplinePoint>& Spline_Points_Top)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MissionTriggerZone_CustomShape_OOB_C", "DrawWalls");

	Params::BP_MissionTriggerZone_CustomShape_OOB_C_DrawWalls Parms{};

	Parms.Spline_Points_Bottom = std::move(Spline_Points_Bottom);
	Parms.Spline_Points_Top = std::move(Spline_Points_Top);

	UObject::ProcessEvent(Func, &Parms);

	Spline_Points_Bottom = std::move(Parms.Spline_Points_Bottom);
	Spline_Points_Top = std::move(Parms.Spline_Points_Top);
}

}

