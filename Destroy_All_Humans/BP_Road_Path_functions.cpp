#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Road_Path

#include "Basic.hpp"

#include "BP_Road_Path_classes.hpp"
#include "BP_Road_Path_parameters.hpp"


namespace SDK
{

// Function BP_Road_Path.BP_Road_Path_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Road_Path_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Road_Path.BP_Road_Path_C.Add SplineMesh
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SideOffset                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HeightOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   N                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFlip                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USplineMeshComponent*             SplineMesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Road_Path_C::Add_SplineMesh(class USplineComponent* Spline, class UStaticMesh* Mesh, float Start, float End, float SideOffset, float HeightOffset, int32 N, bool bFlip, class USplineMeshComponent** SplineMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "Add SplineMesh");

	Params::BP_Road_Path_C_Add_SplineMesh Parms{};

	Parms.Spline = Spline;
	Parms.Mesh = Mesh;
	Parms.Start = Start;
	Parms.End = End;
	Parms.SideOffset = SideOffset;
	Parms.HeightOffset = HeightOffset;
	Parms.N = N;
	Parms.bFlip = bFlip;

	UObject::ProcessEvent(Func, &Parms);

	if (SplineMesh != nullptr)
		*SplineMesh = Parms.SplineMesh;
}


// Function BP_Road_Path.BP_Road_Path_C.Stripe Spline Info
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   QueriedDistance                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location__local_                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location__world_                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Tangent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RightVector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Roll                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform ABP_Road_Path_C::Stripe_Spline_Info(class USplineComponent* Spline, float QueriedDistance, struct FVector* Location__local_, struct FVector* Location__world_, struct FVector* Tangent, struct FVector* RightVector, float* Roll, struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "Stripe Spline Info");

	Params::BP_Road_Path_C_Stripe_Spline_Info Parms{};

	Parms.Spline = Spline;
	Parms.QueriedDistance = QueriedDistance;

	UObject::ProcessEvent(Func, &Parms);

	if (Location__local_ != nullptr)
		*Location__local_ = std::move(Parms.Location__local_);

	if (Location__world_ != nullptr)
		*Location__world_ = std::move(Parms.Location__world_);

	if (Tangent != nullptr)
		*Tangent = std::move(Parms.Tangent);

	if (RightVector != nullptr)
		*RightVector = std::move(Parms.RightVector);

	if (Roll != nullptr)
		*Roll = Parms.Roll;

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);

	return Parms.ReturnValue;
}


// Function BP_Road_Path.BP_Road_Path_C.Build Spline
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ChunksProcessed                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Road_Path_C::Build_Spline(int32* ChunksProcessed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "Build Spline");

	Params::BP_Road_Path_C_Build_Spline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChunksProcessed != nullptr)
		*ChunksProcessed = Parms.ChunksProcessed;
}


// Function BP_Road_Path.BP_Road_Path_C.Apply Vertex Color
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsTip                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USplineMeshComponent*             Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsRight                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsLeft                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Road_Path_C::Apply_Vertex_Color(bool bIsTip, class USplineMeshComponent* Mesh, bool bIsRight, bool bIsLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "Apply Vertex Color");

	Params::BP_Road_Path_C_Apply_Vertex_Color Parms{};

	Parms.bIsTip = bIsTip;
	Parms.Mesh = Mesh;
	Parms.bIsRight = bIsRight;
	Parms.bIsLeft = bIsLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Road_Path.BP_Road_Path_C.Snap Points
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CheckRadius                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Road_Path_C::Snap_Points(float CheckRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "Snap Points");

	Params::BP_Road_Path_C_Snap_Points Parms{};

	Parms.CheckRadius = CheckRadius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Road_Path.BP_Road_Path_C.Get Custom Mesh Builder
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   N                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      MeshInSlot                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsEmptySlot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFlip                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector2D                        OffsetStartEnd                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCastShadow                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bEnableCollision                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Road_Path_C::Get_Custom_Mesh_Builder(int32 N, class UStaticMesh** MeshInSlot, bool* bIsEmptySlot, bool* bFlip, struct FVector2D* OffsetStartEnd, bool* bCastShadow, bool* bEnableCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "Get Custom Mesh Builder");

	Params::BP_Road_Path_C_Get_Custom_Mesh_Builder Parms{};

	Parms.N = N;

	UObject::ProcessEvent(Func, &Parms);

	if (MeshInSlot != nullptr)
		*MeshInSlot = Parms.MeshInSlot;

	if (bIsEmptySlot != nullptr)
		*bIsEmptySlot = Parms.bIsEmptySlot;

	if (bFlip != nullptr)
		*bFlip = Parms.bFlip;

	if (OffsetStartEnd != nullptr)
		*OffsetStartEnd = std::move(Parms.OffsetStartEnd);

	if (bCastShadow != nullptr)
		*bCastShadow = Parms.bCastShadow;

	if (bEnableCollision != nullptr)
		*bEnableCollision = Parms.bEnableCollision;
}


// Function BP_Road_Path.BP_Road_Path_C.PrintError
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_Road_Path_C::PrintError(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "PrintError");

	Params::BP_Road_Path_C_PrintError Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Road_Path.BP_Road_Path_C.Get Custom Chunk Transform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   N                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       CurrentTransform                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FTransform                       OutTransform                                           (ConstParm, Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_Road_Path_C::Get_Custom_Chunk_Transform(int32 N, const struct FTransform& CurrentTransform, const struct FTransform* OutTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "Get Custom Chunk Transform");

	Params::BP_Road_Path_C_Get_Custom_Chunk_Transform Parms{};

	Parms.N = N;
	Parms.CurrentTransform = std::move(CurrentTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);
}


// Function BP_Road_Path.BP_Road_Path_C.Transform to Point
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       InTransform                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// bool                                    bAdd                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform ABP_Road_Path_C::Transform_to_Point(const struct FTransform& InTransform, bool bAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "Transform to Point");

	Params::BP_Road_Path_C_Transform_to_Point Parms{};

	Parms.InTransform = std::move(InTransform);
	Parms.bAdd = bAdd;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Road_Path.BP_Road_Path_C.Correct Chunk Size
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Chunk                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CorrectedChunkSize                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Road_Path_C::Correct_Chunk_Size(float Length, float Chunk, float* CorrectedChunkSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "Correct Chunk Size");

	Params::BP_Road_Path_C_Correct_Chunk_Size Parms{};

	Parms.Length = Length;
	Parms.Chunk = Chunk;

	UObject::ProcessEvent(Func, &Parms);

	if (CorrectedChunkSize != nullptr)
		*CorrectedChunkSize = Parms.CorrectedChunkSize;
}


// Function BP_Road_Path.BP_Road_Path_C.Propagate Changes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Road_Path_C::Propagate_Changes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "Propagate Changes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Road_Path.BP_Road_Path_C.GetUpAxis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

const struct FVector ABP_Road_Path_C::GetUpAxis()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "GetUpAxis");

	Params::BP_Road_Path_C_GetUpAxis Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Road_Path.BP_Road_Path_C.SetDeltaRotator
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       InTransform                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform ABP_Road_Path_C::SetDeltaRotator(const struct FTransform& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "SetDeltaRotator");

	Params::BP_Road_Path_C_SetDeltaRotator Parms{};

	Parms.InTransform = std::move(InTransform);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Road_Path.BP_Road_Path_C.SetMaterial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Primitive                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Road_Path_C::SetMaterial(class UPrimitiveComponent* Primitive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "SetMaterial");

	Params::BP_Road_Path_C_SetMaterial Parms{};

	Parms.Primitive = Primitive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Road_Path.BP_Road_Path_C.CollisionSetup_Water
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              SpawnedMesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Road_Path_C::CollisionSetup_Water(class UPrimitiveComponent* SpawnedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "CollisionSetup_Water");

	Params::BP_Road_Path_C_CollisionSetup_Water Parms{};

	Parms.SpawnedMesh = SpawnedMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Road_Path.BP_Road_Path_C.CollisionSetup_Other
// (Private, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UStaticMesh*                      InStaticMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              SpawnedMesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Road_Path_C::CollisionSetup_Other(class UStaticMesh* InStaticMesh, class UPrimitiveComponent* SpawnedMesh) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Road_Path_C", "CollisionSetup_Other");

	Params::BP_Road_Path_C_CollisionSetup_Other Parms{};

	Parms.InStaticMesh = InStaticMesh;
	Parms.SpawnedMesh = SpawnedMesh;

	UObject::ProcessEvent(Func, &Parms);
}

}

