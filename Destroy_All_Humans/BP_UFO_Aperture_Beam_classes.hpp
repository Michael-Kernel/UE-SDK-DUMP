#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UFO_Aperture_Beam

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UFO_Aperture_Beam.BP_UFO_Aperture_Beam_C
// 0x00A8 (0x04F0 - 0x0448)
class ABP_UFO_Aperture_Beam_C final : public ABFGEffectActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0448(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio_Hatch;                                       // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PFX_ApertureSteam;                                 // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PFX_SteamFlow;                                     // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_UFOSteam;                                       // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder;                                          // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Ripple_Origin;                                     // 0x0490(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynLF_beam;                                        // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynMat_beam;                                       // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Current_blendValue;                                // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Opening;                                           // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x04B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B6[0x2];                                      // 0x04B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Target_blendValue;                                 // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Current_openSpeed;                                 // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scan_openSpeed;                                    // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Current_closeSpeed;                                // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scan_closeSpeed;                                   // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Aperture_openSpeed;                                // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Aperture_closeSpeed;                               // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstOpen;                                         // 0x04D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FirstClose;                                        // 0x04D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Preview_active;                                    // 0x04D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_4D7[0x1];                                      // 0x04D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Dyn_Mat_Steam;                                     // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Preview_blend_value;                               // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Emissive_Multiplier;                               // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Opening_target_blend_value;                        // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cinematic_emissive_tweak;                          // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Open_Aperture();
	void Close_Aperture();
	void Start_scanning();
	void Stop_scanning();
	void OnTriggerEffect();
	void OnStopEffect();
	void ExecuteUbergraph_BP_UFO_Aperture_Beam(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UFO_Aperture_Beam_C">();
	}
	static class ABP_UFO_Aperture_Beam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UFO_Aperture_Beam_C>();
	}
};
static_assert(alignof(ABP_UFO_Aperture_Beam_C) == 0x000008, "Wrong alignment on ABP_UFO_Aperture_Beam_C");
static_assert(sizeof(ABP_UFO_Aperture_Beam_C) == 0x0004F0, "Wrong size on ABP_UFO_Aperture_Beam_C");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, UberGraphFrame) == 0x000448, "Member 'ABP_UFO_Aperture_Beam_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Audio_Hatch) == 0x000450, "Member 'ABP_UFO_Aperture_Beam_C::Audio_Hatch' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, PFX_ApertureSteam) == 0x000458, "Member 'ABP_UFO_Aperture_Beam_C::PFX_ApertureSteam' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, PFX_SteamFlow) == 0x000460, "Member 'ABP_UFO_Aperture_Beam_C::PFX_SteamFlow' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, SM_UFOSteam) == 0x000468, "Member 'ABP_UFO_Aperture_Beam_C::SM_UFOSteam' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, SpotLight) == 0x000470, "Member 'ABP_UFO_Aperture_Beam_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, PointLight) == 0x000478, "Member 'ABP_UFO_Aperture_Beam_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Cylinder) == 0x000480, "Member 'ABP_UFO_Aperture_Beam_C::Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, DefaultSceneRoot) == 0x000488, "Member 'ABP_UFO_Aperture_Beam_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Ripple_Origin) == 0x000490, "Member 'ABP_UFO_Aperture_Beam_C::Ripple_Origin' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, DynLF_beam) == 0x0004A0, "Member 'ABP_UFO_Aperture_Beam_C::DynLF_beam' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, DynMat_beam) == 0x0004A8, "Member 'ABP_UFO_Aperture_Beam_C::DynMat_beam' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Current_blendValue) == 0x0004B0, "Member 'ABP_UFO_Aperture_Beam_C::Current_blendValue' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Opening) == 0x0004B4, "Member 'ABP_UFO_Aperture_Beam_C::Opening' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Active) == 0x0004B5, "Member 'ABP_UFO_Aperture_Beam_C::Active' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Target_blendValue) == 0x0004B8, "Member 'ABP_UFO_Aperture_Beam_C::Target_blendValue' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Current_openSpeed) == 0x0004BC, "Member 'ABP_UFO_Aperture_Beam_C::Current_openSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Scan_openSpeed) == 0x0004C0, "Member 'ABP_UFO_Aperture_Beam_C::Scan_openSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Current_closeSpeed) == 0x0004C4, "Member 'ABP_UFO_Aperture_Beam_C::Current_closeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Scan_closeSpeed) == 0x0004C8, "Member 'ABP_UFO_Aperture_Beam_C::Scan_closeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Aperture_openSpeed) == 0x0004CC, "Member 'ABP_UFO_Aperture_Beam_C::Aperture_openSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Aperture_closeSpeed) == 0x0004D0, "Member 'ABP_UFO_Aperture_Beam_C::Aperture_closeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, FirstOpen) == 0x0004D4, "Member 'ABP_UFO_Aperture_Beam_C::FirstOpen' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, FirstClose) == 0x0004D5, "Member 'ABP_UFO_Aperture_Beam_C::FirstClose' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Preview_active) == 0x0004D6, "Member 'ABP_UFO_Aperture_Beam_C::Preview_active' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Dyn_Mat_Steam) == 0x0004D8, "Member 'ABP_UFO_Aperture_Beam_C::Dyn_Mat_Steam' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Preview_blend_value) == 0x0004E0, "Member 'ABP_UFO_Aperture_Beam_C::Preview_blend_value' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Emissive_Multiplier) == 0x0004E4, "Member 'ABP_UFO_Aperture_Beam_C::Emissive_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Opening_target_blend_value) == 0x0004E8, "Member 'ABP_UFO_Aperture_Beam_C::Opening_target_blend_value' has a wrong offset!");
static_assert(offsetof(ABP_UFO_Aperture_Beam_C, Cinematic_emissive_tweak) == 0x0004EC, "Member 'ABP_UFO_Aperture_Beam_C::Cinematic_emissive_tweak' has a wrong offset!");

}

