#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ApexDestruction

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ApexDestruction_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class ApexDestruction.DestructibleActor
// 0x0028 (0x0400 - 0x03D8)
class ADestructibleActor final : public AActor
{
public:
	class UDestructibleComponent*                 DestructibleComponent;                             // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bAffectNavigation : 1;                             // 0x03E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnActorFracture;                                   // 0x03E8(0x0018)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructibleActor">();
	}
	static class ADestructibleActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADestructibleActor>();
	}
};
static_assert(alignof(ADestructibleActor) == 0x000008, "Wrong alignment on ADestructibleActor");
static_assert(sizeof(ADestructibleActor) == 0x000400, "Wrong size on ADestructibleActor");
static_assert(offsetof(ADestructibleActor, DestructibleComponent) == 0x0003D8, "Member 'ADestructibleActor::DestructibleComponent' has a wrong offset!");
static_assert(offsetof(ADestructibleActor, OnActorFracture) == 0x0003E8, "Member 'ADestructibleActor::OnActorFracture' has a wrong offset!");

// Class ApexDestruction.DestructibleComponent
// 0x00F0 (0x08E0 - 0x07F0)
class UDestructibleComponent final : public USkinnedMeshComponent
{
public:
	uint8                                         Pad_7F0[0x8];                                      // 0x07F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bFractureEffectOverride : 1;                       // 0x07F8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_7F9[0x7];                                      // 0x07F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFractureEffect>                FractureEffects;                                   // 0x0800(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableHardSleeping;                               // 0x0810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_811[0x3];                                      // 0x0811(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LargeChunkThreshold;                               // 0x0814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_818[0x10];                                     // 0x0818(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnComponentFracture;                               // 0x0828(0x0018)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_840[0xA0];                                     // 0x0840(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
	void ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	class UDestructibleMesh* GetDestructibleMesh();
	void SetDestructibleMesh(class UDestructibleMesh* NewMesh);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructibleComponent">();
	}
	static class UDestructibleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructibleComponent>();
	}
};
static_assert(alignof(UDestructibleComponent) == 0x000008, "Wrong alignment on UDestructibleComponent");
static_assert(sizeof(UDestructibleComponent) == 0x0008E0, "Wrong size on UDestructibleComponent");
static_assert(offsetof(UDestructibleComponent, FractureEffects) == 0x000800, "Member 'UDestructibleComponent::FractureEffects' has a wrong offset!");
static_assert(offsetof(UDestructibleComponent, bEnableHardSleeping) == 0x000810, "Member 'UDestructibleComponent::bEnableHardSleeping' has a wrong offset!");
static_assert(offsetof(UDestructibleComponent, LargeChunkThreshold) == 0x000814, "Member 'UDestructibleComponent::LargeChunkThreshold' has a wrong offset!");
static_assert(offsetof(UDestructibleComponent, OnComponentFracture) == 0x000828, "Member 'UDestructibleComponent::OnComponentFracture' has a wrong offset!");

// Class ApexDestruction.DestructibleFractureSettings
// 0x0090 (0x00B8 - 0x0028)
class UDestructibleFractureSettings final : public UObject
{
public:
	int32                                         CellSiteCount;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFractureMaterial                      FractureMaterialDesc;                              // 0x002C(0x0024)(Edit, Transient, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        VoronoiSites;                                      // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OriginalSubmeshCount;                              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDestructibleChunkParameters>   ChunkParameters;                                   // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x28];                                      // 0x0090(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructibleFractureSettings">();
	}
	static class UDestructibleFractureSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructibleFractureSettings>();
	}
};
static_assert(alignof(UDestructibleFractureSettings) == 0x000008, "Wrong alignment on UDestructibleFractureSettings");
static_assert(sizeof(UDestructibleFractureSettings) == 0x0000B8, "Wrong size on UDestructibleFractureSettings");
static_assert(offsetof(UDestructibleFractureSettings, CellSiteCount) == 0x000028, "Member 'UDestructibleFractureSettings::CellSiteCount' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, FractureMaterialDesc) == 0x00002C, "Member 'UDestructibleFractureSettings::FractureMaterialDesc' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, RandomSeed) == 0x000050, "Member 'UDestructibleFractureSettings::RandomSeed' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, VoronoiSites) == 0x000058, "Member 'UDestructibleFractureSettings::VoronoiSites' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, OriginalSubmeshCount) == 0x000068, "Member 'UDestructibleFractureSettings::OriginalSubmeshCount' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, Materials) == 0x000070, "Member 'UDestructibleFractureSettings::Materials' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, ChunkParameters) == 0x000080, "Member 'UDestructibleFractureSettings::ChunkParameters' has a wrong offset!");

// Class ApexDestruction.DestructibleMesh
// 0x00A0 (0x03F8 - 0x0358)
class UDestructibleMesh final : public USkeletalMesh
{
public:
	struct FDestructibleParameters                DefaultDestructibleParameters;                     // 0x0358(0x0088)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FFractureEffect>                FractureEffects;                                   // 0x03E0(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F0[0x8];                                      // 0x03F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructibleMesh">();
	}
	static class UDestructibleMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructibleMesh>();
	}
};
static_assert(alignof(UDestructibleMesh) == 0x000008, "Wrong alignment on UDestructibleMesh");
static_assert(sizeof(UDestructibleMesh) == 0x0003F8, "Wrong size on UDestructibleMesh");
static_assert(offsetof(UDestructibleMesh, DefaultDestructibleParameters) == 0x000358, "Member 'UDestructibleMesh::DefaultDestructibleParameters' has a wrong offset!");
static_assert(offsetof(UDestructibleMesh, FractureEffects) == 0x0003E0, "Member 'UDestructibleMesh::FractureEffects' has a wrong offset!");

}

