#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPW_HUD_Quest_Timer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPW_HUD_Quest_Timer.BPW_HUD_Quest_Timer_C.UpdateQuestManagerReference
// 0x0028 (0x0028 - 0x0000)
struct BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABFGGameState*                          K2Node_DynamicCast_AsBFGGame_State;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGQuest_Manager*                      CallFunc_GetQuestManager_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference) == 0x000008, "Wrong alignment on BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference");
static_assert(sizeof(BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference) == 0x000028, "Wrong size on BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference, K2Node_DynamicCast_AsBFGGame_State) == 0x000010, "Member 'BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference::K2Node_DynamicCast_AsBFGGame_State' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference, CallFunc_GetQuestManager_ReturnValue) == 0x000020, "Member 'BPW_HUD_Quest_Timer_C_UpdateQuestManagerReference::CallFunc_GetQuestManager_ReturnValue' has a wrong offset!");

// Function BPW_HUD_Quest_Timer.BPW_HUD_Quest_Timer_C.UpdateTimers
// 0x0218 (0x0218 - 0x0000)
struct BPW_HUD_Quest_Timer_C_UpdateTimers final
{
public:
	TArray<class UBFGQuest_Timer*>                Timers__all_;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	float                                         Time_left__ms_;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGQuest_Timer*                        LocalTimer;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   LocalText;                                         // 0x0020(0x0018)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBFGQuest_Timer*                        CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0088(0x0028)()
	bool                                          CallFunc_IsHUDVisible_ReturnValue;                 // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_GetRemainingTimespan_ReturnValue;         // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalMilliseconds_ReturnValue;         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_GetRemainingTimespan_ReturnValue1;        // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue1;                 // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_AsTimespan_Timespan_ReturnValue;          // 0x00D8(0x0018)()
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0100(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0140(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0160(0x0040)(HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData2;             // 0x01A8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01E8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01F8(0x0018)()
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_HUD_Quest_Timer_C_UpdateTimers) == 0x000008, "Wrong alignment on BPW_HUD_Quest_Timer_C_UpdateTimers");
static_assert(sizeof(BPW_HUD_Quest_Timer_C_UpdateTimers) == 0x000218, "Wrong size on BPW_HUD_Quest_Timer_C_UpdateTimers");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, Timers__all_) == 0x000000, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::Timers__all_' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, Time_left__ms_) == 0x000010, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::Time_left__ms_' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, LocalTimer) == 0x000018, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::LocalTimer' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, LocalText) == 0x000020, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::LocalText' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_Array_Get_Item) == 0x000048, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, Temp_byte_Variable) == 0x000058, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000059, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00005A, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_BooleanAND_ReturnValue) == 0x00005B, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_TextIsEmpty_ReturnValue) == 0x00005C, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_Not_PreBool_ReturnValue) == 0x00005D, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_IsAnimationPlaying_ReturnValue) == 0x00005E, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_Not_PreBool_ReturnValue1) == 0x00005F, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_BooleanAND_ReturnValue1) == 0x000060, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_PlayAnimation_ReturnValue) == 0x000068, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, Temp_byte_Variable1) == 0x000070, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_SelectColor_ReturnValue) == 0x000074, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, K2Node_MakeStruct_SlateColor) == 0x000088, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_IsHUDVisible_ReturnValue) == 0x0000B0, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_IsHUDVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_GetRemainingTimespan_ReturnValue) == 0x0000B8, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_GetRemainingTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_GetTotalMilliseconds_ReturnValue) == 0x0000C0, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_GetTotalMilliseconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_GetRemainingTimespan_ReturnValue1) == 0x0000C8, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_GetRemainingTimespan_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_TextIsEmpty_ReturnValue1) == 0x0000D0, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_TextIsEmpty_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_AsTimespan_Timespan_ReturnValue) == 0x0000D8, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_AsTimespan_Timespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_SelectString_ReturnValue) == 0x0000F0, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, K2Node_MakeStruct_FormatArgumentData) == 0x000100, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_Conv_StringToText_ReturnValue) == 0x000140, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, Temp_bool_Variable) == 0x000158, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, K2Node_MakeStruct_FormatArgumentData1) == 0x000160, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, K2Node_Select_Default) == 0x0001A0, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, K2Node_MakeStruct_FormatArgumentData2) == 0x0001A8, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::K2Node_MakeStruct_FormatArgumentData2' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, K2Node_MakeArray_Array) == 0x0001E8, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_Format_ReturnValue) == 0x0001F8, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_UpdateTimers, CallFunc_FMin_ReturnValue) == 0x000210, "Member 'BPW_HUD_Quest_Timer_C_UpdateTimers::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function BPW_HUD_Quest_Timer.BPW_HUD_Quest_Timer_C.Tick
// 0x003C (0x003C - 0x0000)
struct BPW_HUD_Quest_Timer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_HUD_Quest_Timer_C_Tick) == 0x000004, "Wrong alignment on BPW_HUD_Quest_Timer_C_Tick");
static_assert(sizeof(BPW_HUD_Quest_Timer_C_Tick) == 0x00003C, "Wrong size on BPW_HUD_Quest_Timer_C_Tick");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_Tick, MyGeometry) == 0x000000, "Member 'BPW_HUD_Quest_Timer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_Tick, InDeltaTime) == 0x000038, "Member 'BPW_HUD_Quest_Timer_C_Tick::InDeltaTime' has a wrong offset!");

// Function BPW_HUD_Quest_Timer.BPW_HUD_Quest_Timer_C.ExecuteUbergraph_BPW_HUD_Quest_Timer
// 0x0060 (0x0060 - 0x0000)
struct BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBFGQuest_Timer*>                CallFunc_GetRunningQuestTimers__aTimersOut;        // 0x0048(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_IsGamePaused_ReturnValue;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer) == 0x000008, "Wrong alignment on BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer");
static_assert(sizeof(BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer) == 0x000060, "Wrong size on BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer, EntryPoint) == 0x000000, "Member 'BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer, K2Node_Event_MyGeometry) == 0x000004, "Member 'BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer, CallFunc_GetRunningQuestTimers__aTimersOut) == 0x000048, "Member 'BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer::CallFunc_GetRunningQuestTimers__aTimersOut' has a wrong offset!");
static_assert(offsetof(BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer, CallFunc_IsGamePaused_ReturnValue) == 0x000058, "Member 'BPW_HUD_Quest_Timer_C_ExecuteUbergraph_BPW_HUD_Quest_Timer::CallFunc_IsGamePaused_ReturnValue' has a wrong offset!");

}

