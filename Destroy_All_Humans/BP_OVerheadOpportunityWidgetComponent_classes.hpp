#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OVerheadOpportunityWidgetComponent

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "BFGCore_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// DynamicClass BP_OVerheadOpportunityWidgetComponent.BP_OverheadOpportunityWidgetComponent_C
// 0x0260 (0x0AE0 - 0x0880)
class UBP_OverheadOpportunityWidgetComponent_C final : public UBFGActorComponent_OpportunityComponent
{
public:
	bool                                          IsEnabled;                                         // 0x0880(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLightweight_;                                    // 0x0881(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled_;                                          // 0x0882(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowArrow;                                         // 0x0883(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnemyMarker_;                                    // 0x0884(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowIcon;                                          // 0x0885(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowText;                                          // 0x0886(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowRadarMarker_;                                  // 0x0887(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            OpportunityBrush;                                  // 0x0888(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   InteractDisplayText;                               // 0x0910(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 InteractDecoratorString;                           // 0x0928(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeathPersistant_;                                // 0x0938(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPKPersistant_;                                   // 0x0939(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayer_;                                         // 0x093A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LinkToMentallyInteractable;                        // 0x093B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayRange;                                      // 0x093C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorComponent_ObjectiveMarkerScreen* QuestMarkerRef;                                    // 0x0940(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDataAsset_RadarObjectStaticInfo*    OriginalRadarInfo;                                 // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGAgentInstanceOpportunityData       K2Node_Event__data;                                // 0x0950(0x00C8)(Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	struct FBFGAgentInstanceOpportunityData       K2Node_MakeStruct_BFGAgentInstanceOpportunityData; // 0x0A18(0x00C8)(Transient, DuplicateTransient, NativeAccessSpecifierPublic)

public:
	void Action__DelegateSignature();
	void CreateWidgetInternals();
	void DestroyWidgetInternals();
	void EnableOnScreenMarker(bool bpp__InEnable__pf);
	void Get_ActivateArrow(bool* bpp__Out__pf);
	void Get_ActivateIcon(bool* bpp__Out__pf);
	void Get_ActivateRadarMarker(bool* bpp__Out__pf);
	void Get_ActivateText(bool* bpp__Out__pf);
	void Get_DisplayRange(float* bpp__Out__pf);
	void Get_Enabled(bool* bpp__Out__pf);
	void Get_InteractDecoratorString(class FString* bpp__Out__pf);
	void Get_InteractDisplayText(class FText* bpp__Out__pf);
	void Get_IsDeathPersistant(bool* bpp__Out__pf);
	void Get_IsEnemyMarker(bool* bpp__Out__pf);
	void Get_IsInSaucer(bool* bpp__IsInSaucer__pf);
	void Get_IsPKPersistant(bool* bpp__Out__pf);
	void Get_IsPlayer(bool* bpp__Out__pf);
	void Get_LinkToMentallyInteractable(bool* bpp__LinkToMentallyInteractable__pf);
	void Get_OverrideBrush(struct FSlateBrush* bpp__Out__pf);
	bool HasValidTarget();
	void HideWidget_Internal();
	bool IsAbilityTarget();
	bool IsDead();
	bool IsInRange();
	bool IsOffScreen();
	bool IsPKed();
	bool IsWeaponTarget();
	void OnMarkerDied();
	void PerformExpensiveUpdate();
	void ReceiveBeginPlay();
	void ReleaseRadarInfo();
	void SetRadarInfo();
	bool ShouldWidgetBeVisible_();
	void ShowWidget_Internal();
	void TryEnsureQuestMarkerReference();
	void UpdateWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_OverheadOpportunityWidgetComponent_C">();
	}
	static class UBP_OverheadOpportunityWidgetComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_OverheadOpportunityWidgetComponent_C>();
	}
};
static_assert(alignof(UBP_OverheadOpportunityWidgetComponent_C) == 0x000008, "Wrong alignment on UBP_OverheadOpportunityWidgetComponent_C");
static_assert(sizeof(UBP_OverheadOpportunityWidgetComponent_C) == 0x000AE0, "Wrong size on UBP_OverheadOpportunityWidgetComponent_C");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, IsEnabled) == 0x000880, "Member 'UBP_OverheadOpportunityWidgetComponent_C::IsEnabled' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, IsLightweight_) == 0x000881, "Member 'UBP_OverheadOpportunityWidgetComponent_C::IsLightweight_' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, Enabled_) == 0x000882, "Member 'UBP_OverheadOpportunityWidgetComponent_C::Enabled_' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, ShowArrow) == 0x000883, "Member 'UBP_OverheadOpportunityWidgetComponent_C::ShowArrow' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, IsEnemyMarker_) == 0x000884, "Member 'UBP_OverheadOpportunityWidgetComponent_C::IsEnemyMarker_' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, ShowIcon) == 0x000885, "Member 'UBP_OverheadOpportunityWidgetComponent_C::ShowIcon' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, ShowText) == 0x000886, "Member 'UBP_OverheadOpportunityWidgetComponent_C::ShowText' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, ShowRadarMarker_) == 0x000887, "Member 'UBP_OverheadOpportunityWidgetComponent_C::ShowRadarMarker_' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, OpportunityBrush) == 0x000888, "Member 'UBP_OverheadOpportunityWidgetComponent_C::OpportunityBrush' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, InteractDisplayText) == 0x000910, "Member 'UBP_OverheadOpportunityWidgetComponent_C::InteractDisplayText' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, InteractDecoratorString) == 0x000928, "Member 'UBP_OverheadOpportunityWidgetComponent_C::InteractDecoratorString' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, IsDeathPersistant_) == 0x000938, "Member 'UBP_OverheadOpportunityWidgetComponent_C::IsDeathPersistant_' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, IsPKPersistant_) == 0x000939, "Member 'UBP_OverheadOpportunityWidgetComponent_C::IsPKPersistant_' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, IsPlayer_) == 0x00093A, "Member 'UBP_OverheadOpportunityWidgetComponent_C::IsPlayer_' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, LinkToMentallyInteractable) == 0x00093B, "Member 'UBP_OverheadOpportunityWidgetComponent_C::LinkToMentallyInteractable' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, DisplayRange) == 0x00093C, "Member 'UBP_OverheadOpportunityWidgetComponent_C::DisplayRange' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, QuestMarkerRef) == 0x000940, "Member 'UBP_OverheadOpportunityWidgetComponent_C::QuestMarkerRef' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, OriginalRadarInfo) == 0x000948, "Member 'UBP_OverheadOpportunityWidgetComponent_C::OriginalRadarInfo' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, K2Node_Event__data) == 0x000950, "Member 'UBP_OverheadOpportunityWidgetComponent_C::K2Node_Event__data' has a wrong offset!");
static_assert(offsetof(UBP_OverheadOpportunityWidgetComponent_C, K2Node_MakeStruct_BFGAgentInstanceOpportunityData) == 0x000A18, "Member 'UBP_OverheadOpportunityWidgetComponent_C::K2Node_MakeStruct_BFGAgentInstanceOpportunityData' has a wrong offset!");

}

