#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Blast

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum Blast.EBlastMeshChunkFlags
// NumValues: 0x0003
enum class EBlastMeshChunkFlags : uint8
{
	None                                     = 0,
	ApproximateBonding                       = 1,
	EBlastMeshChunkFlags_MAX                 = 2,
};

// Enum Blast.EBlastAssetChunkFlags
// NumValues: 0x0003
enum class EBlastAssetChunkFlags : uint8
{
	None                                     = 0,
	Static                                   = 1,
	EBlastAssetChunkFlags_MAX                = 2,
};

// Enum Blast.EBlastDamageResult
// NumValues: 0x0004
enum class EBlastDamageResult : uint8
{
	None                                     = 0,
	Damaged                                  = 1,
	Split                                    = 2,
	EBlastDamageResult_MAX                   = 3,
};

// Enum Blast.eCachedBlastRecordingEvent
// NumValues: 0x0014
enum class ECachedBlastRecordingEvent : uint8
{
	EVENTTYPE_SPAWN_BLASTMESH                = 0,
	EVENTTYPE_DELETE_BLASTMESH               = 1,
	EVENTTYPE_SPAWN_DESTRUCTIONEFFECTS_FLUFF = 2,
	EVENTTYPE_SPAWN_DESTRUCTIONEFFECTS_CLOUDS = 3,
	EVENTTYPE_START_DESTRUCTIONEFFECTS_DETAILS = 4,
	EVENTTYPE_SPAWN_DESTRUCTIONEFFECTS_PROPAGATION = 5,
	EVENTTYPE_SPAWN_RUINS                    = 6,
	EVENTTYPE_CLEAR_SPAWNEDEFFECTS           = 7,
	EVENTTYPE_DISABLE_DETAILS                = 8,
	EVENTTYPE_DISABLE_FLUFF                  = 9,
	EVENTTYPE_DELETE_MAINMESH                = 10,
	EVENTTYPE_TRIGGERDESTRUCTION_TURN_PHYSICALLY = 11,
	EVENTTYPE_SORTEFFECT_CS                  = 12,
	EVENTTYPE_SORTEFFECT_DS                  = 13,
	EVENTTYPE_SORTEFFECT_PS_LASTHITLOCATION  = 14,
	EVENTTYPE_SORTEFFECT_PS                  = 15,
	EVENTTYPE_TRIGGERDESTRUCTION_GEOMETRY_CACHE = 16,
	EVENTTYPE_ADVANCE_INCREMENTAL_UPDATE     = 17,
	EVENTTYPE_FINALIZE_PLAYBACK              = 18,
	EVENTTYPE_MAX                            = 19,
};

// ScriptStruct Blast.BlastStressProperties
// 0x0020 (0x0020 - 0x0000)
struct FBlastStressProperties final
{
public:
	bool                                          bCalculateStress;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Hardness;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        BondIterationsPerFrame;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GraphReductionLevel;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularVsLinearStressFraction;                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplitImpulseStrength;                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyImpactImpulses;                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpactImpulseToStressImpulseFactor;                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlastStressProperties) == 0x000004, "Wrong alignment on FBlastStressProperties");
static_assert(sizeof(FBlastStressProperties) == 0x000020, "Wrong size on FBlastStressProperties");
static_assert(offsetof(FBlastStressProperties, bCalculateStress) == 0x000000, "Member 'FBlastStressProperties::bCalculateStress' has a wrong offset!");
static_assert(offsetof(FBlastStressProperties, Hardness) == 0x000004, "Member 'FBlastStressProperties::Hardness' has a wrong offset!");
static_assert(offsetof(FBlastStressProperties, BondIterationsPerFrame) == 0x000008, "Member 'FBlastStressProperties::BondIterationsPerFrame' has a wrong offset!");
static_assert(offsetof(FBlastStressProperties, GraphReductionLevel) == 0x00000C, "Member 'FBlastStressProperties::GraphReductionLevel' has a wrong offset!");
static_assert(offsetof(FBlastStressProperties, AngularVsLinearStressFraction) == 0x000010, "Member 'FBlastStressProperties::AngularVsLinearStressFraction' has a wrong offset!");
static_assert(offsetof(FBlastStressProperties, SplitImpulseStrength) == 0x000014, "Member 'FBlastStressProperties::SplitImpulseStrength' has a wrong offset!");
static_assert(offsetof(FBlastStressProperties, bApplyImpactImpulses) == 0x000018, "Member 'FBlastStressProperties::bApplyImpactImpulses' has a wrong offset!");
static_assert(offsetof(FBlastStressProperties, ImpactImpulseToStressImpulseFactor) == 0x00001C, "Member 'FBlastStressProperties::ImpactImpulseToStressImpulseFactor' has a wrong offset!");

// ScriptStruct Blast.BondDamageEvent
// 0x002C (0x002C - 0x0000)
struct FBondDamageEvent final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherChunkIndex;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthLeft;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BondArea;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldCentroid;                                     // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldNormal;                                       // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBondDamageEvent) == 0x000004, "Wrong alignment on FBondDamageEvent");
static_assert(sizeof(FBondDamageEvent) == 0x00002C, "Wrong size on FBondDamageEvent");
static_assert(offsetof(FBondDamageEvent, ChunkIndex) == 0x000000, "Member 'FBondDamageEvent::ChunkIndex' has a wrong offset!");
static_assert(offsetof(FBondDamageEvent, OtherChunkIndex) == 0x000004, "Member 'FBondDamageEvent::OtherChunkIndex' has a wrong offset!");
static_assert(offsetof(FBondDamageEvent, Damage) == 0x000008, "Member 'FBondDamageEvent::Damage' has a wrong offset!");
static_assert(offsetof(FBondDamageEvent, HealthLeft) == 0x00000C, "Member 'FBondDamageEvent::HealthLeft' has a wrong offset!");
static_assert(offsetof(FBondDamageEvent, BondArea) == 0x000010, "Member 'FBondDamageEvent::BondArea' has a wrong offset!");
static_assert(offsetof(FBondDamageEvent, WorldCentroid) == 0x000014, "Member 'FBondDamageEvent::WorldCentroid' has a wrong offset!");
static_assert(offsetof(FBondDamageEvent, WorldNormal) == 0x000020, "Member 'FBondDamageEvent::WorldNormal' has a wrong offset!");

// ScriptStruct Blast.BlastAssetImportOptions
// 0x0020 (0x0020 - 0x0000)
struct FBlastAssetImportOptions final
{
public:
	class FName                                   RootName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilePath                              SkeletalMeshPath;                                  // 0x0008(0x0010)(Edit, Transient, NativeAccessSpecifierPublic)
	bool                                          bImportCollisionData;                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlastAssetImportOptions) == 0x000008, "Wrong alignment on FBlastAssetImportOptions");
static_assert(sizeof(FBlastAssetImportOptions) == 0x000020, "Wrong size on FBlastAssetImportOptions");
static_assert(offsetof(FBlastAssetImportOptions, RootName) == 0x000000, "Member 'FBlastAssetImportOptions::RootName' has a wrong offset!");
static_assert(offsetof(FBlastAssetImportOptions, SkeletalMeshPath) == 0x000008, "Member 'FBlastAssetImportOptions::SkeletalMeshPath' has a wrong offset!");
static_assert(offsetof(FBlastAssetImportOptions, bImportCollisionData) == 0x000018, "Member 'FBlastAssetImportOptions::bImportCollisionData' has a wrong offset!");

// ScriptStruct Blast.BlastFractureToolData
// 0x0070 (0x0070 - 0x0000)
struct FBlastFractureToolData final
{
public:
	TArray<uint8>                                 Vertices;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Edges;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Faces;                                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                VerticesOffset;                                    // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                EdgesOffset;                                       // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                FacesOffset;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EBlastMeshChunkFlags>                  ChunkFlags;                                        // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlastFractureToolData) == 0x000008, "Wrong alignment on FBlastFractureToolData");
static_assert(sizeof(FBlastFractureToolData) == 0x000070, "Wrong size on FBlastFractureToolData");
static_assert(offsetof(FBlastFractureToolData, Vertices) == 0x000000, "Member 'FBlastFractureToolData::Vertices' has a wrong offset!");
static_assert(offsetof(FBlastFractureToolData, Edges) == 0x000010, "Member 'FBlastFractureToolData::Edges' has a wrong offset!");
static_assert(offsetof(FBlastFractureToolData, Faces) == 0x000020, "Member 'FBlastFractureToolData::Faces' has a wrong offset!");
static_assert(offsetof(FBlastFractureToolData, VerticesOffset) == 0x000030, "Member 'FBlastFractureToolData::VerticesOffset' has a wrong offset!");
static_assert(offsetof(FBlastFractureToolData, EdgesOffset) == 0x000040, "Member 'FBlastFractureToolData::EdgesOffset' has a wrong offset!");
static_assert(offsetof(FBlastFractureToolData, FacesOffset) == 0x000050, "Member 'FBlastFractureToolData::FacesOffset' has a wrong offset!");
static_assert(offsetof(FBlastFractureToolData, ChunkFlags) == 0x000060, "Member 'FBlastFractureToolData::ChunkFlags' has a wrong offset!");

// ScriptStruct Blast.ChunkDamageEvent
// 0x0014 (0x0014 - 0x0000)
struct FChunkDamageEvent final
{
public:
	int32                                         ChunkIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldCentroid;                                     // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChunkDamageEvent) == 0x000004, "Wrong alignment on FChunkDamageEvent");
static_assert(sizeof(FChunkDamageEvent) == 0x000014, "Wrong size on FChunkDamageEvent");
static_assert(offsetof(FChunkDamageEvent, ChunkIndex) == 0x000000, "Member 'FChunkDamageEvent::ChunkIndex' has a wrong offset!");
static_assert(offsetof(FChunkDamageEvent, Damage) == 0x000004, "Member 'FChunkDamageEvent::Damage' has a wrong offset!");
static_assert(offsetof(FChunkDamageEvent, WorldCentroid) == 0x000008, "Member 'FChunkDamageEvent::WorldCentroid' has a wrong offset!");

// ScriptStruct Blast.BlastMaterial
// 0x0010 (0x0010 - 0x0000)
struct FBlastMaterial final
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDamageThreshold;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageThreshold;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateHitEventsForLeafActors;                   // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlastMaterial) == 0x000004, "Wrong alignment on FBlastMaterial");
static_assert(sizeof(FBlastMaterial) == 0x000010, "Wrong size on FBlastMaterial");
static_assert(offsetof(FBlastMaterial, Health) == 0x000000, "Member 'FBlastMaterial::Health' has a wrong offset!");
static_assert(offsetof(FBlastMaterial, MinDamageThreshold) == 0x000004, "Member 'FBlastMaterial::MinDamageThreshold' has a wrong offset!");
static_assert(offsetof(FBlastMaterial, MaxDamageThreshold) == 0x000008, "Member 'FBlastMaterial::MaxDamageThreshold' has a wrong offset!");
static_assert(offsetof(FBlastMaterial, bGenerateHitEventsForLeafActors) == 0x00000C, "Member 'FBlastMaterial::bGenerateHitEventsForLeafActors' has a wrong offset!");

// ScriptStruct Blast.BlastExtendedStructureComponent
// 0x0070 (0x0070 - 0x0000)
struct FBlastExtendedStructureComponent final
{
public:
	class UBlastMeshComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  GUIDAtMerge;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformAtMerge;                                  // 0x0020(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChunkIDs;                                          // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     LastActorTransforms;                               // 0x0060(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlastExtendedStructureComponent) == 0x000010, "Wrong alignment on FBlastExtendedStructureComponent");
static_assert(sizeof(FBlastExtendedStructureComponent) == 0x000070, "Wrong size on FBlastExtendedStructureComponent");
static_assert(offsetof(FBlastExtendedStructureComponent, MeshComponent) == 0x000000, "Member 'FBlastExtendedStructureComponent::MeshComponent' has a wrong offset!");
static_assert(offsetof(FBlastExtendedStructureComponent, GUIDAtMerge) == 0x000008, "Member 'FBlastExtendedStructureComponent::GUIDAtMerge' has a wrong offset!");
static_assert(offsetof(FBlastExtendedStructureComponent, TransformAtMerge) == 0x000020, "Member 'FBlastExtendedStructureComponent::TransformAtMerge' has a wrong offset!");
static_assert(offsetof(FBlastExtendedStructureComponent, ChunkIDs) == 0x000050, "Member 'FBlastExtendedStructureComponent::ChunkIDs' has a wrong offset!");
static_assert(offsetof(FBlastExtendedStructureComponent, LastActorTransforms) == 0x000060, "Member 'FBlastExtendedStructureComponent::LastActorTransforms' has a wrong offset!");

// ScriptStruct Blast.BlastCookedChunkData
// 0x0008 (0x0008 - 0x0000)
struct FBlastCookedChunkData final
{
public:
	class UBodySetup*                             CookedBodySetup;                                   // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlastCookedChunkData) == 0x000008, "Wrong alignment on FBlastCookedChunkData");
static_assert(sizeof(FBlastCookedChunkData) == 0x000008, "Wrong size on FBlastCookedChunkData");
static_assert(offsetof(FBlastCookedChunkData, CookedBodySetup) == 0x000000, "Member 'FBlastCookedChunkData::CookedBodySetup' has a wrong offset!");

// ScriptStruct Blast.BlastImpactDamageAdvancedProperties
// 0x0014 (0x0014 - 0x0000)
struct FBlastImpactDamageAdvancedProperties final
{
public:
	bool                                          bUseShearDamage;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelocityBased;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfCollision;                                    // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDamageThreshold;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageThreshold;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloffRadiusFactor;                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KinematicsMaxContactImpulse;                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlastImpactDamageAdvancedProperties) == 0x000004, "Wrong alignment on FBlastImpactDamageAdvancedProperties");
static_assert(sizeof(FBlastImpactDamageAdvancedProperties) == 0x000014, "Wrong size on FBlastImpactDamageAdvancedProperties");
static_assert(offsetof(FBlastImpactDamageAdvancedProperties, bUseShearDamage) == 0x000000, "Member 'FBlastImpactDamageAdvancedProperties::bUseShearDamage' has a wrong offset!");
static_assert(offsetof(FBlastImpactDamageAdvancedProperties, bVelocityBased) == 0x000001, "Member 'FBlastImpactDamageAdvancedProperties::bVelocityBased' has a wrong offset!");
static_assert(offsetof(FBlastImpactDamageAdvancedProperties, bSelfCollision) == 0x000002, "Member 'FBlastImpactDamageAdvancedProperties::bSelfCollision' has a wrong offset!");
static_assert(offsetof(FBlastImpactDamageAdvancedProperties, MinDamageThreshold) == 0x000004, "Member 'FBlastImpactDamageAdvancedProperties::MinDamageThreshold' has a wrong offset!");
static_assert(offsetof(FBlastImpactDamageAdvancedProperties, MaxDamageThreshold) == 0x000008, "Member 'FBlastImpactDamageAdvancedProperties::MaxDamageThreshold' has a wrong offset!");
static_assert(offsetof(FBlastImpactDamageAdvancedProperties, DamageFalloffRadiusFactor) == 0x00000C, "Member 'FBlastImpactDamageAdvancedProperties::DamageFalloffRadiusFactor' has a wrong offset!");
static_assert(offsetof(FBlastImpactDamageAdvancedProperties, KinematicsMaxContactImpulse) == 0x000010, "Member 'FBlastImpactDamageAdvancedProperties::KinematicsMaxContactImpulse' has a wrong offset!");

// ScriptStruct Blast.BlastImpactDamageProperties
// 0x0024 (0x0024 - 0x0000)
struct FBlastImpactDamageProperties final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Hardness;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageRadius;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalImpulseFactor;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlastImpactDamageAdvancedProperties   AdvancedSettings;                                  // 0x0010(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlastImpactDamageProperties) == 0x000004, "Wrong alignment on FBlastImpactDamageProperties");
static_assert(sizeof(FBlastImpactDamageProperties) == 0x000024, "Wrong size on FBlastImpactDamageProperties");
static_assert(offsetof(FBlastImpactDamageProperties, bEnabled) == 0x000000, "Member 'FBlastImpactDamageProperties::bEnabled' has a wrong offset!");
static_assert(offsetof(FBlastImpactDamageProperties, Hardness) == 0x000004, "Member 'FBlastImpactDamageProperties::Hardness' has a wrong offset!");
static_assert(offsetof(FBlastImpactDamageProperties, MaxDamageRadius) == 0x000008, "Member 'FBlastImpactDamageProperties::MaxDamageRadius' has a wrong offset!");
static_assert(offsetof(FBlastImpactDamageProperties, PhysicalImpulseFactor) == 0x00000C, "Member 'FBlastImpactDamageProperties::PhysicalImpulseFactor' has a wrong offset!");
static_assert(offsetof(FBlastImpactDamageProperties, AdvancedSettings) == 0x000010, "Member 'FBlastImpactDamageProperties::AdvancedSettings' has a wrong offset!");

// ScriptStruct Blast.BlastDebrisFilter
// 0x0040 (0x0040 - 0x0000)
struct FBlastDebrisFilter final
{
public:
	uint8                                         bUseDebrisDepth : 1;                               // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        DebrisDepth;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseDebrisMaxSeparation : 1;                       // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebrisMaxSeparation;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseDebrisMaxSize : 1;                             // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebrisMaxSize;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseValidBounds : 1;                               // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   ValidBounds;                                       // 0x001C(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DebrisLifetimeMin;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebrisLifetimeMax;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlastDebrisFilter) == 0x000004, "Wrong alignment on FBlastDebrisFilter");
static_assert(sizeof(FBlastDebrisFilter) == 0x000040, "Wrong size on FBlastDebrisFilter");
static_assert(offsetof(FBlastDebrisFilter, DebrisDepth) == 0x000004, "Member 'FBlastDebrisFilter::DebrisDepth' has a wrong offset!");
static_assert(offsetof(FBlastDebrisFilter, DebrisMaxSeparation) == 0x00000C, "Member 'FBlastDebrisFilter::DebrisMaxSeparation' has a wrong offset!");
static_assert(offsetof(FBlastDebrisFilter, DebrisMaxSize) == 0x000014, "Member 'FBlastDebrisFilter::DebrisMaxSize' has a wrong offset!");
static_assert(offsetof(FBlastDebrisFilter, ValidBounds) == 0x00001C, "Member 'FBlastDebrisFilter::ValidBounds' has a wrong offset!");
static_assert(offsetof(FBlastDebrisFilter, DebrisLifetimeMin) == 0x000038, "Member 'FBlastDebrisFilter::DebrisLifetimeMin' has a wrong offset!");
static_assert(offsetof(FBlastDebrisFilter, DebrisLifetimeMax) == 0x00003C, "Member 'FBlastDebrisFilter::DebrisLifetimeMax' has a wrong offset!");

// ScriptStruct Blast.BlastDebrisProperties
// 0x0010 (0x0010 - 0x0000)
struct FBlastDebrisProperties final
{
public:
	TArray<struct FBlastDebrisFilter>             DebrisFilters;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlastDebrisProperties) == 0x000008, "Wrong alignment on FBlastDebrisProperties");
static_assert(sizeof(FBlastDebrisProperties) == 0x000010, "Wrong size on FBlastDebrisProperties");
static_assert(offsetof(FBlastDebrisProperties, DebrisFilters) == 0x000000, "Member 'FBlastDebrisProperties::DebrisFilters' has a wrong offset!");

// ScriptStruct Blast.CachedBlastRecordingEvent
// 0x0040 (0x0040 - 0x0000)
struct FCachedBlastRecordingEvent final
{
public:
	float                                         M_fTime;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECachedBlastRecordingEvent                    M_eType;                                           // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_iCustomData;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iCustomData2;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             M_Transform;                                       // 0x0010(0x0030)(Edit, DisableEditOnTemplate, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedBlastRecordingEvent) == 0x000010, "Wrong alignment on FCachedBlastRecordingEvent");
static_assert(sizeof(FCachedBlastRecordingEvent) == 0x000040, "Wrong size on FCachedBlastRecordingEvent");
static_assert(offsetof(FCachedBlastRecordingEvent, M_fTime) == 0x000000, "Member 'FCachedBlastRecordingEvent::M_fTime' has a wrong offset!");
static_assert(offsetof(FCachedBlastRecordingEvent, M_eType) == 0x000004, "Member 'FCachedBlastRecordingEvent::M_eType' has a wrong offset!");
static_assert(offsetof(FCachedBlastRecordingEvent, M_iCustomData) == 0x000008, "Member 'FCachedBlastRecordingEvent::M_iCustomData' has a wrong offset!");
static_assert(offsetof(FCachedBlastRecordingEvent, M_iCustomData2) == 0x00000C, "Member 'FCachedBlastRecordingEvent::M_iCustomData2' has a wrong offset!");
static_assert(offsetof(FCachedBlastRecordingEvent, M_Transform) == 0x000010, "Member 'FCachedBlastRecordingEvent::M_Transform' has a wrong offset!");

// ScriptStruct Blast.BFGMaterialTable
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FBFGMaterialTable final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBFGMaterialTable) == 0x000008, "Wrong alignment on FBFGMaterialTable");
static_assert(sizeof(FBFGMaterialTable) == 0x0000A0, "Wrong size on FBFGMaterialTable");

// ScriptStruct Blast.CachedBlastRecording
// 0x0010 (0x0010 - 0x0000)
struct FCachedBlastRecording final
{
public:
	class UBlastMesh*                             BlastMesh;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CachedAnimSequence;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedBlastRecording) == 0x000008, "Wrong alignment on FCachedBlastRecording");
static_assert(sizeof(FCachedBlastRecording) == 0x000010, "Wrong size on FCachedBlastRecording");
static_assert(offsetof(FCachedBlastRecording, BlastMesh) == 0x000000, "Member 'FCachedBlastRecording::BlastMesh' has a wrong offset!");
static_assert(offsetof(FCachedBlastRecording, CachedAnimSequence) == 0x000008, "Member 'FCachedBlastRecording::CachedAnimSequence' has a wrong offset!");

}

