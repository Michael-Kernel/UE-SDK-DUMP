#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_Cow_MoveToLocation

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTTask_Cow_MoveToLocation.BTTask_Cow_MoveToLocation_C
// 0x0020 (0x00C0 - 0x00A0)
class UBTTask_Cow_MoveToLocation_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                TargetLocation;                                    // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bListeningToHitEvents;                             // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBlockingHit;                                      // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          AIController;                                      // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTTask_Cow_MoveToLocation(int32 EntryPoint);
	void OnMeshHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ListenToHitEvents(class APawn* ControlledPawn);
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void InitTargetLocation(class AAIController* AIController_0);
	void InitEvent(class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTTask_Cow_MoveToLocation_C">();
	}
	static class UBTTask_Cow_MoveToLocation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_Cow_MoveToLocation_C>();
	}
};
static_assert(alignof(UBTTask_Cow_MoveToLocation_C) == 0x000008, "Wrong alignment on UBTTask_Cow_MoveToLocation_C");
static_assert(sizeof(UBTTask_Cow_MoveToLocation_C) == 0x0000C0, "Wrong size on UBTTask_Cow_MoveToLocation_C");
static_assert(offsetof(UBTTask_Cow_MoveToLocation_C, UberGraphFrame) == 0x0000A0, "Member 'UBTTask_Cow_MoveToLocation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTTask_Cow_MoveToLocation_C, TargetLocation) == 0x0000A8, "Member 'UBTTask_Cow_MoveToLocation_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(UBTTask_Cow_MoveToLocation_C, bListeningToHitEvents) == 0x0000B4, "Member 'UBTTask_Cow_MoveToLocation_C::bListeningToHitEvents' has a wrong offset!");
static_assert(offsetof(UBTTask_Cow_MoveToLocation_C, bBlockingHit) == 0x0000B5, "Member 'UBTTask_Cow_MoveToLocation_C::bBlockingHit' has a wrong offset!");
static_assert(offsetof(UBTTask_Cow_MoveToLocation_C, AIController) == 0x0000B8, "Member 'UBTTask_Cow_MoveToLocation_C::AIController' has a wrong offset!");

}

