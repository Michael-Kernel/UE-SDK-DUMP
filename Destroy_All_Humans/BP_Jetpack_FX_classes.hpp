#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Jetpack_FX

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Jetpack_FX.BP_Jetpack_FX_C
// 0x0030 (0x0408 - 0x03D8)
class ABP_Jetpack_FX_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Inner_Cylinder;                                    // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Outer_Cylinder;                                    // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void Jetpack_unequipped();
	void Jetpack_inactive();
	void Jetpack_glide();
	void Jetpack_full_throttle();
	void ExecuteUbergraph_BP_Jetpack_FX(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Jetpack_FX_C">();
	}
	static class ABP_Jetpack_FX_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Jetpack_FX_C>();
	}
};
static_assert(alignof(ABP_Jetpack_FX_C) == 0x000008, "Wrong alignment on ABP_Jetpack_FX_C");
static_assert(sizeof(ABP_Jetpack_FX_C) == 0x000408, "Wrong size on ABP_Jetpack_FX_C");
static_assert(offsetof(ABP_Jetpack_FX_C, UberGraphFrame) == 0x0003D8, "Member 'ABP_Jetpack_FX_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_FX_C, PointLight) == 0x0003E0, "Member 'ABP_Jetpack_FX_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_FX_C, ParticleSystem) == 0x0003E8, "Member 'ABP_Jetpack_FX_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_FX_C, Inner_Cylinder) == 0x0003F0, "Member 'ABP_Jetpack_FX_C::Inner_Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_FX_C, Outer_Cylinder) == 0x0003F8, "Member 'ABP_Jetpack_FX_C::Outer_Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_Jetpack_FX_C, DefaultSceneRoot) == 0x000400, "Member 'ABP_Jetpack_FX_C::DefaultSceneRoot' has a wrong offset!");

}

