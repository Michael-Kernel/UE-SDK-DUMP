#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPW_Challenge_Panel

#include "Basic.hpp"

#include "BFGCore_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.ExecuteUbergraph_BPW_Challenge_Panel
// 0x0018 (0x0018 - 0x0000)
struct BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBFGChallengeStartingPoint_Visibility         K2Node_Event__eVisibility;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBPW_ChallengePanel_Star_C*>     K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel");
static_assert(sizeof(BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel) == 0x000018, "Wrong size on BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel");
static_assert(offsetof(BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel, EntryPoint) == 0x000000, "Member 'BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel, K2Node_Event__eVisibility) == 0x000005, "Member 'BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel::K2Node_Event__eVisibility' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel, K2Node_MakeArray_Array) == 0x000008, "Member 'BPW_Challenge_Panel_C_ExecuteUbergraph_BPW_Challenge_Panel::K2Node_MakeArray_Array' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.OnPanelVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct BPW_Challenge_Panel_C_OnPanelVisibilityChanged final
{
public:
	EBFGChallengeStartingPoint_Visibility         _eVisibility;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_Challenge_Panel_C_OnPanelVisibilityChanged) == 0x000001, "Wrong alignment on BPW_Challenge_Panel_C_OnPanelVisibilityChanged");
static_assert(sizeof(BPW_Challenge_Panel_C_OnPanelVisibilityChanged) == 0x000001, "Wrong size on BPW_Challenge_Panel_C_OnPanelVisibilityChanged");
static_assert(offsetof(BPW_Challenge_Panel_C_OnPanelVisibilityChanged, _eVisibility) == 0x000000, "Member 'BPW_Challenge_Panel_C_OnPanelVisibilityChanged::_eVisibility' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BPW_Challenge_Panel_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPW_Challenge_Panel_C_PreConstruct) == 0x000001, "Wrong alignment on BPW_Challenge_Panel_C_PreConstruct");
static_assert(sizeof(BPW_Challenge_Panel_C_PreConstruct) == 0x000001, "Wrong size on BPW_Challenge_Panel_C_PreConstruct");
static_assert(offsetof(BPW_Challenge_Panel_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BPW_Challenge_Panel_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.ShowStarDetails
// 0x0038 (0x0038 - 0x0000)
struct BPW_Challenge_Panel_C_ShowStarDetails final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue1;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue1;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue2;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue2;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_Challenge_Panel_C_ShowStarDetails) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_ShowStarDetails");
static_assert(sizeof(BPW_Challenge_Panel_C_ShowStarDetails) == 0x000038, "Wrong size on BPW_Challenge_Panel_C_ShowStarDetails");
static_assert(offsetof(BPW_Challenge_Panel_C_ShowStarDetails, Show) == 0x000000, "Member 'BPW_Challenge_Panel_C_ShowStarDetails::Show' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_ShowStarDetails, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'BPW_Challenge_Panel_C_ShowStarDetails::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_ShowStarDetails, CallFunc_PlayAnimationForward_ReturnValue1) == 0x000010, "Member 'BPW_Challenge_Panel_C_ShowStarDetails::CallFunc_PlayAnimationForward_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_ShowStarDetails, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000018, "Member 'BPW_Challenge_Panel_C_ShowStarDetails::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_ShowStarDetails, CallFunc_PlayAnimationReverse_ReturnValue1) == 0x000020, "Member 'BPW_Challenge_Panel_C_ShowStarDetails::CallFunc_PlayAnimationReverse_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_ShowStarDetails, CallFunc_PlayAnimationReverse_ReturnValue2) == 0x000028, "Member 'BPW_Challenge_Panel_C_ShowStarDetails::CallFunc_PlayAnimationReverse_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_ShowStarDetails, CallFunc_PlayAnimationForward_ReturnValue2) == 0x000030, "Member 'BPW_Challenge_Panel_C_ShowStarDetails::CallFunc_PlayAnimationForward_ReturnValue2' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.ApplyInfo
// 0x0001 (0x0001 - 0x0000)
struct BPW_Challenge_Panel_C_ApplyInfo final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPW_Challenge_Panel_C_ApplyInfo) == 0x000001, "Wrong alignment on BPW_Challenge_Panel_C_ApplyInfo");
static_assert(sizeof(BPW_Challenge_Panel_C_ApplyInfo) == 0x000001, "Wrong size on BPW_Challenge_Panel_C_ApplyInfo");
static_assert(offsetof(BPW_Challenge_Panel_C_ApplyInfo, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BPW_Challenge_Panel_C_ApplyInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.EnsureSoftPointersLoaded
// 0x0160 (0x0160 - 0x0000)
struct BPW_Challenge_Panel_C_EnsureSoftPointersLoaded final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBFGDataAsset_ChallengeInfo_Objective  CallFunc_Array_Get_Item;                           // 0x0010(0x0048)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGQuestSettings*                      CallFunc_GetSettings_ReturnValue;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBFGQuestSettings_ChallengeData        CallFunc_GetChallengeDefaults_ReturnValue;         // 0x0078(0x00D0)(ConstParm)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue1;          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue2;          // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue3;          // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_EnsureSoftPointersLoaded");
static_assert(sizeof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded) == 0x000160, "Wrong size on BPW_Challenge_Panel_C_EnsureSoftPointersLoaded");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, CallFunc_Array_Get_Item) == 0x000010, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000060, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, CallFunc_GetSettings_ReturnValue) == 0x000070, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::CallFunc_GetSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, CallFunc_GetChallengeDefaults_ReturnValue) == 0x000078, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::CallFunc_GetChallengeDefaults_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, CallFunc_LoadAsset_Blocking_ReturnValue1) == 0x000148, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::CallFunc_LoadAsset_Blocking_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, CallFunc_LoadAsset_Blocking_ReturnValue2) == 0x000150, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::CallFunc_LoadAsset_Blocking_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_EnsureSoftPointersLoaded, CallFunc_LoadAsset_Blocking_ReturnValue3) == 0x000158, "Member 'BPW_Challenge_Panel_C_EnsureSoftPointersLoaded::CallFunc_LoadAsset_Blocking_ReturnValue3' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.SetIconAndType
// 0x0178 (0x0178 - 0x0000)
struct BPW_Challenge_Panel_C_SetIconAndType final
{
public:
	class UBFGQuestSettings*                      CallFunc_GetSettings_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBFGQuestSettings_ChallengeData        CallFunc_GetChallengeDefaults_ReturnValue;         // 0x0008(0x00D0)(ConstParm)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_DynamicCast_AsPaper_Sprite;                 // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_MakeBrushFromSprite_ReturnValue;          // 0x00F0(0x0088)()
};
static_assert(alignof(BPW_Challenge_Panel_C_SetIconAndType) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_SetIconAndType");
static_assert(sizeof(BPW_Challenge_Panel_C_SetIconAndType) == 0x000178, "Wrong size on BPW_Challenge_Panel_C_SetIconAndType");
static_assert(offsetof(BPW_Challenge_Panel_C_SetIconAndType, CallFunc_GetSettings_ReturnValue) == 0x000000, "Member 'BPW_Challenge_Panel_C_SetIconAndType::CallFunc_GetSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetIconAndType, CallFunc_GetChallengeDefaults_ReturnValue) == 0x000008, "Member 'BPW_Challenge_Panel_C_SetIconAndType::CallFunc_GetChallengeDefaults_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetIconAndType, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x0000D8, "Member 'BPW_Challenge_Panel_C_SetIconAndType::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetIconAndType, K2Node_DynamicCast_AsPaper_Sprite) == 0x0000E0, "Member 'BPW_Challenge_Panel_C_SetIconAndType::K2Node_DynamicCast_AsPaper_Sprite' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetIconAndType, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BPW_Challenge_Panel_C_SetIconAndType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetIconAndType, CallFunc_MakeBrushFromSprite_ReturnValue) == 0x0000F0, "Member 'BPW_Challenge_Panel_C_SetIconAndType::CallFunc_MakeBrushFromSprite_ReturnValue' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.SetStarDetails
// 0x00D8 (0x00D8 - 0x0000)
struct BPW_Challenge_Panel_C_SetStarDetails final
{
public:
	class UBFGQuestSettings*                      CallFunc_GetSettings_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBFGQuestSettings_ChallengeData        CallFunc_GetChallengeDefaults_ReturnValue;         // 0x0008(0x00D0)(ConstParm)
};
static_assert(alignof(BPW_Challenge_Panel_C_SetStarDetails) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_SetStarDetails");
static_assert(sizeof(BPW_Challenge_Panel_C_SetStarDetails) == 0x0000D8, "Wrong size on BPW_Challenge_Panel_C_SetStarDetails");
static_assert(offsetof(BPW_Challenge_Panel_C_SetStarDetails, CallFunc_GetSettings_ReturnValue) == 0x000000, "Member 'BPW_Challenge_Panel_C_SetStarDetails::CallFunc_GetSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetStarDetails, CallFunc_GetChallengeDefaults_ReturnValue) == 0x000008, "Member 'BPW_Challenge_Panel_C_SetStarDetails::CallFunc_GetChallengeDefaults_ReturnValue' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.SetObjective
// 0x0178 (0x0178 - 0x0000)
struct BPW_Challenge_Panel_C_SetObjective final
{
public:
	class UBFGQuestSettings*                      CallFunc_GetSettings_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBFGQuestSettings_ChallengeData        CallFunc_GetChallengeDefaults_ReturnValue;         // 0x0008(0x00D0)(ConstParm)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_DynamicCast_AsPaper_Sprite;                 // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_MakeBrushFromSprite_ReturnValue;          // 0x00F0(0x0088)()
};
static_assert(alignof(BPW_Challenge_Panel_C_SetObjective) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_SetObjective");
static_assert(sizeof(BPW_Challenge_Panel_C_SetObjective) == 0x000178, "Wrong size on BPW_Challenge_Panel_C_SetObjective");
static_assert(offsetof(BPW_Challenge_Panel_C_SetObjective, CallFunc_GetSettings_ReturnValue) == 0x000000, "Member 'BPW_Challenge_Panel_C_SetObjective::CallFunc_GetSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetObjective, CallFunc_GetChallengeDefaults_ReturnValue) == 0x000008, "Member 'BPW_Challenge_Panel_C_SetObjective::CallFunc_GetChallengeDefaults_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetObjective, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x0000D8, "Member 'BPW_Challenge_Panel_C_SetObjective::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetObjective, K2Node_DynamicCast_AsPaper_Sprite) == 0x0000E0, "Member 'BPW_Challenge_Panel_C_SetObjective::K2Node_DynamicCast_AsPaper_Sprite' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetObjective, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BPW_Challenge_Panel_C_SetObjective::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetObjective, CallFunc_MakeBrushFromSprite_ReturnValue) == 0x0000F0, "Member 'BPW_Challenge_Panel_C_SetObjective::CallFunc_MakeBrushFromSprite_ReturnValue' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.SetTimeLimit
// 0x0088 (0x0088 - 0x0000)
struct BPW_Challenge_Panel_C_SetTimeLimit final
{
public:
	class UBFGQuestSettings*                      CallFunc_GetSettings_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_AsTimespan_Timespan_ReturnValue;          // 0x0008(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0070(0x0018)()
};
static_assert(alignof(BPW_Challenge_Panel_C_SetTimeLimit) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_SetTimeLimit");
static_assert(sizeof(BPW_Challenge_Panel_C_SetTimeLimit) == 0x000088, "Wrong size on BPW_Challenge_Panel_C_SetTimeLimit");
static_assert(offsetof(BPW_Challenge_Panel_C_SetTimeLimit, CallFunc_GetSettings_ReturnValue) == 0x000000, "Member 'BPW_Challenge_Panel_C_SetTimeLimit::CallFunc_GetSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetTimeLimit, CallFunc_AsTimespan_Timespan_ReturnValue) == 0x000008, "Member 'BPW_Challenge_Panel_C_SetTimeLimit::CallFunc_AsTimespan_Timespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetTimeLimit, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'BPW_Challenge_Panel_C_SetTimeLimit::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetTimeLimit, K2Node_MakeArray_Array) == 0x000060, "Member 'BPW_Challenge_Panel_C_SetTimeLimit::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetTimeLimit, CallFunc_Format_ReturnValue) == 0x000070, "Member 'BPW_Challenge_Panel_C_SetTimeLimit::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.Set constraints and optional objectives
// 0x0078 (0x0078 - 0x0000)
struct BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBFGDataAsset_ChallengeInfo_Objective  CallFunc_Array_Get_Item;                           // 0x0010(0x0048)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPW_ChallengePanel_Objective_C*        CallFunc_Create_ReturnValue;                       // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives");
static_assert(sizeof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives) == 0x000078, "Wrong size on BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives");
static_assert(offsetof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives, CallFunc_Array_Get_Item) == 0x000010, "Member 'BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives, CallFunc_GetOwningPlayer_ReturnValue) == 0x000060, "Member 'BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives, CallFunc_Create_ReturnValue) == 0x000068, "Member 'BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000070, "Member 'BPW_Challenge_Panel_C_Set_constraints_and_optional_objectives::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.SetPersonalHighscore
// 0x0238 (0x0238 - 0x0000)
struct BPW_Challenge_Panel_C_SetPersonalHighscore final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPW_ChallengePanel_Star_C*             CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGQuestSettings*                      CallFunc_GetSettings_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBFGQuestSettings_ChallengeData        CallFunc_GetChallengeDefaults_ReturnValue;         // 0x0028(0x00D0)(ConstParm)
	float                                         CallFunc_GetCurrentHighscore_ReturnValue;          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetStarValue_ReturnValue;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           K2Node_DynamicCast_AsPaper_Sprite;                 // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_MakeBrushFromSprite_ReturnValue;          // 0x0120(0x0088)()
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGQuestSettings*                      CallFunc_GetSettings_ReturnValue1;                 // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x01B8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x01D0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0210(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0220(0x0018)()
};
static_assert(alignof(BPW_Challenge_Panel_C_SetPersonalHighscore) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_SetPersonalHighscore");
static_assert(sizeof(BPW_Challenge_Panel_C_SetPersonalHighscore) == 0x000238, "Wrong size on BPW_Challenge_Panel_C_SetPersonalHighscore");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_Array_Get_Item) == 0x000008, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_GetSettings_ReturnValue) == 0x000020, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_GetSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_GetChallengeDefaults_ReturnValue) == 0x000028, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_GetChallengeDefaults_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_GetCurrentHighscore_ReturnValue) == 0x0000F8, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_GetCurrentHighscore_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_GetStarValue_ReturnValue) == 0x0000FC, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_GetStarValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000100, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_Less_IntInt_ReturnValue1) == 0x000108, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, K2Node_DynamicCast_AsPaper_Sprite) == 0x000110, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::K2Node_DynamicCast_AsPaper_Sprite' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, K2Node_DynamicCast_bSuccess) == 0x000118, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_MakeBrushFromSprite_ReturnValue) == 0x000120, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_MakeBrushFromSprite_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_FTrunc_ReturnValue) == 0x0001A8, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_GetSettings_ReturnValue1) == 0x0001B0, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_GetSettings_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_Conv_IntToText_ReturnValue) == 0x0001B8, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, K2Node_MakeStruct_FormatArgumentData) == 0x0001D0, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, K2Node_MakeArray_Array) == 0x000210, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetPersonalHighscore, CallFunc_Format_ReturnValue) == 0x000220, "Member 'BPW_Challenge_Panel_C_SetPersonalHighscore::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.SetReward
// 0x0070 (0x0070 - 0x0000)
struct BPW_Challenge_Panel_C_SetReward final
{
public:
	class UBFGQuestSettings*                      CallFunc_GetSettings_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0058(0x0018)()
};
static_assert(alignof(BPW_Challenge_Panel_C_SetReward) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_SetReward");
static_assert(sizeof(BPW_Challenge_Panel_C_SetReward) == 0x000070, "Wrong size on BPW_Challenge_Panel_C_SetReward");
static_assert(offsetof(BPW_Challenge_Panel_C_SetReward, CallFunc_GetSettings_ReturnValue) == 0x000000, "Member 'BPW_Challenge_Panel_C_SetReward::CallFunc_GetSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetReward, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'BPW_Challenge_Panel_C_SetReward::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetReward, K2Node_MakeArray_Array) == 0x000048, "Member 'BPW_Challenge_Panel_C_SetReward::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_SetReward, CallFunc_Format_ReturnValue) == 0x000058, "Member 'BPW_Challenge_Panel_C_SetReward::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BPW_Challenge_Panel.BPW_Challenge_Panel_C.UpdateVisibility
// 0x0038 (0x0038 - 0x0000)
struct BPW_Challenge_Panel_C_UpdateVisibility final
{
public:
	EBFGChallengeStartingPoint_Visibility         NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue1;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue1;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_Challenge_Panel_C_UpdateVisibility) == 0x000008, "Wrong alignment on BPW_Challenge_Panel_C_UpdateVisibility");
static_assert(sizeof(BPW_Challenge_Panel_C_UpdateVisibility) == 0x000038, "Wrong size on BPW_Challenge_Panel_C_UpdateVisibility");
static_assert(offsetof(BPW_Challenge_Panel_C_UpdateVisibility, NewVisibility) == 0x000000, "Member 'BPW_Challenge_Panel_C_UpdateVisibility::NewVisibility' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_UpdateVisibility, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BPW_Challenge_Panel_C_UpdateVisibility::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_UpdateVisibility, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BPW_Challenge_Panel_C_UpdateVisibility::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_UpdateVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BPW_Challenge_Panel_C_UpdateVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_UpdateVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'BPW_Challenge_Panel_C_UpdateVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_UpdateVisibility, K2Node_SwitchEnum1_CmpSuccess) == 0x000013, "Member 'BPW_Challenge_Panel_C_UpdateVisibility::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_UpdateVisibility, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000018, "Member 'BPW_Challenge_Panel_C_UpdateVisibility::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_UpdateVisibility, CallFunc_PlayAnimationReverse_ReturnValue1) == 0x000020, "Member 'BPW_Challenge_Panel_C_UpdateVisibility::CallFunc_PlayAnimationReverse_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_UpdateVisibility, CallFunc_PlayAnimationForward_ReturnValue) == 0x000028, "Member 'BPW_Challenge_Panel_C_UpdateVisibility::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_Challenge_Panel_C_UpdateVisibility, CallFunc_PlayAnimationForward_ReturnValue1) == 0x000030, "Member 'BPW_Challenge_Panel_C_UpdateVisibility::CallFunc_PlayAnimationForward_ReturnValue1' has a wrong offset!");

}

