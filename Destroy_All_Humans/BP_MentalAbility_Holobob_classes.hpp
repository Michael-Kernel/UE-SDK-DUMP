#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MentalAbility_Holobob

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MentalAbility_Holobob.BP_MentalAbility_Holobob_C
// 0x01B8 (0x04C8 - 0x0310)
class UBP_MentalAbility_Holobob_C final : public UBFGMentalAbility_Holobob
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0310(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   BlackboardVarID;                                   // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPossessing;                                     // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedHeightDifference;                             // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActiveAbility;                                    // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutAnimationTimer;                             // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NonVIPfadeOutDuration;                             // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APostProcessVolume*                     PostProcessVolume;                                 // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FWeightedBlendable>             PostProcessBlendables;                             // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int32>                                 PostProcessIndexList;                              // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UCurveFloat*                            HolobobFadeCurve;                                  // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bpostProcessDisarmed;                              // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ModelSwitchPFX_end;                                // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ModelSwitchPFX_start;                              // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 NewVar_0;                                          // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBFGEffectBlackboard*                   Holobob_BlackB;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBFGActorComponent_Effect*              NewVar_1;                                          // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartDisruptingAbility;                           // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsAbilityDisturbed;                               // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsFakeMaterialOverrided;                          // 0x039A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39B[0x5];                                      // 0x039B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             TargetMeshOriginalMaterial;                        // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             TargetAccessOriginalMaterials;                     // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             TargetWeaponMaterial;                              // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           TargetAccessMesh;                                  // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bIsFakeMeshShaded;                                 // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FFadeMaskTargettMin;                               // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FFadeMaskTargettMax;                               // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FTargetMaskDownSpeed;                              // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VTargetTopColor;                                   // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VBottomColor;                                      // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VFakeDisturbedColor;                               // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VFakeTopColor;                                     // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VInnerOpacity;                                     // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VInnerOpacityDisturbed;                            // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VOutsideOpacity;                                   // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VOutsideOpacityDisturbed;                          // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FCoverOnTopAccessories;                            // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               TargetHoloMaterial;                                // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FakeMaterial;                                      // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerRoot_WorldZ;                                 // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FakeMeshSizeInZ;                                   // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FFake_Mesh_Root_World_Z;                           // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsCortexScanEnabled;                              // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsFakeMaskIsUploaded;                             // 0x0495(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_496[0x2];                                      // 0x0496(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FDepleteLineWorldPos;                              // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FFakeMaskUoSpeed;                                  // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsTargetMaskIsUploaded;                           // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Audio_FreshlyCorrupted;                            // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A2[0x2];                                      // 0x04A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FInflateSizeHolobobPlayer;                         // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BuildUpTimer;                                      // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectDownPercent;                                 // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectUpPercent;                                   // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsWaitingFirstUpdate;                             // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CurrentTarget;                                     // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHolobobing;                                      // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void PFX_ModelSwitch_Start();
	void PFX_ModelSwitch_End();
	void PostProcess_Switcher(bool bEnablePP);
	void PostProcess_Register();
	void SetBlackboardVectorValue();
	void Player_ApplyStencilValue(int32 StencilValue);
	void Target_ApplyStencilValue(int32 StencilValue);
	void UpdateAbilityDressing(float _fDeltaTime);
	void StartedMentalLink();
	void StoppedMentalLink(bool _wasSuccessfull);
	void OnAbilityEffect();
	void ApplyFX_StartDisruptingAbility();
	void ApplyFX_StopDisruptingAbility();
	void OnAbilityEnd();
	void OnRefreshByCortexScan();
	void ExecuteUbergraph_BP_MentalAbility_Holobob(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MentalAbility_Holobob_C">();
	}
	static class UBP_MentalAbility_Holobob_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MentalAbility_Holobob_C>();
	}
};
static_assert(alignof(UBP_MentalAbility_Holobob_C) == 0x000008, "Wrong alignment on UBP_MentalAbility_Holobob_C");
static_assert(sizeof(UBP_MentalAbility_Holobob_C) == 0x0004C8, "Wrong size on UBP_MentalAbility_Holobob_C");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, UberGraphFrame) == 0x000310, "Member 'UBP_MentalAbility_Holobob_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, BlackboardVarID) == 0x000318, "Member 'UBP_MentalAbility_Holobob_C::BlackboardVarID' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bIsPossessing) == 0x000320, "Member 'UBP_MentalAbility_Holobob_C::bIsPossessing' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FixedHeightDifference) == 0x000324, "Member 'UBP_MentalAbility_Holobob_C::FixedHeightDifference' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bActiveAbility) == 0x000328, "Member 'UBP_MentalAbility_Holobob_C::bActiveAbility' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FadeOutAnimationTimer) == 0x00032C, "Member 'UBP_MentalAbility_Holobob_C::FadeOutAnimationTimer' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, NonVIPfadeOutDuration) == 0x000330, "Member 'UBP_MentalAbility_Holobob_C::NonVIPfadeOutDuration' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, PostProcessVolume) == 0x000338, "Member 'UBP_MentalAbility_Holobob_C::PostProcessVolume' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, PostProcessBlendables) == 0x000340, "Member 'UBP_MentalAbility_Holobob_C::PostProcessBlendables' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, PostProcessIndexList) == 0x000350, "Member 'UBP_MentalAbility_Holobob_C::PostProcessIndexList' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, HolobobFadeCurve) == 0x000360, "Member 'UBP_MentalAbility_Holobob_C::HolobobFadeCurve' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bpostProcessDisarmed) == 0x000368, "Member 'UBP_MentalAbility_Holobob_C::bpostProcessDisarmed' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, ModelSwitchPFX_end) == 0x000370, "Member 'UBP_MentalAbility_Holobob_C::ModelSwitchPFX_end' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, ModelSwitchPFX_start) == 0x000378, "Member 'UBP_MentalAbility_Holobob_C::ModelSwitchPFX_start' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, NewVar_0) == 0x000380, "Member 'UBP_MentalAbility_Holobob_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, Holobob_BlackB) == 0x000388, "Member 'UBP_MentalAbility_Holobob_C::Holobob_BlackB' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, NewVar_1) == 0x000390, "Member 'UBP_MentalAbility_Holobob_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bStartDisruptingAbility) == 0x000398, "Member 'UBP_MentalAbility_Holobob_C::bStartDisruptingAbility' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bIsAbilityDisturbed) == 0x000399, "Member 'UBP_MentalAbility_Holobob_C::bIsAbilityDisturbed' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bIsFakeMaterialOverrided) == 0x00039A, "Member 'UBP_MentalAbility_Holobob_C::bIsFakeMaterialOverrided' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, TargetMeshOriginalMaterial) == 0x0003A0, "Member 'UBP_MentalAbility_Holobob_C::TargetMeshOriginalMaterial' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, TargetAccessOriginalMaterials) == 0x0003B0, "Member 'UBP_MentalAbility_Holobob_C::TargetAccessOriginalMaterials' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, TargetWeaponMaterial) == 0x0003C0, "Member 'UBP_MentalAbility_Holobob_C::TargetWeaponMaterial' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, TargetAccessMesh) == 0x0003D0, "Member 'UBP_MentalAbility_Holobob_C::TargetAccessMesh' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bIsFakeMeshShaded) == 0x0003E0, "Member 'UBP_MentalAbility_Holobob_C::bIsFakeMeshShaded' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FFadeMaskTargettMin) == 0x0003E4, "Member 'UBP_MentalAbility_Holobob_C::FFadeMaskTargettMin' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FFadeMaskTargettMax) == 0x0003E8, "Member 'UBP_MentalAbility_Holobob_C::FFadeMaskTargettMax' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FTargetMaskDownSpeed) == 0x0003EC, "Member 'UBP_MentalAbility_Holobob_C::FTargetMaskDownSpeed' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, VTargetTopColor) == 0x0003F0, "Member 'UBP_MentalAbility_Holobob_C::VTargetTopColor' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, VBottomColor) == 0x000400, "Member 'UBP_MentalAbility_Holobob_C::VBottomColor' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, VFakeDisturbedColor) == 0x000410, "Member 'UBP_MentalAbility_Holobob_C::VFakeDisturbedColor' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, VFakeTopColor) == 0x000420, "Member 'UBP_MentalAbility_Holobob_C::VFakeTopColor' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, VInnerOpacity) == 0x000430, "Member 'UBP_MentalAbility_Holobob_C::VInnerOpacity' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, VInnerOpacityDisturbed) == 0x000440, "Member 'UBP_MentalAbility_Holobob_C::VInnerOpacityDisturbed' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, VOutsideOpacity) == 0x000450, "Member 'UBP_MentalAbility_Holobob_C::VOutsideOpacity' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, VOutsideOpacityDisturbed) == 0x000460, "Member 'UBP_MentalAbility_Holobob_C::VOutsideOpacityDisturbed' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FCoverOnTopAccessories) == 0x000470, "Member 'UBP_MentalAbility_Holobob_C::FCoverOnTopAccessories' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, TargetHoloMaterial) == 0x000478, "Member 'UBP_MentalAbility_Holobob_C::TargetHoloMaterial' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FakeMaterial) == 0x000480, "Member 'UBP_MentalAbility_Holobob_C::FakeMaterial' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, PlayerRoot_WorldZ) == 0x000488, "Member 'UBP_MentalAbility_Holobob_C::PlayerRoot_WorldZ' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FakeMeshSizeInZ) == 0x00048C, "Member 'UBP_MentalAbility_Holobob_C::FakeMeshSizeInZ' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FFake_Mesh_Root_World_Z) == 0x000490, "Member 'UBP_MentalAbility_Holobob_C::FFake_Mesh_Root_World_Z' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bIsCortexScanEnabled) == 0x000494, "Member 'UBP_MentalAbility_Holobob_C::bIsCortexScanEnabled' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bIsFakeMaskIsUploaded) == 0x000495, "Member 'UBP_MentalAbility_Holobob_C::bIsFakeMaskIsUploaded' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FDepleteLineWorldPos) == 0x000498, "Member 'UBP_MentalAbility_Holobob_C::FDepleteLineWorldPos' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FFakeMaskUoSpeed) == 0x00049C, "Member 'UBP_MentalAbility_Holobob_C::FFakeMaskUoSpeed' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bIsTargetMaskIsUploaded) == 0x0004A0, "Member 'UBP_MentalAbility_Holobob_C::bIsTargetMaskIsUploaded' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, Audio_FreshlyCorrupted) == 0x0004A1, "Member 'UBP_MentalAbility_Holobob_C::Audio_FreshlyCorrupted' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, FInflateSizeHolobobPlayer) == 0x0004A4, "Member 'UBP_MentalAbility_Holobob_C::FInflateSizeHolobobPlayer' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, BuildUpTimer) == 0x0004A8, "Member 'UBP_MentalAbility_Holobob_C::BuildUpTimer' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, EffectDownPercent) == 0x0004AC, "Member 'UBP_MentalAbility_Holobob_C::EffectDownPercent' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, EffectUpPercent) == 0x0004B0, "Member 'UBP_MentalAbility_Holobob_C::EffectUpPercent' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, bIsWaitingFirstUpdate) == 0x0004B4, "Member 'UBP_MentalAbility_Holobob_C::bIsWaitingFirstUpdate' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, CurrentTarget) == 0x0004B8, "Member 'UBP_MentalAbility_Holobob_C::CurrentTarget' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_Holobob_C, IsHolobobing) == 0x0004C0, "Member 'UBP_MentalAbility_Holobob_C::IsHolobobing' has a wrong offset!");

}

