#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamVR

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SteamVR_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Class SteamVR.SteamVRChaperoneComponent
// 0x0038 (0x0160 - 0x0128)
class USteamVRChaperoneComponent final : public UActorComponent
{
public:
	UMulticastDelegateProperty_                   OnLeaveBounds;                                     // 0x0128(0x0018)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnReturnToBounds;                                  // 0x0140(0x0018)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SteamVRChaperoneEvent__DelegateSignature();

	TArray<struct FVector> GetBounds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamVRChaperoneComponent">();
	}
	static class USteamVRChaperoneComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamVRChaperoneComponent>();
	}
};
static_assert(alignof(USteamVRChaperoneComponent) == 0x000008, "Wrong alignment on USteamVRChaperoneComponent");
static_assert(sizeof(USteamVRChaperoneComponent) == 0x000160, "Wrong size on USteamVRChaperoneComponent");
static_assert(offsetof(USteamVRChaperoneComponent, OnLeaveBounds) == 0x000128, "Member 'USteamVRChaperoneComponent::OnLeaveBounds' has a wrong offset!");
static_assert(offsetof(USteamVRChaperoneComponent, OnReturnToBounds) == 0x000140, "Member 'USteamVRChaperoneComponent::OnReturnToBounds' has a wrong offset!");

// Class SteamVR.SteamVRFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USteamVRFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetHandPositionAndOrientation(int32 ControllerIndex, EControllerHand Hand, struct FVector* OutPosition, struct FRotator* OutOrientation);
	static bool GetTrackedDevicePositionAndOrientation(int32 DeviceID, struct FVector* OutPosition, struct FRotator* OutOrientation);
	static void GetValidTrackedDeviceIds(ESteamVRTrackedDeviceType DeviceType, TArray<int32>* OutTrackedDeviceIds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamVRFunctionLibrary">();
	}
	static class USteamVRFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamVRFunctionLibrary>();
	}
};
static_assert(alignof(USteamVRFunctionLibrary) == 0x000008, "Wrong alignment on USteamVRFunctionLibrary");
static_assert(sizeof(USteamVRFunctionLibrary) == 0x000028, "Wrong size on USteamVRFunctionLibrary");

}

