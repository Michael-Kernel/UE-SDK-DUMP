#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Actor_Component_IK

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// DynamicClass BP_Actor_Component_IK.BP_Actor_Component_IK_C
// 0x00D8 (0x0200 - 0x0128)
class UBP_Actor_Component_IK_C final : public UActorComponent
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0128(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      Capsule;                                           // 0x0130(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRootOffset;                                 // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKTraceDistance;                                   // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCrypto_AnimBP_C*                       AnimBP;                                            // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHipOffset;                                        // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LHipOffset;                                        // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipOffset;                                         // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousHipOffset;                                 // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            MovementComponent;                                 // 0x0160(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKOffsetLTarget;                                   // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKOffsetRTarget;                                   // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousIKOffsetLTarget;                           // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousIKOffsetRTarget;                           // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetZeroGate;                                       // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               IKFootRotationRTarget;                             // 0x017C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               IKFootRotationLTarget;                             // 0x0188(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               PreviousIKFootRotationRTarget;                     // 0x0194(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               PreviousIKFootRotationLTarget;                     // 0x01A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               PreviousRotation;                                  // 0x01AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PreviousVelocity;                                  // 0x01B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreviousIsGrounded;                                // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          AnimInstance;                                      // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousAcceleration;                              // 0x01D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FootTraceActive;                                   // 0x01E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GroundTraceActive;                                 // 0x01E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6[0x2];                                      // 0x01E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WallTraceRate;                                     // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x01EC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x01F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallFunc_GroundTraceCondition_GroundTraceActive;   // 0x01F9(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void WallTrace();
	void SetPreviousFramesVars();
	void SetOffsetsToZero();
	void SetIKOffset();
	void SetHipOffset();
	void ReceiveTick(float bpp__DeltaSeconds__pf);
	void ReceiveBeginPlay();
	void MakeEffectorOffset(bool bpp__IKHit__pf, float bpp__Offset__pf, float* bpp__OutOffset__pf);
	void InterpolateIKOffsets();
	void InterpolateHipOffset();
	void HandleFootIK();
	void GroundTraceCondition(bool* bpp__GroundTraceActive__pf);
	void GetSlopeNormal();
	void FootTraceCondition(bool* bpp__FootTraceActive__pf);
	void FootIKTrace(class FName bpp__SocketName__pf, float bpp__IKTraceDistance__pf, bool* bpp__IKRayHit__pf, float* bpp__HipOffset__pf, struct FVector* bpp__HitNormal__pf, float* bpp__FootOffset__pf);
	void ExecuteUbergraph_BP_Actor_Component_IK_0(int32 bpp__EntryPoint__pf);
	void ComputeFootRotation(const struct FVector& bpp__HitNormal__pf, struct FRotator* bpp__FootRotation__pf);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_Actor_Component_IK_C">();
	}
	static class UBP_Actor_Component_IK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Actor_Component_IK_C>();
	}
};
static_assert(alignof(UBP_Actor_Component_IK_C) == 0x000008, "Wrong alignment on UBP_Actor_Component_IK_C");
static_assert(sizeof(UBP_Actor_Component_IK_C) == 0x000200, "Wrong size on UBP_Actor_Component_IK_C");
static_assert(offsetof(UBP_Actor_Component_IK_C, Mesh) == 0x000128, "Member 'UBP_Actor_Component_IK_C::Mesh' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, Capsule) == 0x000130, "Member 'UBP_Actor_Component_IK_C::Capsule' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, CapsuleRootOffset) == 0x000138, "Member 'UBP_Actor_Component_IK_C::CapsuleRootOffset' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, IKTraceDistance) == 0x00013C, "Member 'UBP_Actor_Component_IK_C::IKTraceDistance' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, AnimBP) == 0x000140, "Member 'UBP_Actor_Component_IK_C::AnimBP' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, RHipOffset) == 0x000148, "Member 'UBP_Actor_Component_IK_C::RHipOffset' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, LHipOffset) == 0x00014C, "Member 'UBP_Actor_Component_IK_C::LHipOffset' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, HipOffset) == 0x000150, "Member 'UBP_Actor_Component_IK_C::HipOffset' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, PreviousHipOffset) == 0x000154, "Member 'UBP_Actor_Component_IK_C::PreviousHipOffset' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, DeltaSeconds) == 0x000158, "Member 'UBP_Actor_Component_IK_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, MovementComponent) == 0x000160, "Member 'UBP_Actor_Component_IK_C::MovementComponent' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, IKOffsetLTarget) == 0x000168, "Member 'UBP_Actor_Component_IK_C::IKOffsetLTarget' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, IKOffsetRTarget) == 0x00016C, "Member 'UBP_Actor_Component_IK_C::IKOffsetRTarget' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, PreviousIKOffsetLTarget) == 0x000170, "Member 'UBP_Actor_Component_IK_C::PreviousIKOffsetLTarget' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, PreviousIKOffsetRTarget) == 0x000174, "Member 'UBP_Actor_Component_IK_C::PreviousIKOffsetRTarget' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, SetZeroGate) == 0x000178, "Member 'UBP_Actor_Component_IK_C::SetZeroGate' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, IKFootRotationRTarget) == 0x00017C, "Member 'UBP_Actor_Component_IK_C::IKFootRotationRTarget' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, IKFootRotationLTarget) == 0x000188, "Member 'UBP_Actor_Component_IK_C::IKFootRotationLTarget' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, PreviousIKFootRotationRTarget) == 0x000194, "Member 'UBP_Actor_Component_IK_C::PreviousIKFootRotationRTarget' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, PreviousIKFootRotationLTarget) == 0x0001A0, "Member 'UBP_Actor_Component_IK_C::PreviousIKFootRotationLTarget' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, PreviousRotation) == 0x0001AC, "Member 'UBP_Actor_Component_IK_C::PreviousRotation' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, PreviousVelocity) == 0x0001B8, "Member 'UBP_Actor_Component_IK_C::PreviousVelocity' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, InterpSpeed) == 0x0001C4, "Member 'UBP_Actor_Component_IK_C::InterpSpeed' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, PreviousIsGrounded) == 0x0001C8, "Member 'UBP_Actor_Component_IK_C::PreviousIsGrounded' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, AnimInstance) == 0x0001D0, "Member 'UBP_Actor_Component_IK_C::AnimInstance' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, PreviousAcceleration) == 0x0001D8, "Member 'UBP_Actor_Component_IK_C::PreviousAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, FootTraceActive) == 0x0001E4, "Member 'UBP_Actor_Component_IK_C::FootTraceActive' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, GroundTraceActive) == 0x0001E5, "Member 'UBP_Actor_Component_IK_C::GroundTraceActive' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, WallTraceRate) == 0x0001E8, "Member 'UBP_Actor_Component_IK_C::WallTraceRate' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, K2Node_Event_DeltaSeconds) == 0x0001EC, "Member 'UBP_Actor_Component_IK_C::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, K2Node_DynamicCast_AsCharacter) == 0x0001F0, "Member 'UBP_Actor_Component_IK_C::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'UBP_Actor_Component_IK_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UBP_Actor_Component_IK_C, CallFunc_GroundTraceCondition_GroundTraceActive) == 0x0001F9, "Member 'UBP_Actor_Component_IK_C::CallFunc_GroundTraceCondition_GroundTraceActive' has a wrong offset!");

}

