#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Road_Path

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BP_Enum_SliceRule_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BP_Struct_SplineMeshBuilder_structs.hpp"
#include "BP_Enum_RoadSliceType_structs.hpp"
#include "BP_Struct_SplineMeshBuilder_User_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Road_Path.BP_Road_Path_C
// 0x0140 (0x0518 - 0x03D8)
class ABP_Road_Path_C final : public AActor
{
public:
	class USplineComponent*                       MasterUser;                                        // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EBP_Enum_RoadSliceType                        MeshType;                                          // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSnapToProbe;                                      // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3EA[0x2];                                      // 0x03EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplineHeightOffset;                                // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SnapTangentStart;                                  // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SnapTangentEnd;                                    // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBP_Struct_SplineMeshBuilder_User      ChunkPropagator;                                   // 0x03F8(0x0028)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FBP_Struct_SplineMeshBuilder           DefaultChunkConfig;                                // 0x0420(0x0018)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          bDisplayDebug;                                     // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBP_Struct_SplineMeshBuilder>   CustomizableMeshes;                                // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference)
	bool                                          bReset;                                            // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  bHooks;                                            // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         SnapDistance;                                      // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    HISMC_buffer;                                      // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInstance*                      MaterialSwitch;                                    // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         boundRatio;                                        // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineRotationInheritance;                         // 0x048C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     Final;                                             // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FTransform>                     UserOffset;                                        // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FTransform>                     StoredTangent;                                     // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	struct FVector                                MeshScale;                                         // 0x04C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bScaleHeight;                                      // 0x04D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bScaleWidth;                                       // 0x04D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESplineMeshAxis                               Up_axis;                                           // 0x04D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               Front_axis;                                        // 0x04D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisplayConnectors;                                // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLinkPointScaleToDiamondScale;                     // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bApplyRotator;                                     // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DB[0x1];                                      // 0x04DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DeltaRotator;                                      // 0x04DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EBP_Enum_SliceRule                            SpawningRule;                                      // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Match;                                             // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<int32>                                 MisMatch;                                          // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          bEnableSmartSplineAttachement;                     // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsWater;                                          // 0x0511(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();
	void Add_SplineMesh(class USplineComponent* Spline, class UStaticMesh* Mesh, float Start, float End, float SideOffset, float HeightOffset, int32 N, bool bFlip, class USplineMeshComponent** SplineMesh);
	struct FTransform Stripe_Spline_Info(class USplineComponent* Spline, float QueriedDistance, struct FVector* Location__local_, struct FVector* Location__world_, struct FVector* Tangent, struct FVector* RightVector, float* Roll, struct FVector* Direction);
	void Build_Spline(int32* ChunksProcessed);
	void Apply_Vertex_Color(bool bIsTip, class USplineMeshComponent* Mesh, bool bIsRight, bool bIsLeft);
	void Snap_Points(float CheckRadius);
	void Get_Custom_Mesh_Builder(int32 N, class UStaticMesh** MeshInSlot, bool* bIsEmptySlot, bool* bFlip, struct FVector2D* OffsetStartEnd, bool* bCastShadow, bool* bEnableCollision);
	void PrintError(const class FString& Message);
	void Get_Custom_Chunk_Transform(int32 N, const struct FTransform& CurrentTransform, const struct FTransform* OutTransform);
	struct FTransform Transform_to_Point(const struct FTransform& InTransform, bool bAdd);
	void Correct_Chunk_Size(float Length, float Chunk, float* CorrectedChunkSize);
	void Propagate_Changes();
	const struct FVector GetUpAxis();
	struct FTransform SetDeltaRotator(const struct FTransform& InTransform);
	void SetMaterial(class UPrimitiveComponent* Primitive);
	void CollisionSetup_Water(class UPrimitiveComponent* SpawnedMesh);

	void CollisionSetup_Other(class UStaticMesh* InStaticMesh, class UPrimitiveComponent* SpawnedMesh) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Road_Path_C">();
	}
	static class ABP_Road_Path_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Road_Path_C>();
	}
};
static_assert(alignof(ABP_Road_Path_C) == 0x000008, "Wrong alignment on ABP_Road_Path_C");
static_assert(sizeof(ABP_Road_Path_C) == 0x000518, "Wrong size on ABP_Road_Path_C");
static_assert(offsetof(ABP_Road_Path_C, MasterUser) == 0x0003D8, "Member 'ABP_Road_Path_C::MasterUser' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, DefaultSceneRoot) == 0x0003E0, "Member 'ABP_Road_Path_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, MeshType) == 0x0003E8, "Member 'ABP_Road_Path_C::MeshType' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bSnapToProbe) == 0x0003E9, "Member 'ABP_Road_Path_C::bSnapToProbe' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, SplineHeightOffset) == 0x0003EC, "Member 'ABP_Road_Path_C::SplineHeightOffset' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, SnapTangentStart) == 0x0003F0, "Member 'ABP_Road_Path_C::SnapTangentStart' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, SnapTangentEnd) == 0x0003F4, "Member 'ABP_Road_Path_C::SnapTangentEnd' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, ChunkPropagator) == 0x0003F8, "Member 'ABP_Road_Path_C::ChunkPropagator' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, DefaultChunkConfig) == 0x000420, "Member 'ABP_Road_Path_C::DefaultChunkConfig' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bDisplayDebug) == 0x000438, "Member 'ABP_Road_Path_C::bDisplayDebug' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, CustomizableMeshes) == 0x000440, "Member 'ABP_Road_Path_C::CustomizableMeshes' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bReset) == 0x000450, "Member 'ABP_Road_Path_C::bReset' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bHooks) == 0x000458, "Member 'ABP_Road_Path_C::bHooks' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, SnapDistance) == 0x000468, "Member 'ABP_Road_Path_C::SnapDistance' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, HISMC_buffer) == 0x000470, "Member 'ABP_Road_Path_C::HISMC_buffer' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, MaterialSwitch) == 0x000480, "Member 'ABP_Road_Path_C::MaterialSwitch' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, boundRatio) == 0x000488, "Member 'ABP_Road_Path_C::boundRatio' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, SplineRotationInheritance) == 0x00048C, "Member 'ABP_Road_Path_C::SplineRotationInheritance' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, Final) == 0x000498, "Member 'ABP_Road_Path_C::Final' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, UserOffset) == 0x0004A8, "Member 'ABP_Road_Path_C::UserOffset' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, StoredTangent) == 0x0004B8, "Member 'ABP_Road_Path_C::StoredTangent' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, MeshScale) == 0x0004C8, "Member 'ABP_Road_Path_C::MeshScale' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bScaleHeight) == 0x0004D4, "Member 'ABP_Road_Path_C::bScaleHeight' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bScaleWidth) == 0x0004D5, "Member 'ABP_Road_Path_C::bScaleWidth' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, Up_axis) == 0x0004D6, "Member 'ABP_Road_Path_C::Up_axis' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, Front_axis) == 0x0004D7, "Member 'ABP_Road_Path_C::Front_axis' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bDisplayConnectors) == 0x0004D8, "Member 'ABP_Road_Path_C::bDisplayConnectors' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bLinkPointScaleToDiamondScale) == 0x0004D9, "Member 'ABP_Road_Path_C::bLinkPointScaleToDiamondScale' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bApplyRotator) == 0x0004DA, "Member 'ABP_Road_Path_C::bApplyRotator' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, DeltaRotator) == 0x0004DC, "Member 'ABP_Road_Path_C::DeltaRotator' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, SpawningRule) == 0x0004E8, "Member 'ABP_Road_Path_C::SpawningRule' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, Count) == 0x0004EC, "Member 'ABP_Road_Path_C::Count' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, Match) == 0x0004F0, "Member 'ABP_Road_Path_C::Match' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, MisMatch) == 0x000500, "Member 'ABP_Road_Path_C::MisMatch' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bEnableSmartSplineAttachement) == 0x000510, "Member 'ABP_Road_Path_C::bEnableSmartSplineAttachement' has a wrong offset!");
static_assert(offsetof(ABP_Road_Path_C, bIsWater) == 0x000511, "Member 'ABP_Road_Path_C::bIsWater' has a wrong offset!");

}

