#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPW_UI_HUDGamepadHints

#include "Basic.hpp"

#include "BPW_UI_HUDGamepadHints_classes.hpp"
#include "BPW_UI_HUDGamepadHints_parameters.hpp"


namespace SDK
{

// Function BPW_UI_HUDGamepadHints.BPW_UI_HUDGamepadHints_C.SwitchToMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsGround                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPW_UI_HUDGamepadHints_C::SwitchToMode(bool InIsGround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_UI_HUDGamepadHints_C", "SwitchToMode");

	Params::BPW_UI_HUDGamepadHints_C_SwitchToMode Parms{};

	Parms.InIsGround = InIsGround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_UI_HUDGamepadHints.BPW_UI_HUDGamepadHints_C.IsUnlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUnlocked_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPW_UI_HUDGamepadHints_C::IsUnlocked(const struct FGameplayTag& GameplayTag, bool* IsUnlocked_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_UI_HUDGamepadHints_C", "IsUnlocked");

	Params::BPW_UI_HUDGamepadHints_C_IsUnlocked Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);

	if (IsUnlocked_0 != nullptr)
		*IsUnlocked_0 = Parms.IsUnlocked_0;
}


// Function BPW_UI_HUDGamepadHints.BPW_UI_HUDGamepadHints_C.UpdateAll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBPW_UI_HUDGamepadHints_C::UpdateAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_UI_HUDGamepadHints_C", "UpdateAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_UI_HUDGamepadHints.BPW_UI_HUDGamepadHints_C.UpdateHorizontalBox
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UHorizontalBox*                   HorizontalBox                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FGameplayTag>             ArrayGameplayTags                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UObject*>                  ArrayImageObjects                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class FText>                     ArrayKeyHintTexts                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                                    bInSaucer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPW_UI_HUDGamepadHints_C::UpdateHorizontalBox(class UHorizontalBox* HorizontalBox, TArray<struct FGameplayTag>& ArrayGameplayTags, TArray<class UObject*>& ArrayImageObjects, TArray<class FText>& ArrayKeyHintTexts, bool bInSaucer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_UI_HUDGamepadHints_C", "UpdateHorizontalBox");

	Params::BPW_UI_HUDGamepadHints_C_UpdateHorizontalBox Parms{};

	Parms.HorizontalBox = HorizontalBox;
	Parms.ArrayGameplayTags = std::move(ArrayGameplayTags);
	Parms.ArrayImageObjects = std::move(ArrayImageObjects);
	Parms.ArrayKeyHintTexts = std::move(ArrayKeyHintTexts);
	Parms.bInSaucer = bInSaucer;

	UObject::ProcessEvent(Func, &Parms);

	ArrayGameplayTags = std::move(Parms.ArrayGameplayTags);
	ArrayImageObjects = std::move(Parms.ArrayImageObjects);
	ArrayKeyHintTexts = std::move(Parms.ArrayKeyHintTexts);
}


// Function BPW_UI_HUDGamepadHints.BPW_UI_HUDGamepadHints_C.OnInputDeviceChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsGamepad                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPW_UI_HUDGamepadHints_C::OnInputDeviceChanged(bool InIsGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_UI_HUDGamepadHints_C", "OnInputDeviceChanged");

	Params::BPW_UI_HUDGamepadHints_C_OnInputDeviceChanged Parms{};

	Parms.InIsGamepad = InIsGamepad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_UI_HUDGamepadHints.BPW_UI_HUDGamepadHints_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPW_UI_HUDGamepadHints_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_UI_HUDGamepadHints_C", "PreConstruct");

	Params::BPW_UI_HUDGamepadHints_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_UI_HUDGamepadHints.BPW_UI_HUDGamepadHints_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBPW_UI_HUDGamepadHints_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_UI_HUDGamepadHints_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_UI_HUDGamepadHints.BPW_UI_HUDGamepadHints_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_UI_HUDGamepadHints_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_UI_HUDGamepadHints_C", "Tick");

	Params::BPW_UI_HUDGamepadHints_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPW_UI_HUDGamepadHints.BPW_UI_HUDGamepadHints_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBPW_UI_HUDGamepadHints_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_UI_HUDGamepadHints_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPW_UI_HUDGamepadHints.BPW_UI_HUDGamepadHints_C.ExecuteUbergraph_BPW_UI_HUDGamepadHints
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPW_UI_HUDGamepadHints_C::ExecuteUbergraph_BPW_UI_HUDGamepadHints(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPW_UI_HUDGamepadHints_C", "ExecuteUbergraph_BPW_UI_HUDGamepadHints");

	Params::BPW_UI_HUDGamepadHints_C_ExecuteUbergraph_BPW_UI_HUDGamepadHints Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

