#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BFGActorBuilding

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RuinsList_structs.hpp"
#include "BFGCore_structs.hpp"
#include "BFGCore_classes.hpp"
#include "Enum_BuildingDestructionSound_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BFGActorBuilding.BP_BFGActorBuilding_C
// 0x00F0 (0x07F0 - 0x0700)
class ABP_BFGActorBuilding_C : public ABFGActorBuilding
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0700(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDH1ArmorComponent*                     DH1Armor;                                          // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableEffects;                                     // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711[0x3];                                      // 0x0711(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FSimulationTime;                                   // 0x0714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FPropagtionTimer;                                  // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FExplosionPropagationTime;                         // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FExplosionPropagationDuration;                     // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FImplosionPropagationDuration;                     // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FDestructSimulateDuration;                         // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FRubbleSimulationDuration;                         // 0x072C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FRubbleSinkRate;                                   // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FImpulseStrengthPropagation;                       // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FImpulseStrengthCenter;                            // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FImpulseStrengthHit;                               // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FImplosionImpulseStrengthPropagation;              // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FImplosionImpulseStregthCenter;                    // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FImplosionImpulseStrengthHit;                      // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RuinsEditingMode;                                  // 0x074C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74D[0x3];                                      // 0x074D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRuinsList>                     RuinsList;                                         // 0x0750(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          BuildingEditingMode;                               // 0x0760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_761[0x3];                                      // 0x0761(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalTimeAccumulator;                             // 0x0764(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FixedTimeFPS;                                      // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76C[0x4];                                      // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<Enum_BuildingDestructionSound, class USoundBase*> WhichSound_for_DestructionState;                   // 0x0770(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          HideBuilding;                                      // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasHit;                                            // 0x07C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C2[0x2];                                      // 0x07C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OldPhase1DSEffectNumber;                           // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Phase1_burning_window_01_C*> Phase1Effects;                                     // 0x07C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Phase1ActivationThreshold;                         // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phase1ContinueDestructionThreshold;                // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phase1CoolDown;                                    // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EffectsEditMode;                                   // 0x07E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EditFS;                                            // 0x07E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EditDS;                                            // 0x07E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EditPS_Explosion;                                  // 0x07E7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EditPS_Implosion;                                  // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EditCS;                                            // 0x07E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BFGActorBuilding(int32 EntryPoint);
	void UpdateDamageEffects(const struct FVector& _vHitAt);
	void StartDisablingSpawnedEffects_Fluff();
	void OnBuildingNotHitSinceElapsedTime(float _fElapsedTimeWithoutAHit);
	void StartDamageEffects(const struct FVector& _vHitAt);
	void UpdateRuntimeDestructState(float _fDeltaTime);
	void OnTriggerExtraEffectsOnStateChange(EBFGBuilding_DestructionState _eNewState);
	void RemoveFluffActor(class AActor* FluffActor);
	void ResetBuildingForCheckpoint(bool _bDestroyed);
	void ApplyRadialDamageToBuildingLatent(EBFGBuilding_DestructionPhase DestructionPhase, const struct FTransform& EffectTransform);
	void Debugevent();
	void ReceiveBeginPlay();
	void SetupInitialEffects();
	void UserConstructionScript();
	void CreateSocketObjects(EBFGBuilding_DestructionPhase Destruction_Phase, class UStaticMeshComponent* MeshComponent, class UBFGActorComponent_BuildingLevel* BFGBuildingComponent, int32 MainMeshID);
	void FindMeshData(class UStaticMeshComponent* MainMeshComponent, bool* MeshFound, EBFGBuilding_DestructionPhase* Phase);
	void DestructionPhase_Explosion(float FDeltaTime, bool* bExplosionComplete);
	void DestructionPhase_Implosion(float FDeltaTime, bool* DestructionPhase);
	void DestructionPhase_RubbleRemove(float FDeltaTime, bool* RubbleMoveComplete);
	void StoreRuins_Editor();
	void EditRuins_Editor();
	void ToggleHideBuilding_Editor();
	void DestructionPhaseExplosionEffects(float FDeltaTime, bool* bExplosionComplete);
	void EditBuilding_Editor();
	void StoreBuilding_Editor();
	class UGeometryCacheComponent* OnCreateGeometryCacheComponent(const struct FTransform& _relativeTransform, class UGeometryCache* _pGeometryCache, const struct FBFGBuildingElement& _Element);
	class UBlastMeshComponent* OnCreateBlastMeshComponent(const struct FTransform& _relativeTransform, class UBlastMesh* _pBlastMesh, const struct FBFGBuildingElement& _Element);
	void HandleBuildingResetEvent(bool ShouldBeDestroyed);
	void InitRuinElements();
	void UpdateRuntimeDestructionState(float InTimeDelta);
	void HandleTick(float InWorldTimeDelta);
	void HandleSoundEventForPhase(EBFGBuilding_DestructionState Selection);
	void SpawnPhase1Effects();
	void GetHealthInPercent(float* HealthInPercent);
	void RestoreOrCollapse();
	void Cutscene_DestroyBuilding();
	void CollectEffects();
	void ClearExitingEffects();
	void EditEffects();
	void CancelEffectsEdit();
	void StoreEffects();
	void TriggerEffects();
	void UpdateEffectHelpers(TArray<class AActor*>& ChildActors);
	void BurnGround();

	void GetSocketObjectTransform(class FName SocketName, class USceneComponent* Mesh, int32 MainMeshID, struct FTransform* NoScaleTransform, struct FVector* Scale) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BFGActorBuilding_C">();
	}
	static class ABP_BFGActorBuilding_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BFGActorBuilding_C>();
	}
};
static_assert(alignof(ABP_BFGActorBuilding_C) == 0x000008, "Wrong alignment on ABP_BFGActorBuilding_C");
static_assert(sizeof(ABP_BFGActorBuilding_C) == 0x0007F0, "Wrong size on ABP_BFGActorBuilding_C");
static_assert(offsetof(ABP_BFGActorBuilding_C, UberGraphFrame) == 0x000700, "Member 'ABP_BFGActorBuilding_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, DH1Armor) == 0x000708, "Member 'ABP_BFGActorBuilding_C::DH1Armor' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, EnableEffects) == 0x000710, "Member 'ABP_BFGActorBuilding_C::EnableEffects' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FSimulationTime) == 0x000714, "Member 'ABP_BFGActorBuilding_C::FSimulationTime' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FPropagtionTimer) == 0x000718, "Member 'ABP_BFGActorBuilding_C::FPropagtionTimer' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FExplosionPropagationTime) == 0x00071C, "Member 'ABP_BFGActorBuilding_C::FExplosionPropagationTime' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FExplosionPropagationDuration) == 0x000720, "Member 'ABP_BFGActorBuilding_C::FExplosionPropagationDuration' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FImplosionPropagationDuration) == 0x000724, "Member 'ABP_BFGActorBuilding_C::FImplosionPropagationDuration' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FDestructSimulateDuration) == 0x000728, "Member 'ABP_BFGActorBuilding_C::FDestructSimulateDuration' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FRubbleSimulationDuration) == 0x00072C, "Member 'ABP_BFGActorBuilding_C::FRubbleSimulationDuration' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FRubbleSinkRate) == 0x000730, "Member 'ABP_BFGActorBuilding_C::FRubbleSinkRate' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FImpulseStrengthPropagation) == 0x000734, "Member 'ABP_BFGActorBuilding_C::FImpulseStrengthPropagation' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FImpulseStrengthCenter) == 0x000738, "Member 'ABP_BFGActorBuilding_C::FImpulseStrengthCenter' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FImpulseStrengthHit) == 0x00073C, "Member 'ABP_BFGActorBuilding_C::FImpulseStrengthHit' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FImplosionImpulseStrengthPropagation) == 0x000740, "Member 'ABP_BFGActorBuilding_C::FImplosionImpulseStrengthPropagation' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FImplosionImpulseStregthCenter) == 0x000744, "Member 'ABP_BFGActorBuilding_C::FImplosionImpulseStregthCenter' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FImplosionImpulseStrengthHit) == 0x000748, "Member 'ABP_BFGActorBuilding_C::FImplosionImpulseStrengthHit' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, RuinsEditingMode) == 0x00074C, "Member 'ABP_BFGActorBuilding_C::RuinsEditingMode' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, RuinsList) == 0x000750, "Member 'ABP_BFGActorBuilding_C::RuinsList' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, BuildingEditingMode) == 0x000760, "Member 'ABP_BFGActorBuilding_C::BuildingEditingMode' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, GlobalTimeAccumulator) == 0x000764, "Member 'ABP_BFGActorBuilding_C::GlobalTimeAccumulator' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, FixedTimeFPS) == 0x000768, "Member 'ABP_BFGActorBuilding_C::FixedTimeFPS' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, WhichSound_for_DestructionState) == 0x000770, "Member 'ABP_BFGActorBuilding_C::WhichSound_for_DestructionState' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, HideBuilding) == 0x0007C0, "Member 'ABP_BFGActorBuilding_C::HideBuilding' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, WasHit) == 0x0007C1, "Member 'ABP_BFGActorBuilding_C::WasHit' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, OldPhase1DSEffectNumber) == 0x0007C4, "Member 'ABP_BFGActorBuilding_C::OldPhase1DSEffectNumber' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, Phase1Effects) == 0x0007C8, "Member 'ABP_BFGActorBuilding_C::Phase1Effects' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, Phase1ActivationThreshold) == 0x0007D8, "Member 'ABP_BFGActorBuilding_C::Phase1ActivationThreshold' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, Phase1ContinueDestructionThreshold) == 0x0007DC, "Member 'ABP_BFGActorBuilding_C::Phase1ContinueDestructionThreshold' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, Phase1CoolDown) == 0x0007E0, "Member 'ABP_BFGActorBuilding_C::Phase1CoolDown' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, EffectsEditMode) == 0x0007E4, "Member 'ABP_BFGActorBuilding_C::EffectsEditMode' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, EditFS) == 0x0007E5, "Member 'ABP_BFGActorBuilding_C::EditFS' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, EditDS) == 0x0007E6, "Member 'ABP_BFGActorBuilding_C::EditDS' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, EditPS_Explosion) == 0x0007E7, "Member 'ABP_BFGActorBuilding_C::EditPS_Explosion' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, EditPS_Implosion) == 0x0007E8, "Member 'ABP_BFGActorBuilding_C::EditPS_Implosion' has a wrong offset!");
static_assert(offsetof(ABP_BFGActorBuilding_C, EditCS) == 0x0007E9, "Member 'ABP_BFGActorBuilding_C::EditCS' has a wrong offset!");

}

