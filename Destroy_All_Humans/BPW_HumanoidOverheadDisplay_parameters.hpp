#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPW_HumanoidOverheadDisplay

#include "Basic.hpp"

#include "BFGCore_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BPW_HumanoidOverheadDisplay.BPW_HumanoidOverheadDisplay_C.ExecuteUbergraph_BPW_HumanoidOverheadDisplay
// 0x03C8 (0x03C8 - 0x0000)
struct BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBFGBehaviourState_NPC                        Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Temp_struct_Variable;                              // 0x0008(0x0088)()
	struct FSlateBrush                            Temp_struct_Variable1;                             // 0x0090(0x0088)()
	struct FSlateBrush                            Temp_struct_Variable2;                             // 0x0118(0x0088)()
	struct FSlateBrush                            Temp_struct_Variable3;                             // 0x01A0(0x0088)()
	struct FSlateBrush                            Temp_struct_Variable4;                             // 0x0228(0x0088)()
	struct FSlateBrush                            Temp_struct_Variable5;                             // 0x02B0(0x0088)()
	EBFGBehaviourState_NPC                        K2Node_Event__eState;                              // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_Select_Default;                             // 0x0340(0x0088)()
};
static_assert(alignof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay) == 0x000008, "Wrong alignment on BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay");
static_assert(sizeof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay) == 0x0003C8, "Wrong size on BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay, EntryPoint) == 0x000000, "Member 'BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay, Temp_byte_Variable) == 0x000004, "Member 'BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay, Temp_struct_Variable) == 0x000008, "Member 'BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay, Temp_struct_Variable1) == 0x000090, "Member 'BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay, Temp_struct_Variable2) == 0x000118, "Member 'BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay::Temp_struct_Variable2' has a wrong offset!");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay, Temp_struct_Variable3) == 0x0001A0, "Member 'BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay::Temp_struct_Variable3' has a wrong offset!");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay, Temp_struct_Variable4) == 0x000228, "Member 'BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay::Temp_struct_Variable4' has a wrong offset!");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay, Temp_struct_Variable5) == 0x0002B0, "Member 'BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay::Temp_struct_Variable5' has a wrong offset!");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay, K2Node_Event__eState) == 0x000338, "Member 'BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay::K2Node_Event__eState' has a wrong offset!");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay, K2Node_Select_Default) == 0x000340, "Member 'BPW_HumanoidOverheadDisplay_C_ExecuteUbergraph_BPW_HumanoidOverheadDisplay::K2Node_Select_Default' has a wrong offset!");

// Function BPW_HumanoidOverheadDisplay.BPW_HumanoidOverheadDisplay_C.UpdateState
// 0x0001 (0x0001 - 0x0000)
struct BPW_HumanoidOverheadDisplay_C_UpdateState final
{
public:
	EBFGBehaviourState_NPC                        _eState;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_HumanoidOverheadDisplay_C_UpdateState) == 0x000001, "Wrong alignment on BPW_HumanoidOverheadDisplay_C_UpdateState");
static_assert(sizeof(BPW_HumanoidOverheadDisplay_C_UpdateState) == 0x000001, "Wrong size on BPW_HumanoidOverheadDisplay_C_UpdateState");
static_assert(offsetof(BPW_HumanoidOverheadDisplay_C_UpdateState, _eState) == 0x000000, "Member 'BPW_HumanoidOverheadDisplay_C_UpdateState::_eState' has a wrong offset!");

}

