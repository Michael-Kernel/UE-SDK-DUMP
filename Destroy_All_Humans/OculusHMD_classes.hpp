#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OculusHMD

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "HeadMountedDisplay_structs.hpp"
#include "OculusHMD_structs.hpp"


namespace SDK
{

// Class OculusHMD.OculusFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UOculusFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddLoadingSplashScreen(class UTexture2D* Texture, const struct FVector& TranslationInMeters, const struct FRotator& Rotation, const struct FVector2D& SizeInMeters, const struct FRotator& DeltaRotation, bool bClearBeforeAdd);
	static void ClearLoadingSplashScreens();
	static void EnableAutoLoadingSplashScreen(bool bAutoShowEnabled);
	static void EnableOrientationTracking(bool bOrientationTracking);
	static void EnablePositionTracking(bool bPositionTracking);
	static TArray<float> GetAvailableDisplayFrequencies();
	static void GetBaseRotationAndBaseOffsetInMeters(struct FRotator* OutRotation, struct FVector* OutBaseOffsetInMeters);
	static void GetBaseRotationAndPositionOffset(struct FRotator* OutRot, struct FVector* OutPosOffset);
	static float GetCurrentDisplayFrequency();
	static class FString GetDeviceName();
	static float GetGPUFrameTime();
	static void GetGPUUtilization(bool* IsGPUAvailable, float* GPUUtilization);
	static struct FVector GetGuardianDimensions(EBoundaryType BoundaryType);
	static TArray<struct FVector> GetGuardianPoints(EBoundaryType BoundaryType, bool UsePawnSpace);
	static void GetLoadingSplashParams(class FString* TexturePath, struct FVector* DistanceInMeters, struct FVector2D* SizeInMeters, struct FVector* RotationAxis, float* RotationDeltaInDeg);
	static struct FGuardianTestResult GetNodeGuardianIntersection(ETrackedDeviceType DeviceType, EBoundaryType BoundaryType);
	static struct FTransform GetPlayAreaTransform();
	static struct FGuardianTestResult GetPointGuardianIntersection(const struct FVector& Point, EBoundaryType BoundaryType);
	static void GetPose(struct FRotator* DeviceRotation, struct FVector* DevicePosition, struct FVector* NeckPosition, bool bUseOrienationForPlayerCamera, bool bUsePositionForPlayerCamera, const struct FVector& PositionScale);
	static void GetRawSensorData(struct FVector* AngularAcceleration, struct FVector* LinearAcceleration, struct FVector* AngularVelocity, struct FVector* LinearVelocity, float* TimeInSeconds, ETrackedDeviceType DeviceType);
	static ETiledMultiResLevel GetTiledMultiresLevel();
	static bool GetUserProfile(struct FHmdUserProfile* Profile);
	static bool HasInputFocus();
	static bool HasSystemOverlayPresent();
	static void HideLoadingIcon();
	static void HideLoadingSplashScreen(bool bClear);
	static bool IsAutoLoadingSplashScreenEnabled();
	static bool IsDeviceTracked(ETrackedDeviceType DeviceType);
	static bool IsGuardianDisplayed();
	static bool IsLoadingIconEnabled();
	static void SetBaseRotationAndBaseOffsetInMeters(const struct FRotator& Rotation, const struct FVector& BaseOffsetInMeters, EOrientPositionSelector Options);
	static void SetBaseRotationAndPositionOffset(const struct FRotator& BaseRot, const struct FVector& PosOffset, EOrientPositionSelector Options);
	static void SetColorScaleAndOffset(const struct FLinearColor& ColorScale, const struct FLinearColor& ColorOffset, bool bApplyToAllLayers);
	static void SetCPUAndGPULevels(int32 CPULevel, int32 GPULevel);
	static void SetDisplayFrequency(float RequestedFrequency);
	static void SetGuardianVisibility(bool GuardianVisible);
	static void SetLoadingSplashParams(const class FString& TexturePath, const struct FVector& DistanceInMeters, const struct FVector2D& SizeInMeters, const struct FVector& RotationAxis, float RotationDeltaInDeg);
	static void SetPositionScale3D(const struct FVector& PosScale3D);
	static void SetReorientHMDOnControllerRecenter(bool RecenterMode);
	static void SetTiledMultiresLevel(ETiledMultiResLevel Level);
	static void ShowLoadingIcon(class UTexture2D* Texture);
	static void ShowLoadingSplashScreen();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusFunctionLibrary">();
	}
	static class UOculusFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusFunctionLibrary>();
	}
};
static_assert(alignof(UOculusFunctionLibrary) == 0x000008, "Wrong alignment on UOculusFunctionLibrary");
static_assert(sizeof(UOculusFunctionLibrary) == 0x000028, "Wrong size on UOculusFunctionLibrary");

// Class OculusHMD.OculusHMDRuntimeSettings
// 0x0030 (0x0058 - 0x0028)
class UOculusHMDRuntimeSettings final : public UObject
{
public:
	bool                                          bAutoEnabled;                                      // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOculusSplashDesc>              SplashDescs;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bSupportsDash;                                     // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompositesDepth;                                  // 0x0041(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHQDistortion;                                     // 0x0042(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PixelDensityMin;                                   // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PixelDensityMax;                                   // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CPULevel;                                          // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GPULevel;                                          // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETiledMultiResLevel                           FFRLevel;                                          // 0x0054(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChromaCorrection;                                 // 0x0055(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecenterHMDWithController;                        // 0x0056(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusHMDRuntimeSettings">();
	}
	static class UOculusHMDRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusHMDRuntimeSettings>();
	}
};
static_assert(alignof(UOculusHMDRuntimeSettings) == 0x000008, "Wrong alignment on UOculusHMDRuntimeSettings");
static_assert(sizeof(UOculusHMDRuntimeSettings) == 0x000058, "Wrong size on UOculusHMDRuntimeSettings");
static_assert(offsetof(UOculusHMDRuntimeSettings, bAutoEnabled) == 0x000028, "Member 'UOculusHMDRuntimeSettings::bAutoEnabled' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, SplashDescs) == 0x000030, "Member 'UOculusHMDRuntimeSettings::SplashDescs' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, bSupportsDash) == 0x000040, "Member 'UOculusHMDRuntimeSettings::bSupportsDash' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, bCompositesDepth) == 0x000041, "Member 'UOculusHMDRuntimeSettings::bCompositesDepth' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, bHQDistortion) == 0x000042, "Member 'UOculusHMDRuntimeSettings::bHQDistortion' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, PixelDensityMin) == 0x000044, "Member 'UOculusHMDRuntimeSettings::PixelDensityMin' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, PixelDensityMax) == 0x000048, "Member 'UOculusHMDRuntimeSettings::PixelDensityMax' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, CPULevel) == 0x00004C, "Member 'UOculusHMDRuntimeSettings::CPULevel' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, GPULevel) == 0x000050, "Member 'UOculusHMDRuntimeSettings::GPULevel' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, FFRLevel) == 0x000054, "Member 'UOculusHMDRuntimeSettings::FFRLevel' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, bChromaCorrection) == 0x000055, "Member 'UOculusHMDRuntimeSettings::bChromaCorrection' has a wrong offset!");
static_assert(offsetof(UOculusHMDRuntimeSettings, bRecenterHMDWithController) == 0x000056, "Member 'UOculusHMDRuntimeSettings::bRecenterHMDWithController' has a wrong offset!");

// Class OculusHMD.OculusSceneCaptureCubemap
// 0x0068 (0x0090 - 0x0028)
class UOculusSceneCaptureCubemap final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneCaptureComponent2D*>       CaptureComponents;                                 // 0x0038(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x48];                                      // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusSceneCaptureCubemap">();
	}
	static class UOculusSceneCaptureCubemap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusSceneCaptureCubemap>();
	}
};
static_assert(alignof(UOculusSceneCaptureCubemap) == 0x000008, "Wrong alignment on UOculusSceneCaptureCubemap");
static_assert(sizeof(UOculusSceneCaptureCubemap) == 0x000090, "Wrong size on UOculusSceneCaptureCubemap");
static_assert(offsetof(UOculusSceneCaptureCubemap, CaptureComponents) == 0x000038, "Member 'UOculusSceneCaptureCubemap::CaptureComponents' has a wrong offset!");

}

