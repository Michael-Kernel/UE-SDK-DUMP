#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ansel

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Ansel_structs.hpp"


namespace SDK::Params
{

// Function Ansel.AnselFunctionLibrary.ConstrainCameraByDistance
// 0x0040 (0x0040 - 0x0000)
struct AnselFunctionLibrary_ConstrainCameraByDistance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewCameraLocation;                                 // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousCameraLocation;                            // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginalCameraLocation;                            // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCameraLocation;                                 // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnselFunctionLibrary_ConstrainCameraByDistance) == 0x000008, "Wrong alignment on AnselFunctionLibrary_ConstrainCameraByDistance");
static_assert(sizeof(AnselFunctionLibrary_ConstrainCameraByDistance) == 0x000040, "Wrong size on AnselFunctionLibrary_ConstrainCameraByDistance");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByDistance, WorldContextObject) == 0x000000, "Member 'AnselFunctionLibrary_ConstrainCameraByDistance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByDistance, NewCameraLocation) == 0x000008, "Member 'AnselFunctionLibrary_ConstrainCameraByDistance::NewCameraLocation' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByDistance, PreviousCameraLocation) == 0x000014, "Member 'AnselFunctionLibrary_ConstrainCameraByDistance::PreviousCameraLocation' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByDistance, OriginalCameraLocation) == 0x000020, "Member 'AnselFunctionLibrary_ConstrainCameraByDistance::OriginalCameraLocation' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByDistance, OutCameraLocation) == 0x00002C, "Member 'AnselFunctionLibrary_ConstrainCameraByDistance::OutCameraLocation' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByDistance, MaxDistance) == 0x000038, "Member 'AnselFunctionLibrary_ConstrainCameraByDistance::MaxDistance' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.ConstrainCameraByGeometry
// 0x0038 (0x0038 - 0x0000)
struct AnselFunctionLibrary_ConstrainCameraByGeometry final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewCameraLocation;                                 // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousCameraLocation;                            // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginalCameraLocation;                            // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCameraLocation;                                 // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_ConstrainCameraByGeometry) == 0x000008, "Wrong alignment on AnselFunctionLibrary_ConstrainCameraByGeometry");
static_assert(sizeof(AnselFunctionLibrary_ConstrainCameraByGeometry) == 0x000038, "Wrong size on AnselFunctionLibrary_ConstrainCameraByGeometry");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByGeometry, WorldContextObject) == 0x000000, "Member 'AnselFunctionLibrary_ConstrainCameraByGeometry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByGeometry, NewCameraLocation) == 0x000008, "Member 'AnselFunctionLibrary_ConstrainCameraByGeometry::NewCameraLocation' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByGeometry, PreviousCameraLocation) == 0x000014, "Member 'AnselFunctionLibrary_ConstrainCameraByGeometry::PreviousCameraLocation' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByGeometry, OriginalCameraLocation) == 0x000020, "Member 'AnselFunctionLibrary_ConstrainCameraByGeometry::OriginalCameraLocation' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_ConstrainCameraByGeometry, OutCameraLocation) == 0x00002C, "Member 'AnselFunctionLibrary_ConstrainCameraByGeometry::OutCameraLocation' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.IsPhotographyAllowed
// 0x0001 (0x0001 - 0x0000)
struct AnselFunctionLibrary_IsPhotographyAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_IsPhotographyAllowed) == 0x000001, "Wrong alignment on AnselFunctionLibrary_IsPhotographyAllowed");
static_assert(sizeof(AnselFunctionLibrary_IsPhotographyAllowed) == 0x000001, "Wrong size on AnselFunctionLibrary_IsPhotographyAllowed");
static_assert(offsetof(AnselFunctionLibrary_IsPhotographyAllowed, ReturnValue) == 0x000000, "Member 'AnselFunctionLibrary_IsPhotographyAllowed::ReturnValue' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.IsPhotographyAvailable
// 0x0001 (0x0001 - 0x0000)
struct AnselFunctionLibrary_IsPhotographyAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_IsPhotographyAvailable) == 0x000001, "Wrong alignment on AnselFunctionLibrary_IsPhotographyAvailable");
static_assert(sizeof(AnselFunctionLibrary_IsPhotographyAvailable) == 0x000001, "Wrong size on AnselFunctionLibrary_IsPhotographyAvailable");
static_assert(offsetof(AnselFunctionLibrary_IsPhotographyAvailable, ReturnValue) == 0x000000, "Member 'AnselFunctionLibrary_IsPhotographyAvailable::ReturnValue' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.SetAutoPause
// 0x0001 (0x0001 - 0x0000)
struct AnselFunctionLibrary_SetAutoPause final
{
public:
	bool                                          bShouldAutoPause;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_SetAutoPause) == 0x000001, "Wrong alignment on AnselFunctionLibrary_SetAutoPause");
static_assert(sizeof(AnselFunctionLibrary_SetAutoPause) == 0x000001, "Wrong size on AnselFunctionLibrary_SetAutoPause");
static_assert(offsetof(AnselFunctionLibrary_SetAutoPause, bShouldAutoPause) == 0x000000, "Member 'AnselFunctionLibrary_SetAutoPause::bShouldAutoPause' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.SetAutoPostprocess
// 0x0001 (0x0001 - 0x0000)
struct AnselFunctionLibrary_SetAutoPostprocess final
{
public:
	bool                                          bShouldAutoPostprocess;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_SetAutoPostprocess) == 0x000001, "Wrong alignment on AnselFunctionLibrary_SetAutoPostprocess");
static_assert(sizeof(AnselFunctionLibrary_SetAutoPostprocess) == 0x000001, "Wrong size on AnselFunctionLibrary_SetAutoPostprocess");
static_assert(offsetof(AnselFunctionLibrary_SetAutoPostprocess, bShouldAutoPostprocess) == 0x000000, "Member 'AnselFunctionLibrary_SetAutoPostprocess::bShouldAutoPostprocess' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.SetCameraConstraintCameraSize
// 0x0004 (0x0004 - 0x0000)
struct AnselFunctionLibrary_SetCameraConstraintCameraSize final
{
public:
	float                                         CameraSize;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_SetCameraConstraintCameraSize) == 0x000004, "Wrong alignment on AnselFunctionLibrary_SetCameraConstraintCameraSize");
static_assert(sizeof(AnselFunctionLibrary_SetCameraConstraintCameraSize) == 0x000004, "Wrong size on AnselFunctionLibrary_SetCameraConstraintCameraSize");
static_assert(offsetof(AnselFunctionLibrary_SetCameraConstraintCameraSize, CameraSize) == 0x000000, "Member 'AnselFunctionLibrary_SetCameraConstraintCameraSize::CameraSize' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.SetCameraConstraintDistance
// 0x0004 (0x0004 - 0x0000)
struct AnselFunctionLibrary_SetCameraConstraintDistance final
{
public:
	float                                         MaxCameraDistance;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_SetCameraConstraintDistance) == 0x000004, "Wrong alignment on AnselFunctionLibrary_SetCameraConstraintDistance");
static_assert(sizeof(AnselFunctionLibrary_SetCameraConstraintDistance) == 0x000004, "Wrong size on AnselFunctionLibrary_SetCameraConstraintDistance");
static_assert(offsetof(AnselFunctionLibrary_SetCameraConstraintDistance, MaxCameraDistance) == 0x000000, "Member 'AnselFunctionLibrary_SetCameraConstraintDistance::MaxCameraDistance' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.SetCameraMovementSpeed
// 0x0004 (0x0004 - 0x0000)
struct AnselFunctionLibrary_SetCameraMovementSpeed final
{
public:
	float                                         TranslationSpeed;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_SetCameraMovementSpeed) == 0x000004, "Wrong alignment on AnselFunctionLibrary_SetCameraMovementSpeed");
static_assert(sizeof(AnselFunctionLibrary_SetCameraMovementSpeed) == 0x000004, "Wrong size on AnselFunctionLibrary_SetCameraMovementSpeed");
static_assert(offsetof(AnselFunctionLibrary_SetCameraMovementSpeed, TranslationSpeed) == 0x000000, "Member 'AnselFunctionLibrary_SetCameraMovementSpeed::TranslationSpeed' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.SetIsPhotographyAllowed
// 0x0001 (0x0001 - 0x0000)
struct AnselFunctionLibrary_SetIsPhotographyAllowed final
{
public:
	bool                                          bIsPhotographyAllowed;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_SetIsPhotographyAllowed) == 0x000001, "Wrong alignment on AnselFunctionLibrary_SetIsPhotographyAllowed");
static_assert(sizeof(AnselFunctionLibrary_SetIsPhotographyAllowed) == 0x000001, "Wrong size on AnselFunctionLibrary_SetIsPhotographyAllowed");
static_assert(offsetof(AnselFunctionLibrary_SetIsPhotographyAllowed, bIsPhotographyAllowed) == 0x000000, "Member 'AnselFunctionLibrary_SetIsPhotographyAllowed::bIsPhotographyAllowed' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.SetSettleFrames
// 0x0004 (0x0004 - 0x0000)
struct AnselFunctionLibrary_SetSettleFrames final
{
public:
	int32                                         NumSettleFrames;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_SetSettleFrames) == 0x000004, "Wrong alignment on AnselFunctionLibrary_SetSettleFrames");
static_assert(sizeof(AnselFunctionLibrary_SetSettleFrames) == 0x000004, "Wrong size on AnselFunctionLibrary_SetSettleFrames");
static_assert(offsetof(AnselFunctionLibrary_SetSettleFrames, NumSettleFrames) == 0x000000, "Member 'AnselFunctionLibrary_SetSettleFrames::NumSettleFrames' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.SetUIControlVisibility
// 0x0010 (0x0010 - 0x0000)
struct AnselFunctionLibrary_SetUIControlVisibility final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIControlEffectTarget                        UIControlTarget;                                   // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnselFunctionLibrary_SetUIControlVisibility) == 0x000008, "Wrong alignment on AnselFunctionLibrary_SetUIControlVisibility");
static_assert(sizeof(AnselFunctionLibrary_SetUIControlVisibility) == 0x000010, "Wrong size on AnselFunctionLibrary_SetUIControlVisibility");
static_assert(offsetof(AnselFunctionLibrary_SetUIControlVisibility, WorldContextObject) == 0x000000, "Member 'AnselFunctionLibrary_SetUIControlVisibility::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_SetUIControlVisibility, UIControlTarget) == 0x000008, "Member 'AnselFunctionLibrary_SetUIControlVisibility::UIControlTarget' has a wrong offset!");
static_assert(offsetof(AnselFunctionLibrary_SetUIControlVisibility, bIsVisible) == 0x000009, "Member 'AnselFunctionLibrary_SetUIControlVisibility::bIsVisible' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.StartSession
// 0x0008 (0x0008 - 0x0000)
struct AnselFunctionLibrary_StartSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_StartSession) == 0x000008, "Wrong alignment on AnselFunctionLibrary_StartSession");
static_assert(sizeof(AnselFunctionLibrary_StartSession) == 0x000008, "Wrong size on AnselFunctionLibrary_StartSession");
static_assert(offsetof(AnselFunctionLibrary_StartSession, WorldContextObject) == 0x000000, "Member 'AnselFunctionLibrary_StartSession::WorldContextObject' has a wrong offset!");

// Function Ansel.AnselFunctionLibrary.StopSession
// 0x0008 (0x0008 - 0x0000)
struct AnselFunctionLibrary_StopSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnselFunctionLibrary_StopSession) == 0x000008, "Wrong alignment on AnselFunctionLibrary_StopSession");
static_assert(sizeof(AnselFunctionLibrary_StopSession) == 0x000008, "Wrong size on AnselFunctionLibrary_StopSession");
static_assert(offsetof(AnselFunctionLibrary_StopSession, WorldContextObject) == 0x000000, "Member 'AnselFunctionLibrary_StopSession::WorldContextObject' has a wrong offset!");

}

