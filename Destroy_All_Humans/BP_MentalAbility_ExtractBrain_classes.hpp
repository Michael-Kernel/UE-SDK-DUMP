#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MentalAbility_ExtractBrain

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BFGCore_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MentalAbility_ExtractBrain.BP_MentalAbility_ExtractBrain_C
// 0x0078 (0x0318 - 0x02A0)
class UBP_MentalAbility_ExtractBrain_C final : public UBFGMentalAbility_ExtractBrain
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   BlackboardVarID;                                   // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PoppedBrain;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PoppedBrainTargetPosition;                         // 0x02B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainPopAnimationTimer;                            // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PoppedBrainDirection;                              // 0x02C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PoppedBrainStartPosition;                          // 0x02D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Current_PFX_emissive;                              // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Decal_Dyn_Mat;                                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timing_Decal;                                      // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 NPC_Character;                                     // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead_Decal_Present;                                // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NPC_Already_Dead;                                  // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_302[0x2];                                      // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AchievementSmashCounter;                           // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBFGEffectContainer*>            DecalRefs;                                         // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void Parabola(const struct FVector& StartLocation, const struct FVector& EndLocation, float Height, float Percent, struct FVector* CurrentPosition);
	void UpdateAbilityDressing(float _fDeltaTime);
	void StoppedMentalLink(bool _wasSuccessfull);
	void StartedMentalLink();
	void OnSmashedDuringEffect();
	void OnAbilityEnd();
	void OnTick(float _fDeltaTime);
	void OnBrainWasExtracted(class AActor* _pTarget, class AActor* PBrain);
	void OnSmashedDuringLink();
	void DestroySplatterVFX();
	void ExecuteUbergraph_BP_MentalAbility_ExtractBrain(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MentalAbility_ExtractBrain_C">();
	}
	static class UBP_MentalAbility_ExtractBrain_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MentalAbility_ExtractBrain_C>();
	}
};
static_assert(alignof(UBP_MentalAbility_ExtractBrain_C) == 0x000008, "Wrong alignment on UBP_MentalAbility_ExtractBrain_C");
static_assert(sizeof(UBP_MentalAbility_ExtractBrain_C) == 0x000318, "Wrong size on UBP_MentalAbility_ExtractBrain_C");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, UberGraphFrame) == 0x0002A0, "Member 'UBP_MentalAbility_ExtractBrain_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, BlackboardVarID) == 0x0002A8, "Member 'UBP_MentalAbility_ExtractBrain_C::BlackboardVarID' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, PoppedBrain) == 0x0002B0, "Member 'UBP_MentalAbility_ExtractBrain_C::PoppedBrain' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, PoppedBrainTargetPosition) == 0x0002B8, "Member 'UBP_MentalAbility_ExtractBrain_C::PoppedBrainTargetPosition' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, BrainPopAnimationTimer) == 0x0002C4, "Member 'UBP_MentalAbility_ExtractBrain_C::BrainPopAnimationTimer' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, PoppedBrainDirection) == 0x0002C8, "Member 'UBP_MentalAbility_ExtractBrain_C::PoppedBrainDirection' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, PoppedBrainStartPosition) == 0x0002D4, "Member 'UBP_MentalAbility_ExtractBrain_C::PoppedBrainStartPosition' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, Current_PFX_emissive) == 0x0002E0, "Member 'UBP_MentalAbility_ExtractBrain_C::Current_PFX_emissive' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, Decal_Dyn_Mat) == 0x0002E8, "Member 'UBP_MentalAbility_ExtractBrain_C::Decal_Dyn_Mat' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, Timing_Decal) == 0x0002F0, "Member 'UBP_MentalAbility_ExtractBrain_C::Timing_Decal' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, NPC_Character) == 0x0002F8, "Member 'UBP_MentalAbility_ExtractBrain_C::NPC_Character' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, Dead_Decal_Present) == 0x000300, "Member 'UBP_MentalAbility_ExtractBrain_C::Dead_Decal_Present' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, NPC_Already_Dead) == 0x000301, "Member 'UBP_MentalAbility_ExtractBrain_C::NPC_Already_Dead' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, AchievementSmashCounter) == 0x000304, "Member 'UBP_MentalAbility_ExtractBrain_C::AchievementSmashCounter' has a wrong offset!");
static_assert(offsetof(UBP_MentalAbility_ExtractBrain_C, DecalRefs) == 0x000308, "Member 'UBP_MentalAbility_ExtractBrain_C::DecalRefs' has a wrong offset!");

}

