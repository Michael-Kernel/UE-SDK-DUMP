#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPW_WeaponSelector_Base

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BPW_WeaponSelector_Base.BPW_WeaponSelector_Base_C.ExecuteUbergraph_BPW_WeaponSelector_Base
// 0x0120 (0x0120 - 0x0000)
struct BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0014(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_Event__image;                               // 0x0050(0x0088)(ConstParm)
	class UBFGWeaponSelectorAbilityHint*          K2Node_Event__pHint1;                              // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event__fAnchorVertical1;                    // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event__fAnchorHorizontal1;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBFGWeaponSelectorAbilityHint*          K2Node_Event__pHint;                               // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event__fAnchorVertical;                     // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event__fAnchorHorizontal;                   // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBFGUI_RadialMenu_Option*               K2Node_Event__pOption;                             // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event__bShow;                               // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0108(0x0018)()
};
static_assert(alignof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base) == 0x000008, "Wrong alignment on BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base");
static_assert(sizeof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base) == 0x000120, "Wrong size on BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, EntryPoint) == 0x000000, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event_IsDesignTime) == 0x000010, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event_MyGeometry) == 0x000014, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event_InDeltaTime) == 0x00004C, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event__image) == 0x000050, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event__image' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event__pHint1) == 0x0000D8, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event__pHint1' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event__fAnchorVertical1) == 0x0000E0, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event__fAnchorVertical1' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event__fAnchorHorizontal1) == 0x0000E4, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event__fAnchorHorizontal1' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event__pHint) == 0x0000E8, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event__pHint' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event__fAnchorVertical) == 0x0000F0, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event__fAnchorVertical' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event__fAnchorHorizontal) == 0x0000F4, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event__fAnchorHorizontal' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event__pOption) == 0x0000F8, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event__pOption' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, K2Node_Event__bShow) == 0x000100, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::K2Node_Event__bShow' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, CallFunc_IsValid_ReturnValue) == 0x000101, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base, CallFunc_MakeLiteralText_ReturnValue) == 0x000108, "Member 'BPW_WeaponSelector_Base_C_ExecuteUbergraph_BPW_WeaponSelector_Base::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");

// Function BPW_WeaponSelector_Base.BPW_WeaponSelector_Base_C.OnShowWeaponInformation
// 0x0010 (0x0010 - 0x0000)
struct BPW_WeaponSelector_Base_C_OnShowWeaponInformation final
{
public:
	class UBFGUI_RadialMenu_Option*               _pOption;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _bShow;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPW_WeaponSelector_Base_C_OnShowWeaponInformation) == 0x000008, "Wrong alignment on BPW_WeaponSelector_Base_C_OnShowWeaponInformation");
static_assert(sizeof(BPW_WeaponSelector_Base_C_OnShowWeaponInformation) == 0x000010, "Wrong size on BPW_WeaponSelector_Base_C_OnShowWeaponInformation");
static_assert(offsetof(BPW_WeaponSelector_Base_C_OnShowWeaponInformation, _pOption) == 0x000000, "Member 'BPW_WeaponSelector_Base_C_OnShowWeaponInformation::_pOption' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_OnShowWeaponInformation, _bShow) == 0x000008, "Member 'BPW_WeaponSelector_Base_C_OnShowWeaponInformation::_bShow' has a wrong offset!");

// Function BPW_WeaponSelector_Base.BPW_WeaponSelector_Base_C.AddHintToLeftWing
// 0x0010 (0x0010 - 0x0000)
struct BPW_WeaponSelector_Base_C_AddHintToLeftWing final
{
public:
	class UBFGWeaponSelectorAbilityHint*          _pHint;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _fAnchorVertical;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _fAnchorHorizontal;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_WeaponSelector_Base_C_AddHintToLeftWing) == 0x000008, "Wrong alignment on BPW_WeaponSelector_Base_C_AddHintToLeftWing");
static_assert(sizeof(BPW_WeaponSelector_Base_C_AddHintToLeftWing) == 0x000010, "Wrong size on BPW_WeaponSelector_Base_C_AddHintToLeftWing");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToLeftWing, _pHint) == 0x000000, "Member 'BPW_WeaponSelector_Base_C_AddHintToLeftWing::_pHint' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToLeftWing, _fAnchorVertical) == 0x000008, "Member 'BPW_WeaponSelector_Base_C_AddHintToLeftWing::_fAnchorVertical' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToLeftWing, _fAnchorHorizontal) == 0x00000C, "Member 'BPW_WeaponSelector_Base_C_AddHintToLeftWing::_fAnchorHorizontal' has a wrong offset!");

// Function BPW_WeaponSelector_Base.BPW_WeaponSelector_Base_C.AddHintToRightWing
// 0x0010 (0x0010 - 0x0000)
struct BPW_WeaponSelector_Base_C_AddHintToRightWing final
{
public:
	class UBFGWeaponSelectorAbilityHint*          _pHint;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _fAnchorVertical;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _fAnchorHorizontal;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_WeaponSelector_Base_C_AddHintToRightWing) == 0x000008, "Wrong alignment on BPW_WeaponSelector_Base_C_AddHintToRightWing");
static_assert(sizeof(BPW_WeaponSelector_Base_C_AddHintToRightWing) == 0x000010, "Wrong size on BPW_WeaponSelector_Base_C_AddHintToRightWing");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToRightWing, _pHint) == 0x000000, "Member 'BPW_WeaponSelector_Base_C_AddHintToRightWing::_pHint' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToRightWing, _fAnchorVertical) == 0x000008, "Member 'BPW_WeaponSelector_Base_C_AddHintToRightWing::_fAnchorVertical' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToRightWing, _fAnchorHorizontal) == 0x00000C, "Member 'BPW_WeaponSelector_Base_C_AddHintToRightWing::_fAnchorHorizontal' has a wrong offset!");

// Function BPW_WeaponSelector_Base.BPW_WeaponSelector_Base_C.SetSelectionWheelBGImage
// 0x0088 (0x0088 - 0x0000)
struct BPW_WeaponSelector_Base_C_SetSelectionWheelBGImage final
{
public:
	struct FSlateBrush                            _image;                                            // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BPW_WeaponSelector_Base_C_SetSelectionWheelBGImage) == 0x000008, "Wrong alignment on BPW_WeaponSelector_Base_C_SetSelectionWheelBGImage");
static_assert(sizeof(BPW_WeaponSelector_Base_C_SetSelectionWheelBGImage) == 0x000088, "Wrong size on BPW_WeaponSelector_Base_C_SetSelectionWheelBGImage");
static_assert(offsetof(BPW_WeaponSelector_Base_C_SetSelectionWheelBGImage, _image) == 0x000000, "Member 'BPW_WeaponSelector_Base_C_SetSelectionWheelBGImage::_image' has a wrong offset!");

// Function BPW_WeaponSelector_Base.BPW_WeaponSelector_Base_C.Tick
// 0x003C (0x003C - 0x0000)
struct BPW_WeaponSelector_Base_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPW_WeaponSelector_Base_C_Tick) == 0x000004, "Wrong alignment on BPW_WeaponSelector_Base_C_Tick");
static_assert(sizeof(BPW_WeaponSelector_Base_C_Tick) == 0x00003C, "Wrong size on BPW_WeaponSelector_Base_C_Tick");
static_assert(offsetof(BPW_WeaponSelector_Base_C_Tick, MyGeometry) == 0x000000, "Member 'BPW_WeaponSelector_Base_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_Tick, InDeltaTime) == 0x000038, "Member 'BPW_WeaponSelector_Base_C_Tick::InDeltaTime' has a wrong offset!");

// Function BPW_WeaponSelector_Base.BPW_WeaponSelector_Base_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BPW_WeaponSelector_Base_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPW_WeaponSelector_Base_C_PreConstruct) == 0x000001, "Wrong alignment on BPW_WeaponSelector_Base_C_PreConstruct");
static_assert(sizeof(BPW_WeaponSelector_Base_C_PreConstruct) == 0x000001, "Wrong size on BPW_WeaponSelector_Base_C_PreConstruct");
static_assert(offsetof(BPW_WeaponSelector_Base_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BPW_WeaponSelector_Base_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BPW_WeaponSelector_Base.BPW_WeaponSelector_Base_C.SetupLock
// 0x0020 (0x0020 - 0x0000)
struct BPW_WeaponSelector_Base_C_SetupLock final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                Image_lock;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBFGPlayerState_Unlocks*                CallFunc_GetPlayerStateUnlocks_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUnlockedTag_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPW_WeaponSelector_Base_C_SetupLock) == 0x000008, "Wrong alignment on BPW_WeaponSelector_Base_C_SetupLock");
static_assert(sizeof(BPW_WeaponSelector_Base_C_SetupLock) == 0x000020, "Wrong size on BPW_WeaponSelector_Base_C_SetupLock");
static_assert(offsetof(BPW_WeaponSelector_Base_C_SetupLock, Tag) == 0x000000, "Member 'BPW_WeaponSelector_Base_C_SetupLock::Tag' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_SetupLock, Image_lock) == 0x000008, "Member 'BPW_WeaponSelector_Base_C_SetupLock::Image_lock' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_SetupLock, CallFunc_GetPlayerStateUnlocks_ReturnValue) == 0x000010, "Member 'BPW_WeaponSelector_Base_C_SetupLock::CallFunc_GetPlayerStateUnlocks_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_SetupLock, CallFunc_IsUnlockedTag_ReturnValue) == 0x000018, "Member 'BPW_WeaponSelector_Base_C_SetupLock::CallFunc_IsUnlockedTag_ReturnValue' has a wrong offset!");

// Function BPW_WeaponSelector_Base.BPW_WeaponSelector_Base_C.AddHintToWing
// 0x0050 (0x0050 - 0x0000)
struct BPW_WeaponSelector_Base_C_AddHintToWing final
{
public:
	class UCanvasPanel*                           InCanvasWing;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBFGWeaponSelectorAbilityHint*          InHint;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAnchorX;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAnchorY;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAlignmentX;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue1;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue2;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(BPW_WeaponSelector_Base_C_AddHintToWing) == 0x000008, "Wrong alignment on BPW_WeaponSelector_Base_C_AddHintToWing");
static_assert(sizeof(BPW_WeaponSelector_Base_C_AddHintToWing) == 0x000050, "Wrong size on BPW_WeaponSelector_Base_C_AddHintToWing");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToWing, InCanvasWing) == 0x000000, "Member 'BPW_WeaponSelector_Base_C_AddHintToWing::InCanvasWing' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToWing, InHint) == 0x000008, "Member 'BPW_WeaponSelector_Base_C_AddHintToWing::InHint' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToWing, InAnchorX) == 0x000010, "Member 'BPW_WeaponSelector_Base_C_AddHintToWing::InAnchorX' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToWing, InAnchorY) == 0x000014, "Member 'BPW_WeaponSelector_Base_C_AddHintToWing::InAnchorY' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToWing, InAlignmentX) == 0x000018, "Member 'BPW_WeaponSelector_Base_C_AddHintToWing::InAlignmentX' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToWing, CallFunc_AddChildToCanvas_ReturnValue) == 0x000020, "Member 'BPW_WeaponSelector_Base_C_AddHintToWing::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToWing, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'BPW_WeaponSelector_Base_C_AddHintToWing::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToWing, CallFunc_MakeVector2D_ReturnValue1) == 0x000030, "Member 'BPW_WeaponSelector_Base_C_AddHintToWing::CallFunc_MakeVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToWing, CallFunc_MakeVector2D_ReturnValue2) == 0x000038, "Member 'BPW_WeaponSelector_Base_C_AddHintToWing::CallFunc_MakeVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPW_WeaponSelector_Base_C_AddHintToWing, K2Node_MakeStruct_Anchors) == 0x000040, "Member 'BPW_WeaponSelector_Base_C_AddHintToWing::K2Node_MakeStruct_Anchors' has a wrong offset!");

}

