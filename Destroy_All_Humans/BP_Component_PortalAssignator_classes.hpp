#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Component_PortalAssignator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Component_PortalAssignator.BP_Component_PortalAssignator_C
// 0x0038 (0x0160 - 0x0128)
class UBP_Component_PortalAssignator_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0128(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABP_Tool_Skydome_C*>             LiveSkydomes;                                      // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bDebug;                                            // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_MissionTriggerZone_Indoor_C*> LivePortals;                                       // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         PreviousPlayerIndoorTracker;                       // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentPlayerIndoorTracker;                        // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Unregister_Skydome(const class ABP_Tool_Skydome_C*& SkydomeToUnregister);
	void Unregister_Portal(const class ABP_MissionTriggerZone_Indoor_C*& PortalToUnregister);
	void OnPortalTrackerChanges(bool* bQueryMoodTransition, bool* bOutdoorToIndoor);
	void UpdateTrackerDelta(bool bIncrement);
	void Register_Portal(const class ABP_MissionTriggerZone_Indoor_C*& SkydomeToRegister);
	void PortalDebug(const class FString& Text, const class FString& Detail);
	void Register_Skydome(const class ABP_Tool_Skydome_C*& SkydomeToRegister);
	void OnPortalValidOverlap_Starts();
	void OnPortalValidOverlap_Ends();
	void ExecuteUbergraph_BP_Component_PortalAssignator(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Component_PortalAssignator_C">();
	}
	static class UBP_Component_PortalAssignator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Component_PortalAssignator_C>();
	}
};
static_assert(alignof(UBP_Component_PortalAssignator_C) == 0x000008, "Wrong alignment on UBP_Component_PortalAssignator_C");
static_assert(sizeof(UBP_Component_PortalAssignator_C) == 0x000160, "Wrong size on UBP_Component_PortalAssignator_C");
static_assert(offsetof(UBP_Component_PortalAssignator_C, UberGraphFrame) == 0x000128, "Member 'UBP_Component_PortalAssignator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Component_PortalAssignator_C, LiveSkydomes) == 0x000130, "Member 'UBP_Component_PortalAssignator_C::LiveSkydomes' has a wrong offset!");
static_assert(offsetof(UBP_Component_PortalAssignator_C, bDebug) == 0x000140, "Member 'UBP_Component_PortalAssignator_C::bDebug' has a wrong offset!");
static_assert(offsetof(UBP_Component_PortalAssignator_C, LivePortals) == 0x000148, "Member 'UBP_Component_PortalAssignator_C::LivePortals' has a wrong offset!");
static_assert(offsetof(UBP_Component_PortalAssignator_C, PreviousPlayerIndoorTracker) == 0x000158, "Member 'UBP_Component_PortalAssignator_C::PreviousPlayerIndoorTracker' has a wrong offset!");
static_assert(offsetof(UBP_Component_PortalAssignator_C, CurrentPlayerIndoorTracker) == 0x00015C, "Member 'UBP_Component_PortalAssignator_C::CurrentPlayerIndoorTracker' has a wrong offset!");

}

