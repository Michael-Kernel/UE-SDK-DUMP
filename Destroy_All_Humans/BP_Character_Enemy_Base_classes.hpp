#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character_Enemy_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Enum_WhichBehaviorSound_structs.hpp"
#include "BFGCore_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character_Enemy_Base.BP_Character_Enemy_Base_C
// 0x0180 (0x0D60 - 0x0BE0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Character_Enemy_Base_C : public ABFGNPCCharacterEnemy
{
public:
	uint8                                         Pad_BD8[0x8];                                      // 0x0BD8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BE0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ActorComponent_NPCBehaviorVO_C*     BP_ActorComponent_NPCBehaviorVO;                   // 0x0BE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_OverheadOpportunityWidgetComponent_C* BP_OverheadOpportunityWidgetComponent;             // 0x0BF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VO_Output_Behaviour2;                              // 0x0BF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_WidgetComponent_Alert_C*            WidgetComponentAlert;                              // 0x0C00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VO_Output_Subfluff;                                // 0x0C08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ActorComponent_RadarObject_NPC_C*   BP_ActorComponent_RadarObject_NPC;                 // 0x0C10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HealthWidgetComponent_C*            BP_HealthWidgetComponent;                          // 0x0C18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VO_Output_Behaviour;                               // 0x0C20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x0C28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LookAtHint;                                        // 0x0C30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDH1ArmorComponent*                     DH1Armor;                                          // 0x0C38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EBFGBehaviourState_NPC                        CurrentState;                                      // 0x0C40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMode;                                         // 0x0C41(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBFGBehaviourState_NPC                        OldState;                                          // 0x0C42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C43[0x5];                                      // 0x0C43(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<Enum_WhichBehaviorSound, class USoundBase*> Map_WhichVOSoundbase;                              // 0x0C48(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	Enum_WhichBehaviorSound                       VO_WhichSituation;                                 // 0x0C98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_WhichBehaviorSound                       VO_OldSituation;                                   // 0x0C99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9A[0x2];                                      // 0x0C9A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VO_Output_LastUsed;                                // 0x0C9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartDuration;                                     // 0x0CA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ZapomaticEffect;                                   // 0x0CA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA5[0x3];                                      // 0x0CA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             MeshOriginalMaterials;                             // 0x0CA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             SkeletonMeshMaterials;                             // 0x0CB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             SihouetteMaterials;                                // 0x0CC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInterface*                     SilhouetteMaterial;                                // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             SkeletonMeshElecMaterials;                         // 0x0CE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInterface*                     SkeletonMaterial;                                  // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZappedTimer;                                       // 0x0CF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaterialCurrentState;                              // 0x0CFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Play_Zappo_VO_now;                          // 0x0D00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_Injured_VO_now;                        // 0x0D01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_PKHeld_VO_now;                         // 0x0D02(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_PKThrown_VO_now;                       // 0x0D03(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_Probed_VO_now;                         // 0x0D04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_SurvivedProbe_VO_now;                  // 0x0D05(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_Deathrayed_VO_now;                     // 0x0D06(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_Brainext_VO_now;                       // 0x0D07(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsIondetonator;                                    // 0x0D08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D09[0x3];                                      // 0x0D09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IonDetonatorTimer;                                 // 0x0D0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IonDetonatorDelay;                                 // 0x0D10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D14[0x4];                                      // 0x0D14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     IonizedMaterial;                                   // 0x0D18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDisintegrated;                                   // 0x0D20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D21[0x3];                                      // 0x0D21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisintegratorMeshDelay;                            // 0x0D24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisintegratorDissolveTimer;                        // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2C[0x4];                                      // 0x0D2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MeshDisintegrationMaterial;                        // 0x0D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     SkeletonDisintegrationMaterial;                    // 0x0D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zap_O_MaticDeathMultiplier;                        // 0x0D40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KilledByZap_O_Matic;                               // 0x0D44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Zap_O_Matic_DeathGate;                             // 0x0D45(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D46[0x2];                                      // 0x0D46(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Zap_O_MaticTwitchTime;                             // 0x0D48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviousIsDead;                                    // 0x0D4C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_Bumped_VO_now;                         // 0x0D4D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_BlockLOS_VO_now;                       // 0x0D4E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Play_AlertState_VO_now;                     // 0x0D4F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Should_Fadeout_Zappo_VO;                           // 0x0D50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Zappo_VO_Fading_Out;                            // 0x0D51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NoMoreVO;                                          // 0x0D52(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IHaveBeenCurious;                                  // 0x0D53(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         NumberOfCurious;                                   // 0x0D54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Character_Enemy_Base(int32 EntryPoint);
	void TriggerVO(class FName _event);
	void OnDeadStateChanged(bool _bNewState);
	void K2_OnReset();
	void OnWasHolobobed();
	void OnTakesFireDamage();
	void OnFireExinguished();
	void OnSetOnFire();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnAIStateChanged(EBFGBehaviourState_NPC _newState);
	void BndEvt__m_pGameplayEffectTagsComponent_K2Node_ComponentBoundEvent_3_BFGGameplayEffectTags_Event__DelegateSignature(const struct FGameplayTag& _rTag);
	void BndEvt__m_pGameplayEffectTagsComponent_K2Node_ComponentBoundEvent_1_BFGGameplayEffectTags_Event__DelegateSignature(const struct FGameplayTag& _rTag);
	void BndEvt__m_pDamageComponent_K2Node_ComponentBoundEvent_0_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature(class UBFGActorComponent_PawnDamage* _pPawnDamage, float _fDamage, class AActor* _pDamageCauser, const class UBFGDamageType* _pDamageType, const struct FVector& _rShotDirection, const struct FHitResult& _oHitResult);
	void OnTagInactive(const struct FGameplayTag& _rTag);
	void OnTagActive(const struct FGameplayTag& _rTag);
	void PKPhysicalAnimation(class FName PhysicalProfile);
	void Play_Behaviour_VO();
	void CheckIfElectrocuteDamage(const class UBFGDamageType* IncomingDamage, bool* YesElectrocute, bool* YesProbed, bool* YesDeathrayed);
	void DetermineVOSituation(EBFGBehaviourState_NPC Selection, bool* Succcess);
	void SetupZappedMaterials();
	void SwapZappedMaterials(TArray<class UMaterialInterface*>& MeshMaterials, TArray<class UMaterialInterface*>& SkeletonMaterials);
	void UpdateZappingEffect(float DeltaTime);
	void Handle_VO_Output_Play(class USoundBase* WhichSound, float FadeinSec, float StarttimeSec);
	void Handle_VO_Output_isplaying(bool* IsPlaying);
	void Handle_VO_Output_Stop(float FadeoutSec);
	void SetupIonDetonation();
	void UpdateIondetonatorEffect(float DeltaTime);
	void SetupDisintegration();
	void UpdateDisintegratorEffect(float DeltaTime);
	void ZapOMaticDeathFade(float DeltaTime);
	void Stop_All_Behaviour_VO();
	void DoWePlayCurious(bool IsExitCurious, bool* ShouldWe);

	struct FVector GetBrainSpawnLocation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_Enemy_Base_C">();
	}
	static class ABP_Character_Enemy_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_Enemy_Base_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Character_Enemy_Base_C) == 0x000010, "Wrong alignment on ABP_Character_Enemy_Base_C");
static_assert(sizeof(ABP_Character_Enemy_Base_C) == 0x000D60, "Wrong size on ABP_Character_Enemy_Base_C");
static_assert(offsetof(ABP_Character_Enemy_Base_C, UberGraphFrame) == 0x000BE0, "Member 'ABP_Character_Enemy_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, BP_ActorComponent_NPCBehaviorVO) == 0x000BE8, "Member 'ABP_Character_Enemy_Base_C::BP_ActorComponent_NPCBehaviorVO' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, BP_OverheadOpportunityWidgetComponent) == 0x000BF0, "Member 'ABP_Character_Enemy_Base_C::BP_OverheadOpportunityWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, VO_Output_Behaviour2) == 0x000BF8, "Member 'ABP_Character_Enemy_Base_C::VO_Output_Behaviour2' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, WidgetComponentAlert) == 0x000C00, "Member 'ABP_Character_Enemy_Base_C::WidgetComponentAlert' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, VO_Output_Subfluff) == 0x000C08, "Member 'ABP_Character_Enemy_Base_C::VO_Output_Subfluff' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, BP_ActorComponent_RadarObject_NPC) == 0x000C10, "Member 'ABP_Character_Enemy_Base_C::BP_ActorComponent_RadarObject_NPC' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, BP_HealthWidgetComponent) == 0x000C18, "Member 'ABP_Character_Enemy_Base_C::BP_HealthWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, VO_Output_Behaviour) == 0x000C20, "Member 'ABP_Character_Enemy_Base_C::VO_Output_Behaviour' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, PhysicalAnimation) == 0x000C28, "Member 'ABP_Character_Enemy_Base_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, LookAtHint) == 0x000C30, "Member 'ABP_Character_Enemy_Base_C::LookAtHint' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, DH1Armor) == 0x000C38, "Member 'ABP_Character_Enemy_Base_C::DH1Armor' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, CurrentState) == 0x000C40, "Member 'ABP_Character_Enemy_Base_C::CurrentState' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, DebugMode) == 0x000C41, "Member 'ABP_Character_Enemy_Base_C::DebugMode' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, OldState) == 0x000C42, "Member 'ABP_Character_Enemy_Base_C::OldState' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Map_WhichVOSoundbase) == 0x000C48, "Member 'ABP_Character_Enemy_Base_C::Map_WhichVOSoundbase' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, VO_WhichSituation) == 0x000C98, "Member 'ABP_Character_Enemy_Base_C::VO_WhichSituation' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, VO_OldSituation) == 0x000C99, "Member 'ABP_Character_Enemy_Base_C::VO_OldSituation' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, VO_Output_LastUsed) == 0x000C9C, "Member 'ABP_Character_Enemy_Base_C::VO_Output_LastUsed' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, StartDuration) == 0x000CA0, "Member 'ABP_Character_Enemy_Base_C::StartDuration' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, ZapomaticEffect) == 0x000CA4, "Member 'ABP_Character_Enemy_Base_C::ZapomaticEffect' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, MeshOriginalMaterials) == 0x000CA8, "Member 'ABP_Character_Enemy_Base_C::MeshOriginalMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, SkeletonMeshMaterials) == 0x000CB8, "Member 'ABP_Character_Enemy_Base_C::SkeletonMeshMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, SihouetteMaterials) == 0x000CC8, "Member 'ABP_Character_Enemy_Base_C::SihouetteMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, SilhouetteMaterial) == 0x000CD8, "Member 'ABP_Character_Enemy_Base_C::SilhouetteMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, SkeletonMeshElecMaterials) == 0x000CE0, "Member 'ABP_Character_Enemy_Base_C::SkeletonMeshElecMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, SkeletonMaterial) == 0x000CF0, "Member 'ABP_Character_Enemy_Base_C::SkeletonMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, ZappedTimer) == 0x000CF8, "Member 'ABP_Character_Enemy_Base_C::ZappedTimer' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, MaterialCurrentState) == 0x000CFC, "Member 'ABP_Character_Enemy_Base_C::MaterialCurrentState' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_Zappo_VO_now) == 0x000D00, "Member 'ABP_Character_Enemy_Base_C::Should_Play_Zappo_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_Injured_VO_now) == 0x000D01, "Member 'ABP_Character_Enemy_Base_C::Should_Play_Injured_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_PKHeld_VO_now) == 0x000D02, "Member 'ABP_Character_Enemy_Base_C::Should_Play_PKHeld_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_PKThrown_VO_now) == 0x000D03, "Member 'ABP_Character_Enemy_Base_C::Should_Play_PKThrown_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_Probed_VO_now) == 0x000D04, "Member 'ABP_Character_Enemy_Base_C::Should_Play_Probed_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_SurvivedProbe_VO_now) == 0x000D05, "Member 'ABP_Character_Enemy_Base_C::Should_Play_SurvivedProbe_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_Deathrayed_VO_now) == 0x000D06, "Member 'ABP_Character_Enemy_Base_C::Should_Play_Deathrayed_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_Brainext_VO_now) == 0x000D07, "Member 'ABP_Character_Enemy_Base_C::Should_Play_Brainext_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, IsIondetonator) == 0x000D08, "Member 'ABP_Character_Enemy_Base_C::IsIondetonator' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, IonDetonatorTimer) == 0x000D0C, "Member 'ABP_Character_Enemy_Base_C::IonDetonatorTimer' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, IonDetonatorDelay) == 0x000D10, "Member 'ABP_Character_Enemy_Base_C::IonDetonatorDelay' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, IonizedMaterial) == 0x000D18, "Member 'ABP_Character_Enemy_Base_C::IonizedMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, IsDisintegrated) == 0x000D20, "Member 'ABP_Character_Enemy_Base_C::IsDisintegrated' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, DisintegratorMeshDelay) == 0x000D24, "Member 'ABP_Character_Enemy_Base_C::DisintegratorMeshDelay' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, DisintegratorDissolveTimer) == 0x000D28, "Member 'ABP_Character_Enemy_Base_C::DisintegratorDissolveTimer' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, MeshDisintegrationMaterial) == 0x000D30, "Member 'ABP_Character_Enemy_Base_C::MeshDisintegrationMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, SkeletonDisintegrationMaterial) == 0x000D38, "Member 'ABP_Character_Enemy_Base_C::SkeletonDisintegrationMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Zap_O_MaticDeathMultiplier) == 0x000D40, "Member 'ABP_Character_Enemy_Base_C::Zap_O_MaticDeathMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, KilledByZap_O_Matic) == 0x000D44, "Member 'ABP_Character_Enemy_Base_C::KilledByZap_O_Matic' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Zap_O_Matic_DeathGate) == 0x000D45, "Member 'ABP_Character_Enemy_Base_C::Zap_O_Matic_DeathGate' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Zap_O_MaticTwitchTime) == 0x000D48, "Member 'ABP_Character_Enemy_Base_C::Zap_O_MaticTwitchTime' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, PreviousIsDead) == 0x000D4C, "Member 'ABP_Character_Enemy_Base_C::PreviousIsDead' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_Bumped_VO_now) == 0x000D4D, "Member 'ABP_Character_Enemy_Base_C::Should_Play_Bumped_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_BlockLOS_VO_now) == 0x000D4E, "Member 'ABP_Character_Enemy_Base_C::Should_Play_BlockLOS_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Play_AlertState_VO_now) == 0x000D4F, "Member 'ABP_Character_Enemy_Base_C::Should_Play_AlertState_VO_now' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Should_Fadeout_Zappo_VO) == 0x000D50, "Member 'ABP_Character_Enemy_Base_C::Should_Fadeout_Zappo_VO' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, Is_Zappo_VO_Fading_Out) == 0x000D51, "Member 'ABP_Character_Enemy_Base_C::Is_Zappo_VO_Fading_Out' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, NoMoreVO) == 0x000D52, "Member 'ABP_Character_Enemy_Base_C::NoMoreVO' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, IHaveBeenCurious) == 0x000D53, "Member 'ABP_Character_Enemy_Base_C::IHaveBeenCurious' has a wrong offset!");
static_assert(offsetof(ABP_Character_Enemy_Base_C, NumberOfCurious) == 0x000D54, "Member 'ABP_Character_Enemy_Base_C::NumberOfCurious' has a wrong offset!");

}

