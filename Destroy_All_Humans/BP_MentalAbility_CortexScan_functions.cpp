#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MentalAbility_CortexScan

#include "Basic.hpp"

#include "BP_MentalAbility_CortexScan_classes.hpp"
#include "BP_MentalAbility_CortexScan_parameters.hpp"


namespace SDK
{

// Function BP_MentalAbility_CortexScan.BP_MentalAbility_CortexScan_C.ExecuteUbergraph_BP_MentalAbility_CortexScan
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MentalAbility_CortexScan_C::ExecuteUbergraph_BP_MentalAbility_CortexScan(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MentalAbility_CortexScan_C", "ExecuteUbergraph_BP_MentalAbility_CortexScan");

	Params::BP_MentalAbility_CortexScan_C_ExecuteUbergraph_BP_MentalAbility_CortexScan Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MentalAbility_CortexScan.BP_MentalAbility_CortexScan_C.StartedMentalLink
// (Event, Protected, BlueprintEvent)

void UBP_MentalAbility_CortexScan_C::StartedMentalLink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MentalAbility_CortexScan_C", "StartedMentalLink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MentalAbility_CortexScan.BP_MentalAbility_CortexScan_C.UpdateAbilityDressing
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   _fDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MentalAbility_CortexScan_C::UpdateAbilityDressing(float _fDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MentalAbility_CortexScan_C", "UpdateAbilityDressing");

	Params::BP_MentalAbility_CortexScan_C_UpdateAbilityDressing Parms{};

	Parms._fDeltaTime = _fDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MentalAbility_CortexScan.BP_MentalAbility_CortexScan_C.OnAbilityEffect
// (Event, Protected, BlueprintEvent)

void UBP_MentalAbility_CortexScan_C::OnAbilityEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MentalAbility_CortexScan_C", "OnAbilityEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MentalAbility_CortexScan.BP_MentalAbility_CortexScan_C.StoppedMentalLink
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    _wasSuccessfull                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_MentalAbility_CortexScan_C::StoppedMentalLink(bool _wasSuccessfull)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MentalAbility_CortexScan_C", "StoppedMentalLink");

	Params::BP_MentalAbility_CortexScan_C_StoppedMentalLink Parms{};

	Parms._wasSuccessfull = _wasSuccessfull;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MentalAbility_CortexScan.BP_MentalAbility_CortexScan_C.OnAbilityActivationFailed
// (Event, Protected, BlueprintEvent)
// Parameters:
// EAbilityActivationResult                _abilityFailReason                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MentalAbility_CortexScan_C::OnAbilityActivationFailed(EAbilityActivationResult _abilityFailReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MentalAbility_CortexScan_C", "OnAbilityActivationFailed");

	Params::BP_MentalAbility_CortexScan_C_OnAbilityActivationFailed Parms{};

	Parms._abilityFailReason = _abilityFailReason;

	UObject::ProcessEvent(Func, &Parms);
}

}

