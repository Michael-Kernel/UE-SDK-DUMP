#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryCollectionEngine

#include "Basic.hpp"

#include "GeometryCollectionEngine_structs.hpp"
#include "Engine_classes.hpp"
#include "GeometryCollectionCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GeometryCollectionSimulationCore_structs.hpp"


namespace SDK
{

// Class GeometryCollectionEngine.GeometryCollectionActor
// 0x01F8 (0x05D0 - 0x03D8)
class AGeometryCollectionActor final : public AActor
{
public:
	class UGeometryCollectionComponent*           GeometryCollectionComponent;                       // 0x03D8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryCollectionDebugDrawComponent*  GeometryCollectionDebugDrawComponent;              // 0x03E0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E8[0x1E8];                                    // 0x03E8(0x01E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool RaycastSingle(const struct FVector& Start, const struct FVector& End, struct FHitResult* OutHit) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionActor">();
	}
	static class AGeometryCollectionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionActor>();
	}
};
static_assert(alignof(AGeometryCollectionActor) == 0x000008, "Wrong alignment on AGeometryCollectionActor");
static_assert(sizeof(AGeometryCollectionActor) == 0x0005D0, "Wrong size on AGeometryCollectionActor");
static_assert(offsetof(AGeometryCollectionActor, GeometryCollectionComponent) == 0x0003D8, "Member 'AGeometryCollectionActor::GeometryCollectionComponent' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionActor, GeometryCollectionDebugDrawComponent) == 0x0003E0, "Member 'AGeometryCollectionActor::GeometryCollectionDebugDrawComponent' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionCache
// 0x0028 (0x0050 - 0x0028)
class UGeometryCollectionCache final : public UObject
{
public:
	struct FRecordedTransformTrack                RecordedData;                                      // 0x0028(0x0010)(NativeAccessSpecifierPrivate)
	class UGeometryCollection*                    SupportedCollection;                               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  CompatibleCollectionState;                         // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionCache">();
	}
	static class UGeometryCollectionCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionCache>();
	}
};
static_assert(alignof(UGeometryCollectionCache) == 0x000008, "Wrong alignment on UGeometryCollectionCache");
static_assert(sizeof(UGeometryCollectionCache) == 0x000050, "Wrong size on UGeometryCollectionCache");
static_assert(offsetof(UGeometryCollectionCache, RecordedData) == 0x000028, "Member 'UGeometryCollectionCache::RecordedData' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionCache, SupportedCollection) == 0x000038, "Member 'UGeometryCollectionCache::SupportedCollection' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionCache, CompatibleCollectionState) == 0x000040, "Member 'UGeometryCollectionCache::CompatibleCollectionState' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionComponent
// 0x0110 (0x07A0 - 0x0690)
class UGeometryCollectionComponent final : public UMeshComponent
{
public:
	class AChaosSolverActor*                      ChaosSolverActor;                                  // 0x0690(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryCollection*                    RestCollection;                                    // 0x0698(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryCollection*                    DynamicCollection;                                 // 0x06A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFieldSystemActor*                      FieldSystem;                                       // 0x06A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Simulating;                                        // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectTypeEnum                               ObjectType;                                        // 0x06B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableClustering;                                  // 0x06B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B3[0x1];                                      // 0x06B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxClusterLevel;                                   // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 DamageThreshold;                                   // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ECollisionTypeEnum                            CollisionType;                                     // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImplicitTypeEnum                             ImplicitType;                                      // 0x06C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6CA[0x2];                                      // 0x06CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinLevelSetResolution;                             // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevelSetResolution;                             // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MassAsDensity;                                     // 0x06D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D5[0x3];                                      // 0x06D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumMassClamp;                                  // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionParticlesFraction;                        // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bouncyness;                                        // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearSleepingThreshold;                           // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSleepingThreshold;                          // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInitialVelocityTypeEnum                      InitialVelocityType;                               // 0x06F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F5[0x3];                                      // 0x06F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialLinearVelocity;                             // 0x06F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialAngularVelocity;                            // 0x0704(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeomComponentCacheParameters          CacheParameters;                                   // 0x0710(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UBoxComponent*                          DummyBoxComponent;                                 // 0x0748(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_750[0x20];                                     // 0x0750(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InteriorMaterialID;                                // 0x0770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BoneSelectedMaterialID;                            // 0x0774(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_778[0x28];                                     // 0x0778(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionComponent">();
	}
	static class UGeometryCollectionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionComponent>();
	}
};
static_assert(alignof(UGeometryCollectionComponent) == 0x000008, "Wrong alignment on UGeometryCollectionComponent");
static_assert(sizeof(UGeometryCollectionComponent) == 0x0007A0, "Wrong size on UGeometryCollectionComponent");
static_assert(offsetof(UGeometryCollectionComponent, ChaosSolverActor) == 0x000690, "Member 'UGeometryCollectionComponent::ChaosSolverActor' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, RestCollection) == 0x000698, "Member 'UGeometryCollectionComponent::RestCollection' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DynamicCollection) == 0x0006A0, "Member 'UGeometryCollectionComponent::DynamicCollection' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, FieldSystem) == 0x0006A8, "Member 'UGeometryCollectionComponent::FieldSystem' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, Simulating) == 0x0006B0, "Member 'UGeometryCollectionComponent::Simulating' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ObjectType) == 0x0006B1, "Member 'UGeometryCollectionComponent::ObjectType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, EnableClustering) == 0x0006B2, "Member 'UGeometryCollectionComponent::EnableClustering' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, MaxClusterLevel) == 0x0006B4, "Member 'UGeometryCollectionComponent::MaxClusterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DamageThreshold) == 0x0006B8, "Member 'UGeometryCollectionComponent::DamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CollisionType) == 0x0006C8, "Member 'UGeometryCollectionComponent::CollisionType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ImplicitType) == 0x0006C9, "Member 'UGeometryCollectionComponent::ImplicitType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, MinLevelSetResolution) == 0x0006CC, "Member 'UGeometryCollectionComponent::MinLevelSetResolution' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, MaxLevelSetResolution) == 0x0006D0, "Member 'UGeometryCollectionComponent::MaxLevelSetResolution' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, MassAsDensity) == 0x0006D4, "Member 'UGeometryCollectionComponent::MassAsDensity' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, Mass) == 0x0006D8, "Member 'UGeometryCollectionComponent::Mass' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, MinimumMassClamp) == 0x0006DC, "Member 'UGeometryCollectionComponent::MinimumMassClamp' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CollisionParticlesFraction) == 0x0006E0, "Member 'UGeometryCollectionComponent::CollisionParticlesFraction' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, Friction) == 0x0006E4, "Member 'UGeometryCollectionComponent::Friction' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, Bouncyness) == 0x0006E8, "Member 'UGeometryCollectionComponent::Bouncyness' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, LinearSleepingThreshold) == 0x0006EC, "Member 'UGeometryCollectionComponent::LinearSleepingThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, AngularSleepingThreshold) == 0x0006F0, "Member 'UGeometryCollectionComponent::AngularSleepingThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitialVelocityType) == 0x0006F4, "Member 'UGeometryCollectionComponent::InitialVelocityType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitialLinearVelocity) == 0x0006F8, "Member 'UGeometryCollectionComponent::InitialLinearVelocity' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitialAngularVelocity) == 0x000704, "Member 'UGeometryCollectionComponent::InitialAngularVelocity' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CacheParameters) == 0x000710, "Member 'UGeometryCollectionComponent::CacheParameters' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DummyBoxComponent) == 0x000748, "Member 'UGeometryCollectionComponent::DummyBoxComponent' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InteriorMaterialID) == 0x000770, "Member 'UGeometryCollectionComponent::InteriorMaterialID' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, BoneSelectedMaterialID) == 0x000774, "Member 'UGeometryCollectionComponent::BoneSelectedMaterialID' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionDebugDrawActor
// 0x0020 (0x03F8 - 0x03D8)
class AGeometryCollectionDebugDrawActor final : public AActor
{
public:
	float                                         PointThickness;                                    // 0x03D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x03DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTextShadow;                                       // 0x03E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TextScale;                                         // 0x03E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalScale;                                       // 0x03E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformScale;                                    // 0x03EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowScale;                                        // 0x03F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionDebugDrawActor">();
	}
	static class AGeometryCollectionDebugDrawActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionDebugDrawActor>();
	}
};
static_assert(alignof(AGeometryCollectionDebugDrawActor) == 0x000008, "Wrong alignment on AGeometryCollectionDebugDrawActor");
static_assert(sizeof(AGeometryCollectionDebugDrawActor) == 0x0003F8, "Wrong size on AGeometryCollectionDebugDrawActor");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, PointThickness) == 0x0003D8, "Member 'AGeometryCollectionDebugDrawActor::PointThickness' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, LineThickness) == 0x0003DC, "Member 'AGeometryCollectionDebugDrawActor::LineThickness' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bTextShadow) == 0x0003E0, "Member 'AGeometryCollectionDebugDrawActor::bTextShadow' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, TextScale) == 0x0003E4, "Member 'AGeometryCollectionDebugDrawActor::TextScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, NormalScale) == 0x0003E8, "Member 'AGeometryCollectionDebugDrawActor::NormalScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, TransformScale) == 0x0003EC, "Member 'AGeometryCollectionDebugDrawActor::TransformScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, ArrowScale) == 0x0003F0, "Member 'AGeometryCollectionDebugDrawActor::ArrowScale' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionDebugDrawComponent
// 0x0090 (0x0720 - 0x0690)
class UGeometryCollectionDebugDrawComponent final : public UMeshComponent
{
public:
	class AGeometryCollectionDebugDrawActor*      GeometryCollectionDebugDrawActor;                  // 0x0690(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSet;                  // 0x0698(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawLevelSet;                                // 0x06A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderLevelSetAtOrigin;                           // 0x06A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A2[0x2];                                      // 0x06A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelSetIndex;                                     // 0x06A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawTransform;                               // 0x06A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawTransformIndex;                          // 0x06A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawBoundingBox;                             // 0x06AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6AB[0x1];                                      // 0x06AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           GeometryColor;                                     // 0x06AC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawProximity;                               // 0x06BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawBreakingFace;                            // 0x06BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawBreakingRegionData;                      // 0x06BE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6BF[0x1];                                      // 0x06BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BreakingColor;                                     // 0x06C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawFace;                                    // 0x06D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawFaceIndex;                               // 0x06D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawFaceNormal;                              // 0x06D2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawSingleFace;                              // 0x06D3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SingleFaceIdx;                                     // 0x06D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FaceColor;                                         // 0x06D8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawVertex;                                  // 0x06E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawVertexIndex;                             // 0x06E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawVertexNormal;                            // 0x06EA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6EB[0x1];                                      // 0x06EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           VertexColor;                                       // 0x06EC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6FC[0x24];                                     // 0x06FC(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionDebugDrawComponent">();
	}
	static class UGeometryCollectionDebugDrawComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionDebugDrawComponent>();
	}
};
static_assert(alignof(UGeometryCollectionDebugDrawComponent) == 0x000008, "Wrong alignment on UGeometryCollectionDebugDrawComponent");
static_assert(sizeof(UGeometryCollectionDebugDrawComponent) == 0x000720, "Wrong size on UGeometryCollectionDebugDrawComponent");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor) == 0x000690, "Member 'UGeometryCollectionDebugDrawComponent::GeometryCollectionDebugDrawActor' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSet) == 0x000698, "Member 'UGeometryCollectionDebugDrawComponent::GeometryCollectionRenderLevelSet' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawLevelSet) == 0x0006A0, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawLevelSet' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bRenderLevelSetAtOrigin) == 0x0006A1, "Member 'UGeometryCollectionDebugDrawComponent::bRenderLevelSetAtOrigin' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, LevelSetIndex) == 0x0006A4, "Member 'UGeometryCollectionDebugDrawComponent::LevelSetIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawTransform) == 0x0006A8, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawTransform' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawTransformIndex) == 0x0006A9, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawTransformIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawBoundingBox) == 0x0006AA, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawBoundingBox' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, GeometryColor) == 0x0006AC, "Member 'UGeometryCollectionDebugDrawComponent::GeometryColor' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawProximity) == 0x0006BC, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawProximity' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawBreakingFace) == 0x0006BD, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawBreakingFace' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawBreakingRegionData) == 0x0006BE, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawBreakingRegionData' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, BreakingColor) == 0x0006C0, "Member 'UGeometryCollectionDebugDrawComponent::BreakingColor' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawFace) == 0x0006D0, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawFace' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawFaceIndex) == 0x0006D1, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawFaceIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawFaceNormal) == 0x0006D2, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawFaceNormal' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawSingleFace) == 0x0006D3, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawSingleFace' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, SingleFaceIdx) == 0x0006D4, "Member 'UGeometryCollectionDebugDrawComponent::SingleFaceIdx' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, FaceColor) == 0x0006D8, "Member 'UGeometryCollectionDebugDrawComponent::FaceColor' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawVertex) == 0x0006E8, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawVertex' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawVertexIndex) == 0x0006E9, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawVertexIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, bDebugDrawVertexNormal) == 0x0006EA, "Member 'UGeometryCollectionDebugDrawComponent::bDebugDrawVertexNormal' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, VertexColor) == 0x0006EC, "Member 'UGeometryCollectionDebugDrawComponent::VertexColor' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollection
// 0x0050 (0x0078 - 0x0028)
class UGeometryCollection final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  PersistentGuid;                                    // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  StateGuid;                                         // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         InteriorMaterialIndex;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BoneSelectedMaterialIndex;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x10];                                      // 0x0068(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollection">();
	}
	static class UGeometryCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollection>();
	}
};
static_assert(alignof(UGeometryCollection) == 0x000008, "Wrong alignment on UGeometryCollection");
static_assert(sizeof(UGeometryCollection) == 0x000078, "Wrong size on UGeometryCollection");
static_assert(offsetof(UGeometryCollection, Materials) == 0x000030, "Member 'UGeometryCollection::Materials' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, PersistentGuid) == 0x000040, "Member 'UGeometryCollection::PersistentGuid' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, StateGuid) == 0x000050, "Member 'UGeometryCollection::StateGuid' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, InteriorMaterialIndex) == 0x000060, "Member 'UGeometryCollection::InteriorMaterialIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, BoneSelectedMaterialIndex) == 0x000064, "Member 'UGeometryCollection::BoneSelectedMaterialIndex' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionRenderLevelSetActor
// 0x0098 (0x0470 - 0x03D8)
class AGeometryCollectionRenderLevelSetActor final : public AActor
{
public:
	class UVolumeTexture*                         TargetVolumeTexture;                               // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              RayMarchMaterial;                                  // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceTolerance;                                  // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Isovalue;                                          // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RenderVolumeBoundingBox;                           // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F2[0x7E];                                     // 0x03F2(0x007E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionRenderLevelSetActor">();
	}
	static class AGeometryCollectionRenderLevelSetActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionRenderLevelSetActor>();
	}
};
static_assert(alignof(AGeometryCollectionRenderLevelSetActor) == 0x000008, "Wrong alignment on AGeometryCollectionRenderLevelSetActor");
static_assert(sizeof(AGeometryCollectionRenderLevelSetActor) == 0x000470, "Wrong size on AGeometryCollectionRenderLevelSetActor");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture) == 0x0003D8, "Member 'AGeometryCollectionRenderLevelSetActor::TargetVolumeTexture' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, RayMarchMaterial) == 0x0003E0, "Member 'AGeometryCollectionRenderLevelSetActor::RayMarchMaterial' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, SurfaceTolerance) == 0x0003E8, "Member 'AGeometryCollectionRenderLevelSetActor::SurfaceTolerance' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, Isovalue) == 0x0003EC, "Member 'AGeometryCollectionRenderLevelSetActor::Isovalue' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, Enabled) == 0x0003F0, "Member 'AGeometryCollectionRenderLevelSetActor::Enabled' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox) == 0x0003F1, "Member 'AGeometryCollectionRenderLevelSetActor::RenderVolumeBoundingBox' has a wrong offset!");

// Class GeometryCollectionEngine.StaticMeshSimulationComponent
// 0x0040 (0x0168 - 0x0128)
class UStaticMeshSimulationComponent final : public UActorComponent
{
public:
	bool                                          Simulating;                                        // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectTypeEnum                               ObjectType;                                        // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionTypeEnum                            CollisionType;                                     // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInitialVelocityTypeEnum                      InitialVelocityType;                               // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialLinearVelocity;                             // 0x0134(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialAngularVelocity;                            // 0x0140(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageThreshold;                                   // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bouncyness;                                        // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AChaosSolverActor*                      ChaosSolverActor;                                  // 0x0158(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x8];                                      // 0x0160(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaticMeshSimulationComponent">();
	}
	static class UStaticMeshSimulationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticMeshSimulationComponent>();
	}
};
static_assert(alignof(UStaticMeshSimulationComponent) == 0x000008, "Wrong alignment on UStaticMeshSimulationComponent");
static_assert(sizeof(UStaticMeshSimulationComponent) == 0x000168, "Wrong size on UStaticMeshSimulationComponent");
static_assert(offsetof(UStaticMeshSimulationComponent, Simulating) == 0x000128, "Member 'UStaticMeshSimulationComponent::Simulating' has a wrong offset!");
static_assert(offsetof(UStaticMeshSimulationComponent, ObjectType) == 0x000129, "Member 'UStaticMeshSimulationComponent::ObjectType' has a wrong offset!");
static_assert(offsetof(UStaticMeshSimulationComponent, Mass) == 0x00012C, "Member 'UStaticMeshSimulationComponent::Mass' has a wrong offset!");
static_assert(offsetof(UStaticMeshSimulationComponent, CollisionType) == 0x000130, "Member 'UStaticMeshSimulationComponent::CollisionType' has a wrong offset!");
static_assert(offsetof(UStaticMeshSimulationComponent, InitialVelocityType) == 0x000131, "Member 'UStaticMeshSimulationComponent::InitialVelocityType' has a wrong offset!");
static_assert(offsetof(UStaticMeshSimulationComponent, InitialLinearVelocity) == 0x000134, "Member 'UStaticMeshSimulationComponent::InitialLinearVelocity' has a wrong offset!");
static_assert(offsetof(UStaticMeshSimulationComponent, InitialAngularVelocity) == 0x000140, "Member 'UStaticMeshSimulationComponent::InitialAngularVelocity' has a wrong offset!");
static_assert(offsetof(UStaticMeshSimulationComponent, DamageThreshold) == 0x00014C, "Member 'UStaticMeshSimulationComponent::DamageThreshold' has a wrong offset!");
static_assert(offsetof(UStaticMeshSimulationComponent, Friction) == 0x000150, "Member 'UStaticMeshSimulationComponent::Friction' has a wrong offset!");
static_assert(offsetof(UStaticMeshSimulationComponent, Bouncyness) == 0x000154, "Member 'UStaticMeshSimulationComponent::Bouncyness' has a wrong offset!");
static_assert(offsetof(UStaticMeshSimulationComponent, ChaosSolverActor) == 0x000158, "Member 'UStaticMeshSimulationComponent::ChaosSolverActor' has a wrong offset!");

}

